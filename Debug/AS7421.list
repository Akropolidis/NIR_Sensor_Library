
AS7421.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005094  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08005238  08005238  00015238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005654  08005654  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  08005654  08005654  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005654  08005654  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005654  08005654  00015654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005658  08005658  00015658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800565c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200001d0  0800582c  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  0800582c  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002b53  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b50  00000000  00000000  00022d96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000560  00000000  00000000  000238e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003fd  00000000  00000000  00023e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001012e  00000000  00000000  00024245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000042d0  00000000  00000000  00034373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000564d3  00000000  00000000  00038643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000023a8  00000000  00000000  0008eb18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00090ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d0 	.word	0x200001d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800521c 	.word	0x0800521c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	0800521c 	.word	0x0800521c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <AS7421_readRegister>:
static void AS7421_writeRegisters(uint8_t startAddr, uint8_t bufferSize, uint8_t *val);
static uint16_t byteSwap16(uint16_t value);

//Reads from a given location from the AS7421
static uint8_t AS7421_readRegister(uint8_t addr)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
	char data = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	73fb      	strb	r3, [r7, #15]
	I2C1_byteRead(AS7421_ADDR, addr, &data);
 8000bc6:	f107 020f 	add.w	r2, r7, #15
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	2064      	movs	r0, #100	; 0x64
 8000bd0:	f001 fa58 	bl	8002084 <I2C1_byteRead>
	return data;
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <AS7421_readRegisters>:

//Reads from consecutive register locations on the AS7421
static void AS7421_readRegisters(uint8_t addr, uint8_t bufferSize, uint8_t *data)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	603a      	str	r2, [r7, #0]
 8000be8:	71fb      	strb	r3, [r7, #7]
 8000bea:	460b      	mov	r3, r1
 8000bec:	71bb      	strb	r3, [r7, #6]
	I2C1_burstRead(AS7421_ADDR, addr, bufferSize, (char *)data);
 8000bee:	79ba      	ldrb	r2, [r7, #6]
 8000bf0:	79f9      	ldrb	r1, [r7, #7]
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	2064      	movs	r0, #100	; 0x64
 8000bf6:	f001 fabf 	bl	8002178 <I2C1_burstRead>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <AS7421_writeRegister>:

//Write a value to a given location on the AS7421
static void AS7421_writeRegister(uint8_t addr, uint8_t val)
{
 8000c02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c06:	b087      	sub	sp, #28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	460a      	mov	r2, r1
 8000c0e:	71fb      	strb	r3, [r7, #7]
 8000c10:	4613      	mov	r3, r2
 8000c12:	71bb      	strb	r3, [r7, #6]
 8000c14:	466b      	mov	r3, sp
 8000c16:	461e      	mov	r6, r3
	uint8_t bufferSize = 1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	75fb      	strb	r3, [r7, #23]
	char data[bufferSize];
 8000c1c:	7df9      	ldrb	r1, [r7, #23]
 8000c1e:	460b      	mov	r3, r1
 8000c20:	3b01      	subs	r3, #1
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	b2cb      	uxtb	r3, r1
 8000c26:	2200      	movs	r2, #0
 8000c28:	4698      	mov	r8, r3
 8000c2a:	4691      	mov	r9, r2
 8000c2c:	f04f 0200 	mov.w	r2, #0
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c40:	b2cb      	uxtb	r3, r1
 8000c42:	2200      	movs	r2, #0
 8000c44:	461c      	mov	r4, r3
 8000c46:	4615      	mov	r5, r2
 8000c48:	f04f 0200 	mov.w	r2, #0
 8000c4c:	f04f 0300 	mov.w	r3, #0
 8000c50:	00eb      	lsls	r3, r5, #3
 8000c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c56:	00e2      	lsls	r2, r4, #3
 8000c58:	460b      	mov	r3, r1
 8000c5a:	3307      	adds	r3, #7
 8000c5c:	08db      	lsrs	r3, r3, #3
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	ebad 0d03 	sub.w	sp, sp, r3
 8000c64:	466b      	mov	r3, sp
 8000c66:	3300      	adds	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]

	data[0] = val;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	79ba      	ldrb	r2, [r7, #6]
 8000c6e:	701a      	strb	r2, [r3, #0]
	I2C1_burstWrite(AS7421_ADDR, addr, bufferSize, data);
 8000c70:	7dfa      	ldrb	r2, [r7, #23]
 8000c72:	79f9      	ldrb	r1, [r7, #7]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2064      	movs	r0, #100	; 0x64
 8000c78:	f001 fb1a 	bl	80022b0 <I2C1_burstWrite>
 8000c7c:	46b5      	mov	sp, r6
}
 8000c7e:	bf00      	nop
 8000c80:	371c      	adds	r7, #28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c88 <AS7421_writeRegisters>:

//Write values to consecutive register locations on the AS7421
static void AS7421_writeRegisters(uint8_t startAddr, uint8_t bufferSize, uint8_t *val)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	603a      	str	r2, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
 8000c94:	460b      	mov	r3, r1
 8000c96:	71bb      	strb	r3, [r7, #6]
//
//	for (int i = 0; i < bufferSize; i++)
//	{
//		data[i] = val[i];
//	}
	I2C1_burstWrite(AS7421_ADDR, startAddr, bufferSize, (char *)val);
 8000c98:	79ba      	ldrb	r2, [r7, #6]
 8000c9a:	79f9      	ldrb	r1, [r7, #7]
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	2064      	movs	r0, #100	; 0x64
 8000ca0:	f001 fb06 	bl	80022b0 <I2C1_burstWrite>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <byteSwap16>:

static uint16_t byteSwap16(uint16_t value) {
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	80fb      	strh	r3, [r7, #6]
    return (value >> 8) | (value << 8);
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	88fb      	ldrh	r3, [r7, #6]
 8000cc0:	021b      	lsls	r3, r3, #8
 8000cc2:	b21b      	sxth	r3, r3
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	b21b      	sxth	r3, r3
 8000cc8:	b29b      	uxth	r3, r3
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <fpu_enable>:
// Enable FPU
void fpu_enable()
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
	/*Enable Floating Point Unit: Enable CP10 and CP11 full access*/
	SCB->CPACR |= (1U<<20);
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <fpu_enable+0x50>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce2:	4a11      	ldr	r2, [pc, #68]	; (8000d28 <fpu_enable+0x50>)
 8000ce4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |= (1U<<21);
 8000cec:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <fpu_enable+0x50>)
 8000cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf2:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <fpu_enable+0x50>)
 8000cf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |= (1U<<22);
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <fpu_enable+0x50>)
 8000cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d02:	4a09      	ldr	r2, [pc, #36]	; (8000d28 <fpu_enable+0x50>)
 8000d04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |= (1U<<23);
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <fpu_enable+0x50>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <fpu_enable+0x50>)
 8000d14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <isConnected>:

//Returns TRUE if the device sends an ACK indicating it is connected
bool isConnected()
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
	uint32_t timeout = 1000; //Timeout to connect set to 1000ms
 8000d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d36:	60fb      	str	r3, [r7, #12]
	unsigned long startTime = getMillis();
 8000d38:	f001 fcb0 	bl	800269c <getMillis>
 8000d3c:	60b8      	str	r0, [r7, #8]

	while ((getMillis() - startTime) < timeout)
 8000d3e:	e035      	b.n	8000dac <isConnected+0x80>
	{
		volatile int tmp;

		/* Wait until bus not busy */
		while (I2C1->SR2 & (SR2_BUSY)){}
 8000d40:	bf00      	nop
 8000d42:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <isConnected+0x9c>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d1f9      	bne.n	8000d42 <isConnected+0x16>

		/* Generate start condition */
		I2C1->CR1 |= CR1_START;
 8000d4e:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <isConnected+0x9c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a1d      	ldr	r2, [pc, #116]	; (8000dc8 <isConnected+0x9c>)
 8000d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d58:	6013      	str	r3, [r2, #0]

		/* Wait until start condition flag is set */
		while (!(I2C1->SR1 & (SR1_SB))){}
 8000d5a:	bf00      	nop
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <isConnected+0x9c>)
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d0f9      	beq.n	8000d5c <isConnected+0x30>

		/* Transmit slave address + Write (0) */
		I2C1->DR = AS7421_WRITE_ADDR;
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <isConnected+0x9c>)
 8000d6a:	22c8      	movs	r2, #200	; 0xc8
 8000d6c:	611a      	str	r2, [r3, #16]

		/* Wait until address flag is set */
		while (!(I2C1->SR1 & (SR1_ADDR))){}
 8000d6e:	bf00      	nop
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <isConnected+0x9c>)
 8000d72:	695b      	ldr	r3, [r3, #20]
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d0f9      	beq.n	8000d70 <isConnected+0x44>

		/* Clear address flag by reading SR2 register */
		tmp = I2C1->SR2;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <isConnected+0x9c>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	607b      	str	r3, [r7, #4]

		if (I2C1->SR1 & SR1_AF)
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <isConnected+0x9c>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d006      	beq.n	8000d9c <isConnected+0x70>
		{
			//No ACK received, address not acknowledged
			I2C1->CR1 |= CR1_STOP;  // Send STOP condition
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <isConnected+0x9c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <isConnected+0x9c>)
 8000d94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d98:	6013      	str	r3, [r2, #0]
			continue;
 8000d9a:	e007      	b.n	8000dac <isConnected+0x80>
		}

		//Address acknowledged, device is connected
		I2C1->CR1 |= CR1_STOP; // Send STOP condition
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <isConnected+0x9c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <isConnected+0x9c>)
 8000da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da6:	6013      	str	r3, [r2, #0]
		return true;
 8000da8:	2301      	movs	r3, #1
 8000daa:	e008      	b.n	8000dbe <isConnected+0x92>
	while ((getMillis() - startTime) < timeout)
 8000dac:	f001 fc76 	bl	800269c <getMillis>
 8000db0:	4602      	mov	r2, r0
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d8c1      	bhi.n	8000d40 <isConnected+0x14>
	}
	//Timeout to connect has expired, hence device is not connected
	return false;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40005400 	.word	0x40005400

08000dcc <initialize>:

//Initializes the sensor with basic settings
//Returns false if sensor is not detected
bool initialize()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	SysTick_Init();
 8000dd0:	f001 fc32 	bl	8002638 <SysTick_Init>
	uart2_rxtx_init();
 8000dd4:	f001 fc7a 	bl	80026cc <uart2_rxtx_init>
	I2C1_Init();
 8000dd8:	f001 f8b0 	bl	8001f3c <I2C1_Init>
	fpu_enable();
 8000ddc:	f7ff ff7c 	bl	8000cd8 <fpu_enable>

	if (isConnected() == false)
 8000de0:	f7ff ffa4 	bl	8000d2c <isConnected>
 8000de4:	4603      	mov	r3, r0
 8000de6:	f083 0301 	eor.w	r3, r3, #1
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <initialize+0x28>
	{
		return false; //Check for sensor presence
 8000df0:	2300      	movs	r3, #0
 8000df2:	e022      	b.n	8000e3a <initialize+0x6e>
	}

	//Add initialization functions
	configueLEDWait(false); //False is to enable LED wait time between cycles
 8000df4:	2000      	movs	r0, #0
 8000df6:	f000 f84b 	bl	8000e90 <configueLEDWait>
	configureWaitCycle(true);
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f000 f875 	bl	8000eea <configureWaitCycle>
	setInterLED(2);
 8000e00:	2002      	movs	r0, #2
 8000e02:	f000 f864 	bl	8000ece <setInterLED>
	setLTF_CCOUNT(1023);
 8000e06:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8000e0a:	f000 f8bd 	bl	8000f88 <setLTF_CCOUNT>

	configureLEDAuto(false);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 f8da 	bl	8000fc8 <configureLEDAuto>
	setWaitTime(10);
 8000e14:	200a      	movs	r0, #10
 8000e16:	f000 f887 	bl	8000f28 <setWaitTime>
	setIntegrationTime(20);
 8000e1a:	2014      	movs	r0, #20
 8000e1c:	f000 f8fc 	bl	8001018 <setIntegrationTime>
	numMeasurements(CONTINUOUS);
 8000e20:	20ff      	movs	r0, #255	; 0xff
 8000e22:	f000 f929 	bl	8001078 <numMeasurements>
	setIntegrationMode(INTEGRATIONCYLE_ABCD);
 8000e26:	2003      	movs	r0, #3
 8000e28:	f000 f934 	bl	8001094 <setIntegrationMode>
	configureAutozero(true, AZ_WTIME_128US, 0, 1);
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2102      	movs	r1, #2
 8000e32:	2001      	movs	r0, #1
 8000e34:	f000 f952 	bl	80010dc <configureAutozero>
//	configueLEDWait(false);

	return true;
 8000e38:	2301      	movs	r3, #1
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <startup>:

void startup()
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
	bool works = initialize();
 8000e46:	f7ff ffc1 	bl	8000dcc <initialize>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
	if (works)
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d014      	beq.n	8000e7e <startup+0x3e>
	{
		setIntegrationTime(65.5);
 8000e54:	2041      	movs	r0, #65	; 0x41
 8000e56:	f000 f8df 	bl	8001018 <setIntegrationTime>
		setWaitTime(5);
 8000e5a:	2005      	movs	r0, #5
 8000e5c:	f000 f864 	bl	8000f28 <setWaitTime>

		sleep();
 8000e60:	f000 f9a8 	bl	80011b4 <sleep>
		powerup();
 8000e64:	f000 f991 	bl	800118a <powerup>
		configureSMUX();
 8000e68:	f000 fb24 	bl	80014b4 <configureSMUX>
		configureGain(6); //Sets gain for all ADCs
 8000e6c:	2006      	movs	r0, #6
 8000e6e:	f000 fb35 	bl	80014dc <configureGain>
		configureLEDs(true, ALL_LEDS, LED_CURRENT_LIMIT_75MA);
 8000e72:	2201      	movs	r2, #1
 8000e74:	211f      	movs	r1, #31
 8000e76:	2001      	movs	r0, #1
 8000e78:	f000 fb7d 	bl	8001576 <configureLEDs>
 8000e7c:	e003      	b.n	8000e86 <startup+0x46>
	}
	else
	{
		printf("Sensor failed to respond \n\r");
 8000e7e:	4803      	ldr	r0, [pc, #12]	; (8000e8c <startup+0x4c>)
 8000e80:	f002 fa24 	bl	80032cc <iprintf>
		return;
 8000e84:	bf00      	nop
	}
}
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	08005238 	.word	0x08005238

08000e90 <configueLEDWait>:
	stopMeasurements();
}

//Configure LED_WAIT_OFF or Disable LED_WAIT_OFF to modify waiting time between integration cycle A to D
void configueLEDWait(bool setting)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
	uint8_t value = AS7421_readRegister(CFG_MISC); //Read existing state
 8000e9a:	2038      	movs	r0, #56	; 0x38
 8000e9c:	f7ff fe8c 	bl	8000bb8 <AS7421_readRegister>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	73fb      	strb	r3, [r7, #15]
	if (setting)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d004      	beq.n	8000eb4 <configueLEDWait+0x24>
	{
		value |= (1U << 2); //Set LED_WAIT_OFF bit (bit 2)
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	73fb      	strb	r3, [r7, #15]
 8000eb2:	e003      	b.n	8000ebc <configueLEDWait+0x2c>
	}
	else
	{
		value &= ~(1U << 2); //Reset LED_WAIT_OFF bit (bit 2)
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	f023 0304 	bic.w	r3, r3, #4
 8000eba:	73fb      	strb	r3, [r7, #15]
	}

	AS7421_writeRegister(CFG_MISC, value); //Write value to CFG_MISC register to configure the LED_WAIT_OFF bit
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	2038      	movs	r0, #56	; 0x38
 8000ec2:	f7ff fe9e 	bl	8000c02 <AS7421_writeRegister>
}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <setInterLED>:

// Set Wait time (LED_WAIT) between switching on the LED and begin of integration/modulation. Wait time = 1024us * waitTime
void setInterLED(uint8_t waitTime)
{
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b082      	sub	sp, #8
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	71fb      	strb	r3, [r7, #7]
	if (waitTime > 255)
	{
        waitTime = 255; // Set to maximum value if out of range
	}

	AS7421_writeRegister(LED_WAIT, waitTime);
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	4619      	mov	r1, r3
 8000edc:	203d      	movs	r0, #61	; 0x3d
 8000ede:	f7ff fe90 	bl	8000c02 <AS7421_writeRegister>
}
 8000ee2:	bf00      	nop
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <configureWaitCycle>:

//Configure the waiting time between integration cycle A to D (programmable with LTF_WTIME)
void configureWaitCycle(bool setting)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b084      	sub	sp, #16
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	71fb      	strb	r3, [r7, #7]
	uint8_t value = AS7421_readRegister(CFG_MISC); //Read existing state
 8000ef4:	2038      	movs	r0, #56	; 0x38
 8000ef6:	f7ff fe5f 	bl	8000bb8 <AS7421_readRegister>
 8000efa:	4603      	mov	r3, r0
 8000efc:	73fb      	strb	r3, [r7, #15]
	if (setting)
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d004      	beq.n	8000f0e <configureWaitCycle+0x24>
	{
		value |= (1U << 1); //Set WAIT_CYCLE_ON bit (bit 1)
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	e003      	b.n	8000f16 <configureWaitCycle+0x2c>
	}
	else
	{
		value &= ~(1U << 1); //Reset WAIT_CYCLE_ON bit (bit 1)
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	f023 0302 	bic.w	r3, r3, #2
 8000f14:	73fb      	strb	r3, [r7, #15]
	}

	AS7421_writeRegister(CFG_MISC, value); //Write value to CFG_MISC register to configure the WAIT_CYCLE_ON bit
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	2038      	movs	r0, #56	; 0x38
 8000f1c:	f7ff fe71 	bl	8000c02 <AS7421_writeRegister>
}
 8000f20:	bf00      	nop
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <setWaitTime>:

//Programs the wait time (WTIME) in ms between two consecutive spectral measurements
void setWaitTime(uint32_t waitTime)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	uint32_t waitCounts = ((waitTime * F_CLKMOD) / 1000) - 1;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a12      	ldr	r2, [pc, #72]	; (8000f7c <setWaitTime+0x54>)
 8000f34:	fb02 f303 	mul.w	r3, r2, r3
 8000f38:	4a11      	ldr	r2, [pc, #68]	; (8000f80 <setWaitTime+0x58>)
 8000f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3e:	099b      	lsrs	r3, r3, #6
 8000f40:	3b01      	subs	r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]

	uint8_t data[3] = {0};
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <setWaitTime+0x5c>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	813b      	strh	r3, [r7, #8]
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	72bb      	strb	r3, [r7, #10]
	data[0] = waitCounts & 0xFF; //low byte
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	723b      	strb	r3, [r7, #8]
	data[1] = (waitCounts >> 8) & 0xFF; //mid byte
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	0a1b      	lsrs	r3, r3, #8
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	727b      	strb	r3, [r7, #9]
	data[2] = (waitCounts >> 16) & 0xFF; //high byte
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	0c1b      	lsrs	r3, r3, #16
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	72bb      	strb	r3, [r7, #10]

	AS7421_writeRegisters(LTF_WTIME, 3, data);
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	461a      	mov	r2, r3
 8000f6a:	2103      	movs	r1, #3
 8000f6c:	2064      	movs	r0, #100	; 0x64
 8000f6e:	f7ff fe8b 	bl	8000c88 <AS7421_writeRegisters>
}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	000f4240 	.word	0x000f4240
 8000f80:	10624dd3 	.word	0x10624dd3
 8000f84:	08005270 	.word	0x08005270

08000f88 <setLTF_CCOUNT>:

void setLTF_CCOUNT(uint16_t ccount_value)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80fb      	strh	r3, [r7, #6]
    // Validate the input value
    if (ccount_value > 0xFFFF) {
        ccount_value = 0xFFFF;  // Cap to maximum 16-bit value
    }
	uint8_t data[2] = {0};
 8000f92:	2300      	movs	r3, #0
 8000f94:	81bb      	strh	r3, [r7, #12]
	ccount_value = byteSwap16(ccount_value);
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fe87 	bl	8000cac <byteSwap16>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]

	data[0] = ccount_value & 0xFF; //low byte
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	733b      	strb	r3, [r7, #12]
	data[1] = (ccount_value >> 8) & 0xFF; //high byte
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	0a1b      	lsrs	r3, r3, #8
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	737b      	strb	r3, [r7, #13]

    // Write the value to the LTF_CCOUNT register
    AS7421_writeRegisters(LTF_CCOUNT, 2, data);
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	2102      	movs	r1, #2
 8000fba:	203a      	movs	r0, #58	; 0x3a
 8000fbc:	f7ff fe64 	bl	8000c88 <AS7421_writeRegisters>
}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <configureLEDAuto>:

//Controls NIR light source during spectral measurement
void configureLEDAuto(bool mode)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
	uint8_t value = AS7421_readRegister(ENABLE); //Read existing state
 8000fd2:	2060      	movs	r0, #96	; 0x60
 8000fd4:	f7ff fdf0 	bl	8000bb8 <AS7421_readRegister>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	73fb      	strb	r3, [r7, #15]
	if (mode)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d008      	beq.n	8000ff4 <configureLEDAuto+0x2c>
	{
		value |= (1U << 4); //Set LED_AUTO bit (bit 4 and 5)
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	f043 0310 	orr.w	r3, r3, #16
 8000fe8:	73fb      	strb	r3, [r7, #15]
		value |= (1U << 5);
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	f043 0320 	orr.w	r3, r3, #32
 8000ff0:	73fb      	strb	r3, [r7, #15]
 8000ff2:	e007      	b.n	8001004 <configureLEDAuto+0x3c>
	}
	else
	{
		value &= ~(1U << 4); //Reset LED_AUTO bit (bit 4 and 5)
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	f023 0310 	bic.w	r3, r3, #16
 8000ffa:	73fb      	strb	r3, [r7, #15]
		value &= ~(1U << 5);
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	f023 0320 	bic.w	r3, r3, #32
 8001002:	73fb      	strb	r3, [r7, #15]
	}

	AS7421_writeRegister(ENABLE, value);
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	4619      	mov	r1, r3
 8001008:	2060      	movs	r0, #96	; 0x60
 800100a:	f7ff fdfa 	bl	8000c02 <AS7421_writeRegister>
}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <setIntegrationTime>:

//Programs the integration time (ITIME) in ms of the LTF converter
void setIntegrationTime(uint32_t intTime)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	uint32_t intCounts = ((intTime * F_CLKMOD) / 1000) - 1;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <setIntegrationTime+0x54>)
 8001024:	fb02 f303 	mul.w	r3, r2, r3
 8001028:	4a11      	ldr	r2, [pc, #68]	; (8001070 <setIntegrationTime+0x58>)
 800102a:	fba2 2303 	umull	r2, r3, r2, r3
 800102e:	099b      	lsrs	r3, r3, #6
 8001030:	3b01      	subs	r3, #1
 8001032:	60fb      	str	r3, [r7, #12]

	uint8_t data[3] = {0};
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <setIntegrationTime+0x5c>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	813b      	strh	r3, [r7, #8]
 800103a:	2300      	movs	r3, #0
 800103c:	72bb      	strb	r3, [r7, #10]
	data[0] = intCounts & 0xFF;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	723b      	strb	r3, [r7, #8]
	data[1] = (intCounts >> 8) & 0xFF;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	0a1b      	lsrs	r3, r3, #8
 8001048:	b2db      	uxtb	r3, r3
 800104a:	727b      	strb	r3, [r7, #9]
	data[2] = (intCounts >> 16) & 0xFF;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	0c1b      	lsrs	r3, r3, #16
 8001050:	b2db      	uxtb	r3, r3
 8001052:	72bb      	strb	r3, [r7, #10]

	AS7421_writeRegisters(LTF_ITIME, 3, data);
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	461a      	mov	r2, r3
 800105a:	2103      	movs	r1, #3
 800105c:	2061      	movs	r0, #97	; 0x61
 800105e:	f7ff fe13 	bl	8000c88 <AS7421_writeRegisters>
}
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	000f4240 	.word	0x000f4240
 8001070:	10624dd3 	.word	0x10624dd3
 8001074:	08005270 	.word	0x08005270

08001078 <numMeasurements>:

void numMeasurements(uint8_t counts) //specifying number of measurements
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
	if (counts > 255)
	{
		counts = 255; // Set to maximum value if out of range
	}

	AS7421_writeRegister(LTF_ICOUNT, counts);
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	4619      	mov	r1, r3
 8001086:	2069      	movs	r0, #105	; 0x69
 8001088:	f7ff fdbb 	bl	8000c02 <AS7421_writeRegister>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <setIntegrationMode>:

//16 channels (A), 32 channels (AB), 48 channels (ABC), 64 channels (ABCD)
void setIntegrationMode(uint8_t mode)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	71fb      	strb	r3, [r7, #7]
	if (mode > INTEGRATIONCYLE_ABCD)
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d901      	bls.n	80010a8 <setIntegrationMode+0x14>
	{
		mode = INTEGRATIONCYLE_ABCD; //Limit mode to 2 bits
 80010a4:	2303      	movs	r3, #3
 80010a6:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t value = AS7421_readRegister(CFG_LTF); //Read existing state
 80010a8:	2067      	movs	r0, #103	; 0x67
 80010aa:	f7ff fd85 	bl	8000bb8 <AS7421_readRegister>
 80010ae:	4603      	mov	r3, r0
 80010b0:	73fb      	strb	r3, [r7, #15]
	value &= 0b11100111; //Clear LTF_CYCLE bits
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	f023 0318 	bic.w	r3, r3, #24
 80010b8:	73fb      	strb	r3, [r7, #15]
	value |= (mode << 3); //Set LTF_CYCLE bits with user's choice
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	b25a      	sxtb	r2, r3
 80010c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b25b      	sxtb	r3, r3
 80010c8:	73fb      	strb	r3, [r7, #15]

	AS7421_writeRegister(CFG_LTF, value);
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	4619      	mov	r1, r3
 80010ce:	2067      	movs	r0, #103	; 0x67
 80010d0:	f7ff fd97 	bl	8000c02 <AS7421_writeRegister>
}
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <configureAutozero>:


void configureAutozero(bool enable, uint8_t az_waitTime, uint8_t iteration, uint8_t cycle)
{
 80010dc:	b590      	push	{r4, r7, lr}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4604      	mov	r4, r0
 80010e4:	4608      	mov	r0, r1
 80010e6:	4611      	mov	r1, r2
 80010e8:	461a      	mov	r2, r3
 80010ea:	4623      	mov	r3, r4
 80010ec:	71fb      	strb	r3, [r7, #7]
 80010ee:	4603      	mov	r3, r0
 80010f0:	71bb      	strb	r3, [r7, #6]
 80010f2:	460b      	mov	r3, r1
 80010f4:	717b      	strb	r3, [r7, #5]
 80010f6:	4613      	mov	r3, r2
 80010f8:	713b      	strb	r3, [r7, #4]
	uint8_t value = AS7421_readRegister(CFG_AZ);
 80010fa:	206d      	movs	r0, #109	; 0x6d
 80010fc:	f7ff fd5c 	bl	8000bb8 <AS7421_readRegister>
 8001100:	4603      	mov	r3, r0
 8001102:	73fb      	strb	r3, [r7, #15]

	value |= (1U << 7); //Enable AZ_ON (bit 7)
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800110a:	73fb      	strb	r3, [r7, #15]
	if (az_waitTime > 0b11)
 800110c:	79bb      	ldrb	r3, [r7, #6]
 800110e:	2b03      	cmp	r3, #3
 8001110:	d901      	bls.n	8001116 <configureAutozero+0x3a>
	{
		az_waitTime = 0b11;
 8001112:	2303      	movs	r3, #3
 8001114:	71bb      	strb	r3, [r7, #6]
	}
    value &= ~(0b11 << 5);  // Clear the AZ_WTIME bits (bits 5 and 6)
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800111c:	73fb      	strb	r3, [r7, #15]
	value |= (az_waitTime << 5); //Set AZ_WTIME (bit 5 and 6)
 800111e:	79bb      	ldrb	r3, [r7, #6]
 8001120:	015b      	lsls	r3, r3, #5
 8001122:	b25a      	sxtb	r2, r3
 8001124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001128:	4313      	orrs	r3, r2
 800112a:	b25b      	sxtb	r3, r3
 800112c:	73fb      	strb	r3, [r7, #15]

    value &= ~(1U << 4);  // Clear the AZ_EN bit
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	f023 0310 	bic.w	r3, r3, #16
 8001134:	73fb      	strb	r3, [r7, #15]
	value |= (enable << 4); //Set AZ_EN (bit 4)
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	011b      	lsls	r3, r3, #4
 800113a:	b25a      	sxtb	r2, r3
 800113c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001140:	4313      	orrs	r3, r2
 8001142:	b25b      	sxtb	r3, r3
 8001144:	73fb      	strb	r3, [r7, #15]

	value &= ~(1U << 3);  // Clear the AZ_CYCLE bit
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	f023 0308 	bic.w	r3, r3, #8
 800114c:	73fb      	strb	r3, [r7, #15]
	value |= (cycle << 3); //Set AZ_CYCLE (bit 3)
 800114e:	793b      	ldrb	r3, [r7, #4]
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	b25a      	sxtb	r2, r3
 8001154:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001158:	4313      	orrs	r3, r2
 800115a:	b25b      	sxtb	r3, r3
 800115c:	73fb      	strb	r3, [r7, #15]

	if (iteration > 0b111)
 800115e:	797b      	ldrb	r3, [r7, #5]
 8001160:	2b07      	cmp	r3, #7
 8001162:	d901      	bls.n	8001168 <configureAutozero+0x8c>
	{
		iteration = 0b111;
 8001164:	2307      	movs	r3, #7
 8001166:	717b      	strb	r3, [r7, #5]
	}
    value &= ~0b111;  // Clear the iteration bits (bits 0, 1, and 2)
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	f023 0307 	bic.w	r3, r3, #7
 800116e:	73fb      	strb	r3, [r7, #15]
	value |= iteration;
 8001170:	7bfa      	ldrb	r2, [r7, #15]
 8001172:	797b      	ldrb	r3, [r7, #5]
 8001174:	4313      	orrs	r3, r2
 8001176:	73fb      	strb	r3, [r7, #15]

    AS7421_writeRegister(CFG_AZ, value);
 8001178:	7bfb      	ldrb	r3, [r7, #15]
 800117a:	4619      	mov	r1, r3
 800117c:	206d      	movs	r0, #109	; 0x6d
 800117e:	f7ff fd40 	bl	8000c02 <AS7421_writeRegister>
}
 8001182:	bf00      	nop
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	bd90      	pop	{r4, r7, pc}

0800118a <powerup>:

// Internal oscillator enabled, potentially write 0x44 to register 0x6F, 0x20 to register 0x6E, 0x00 to register 0x6F, sensor is in idle state
void powerup()
{
 800118a:	b580      	push	{r7, lr}
 800118c:	b082      	sub	sp, #8
 800118e:	af00      	add	r7, sp, #0
	uint8_t value = AS7421_readRegister(ENABLE); //Read existing state
 8001190:	2060      	movs	r0, #96	; 0x60
 8001192:	f7ff fd11 	bl	8000bb8 <AS7421_readRegister>
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
	value |= (1U << 0); //Set PON (bit 0)
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	71fb      	strb	r3, [r7, #7]
    AS7421_writeRegister(ENABLE, value);
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	4619      	mov	r1, r3
 80011a6:	2060      	movs	r0, #96	; 0x60
 80011a8:	f7ff fd2b 	bl	8000c02 <AS7421_writeRegister>

//    //After power on reset the following commands have to be written prior accessing other registers
//    AS7421_writeRegister(0x6F, 0x44);
//    AS7421_writeRegister(0x6E, 0x20);
//    AS7421_writeRegister(0x6F, 0x00);
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <sleep>:
	AS7421_writeRegister(CFG_MISC, value);
}

// Internal oscillator disabled, sensor is in sleep state
void sleep()
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
	uint8_t value = AS7421_readRegister(ENABLE); //Read existing state
 80011ba:	2060      	movs	r0, #96	; 0x60
 80011bc:	f7ff fcfc 	bl	8000bb8 <AS7421_readRegister>
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]
	value &= ~(1U << 0); //Reset PON (bit 0)
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	f023 0301 	bic.w	r3, r3, #1
 80011ca:	71fb      	strb	r3, [r7, #7]
    AS7421_writeRegister(ENABLE, value);
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	4619      	mov	r1, r3
 80011d0:	2060      	movs	r0, #96	; 0x60
 80011d2:	f7ff fd16 	bl	8000c02 <AS7421_writeRegister>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <writeRAMData>:

void writeRAMData(uint8_t *smuxData, uint8_t offset)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	460b      	mov	r3, r1
 80011e8:	70fb      	strb	r3, [r7, #3]
	if (offset == INTA_OFFSET)
 80011ea:	78fb      	ldrb	r3, [r7, #3]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d136      	bne.n	800125e <writeRAMData+0x80>
	{
		AS7421_writeRegister(CFG_RAM_0, smuxData[0]);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	2040      	movs	r0, #64	; 0x40
 80011f8:	f7ff fd03 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_1, smuxData[1]);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3301      	adds	r3, #1
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	4619      	mov	r1, r3
 8001204:	2041      	movs	r0, #65	; 0x41
 8001206:	f7ff fcfc 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_2, smuxData[2]);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3302      	adds	r3, #2
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	2042      	movs	r0, #66	; 0x42
 8001214:	f7ff fcf5 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_3, smuxData[3]);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3303      	adds	r3, #3
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	4619      	mov	r1, r3
 8001220:	2043      	movs	r0, #67	; 0x43
 8001222:	f7ff fcee 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_4, smuxData[4]);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	3304      	adds	r3, #4
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	2044      	movs	r0, #68	; 0x44
 8001230:	f7ff fce7 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_5, smuxData[5]);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3305      	adds	r3, #5
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	4619      	mov	r1, r3
 800123c:	2045      	movs	r0, #69	; 0x45
 800123e:	f7ff fce0 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_6, smuxData[6]);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3306      	adds	r3, #6
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4619      	mov	r1, r3
 800124a:	2046      	movs	r0, #70	; 0x46
 800124c:	f7ff fcd9 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_7, smuxData[7]);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3307      	adds	r3, #7
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	4619      	mov	r1, r3
 8001258:	2047      	movs	r0, #71	; 0x47
 800125a:	f7ff fcd2 	bl	8000c02 <AS7421_writeRegister>
	}

	if (offset == INTB_OFFSET)
 800125e:	78fb      	ldrb	r3, [r7, #3]
 8001260:	2b08      	cmp	r3, #8
 8001262:	d136      	bne.n	80012d2 <writeRAMData+0xf4>
	{
		AS7421_writeRegister(CFG_RAM_8, smuxData[0]);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	2048      	movs	r0, #72	; 0x48
 800126c:	f7ff fcc9 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_9, smuxData[1]);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3301      	adds	r3, #1
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	4619      	mov	r1, r3
 8001278:	2049      	movs	r0, #73	; 0x49
 800127a:	f7ff fcc2 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_10, smuxData[2]);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3302      	adds	r3, #2
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4619      	mov	r1, r3
 8001286:	204a      	movs	r0, #74	; 0x4a
 8001288:	f7ff fcbb 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_11, smuxData[3]);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3303      	adds	r3, #3
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	4619      	mov	r1, r3
 8001294:	204b      	movs	r0, #75	; 0x4b
 8001296:	f7ff fcb4 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_12, smuxData[4]);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3304      	adds	r3, #4
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	204c      	movs	r0, #76	; 0x4c
 80012a4:	f7ff fcad 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_13, smuxData[5]);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3305      	adds	r3, #5
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	4619      	mov	r1, r3
 80012b0:	204d      	movs	r0, #77	; 0x4d
 80012b2:	f7ff fca6 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_14, smuxData[6]);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3306      	adds	r3, #6
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	204e      	movs	r0, #78	; 0x4e
 80012c0:	f7ff fc9f 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_15, smuxData[7]);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3307      	adds	r3, #7
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	4619      	mov	r1, r3
 80012cc:	204f      	movs	r0, #79	; 0x4f
 80012ce:	f7ff fc98 	bl	8000c02 <AS7421_writeRegister>
	}

	if (offset == INTC_OFFSET)
 80012d2:	78fb      	ldrb	r3, [r7, #3]
 80012d4:	2b10      	cmp	r3, #16
 80012d6:	d136      	bne.n	8001346 <writeRAMData+0x168>
	{
		AS7421_writeRegister(CFG_RAM_16, smuxData[0]);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4619      	mov	r1, r3
 80012de:	2050      	movs	r0, #80	; 0x50
 80012e0:	f7ff fc8f 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_17, smuxData[1]);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3301      	adds	r3, #1
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	4619      	mov	r1, r3
 80012ec:	2051      	movs	r0, #81	; 0x51
 80012ee:	f7ff fc88 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_18, smuxData[2]);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3302      	adds	r3, #2
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	2052      	movs	r0, #82	; 0x52
 80012fc:	f7ff fc81 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_19, smuxData[3]);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3303      	adds	r3, #3
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	4619      	mov	r1, r3
 8001308:	2053      	movs	r0, #83	; 0x53
 800130a:	f7ff fc7a 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_20, smuxData[4]);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3304      	adds	r3, #4
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	4619      	mov	r1, r3
 8001316:	2054      	movs	r0, #84	; 0x54
 8001318:	f7ff fc73 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_21, smuxData[5]);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3305      	adds	r3, #5
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	4619      	mov	r1, r3
 8001324:	2055      	movs	r0, #85	; 0x55
 8001326:	f7ff fc6c 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_22, smuxData[6]);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	3306      	adds	r3, #6
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	2056      	movs	r0, #86	; 0x56
 8001334:	f7ff fc65 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_23, smuxData[7]);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3307      	adds	r3, #7
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	4619      	mov	r1, r3
 8001340:	2057      	movs	r0, #87	; 0x57
 8001342:	f7ff fc5e 	bl	8000c02 <AS7421_writeRegister>
	}

	if (offset == INTD_OFFSET)
 8001346:	78fb      	ldrb	r3, [r7, #3]
 8001348:	2b18      	cmp	r3, #24
 800134a:	d136      	bne.n	80013ba <writeRAMData+0x1dc>
	{
		AS7421_writeRegister(CFG_RAM_24, smuxData[0]);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4619      	mov	r1, r3
 8001352:	2058      	movs	r0, #88	; 0x58
 8001354:	f7ff fc55 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_25, smuxData[1]);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3301      	adds	r3, #1
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	4619      	mov	r1, r3
 8001360:	2059      	movs	r0, #89	; 0x59
 8001362:	f7ff fc4e 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_26, smuxData[2]);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	3302      	adds	r3, #2
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	205a      	movs	r0, #90	; 0x5a
 8001370:	f7ff fc47 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_27, smuxData[3]);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3303      	adds	r3, #3
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	4619      	mov	r1, r3
 800137c:	205b      	movs	r0, #91	; 0x5b
 800137e:	f7ff fc40 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_28, smuxData[4]);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3304      	adds	r3, #4
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	205c      	movs	r0, #92	; 0x5c
 800138c:	f7ff fc39 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_29, smuxData[5]);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3305      	adds	r3, #5
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	4619      	mov	r1, r3
 8001398:	205d      	movs	r0, #93	; 0x5d
 800139a:	f7ff fc32 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_30, smuxData[6]);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3306      	adds	r3, #6
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	205e      	movs	r0, #94	; 0x5e
 80013a8:	f7ff fc2b 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_31, smuxData[7]);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	3307      	adds	r3, #7
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	4619      	mov	r1, r3
 80013b4:	205f      	movs	r0, #95	; 0x5f
 80013b6:	f7ff fc24 	bl	8000c02 <AS7421_writeRegister>
	}
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <zeroSMUX>:

// Clear RAM registers with SMUX
void zeroSMUX()
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b084      	sub	sp, #16
 80013c6:	af00      	add	r7, sp, #0
	uint8_t zeros[8] = {0};
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
	for (int i = SMUX_A_ADDR; i <= SMUX_D_ADDR; i++)
 80013d0:	230c      	movs	r3, #12
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	e01c      	b.n	8001410 <zeroSMUX+0x4e>
	{
		AS7421_writeRegister(CFG_RAM, i);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	4619      	mov	r1, r3
 80013dc:	206a      	movs	r0, #106	; 0x6a
 80013de:	f7ff fc10 	bl	8000c02 <AS7421_writeRegister>

		writeRAMData(zeros, 0);
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fef9 	bl	80011de <writeRAMData>
		writeRAMData(zeros, 1);
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2101      	movs	r1, #1
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fef4 	bl	80011de <writeRAMData>
		writeRAMData(zeros, 2);
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2102      	movs	r1, #2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff feef 	bl	80011de <writeRAMData>
		writeRAMData(zeros, 3);
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	2103      	movs	r1, #3
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff feea 	bl	80011de <writeRAMData>
	for (int i = SMUX_A_ADDR; i <= SMUX_D_ADDR; i++)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	3301      	adds	r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b0f      	cmp	r3, #15
 8001414:	dddf      	ble.n	80013d6 <zeroSMUX+0x14>
	}
}
 8001416:	bf00      	nop
 8001418:	bf00      	nop
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <setSMUX>:

// Set SMUX region (A,B,C, or D) with ramOffsetAddr
void setSMUX(uint8_t ramOffsetAddr, uint8_t offset, uint8_t* configvalues)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	603a      	str	r2, [r7, #0]
 800142a:	71fb      	strb	r3, [r7, #7]
 800142c:	460b      	mov	r3, r1
 800142e:	71bb      	strb	r3, [r7, #6]
	AS7421_writeRegister(CFG_RAM, ramOffsetAddr); //Writing the ram offset(SMUX addresses) for programming the configuration into RAM
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	4619      	mov	r1, r3
 8001434:	206a      	movs	r0, #106	; 0x6a
 8001436:	f7ff fbe4 	bl	8000c02 <AS7421_writeRegister>
	writeRAMData(configvalues, offset); //Writing to respective ram registers after setting RAM offset
 800143a:	79bb      	ldrb	r3, [r7, #6]
 800143c:	4619      	mov	r1, r3
 800143e:	6838      	ldr	r0, [r7, #0]
 8001440:	f7ff fecd 	bl	80011de <writeRAMData>
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <setSMUX_A>:

// Set SMUX for integration cycle A and write to ram registers
void setSMUX_A(uint8_t* configvalues)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	setSMUX(SMUX_A_ADDR, INTA_OFFSET, configvalues);
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	2100      	movs	r1, #0
 8001458:	200c      	movs	r0, #12
 800145a:	f7ff ffe1 	bl	8001420 <setSMUX>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <setSMUX_B>:

// Set SMUX for integration cycle B and write to ram registers
void setSMUX_B(uint8_t* configvalues)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
	setSMUX(SMUX_B_ADDR, INTB_OFFSET, configvalues);
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	2108      	movs	r1, #8
 8001472:	200d      	movs	r0, #13
 8001474:	f7ff ffd4 	bl	8001420 <setSMUX>
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <setSMUX_C>:

// Set SMUX for integration cycle C and write to ram registers
void setSMUX_C(uint8_t* configvalues)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	setSMUX(SMUX_C_ADDR, INTC_OFFSET, configvalues);
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	2110      	movs	r1, #16
 800148c:	200e      	movs	r0, #14
 800148e:	f7ff ffc7 	bl	8001420 <setSMUX>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <setSMUX_D>:

// Set SMUX for integration cycle D and write to ram registers
void setSMUX_D(uint8_t* configvalues)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
	setSMUX(SMUX_D_ADDR, INTD_OFFSET, configvalues);
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	2118      	movs	r1, #24
 80014a6:	200f      	movs	r0, #15
 80014a8:	f7ff ffba 	bl	8001420 <setSMUX>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <configureSMUX>:

// Configure all SMUX registers either with a specified default array of bytes or the config_values
void configureSMUX()
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
    zeroSMUX();
 80014b8:	f7ff ff83 	bl	80013c2 <zeroSMUX>

    // Configure SMUX registers
	setSMUX_A(config_values);
 80014bc:	4806      	ldr	r0, [pc, #24]	; (80014d8 <configureSMUX+0x24>)
 80014be:	f7ff ffc5 	bl	800144c <setSMUX_A>
	setSMUX_B(config_values);
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <configureSMUX+0x24>)
 80014c4:	f7ff ffcf 	bl	8001466 <setSMUX_B>
	setSMUX_C(config_values);
 80014c8:	4803      	ldr	r0, [pc, #12]	; (80014d8 <configureSMUX+0x24>)
 80014ca:	f7ff ffd9 	bl	8001480 <setSMUX_C>
	setSMUX_D(config_values);
 80014ce:	4802      	ldr	r0, [pc, #8]	; (80014d8 <configureSMUX+0x24>)
 80014d0:	f7ff ffe3 	bl	800149a <setSMUX_D>
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000000 	.word	0x20000000

080014dc <configureGain>:

//2^x gain, i.e. gain of 6 = 2^6 = 256x
void configureGain(uint8_t gain)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
	if (gain > 8)
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	2b08      	cmp	r3, #8
 80014ea:	d901      	bls.n	80014f0 <configureGain+0x14>
	{
		gain = 8;
 80014ec:	2308      	movs	r3, #8
 80014ee:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t data[8] = {gain};
 80014f0:	f107 0308 	add.w	r3, r7, #8
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	723b      	strb	r3, [r7, #8]

	AS7421_writeRegister(CFG_RAM, ASETUP_AB);
 80014fe:	2110      	movs	r1, #16
 8001500:	206a      	movs	r0, #106	; 0x6a
 8001502:	f7ff fb7e 	bl	8000c02 <AS7421_writeRegister>

	writeRAMData(data, 0);
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fe66 	bl	80011de <writeRAMData>
	writeRAMData(data, 1);
 8001512:	f107 0308 	add.w	r3, r7, #8
 8001516:	2101      	movs	r1, #1
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fe60 	bl	80011de <writeRAMData>
	writeRAMData(data, 2);
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	2102      	movs	r1, #2
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff fe5a 	bl	80011de <writeRAMData>
	writeRAMData(data, 3);
 800152a:	f107 0308 	add.w	r3, r7, #8
 800152e:	2103      	movs	r1, #3
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fe54 	bl	80011de <writeRAMData>

	AS7421_writeRegister(CFG_RAM, ASETUP_CD);
 8001536:	2111      	movs	r1, #17
 8001538:	206a      	movs	r0, #106	; 0x6a
 800153a:	f7ff fb62 	bl	8000c02 <AS7421_writeRegister>

	writeRAMData(data, 0);
 800153e:	f107 0308 	add.w	r3, r7, #8
 8001542:	2100      	movs	r1, #0
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fe4a 	bl	80011de <writeRAMData>
	writeRAMData(data, 1);
 800154a:	f107 0308 	add.w	r3, r7, #8
 800154e:	2101      	movs	r1, #1
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff fe44 	bl	80011de <writeRAMData>
	writeRAMData(data, 2);
 8001556:	f107 0308 	add.w	r3, r7, #8
 800155a:	2102      	movs	r1, #2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fe3e 	bl	80011de <writeRAMData>
	writeRAMData(data, 3);
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	2103      	movs	r1, #3
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff fe38 	bl	80011de <writeRAMData>
}
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <configureLEDs>:

// Configure LED register
void configureLEDs(bool enable, uint8_t led, uint8_t current)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	b084      	sub	sp, #16
 800157a:	af00      	add	r7, sp, #0
 800157c:	4603      	mov	r3, r0
 800157e:	71fb      	strb	r3, [r7, #7]
 8001580:	460b      	mov	r3, r1
 8001582:	71bb      	strb	r3, [r7, #6]
 8001584:	4613      	mov	r3, r2
 8001586:	717b      	strb	r3, [r7, #5]
	//Clearing LED config register to default
	AS7421_writeRegister(CFG_LED, 0);
 8001588:	2100      	movs	r1, #0
 800158a:	2068      	movs	r0, #104	; 0x68
 800158c:	f7ff fb39 	bl	8000c02 <AS7421_writeRegister>

	uint8_t value = AS7421_readRegister(CFG_LED);
 8001590:	2068      	movs	r0, #104	; 0x68
 8001592:	f7ff fb11 	bl	8000bb8 <AS7421_readRegister>
 8001596:	4603      	mov	r3, r0
 8001598:	73fb      	strb	r3, [r7, #15]

	value |= (enable << 7); //Configure SET_LED_ON (bit 7)
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	01db      	lsls	r3, r3, #7
 800159e:	b25a      	sxtb	r2, r3
 80015a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	b25b      	sxtb	r3, r3
 80015a8:	73fb      	strb	r3, [r7, #15]

	for (int i = LED_MULT_0; i <= LED_MULT_3; i++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	e014      	b.n	80015da <configureLEDs+0x64>
	{
		value |= (i << 4); //Enable LED_OFFSET (bits 4 and 5)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	b25a      	sxtb	r2, r3
 80015b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	b25b      	sxtb	r3, r3
 80015be:	73fb      	strb	r3, [r7, #15]
		AS7421_writeRegister(CFG_LED, value); // Setting Offset address for programming the values for LED_MULT
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	4619      	mov	r1, r3
 80015c4:	2068      	movs	r0, #104	; 0x68
 80015c6:	f7ff fb1c 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_LED_MULT, led);
 80015ca:	79bb      	ldrb	r3, [r7, #6]
 80015cc:	4619      	mov	r1, r3
 80015ce:	2039      	movs	r0, #57	; 0x39
 80015d0:	f7ff fb17 	bl	8000c02 <AS7421_writeRegister>
	for (int i = LED_MULT_0; i <= LED_MULT_3; i++)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	3301      	adds	r3, #1
 80015d8:	60bb      	str	r3, [r7, #8]
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	2b03      	cmp	r3, #3
 80015de:	dde7      	ble.n	80015b0 <configureLEDs+0x3a>
	}

	if (current > LED_CURRENT_LIMIT_75MA)
 80015e0:	797b      	ldrb	r3, [r7, #5]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d901      	bls.n	80015ea <configureLEDs+0x74>
	{
		current = LED_CURRENT_LIMIT_75MA;
 80015e6:	2301      	movs	r3, #1
 80015e8:	717b      	strb	r3, [r7, #5]
	}
	value |= (current << 0);
 80015ea:	7bfa      	ldrb	r2, [r7, #15]
 80015ec:	797b      	ldrb	r3, [r7, #5]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	73fb      	strb	r3, [r7, #15]

	AS7421_writeRegister(CFG_LED, value);
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	4619      	mov	r1, r3
 80015f6:	2068      	movs	r0, #104	; 0x68
 80015f8:	f7ff fb03 	bl	8000c02 <AS7421_writeRegister>
}
 80015fc:	bf00      	nop
 80015fe:	3710      	adds	r7, #16
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <startMeasurements>:

// Start spectral measurement
void startMeasurements(bool withLED)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
	//Turn on LEDs
	configureLEDAuto(withLED);
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fcd9 	bl	8000fc8 <configureLEDAuto>

	uint8_t value = AS7421_readRegister(ENABLE); //Read existing state
 8001616:	2060      	movs	r0, #96	; 0x60
 8001618:	f7ff face 	bl	8000bb8 <AS7421_readRegister>
 800161c:	4603      	mov	r3, r0
 800161e:	73fb      	strb	r3, [r7, #15]

	// Power on
	value |= (1U << 0); //Set PON (bit 0)
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	73fb      	strb	r3, [r7, #15]

    //Spectral measurement enabled
    value |= (1U << 1); //Set LTF_EN (bit 1)
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	f043 0302 	orr.w	r3, r3, #2
 800162e:	73fb      	strb	r3, [r7, #15]

    //Automatic power down by temperature measurement
    value |= (1U << 2); //Set TSD_EN (bit 2)
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	f043 0304 	orr.w	r3, r3, #4
 8001636:	73fb      	strb	r3, [r7, #15]

    AS7421_writeRegister(ENABLE, value);
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	4619      	mov	r1, r3
 800163c:	2060      	movs	r0, #96	; 0x60
 800163e:	f7ff fae0 	bl	8000c02 <AS7421_writeRegister>
}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <stopMeasurements>:

void stopMeasurements()
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
	uint8_t value = AS7421_readRegister(ENABLE); //Read existing state
 8001650:	2060      	movs	r0, #96	; 0x60
 8001652:	f7ff fab1 	bl	8000bb8 <AS7421_readRegister>
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]

    //Spectral measurement enabled
    value &= ~(1U << 1); //Reset LTF_EN (bit 1)
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	f023 0302 	bic.w	r3, r3, #2
 8001660:	71fb      	strb	r3, [r7, #7]

    //Automatic power down by temperature measurement
    value &= ~(1U << 2); //Reset TSD_EN (bit 2)
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	f023 0304 	bic.w	r3, r3, #4
 8001668:	71fb      	strb	r3, [r7, #7]

    AS7421_writeRegister(ENABLE, value);
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	4619      	mov	r1, r3
 800166e:	2060      	movs	r0, #96	; 0x60
 8001670:	f7ff fac7 	bl	8000c02 <AS7421_writeRegister>

	configureLEDAuto(false);
 8001674:	2000      	movs	r0, #0
 8001676:	f7ff fca7 	bl	8000fc8 <configureLEDAuto>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <getMeasurementStatus>:
 * Bit2 = TSD
 * Bit1 = AZ
 * Bit0 = ADATA
 */
bool getMeasurementStatus(uint8_t bit)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
	uint8_t status7 = AS7421_readRegister(STATUS_7);
 800168e:	2077      	movs	r0, #119	; 0x77
 8001690:	f7ff fa92 	bl	8000bb8 <AS7421_readRegister>
 8001694:	4603      	mov	r3, r0
 8001696:	73fb      	strb	r3, [r7, #15]
	if (bit > 7)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	2b07      	cmp	r3, #7
 800169c:	d904      	bls.n	80016a8 <getMeasurementStatus+0x24>
	{
		printf("Bit is not within range of 0-7 of STATUS_7 register \n\r");
 800169e:	480a      	ldr	r0, [pc, #40]	; (80016c8 <getMeasurementStatus+0x44>)
 80016a0:	f001 fe14 	bl	80032cc <iprintf>
		return 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	e00b      	b.n	80016c0 <getMeasurementStatus+0x3c>
	}
    bool status = (status7 & (1U << bit)) != 0; // Isolate a bit and check its status
 80016a8:	7bfa      	ldrb	r2, [r7, #15]
 80016aa:	79fb      	ldrb	r3, [r7, #7]
 80016ac:	fa22 f303 	lsr.w	r3, r2, r3
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bf14      	ite	ne
 80016b8:	2301      	movne	r3, #1
 80016ba:	2300      	moveq	r3, #0
 80016bc:	73bb      	strb	r3, [r7, #14]
	return status;
 80016be:	7bbb      	ldrb	r3, [r7, #14]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	08005274 	.word	0x08005274

080016cc <recordChannelData>:

// Helper function to record channel data
uint16_t recordChannelData(uint8_t addr)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2] = {0};
 80016d6:	2300      	movs	r3, #0
 80016d8:	81bb      	strh	r3, [r7, #12]
	AS7421_readRegisters(addr, 2, data);
 80016da:	f107 020c 	add.w	r2, r7, #12
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	2102      	movs	r1, #2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff fa7b 	bl	8000bde <AS7421_readRegisters>

	// Combine the two bytes into a 16-bit value
	return ((uint16_t)data[1] << 8) | data[0];
 80016e8:	7b7b      	ldrb	r3, [r7, #13]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	b21a      	sxth	r2, r3
 80016ee:	7b3b      	ldrb	r3, [r7, #12]
 80016f0:	b21b      	sxth	r3, r3
 80016f2:	4313      	orrs	r3, r2
 80016f4:	b21b      	sxth	r3, r3
 80016f6:	b29b      	uxth	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <getChannel1>:

/* Integration Cycle A */
uint16_t getChannel1()
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
	return recordChannelData(CH1_DATA);
 8001704:	2082      	movs	r0, #130	; 0x82
 8001706:	f7ff ffe1 	bl	80016cc <recordChannelData>
 800170a:	4603      	mov	r3, r0
}
 800170c:	4618      	mov	r0, r3
 800170e:	bd80      	pop	{r7, pc}

08001710 <getChannel48>:
uint16_t getChannel48()
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
	return recordChannelData(CH48_DATA);
 8001714:	20e0      	movs	r0, #224	; 0xe0
 8001716:	f7ff ffd9 	bl	80016cc <recordChannelData>
 800171a:	4603      	mov	r3, r0
}
 800171c:	4618      	mov	r0, r3
 800171e:	bd80      	pop	{r7, pc}

08001720 <getChannel2>:
uint16_t getChannel2()
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	return recordChannelData(CH2_DATA);
 8001724:	2084      	movs	r0, #132	; 0x84
 8001726:	f7ff ffd1 	bl	80016cc <recordChannelData>
 800172a:	4603      	mov	r3, r0
}
 800172c:	4618      	mov	r0, r3
 800172e:	bd80      	pop	{r7, pc}

08001730 <getChannel34>:
uint16_t getChannel34()
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	return recordChannelData(CH34_DATA);
 8001734:	20c4      	movs	r0, #196	; 0xc4
 8001736:	f7ff ffc9 	bl	80016cc <recordChannelData>
 800173a:	4603      	mov	r3, r0
}
 800173c:	4618      	mov	r0, r3
 800173e:	bd80      	pop	{r7, pc}

08001740 <getChannel16>:
uint16_t getChannel16()
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
	return recordChannelData(CH16_DATA);
 8001744:	20a0      	movs	r0, #160	; 0xa0
 8001746:	f7ff ffc1 	bl	80016cc <recordChannelData>
 800174a:	4603      	mov	r3, r0

}
 800174c:	4618      	mov	r0, r3
 800174e:	bd80      	pop	{r7, pc}

08001750 <getChannel32>:
uint16_t getChannel32()
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	return recordChannelData(CH32_DATA);
 8001754:	20c0      	movs	r0, #192	; 0xc0
 8001756:	f7ff ffb9 	bl	80016cc <recordChannelData>
 800175a:	4603      	mov	r3, r0
}
 800175c:	4618      	mov	r0, r3
 800175e:	bd80      	pop	{r7, pc}

08001760 <getChannel18>:
uint16_t getChannel18()
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
	return recordChannelData(CH18_DATA);
 8001764:	20a4      	movs	r0, #164	; 0xa4
 8001766:	f7ff ffb1 	bl	80016cc <recordChannelData>
 800176a:	4603      	mov	r3, r0
}
 800176c:	4618      	mov	r0, r3
 800176e:	bd80      	pop	{r7, pc}

08001770 <getChannel51>:
uint16_t getChannel51()
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
	return recordChannelData(CH51_DATA);
 8001774:	20e6      	movs	r0, #230	; 0xe6
 8001776:	f7ff ffa9 	bl	80016cc <recordChannelData>
 800177a:	4603      	mov	r3, r0
}
 800177c:	4618      	mov	r0, r3
 800177e:	bd80      	pop	{r7, pc}

08001780 <getChannel4>:

//Next 8 PDs
uint16_t getChannel4()
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	return recordChannelData(CH4_DATA);
 8001784:	2088      	movs	r0, #136	; 0x88
 8001786:	f7ff ffa1 	bl	80016cc <recordChannelData>
 800178a:	4603      	mov	r3, r0
}
 800178c:	4618      	mov	r0, r3
 800178e:	bd80      	pop	{r7, pc}

08001790 <getChannel49>:
uint16_t getChannel49()
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	return recordChannelData(CH49_DATA);
 8001794:	20e2      	movs	r0, #226	; 0xe2
 8001796:	f7ff ff99 	bl	80016cc <recordChannelData>
 800179a:	4603      	mov	r3, r0
}
 800179c:	4618      	mov	r0, r3
 800179e:	bd80      	pop	{r7, pc}

080017a0 <getChannel3>:
uint16_t getChannel3()
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	return recordChannelData(CH3_DATA);
 80017a4:	2086      	movs	r0, #134	; 0x86
 80017a6:	f7ff ff91 	bl	80016cc <recordChannelData>
 80017aa:	4603      	mov	r3, r0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <getChannel35>:
uint16_t getChannel35()
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	return recordChannelData(CH35_DATA);
 80017b4:	20c6      	movs	r0, #198	; 0xc6
 80017b6:	f7ff ff89 	bl	80016cc <recordChannelData>
 80017ba:	4603      	mov	r3, r0

}
 80017bc:	4618      	mov	r0, r3
 80017be:	bd80      	pop	{r7, pc}

080017c0 <getChannel17>:
uint16_t getChannel17()
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	return recordChannelData(CH17_DATA);
 80017c4:	20a2      	movs	r0, #162	; 0xa2
 80017c6:	f7ff ff81 	bl	80016cc <recordChannelData>
 80017ca:	4603      	mov	r3, r0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <getChannel33>:
uint16_t getChannel33()
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	return recordChannelData(CH33_DATA);
 80017d4:	20c2      	movs	r0, #194	; 0xc2
 80017d6:	f7ff ff79 	bl	80016cc <recordChannelData>
 80017da:	4603      	mov	r3, r0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	bd80      	pop	{r7, pc}

080017e0 <getChannel19>:
uint16_t getChannel19()
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	return recordChannelData(CH19_DATA);
 80017e4:	20a6      	movs	r0, #166	; 0xa6
 80017e6:	f7ff ff71 	bl	80016cc <recordChannelData>
 80017ea:	4603      	mov	r3, r0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <getChannel54>:
uint16_t getChannel54()
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	return recordChannelData(CH54_DATA);
 80017f4:	20ec      	movs	r0, #236	; 0xec
 80017f6:	f7ff ff69 	bl	80016cc <recordChannelData>
 80017fa:	4603      	mov	r3, r0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	bd80      	pop	{r7, pc}

08001800 <getChannel0>:

/* Integration Cycle B */
uint16_t getChannel0()
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	return recordChannelData(CH0_DATA);
 8001804:	2080      	movs	r0, #128	; 0x80
 8001806:	f7ff ff61 	bl	80016cc <recordChannelData>
 800180a:	4603      	mov	r3, r0
}
 800180c:	4618      	mov	r0, r3
 800180e:	bd80      	pop	{r7, pc}

08001810 <getChannel13>:
uint16_t getChannel13()
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	return recordChannelData(CH13_DATA);
 8001814:	209a      	movs	r0, #154	; 0x9a
 8001816:	f7ff ff59 	bl	80016cc <recordChannelData>
 800181a:	4603      	mov	r3, r0
}
 800181c:	4618      	mov	r0, r3
 800181e:	bd80      	pop	{r7, pc}

08001820 <getChannel50>:
uint16_t getChannel50()
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	return recordChannelData(CH50_DATA);
 8001824:	20e4      	movs	r0, #228	; 0xe4
 8001826:	f7ff ff51 	bl	80016cc <recordChannelData>
 800182a:	4603      	mov	r3, r0
}
 800182c:	4618      	mov	r0, r3
 800182e:	bd80      	pop	{r7, pc}

08001830 <getChannel63>:
uint16_t getChannel63()
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	return recordChannelData(CH63_DATA);
 8001834:	20fe      	movs	r0, #254	; 0xfe
 8001836:	f7ff ff49 	bl	80016cc <recordChannelData>
 800183a:	4603      	mov	r3, r0
}
 800183c:	4618      	mov	r0, r3
 800183e:	bd80      	pop	{r7, pc}

08001840 <getChannel52>:
uint16_t getChannel52()
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	return recordChannelData(CH52_DATA);
 8001844:	20e8      	movs	r0, #232	; 0xe8
 8001846:	f7ff ff41 	bl	80016cc <recordChannelData>
 800184a:	4603      	mov	r3, r0
}
 800184c:	4618      	mov	r0, r3
 800184e:	bd80      	pop	{r7, pc}

08001850 <getChannel6>:
uint16_t getChannel6()
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	return recordChannelData(CH6_DATA);
 8001854:	208c      	movs	r0, #140	; 0x8c
 8001856:	f7ff ff39 	bl	80016cc <recordChannelData>
 800185a:	4603      	mov	r3, r0
}
 800185c:	4618      	mov	r0, r3
 800185e:	bd80      	pop	{r7, pc}

08001860 <getChannel38>:
uint16_t getChannel38()
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	return recordChannelData(CH38_DATA);
 8001864:	20cc      	movs	r0, #204	; 0xcc
 8001866:	f7ff ff31 	bl	80016cc <recordChannelData>
 800186a:	4603      	mov	r3, r0
}
 800186c:	4618      	mov	r0, r3
 800186e:	bd80      	pop	{r7, pc}

08001870 <getChannel20>:
uint16_t getChannel20()
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	return recordChannelData(CH20_DATA);
 8001874:	20a8      	movs	r0, #168	; 0xa8
 8001876:	f7ff ff29 	bl	80016cc <recordChannelData>
 800187a:	4603      	mov	r3, r0
}
 800187c:	4618      	mov	r0, r3
 800187e:	bd80      	pop	{r7, pc}

08001880 <getChannel36>:

//Next 8 PDs
uint16_t getChannel36()
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	return recordChannelData(CH36_DATA);
 8001884:	20c8      	movs	r0, #200	; 0xc8
 8001886:	f7ff ff21 	bl	80016cc <recordChannelData>
 800188a:	4603      	mov	r3, r0
}
 800188c:	4618      	mov	r0, r3
 800188e:	bd80      	pop	{r7, pc}

08001890 <getChannel22>:
uint16_t getChannel22()
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	return recordChannelData(CH22_DATA);
 8001894:	20ac      	movs	r0, #172	; 0xac
 8001896:	f7ff ff19 	bl	80016cc <recordChannelData>
 800189a:	4603      	mov	r3, r0
}
 800189c:	4618      	mov	r0, r3
 800189e:	bd80      	pop	{r7, pc}

080018a0 <getChannel55>:
uint16_t getChannel55()
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	return recordChannelData(CH55_DATA);
 80018a4:	20ee      	movs	r0, #238	; 0xee
 80018a6:	f7ff ff11 	bl	80016cc <recordChannelData>
 80018aa:	4603      	mov	r3, r0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <getChannel5>:
uint16_t getChannel5()
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	return recordChannelData(CH5_DATA);
 80018b4:	208a      	movs	r0, #138	; 0x8a
 80018b6:	f7ff ff09 	bl	80016cc <recordChannelData>
 80018ba:	4603      	mov	r3, r0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	bd80      	pop	{r7, pc}

080018c0 <getChannel53>:
uint16_t getChannel53()
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	return recordChannelData(CH53_DATA);
 80018c4:	20ea      	movs	r0, #234	; 0xea
 80018c6:	f7ff ff01 	bl	80016cc <recordChannelData>
 80018ca:	4603      	mov	r3, r0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <getChannel7>:
uint16_t getChannel7()
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	return recordChannelData(CH7_DATA);
 80018d4:	208e      	movs	r0, #142	; 0x8e
 80018d6:	f7ff fef9 	bl	80016cc <recordChannelData>
 80018da:	4603      	mov	r3, r0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	bd80      	pop	{r7, pc}

080018e0 <getChannel39>:
uint16_t getChannel39()
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	return recordChannelData(CH39_DATA);
 80018e4:	20ce      	movs	r0, #206	; 0xce
 80018e6:	f7ff fef1 	bl	80016cc <recordChannelData>
 80018ea:	4603      	mov	r3, r0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <getChannel21>:
uint16_t getChannel21()
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	return recordChannelData(CH21_DATA);
 80018f4:	20aa      	movs	r0, #170	; 0xaa
 80018f6:	f7ff fee9 	bl	80016cc <recordChannelData>
 80018fa:	4603      	mov	r3, r0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	bd80      	pop	{r7, pc}

08001900 <getChannel37>:

/* Integration Cycle C */
uint16_t getChannel37()
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	return recordChannelData(CH37_DATA);
 8001904:	20ca      	movs	r0, #202	; 0xca
 8001906:	f7ff fee1 	bl	80016cc <recordChannelData>
 800190a:	4603      	mov	r3, r0
}
 800190c:	4618      	mov	r0, r3
 800190e:	bd80      	pop	{r7, pc}

08001910 <getChannel23>:
uint16_t getChannel23()
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
	return recordChannelData(CH23_DATA);
 8001914:	20ae      	movs	r0, #174	; 0xae
 8001916:	f7ff fed9 	bl	80016cc <recordChannelData>
 800191a:	4603      	mov	r3, r0
}
 800191c:	4618      	mov	r0, r3
 800191e:	bd80      	pop	{r7, pc}

08001920 <getChannel40>:
uint16_t getChannel40()
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	return recordChannelData(CH40_DATA);
 8001924:	20d0      	movs	r0, #208	; 0xd0
 8001926:	f7ff fed1 	bl	80016cc <recordChannelData>
 800192a:	4603      	mov	r3, r0
}
 800192c:	4618      	mov	r0, r3
 800192e:	bd80      	pop	{r7, pc}

08001930 <getChannel26>:
uint16_t getChannel26()
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	return recordChannelData(CH26_DATA);
 8001934:	20b4      	movs	r0, #180	; 0xb4
 8001936:	f7ff fec9 	bl	80016cc <recordChannelData>
 800193a:	4603      	mov	r3, r0
}
 800193c:	4618      	mov	r0, r3
 800193e:	bd80      	pop	{r7, pc}

08001940 <getChannel42>:
uint16_t getChannel42()
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	return recordChannelData(CH42_DATA);
 8001944:	20d4      	movs	r0, #212	; 0xd4
 8001946:	f7ff fec1 	bl	80016cc <recordChannelData>
 800194a:	4603      	mov	r3, r0
}
 800194c:	4618      	mov	r0, r3
 800194e:	bd80      	pop	{r7, pc}

08001950 <getChannel24>:
uint16_t getChannel24()
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	return recordChannelData(CH24_DATA);
 8001954:	20b0      	movs	r0, #176	; 0xb0
 8001956:	f7ff feb9 	bl	80016cc <recordChannelData>
 800195a:	4603      	mov	r3, r0
}
 800195c:	4618      	mov	r0, r3
 800195e:	bd80      	pop	{r7, pc}

08001960 <getChannel56>:
uint16_t getChannel56()
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	return recordChannelData(CH56_DATA);
 8001964:	20f0      	movs	r0, #240	; 0xf0
 8001966:	f7ff feb1 	bl	80016cc <recordChannelData>
 800196a:	4603      	mov	r3, r0
}
 800196c:	4618      	mov	r0, r3
 800196e:	bd80      	pop	{r7, pc}

08001970 <getChannel10>:
uint16_t getChannel10()
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	return recordChannelData(CH10_DATA);
 8001974:	2094      	movs	r0, #148	; 0x94
 8001976:	f7ff fea9 	bl	80016cc <recordChannelData>
 800197a:	4603      	mov	r3, r0
}
 800197c:	4618      	mov	r0, r3
 800197e:	bd80      	pop	{r7, pc}

08001980 <getChannel58>:

//Next 8 PDs
uint16_t getChannel58()
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
	return recordChannelData(CH58_DATA);
 8001984:	20f4      	movs	r0, #244	; 0xf4
 8001986:	f7ff fea1 	bl	80016cc <recordChannelData>
 800198a:	4603      	mov	r3, r0
}
 800198c:	4618      	mov	r0, r3
 800198e:	bd80      	pop	{r7, pc}

08001990 <getChannel8>:
uint16_t getChannel8()
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	return recordChannelData(CH8_DATA);
 8001994:	2090      	movs	r0, #144	; 0x90
 8001996:	f7ff fe99 	bl	80016cc <recordChannelData>
 800199a:	4603      	mov	r3, r0
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd80      	pop	{r7, pc}

080019a0 <getChannel41>:
uint16_t getChannel41()
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	return recordChannelData(CH41_DATA);
 80019a4:	20d2      	movs	r0, #210	; 0xd2
 80019a6:	f7ff fe91 	bl	80016cc <recordChannelData>
 80019aa:	4603      	mov	r3, r0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <getChannel27>:
uint16_t getChannel27()
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	return recordChannelData(CH27_DATA);
 80019b4:	20b6      	movs	r0, #182	; 0xb6
 80019b6:	f7ff fe89 	bl	80016cc <recordChannelData>
 80019ba:	4603      	mov	r3, r0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	bd80      	pop	{r7, pc}

080019c0 <getChannel43>:
uint16_t getChannel43()
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	return recordChannelData(CH43_DATA);
 80019c4:	20d6      	movs	r0, #214	; 0xd6
 80019c6:	f7ff fe81 	bl	80016cc <recordChannelData>
 80019ca:	4603      	mov	r3, r0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <getChannel25>:
uint16_t getChannel25()
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	return recordChannelData(CH25_DATA);
 80019d4:	20b2      	movs	r0, #178	; 0xb2
 80019d6:	f7ff fe79 	bl	80016cc <recordChannelData>
 80019da:	4603      	mov	r3, r0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	bd80      	pop	{r7, pc}

080019e0 <getChannel57>:
uint16_t getChannel57()
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	return recordChannelData(CH57_DATA);
 80019e4:	20f2      	movs	r0, #242	; 0xf2
 80019e6:	f7ff fe71 	bl	80016cc <recordChannelData>
 80019ea:	4603      	mov	r3, r0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <getChannel11>:
uint16_t getChannel11()
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	return recordChannelData(CH11_DATA);
 80019f4:	2096      	movs	r0, #150	; 0x96
 80019f6:	f7ff fe69 	bl	80016cc <recordChannelData>
 80019fa:	4603      	mov	r3, r0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <getChannel59>:

/* Integration Cycle D */
uint16_t getChannel59()
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
	return recordChannelData(CH59_DATA);
 8001a04:	20f6      	movs	r0, #246	; 0xf6
 8001a06:	f7ff fe61 	bl	80016cc <recordChannelData>
 8001a0a:	4603      	mov	r3, r0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <getChannel9>:
uint16_t getChannel9()
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	return recordChannelData(CH9_DATA);
 8001a14:	2092      	movs	r0, #146	; 0x92
 8001a16:	f7ff fe59 	bl	80016cc <recordChannelData>
 8001a1a:	4603      	mov	r3, r0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <getChannel44>:
uint16_t getChannel44()
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
	return recordChannelData(CH44_DATA);
 8001a24:	20d8      	movs	r0, #216	; 0xd8
 8001a26:	f7ff fe51 	bl	80016cc <recordChannelData>
 8001a2a:	4603      	mov	r3, r0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <getChannel30>:
uint16_t getChannel30()
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	return recordChannelData(CH30_DATA);
 8001a34:	20bc      	movs	r0, #188	; 0xbc
 8001a36:	f7ff fe49 	bl	80016cc <recordChannelData>
 8001a3a:	4603      	mov	r3, r0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <getChannel46>:
uint16_t getChannel46()
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	return recordChannelData(CH46_DATA);
 8001a44:	20dc      	movs	r0, #220	; 0xdc
 8001a46:	f7ff fe41 	bl	80016cc <recordChannelData>
 8001a4a:	4603      	mov	r3, r0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <getChannel28>:
uint16_t getChannel28()
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
	return recordChannelData(CH28_DATA);
 8001a54:	20b8      	movs	r0, #184	; 0xb8
 8001a56:	f7ff fe39 	bl	80016cc <recordChannelData>
 8001a5a:	4603      	mov	r3, r0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <getChannel60>:
uint16_t getChannel60()
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
	return recordChannelData(CH60_DATA);
 8001a64:	20f8      	movs	r0, #248	; 0xf8
 8001a66:	f7ff fe31 	bl	80016cc <recordChannelData>
 8001a6a:	4603      	mov	r3, r0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <getChannel14>:
uint16_t getChannel14()
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	return recordChannelData(CH14_DATA);
 8001a74:	209c      	movs	r0, #156	; 0x9c
 8001a76:	f7ff fe29 	bl	80016cc <recordChannelData>
 8001a7a:	4603      	mov	r3, r0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <getChannel62>:

//Next 8 PDs
uint16_t getChannel62()
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	return recordChannelData(CH62_DATA);
 8001a84:	20fc      	movs	r0, #252	; 0xfc
 8001a86:	f7ff fe21 	bl	80016cc <recordChannelData>
 8001a8a:	4603      	mov	r3, r0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <getChannel12>:
uint16_t getChannel12()
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	return recordChannelData(CH12_DATA);
 8001a94:	2098      	movs	r0, #152	; 0x98
 8001a96:	f7ff fe19 	bl	80016cc <recordChannelData>
 8001a9a:	4603      	mov	r3, r0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <getChannel45>:
uint16_t getChannel45()
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
	return recordChannelData(CH45_DATA);
 8001aa4:	20da      	movs	r0, #218	; 0xda
 8001aa6:	f7ff fe11 	bl	80016cc <recordChannelData>
 8001aaa:	4603      	mov	r3, r0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <getChannel31>:
uint16_t getChannel31()
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	return recordChannelData(CH31_DATA);
 8001ab4:	20be      	movs	r0, #190	; 0xbe
 8001ab6:	f7ff fe09 	bl	80016cc <recordChannelData>
 8001aba:	4603      	mov	r3, r0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <getChannel47>:
uint16_t getChannel47()
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	return recordChannelData(CH47_DATA);
 8001ac4:	20de      	movs	r0, #222	; 0xde
 8001ac6:	f7ff fe01 	bl	80016cc <recordChannelData>
 8001aca:	4603      	mov	r3, r0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <getChannel29>:
uint16_t getChannel29()
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	return recordChannelData(CH29_DATA);
 8001ad4:	20ba      	movs	r0, #186	; 0xba
 8001ad6:	f7ff fdf9 	bl	80016cc <recordChannelData>
 8001ada:	4603      	mov	r3, r0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <getChannel61>:
uint16_t getChannel61()
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	return recordChannelData(CH61_DATA);
 8001ae4:	20fa      	movs	r0, #250	; 0xfa
 8001ae6:	f7ff fdf1 	bl	80016cc <recordChannelData>
 8001aea:	4603      	mov	r3, r0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <getChannel15>:
uint16_t getChannel15()
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	return recordChannelData(CH15_DATA);
 8001af4:	209e      	movs	r0, #158	; 0x9e
 8001af6:	f7ff fde9 	bl	80016cc <recordChannelData>
 8001afa:	4603      	mov	r3, r0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <getAllSpectralData>:


void getAllSpectralData(uint16_t arr[CHANNELSIZE])
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	/* Integration Cycle A */
	arr[0] = getChannel1();
 8001b08:	f7ff fdfa 	bl	8001700 <getChannel1>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	461a      	mov	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	801a      	strh	r2, [r3, #0]
	arr[1] = getChannel48();
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	1c9c      	adds	r4, r3, #2
 8001b18:	f7ff fdfa 	bl	8001710 <getChannel48>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	8023      	strh	r3, [r4, #0]
	arr[2] = getChannel2();
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	1d1c      	adds	r4, r3, #4
 8001b24:	f7ff fdfc 	bl	8001720 <getChannel2>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	8023      	strh	r3, [r4, #0]
	arr[3] = getChannel34();
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	1d9c      	adds	r4, r3, #6
 8001b30:	f7ff fdfe 	bl	8001730 <getChannel34>
 8001b34:	4603      	mov	r3, r0
 8001b36:	8023      	strh	r3, [r4, #0]
	arr[4] = getChannel16();
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f103 0408 	add.w	r4, r3, #8
 8001b3e:	f7ff fdff 	bl	8001740 <getChannel16>
 8001b42:	4603      	mov	r3, r0
 8001b44:	8023      	strh	r3, [r4, #0]
	arr[5] = getChannel32();
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f103 040a 	add.w	r4, r3, #10
 8001b4c:	f7ff fe00 	bl	8001750 <getChannel32>
 8001b50:	4603      	mov	r3, r0
 8001b52:	8023      	strh	r3, [r4, #0]
	arr[6] = getChannel18();
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f103 040c 	add.w	r4, r3, #12
 8001b5a:	f7ff fe01 	bl	8001760 <getChannel18>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	8023      	strh	r3, [r4, #0]
	arr[7] = getChannel51();
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f103 040e 	add.w	r4, r3, #14
 8001b68:	f7ff fe02 	bl	8001770 <getChannel51>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	8023      	strh	r3, [r4, #0]

	arr[8] = getChannel4();
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f103 0410 	add.w	r4, r3, #16
 8001b76:	f7ff fe03 	bl	8001780 <getChannel4>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	8023      	strh	r3, [r4, #0]
	arr[9] = getChannel49();
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f103 0412 	add.w	r4, r3, #18
 8001b84:	f7ff fe04 	bl	8001790 <getChannel49>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	8023      	strh	r3, [r4, #0]
	arr[10] = getChannel3();
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f103 0414 	add.w	r4, r3, #20
 8001b92:	f7ff fe05 	bl	80017a0 <getChannel3>
 8001b96:	4603      	mov	r3, r0
 8001b98:	8023      	strh	r3, [r4, #0]
	arr[11] = getChannel35();
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f103 0416 	add.w	r4, r3, #22
 8001ba0:	f7ff fe06 	bl	80017b0 <getChannel35>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	8023      	strh	r3, [r4, #0]
	arr[12] = getChannel17();
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f103 0418 	add.w	r4, r3, #24
 8001bae:	f7ff fe07 	bl	80017c0 <getChannel17>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	8023      	strh	r3, [r4, #0]
	arr[13] = getChannel33();
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f103 041a 	add.w	r4, r3, #26
 8001bbc:	f7ff fe08 	bl	80017d0 <getChannel33>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	8023      	strh	r3, [r4, #0]
	arr[14] = getChannel19();
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f103 041c 	add.w	r4, r3, #28
 8001bca:	f7ff fe09 	bl	80017e0 <getChannel19>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	8023      	strh	r3, [r4, #0]
	arr[15] = getChannel54();
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f103 041e 	add.w	r4, r3, #30
 8001bd8:	f7ff fe0a 	bl	80017f0 <getChannel54>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	8023      	strh	r3, [r4, #0]

	/* Integration Cycle B */
	arr[16] = getChannel0();
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f103 0420 	add.w	r4, r3, #32
 8001be6:	f7ff fe0b 	bl	8001800 <getChannel0>
 8001bea:	4603      	mov	r3, r0
 8001bec:	8023      	strh	r3, [r4, #0]
	arr[17] = getChannel13();
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f103 0422 	add.w	r4, r3, #34	; 0x22
 8001bf4:	f7ff fe0c 	bl	8001810 <getChannel13>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	8023      	strh	r3, [r4, #0]
	arr[18] = getChannel50();
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001c02:	f7ff fe0d 	bl	8001820 <getChannel50>
 8001c06:	4603      	mov	r3, r0
 8001c08:	8023      	strh	r3, [r4, #0]
	arr[19] = getChannel63();
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f103 0426 	add.w	r4, r3, #38	; 0x26
 8001c10:	f7ff fe0e 	bl	8001830 <getChannel63>
 8001c14:	4603      	mov	r3, r0
 8001c16:	8023      	strh	r3, [r4, #0]
	arr[20] = getChannel52();
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001c1e:	f7ff fe0f 	bl	8001840 <getChannel52>
 8001c22:	4603      	mov	r3, r0
 8001c24:	8023      	strh	r3, [r4, #0]
	arr[21] = getChannel6();
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f103 042a 	add.w	r4, r3, #42	; 0x2a
 8001c2c:	f7ff fe10 	bl	8001850 <getChannel6>
 8001c30:	4603      	mov	r3, r0
 8001c32:	8023      	strh	r3, [r4, #0]
	arr[22] = getChannel38();
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8001c3a:	f7ff fe11 	bl	8001860 <getChannel38>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	8023      	strh	r3, [r4, #0]
	arr[23] = getChannel20();
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f103 042e 	add.w	r4, r3, #46	; 0x2e
 8001c48:	f7ff fe12 	bl	8001870 <getChannel20>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	8023      	strh	r3, [r4, #0]

	arr[24] = getChannel36();
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001c56:	f7ff fe13 	bl	8001880 <getChannel36>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	8023      	strh	r3, [r4, #0]
	arr[25] = getChannel22();
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001c64:	f7ff fe14 	bl	8001890 <getChannel22>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	8023      	strh	r3, [r4, #0]
	arr[26] = getChannel55();
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8001c72:	f7ff fe15 	bl	80018a0 <getChannel55>
 8001c76:	4603      	mov	r3, r0
 8001c78:	8023      	strh	r3, [r4, #0]
	arr[27] = getChannel5();
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f103 0436 	add.w	r4, r3, #54	; 0x36
 8001c80:	f7ff fe16 	bl	80018b0 <getChannel5>
 8001c84:	4603      	mov	r3, r0
 8001c86:	8023      	strh	r3, [r4, #0]
	arr[28] = getChannel53();
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8001c8e:	f7ff fe17 	bl	80018c0 <getChannel53>
 8001c92:	4603      	mov	r3, r0
 8001c94:	8023      	strh	r3, [r4, #0]
	arr[29] = getChannel7();
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f103 043a 	add.w	r4, r3, #58	; 0x3a
 8001c9c:	f7ff fe18 	bl	80018d0 <getChannel7>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	8023      	strh	r3, [r4, #0]
	arr[30] = getChannel39();
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8001caa:	f7ff fe19 	bl	80018e0 <getChannel39>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	8023      	strh	r3, [r4, #0]
	arr[31] = getChannel21();
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f103 043e 	add.w	r4, r3, #62	; 0x3e
 8001cb8:	f7ff fe1a 	bl	80018f0 <getChannel21>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	8023      	strh	r3, [r4, #0]

	/* Integration Cycle C */
	arr[32] = getChannel37();
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001cc6:	f7ff fe1b 	bl	8001900 <getChannel37>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	8023      	strh	r3, [r4, #0]
	arr[33] = getChannel23();
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f103 0442 	add.w	r4, r3, #66	; 0x42
 8001cd4:	f7ff fe1c 	bl	8001910 <getChannel23>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	8023      	strh	r3, [r4, #0]
	arr[34] = getChannel40();
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f103 0444 	add.w	r4, r3, #68	; 0x44
 8001ce2:	f7ff fe1d 	bl	8001920 <getChannel40>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	8023      	strh	r3, [r4, #0]
	arr[35] = getChannel26();
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f103 0446 	add.w	r4, r3, #70	; 0x46
 8001cf0:	f7ff fe1e 	bl	8001930 <getChannel26>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	8023      	strh	r3, [r4, #0]
	arr[36] = getChannel42();
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8001cfe:	f7ff fe1f 	bl	8001940 <getChannel42>
 8001d02:	4603      	mov	r3, r0
 8001d04:	8023      	strh	r3, [r4, #0]
	arr[37] = getChannel24();
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f103 044a 	add.w	r4, r3, #74	; 0x4a
 8001d0c:	f7ff fe20 	bl	8001950 <getChannel24>
 8001d10:	4603      	mov	r3, r0
 8001d12:	8023      	strh	r3, [r4, #0]
	arr[38] = getChannel56();
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8001d1a:	f7ff fe21 	bl	8001960 <getChannel56>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	8023      	strh	r3, [r4, #0]
	arr[39] = getChannel10();
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f103 044e 	add.w	r4, r3, #78	; 0x4e
 8001d28:	f7ff fe22 	bl	8001970 <getChannel10>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	8023      	strh	r3, [r4, #0]

	arr[40] = getChannel58();
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8001d36:	f7ff fe23 	bl	8001980 <getChannel58>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	8023      	strh	r3, [r4, #0]
	arr[41] = getChannel8();
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f103 0452 	add.w	r4, r3, #82	; 0x52
 8001d44:	f7ff fe24 	bl	8001990 <getChannel8>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	8023      	strh	r3, [r4, #0]
	arr[42] = getChannel41();
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8001d52:	f7ff fe25 	bl	80019a0 <getChannel41>
 8001d56:	4603      	mov	r3, r0
 8001d58:	8023      	strh	r3, [r4, #0]
	arr[43] = getChannel27();
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f103 0456 	add.w	r4, r3, #86	; 0x56
 8001d60:	f7ff fe26 	bl	80019b0 <getChannel27>
 8001d64:	4603      	mov	r3, r0
 8001d66:	8023      	strh	r3, [r4, #0]
	arr[44] = getChannel43();
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f103 0458 	add.w	r4, r3, #88	; 0x58
 8001d6e:	f7ff fe27 	bl	80019c0 <getChannel43>
 8001d72:	4603      	mov	r3, r0
 8001d74:	8023      	strh	r3, [r4, #0]
	arr[45] = getChannel25();
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f103 045a 	add.w	r4, r3, #90	; 0x5a
 8001d7c:	f7ff fe28 	bl	80019d0 <getChannel25>
 8001d80:	4603      	mov	r3, r0
 8001d82:	8023      	strh	r3, [r4, #0]
	arr[46] = getChannel57();
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8001d8a:	f7ff fe29 	bl	80019e0 <getChannel57>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	8023      	strh	r3, [r4, #0]
	arr[47] = getChannel11();
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f103 045e 	add.w	r4, r3, #94	; 0x5e
 8001d98:	f7ff fe2a 	bl	80019f0 <getChannel11>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	8023      	strh	r3, [r4, #0]

	/* Integration Cycle D */
	arr[48] = getChannel59();
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8001da6:	f7ff fe2b 	bl	8001a00 <getChannel59>
 8001daa:	4603      	mov	r3, r0
 8001dac:	8023      	strh	r3, [r4, #0]
	arr[49] = getChannel9();
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f103 0462 	add.w	r4, r3, #98	; 0x62
 8001db4:	f7ff fe2c 	bl	8001a10 <getChannel9>
 8001db8:	4603      	mov	r3, r0
 8001dba:	8023      	strh	r3, [r4, #0]
	arr[50] = getChannel44();
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8001dc2:	f7ff fe2d 	bl	8001a20 <getChannel44>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	8023      	strh	r3, [r4, #0]
	arr[51] = getChannel30();
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f103 0466 	add.w	r4, r3, #102	; 0x66
 8001dd0:	f7ff fe2e 	bl	8001a30 <getChannel30>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	8023      	strh	r3, [r4, #0]
	arr[52] = getChannel46();
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8001dde:	f7ff fe2f 	bl	8001a40 <getChannel46>
 8001de2:	4603      	mov	r3, r0
 8001de4:	8023      	strh	r3, [r4, #0]
	arr[53] = getChannel28();
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f103 046a 	add.w	r4, r3, #106	; 0x6a
 8001dec:	f7ff fe30 	bl	8001a50 <getChannel28>
 8001df0:	4603      	mov	r3, r0
 8001df2:	8023      	strh	r3, [r4, #0]
	arr[54] = getChannel60();
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8001dfa:	f7ff fe31 	bl	8001a60 <getChannel60>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	8023      	strh	r3, [r4, #0]
	arr[55] = getChannel14();
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 8001e08:	f7ff fe32 	bl	8001a70 <getChannel14>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	8023      	strh	r3, [r4, #0]

	arr[56] = getChannel62();
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001e16:	f7ff fe33 	bl	8001a80 <getChannel62>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	8023      	strh	r3, [r4, #0]
	arr[57] = getChannel12();
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f103 0472 	add.w	r4, r3, #114	; 0x72
 8001e24:	f7ff fe34 	bl	8001a90 <getChannel12>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	8023      	strh	r3, [r4, #0]
	arr[58] = getChannel45();
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f103 0474 	add.w	r4, r3, #116	; 0x74
 8001e32:	f7ff fe35 	bl	8001aa0 <getChannel45>
 8001e36:	4603      	mov	r3, r0
 8001e38:	8023      	strh	r3, [r4, #0]
	arr[59] = getChannel31();
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f103 0476 	add.w	r4, r3, #118	; 0x76
 8001e40:	f7ff fe36 	bl	8001ab0 <getChannel31>
 8001e44:	4603      	mov	r3, r0
 8001e46:	8023      	strh	r3, [r4, #0]
	arr[60] = getChannel47();
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8001e4e:	f7ff fe37 	bl	8001ac0 <getChannel47>
 8001e52:	4603      	mov	r3, r0
 8001e54:	8023      	strh	r3, [r4, #0]
	arr[61] = getChannel29();
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f103 047a 	add.w	r4, r3, #122	; 0x7a
 8001e5c:	f7ff fe38 	bl	8001ad0 <getChannel29>
 8001e60:	4603      	mov	r3, r0
 8001e62:	8023      	strh	r3, [r4, #0]
	arr[62] = getChannel61();
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8001e6a:	f7ff fe39 	bl	8001ae0 <getChannel61>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	8023      	strh	r3, [r4, #0]
	arr[63] = getChannel15();
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f103 047e 	add.w	r4, r3, #126	; 0x7e
 8001e78:	f7ff fe3a 	bl	8001af0 <getChannel15>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	8023      	strh	r3, [r4, #0]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd90      	pop	{r4, r7, pc}

08001e88 <recordTemperatures>:



// Helper function to record temperature data
uint16_t recordTemperatures(uint8_t addr)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2] = {0};
 8001e92:	2300      	movs	r3, #0
 8001e94:	81bb      	strh	r3, [r7, #12]
	AS7421_readRegisters(addr, 2, data);
 8001e96:	f107 020c 	add.w	r2, r7, #12
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	2102      	movs	r1, #2
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe fe9d 	bl	8000bde <AS7421_readRegisters>

	// Combine the two bytes into a 16-bit value
	return ((uint16_t)data[1] << 8) | data[0];
 8001ea4:	7b7b      	ldrb	r3, [r7, #13]
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	b21a      	sxth	r2, r3
 8001eaa:	7b3b      	ldrb	r3, [r7, #12]
 8001eac:	b21b      	sxth	r3, r3
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	b21b      	sxth	r3, r3
 8001eb2:	b29b      	uxth	r3, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <getTemp_IntA>:

uint16_t getTemp_IntA()
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
	return recordTemperatures(TEMPA);
 8001ec0:	2078      	movs	r0, #120	; 0x78
 8001ec2:	f7ff ffe1 	bl	8001e88 <recordTemperatures>
 8001ec6:	4603      	mov	r3, r0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <getTemp_IntB>:
uint16_t getTemp_IntB()
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
	return recordTemperatures(TEMPB);
 8001ed0:	207a      	movs	r0, #122	; 0x7a
 8001ed2:	f7ff ffd9 	bl	8001e88 <recordTemperatures>
 8001ed6:	4603      	mov	r3, r0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	bd80      	pop	{r7, pc}

08001edc <getTemp_IntC>:
uint16_t getTemp_IntC()
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
	return recordTemperatures(TEMPC);
 8001ee0:	207c      	movs	r0, #124	; 0x7c
 8001ee2:	f7ff ffd1 	bl	8001e88 <recordTemperatures>
 8001ee6:	4603      	mov	r3, r0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd80      	pop	{r7, pc}

08001eec <getTemp_IntD>:
uint16_t getTemp_IntD()
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
	return recordTemperatures(TEMPD);
 8001ef0:	207e      	movs	r0, #126	; 0x7e
 8001ef2:	f7ff ffc9 	bl	8001e88 <recordTemperatures>
 8001ef6:	4603      	mov	r3, r0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	bd80      	pop	{r7, pc}

08001efc <getAllTemperatureData>:

void getAllTemperatureData(uint16_t arr[TEMPSIZE])
{
 8001efc:	b590      	push	{r4, r7, lr}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
	arr[0] = getTemp_IntA();
 8001f04:	f7ff ffda 	bl	8001ebc <getTemp_IntA>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	801a      	strh	r2, [r3, #0]
	arr[1] = getTemp_IntB();
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	1c9c      	adds	r4, r3, #2
 8001f14:	f7ff ffda 	bl	8001ecc <getTemp_IntB>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	8023      	strh	r3, [r4, #0]
	arr[2] = getTemp_IntC();
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	1d1c      	adds	r4, r3, #4
 8001f20:	f7ff ffdc 	bl	8001edc <getTemp_IntC>
 8001f24:	4603      	mov	r3, r0
 8001f26:	8023      	strh	r3, [r4, #0]
	arr[3] = getTemp_IntD();
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	1d9c      	adds	r4, r3, #6
 8001f2c:	f7ff ffde 	bl	8001eec <getTemp_IntD>
 8001f30:	4603      	mov	r3, r0
 8001f32:	8023      	strh	r3, [r4, #0]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd90      	pop	{r4, r7, pc}

08001f3c <I2C1_Init>:
//#define	SR1_BTF					(1U<<2)
//#define SR1_AF					(1U<<10)


void I2C1_Init(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOB*/
	RCC->AHB1ENR |= GPIOBEN;
 8001f40:	4b4d      	ldr	r3, [pc, #308]	; (8002078 <I2C1_Init+0x13c>)
 8001f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f44:	4a4c      	ldr	r2, [pc, #304]	; (8002078 <I2C1_Init+0x13c>)
 8001f46:	f043 0302 	orr.w	r3, r3, #2
 8001f4a:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PB6 and PB7 mode to alternate function*/
	GPIOB->MODER &= ~(1U<<12);
 8001f4c:	4b4b      	ldr	r3, [pc, #300]	; (800207c <I2C1_Init+0x140>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a4a      	ldr	r2, [pc, #296]	; (800207c <I2C1_Init+0x140>)
 8001f52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f56:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<13);
 8001f58:	4b48      	ldr	r3, [pc, #288]	; (800207c <I2C1_Init+0x140>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a47      	ldr	r2, [pc, #284]	; (800207c <I2C1_Init+0x140>)
 8001f5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f62:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~(1U<<14);
 8001f64:	4b45      	ldr	r3, [pc, #276]	; (800207c <I2C1_Init+0x140>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a44      	ldr	r2, [pc, #272]	; (800207c <I2C1_Init+0x140>)
 8001f6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f6e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<15);
 8001f70:	4b42      	ldr	r3, [pc, #264]	; (800207c <I2C1_Init+0x140>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a41      	ldr	r2, [pc, #260]	; (800207c <I2C1_Init+0x140>)
 8001f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f7a:	6013      	str	r3, [r2, #0]

	/*Set PB6 and PB7 output type to  open drain*/
	GPIOB->OTYPER |= (1U<<6);
 8001f7c:	4b3f      	ldr	r3, [pc, #252]	; (800207c <I2C1_Init+0x140>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4a3e      	ldr	r2, [pc, #248]	; (800207c <I2C1_Init+0x140>)
 8001f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f86:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (1U<<7);
 8001f88:	4b3c      	ldr	r3, [pc, #240]	; (800207c <I2C1_Init+0x140>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	4a3b      	ldr	r2, [pc, #236]	; (800207c <I2C1_Init+0x140>)
 8001f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f92:	6053      	str	r3, [r2, #4]

	/*Enable Pull-up for PB6 and PB7*/
	GPIOB->PUPDR |= (1U<<12);
 8001f94:	4b39      	ldr	r3, [pc, #228]	; (800207c <I2C1_Init+0x140>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4a38      	ldr	r2, [pc, #224]	; (800207c <I2C1_Init+0x140>)
 8001f9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f9e:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<13);
 8001fa0:	4b36      	ldr	r3, [pc, #216]	; (800207c <I2C1_Init+0x140>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4a35      	ldr	r2, [pc, #212]	; (800207c <I2C1_Init+0x140>)
 8001fa6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001faa:	60d3      	str	r3, [r2, #12]

	GPIOB->PUPDR |= (1U<<14);
 8001fac:	4b33      	ldr	r3, [pc, #204]	; (800207c <I2C1_Init+0x140>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4a32      	ldr	r2, [pc, #200]	; (800207c <I2C1_Init+0x140>)
 8001fb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb6:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<15);
 8001fb8:	4b30      	ldr	r3, [pc, #192]	; (800207c <I2C1_Init+0x140>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4a2f      	ldr	r2, [pc, #188]	; (800207c <I2C1_Init+0x140>)
 8001fbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001fc2:	60d3      	str	r3, [r2, #12]

	/*Set PB6 and PB7 alternate function type to I2C (AF4)
	 * PB6 --> SCL
	 * PB7 --> SDA*/
	GPIOB->AFR[0] &= ~(1U<<24);
 8001fc4:	4b2d      	ldr	r3, [pc, #180]	; (800207c <I2C1_Init+0x140>)
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	4a2c      	ldr	r2, [pc, #176]	; (800207c <I2C1_Init+0x140>)
 8001fca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fce:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<25);
 8001fd0:	4b2a      	ldr	r3, [pc, #168]	; (800207c <I2C1_Init+0x140>)
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	4a29      	ldr	r2, [pc, #164]	; (800207c <I2C1_Init+0x140>)
 8001fd6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001fda:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1U<<26);
 8001fdc:	4b27      	ldr	r3, [pc, #156]	; (800207c <I2C1_Init+0x140>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	4a26      	ldr	r2, [pc, #152]	; (800207c <I2C1_Init+0x140>)
 8001fe2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fe6:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<27);
 8001fe8:	4b24      	ldr	r3, [pc, #144]	; (800207c <I2C1_Init+0x140>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	4a23      	ldr	r2, [pc, #140]	; (800207c <I2C1_Init+0x140>)
 8001fee:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001ff2:	6213      	str	r3, [r2, #32]

	GPIOB->AFR[0] &= ~(1U<<28);
 8001ff4:	4b21      	ldr	r3, [pc, #132]	; (800207c <I2C1_Init+0x140>)
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	4a20      	ldr	r2, [pc, #128]	; (800207c <I2C1_Init+0x140>)
 8001ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<29);
 8002000:	4b1e      	ldr	r3, [pc, #120]	; (800207c <I2C1_Init+0x140>)
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	4a1d      	ldr	r2, [pc, #116]	; (800207c <I2C1_Init+0x140>)
 8002006:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800200a:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1U<<30);
 800200c:	4b1b      	ldr	r3, [pc, #108]	; (800207c <I2C1_Init+0x140>)
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	4a1a      	ldr	r2, [pc, #104]	; (800207c <I2C1_Init+0x140>)
 8002012:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002016:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<31);
 8002018:	4b18      	ldr	r3, [pc, #96]	; (800207c <I2C1_Init+0x140>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	4a17      	ldr	r2, [pc, #92]	; (800207c <I2C1_Init+0x140>)
 800201e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002022:	6213      	str	r3, [r2, #32]

	/***Configuring I2C1***/

	/*Enable clock access to I2C1*/
	RCC->APB1ENR |= I2C1EN;
 8002024:	4b14      	ldr	r3, [pc, #80]	; (8002078 <I2C1_Init+0x13c>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	4a13      	ldr	r2, [pc, #76]	; (8002078 <I2C1_Init+0x13c>)
 800202a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800202e:	6413      	str	r3, [r2, #64]	; 0x40

	/*Enter reset mode  */
	I2C1->CR1 |= (1U<<15);
 8002030:	4b13      	ldr	r3, [pc, #76]	; (8002080 <I2C1_Init+0x144>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a12      	ldr	r2, [pc, #72]	; (8002080 <I2C1_Init+0x144>)
 8002036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800203a:	6013      	str	r3, [r2, #0]

	/*Come out of reset mode  */
	I2C1->CR1 &= ~(1U<<15);
 800203c:	4b10      	ldr	r3, [pc, #64]	; (8002080 <I2C1_Init+0x144>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a0f      	ldr	r2, [pc, #60]	; (8002080 <I2C1_Init+0x144>)
 8002042:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002046:	6013      	str	r3, [r2, #0]

	/*Set Peripheral clock frequency*/
	I2C1->CR2 = (1U<<4);   //16 Mhz
 8002048:	4b0d      	ldr	r3, [pc, #52]	; (8002080 <I2C1_Init+0x144>)
 800204a:	2210      	movs	r2, #16
 800204c:	605a      	str	r2, [r3, #4]
//
//	/*Set rise time */
//	I2C1->TRISE = SD_MODE_MAX_RISE_TIME; //(1000ns/(1/16MHz)+1 = 17

	/*Set I2C to fast mode, 400kHz clock */
	I2C1->CCR = 1; //Refer to ST reference manual for derivation
 800204e:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <I2C1_Init+0x144>)
 8002050:	2201      	movs	r2, #1
 8002052:	61da      	str	r2, [r3, #28]
	I2C1->CCR = I2C_FAST_DUTY; //Set to Fast mode and duty cycle of 16/9
 8002054:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <I2C1_Init+0x144>)
 8002056:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800205a:	61da      	str	r2, [r3, #28]

	/*Set rise time */
	I2C1->TRISE = 6;//FS_MODE_MAX_RISE_TIME; //(300ns/(1/16MHz)+1 = 5.8
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <I2C1_Init+0x144>)
 800205e:	2206      	movs	r2, #6
 8002060:	621a      	str	r2, [r3, #32]

	/*Enable I2C1 module */
	I2C1->CR1 |= CR1_PE;
 8002062:	4b07      	ldr	r3, [pc, #28]	; (8002080 <I2C1_Init+0x144>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a06      	ldr	r2, [pc, #24]	; (8002080 <I2C1_Init+0x144>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6013      	str	r3, [r2, #0]
}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	40023800 	.word	0x40023800
 800207c:	40020400 	.word	0x40020400
 8002080:	40005400 	.word	0x40005400

08002084 <I2C1_byteRead>:

void I2C1_byteRead(char saddr, char maddr, char* data) {
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	603a      	str	r2, [r7, #0]
 800208e:	71fb      	strb	r3, [r7, #7]
 8002090:	460b      	mov	r3, r1
 8002092:	71bb      	strb	r3, [r7, #6]

	  volatile int tmp;

	  /* Wait until bus not busy */
	  while (I2C1->SR2 & (SR2_BUSY)){}
 8002094:	bf00      	nop
 8002096:	4b37      	ldr	r3, [pc, #220]	; (8002174 <I2C1_byteRead+0xf0>)
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f9      	bne.n	8002096 <I2C1_byteRead+0x12>

	  /* Generate start condition */
	  I2C1->CR1 |= CR1_START;
 80020a2:	4b34      	ldr	r3, [pc, #208]	; (8002174 <I2C1_byteRead+0xf0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a33      	ldr	r2, [pc, #204]	; (8002174 <I2C1_byteRead+0xf0>)
 80020a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ac:	6013      	str	r3, [r2, #0]

	  /* Wait until start condition flag is set, note the negation */
	  /* Stay in loop if start flag is not set */
	  while (!(I2C1->SR1 & (SR1_SB))){}
 80020ae:	bf00      	nop
 80020b0:	4b30      	ldr	r3, [pc, #192]	; (8002174 <I2C1_byteRead+0xf0>)
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	f003 0301 	and.w	r3, r3, #1
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f9      	beq.n	80020b0 <I2C1_byteRead+0x2c>

	  /* Transmit slave address + Write (0) */
	  /* This slave address is sent to each slave device along with an indication to establish either read or write communication */
	  /* Yo device A, I want to write to one of your memory registers */
	  I2C1->DR = saddr << 1; // shifting the address left makes room for the R/W bit, which is 0 for write
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	005a      	lsls	r2, r3, #1
 80020c0:	4b2c      	ldr	r3, [pc, #176]	; (8002174 <I2C1_byteRead+0xf0>)
 80020c2:	611a      	str	r2, [r3, #16]

	  /* Wait until address flag is set */
	  /* Each slave device compares the address from master to its own address and sends an ACK if matched */
	  /* I'm device A and of course you can write to one of my registers */
	  while (!(I2C1->SR1 & (SR1_ADDR))){}
 80020c4:	bf00      	nop
 80020c6:	4b2b      	ldr	r3, [pc, #172]	; (8002174 <I2C1_byteRead+0xf0>)
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f9      	beq.n	80020c6 <I2C1_byteRead+0x42>

	  /* Clear address flag by reading SR2 register */
	  tmp = I2C1->SR2;
 80020d2:	4b28      	ldr	r3, [pc, #160]	; (8002174 <I2C1_byteRead+0xf0>)
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	60fb      	str	r3, [r7, #12]

	  /*Wait until transmitter empty */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 80020d8:	bf00      	nop
 80020da:	4b26      	ldr	r3, [pc, #152]	; (8002174 <I2C1_byteRead+0xf0>)
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f9      	beq.n	80020da <I2C1_byteRead+0x56>

	  /* Send register address */
	  /* Aight, here is the address of the register I'm want to write to read from*/
	  I2C1->DR = maddr;
 80020e6:	4a23      	ldr	r2, [pc, #140]	; (8002174 <I2C1_byteRead+0xf0>)
 80020e8:	79bb      	ldrb	r3, [r7, #6]
 80020ea:	6113      	str	r3, [r2, #16]

	  /*Wait until transmitter empty */
	  /* No probs */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 80020ec:	bf00      	nop
 80020ee:	4b21      	ldr	r3, [pc, #132]	; (8002174 <I2C1_byteRead+0xf0>)
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d0f9      	beq.n	80020ee <I2C1_byteRead+0x6a>

	 /* Begin actual reading process once slave device and register of interest are understood between master and slave*/
	 /*Generate restart */
	 I2C1->CR1 |= CR1_START;
 80020fa:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <I2C1_byteRead+0xf0>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a1d      	ldr	r2, [pc, #116]	; (8002174 <I2C1_byteRead+0xf0>)
 8002100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002104:	6013      	str	r3, [r2, #0]

	 /* Wait until start flag is set */
	 while (!(I2C1->SR1 & SR1_SB)){}
 8002106:	bf00      	nop
 8002108:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <I2C1_byteRead+0xf0>)
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f9      	beq.n	8002108 <I2C1_byteRead+0x84>

	 /* Transmit slave address + Read */
	 I2C1->DR = saddr << 1 | 1;
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	f043 0201 	orr.w	r2, r3, #1
 800211c:	4b15      	ldr	r3, [pc, #84]	; (8002174 <I2C1_byteRead+0xf0>)
 800211e:	611a      	str	r2, [r3, #16]

	 /* Wait until addr flag is set */
	 while (!(I2C1->SR1 & (SR1_ADDR))){}
 8002120:	bf00      	nop
 8002122:	4b14      	ldr	r3, [pc, #80]	; (8002174 <I2C1_byteRead+0xf0>)
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f9      	beq.n	8002122 <I2C1_byteRead+0x9e>

	 /* Clear addr flag */
	 tmp = I2C1->SR2;
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <I2C1_byteRead+0xf0>)
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	60fb      	str	r3, [r7, #12]

	 /* Disable Acknowledge */
	 I2C1->CR1 &= ~CR1_ACK;
 8002134:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <I2C1_byteRead+0xf0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0e      	ldr	r2, [pc, #56]	; (8002174 <I2C1_byteRead+0xf0>)
 800213a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800213e:	6013      	str	r3, [r2, #0]

	 /* Generate stop after data received */
	 I2C1->CR1 |= CR1_STOP;
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <I2C1_byteRead+0xf0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0b      	ldr	r2, [pc, #44]	; (8002174 <I2C1_byteRead+0xf0>)
 8002146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800214a:	6013      	str	r3, [r2, #0]

	 /* Wait until RXNE flag is set
	  * Wait until receiver is not empty (has contents to read)*/
	 while (!(I2C1->SR1 & SR1_RXNE)){}
 800214c:	bf00      	nop
 800214e:	4b09      	ldr	r3, [pc, #36]	; (8002174 <I2C1_byteRead+0xf0>)
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f9      	beq.n	800214e <I2C1_byteRead+0xca>

	 /* Read data from DR */
	 *data++ = I2C1->DR;
 800215a:	4b06      	ldr	r3, [pc, #24]	; (8002174 <I2C1_byteRead+0xf0>)
 800215c:	6919      	ldr	r1, [r3, #16]
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	603a      	str	r2, [r7, #0]
 8002164:	b2ca      	uxtb	r2, r1
 8002166:	701a      	strb	r2, [r3, #0]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	40005400 	.word	0x40005400

08002178 <I2C1_burstRead>:

void I2C1_burstRead(char saddr, char maddr, int n, char* data) {
 8002178:	b480      	push	{r7}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	60ba      	str	r2, [r7, #8]
 8002180:	607b      	str	r3, [r7, #4]
 8002182:	4603      	mov	r3, r0
 8002184:	73fb      	strb	r3, [r7, #15]
 8002186:	460b      	mov	r3, r1
 8002188:	73bb      	strb	r3, [r7, #14]

	  volatile int tmp;

	  /* Wait until bus not busy */
	  while (I2C1->SR2 & (SR2_BUSY)){}
 800218a:	bf00      	nop
 800218c:	4b47      	ldr	r3, [pc, #284]	; (80022ac <I2C1_burstRead+0x134>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1f9      	bne.n	800218c <I2C1_burstRead+0x14>

	  /* Generate start condition */
	  I2C1->CR1 |= CR1_START;
 8002198:	4b44      	ldr	r3, [pc, #272]	; (80022ac <I2C1_burstRead+0x134>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a43      	ldr	r2, [pc, #268]	; (80022ac <I2C1_burstRead+0x134>)
 800219e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a2:	6013      	str	r3, [r2, #0]

	  /* Wait until start condition flag is set, note the negation */
	  /* Stay in loop if start flag is not set */
	  while (!(I2C1->SR1 & (SR1_SB))){}
 80021a4:	bf00      	nop
 80021a6:	4b41      	ldr	r3, [pc, #260]	; (80022ac <I2C1_burstRead+0x134>)
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f9      	beq.n	80021a6 <I2C1_burstRead+0x2e>

	  /* Transmit slave address + Write (0) */
	  /* This slave address is sent to each slave device along with an indication to establish either read or write communication */
	  I2C1->DR = saddr << 1; // shifting the address left makes room for the R/W bit, which is 0 for write
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	005a      	lsls	r2, r3, #1
 80021b6:	4b3d      	ldr	r3, [pc, #244]	; (80022ac <I2C1_burstRead+0x134>)
 80021b8:	611a      	str	r2, [r3, #16]

	  /* Wait until address flag is set */
	  /* Each slave device compares the address from master to its own address and sends an ACK if matched */
	  while (!(I2C1->SR1 & (SR1_ADDR))){}
 80021ba:	bf00      	nop
 80021bc:	4b3b      	ldr	r3, [pc, #236]	; (80022ac <I2C1_burstRead+0x134>)
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f9      	beq.n	80021bc <I2C1_burstRead+0x44>

	  /* Clear address flag by reading SR2 register */
	  tmp = I2C1->SR2;
 80021c8:	4b38      	ldr	r3, [pc, #224]	; (80022ac <I2C1_burstRead+0x134>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	617b      	str	r3, [r7, #20]

	  /*Wait until transmitter empty */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 80021ce:	bf00      	nop
 80021d0:	4b36      	ldr	r3, [pc, #216]	; (80022ac <I2C1_burstRead+0x134>)
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f9      	beq.n	80021d0 <I2C1_burstRead+0x58>

	  /* Send register address */
	  I2C1->DR = maddr;
 80021dc:	4a33      	ldr	r2, [pc, #204]	; (80022ac <I2C1_burstRead+0x134>)
 80021de:	7bbb      	ldrb	r3, [r7, #14]
 80021e0:	6113      	str	r3, [r2, #16]

	  /*Wait until transmitter empty */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 80021e2:	bf00      	nop
 80021e4:	4b31      	ldr	r3, [pc, #196]	; (80022ac <I2C1_burstRead+0x134>)
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f9      	beq.n	80021e4 <I2C1_burstRead+0x6c>

	 /* Begin actual reading process once slave device and register of interest are understood between master and slave*/
	 /*Generate restart */
	 I2C1->CR1 |= CR1_START;
 80021f0:	4b2e      	ldr	r3, [pc, #184]	; (80022ac <I2C1_burstRead+0x134>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a2d      	ldr	r2, [pc, #180]	; (80022ac <I2C1_burstRead+0x134>)
 80021f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fa:	6013      	str	r3, [r2, #0]

	 /* Wait until start flag is set */
	 while (!(I2C1->SR1 & SR1_SB)){}
 80021fc:	bf00      	nop
 80021fe:	4b2b      	ldr	r3, [pc, #172]	; (80022ac <I2C1_burstRead+0x134>)
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f9      	beq.n	80021fe <I2C1_burstRead+0x86>

	 /* Transmit slave address + Read */
	 I2C1->DR = saddr << 1 | 1;
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	f043 0201 	orr.w	r2, r3, #1
 8002212:	4b26      	ldr	r3, [pc, #152]	; (80022ac <I2C1_burstRead+0x134>)
 8002214:	611a      	str	r2, [r3, #16]

	 /* Wait until addr flag is set */
	 while (!(I2C1->SR1 & (SR1_ADDR))){}
 8002216:	bf00      	nop
 8002218:	4b24      	ldr	r3, [pc, #144]	; (80022ac <I2C1_burstRead+0x134>)
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0f9      	beq.n	8002218 <I2C1_burstRead+0xa0>

	 /* Clear addr flag */
	 tmp = I2C1->SR2;
 8002224:	4b21      	ldr	r3, [pc, #132]	; (80022ac <I2C1_burstRead+0x134>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	617b      	str	r3, [r7, #20]

	 /* Enable Acknowledge */
	 I2C1->CR1 |= CR1_ACK;
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <I2C1_burstRead+0x134>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a1f      	ldr	r2, [pc, #124]	; (80022ac <I2C1_burstRead+0x134>)
 8002230:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002234:	6013      	str	r3, [r2, #0]

	 while(n > 0U)
 8002236:	e02e      	b.n	8002296 <I2C1_burstRead+0x11e>
	 {
		 /*if one byte*/
		 if(n == 1U)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d11a      	bne.n	8002274 <I2C1_burstRead+0xfc>
		 {
			 /* Disable Acknowledge */
			 I2C1->CR1 &= ~CR1_ACK;
 800223e:	4b1b      	ldr	r3, [pc, #108]	; (80022ac <I2C1_burstRead+0x134>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1a      	ldr	r2, [pc, #104]	; (80022ac <I2C1_burstRead+0x134>)
 8002244:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002248:	6013      	str	r3, [r2, #0]

			 /* Generate Stop */
			 I2C1->CR1 |= CR1_STOP;
 800224a:	4b18      	ldr	r3, [pc, #96]	; (80022ac <I2C1_burstRead+0x134>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a17      	ldr	r2, [pc, #92]	; (80022ac <I2C1_burstRead+0x134>)
 8002250:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002254:	6013      	str	r3, [r2, #0]

			 /* Wait for RXNE flag set */
			 while (!(I2C1->SR1 & SR1_RXNE)){}
 8002256:	bf00      	nop
 8002258:	4b14      	ldr	r3, [pc, #80]	; (80022ac <I2C1_burstRead+0x134>)
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f9      	beq.n	8002258 <I2C1_burstRead+0xe0>

			 /* Read data from DR */
			 *data++ = I2C1->DR;
 8002264:	4b11      	ldr	r3, [pc, #68]	; (80022ac <I2C1_burstRead+0x134>)
 8002266:	6919      	ldr	r1, [r3, #16]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	1c5a      	adds	r2, r3, #1
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	b2ca      	uxtb	r2, r1
 8002270:	701a      	strb	r2, [r3, #0]
			 break;
 8002272:	e014      	b.n	800229e <I2C1_burstRead+0x126>
		 }
		 else
		 {
			 /* Wait until RXNE flag is set */
			 while (!(I2C1->SR1 & SR1_RXNE)){}
 8002274:	bf00      	nop
 8002276:	4b0d      	ldr	r3, [pc, #52]	; (80022ac <I2C1_burstRead+0x134>)
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f9      	beq.n	8002276 <I2C1_burstRead+0xfe>

			 /* Read data from DR */
			 (*data++) = I2C1->DR;
 8002282:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <I2C1_burstRead+0x134>)
 8002284:	6919      	ldr	r1, [r3, #16]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	b2ca      	uxtb	r2, r1
 800228e:	701a      	strb	r2, [r3, #0]

			 n--;
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	3b01      	subs	r3, #1
 8002294:	60bb      	str	r3, [r7, #8]
	 while(n > 0U)
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1cd      	bne.n	8002238 <I2C1_burstRead+0xc0>
		 }
	 }

}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40005400 	.word	0x40005400

080022b0 <I2C1_burstWrite>:

void I2C1_burstWrite(char saddr, char maddr, int n, char* data) {
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60ba      	str	r2, [r7, #8]
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	4603      	mov	r3, r0
 80022bc:	73fb      	strb	r3, [r7, #15]
 80022be:	460b      	mov	r3, r1
 80022c0:	73bb      	strb	r3, [r7, #14]

	/* Temporary variable to read SR2*/
	volatile int tmp;

	/* Wait until bus not busy */
	while (I2C1->SR2 & (SR2_BUSY)){}
 80022c2:	bf00      	nop
 80022c4:	4b2a      	ldr	r3, [pc, #168]	; (8002370 <I2C1_burstWrite+0xc0>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	f003 0302 	and.w	r3, r3, #2
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1f9      	bne.n	80022c4 <I2C1_burstWrite+0x14>

	/* Generate start condition */
	I2C1->CR1 |= CR1_START;
 80022d0:	4b27      	ldr	r3, [pc, #156]	; (8002370 <I2C1_burstWrite+0xc0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a26      	ldr	r2, [pc, #152]	; (8002370 <I2C1_burstWrite+0xc0>)
 80022d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022da:	6013      	str	r3, [r2, #0]

	/* Wait until start condition flag is set, note the negation */
	/* Stay in loop if start flag is not set*/
	while (!(I2C1->SR1 & (SR1_SB))){}
 80022dc:	bf00      	nop
 80022de:	4b24      	ldr	r3, [pc, #144]	; (8002370 <I2C1_burstWrite+0xc0>)
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f9      	beq.n	80022de <I2C1_burstWrite+0x2e>

	/* Transmit slave address + Write (0) */
	/* This slave address is sent to each slave device along with an indication to establish either read or write communication*/
	/* Yo device A, I want to write to one of your memory registers */
	I2C1->DR = saddr << 1; // shifting the address left makes room for the R/W bit, which is 0 for write
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	005a      	lsls	r2, r3, #1
 80022ee:	4b20      	ldr	r3, [pc, #128]	; (8002370 <I2C1_burstWrite+0xc0>)
 80022f0:	611a      	str	r2, [r3, #16]

	/* Wait until address flag is set */
	/* Each slave device compares the address from master to its own address and sends an ACK if mathced*/
	/* I'm device A and of course you can write to one of my registers */
	while (!(I2C1->SR1 & (SR1_ADDR))){}
 80022f2:	bf00      	nop
 80022f4:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <I2C1_burstWrite+0xc0>)
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f9      	beq.n	80022f4 <I2C1_burstWrite+0x44>

	/* Clear address flag by reading SR2 register */
	tmp = I2C1->SR2;
 8002300:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <I2C1_burstWrite+0xc0>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	613b      	str	r3, [r7, #16]

	/*Wait until data register empty */
	while (!(I2C1->SR1 & SR1_TXE)){}
 8002306:	bf00      	nop
 8002308:	4b19      	ldr	r3, [pc, #100]	; (8002370 <I2C1_burstWrite+0xc0>)
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0f9      	beq.n	8002308 <I2C1_burstWrite+0x58>

	/* Send register address */
	/* aight here is the register I'm writing to write to and the value I want written */
	I2C1->DR = maddr;
 8002314:	4a16      	ldr	r2, [pc, #88]	; (8002370 <I2C1_burstWrite+0xc0>)
 8002316:	7bbb      	ldrb	r3, [r7, #14]
 8002318:	6113      	str	r3, [r2, #16]

	for (int i = 0; i < n; i++) {
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e00f      	b.n	8002340 <I2C1_burstWrite+0x90>

		/*Wait until data register empty */
		while (!(I2C1->SR1 & SR1_TXE)){}
 8002320:	bf00      	nop
 8002322:	4b13      	ldr	r3, [pc, #76]	; (8002370 <I2C1_burstWrite+0xc0>)
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f9      	beq.n	8002322 <I2C1_burstWrite+0x72>

		/* Transmit memory address */
		I2C1->DR = *data++;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	781a      	ldrb	r2, [r3, #0]
 8002336:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <I2C1_burstWrite+0xc0>)
 8002338:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < n; i++) {
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	3301      	adds	r3, #1
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	429a      	cmp	r2, r3
 8002346:	dbeb      	blt.n	8002320 <I2C1_burstWrite+0x70>
	}
	/* Wait until transfer finished */
	while (!(I2C1->SR1 & (SR1_BTF))){}
 8002348:	bf00      	nop
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <I2C1_burstWrite+0xc0>)
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f9      	beq.n	800234a <I2C1_burstWrite+0x9a>

	/* Generate stop */
	I2C1->CR1 |= CR1_STOP;
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <I2C1_burstWrite+0xc0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a05      	ldr	r2, [pc, #20]	; (8002370 <I2C1_burstWrite+0xc0>)
 800235c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002360:	6013      	str	r3, [r2, #0]
}
 8002362:	bf00      	nop
 8002364:	371c      	adds	r7, #28
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40005400 	.word	0x40005400

08002374 <main>:


#define NUM_CHANNELS		64

int main(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b0c6      	sub	sp, #280	; 0x118
 8002378:	af00      	add	r7, sp, #0
	// Containers to receive channel data
	uint16_t channel_data[CHANNELSIZE];
	uint16_t temp_data[CHANNELSIZE];


	startup();
 800237a:	f7fe fd61 	bl	8000e40 <startup>
	startMeasurements(true);
 800237e:	2001      	movs	r0, #1
 8002380:	f7ff f940 	bl	8001604 <startMeasurements>
	uint8_t count = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint32_t cycles = (20 * F_CLKMOD) - 1;
 800238a:	4b2f      	ldr	r3, [pc, #188]	; (8002448 <main+0xd4>)
 800238c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	while (1)
	{

		unsigned long startTime = getMillis();
 8002390:	f000 f984 	bl	800269c <getMillis>
 8002394:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
		while (getMeasurementStatus(ADATA) == 0){} //End of measurement, new measurement data can be read if true
 8002398:	bf00      	nop
 800239a:	2000      	movs	r0, #0
 800239c:	f7ff f972 	bl	8001684 <getMeasurementStatus>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f083 0301 	eor.w	r3, r3, #1
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1f6      	bne.n	800239a <main+0x26>

		unsigned long endTime = getMillis();
 80023ac:	f000 f976 	bl	800269c <getMillis>
 80023b0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
		printf("Time to get data: %ld \n\r", endTime - startTime);
 80023b4:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80023b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	4619      	mov	r1, r3
 80023c0:	4822      	ldr	r0, [pc, #136]	; (800244c <main+0xd8>)
 80023c2:	f000 ff83 	bl	80032cc <iprintf>

		getAllSpectralData(channel_data); //Reading spectral data channels and passing organized values into arrSpectra
 80023c6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fb98 	bl	8001b00 <getAllSpectralData>
		getAllTemperatureData(temp_data); //Reading temperatures of integration cycles A to D
 80023d0:	1d3b      	adds	r3, r7, #4
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7ff fd92 	bl	8001efc <getAllTemperatureData>

		printf("\nMeasurement %i: \n\r", count);
 80023d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80023dc:	4619      	mov	r1, r3
 80023de:	481c      	ldr	r0, [pc, #112]	; (8002450 <main+0xdc>)
 80023e0:	f000 ff74 	bl	80032cc <iprintf>
		for (int i = 0; i < NUM_CHANNELS; i++)
 80023e4:	2300      	movs	r3, #0
 80023e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80023ea:	e010      	b.n	800240e <main+0x9a>
		{
//			printf("Channel %i: %f\n\r", i+1, channel_data[i]);
			printf("%d\n\r", channel_data[i]);
 80023ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80023f6:	443b      	add	r3, r7
 80023f8:	f833 3c94 	ldrh.w	r3, [r3, #-148]
 80023fc:	4619      	mov	r1, r3
 80023fe:	4815      	ldr	r0, [pc, #84]	; (8002454 <main+0xe0>)
 8002400:	f000 ff64 	bl	80032cc <iprintf>
		for (int i = 0; i < NUM_CHANNELS; i++)
 8002404:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002408:	3301      	adds	r3, #1
 800240a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800240e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002412:	2b3f      	cmp	r3, #63	; 0x3f
 8002414:	ddea      	ble.n	80023ec <main+0x78>
		}

		count++;
 8002416:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800241a:	3301      	adds	r3, #1
 800241c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		if (count < 5)
 8002420:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8002424:	2b04      	cmp	r3, #4
 8002426:	d803      	bhi.n	8002430 <main+0xbc>
		{
			startMeasurements(true);
 8002428:	2001      	movs	r0, #1
 800242a:	f7ff f8eb 	bl	8001604 <startMeasurements>
	{
 800242e:	e7af      	b.n	8002390 <main+0x1c>
		}
		else
		{
			break;
 8002430:	bf00      	nop
		}
	}
	stopMeasurements();
 8002432:	f7ff f90a 	bl	800164a <stopMeasurements>
	sleep();
 8002436:	f7fe febd 	bl	80011b4 <sleep>

	return 0;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	01312cff 	.word	0x01312cff
 800244c:	080052ac 	.word	0x080052ac
 8002450:	080052c8 	.word	0x080052c8
 8002454:	080052dc 	.word	0x080052dc

08002458 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return 1;
 800245c:	2301      	movs	r3, #1
}
 800245e:	4618      	mov	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <_kill>:

int _kill(int pid, int sig)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002472:	f000 ffd3 	bl	800341c <__errno>
 8002476:	4603      	mov	r3, r0
 8002478:	2216      	movs	r2, #22
 800247a:	601a      	str	r2, [r3, #0]
  return -1;
 800247c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <_exit>:

void _exit (int status)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002490:	f04f 31ff 	mov.w	r1, #4294967295
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ffe7 	bl	8002468 <_kill>
  while (1) {}    /* Make sure we hang here */
 800249a:	e7fe      	b.n	800249a <_exit+0x12>

0800249c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	e00a      	b.n	80024c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024ae:	f3af 8000 	nop.w
 80024b2:	4601      	mov	r1, r0
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	60ba      	str	r2, [r7, #8]
 80024ba:	b2ca      	uxtb	r2, r1
 80024bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	3301      	adds	r3, #1
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	dbf0      	blt.n	80024ae <_read+0x12>
  }

  return len;
 80024cc:	687b      	ldr	r3, [r7, #4]
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024d6:	b580      	push	{r7, lr}
 80024d8:	b086      	sub	sp, #24
 80024da:	af00      	add	r7, sp, #0
 80024dc:	60f8      	str	r0, [r7, #12]
 80024de:	60b9      	str	r1, [r7, #8]
 80024e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	e009      	b.n	80024fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	1c5a      	adds	r2, r3, #1
 80024ec:	60ba      	str	r2, [r7, #8]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f000 f8df 	bl	80026b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	3301      	adds	r3, #1
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	429a      	cmp	r2, r3
 8002502:	dbf1      	blt.n	80024e8 <_write+0x12>
  }
  return len;
 8002504:	687b      	ldr	r3, [r7, #4]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <_close>:

int _close(int file)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002516:	f04f 33ff 	mov.w	r3, #4294967295
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002536:	605a      	str	r2, [r3, #4]
  return 0;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr

08002546 <_isatty>:

int _isatty(int file)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800254e:	2301      	movs	r3, #1
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002580:	4a14      	ldr	r2, [pc, #80]	; (80025d4 <_sbrk+0x5c>)
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <_sbrk+0x60>)
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800258c:	4b13      	ldr	r3, [pc, #76]	; (80025dc <_sbrk+0x64>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002594:	4b11      	ldr	r3, [pc, #68]	; (80025dc <_sbrk+0x64>)
 8002596:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <_sbrk+0x68>)
 8002598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <_sbrk+0x64>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d207      	bcs.n	80025b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025a8:	f000 ff38 	bl	800341c <__errno>
 80025ac:	4603      	mov	r3, r0
 80025ae:	220c      	movs	r2, #12
 80025b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
 80025b6:	e009      	b.n	80025cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025b8:	4b08      	ldr	r3, [pc, #32]	; (80025dc <_sbrk+0x64>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025be:	4b07      	ldr	r3, [pc, #28]	; (80025dc <_sbrk+0x64>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <_sbrk+0x64>)
 80025c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ca:	68fb      	ldr	r3, [r7, #12]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20018000 	.word	0x20018000
 80025d8:	00000400 	.word	0x00000400
 80025dc:	200001ec 	.word	0x200001ec
 80025e0:	20000340 	.word	0x20000340

080025e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	6039      	str	r1, [r7, #0]
 80025ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	db0a      	blt.n	800260e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	490c      	ldr	r1, [pc, #48]	; (8002630 <__NVIC_SetPriority+0x4c>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	0112      	lsls	r2, r2, #4
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	440b      	add	r3, r1
 8002608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800260c:	e00a      	b.n	8002624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4908      	ldr	r1, [pc, #32]	; (8002634 <__NVIC_SetPriority+0x50>)
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	3b04      	subs	r3, #4
 800261c:	0112      	lsls	r2, r2, #4
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	440b      	add	r3, r1
 8002622:	761a      	strb	r2, [r3, #24]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000e100 	.word	0xe000e100
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <SysTick_Init>:
#define CTRL_COUNTFLAG			(1U<<16)

volatile uint32_t msTicks = 0;

void SysTick_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
    // Reload with the number of clocks per millisecond
    SysTick->LOAD = SYSTICK_LOAD_VAL - 1;  // Set reload register (off by one)
 800263c:	4b0f      	ldr	r3, [pc, #60]	; (800267c <SysTick_Init+0x44>)
 800263e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002642:	605a      	str	r2, [r3, #4]

    // Set the priority of the SysTick interrupt
    NVIC_SetPriority(SysTick_IRQn, (1 << __NVIC_PRIO_BITS) - 1);  // Set lowest priority
 8002644:	210f      	movs	r1, #15
 8002646:	f04f 30ff 	mov.w	r0, #4294967295
 800264a:	f7ff ffcb 	bl	80025e4 <__NVIC_SetPriority>

    // Reset the SysTick counter value
    SysTick->VAL = 0;
 800264e:	4b0b      	ldr	r3, [pc, #44]	; (800267c <SysTick_Init+0x44>)
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]

    // Select processor clock as SysTick clock source
    SysTick->CTRL |= CTRL_CLKSRC;
 8002654:	4b09      	ldr	r3, [pc, #36]	; (800267c <SysTick_Init+0x44>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a08      	ldr	r2, [pc, #32]	; (800267c <SysTick_Init+0x44>)
 800265a:	f043 0304 	orr.w	r3, r3, #4
 800265e:	6013      	str	r3, [r2, #0]

    // Enable SysTick interrupt
    SysTick->CTRL |= CTRL_TICKINT;
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <SysTick_Init+0x44>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a05      	ldr	r2, [pc, #20]	; (800267c <SysTick_Init+0x44>)
 8002666:	f043 0302 	orr.w	r3, r3, #2
 800266a:	6013      	str	r3, [r2, #0]

    // Enable SysTick timer
    SysTick->CTRL |= CTRL_ENABLE;
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <SysTick_Init+0x44>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a02      	ldr	r2, [pc, #8]	; (800267c <SysTick_Init+0x44>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	6013      	str	r3, [r2, #0]
}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}
 800267c:	e000e010 	.word	0xe000e010

08002680 <SysTick_Handler>:

// SysTick Handler - Called every 1ms
void SysTick_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
	msTicks++;
 8002684:	4b04      	ldr	r3, [pc, #16]	; (8002698 <SysTick_Handler+0x18>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	3301      	adds	r3, #1
 800268a:	4a03      	ldr	r2, [pc, #12]	; (8002698 <SysTick_Handler+0x18>)
 800268c:	6013      	str	r3, [r2, #0]
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	200001f0 	.word	0x200001f0

0800269c <getMillis>:

// Function to get the current time in milliseconds
uint32_t getMillis(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
	return msTicks;
 80026a0:	4b03      	ldr	r3, [pc, #12]	; (80026b0 <getMillis+0x14>)
 80026a2:	681b      	ldr	r3, [r3, #0]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	200001f0 	.word	0x200001f0

080026b4 <__io_putchar>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);

int __io_putchar(int ch)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f875 	bl	80027ac <uart2_write>
	return ch;
 80026c2:	687b      	ldr	r3, [r7, #4]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <uart2_rxtx_init>:

void uart2_rxtx_init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
	/****************Configure uart  pin using gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 80026d0:	4b32      	ldr	r3, [pc, #200]	; (800279c <uart2_rxtx_init+0xd0>)
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	4a31      	ldr	r2, [pc, #196]	; (800279c <uart2_rxtx_init+0xd0>)
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	6313      	str	r3, [r2, #48]	; 0x30


	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~ (1U<<4);
 80026dc:	4b30      	ldr	r3, [pc, #192]	; (80027a0 <uart2_rxtx_init+0xd4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a2f      	ldr	r2, [pc, #188]	; (80027a0 <uart2_rxtx_init+0xd4>)
 80026e2:	f023 0310 	bic.w	r3, r3, #16
 80026e6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80026e8:	4b2d      	ldr	r3, [pc, #180]	; (80027a0 <uart2_rxtx_init+0xd4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a2c      	ldr	r2, [pc, #176]	; (80027a0 <uart2_rxtx_init+0xd4>)
 80026ee:	f043 0320 	orr.w	r3, r3, #32
 80026f2:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0]|= (1U<<8);
 80026f4:	4b2a      	ldr	r3, [pc, #168]	; (80027a0 <uart2_rxtx_init+0xd4>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	4a29      	ldr	r2, [pc, #164]	; (80027a0 <uart2_rxtx_init+0xd4>)
 80026fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026fe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<9);
 8002700:	4b27      	ldr	r3, [pc, #156]	; (80027a0 <uart2_rxtx_init+0xd4>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	4a26      	ldr	r2, [pc, #152]	; (80027a0 <uart2_rxtx_init+0xd4>)
 8002706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800270a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<10);
 800270c:	4b24      	ldr	r3, [pc, #144]	; (80027a0 <uart2_rxtx_init+0xd4>)
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	4a23      	ldr	r2, [pc, #140]	; (80027a0 <uart2_rxtx_init+0xd4>)
 8002712:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002716:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<11);
 8002718:	4b21      	ldr	r3, [pc, #132]	; (80027a0 <uart2_rxtx_init+0xd4>)
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	4a20      	ldr	r2, [pc, #128]	; (80027a0 <uart2_rxtx_init+0xd4>)
 800271e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002722:	6213      	str	r3, [r2, #32]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~ (1U<<6);
 8002724:	4b1e      	ldr	r3, [pc, #120]	; (80027a0 <uart2_rxtx_init+0xd4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a1d      	ldr	r2, [pc, #116]	; (80027a0 <uart2_rxtx_init+0xd4>)
 800272a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800272e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <uart2_rxtx_init+0xd4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a1a      	ldr	r2, [pc, #104]	; (80027a0 <uart2_rxtx_init+0xd4>)
 8002736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800273a:	6013      	str	r3, [r2, #0]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0]|= (1U<<12);
 800273c:	4b18      	ldr	r3, [pc, #96]	; (80027a0 <uart2_rxtx_init+0xd4>)
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	4a17      	ldr	r2, [pc, #92]	; (80027a0 <uart2_rxtx_init+0xd4>)
 8002742:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002746:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<13);
 8002748:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <uart2_rxtx_init+0xd4>)
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <uart2_rxtx_init+0xd4>)
 800274e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002752:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<14);
 8002754:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <uart2_rxtx_init+0xd4>)
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	4a11      	ldr	r2, [pc, #68]	; (80027a0 <uart2_rxtx_init+0xd4>)
 800275a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800275e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<15);
 8002760:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <uart2_rxtx_init+0xd4>)
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	4a0e      	ldr	r2, [pc, #56]	; (80027a0 <uart2_rxtx_init+0xd4>)
 8002766:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800276a:	6213      	str	r3, [r2, #32]



	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= USART2EN;
 800276c:	4b0b      	ldr	r3, [pc, #44]	; (800279c <uart2_rxtx_init+0xd0>)
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	4a0a      	ldr	r2, [pc, #40]	; (800279c <uart2_rxtx_init+0xd0>)
 8002772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002776:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8002778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800277c:	4909      	ldr	r1, [pc, #36]	; (80027a4 <uart2_rxtx_init+0xd8>)
 800277e:	480a      	ldr	r0, [pc, #40]	; (80027a8 <uart2_rxtx_init+0xdc>)
 8002780:	f000 f82c 	bl	80027dc <uart_set_baudrate>

	/*Configure the transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <uart2_rxtx_init+0xdc>)
 8002786:	220c      	movs	r2, #12
 8002788:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	USART2->CR1 |= CR1_UE;
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <uart2_rxtx_init+0xdc>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	4a06      	ldr	r2, [pc, #24]	; (80027a8 <uart2_rxtx_init+0xdc>)
 8002790:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002794:	60d3      	str	r3, [r2, #12]

}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800
 80027a0:	40020000 	.word	0x40020000
 80027a4:	00f42400 	.word	0x00f42400
 80027a8:	40004400 	.word	0x40004400

080027ac <uart2_write>:
	return USART2->DR;

}

void uart2_write(int ch)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){} // Program stays here until condition in while loop no longer holds
 80027b4:	bf00      	nop
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <uart2_write+0x2c>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f9      	beq.n	80027b6 <uart2_write+0xa>

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a04      	ldr	r2, [pc, #16]	; (80027d8 <uart2_write+0x2c>)
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	6053      	str	r3, [r2, #4]
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40004400 	.word	0x40004400

080027dc <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	60f8      	str	r0, [r7, #12]
 80027e4:	60b9      	str	r1, [r7, #8]
 80027e6:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	68b8      	ldr	r0, [r7, #8]
 80027ec:	f000 f808 	bl	8002800 <compute_uart_bd>
 80027f0:	4603      	mov	r3, r0
 80027f2:	461a      	mov	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	609a      	str	r2, [r3, #8]
}
 80027f8:	bf00      	nop
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	085a      	lsrs	r2, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	441a      	add	r2, r3
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	fbb2 f3f3 	udiv	r3, r2, r3
 8002818:	b29b      	uxth	r3, r3
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
	...

08002828 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002828:	480d      	ldr	r0, [pc, #52]	; (8002860 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800282a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800282c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002830:	480c      	ldr	r0, [pc, #48]	; (8002864 <LoopForever+0x6>)
  ldr r1, =_edata
 8002832:	490d      	ldr	r1, [pc, #52]	; (8002868 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002834:	4a0d      	ldr	r2, [pc, #52]	; (800286c <LoopForever+0xe>)
  movs r3, #0
 8002836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002838:	e002      	b.n	8002840 <LoopCopyDataInit>

0800283a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800283a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800283c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800283e:	3304      	adds	r3, #4

08002840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002844:	d3f9      	bcc.n	800283a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002846:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002848:	4c0a      	ldr	r4, [pc, #40]	; (8002874 <LoopForever+0x16>)
  movs r3, #0
 800284a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800284c:	e001      	b.n	8002852 <LoopFillZerobss>

0800284e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800284e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002850:	3204      	adds	r2, #4

08002852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002854:	d3fb      	bcc.n	800284e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002856:	f000 fde7 	bl	8003428 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800285a:	f7ff fd8b 	bl	8002374 <main>

0800285e <LoopForever>:

LoopForever:
  b LoopForever
 800285e:	e7fe      	b.n	800285e <LoopForever>
  ldr   r0, =_estack
 8002860:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002868:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 800286c:	0800565c 	.word	0x0800565c
  ldr r2, =_sbss
 8002870:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8002874:	20000340 	.word	0x20000340

08002878 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002878:	e7fe      	b.n	8002878 <ADC_IRQHandler>

0800287a <__cvt>:
 800287a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800287e:	ec55 4b10 	vmov	r4, r5, d0
 8002882:	2d00      	cmp	r5, #0
 8002884:	460e      	mov	r6, r1
 8002886:	4619      	mov	r1, r3
 8002888:	462b      	mov	r3, r5
 800288a:	bfbb      	ittet	lt
 800288c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002890:	461d      	movlt	r5, r3
 8002892:	2300      	movge	r3, #0
 8002894:	232d      	movlt	r3, #45	; 0x2d
 8002896:	700b      	strb	r3, [r1, #0]
 8002898:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800289a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800289e:	4691      	mov	r9, r2
 80028a0:	f023 0820 	bic.w	r8, r3, #32
 80028a4:	bfbc      	itt	lt
 80028a6:	4622      	movlt	r2, r4
 80028a8:	4614      	movlt	r4, r2
 80028aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80028ae:	d005      	beq.n	80028bc <__cvt+0x42>
 80028b0:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80028b4:	d100      	bne.n	80028b8 <__cvt+0x3e>
 80028b6:	3601      	adds	r6, #1
 80028b8:	2102      	movs	r1, #2
 80028ba:	e000      	b.n	80028be <__cvt+0x44>
 80028bc:	2103      	movs	r1, #3
 80028be:	ab03      	add	r3, sp, #12
 80028c0:	9301      	str	r3, [sp, #4]
 80028c2:	ab02      	add	r3, sp, #8
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	ec45 4b10 	vmov	d0, r4, r5
 80028ca:	4653      	mov	r3, sl
 80028cc:	4632      	mov	r2, r6
 80028ce:	f000 fe5b 	bl	8003588 <_dtoa_r>
 80028d2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80028d6:	4607      	mov	r7, r0
 80028d8:	d102      	bne.n	80028e0 <__cvt+0x66>
 80028da:	f019 0f01 	tst.w	r9, #1
 80028de:	d022      	beq.n	8002926 <__cvt+0xac>
 80028e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80028e4:	eb07 0906 	add.w	r9, r7, r6
 80028e8:	d110      	bne.n	800290c <__cvt+0x92>
 80028ea:	783b      	ldrb	r3, [r7, #0]
 80028ec:	2b30      	cmp	r3, #48	; 0x30
 80028ee:	d10a      	bne.n	8002906 <__cvt+0x8c>
 80028f0:	2200      	movs	r2, #0
 80028f2:	2300      	movs	r3, #0
 80028f4:	4620      	mov	r0, r4
 80028f6:	4629      	mov	r1, r5
 80028f8:	f7fe f8ee 	bl	8000ad8 <__aeabi_dcmpeq>
 80028fc:	b918      	cbnz	r0, 8002906 <__cvt+0x8c>
 80028fe:	f1c6 0601 	rsb	r6, r6, #1
 8002902:	f8ca 6000 	str.w	r6, [sl]
 8002906:	f8da 3000 	ldr.w	r3, [sl]
 800290a:	4499      	add	r9, r3
 800290c:	2200      	movs	r2, #0
 800290e:	2300      	movs	r3, #0
 8002910:	4620      	mov	r0, r4
 8002912:	4629      	mov	r1, r5
 8002914:	f7fe f8e0 	bl	8000ad8 <__aeabi_dcmpeq>
 8002918:	b108      	cbz	r0, 800291e <__cvt+0xa4>
 800291a:	f8cd 900c 	str.w	r9, [sp, #12]
 800291e:	2230      	movs	r2, #48	; 0x30
 8002920:	9b03      	ldr	r3, [sp, #12]
 8002922:	454b      	cmp	r3, r9
 8002924:	d307      	bcc.n	8002936 <__cvt+0xbc>
 8002926:	9b03      	ldr	r3, [sp, #12]
 8002928:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800292a:	1bdb      	subs	r3, r3, r7
 800292c:	4638      	mov	r0, r7
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	b004      	add	sp, #16
 8002932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002936:	1c59      	adds	r1, r3, #1
 8002938:	9103      	str	r1, [sp, #12]
 800293a:	701a      	strb	r2, [r3, #0]
 800293c:	e7f0      	b.n	8002920 <__cvt+0xa6>

0800293e <__exponent>:
 800293e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002940:	4603      	mov	r3, r0
 8002942:	2900      	cmp	r1, #0
 8002944:	bfb8      	it	lt
 8002946:	4249      	neglt	r1, r1
 8002948:	f803 2b02 	strb.w	r2, [r3], #2
 800294c:	bfb4      	ite	lt
 800294e:	222d      	movlt	r2, #45	; 0x2d
 8002950:	222b      	movge	r2, #43	; 0x2b
 8002952:	2909      	cmp	r1, #9
 8002954:	7042      	strb	r2, [r0, #1]
 8002956:	dd2a      	ble.n	80029ae <__exponent+0x70>
 8002958:	f10d 0207 	add.w	r2, sp, #7
 800295c:	4617      	mov	r7, r2
 800295e:	260a      	movs	r6, #10
 8002960:	4694      	mov	ip, r2
 8002962:	fb91 f5f6 	sdiv	r5, r1, r6
 8002966:	fb06 1415 	mls	r4, r6, r5, r1
 800296a:	3430      	adds	r4, #48	; 0x30
 800296c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8002970:	460c      	mov	r4, r1
 8002972:	2c63      	cmp	r4, #99	; 0x63
 8002974:	f102 32ff 	add.w	r2, r2, #4294967295
 8002978:	4629      	mov	r1, r5
 800297a:	dcf1      	bgt.n	8002960 <__exponent+0x22>
 800297c:	3130      	adds	r1, #48	; 0x30
 800297e:	f1ac 0402 	sub.w	r4, ip, #2
 8002982:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002986:	1c41      	adds	r1, r0, #1
 8002988:	4622      	mov	r2, r4
 800298a:	42ba      	cmp	r2, r7
 800298c:	d30a      	bcc.n	80029a4 <__exponent+0x66>
 800298e:	f10d 0209 	add.w	r2, sp, #9
 8002992:	eba2 020c 	sub.w	r2, r2, ip
 8002996:	42bc      	cmp	r4, r7
 8002998:	bf88      	it	hi
 800299a:	2200      	movhi	r2, #0
 800299c:	4413      	add	r3, r2
 800299e:	1a18      	subs	r0, r3, r0
 80029a0:	b003      	add	sp, #12
 80029a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029a4:	f812 5b01 	ldrb.w	r5, [r2], #1
 80029a8:	f801 5f01 	strb.w	r5, [r1, #1]!
 80029ac:	e7ed      	b.n	800298a <__exponent+0x4c>
 80029ae:	2330      	movs	r3, #48	; 0x30
 80029b0:	3130      	adds	r1, #48	; 0x30
 80029b2:	7083      	strb	r3, [r0, #2]
 80029b4:	70c1      	strb	r1, [r0, #3]
 80029b6:	1d03      	adds	r3, r0, #4
 80029b8:	e7f1      	b.n	800299e <__exponent+0x60>
	...

080029bc <_printf_float>:
 80029bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029c0:	ed2d 8b02 	vpush	{d8}
 80029c4:	b08d      	sub	sp, #52	; 0x34
 80029c6:	460c      	mov	r4, r1
 80029c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80029cc:	4616      	mov	r6, r2
 80029ce:	461f      	mov	r7, r3
 80029d0:	4605      	mov	r5, r0
 80029d2:	f000 fcd9 	bl	8003388 <_localeconv_r>
 80029d6:	f8d0 a000 	ldr.w	sl, [r0]
 80029da:	4650      	mov	r0, sl
 80029dc:	f7fd fc50 	bl	8000280 <strlen>
 80029e0:	2300      	movs	r3, #0
 80029e2:	930a      	str	r3, [sp, #40]	; 0x28
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	9305      	str	r3, [sp, #20]
 80029e8:	f8d8 3000 	ldr.w	r3, [r8]
 80029ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80029f0:	3307      	adds	r3, #7
 80029f2:	f023 0307 	bic.w	r3, r3, #7
 80029f6:	f103 0208 	add.w	r2, r3, #8
 80029fa:	f8c8 2000 	str.w	r2, [r8]
 80029fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002a02:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002a06:	9307      	str	r3, [sp, #28]
 8002a08:	f8cd 8018 	str.w	r8, [sp, #24]
 8002a0c:	ee08 0a10 	vmov	s16, r0
 8002a10:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8002a14:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002a18:	4b9e      	ldr	r3, [pc, #632]	; (8002c94 <_printf_float+0x2d8>)
 8002a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a1e:	f7fe f88d 	bl	8000b3c <__aeabi_dcmpun>
 8002a22:	bb88      	cbnz	r0, 8002a88 <_printf_float+0xcc>
 8002a24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002a28:	4b9a      	ldr	r3, [pc, #616]	; (8002c94 <_printf_float+0x2d8>)
 8002a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a2e:	f7fe f867 	bl	8000b00 <__aeabi_dcmple>
 8002a32:	bb48      	cbnz	r0, 8002a88 <_printf_float+0xcc>
 8002a34:	2200      	movs	r2, #0
 8002a36:	2300      	movs	r3, #0
 8002a38:	4640      	mov	r0, r8
 8002a3a:	4649      	mov	r1, r9
 8002a3c:	f7fe f856 	bl	8000aec <__aeabi_dcmplt>
 8002a40:	b110      	cbz	r0, 8002a48 <_printf_float+0x8c>
 8002a42:	232d      	movs	r3, #45	; 0x2d
 8002a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a48:	4a93      	ldr	r2, [pc, #588]	; (8002c98 <_printf_float+0x2dc>)
 8002a4a:	4b94      	ldr	r3, [pc, #592]	; (8002c9c <_printf_float+0x2e0>)
 8002a4c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002a50:	bf94      	ite	ls
 8002a52:	4690      	movls	r8, r2
 8002a54:	4698      	movhi	r8, r3
 8002a56:	2303      	movs	r3, #3
 8002a58:	6123      	str	r3, [r4, #16]
 8002a5a:	9b05      	ldr	r3, [sp, #20]
 8002a5c:	f023 0304 	bic.w	r3, r3, #4
 8002a60:	6023      	str	r3, [r4, #0]
 8002a62:	f04f 0900 	mov.w	r9, #0
 8002a66:	9700      	str	r7, [sp, #0]
 8002a68:	4633      	mov	r3, r6
 8002a6a:	aa0b      	add	r2, sp, #44	; 0x2c
 8002a6c:	4621      	mov	r1, r4
 8002a6e:	4628      	mov	r0, r5
 8002a70:	f000 f9da 	bl	8002e28 <_printf_common>
 8002a74:	3001      	adds	r0, #1
 8002a76:	f040 8090 	bne.w	8002b9a <_printf_float+0x1de>
 8002a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a7e:	b00d      	add	sp, #52	; 0x34
 8002a80:	ecbd 8b02 	vpop	{d8}
 8002a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a88:	4642      	mov	r2, r8
 8002a8a:	464b      	mov	r3, r9
 8002a8c:	4640      	mov	r0, r8
 8002a8e:	4649      	mov	r1, r9
 8002a90:	f7fe f854 	bl	8000b3c <__aeabi_dcmpun>
 8002a94:	b140      	cbz	r0, 8002aa8 <_printf_float+0xec>
 8002a96:	464b      	mov	r3, r9
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bfbc      	itt	lt
 8002a9c:	232d      	movlt	r3, #45	; 0x2d
 8002a9e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002aa2:	4a7f      	ldr	r2, [pc, #508]	; (8002ca0 <_printf_float+0x2e4>)
 8002aa4:	4b7f      	ldr	r3, [pc, #508]	; (8002ca4 <_printf_float+0x2e8>)
 8002aa6:	e7d1      	b.n	8002a4c <_printf_float+0x90>
 8002aa8:	6863      	ldr	r3, [r4, #4]
 8002aaa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002aae:	9206      	str	r2, [sp, #24]
 8002ab0:	1c5a      	adds	r2, r3, #1
 8002ab2:	d13f      	bne.n	8002b34 <_printf_float+0x178>
 8002ab4:	2306      	movs	r3, #6
 8002ab6:	6063      	str	r3, [r4, #4]
 8002ab8:	9b05      	ldr	r3, [sp, #20]
 8002aba:	6861      	ldr	r1, [r4, #4]
 8002abc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	9303      	str	r3, [sp, #12]
 8002ac4:	ab0a      	add	r3, sp, #40	; 0x28
 8002ac6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002aca:	ab09      	add	r3, sp, #36	; 0x24
 8002acc:	ec49 8b10 	vmov	d0, r8, r9
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	6022      	str	r2, [r4, #0]
 8002ad4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002ad8:	4628      	mov	r0, r5
 8002ada:	f7ff fece 	bl	800287a <__cvt>
 8002ade:	9b06      	ldr	r3, [sp, #24]
 8002ae0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002ae2:	2b47      	cmp	r3, #71	; 0x47
 8002ae4:	4680      	mov	r8, r0
 8002ae6:	d108      	bne.n	8002afa <_printf_float+0x13e>
 8002ae8:	1cc8      	adds	r0, r1, #3
 8002aea:	db02      	blt.n	8002af2 <_printf_float+0x136>
 8002aec:	6863      	ldr	r3, [r4, #4]
 8002aee:	4299      	cmp	r1, r3
 8002af0:	dd41      	ble.n	8002b76 <_printf_float+0x1ba>
 8002af2:	f1ab 0302 	sub.w	r3, fp, #2
 8002af6:	fa5f fb83 	uxtb.w	fp, r3
 8002afa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002afe:	d820      	bhi.n	8002b42 <_printf_float+0x186>
 8002b00:	3901      	subs	r1, #1
 8002b02:	465a      	mov	r2, fp
 8002b04:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002b08:	9109      	str	r1, [sp, #36]	; 0x24
 8002b0a:	f7ff ff18 	bl	800293e <__exponent>
 8002b0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b10:	1813      	adds	r3, r2, r0
 8002b12:	2a01      	cmp	r2, #1
 8002b14:	4681      	mov	r9, r0
 8002b16:	6123      	str	r3, [r4, #16]
 8002b18:	dc02      	bgt.n	8002b20 <_printf_float+0x164>
 8002b1a:	6822      	ldr	r2, [r4, #0]
 8002b1c:	07d2      	lsls	r2, r2, #31
 8002b1e:	d501      	bpl.n	8002b24 <_printf_float+0x168>
 8002b20:	3301      	adds	r3, #1
 8002b22:	6123      	str	r3, [r4, #16]
 8002b24:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d09c      	beq.n	8002a66 <_printf_float+0xaa>
 8002b2c:	232d      	movs	r3, #45	; 0x2d
 8002b2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b32:	e798      	b.n	8002a66 <_printf_float+0xaa>
 8002b34:	9a06      	ldr	r2, [sp, #24]
 8002b36:	2a47      	cmp	r2, #71	; 0x47
 8002b38:	d1be      	bne.n	8002ab8 <_printf_float+0xfc>
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1bc      	bne.n	8002ab8 <_printf_float+0xfc>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e7b9      	b.n	8002ab6 <_printf_float+0xfa>
 8002b42:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002b46:	d118      	bne.n	8002b7a <_printf_float+0x1be>
 8002b48:	2900      	cmp	r1, #0
 8002b4a:	6863      	ldr	r3, [r4, #4]
 8002b4c:	dd0b      	ble.n	8002b66 <_printf_float+0x1aa>
 8002b4e:	6121      	str	r1, [r4, #16]
 8002b50:	b913      	cbnz	r3, 8002b58 <_printf_float+0x19c>
 8002b52:	6822      	ldr	r2, [r4, #0]
 8002b54:	07d0      	lsls	r0, r2, #31
 8002b56:	d502      	bpl.n	8002b5e <_printf_float+0x1a2>
 8002b58:	3301      	adds	r3, #1
 8002b5a:	440b      	add	r3, r1
 8002b5c:	6123      	str	r3, [r4, #16]
 8002b5e:	65a1      	str	r1, [r4, #88]	; 0x58
 8002b60:	f04f 0900 	mov.w	r9, #0
 8002b64:	e7de      	b.n	8002b24 <_printf_float+0x168>
 8002b66:	b913      	cbnz	r3, 8002b6e <_printf_float+0x1b2>
 8002b68:	6822      	ldr	r2, [r4, #0]
 8002b6a:	07d2      	lsls	r2, r2, #31
 8002b6c:	d501      	bpl.n	8002b72 <_printf_float+0x1b6>
 8002b6e:	3302      	adds	r3, #2
 8002b70:	e7f4      	b.n	8002b5c <_printf_float+0x1a0>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e7f2      	b.n	8002b5c <_printf_float+0x1a0>
 8002b76:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b7c:	4299      	cmp	r1, r3
 8002b7e:	db05      	blt.n	8002b8c <_printf_float+0x1d0>
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	6121      	str	r1, [r4, #16]
 8002b84:	07d8      	lsls	r0, r3, #31
 8002b86:	d5ea      	bpl.n	8002b5e <_printf_float+0x1a2>
 8002b88:	1c4b      	adds	r3, r1, #1
 8002b8a:	e7e7      	b.n	8002b5c <_printf_float+0x1a0>
 8002b8c:	2900      	cmp	r1, #0
 8002b8e:	bfd4      	ite	le
 8002b90:	f1c1 0202 	rsble	r2, r1, #2
 8002b94:	2201      	movgt	r2, #1
 8002b96:	4413      	add	r3, r2
 8002b98:	e7e0      	b.n	8002b5c <_printf_float+0x1a0>
 8002b9a:	6823      	ldr	r3, [r4, #0]
 8002b9c:	055a      	lsls	r2, r3, #21
 8002b9e:	d407      	bmi.n	8002bb0 <_printf_float+0x1f4>
 8002ba0:	6923      	ldr	r3, [r4, #16]
 8002ba2:	4642      	mov	r2, r8
 8002ba4:	4631      	mov	r1, r6
 8002ba6:	4628      	mov	r0, r5
 8002ba8:	47b8      	blx	r7
 8002baa:	3001      	adds	r0, #1
 8002bac:	d12c      	bne.n	8002c08 <_printf_float+0x24c>
 8002bae:	e764      	b.n	8002a7a <_printf_float+0xbe>
 8002bb0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002bb4:	f240 80e0 	bls.w	8002d78 <_printf_float+0x3bc>
 8002bb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f7fd ff8a 	bl	8000ad8 <__aeabi_dcmpeq>
 8002bc4:	2800      	cmp	r0, #0
 8002bc6:	d034      	beq.n	8002c32 <_printf_float+0x276>
 8002bc8:	4a37      	ldr	r2, [pc, #220]	; (8002ca8 <_printf_float+0x2ec>)
 8002bca:	2301      	movs	r3, #1
 8002bcc:	4631      	mov	r1, r6
 8002bce:	4628      	mov	r0, r5
 8002bd0:	47b8      	blx	r7
 8002bd2:	3001      	adds	r0, #1
 8002bd4:	f43f af51 	beq.w	8002a7a <_printf_float+0xbe>
 8002bd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	db02      	blt.n	8002be6 <_printf_float+0x22a>
 8002be0:	6823      	ldr	r3, [r4, #0]
 8002be2:	07d8      	lsls	r0, r3, #31
 8002be4:	d510      	bpl.n	8002c08 <_printf_float+0x24c>
 8002be6:	ee18 3a10 	vmov	r3, s16
 8002bea:	4652      	mov	r2, sl
 8002bec:	4631      	mov	r1, r6
 8002bee:	4628      	mov	r0, r5
 8002bf0:	47b8      	blx	r7
 8002bf2:	3001      	adds	r0, #1
 8002bf4:	f43f af41 	beq.w	8002a7a <_printf_float+0xbe>
 8002bf8:	f04f 0800 	mov.w	r8, #0
 8002bfc:	f104 091a 	add.w	r9, r4, #26
 8002c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c02:	3b01      	subs	r3, #1
 8002c04:	4543      	cmp	r3, r8
 8002c06:	dc09      	bgt.n	8002c1c <_printf_float+0x260>
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	079b      	lsls	r3, r3, #30
 8002c0c:	f100 8107 	bmi.w	8002e1e <_printf_float+0x462>
 8002c10:	68e0      	ldr	r0, [r4, #12]
 8002c12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c14:	4298      	cmp	r0, r3
 8002c16:	bfb8      	it	lt
 8002c18:	4618      	movlt	r0, r3
 8002c1a:	e730      	b.n	8002a7e <_printf_float+0xc2>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	464a      	mov	r2, r9
 8002c20:	4631      	mov	r1, r6
 8002c22:	4628      	mov	r0, r5
 8002c24:	47b8      	blx	r7
 8002c26:	3001      	adds	r0, #1
 8002c28:	f43f af27 	beq.w	8002a7a <_printf_float+0xbe>
 8002c2c:	f108 0801 	add.w	r8, r8, #1
 8002c30:	e7e6      	b.n	8002c00 <_printf_float+0x244>
 8002c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	dc39      	bgt.n	8002cac <_printf_float+0x2f0>
 8002c38:	4a1b      	ldr	r2, [pc, #108]	; (8002ca8 <_printf_float+0x2ec>)
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	4631      	mov	r1, r6
 8002c3e:	4628      	mov	r0, r5
 8002c40:	47b8      	blx	r7
 8002c42:	3001      	adds	r0, #1
 8002c44:	f43f af19 	beq.w	8002a7a <_printf_float+0xbe>
 8002c48:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	d102      	bne.n	8002c56 <_printf_float+0x29a>
 8002c50:	6823      	ldr	r3, [r4, #0]
 8002c52:	07d9      	lsls	r1, r3, #31
 8002c54:	d5d8      	bpl.n	8002c08 <_printf_float+0x24c>
 8002c56:	ee18 3a10 	vmov	r3, s16
 8002c5a:	4652      	mov	r2, sl
 8002c5c:	4631      	mov	r1, r6
 8002c5e:	4628      	mov	r0, r5
 8002c60:	47b8      	blx	r7
 8002c62:	3001      	adds	r0, #1
 8002c64:	f43f af09 	beq.w	8002a7a <_printf_float+0xbe>
 8002c68:	f04f 0900 	mov.w	r9, #0
 8002c6c:	f104 0a1a 	add.w	sl, r4, #26
 8002c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c72:	425b      	negs	r3, r3
 8002c74:	454b      	cmp	r3, r9
 8002c76:	dc01      	bgt.n	8002c7c <_printf_float+0x2c0>
 8002c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c7a:	e792      	b.n	8002ba2 <_printf_float+0x1e6>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	4652      	mov	r2, sl
 8002c80:	4631      	mov	r1, r6
 8002c82:	4628      	mov	r0, r5
 8002c84:	47b8      	blx	r7
 8002c86:	3001      	adds	r0, #1
 8002c88:	f43f aef7 	beq.w	8002a7a <_printf_float+0xbe>
 8002c8c:	f109 0901 	add.w	r9, r9, #1
 8002c90:	e7ee      	b.n	8002c70 <_printf_float+0x2b4>
 8002c92:	bf00      	nop
 8002c94:	7fefffff 	.word	0x7fefffff
 8002c98:	080052e1 	.word	0x080052e1
 8002c9c:	080052e5 	.word	0x080052e5
 8002ca0:	080052e9 	.word	0x080052e9
 8002ca4:	080052ed 	.word	0x080052ed
 8002ca8:	080052f1 	.word	0x080052f1
 8002cac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002cae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	bfa8      	it	ge
 8002cb4:	461a      	movge	r2, r3
 8002cb6:	2a00      	cmp	r2, #0
 8002cb8:	4691      	mov	r9, r2
 8002cba:	dc37      	bgt.n	8002d2c <_printf_float+0x370>
 8002cbc:	f04f 0b00 	mov.w	fp, #0
 8002cc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002cc4:	f104 021a 	add.w	r2, r4, #26
 8002cc8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002cca:	9305      	str	r3, [sp, #20]
 8002ccc:	eba3 0309 	sub.w	r3, r3, r9
 8002cd0:	455b      	cmp	r3, fp
 8002cd2:	dc33      	bgt.n	8002d3c <_printf_float+0x380>
 8002cd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	db3b      	blt.n	8002d54 <_printf_float+0x398>
 8002cdc:	6823      	ldr	r3, [r4, #0]
 8002cde:	07da      	lsls	r2, r3, #31
 8002ce0:	d438      	bmi.n	8002d54 <_printf_float+0x398>
 8002ce2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002ce6:	eba2 0903 	sub.w	r9, r2, r3
 8002cea:	9b05      	ldr	r3, [sp, #20]
 8002cec:	1ad2      	subs	r2, r2, r3
 8002cee:	4591      	cmp	r9, r2
 8002cf0:	bfa8      	it	ge
 8002cf2:	4691      	movge	r9, r2
 8002cf4:	f1b9 0f00 	cmp.w	r9, #0
 8002cf8:	dc35      	bgt.n	8002d66 <_printf_float+0x3aa>
 8002cfa:	f04f 0800 	mov.w	r8, #0
 8002cfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002d02:	f104 0a1a 	add.w	sl, r4, #26
 8002d06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	eba3 0309 	sub.w	r3, r3, r9
 8002d10:	4543      	cmp	r3, r8
 8002d12:	f77f af79 	ble.w	8002c08 <_printf_float+0x24c>
 8002d16:	2301      	movs	r3, #1
 8002d18:	4652      	mov	r2, sl
 8002d1a:	4631      	mov	r1, r6
 8002d1c:	4628      	mov	r0, r5
 8002d1e:	47b8      	blx	r7
 8002d20:	3001      	adds	r0, #1
 8002d22:	f43f aeaa 	beq.w	8002a7a <_printf_float+0xbe>
 8002d26:	f108 0801 	add.w	r8, r8, #1
 8002d2a:	e7ec      	b.n	8002d06 <_printf_float+0x34a>
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	4631      	mov	r1, r6
 8002d30:	4642      	mov	r2, r8
 8002d32:	4628      	mov	r0, r5
 8002d34:	47b8      	blx	r7
 8002d36:	3001      	adds	r0, #1
 8002d38:	d1c0      	bne.n	8002cbc <_printf_float+0x300>
 8002d3a:	e69e      	b.n	8002a7a <_printf_float+0xbe>
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	4631      	mov	r1, r6
 8002d40:	4628      	mov	r0, r5
 8002d42:	9205      	str	r2, [sp, #20]
 8002d44:	47b8      	blx	r7
 8002d46:	3001      	adds	r0, #1
 8002d48:	f43f ae97 	beq.w	8002a7a <_printf_float+0xbe>
 8002d4c:	9a05      	ldr	r2, [sp, #20]
 8002d4e:	f10b 0b01 	add.w	fp, fp, #1
 8002d52:	e7b9      	b.n	8002cc8 <_printf_float+0x30c>
 8002d54:	ee18 3a10 	vmov	r3, s16
 8002d58:	4652      	mov	r2, sl
 8002d5a:	4631      	mov	r1, r6
 8002d5c:	4628      	mov	r0, r5
 8002d5e:	47b8      	blx	r7
 8002d60:	3001      	adds	r0, #1
 8002d62:	d1be      	bne.n	8002ce2 <_printf_float+0x326>
 8002d64:	e689      	b.n	8002a7a <_printf_float+0xbe>
 8002d66:	9a05      	ldr	r2, [sp, #20]
 8002d68:	464b      	mov	r3, r9
 8002d6a:	4442      	add	r2, r8
 8002d6c:	4631      	mov	r1, r6
 8002d6e:	4628      	mov	r0, r5
 8002d70:	47b8      	blx	r7
 8002d72:	3001      	adds	r0, #1
 8002d74:	d1c1      	bne.n	8002cfa <_printf_float+0x33e>
 8002d76:	e680      	b.n	8002a7a <_printf_float+0xbe>
 8002d78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d7a:	2a01      	cmp	r2, #1
 8002d7c:	dc01      	bgt.n	8002d82 <_printf_float+0x3c6>
 8002d7e:	07db      	lsls	r3, r3, #31
 8002d80:	d53a      	bpl.n	8002df8 <_printf_float+0x43c>
 8002d82:	2301      	movs	r3, #1
 8002d84:	4642      	mov	r2, r8
 8002d86:	4631      	mov	r1, r6
 8002d88:	4628      	mov	r0, r5
 8002d8a:	47b8      	blx	r7
 8002d8c:	3001      	adds	r0, #1
 8002d8e:	f43f ae74 	beq.w	8002a7a <_printf_float+0xbe>
 8002d92:	ee18 3a10 	vmov	r3, s16
 8002d96:	4652      	mov	r2, sl
 8002d98:	4631      	mov	r1, r6
 8002d9a:	4628      	mov	r0, r5
 8002d9c:	47b8      	blx	r7
 8002d9e:	3001      	adds	r0, #1
 8002da0:	f43f ae6b 	beq.w	8002a7a <_printf_float+0xbe>
 8002da4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002da8:	2200      	movs	r2, #0
 8002daa:	2300      	movs	r3, #0
 8002dac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8002db0:	f7fd fe92 	bl	8000ad8 <__aeabi_dcmpeq>
 8002db4:	b9d8      	cbnz	r0, 8002dee <_printf_float+0x432>
 8002db6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8002dba:	f108 0201 	add.w	r2, r8, #1
 8002dbe:	4631      	mov	r1, r6
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	47b8      	blx	r7
 8002dc4:	3001      	adds	r0, #1
 8002dc6:	d10e      	bne.n	8002de6 <_printf_float+0x42a>
 8002dc8:	e657      	b.n	8002a7a <_printf_float+0xbe>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	4652      	mov	r2, sl
 8002dce:	4631      	mov	r1, r6
 8002dd0:	4628      	mov	r0, r5
 8002dd2:	47b8      	blx	r7
 8002dd4:	3001      	adds	r0, #1
 8002dd6:	f43f ae50 	beq.w	8002a7a <_printf_float+0xbe>
 8002dda:	f108 0801 	add.w	r8, r8, #1
 8002dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002de0:	3b01      	subs	r3, #1
 8002de2:	4543      	cmp	r3, r8
 8002de4:	dcf1      	bgt.n	8002dca <_printf_float+0x40e>
 8002de6:	464b      	mov	r3, r9
 8002de8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002dec:	e6da      	b.n	8002ba4 <_printf_float+0x1e8>
 8002dee:	f04f 0800 	mov.w	r8, #0
 8002df2:	f104 0a1a 	add.w	sl, r4, #26
 8002df6:	e7f2      	b.n	8002dde <_printf_float+0x422>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	4642      	mov	r2, r8
 8002dfc:	e7df      	b.n	8002dbe <_printf_float+0x402>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	464a      	mov	r2, r9
 8002e02:	4631      	mov	r1, r6
 8002e04:	4628      	mov	r0, r5
 8002e06:	47b8      	blx	r7
 8002e08:	3001      	adds	r0, #1
 8002e0a:	f43f ae36 	beq.w	8002a7a <_printf_float+0xbe>
 8002e0e:	f108 0801 	add.w	r8, r8, #1
 8002e12:	68e3      	ldr	r3, [r4, #12]
 8002e14:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002e16:	1a5b      	subs	r3, r3, r1
 8002e18:	4543      	cmp	r3, r8
 8002e1a:	dcf0      	bgt.n	8002dfe <_printf_float+0x442>
 8002e1c:	e6f8      	b.n	8002c10 <_printf_float+0x254>
 8002e1e:	f04f 0800 	mov.w	r8, #0
 8002e22:	f104 0919 	add.w	r9, r4, #25
 8002e26:	e7f4      	b.n	8002e12 <_printf_float+0x456>

08002e28 <_printf_common>:
 8002e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e2c:	4616      	mov	r6, r2
 8002e2e:	4699      	mov	r9, r3
 8002e30:	688a      	ldr	r2, [r1, #8]
 8002e32:	690b      	ldr	r3, [r1, #16]
 8002e34:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	bfb8      	it	lt
 8002e3c:	4613      	movlt	r3, r2
 8002e3e:	6033      	str	r3, [r6, #0]
 8002e40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e44:	4607      	mov	r7, r0
 8002e46:	460c      	mov	r4, r1
 8002e48:	b10a      	cbz	r2, 8002e4e <_printf_common+0x26>
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	6033      	str	r3, [r6, #0]
 8002e4e:	6823      	ldr	r3, [r4, #0]
 8002e50:	0699      	lsls	r1, r3, #26
 8002e52:	bf42      	ittt	mi
 8002e54:	6833      	ldrmi	r3, [r6, #0]
 8002e56:	3302      	addmi	r3, #2
 8002e58:	6033      	strmi	r3, [r6, #0]
 8002e5a:	6825      	ldr	r5, [r4, #0]
 8002e5c:	f015 0506 	ands.w	r5, r5, #6
 8002e60:	d106      	bne.n	8002e70 <_printf_common+0x48>
 8002e62:	f104 0a19 	add.w	sl, r4, #25
 8002e66:	68e3      	ldr	r3, [r4, #12]
 8002e68:	6832      	ldr	r2, [r6, #0]
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	42ab      	cmp	r3, r5
 8002e6e:	dc26      	bgt.n	8002ebe <_printf_common+0x96>
 8002e70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e74:	1e13      	subs	r3, r2, #0
 8002e76:	6822      	ldr	r2, [r4, #0]
 8002e78:	bf18      	it	ne
 8002e7a:	2301      	movne	r3, #1
 8002e7c:	0692      	lsls	r2, r2, #26
 8002e7e:	d42b      	bmi.n	8002ed8 <_printf_common+0xb0>
 8002e80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e84:	4649      	mov	r1, r9
 8002e86:	4638      	mov	r0, r7
 8002e88:	47c0      	blx	r8
 8002e8a:	3001      	adds	r0, #1
 8002e8c:	d01e      	beq.n	8002ecc <_printf_common+0xa4>
 8002e8e:	6823      	ldr	r3, [r4, #0]
 8002e90:	6922      	ldr	r2, [r4, #16]
 8002e92:	f003 0306 	and.w	r3, r3, #6
 8002e96:	2b04      	cmp	r3, #4
 8002e98:	bf02      	ittt	eq
 8002e9a:	68e5      	ldreq	r5, [r4, #12]
 8002e9c:	6833      	ldreq	r3, [r6, #0]
 8002e9e:	1aed      	subeq	r5, r5, r3
 8002ea0:	68a3      	ldr	r3, [r4, #8]
 8002ea2:	bf0c      	ite	eq
 8002ea4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ea8:	2500      	movne	r5, #0
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	bfc4      	itt	gt
 8002eae:	1a9b      	subgt	r3, r3, r2
 8002eb0:	18ed      	addgt	r5, r5, r3
 8002eb2:	2600      	movs	r6, #0
 8002eb4:	341a      	adds	r4, #26
 8002eb6:	42b5      	cmp	r5, r6
 8002eb8:	d11a      	bne.n	8002ef0 <_printf_common+0xc8>
 8002eba:	2000      	movs	r0, #0
 8002ebc:	e008      	b.n	8002ed0 <_printf_common+0xa8>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	4652      	mov	r2, sl
 8002ec2:	4649      	mov	r1, r9
 8002ec4:	4638      	mov	r0, r7
 8002ec6:	47c0      	blx	r8
 8002ec8:	3001      	adds	r0, #1
 8002eca:	d103      	bne.n	8002ed4 <_printf_common+0xac>
 8002ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ed4:	3501      	adds	r5, #1
 8002ed6:	e7c6      	b.n	8002e66 <_printf_common+0x3e>
 8002ed8:	18e1      	adds	r1, r4, r3
 8002eda:	1c5a      	adds	r2, r3, #1
 8002edc:	2030      	movs	r0, #48	; 0x30
 8002ede:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ee2:	4422      	add	r2, r4
 8002ee4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ee8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002eec:	3302      	adds	r3, #2
 8002eee:	e7c7      	b.n	8002e80 <_printf_common+0x58>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	4622      	mov	r2, r4
 8002ef4:	4649      	mov	r1, r9
 8002ef6:	4638      	mov	r0, r7
 8002ef8:	47c0      	blx	r8
 8002efa:	3001      	adds	r0, #1
 8002efc:	d0e6      	beq.n	8002ecc <_printf_common+0xa4>
 8002efe:	3601      	adds	r6, #1
 8002f00:	e7d9      	b.n	8002eb6 <_printf_common+0x8e>
	...

08002f04 <_printf_i>:
 8002f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f08:	7e0f      	ldrb	r7, [r1, #24]
 8002f0a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f0c:	2f78      	cmp	r7, #120	; 0x78
 8002f0e:	4691      	mov	r9, r2
 8002f10:	4680      	mov	r8, r0
 8002f12:	460c      	mov	r4, r1
 8002f14:	469a      	mov	sl, r3
 8002f16:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f1a:	d807      	bhi.n	8002f2c <_printf_i+0x28>
 8002f1c:	2f62      	cmp	r7, #98	; 0x62
 8002f1e:	d80a      	bhi.n	8002f36 <_printf_i+0x32>
 8002f20:	2f00      	cmp	r7, #0
 8002f22:	f000 80d4 	beq.w	80030ce <_printf_i+0x1ca>
 8002f26:	2f58      	cmp	r7, #88	; 0x58
 8002f28:	f000 80c0 	beq.w	80030ac <_printf_i+0x1a8>
 8002f2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f30:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f34:	e03a      	b.n	8002fac <_printf_i+0xa8>
 8002f36:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f3a:	2b15      	cmp	r3, #21
 8002f3c:	d8f6      	bhi.n	8002f2c <_printf_i+0x28>
 8002f3e:	a101      	add	r1, pc, #4	; (adr r1, 8002f44 <_printf_i+0x40>)
 8002f40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f44:	08002f9d 	.word	0x08002f9d
 8002f48:	08002fb1 	.word	0x08002fb1
 8002f4c:	08002f2d 	.word	0x08002f2d
 8002f50:	08002f2d 	.word	0x08002f2d
 8002f54:	08002f2d 	.word	0x08002f2d
 8002f58:	08002f2d 	.word	0x08002f2d
 8002f5c:	08002fb1 	.word	0x08002fb1
 8002f60:	08002f2d 	.word	0x08002f2d
 8002f64:	08002f2d 	.word	0x08002f2d
 8002f68:	08002f2d 	.word	0x08002f2d
 8002f6c:	08002f2d 	.word	0x08002f2d
 8002f70:	080030b5 	.word	0x080030b5
 8002f74:	08002fdd 	.word	0x08002fdd
 8002f78:	0800306f 	.word	0x0800306f
 8002f7c:	08002f2d 	.word	0x08002f2d
 8002f80:	08002f2d 	.word	0x08002f2d
 8002f84:	080030d7 	.word	0x080030d7
 8002f88:	08002f2d 	.word	0x08002f2d
 8002f8c:	08002fdd 	.word	0x08002fdd
 8002f90:	08002f2d 	.word	0x08002f2d
 8002f94:	08002f2d 	.word	0x08002f2d
 8002f98:	08003077 	.word	0x08003077
 8002f9c:	682b      	ldr	r3, [r5, #0]
 8002f9e:	1d1a      	adds	r2, r3, #4
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	602a      	str	r2, [r5, #0]
 8002fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fa8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fac:	2301      	movs	r3, #1
 8002fae:	e09f      	b.n	80030f0 <_printf_i+0x1ec>
 8002fb0:	6820      	ldr	r0, [r4, #0]
 8002fb2:	682b      	ldr	r3, [r5, #0]
 8002fb4:	0607      	lsls	r7, r0, #24
 8002fb6:	f103 0104 	add.w	r1, r3, #4
 8002fba:	6029      	str	r1, [r5, #0]
 8002fbc:	d501      	bpl.n	8002fc2 <_printf_i+0xbe>
 8002fbe:	681e      	ldr	r6, [r3, #0]
 8002fc0:	e003      	b.n	8002fca <_printf_i+0xc6>
 8002fc2:	0646      	lsls	r6, r0, #25
 8002fc4:	d5fb      	bpl.n	8002fbe <_printf_i+0xba>
 8002fc6:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002fca:	2e00      	cmp	r6, #0
 8002fcc:	da03      	bge.n	8002fd6 <_printf_i+0xd2>
 8002fce:	232d      	movs	r3, #45	; 0x2d
 8002fd0:	4276      	negs	r6, r6
 8002fd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fd6:	485a      	ldr	r0, [pc, #360]	; (8003140 <_printf_i+0x23c>)
 8002fd8:	230a      	movs	r3, #10
 8002fda:	e012      	b.n	8003002 <_printf_i+0xfe>
 8002fdc:	682b      	ldr	r3, [r5, #0]
 8002fde:	6820      	ldr	r0, [r4, #0]
 8002fe0:	1d19      	adds	r1, r3, #4
 8002fe2:	6029      	str	r1, [r5, #0]
 8002fe4:	0605      	lsls	r5, r0, #24
 8002fe6:	d501      	bpl.n	8002fec <_printf_i+0xe8>
 8002fe8:	681e      	ldr	r6, [r3, #0]
 8002fea:	e002      	b.n	8002ff2 <_printf_i+0xee>
 8002fec:	0641      	lsls	r1, r0, #25
 8002fee:	d5fb      	bpl.n	8002fe8 <_printf_i+0xe4>
 8002ff0:	881e      	ldrh	r6, [r3, #0]
 8002ff2:	4853      	ldr	r0, [pc, #332]	; (8003140 <_printf_i+0x23c>)
 8002ff4:	2f6f      	cmp	r7, #111	; 0x6f
 8002ff6:	bf0c      	ite	eq
 8002ff8:	2308      	moveq	r3, #8
 8002ffa:	230a      	movne	r3, #10
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003002:	6865      	ldr	r5, [r4, #4]
 8003004:	60a5      	str	r5, [r4, #8]
 8003006:	2d00      	cmp	r5, #0
 8003008:	bfa2      	ittt	ge
 800300a:	6821      	ldrge	r1, [r4, #0]
 800300c:	f021 0104 	bicge.w	r1, r1, #4
 8003010:	6021      	strge	r1, [r4, #0]
 8003012:	b90e      	cbnz	r6, 8003018 <_printf_i+0x114>
 8003014:	2d00      	cmp	r5, #0
 8003016:	d04b      	beq.n	80030b0 <_printf_i+0x1ac>
 8003018:	4615      	mov	r5, r2
 800301a:	fbb6 f1f3 	udiv	r1, r6, r3
 800301e:	fb03 6711 	mls	r7, r3, r1, r6
 8003022:	5dc7      	ldrb	r7, [r0, r7]
 8003024:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003028:	4637      	mov	r7, r6
 800302a:	42bb      	cmp	r3, r7
 800302c:	460e      	mov	r6, r1
 800302e:	d9f4      	bls.n	800301a <_printf_i+0x116>
 8003030:	2b08      	cmp	r3, #8
 8003032:	d10b      	bne.n	800304c <_printf_i+0x148>
 8003034:	6823      	ldr	r3, [r4, #0]
 8003036:	07de      	lsls	r6, r3, #31
 8003038:	d508      	bpl.n	800304c <_printf_i+0x148>
 800303a:	6923      	ldr	r3, [r4, #16]
 800303c:	6861      	ldr	r1, [r4, #4]
 800303e:	4299      	cmp	r1, r3
 8003040:	bfde      	ittt	le
 8003042:	2330      	movle	r3, #48	; 0x30
 8003044:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003048:	f105 35ff 	addle.w	r5, r5, #4294967295
 800304c:	1b52      	subs	r2, r2, r5
 800304e:	6122      	str	r2, [r4, #16]
 8003050:	f8cd a000 	str.w	sl, [sp]
 8003054:	464b      	mov	r3, r9
 8003056:	aa03      	add	r2, sp, #12
 8003058:	4621      	mov	r1, r4
 800305a:	4640      	mov	r0, r8
 800305c:	f7ff fee4 	bl	8002e28 <_printf_common>
 8003060:	3001      	adds	r0, #1
 8003062:	d14a      	bne.n	80030fa <_printf_i+0x1f6>
 8003064:	f04f 30ff 	mov.w	r0, #4294967295
 8003068:	b004      	add	sp, #16
 800306a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800306e:	6823      	ldr	r3, [r4, #0]
 8003070:	f043 0320 	orr.w	r3, r3, #32
 8003074:	6023      	str	r3, [r4, #0]
 8003076:	4833      	ldr	r0, [pc, #204]	; (8003144 <_printf_i+0x240>)
 8003078:	2778      	movs	r7, #120	; 0x78
 800307a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800307e:	6823      	ldr	r3, [r4, #0]
 8003080:	6829      	ldr	r1, [r5, #0]
 8003082:	061f      	lsls	r7, r3, #24
 8003084:	f851 6b04 	ldr.w	r6, [r1], #4
 8003088:	d402      	bmi.n	8003090 <_printf_i+0x18c>
 800308a:	065f      	lsls	r7, r3, #25
 800308c:	bf48      	it	mi
 800308e:	b2b6      	uxthmi	r6, r6
 8003090:	07df      	lsls	r7, r3, #31
 8003092:	bf48      	it	mi
 8003094:	f043 0320 	orrmi.w	r3, r3, #32
 8003098:	6029      	str	r1, [r5, #0]
 800309a:	bf48      	it	mi
 800309c:	6023      	strmi	r3, [r4, #0]
 800309e:	b91e      	cbnz	r6, 80030a8 <_printf_i+0x1a4>
 80030a0:	6823      	ldr	r3, [r4, #0]
 80030a2:	f023 0320 	bic.w	r3, r3, #32
 80030a6:	6023      	str	r3, [r4, #0]
 80030a8:	2310      	movs	r3, #16
 80030aa:	e7a7      	b.n	8002ffc <_printf_i+0xf8>
 80030ac:	4824      	ldr	r0, [pc, #144]	; (8003140 <_printf_i+0x23c>)
 80030ae:	e7e4      	b.n	800307a <_printf_i+0x176>
 80030b0:	4615      	mov	r5, r2
 80030b2:	e7bd      	b.n	8003030 <_printf_i+0x12c>
 80030b4:	682b      	ldr	r3, [r5, #0]
 80030b6:	6826      	ldr	r6, [r4, #0]
 80030b8:	6961      	ldr	r1, [r4, #20]
 80030ba:	1d18      	adds	r0, r3, #4
 80030bc:	6028      	str	r0, [r5, #0]
 80030be:	0635      	lsls	r5, r6, #24
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	d501      	bpl.n	80030c8 <_printf_i+0x1c4>
 80030c4:	6019      	str	r1, [r3, #0]
 80030c6:	e002      	b.n	80030ce <_printf_i+0x1ca>
 80030c8:	0670      	lsls	r0, r6, #25
 80030ca:	d5fb      	bpl.n	80030c4 <_printf_i+0x1c0>
 80030cc:	8019      	strh	r1, [r3, #0]
 80030ce:	2300      	movs	r3, #0
 80030d0:	6123      	str	r3, [r4, #16]
 80030d2:	4615      	mov	r5, r2
 80030d4:	e7bc      	b.n	8003050 <_printf_i+0x14c>
 80030d6:	682b      	ldr	r3, [r5, #0]
 80030d8:	1d1a      	adds	r2, r3, #4
 80030da:	602a      	str	r2, [r5, #0]
 80030dc:	681d      	ldr	r5, [r3, #0]
 80030de:	6862      	ldr	r2, [r4, #4]
 80030e0:	2100      	movs	r1, #0
 80030e2:	4628      	mov	r0, r5
 80030e4:	f7fd f87c 	bl	80001e0 <memchr>
 80030e8:	b108      	cbz	r0, 80030ee <_printf_i+0x1ea>
 80030ea:	1b40      	subs	r0, r0, r5
 80030ec:	6060      	str	r0, [r4, #4]
 80030ee:	6863      	ldr	r3, [r4, #4]
 80030f0:	6123      	str	r3, [r4, #16]
 80030f2:	2300      	movs	r3, #0
 80030f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030f8:	e7aa      	b.n	8003050 <_printf_i+0x14c>
 80030fa:	6923      	ldr	r3, [r4, #16]
 80030fc:	462a      	mov	r2, r5
 80030fe:	4649      	mov	r1, r9
 8003100:	4640      	mov	r0, r8
 8003102:	47d0      	blx	sl
 8003104:	3001      	adds	r0, #1
 8003106:	d0ad      	beq.n	8003064 <_printf_i+0x160>
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	079b      	lsls	r3, r3, #30
 800310c:	d413      	bmi.n	8003136 <_printf_i+0x232>
 800310e:	68e0      	ldr	r0, [r4, #12]
 8003110:	9b03      	ldr	r3, [sp, #12]
 8003112:	4298      	cmp	r0, r3
 8003114:	bfb8      	it	lt
 8003116:	4618      	movlt	r0, r3
 8003118:	e7a6      	b.n	8003068 <_printf_i+0x164>
 800311a:	2301      	movs	r3, #1
 800311c:	4632      	mov	r2, r6
 800311e:	4649      	mov	r1, r9
 8003120:	4640      	mov	r0, r8
 8003122:	47d0      	blx	sl
 8003124:	3001      	adds	r0, #1
 8003126:	d09d      	beq.n	8003064 <_printf_i+0x160>
 8003128:	3501      	adds	r5, #1
 800312a:	68e3      	ldr	r3, [r4, #12]
 800312c:	9903      	ldr	r1, [sp, #12]
 800312e:	1a5b      	subs	r3, r3, r1
 8003130:	42ab      	cmp	r3, r5
 8003132:	dcf2      	bgt.n	800311a <_printf_i+0x216>
 8003134:	e7eb      	b.n	800310e <_printf_i+0x20a>
 8003136:	2500      	movs	r5, #0
 8003138:	f104 0619 	add.w	r6, r4, #25
 800313c:	e7f5      	b.n	800312a <_printf_i+0x226>
 800313e:	bf00      	nop
 8003140:	080052f3 	.word	0x080052f3
 8003144:	08005304 	.word	0x08005304

08003148 <std>:
 8003148:	2300      	movs	r3, #0
 800314a:	b510      	push	{r4, lr}
 800314c:	4604      	mov	r4, r0
 800314e:	e9c0 3300 	strd	r3, r3, [r0]
 8003152:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003156:	6083      	str	r3, [r0, #8]
 8003158:	8181      	strh	r1, [r0, #12]
 800315a:	6643      	str	r3, [r0, #100]	; 0x64
 800315c:	81c2      	strh	r2, [r0, #14]
 800315e:	6183      	str	r3, [r0, #24]
 8003160:	4619      	mov	r1, r3
 8003162:	2208      	movs	r2, #8
 8003164:	305c      	adds	r0, #92	; 0x5c
 8003166:	f000 f906 	bl	8003376 <memset>
 800316a:	4b0d      	ldr	r3, [pc, #52]	; (80031a0 <std+0x58>)
 800316c:	6263      	str	r3, [r4, #36]	; 0x24
 800316e:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <std+0x5c>)
 8003170:	62a3      	str	r3, [r4, #40]	; 0x28
 8003172:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <std+0x60>)
 8003174:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003176:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <std+0x64>)
 8003178:	6323      	str	r3, [r4, #48]	; 0x30
 800317a:	4b0d      	ldr	r3, [pc, #52]	; (80031b0 <std+0x68>)
 800317c:	6224      	str	r4, [r4, #32]
 800317e:	429c      	cmp	r4, r3
 8003180:	d006      	beq.n	8003190 <std+0x48>
 8003182:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003186:	4294      	cmp	r4, r2
 8003188:	d002      	beq.n	8003190 <std+0x48>
 800318a:	33d0      	adds	r3, #208	; 0xd0
 800318c:	429c      	cmp	r4, r3
 800318e:	d105      	bne.n	800319c <std+0x54>
 8003190:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003198:	f000 b96a 	b.w	8003470 <__retarget_lock_init_recursive>
 800319c:	bd10      	pop	{r4, pc}
 800319e:	bf00      	nop
 80031a0:	080032f1 	.word	0x080032f1
 80031a4:	08003313 	.word	0x08003313
 80031a8:	0800334b 	.word	0x0800334b
 80031ac:	0800336f 	.word	0x0800336f
 80031b0:	200001f4 	.word	0x200001f4

080031b4 <stdio_exit_handler>:
 80031b4:	4a02      	ldr	r2, [pc, #8]	; (80031c0 <stdio_exit_handler+0xc>)
 80031b6:	4903      	ldr	r1, [pc, #12]	; (80031c4 <stdio_exit_handler+0x10>)
 80031b8:	4803      	ldr	r0, [pc, #12]	; (80031c8 <stdio_exit_handler+0x14>)
 80031ba:	f000 b869 	b.w	8003290 <_fwalk_sglue>
 80031be:	bf00      	nop
 80031c0:	20000008 	.word	0x20000008
 80031c4:	08004df9 	.word	0x08004df9
 80031c8:	20000014 	.word	0x20000014

080031cc <cleanup_stdio>:
 80031cc:	6841      	ldr	r1, [r0, #4]
 80031ce:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <cleanup_stdio+0x34>)
 80031d0:	4299      	cmp	r1, r3
 80031d2:	b510      	push	{r4, lr}
 80031d4:	4604      	mov	r4, r0
 80031d6:	d001      	beq.n	80031dc <cleanup_stdio+0x10>
 80031d8:	f001 fe0e 	bl	8004df8 <_fflush_r>
 80031dc:	68a1      	ldr	r1, [r4, #8]
 80031de:	4b09      	ldr	r3, [pc, #36]	; (8003204 <cleanup_stdio+0x38>)
 80031e0:	4299      	cmp	r1, r3
 80031e2:	d002      	beq.n	80031ea <cleanup_stdio+0x1e>
 80031e4:	4620      	mov	r0, r4
 80031e6:	f001 fe07 	bl	8004df8 <_fflush_r>
 80031ea:	68e1      	ldr	r1, [r4, #12]
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <cleanup_stdio+0x3c>)
 80031ee:	4299      	cmp	r1, r3
 80031f0:	d004      	beq.n	80031fc <cleanup_stdio+0x30>
 80031f2:	4620      	mov	r0, r4
 80031f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031f8:	f001 bdfe 	b.w	8004df8 <_fflush_r>
 80031fc:	bd10      	pop	{r4, pc}
 80031fe:	bf00      	nop
 8003200:	200001f4 	.word	0x200001f4
 8003204:	2000025c 	.word	0x2000025c
 8003208:	200002c4 	.word	0x200002c4

0800320c <global_stdio_init.part.0>:
 800320c:	b510      	push	{r4, lr}
 800320e:	4b0b      	ldr	r3, [pc, #44]	; (800323c <global_stdio_init.part.0+0x30>)
 8003210:	4c0b      	ldr	r4, [pc, #44]	; (8003240 <global_stdio_init.part.0+0x34>)
 8003212:	4a0c      	ldr	r2, [pc, #48]	; (8003244 <global_stdio_init.part.0+0x38>)
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	4620      	mov	r0, r4
 8003218:	2200      	movs	r2, #0
 800321a:	2104      	movs	r1, #4
 800321c:	f7ff ff94 	bl	8003148 <std>
 8003220:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003224:	2201      	movs	r2, #1
 8003226:	2109      	movs	r1, #9
 8003228:	f7ff ff8e 	bl	8003148 <std>
 800322c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003230:	2202      	movs	r2, #2
 8003232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003236:	2112      	movs	r1, #18
 8003238:	f7ff bf86 	b.w	8003148 <std>
 800323c:	2000032c 	.word	0x2000032c
 8003240:	200001f4 	.word	0x200001f4
 8003244:	080031b5 	.word	0x080031b5

08003248 <__sfp_lock_acquire>:
 8003248:	4801      	ldr	r0, [pc, #4]	; (8003250 <__sfp_lock_acquire+0x8>)
 800324a:	f000 b912 	b.w	8003472 <__retarget_lock_acquire_recursive>
 800324e:	bf00      	nop
 8003250:	20000335 	.word	0x20000335

08003254 <__sfp_lock_release>:
 8003254:	4801      	ldr	r0, [pc, #4]	; (800325c <__sfp_lock_release+0x8>)
 8003256:	f000 b90d 	b.w	8003474 <__retarget_lock_release_recursive>
 800325a:	bf00      	nop
 800325c:	20000335 	.word	0x20000335

08003260 <__sinit>:
 8003260:	b510      	push	{r4, lr}
 8003262:	4604      	mov	r4, r0
 8003264:	f7ff fff0 	bl	8003248 <__sfp_lock_acquire>
 8003268:	6a23      	ldr	r3, [r4, #32]
 800326a:	b11b      	cbz	r3, 8003274 <__sinit+0x14>
 800326c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003270:	f7ff bff0 	b.w	8003254 <__sfp_lock_release>
 8003274:	4b04      	ldr	r3, [pc, #16]	; (8003288 <__sinit+0x28>)
 8003276:	6223      	str	r3, [r4, #32]
 8003278:	4b04      	ldr	r3, [pc, #16]	; (800328c <__sinit+0x2c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1f5      	bne.n	800326c <__sinit+0xc>
 8003280:	f7ff ffc4 	bl	800320c <global_stdio_init.part.0>
 8003284:	e7f2      	b.n	800326c <__sinit+0xc>
 8003286:	bf00      	nop
 8003288:	080031cd 	.word	0x080031cd
 800328c:	2000032c 	.word	0x2000032c

08003290 <_fwalk_sglue>:
 8003290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003294:	4607      	mov	r7, r0
 8003296:	4688      	mov	r8, r1
 8003298:	4614      	mov	r4, r2
 800329a:	2600      	movs	r6, #0
 800329c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032a0:	f1b9 0901 	subs.w	r9, r9, #1
 80032a4:	d505      	bpl.n	80032b2 <_fwalk_sglue+0x22>
 80032a6:	6824      	ldr	r4, [r4, #0]
 80032a8:	2c00      	cmp	r4, #0
 80032aa:	d1f7      	bne.n	800329c <_fwalk_sglue+0xc>
 80032ac:	4630      	mov	r0, r6
 80032ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032b2:	89ab      	ldrh	r3, [r5, #12]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d907      	bls.n	80032c8 <_fwalk_sglue+0x38>
 80032b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032bc:	3301      	adds	r3, #1
 80032be:	d003      	beq.n	80032c8 <_fwalk_sglue+0x38>
 80032c0:	4629      	mov	r1, r5
 80032c2:	4638      	mov	r0, r7
 80032c4:	47c0      	blx	r8
 80032c6:	4306      	orrs	r6, r0
 80032c8:	3568      	adds	r5, #104	; 0x68
 80032ca:	e7e9      	b.n	80032a0 <_fwalk_sglue+0x10>

080032cc <iprintf>:
 80032cc:	b40f      	push	{r0, r1, r2, r3}
 80032ce:	b507      	push	{r0, r1, r2, lr}
 80032d0:	4906      	ldr	r1, [pc, #24]	; (80032ec <iprintf+0x20>)
 80032d2:	ab04      	add	r3, sp, #16
 80032d4:	6808      	ldr	r0, [r1, #0]
 80032d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80032da:	6881      	ldr	r1, [r0, #8]
 80032dc:	9301      	str	r3, [sp, #4]
 80032de:	f001 fbeb 	bl	8004ab8 <_vfiprintf_r>
 80032e2:	b003      	add	sp, #12
 80032e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80032e8:	b004      	add	sp, #16
 80032ea:	4770      	bx	lr
 80032ec:	20000060 	.word	0x20000060

080032f0 <__sread>:
 80032f0:	b510      	push	{r4, lr}
 80032f2:	460c      	mov	r4, r1
 80032f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032f8:	f000 f86c 	bl	80033d4 <_read_r>
 80032fc:	2800      	cmp	r0, #0
 80032fe:	bfab      	itete	ge
 8003300:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003302:	89a3      	ldrhlt	r3, [r4, #12]
 8003304:	181b      	addge	r3, r3, r0
 8003306:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800330a:	bfac      	ite	ge
 800330c:	6563      	strge	r3, [r4, #84]	; 0x54
 800330e:	81a3      	strhlt	r3, [r4, #12]
 8003310:	bd10      	pop	{r4, pc}

08003312 <__swrite>:
 8003312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003316:	461f      	mov	r7, r3
 8003318:	898b      	ldrh	r3, [r1, #12]
 800331a:	05db      	lsls	r3, r3, #23
 800331c:	4605      	mov	r5, r0
 800331e:	460c      	mov	r4, r1
 8003320:	4616      	mov	r6, r2
 8003322:	d505      	bpl.n	8003330 <__swrite+0x1e>
 8003324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003328:	2302      	movs	r3, #2
 800332a:	2200      	movs	r2, #0
 800332c:	f000 f840 	bl	80033b0 <_lseek_r>
 8003330:	89a3      	ldrh	r3, [r4, #12]
 8003332:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003336:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800333a:	81a3      	strh	r3, [r4, #12]
 800333c:	4632      	mov	r2, r6
 800333e:	463b      	mov	r3, r7
 8003340:	4628      	mov	r0, r5
 8003342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003346:	f000 b857 	b.w	80033f8 <_write_r>

0800334a <__sseek>:
 800334a:	b510      	push	{r4, lr}
 800334c:	460c      	mov	r4, r1
 800334e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003352:	f000 f82d 	bl	80033b0 <_lseek_r>
 8003356:	1c43      	adds	r3, r0, #1
 8003358:	89a3      	ldrh	r3, [r4, #12]
 800335a:	bf15      	itete	ne
 800335c:	6560      	strne	r0, [r4, #84]	; 0x54
 800335e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003362:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003366:	81a3      	strheq	r3, [r4, #12]
 8003368:	bf18      	it	ne
 800336a:	81a3      	strhne	r3, [r4, #12]
 800336c:	bd10      	pop	{r4, pc}

0800336e <__sclose>:
 800336e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003372:	f000 b80d 	b.w	8003390 <_close_r>

08003376 <memset>:
 8003376:	4402      	add	r2, r0
 8003378:	4603      	mov	r3, r0
 800337a:	4293      	cmp	r3, r2
 800337c:	d100      	bne.n	8003380 <memset+0xa>
 800337e:	4770      	bx	lr
 8003380:	f803 1b01 	strb.w	r1, [r3], #1
 8003384:	e7f9      	b.n	800337a <memset+0x4>
	...

08003388 <_localeconv_r>:
 8003388:	4800      	ldr	r0, [pc, #0]	; (800338c <_localeconv_r+0x4>)
 800338a:	4770      	bx	lr
 800338c:	20000154 	.word	0x20000154

08003390 <_close_r>:
 8003390:	b538      	push	{r3, r4, r5, lr}
 8003392:	4d06      	ldr	r5, [pc, #24]	; (80033ac <_close_r+0x1c>)
 8003394:	2300      	movs	r3, #0
 8003396:	4604      	mov	r4, r0
 8003398:	4608      	mov	r0, r1
 800339a:	602b      	str	r3, [r5, #0]
 800339c:	f7ff f8b7 	bl	800250e <_close>
 80033a0:	1c43      	adds	r3, r0, #1
 80033a2:	d102      	bne.n	80033aa <_close_r+0x1a>
 80033a4:	682b      	ldr	r3, [r5, #0]
 80033a6:	b103      	cbz	r3, 80033aa <_close_r+0x1a>
 80033a8:	6023      	str	r3, [r4, #0]
 80033aa:	bd38      	pop	{r3, r4, r5, pc}
 80033ac:	20000330 	.word	0x20000330

080033b0 <_lseek_r>:
 80033b0:	b538      	push	{r3, r4, r5, lr}
 80033b2:	4d07      	ldr	r5, [pc, #28]	; (80033d0 <_lseek_r+0x20>)
 80033b4:	4604      	mov	r4, r0
 80033b6:	4608      	mov	r0, r1
 80033b8:	4611      	mov	r1, r2
 80033ba:	2200      	movs	r2, #0
 80033bc:	602a      	str	r2, [r5, #0]
 80033be:	461a      	mov	r2, r3
 80033c0:	f7ff f8cc 	bl	800255c <_lseek>
 80033c4:	1c43      	adds	r3, r0, #1
 80033c6:	d102      	bne.n	80033ce <_lseek_r+0x1e>
 80033c8:	682b      	ldr	r3, [r5, #0]
 80033ca:	b103      	cbz	r3, 80033ce <_lseek_r+0x1e>
 80033cc:	6023      	str	r3, [r4, #0]
 80033ce:	bd38      	pop	{r3, r4, r5, pc}
 80033d0:	20000330 	.word	0x20000330

080033d4 <_read_r>:
 80033d4:	b538      	push	{r3, r4, r5, lr}
 80033d6:	4d07      	ldr	r5, [pc, #28]	; (80033f4 <_read_r+0x20>)
 80033d8:	4604      	mov	r4, r0
 80033da:	4608      	mov	r0, r1
 80033dc:	4611      	mov	r1, r2
 80033de:	2200      	movs	r2, #0
 80033e0:	602a      	str	r2, [r5, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	f7ff f85a 	bl	800249c <_read>
 80033e8:	1c43      	adds	r3, r0, #1
 80033ea:	d102      	bne.n	80033f2 <_read_r+0x1e>
 80033ec:	682b      	ldr	r3, [r5, #0]
 80033ee:	b103      	cbz	r3, 80033f2 <_read_r+0x1e>
 80033f0:	6023      	str	r3, [r4, #0]
 80033f2:	bd38      	pop	{r3, r4, r5, pc}
 80033f4:	20000330 	.word	0x20000330

080033f8 <_write_r>:
 80033f8:	b538      	push	{r3, r4, r5, lr}
 80033fa:	4d07      	ldr	r5, [pc, #28]	; (8003418 <_write_r+0x20>)
 80033fc:	4604      	mov	r4, r0
 80033fe:	4608      	mov	r0, r1
 8003400:	4611      	mov	r1, r2
 8003402:	2200      	movs	r2, #0
 8003404:	602a      	str	r2, [r5, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	f7ff f865 	bl	80024d6 <_write>
 800340c:	1c43      	adds	r3, r0, #1
 800340e:	d102      	bne.n	8003416 <_write_r+0x1e>
 8003410:	682b      	ldr	r3, [r5, #0]
 8003412:	b103      	cbz	r3, 8003416 <_write_r+0x1e>
 8003414:	6023      	str	r3, [r4, #0]
 8003416:	bd38      	pop	{r3, r4, r5, pc}
 8003418:	20000330 	.word	0x20000330

0800341c <__errno>:
 800341c:	4b01      	ldr	r3, [pc, #4]	; (8003424 <__errno+0x8>)
 800341e:	6818      	ldr	r0, [r3, #0]
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	20000060 	.word	0x20000060

08003428 <__libc_init_array>:
 8003428:	b570      	push	{r4, r5, r6, lr}
 800342a:	4d0d      	ldr	r5, [pc, #52]	; (8003460 <__libc_init_array+0x38>)
 800342c:	4c0d      	ldr	r4, [pc, #52]	; (8003464 <__libc_init_array+0x3c>)
 800342e:	1b64      	subs	r4, r4, r5
 8003430:	10a4      	asrs	r4, r4, #2
 8003432:	2600      	movs	r6, #0
 8003434:	42a6      	cmp	r6, r4
 8003436:	d109      	bne.n	800344c <__libc_init_array+0x24>
 8003438:	4d0b      	ldr	r5, [pc, #44]	; (8003468 <__libc_init_array+0x40>)
 800343a:	4c0c      	ldr	r4, [pc, #48]	; (800346c <__libc_init_array+0x44>)
 800343c:	f001 feee 	bl	800521c <_init>
 8003440:	1b64      	subs	r4, r4, r5
 8003442:	10a4      	asrs	r4, r4, #2
 8003444:	2600      	movs	r6, #0
 8003446:	42a6      	cmp	r6, r4
 8003448:	d105      	bne.n	8003456 <__libc_init_array+0x2e>
 800344a:	bd70      	pop	{r4, r5, r6, pc}
 800344c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003450:	4798      	blx	r3
 8003452:	3601      	adds	r6, #1
 8003454:	e7ee      	b.n	8003434 <__libc_init_array+0xc>
 8003456:	f855 3b04 	ldr.w	r3, [r5], #4
 800345a:	4798      	blx	r3
 800345c:	3601      	adds	r6, #1
 800345e:	e7f2      	b.n	8003446 <__libc_init_array+0x1e>
 8003460:	08005654 	.word	0x08005654
 8003464:	08005654 	.word	0x08005654
 8003468:	08005654 	.word	0x08005654
 800346c:	08005658 	.word	0x08005658

08003470 <__retarget_lock_init_recursive>:
 8003470:	4770      	bx	lr

08003472 <__retarget_lock_acquire_recursive>:
 8003472:	4770      	bx	lr

08003474 <__retarget_lock_release_recursive>:
 8003474:	4770      	bx	lr

08003476 <quorem>:
 8003476:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800347a:	6903      	ldr	r3, [r0, #16]
 800347c:	690c      	ldr	r4, [r1, #16]
 800347e:	42a3      	cmp	r3, r4
 8003480:	4607      	mov	r7, r0
 8003482:	db7e      	blt.n	8003582 <quorem+0x10c>
 8003484:	3c01      	subs	r4, #1
 8003486:	f101 0814 	add.w	r8, r1, #20
 800348a:	f100 0514 	add.w	r5, r0, #20
 800348e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003492:	9301      	str	r3, [sp, #4]
 8003494:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003498:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800349c:	3301      	adds	r3, #1
 800349e:	429a      	cmp	r2, r3
 80034a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80034a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80034a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80034ac:	d331      	bcc.n	8003512 <quorem+0x9c>
 80034ae:	f04f 0e00 	mov.w	lr, #0
 80034b2:	4640      	mov	r0, r8
 80034b4:	46ac      	mov	ip, r5
 80034b6:	46f2      	mov	sl, lr
 80034b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80034bc:	b293      	uxth	r3, r2
 80034be:	fb06 e303 	mla	r3, r6, r3, lr
 80034c2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80034c6:	0c1a      	lsrs	r2, r3, #16
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	ebaa 0303 	sub.w	r3, sl, r3
 80034ce:	f8dc a000 	ldr.w	sl, [ip]
 80034d2:	fa13 f38a 	uxtah	r3, r3, sl
 80034d6:	fb06 220e 	mla	r2, r6, lr, r2
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	9b00      	ldr	r3, [sp, #0]
 80034de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80034e2:	b292      	uxth	r2, r2
 80034e4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80034e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80034ec:	f8bd 3000 	ldrh.w	r3, [sp]
 80034f0:	4581      	cmp	r9, r0
 80034f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80034f6:	f84c 3b04 	str.w	r3, [ip], #4
 80034fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80034fe:	d2db      	bcs.n	80034b8 <quorem+0x42>
 8003500:	f855 300b 	ldr.w	r3, [r5, fp]
 8003504:	b92b      	cbnz	r3, 8003512 <quorem+0x9c>
 8003506:	9b01      	ldr	r3, [sp, #4]
 8003508:	3b04      	subs	r3, #4
 800350a:	429d      	cmp	r5, r3
 800350c:	461a      	mov	r2, r3
 800350e:	d32c      	bcc.n	800356a <quorem+0xf4>
 8003510:	613c      	str	r4, [r7, #16]
 8003512:	4638      	mov	r0, r7
 8003514:	f001 f9a6 	bl	8004864 <__mcmp>
 8003518:	2800      	cmp	r0, #0
 800351a:	db22      	blt.n	8003562 <quorem+0xec>
 800351c:	3601      	adds	r6, #1
 800351e:	4629      	mov	r1, r5
 8003520:	2000      	movs	r0, #0
 8003522:	f858 2b04 	ldr.w	r2, [r8], #4
 8003526:	f8d1 c000 	ldr.w	ip, [r1]
 800352a:	b293      	uxth	r3, r2
 800352c:	1ac3      	subs	r3, r0, r3
 800352e:	0c12      	lsrs	r2, r2, #16
 8003530:	fa13 f38c 	uxtah	r3, r3, ip
 8003534:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003538:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800353c:	b29b      	uxth	r3, r3
 800353e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003542:	45c1      	cmp	r9, r8
 8003544:	f841 3b04 	str.w	r3, [r1], #4
 8003548:	ea4f 4022 	mov.w	r0, r2, asr #16
 800354c:	d2e9      	bcs.n	8003522 <quorem+0xac>
 800354e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003552:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003556:	b922      	cbnz	r2, 8003562 <quorem+0xec>
 8003558:	3b04      	subs	r3, #4
 800355a:	429d      	cmp	r5, r3
 800355c:	461a      	mov	r2, r3
 800355e:	d30a      	bcc.n	8003576 <quorem+0x100>
 8003560:	613c      	str	r4, [r7, #16]
 8003562:	4630      	mov	r0, r6
 8003564:	b003      	add	sp, #12
 8003566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800356a:	6812      	ldr	r2, [r2, #0]
 800356c:	3b04      	subs	r3, #4
 800356e:	2a00      	cmp	r2, #0
 8003570:	d1ce      	bne.n	8003510 <quorem+0x9a>
 8003572:	3c01      	subs	r4, #1
 8003574:	e7c9      	b.n	800350a <quorem+0x94>
 8003576:	6812      	ldr	r2, [r2, #0]
 8003578:	3b04      	subs	r3, #4
 800357a:	2a00      	cmp	r2, #0
 800357c:	d1f0      	bne.n	8003560 <quorem+0xea>
 800357e:	3c01      	subs	r4, #1
 8003580:	e7eb      	b.n	800355a <quorem+0xe4>
 8003582:	2000      	movs	r0, #0
 8003584:	e7ee      	b.n	8003564 <quorem+0xee>
	...

08003588 <_dtoa_r>:
 8003588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800358c:	ed2d 8b04 	vpush	{d8-d9}
 8003590:	69c5      	ldr	r5, [r0, #28]
 8003592:	b093      	sub	sp, #76	; 0x4c
 8003594:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003598:	ec57 6b10 	vmov	r6, r7, d0
 800359c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80035a0:	9107      	str	r1, [sp, #28]
 80035a2:	4604      	mov	r4, r0
 80035a4:	920a      	str	r2, [sp, #40]	; 0x28
 80035a6:	930d      	str	r3, [sp, #52]	; 0x34
 80035a8:	b975      	cbnz	r5, 80035c8 <_dtoa_r+0x40>
 80035aa:	2010      	movs	r0, #16
 80035ac:	f000 fe2a 	bl	8004204 <malloc>
 80035b0:	4602      	mov	r2, r0
 80035b2:	61e0      	str	r0, [r4, #28]
 80035b4:	b920      	cbnz	r0, 80035c0 <_dtoa_r+0x38>
 80035b6:	4bae      	ldr	r3, [pc, #696]	; (8003870 <_dtoa_r+0x2e8>)
 80035b8:	21ef      	movs	r1, #239	; 0xef
 80035ba:	48ae      	ldr	r0, [pc, #696]	; (8003874 <_dtoa_r+0x2ec>)
 80035bc:	f001 fcf8 	bl	8004fb0 <__assert_func>
 80035c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80035c4:	6005      	str	r5, [r0, #0]
 80035c6:	60c5      	str	r5, [r0, #12]
 80035c8:	69e3      	ldr	r3, [r4, #28]
 80035ca:	6819      	ldr	r1, [r3, #0]
 80035cc:	b151      	cbz	r1, 80035e4 <_dtoa_r+0x5c>
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	604a      	str	r2, [r1, #4]
 80035d2:	2301      	movs	r3, #1
 80035d4:	4093      	lsls	r3, r2
 80035d6:	608b      	str	r3, [r1, #8]
 80035d8:	4620      	mov	r0, r4
 80035da:	f000 ff07 	bl	80043ec <_Bfree>
 80035de:	69e3      	ldr	r3, [r4, #28]
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	1e3b      	subs	r3, r7, #0
 80035e6:	bfbb      	ittet	lt
 80035e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80035ec:	9303      	strlt	r3, [sp, #12]
 80035ee:	2300      	movge	r3, #0
 80035f0:	2201      	movlt	r2, #1
 80035f2:	bfac      	ite	ge
 80035f4:	f8c8 3000 	strge.w	r3, [r8]
 80035f8:	f8c8 2000 	strlt.w	r2, [r8]
 80035fc:	4b9e      	ldr	r3, [pc, #632]	; (8003878 <_dtoa_r+0x2f0>)
 80035fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003602:	ea33 0308 	bics.w	r3, r3, r8
 8003606:	d11b      	bne.n	8003640 <_dtoa_r+0xb8>
 8003608:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800360a:	f242 730f 	movw	r3, #9999	; 0x270f
 800360e:	6013      	str	r3, [r2, #0]
 8003610:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003614:	4333      	orrs	r3, r6
 8003616:	f000 8593 	beq.w	8004140 <_dtoa_r+0xbb8>
 800361a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800361c:	b963      	cbnz	r3, 8003638 <_dtoa_r+0xb0>
 800361e:	4b97      	ldr	r3, [pc, #604]	; (800387c <_dtoa_r+0x2f4>)
 8003620:	e027      	b.n	8003672 <_dtoa_r+0xea>
 8003622:	4b97      	ldr	r3, [pc, #604]	; (8003880 <_dtoa_r+0x2f8>)
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	3308      	adds	r3, #8
 8003628:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	9800      	ldr	r0, [sp, #0]
 800362e:	b013      	add	sp, #76	; 0x4c
 8003630:	ecbd 8b04 	vpop	{d8-d9}
 8003634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003638:	4b90      	ldr	r3, [pc, #576]	; (800387c <_dtoa_r+0x2f4>)
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	3303      	adds	r3, #3
 800363e:	e7f3      	b.n	8003628 <_dtoa_r+0xa0>
 8003640:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003644:	2200      	movs	r2, #0
 8003646:	ec51 0b17 	vmov	r0, r1, d7
 800364a:	eeb0 8a47 	vmov.f32	s16, s14
 800364e:	eef0 8a67 	vmov.f32	s17, s15
 8003652:	2300      	movs	r3, #0
 8003654:	f7fd fa40 	bl	8000ad8 <__aeabi_dcmpeq>
 8003658:	4681      	mov	r9, r0
 800365a:	b160      	cbz	r0, 8003676 <_dtoa_r+0xee>
 800365c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800365e:	2301      	movs	r3, #1
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8568 	beq.w	800413a <_dtoa_r+0xbb2>
 800366a:	4b86      	ldr	r3, [pc, #536]	; (8003884 <_dtoa_r+0x2fc>)
 800366c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	3b01      	subs	r3, #1
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	e7da      	b.n	800362c <_dtoa_r+0xa4>
 8003676:	aa10      	add	r2, sp, #64	; 0x40
 8003678:	a911      	add	r1, sp, #68	; 0x44
 800367a:	4620      	mov	r0, r4
 800367c:	eeb0 0a48 	vmov.f32	s0, s16
 8003680:	eef0 0a68 	vmov.f32	s1, s17
 8003684:	f001 f994 	bl	80049b0 <__d2b>
 8003688:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800368c:	4682      	mov	sl, r0
 800368e:	2d00      	cmp	r5, #0
 8003690:	d07f      	beq.n	8003792 <_dtoa_r+0x20a>
 8003692:	ee18 3a90 	vmov	r3, s17
 8003696:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800369a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800369e:	ec51 0b18 	vmov	r0, r1, d8
 80036a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80036a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80036aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80036ae:	4619      	mov	r1, r3
 80036b0:	2200      	movs	r2, #0
 80036b2:	4b75      	ldr	r3, [pc, #468]	; (8003888 <_dtoa_r+0x300>)
 80036b4:	f7fc fdf0 	bl	8000298 <__aeabi_dsub>
 80036b8:	a367      	add	r3, pc, #412	; (adr r3, 8003858 <_dtoa_r+0x2d0>)
 80036ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036be:	f7fc ffa3 	bl	8000608 <__aeabi_dmul>
 80036c2:	a367      	add	r3, pc, #412	; (adr r3, 8003860 <_dtoa_r+0x2d8>)
 80036c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c8:	f7fc fde8 	bl	800029c <__adddf3>
 80036cc:	4606      	mov	r6, r0
 80036ce:	4628      	mov	r0, r5
 80036d0:	460f      	mov	r7, r1
 80036d2:	f7fc ff2f 	bl	8000534 <__aeabi_i2d>
 80036d6:	a364      	add	r3, pc, #400	; (adr r3, 8003868 <_dtoa_r+0x2e0>)
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	f7fc ff94 	bl	8000608 <__aeabi_dmul>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4630      	mov	r0, r6
 80036e6:	4639      	mov	r1, r7
 80036e8:	f7fc fdd8 	bl	800029c <__adddf3>
 80036ec:	4606      	mov	r6, r0
 80036ee:	460f      	mov	r7, r1
 80036f0:	f7fd fa3a 	bl	8000b68 <__aeabi_d2iz>
 80036f4:	2200      	movs	r2, #0
 80036f6:	4683      	mov	fp, r0
 80036f8:	2300      	movs	r3, #0
 80036fa:	4630      	mov	r0, r6
 80036fc:	4639      	mov	r1, r7
 80036fe:	f7fd f9f5 	bl	8000aec <__aeabi_dcmplt>
 8003702:	b148      	cbz	r0, 8003718 <_dtoa_r+0x190>
 8003704:	4658      	mov	r0, fp
 8003706:	f7fc ff15 	bl	8000534 <__aeabi_i2d>
 800370a:	4632      	mov	r2, r6
 800370c:	463b      	mov	r3, r7
 800370e:	f7fd f9e3 	bl	8000ad8 <__aeabi_dcmpeq>
 8003712:	b908      	cbnz	r0, 8003718 <_dtoa_r+0x190>
 8003714:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003718:	f1bb 0f16 	cmp.w	fp, #22
 800371c:	d857      	bhi.n	80037ce <_dtoa_r+0x246>
 800371e:	4b5b      	ldr	r3, [pc, #364]	; (800388c <_dtoa_r+0x304>)
 8003720:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	ec51 0b18 	vmov	r0, r1, d8
 800372c:	f7fd f9de 	bl	8000aec <__aeabi_dcmplt>
 8003730:	2800      	cmp	r0, #0
 8003732:	d04e      	beq.n	80037d2 <_dtoa_r+0x24a>
 8003734:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003738:	2300      	movs	r3, #0
 800373a:	930c      	str	r3, [sp, #48]	; 0x30
 800373c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800373e:	1b5b      	subs	r3, r3, r5
 8003740:	1e5a      	subs	r2, r3, #1
 8003742:	bf45      	ittet	mi
 8003744:	f1c3 0301 	rsbmi	r3, r3, #1
 8003748:	9305      	strmi	r3, [sp, #20]
 800374a:	2300      	movpl	r3, #0
 800374c:	2300      	movmi	r3, #0
 800374e:	9206      	str	r2, [sp, #24]
 8003750:	bf54      	ite	pl
 8003752:	9305      	strpl	r3, [sp, #20]
 8003754:	9306      	strmi	r3, [sp, #24]
 8003756:	f1bb 0f00 	cmp.w	fp, #0
 800375a:	db3c      	blt.n	80037d6 <_dtoa_r+0x24e>
 800375c:	9b06      	ldr	r3, [sp, #24]
 800375e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003762:	445b      	add	r3, fp
 8003764:	9306      	str	r3, [sp, #24]
 8003766:	2300      	movs	r3, #0
 8003768:	9308      	str	r3, [sp, #32]
 800376a:	9b07      	ldr	r3, [sp, #28]
 800376c:	2b09      	cmp	r3, #9
 800376e:	d868      	bhi.n	8003842 <_dtoa_r+0x2ba>
 8003770:	2b05      	cmp	r3, #5
 8003772:	bfc4      	itt	gt
 8003774:	3b04      	subgt	r3, #4
 8003776:	9307      	strgt	r3, [sp, #28]
 8003778:	9b07      	ldr	r3, [sp, #28]
 800377a:	f1a3 0302 	sub.w	r3, r3, #2
 800377e:	bfcc      	ite	gt
 8003780:	2500      	movgt	r5, #0
 8003782:	2501      	movle	r5, #1
 8003784:	2b03      	cmp	r3, #3
 8003786:	f200 8085 	bhi.w	8003894 <_dtoa_r+0x30c>
 800378a:	e8df f003 	tbb	[pc, r3]
 800378e:	3b2e      	.short	0x3b2e
 8003790:	5839      	.short	0x5839
 8003792:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003796:	441d      	add	r5, r3
 8003798:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800379c:	2b20      	cmp	r3, #32
 800379e:	bfc1      	itttt	gt
 80037a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80037a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80037a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80037ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 80037b0:	bfd6      	itet	le
 80037b2:	f1c3 0320 	rsble	r3, r3, #32
 80037b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80037ba:	fa06 f003 	lslle.w	r0, r6, r3
 80037be:	f7fc fea9 	bl	8000514 <__aeabi_ui2d>
 80037c2:	2201      	movs	r2, #1
 80037c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80037c8:	3d01      	subs	r5, #1
 80037ca:	920e      	str	r2, [sp, #56]	; 0x38
 80037cc:	e76f      	b.n	80036ae <_dtoa_r+0x126>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e7b3      	b.n	800373a <_dtoa_r+0x1b2>
 80037d2:	900c      	str	r0, [sp, #48]	; 0x30
 80037d4:	e7b2      	b.n	800373c <_dtoa_r+0x1b4>
 80037d6:	9b05      	ldr	r3, [sp, #20]
 80037d8:	eba3 030b 	sub.w	r3, r3, fp
 80037dc:	9305      	str	r3, [sp, #20]
 80037de:	f1cb 0300 	rsb	r3, fp, #0
 80037e2:	9308      	str	r3, [sp, #32]
 80037e4:	2300      	movs	r3, #0
 80037e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80037e8:	e7bf      	b.n	800376a <_dtoa_r+0x1e2>
 80037ea:	2300      	movs	r3, #0
 80037ec:	9309      	str	r3, [sp, #36]	; 0x24
 80037ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	dc52      	bgt.n	800389a <_dtoa_r+0x312>
 80037f4:	2301      	movs	r3, #1
 80037f6:	9301      	str	r3, [sp, #4]
 80037f8:	9304      	str	r3, [sp, #16]
 80037fa:	461a      	mov	r2, r3
 80037fc:	920a      	str	r2, [sp, #40]	; 0x28
 80037fe:	e00b      	b.n	8003818 <_dtoa_r+0x290>
 8003800:	2301      	movs	r3, #1
 8003802:	e7f3      	b.n	80037ec <_dtoa_r+0x264>
 8003804:	2300      	movs	r3, #0
 8003806:	9309      	str	r3, [sp, #36]	; 0x24
 8003808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800380a:	445b      	add	r3, fp
 800380c:	9301      	str	r3, [sp, #4]
 800380e:	3301      	adds	r3, #1
 8003810:	2b01      	cmp	r3, #1
 8003812:	9304      	str	r3, [sp, #16]
 8003814:	bfb8      	it	lt
 8003816:	2301      	movlt	r3, #1
 8003818:	69e0      	ldr	r0, [r4, #28]
 800381a:	2100      	movs	r1, #0
 800381c:	2204      	movs	r2, #4
 800381e:	f102 0614 	add.w	r6, r2, #20
 8003822:	429e      	cmp	r6, r3
 8003824:	d93d      	bls.n	80038a2 <_dtoa_r+0x31a>
 8003826:	6041      	str	r1, [r0, #4]
 8003828:	4620      	mov	r0, r4
 800382a:	f000 fd9f 	bl	800436c <_Balloc>
 800382e:	9000      	str	r0, [sp, #0]
 8003830:	2800      	cmp	r0, #0
 8003832:	d139      	bne.n	80038a8 <_dtoa_r+0x320>
 8003834:	4b16      	ldr	r3, [pc, #88]	; (8003890 <_dtoa_r+0x308>)
 8003836:	4602      	mov	r2, r0
 8003838:	f240 11af 	movw	r1, #431	; 0x1af
 800383c:	e6bd      	b.n	80035ba <_dtoa_r+0x32>
 800383e:	2301      	movs	r3, #1
 8003840:	e7e1      	b.n	8003806 <_dtoa_r+0x27e>
 8003842:	2501      	movs	r5, #1
 8003844:	2300      	movs	r3, #0
 8003846:	9307      	str	r3, [sp, #28]
 8003848:	9509      	str	r5, [sp, #36]	; 0x24
 800384a:	f04f 33ff 	mov.w	r3, #4294967295
 800384e:	9301      	str	r3, [sp, #4]
 8003850:	9304      	str	r3, [sp, #16]
 8003852:	2200      	movs	r2, #0
 8003854:	2312      	movs	r3, #18
 8003856:	e7d1      	b.n	80037fc <_dtoa_r+0x274>
 8003858:	636f4361 	.word	0x636f4361
 800385c:	3fd287a7 	.word	0x3fd287a7
 8003860:	8b60c8b3 	.word	0x8b60c8b3
 8003864:	3fc68a28 	.word	0x3fc68a28
 8003868:	509f79fb 	.word	0x509f79fb
 800386c:	3fd34413 	.word	0x3fd34413
 8003870:	08005322 	.word	0x08005322
 8003874:	08005339 	.word	0x08005339
 8003878:	7ff00000 	.word	0x7ff00000
 800387c:	0800531e 	.word	0x0800531e
 8003880:	08005315 	.word	0x08005315
 8003884:	080052f2 	.word	0x080052f2
 8003888:	3ff80000 	.word	0x3ff80000
 800388c:	08005428 	.word	0x08005428
 8003890:	08005391 	.word	0x08005391
 8003894:	2301      	movs	r3, #1
 8003896:	9309      	str	r3, [sp, #36]	; 0x24
 8003898:	e7d7      	b.n	800384a <_dtoa_r+0x2c2>
 800389a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800389c:	9301      	str	r3, [sp, #4]
 800389e:	9304      	str	r3, [sp, #16]
 80038a0:	e7ba      	b.n	8003818 <_dtoa_r+0x290>
 80038a2:	3101      	adds	r1, #1
 80038a4:	0052      	lsls	r2, r2, #1
 80038a6:	e7ba      	b.n	800381e <_dtoa_r+0x296>
 80038a8:	69e3      	ldr	r3, [r4, #28]
 80038aa:	9a00      	ldr	r2, [sp, #0]
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	9b04      	ldr	r3, [sp, #16]
 80038b0:	2b0e      	cmp	r3, #14
 80038b2:	f200 80a8 	bhi.w	8003a06 <_dtoa_r+0x47e>
 80038b6:	2d00      	cmp	r5, #0
 80038b8:	f000 80a5 	beq.w	8003a06 <_dtoa_r+0x47e>
 80038bc:	f1bb 0f00 	cmp.w	fp, #0
 80038c0:	dd38      	ble.n	8003934 <_dtoa_r+0x3ac>
 80038c2:	4bc0      	ldr	r3, [pc, #768]	; (8003bc4 <_dtoa_r+0x63c>)
 80038c4:	f00b 020f 	and.w	r2, fp, #15
 80038c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80038cc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80038d0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80038d4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80038d8:	d019      	beq.n	800390e <_dtoa_r+0x386>
 80038da:	4bbb      	ldr	r3, [pc, #748]	; (8003bc8 <_dtoa_r+0x640>)
 80038dc:	ec51 0b18 	vmov	r0, r1, d8
 80038e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80038e4:	f7fc ffba 	bl	800085c <__aeabi_ddiv>
 80038e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80038ec:	f008 080f 	and.w	r8, r8, #15
 80038f0:	2503      	movs	r5, #3
 80038f2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8003bc8 <_dtoa_r+0x640>
 80038f6:	f1b8 0f00 	cmp.w	r8, #0
 80038fa:	d10a      	bne.n	8003912 <_dtoa_r+0x38a>
 80038fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003900:	4632      	mov	r2, r6
 8003902:	463b      	mov	r3, r7
 8003904:	f7fc ffaa 	bl	800085c <__aeabi_ddiv>
 8003908:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800390c:	e02b      	b.n	8003966 <_dtoa_r+0x3de>
 800390e:	2502      	movs	r5, #2
 8003910:	e7ef      	b.n	80038f2 <_dtoa_r+0x36a>
 8003912:	f018 0f01 	tst.w	r8, #1
 8003916:	d008      	beq.n	800392a <_dtoa_r+0x3a2>
 8003918:	4630      	mov	r0, r6
 800391a:	4639      	mov	r1, r7
 800391c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003920:	f7fc fe72 	bl	8000608 <__aeabi_dmul>
 8003924:	3501      	adds	r5, #1
 8003926:	4606      	mov	r6, r0
 8003928:	460f      	mov	r7, r1
 800392a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800392e:	f109 0908 	add.w	r9, r9, #8
 8003932:	e7e0      	b.n	80038f6 <_dtoa_r+0x36e>
 8003934:	f000 809f 	beq.w	8003a76 <_dtoa_r+0x4ee>
 8003938:	f1cb 0600 	rsb	r6, fp, #0
 800393c:	4ba1      	ldr	r3, [pc, #644]	; (8003bc4 <_dtoa_r+0x63c>)
 800393e:	4fa2      	ldr	r7, [pc, #648]	; (8003bc8 <_dtoa_r+0x640>)
 8003940:	f006 020f 	and.w	r2, r6, #15
 8003944:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394c:	ec51 0b18 	vmov	r0, r1, d8
 8003950:	f7fc fe5a 	bl	8000608 <__aeabi_dmul>
 8003954:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003958:	1136      	asrs	r6, r6, #4
 800395a:	2300      	movs	r3, #0
 800395c:	2502      	movs	r5, #2
 800395e:	2e00      	cmp	r6, #0
 8003960:	d17e      	bne.n	8003a60 <_dtoa_r+0x4d8>
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1d0      	bne.n	8003908 <_dtoa_r+0x380>
 8003966:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003968:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 8084 	beq.w	8003a7a <_dtoa_r+0x4f2>
 8003972:	4b96      	ldr	r3, [pc, #600]	; (8003bcc <_dtoa_r+0x644>)
 8003974:	2200      	movs	r2, #0
 8003976:	4640      	mov	r0, r8
 8003978:	4649      	mov	r1, r9
 800397a:	f7fd f8b7 	bl	8000aec <__aeabi_dcmplt>
 800397e:	2800      	cmp	r0, #0
 8003980:	d07b      	beq.n	8003a7a <_dtoa_r+0x4f2>
 8003982:	9b04      	ldr	r3, [sp, #16]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d078      	beq.n	8003a7a <_dtoa_r+0x4f2>
 8003988:	9b01      	ldr	r3, [sp, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	dd39      	ble.n	8003a02 <_dtoa_r+0x47a>
 800398e:	4b90      	ldr	r3, [pc, #576]	; (8003bd0 <_dtoa_r+0x648>)
 8003990:	2200      	movs	r2, #0
 8003992:	4640      	mov	r0, r8
 8003994:	4649      	mov	r1, r9
 8003996:	f7fc fe37 	bl	8000608 <__aeabi_dmul>
 800399a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800399e:	9e01      	ldr	r6, [sp, #4]
 80039a0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80039a4:	3501      	adds	r5, #1
 80039a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80039aa:	4628      	mov	r0, r5
 80039ac:	f7fc fdc2 	bl	8000534 <__aeabi_i2d>
 80039b0:	4642      	mov	r2, r8
 80039b2:	464b      	mov	r3, r9
 80039b4:	f7fc fe28 	bl	8000608 <__aeabi_dmul>
 80039b8:	4b86      	ldr	r3, [pc, #536]	; (8003bd4 <_dtoa_r+0x64c>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	f7fc fc6e 	bl	800029c <__adddf3>
 80039c0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80039c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80039c8:	9303      	str	r3, [sp, #12]
 80039ca:	2e00      	cmp	r6, #0
 80039cc:	d158      	bne.n	8003a80 <_dtoa_r+0x4f8>
 80039ce:	4b82      	ldr	r3, [pc, #520]	; (8003bd8 <_dtoa_r+0x650>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	4640      	mov	r0, r8
 80039d4:	4649      	mov	r1, r9
 80039d6:	f7fc fc5f 	bl	8000298 <__aeabi_dsub>
 80039da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80039de:	4680      	mov	r8, r0
 80039e0:	4689      	mov	r9, r1
 80039e2:	f7fd f8a1 	bl	8000b28 <__aeabi_dcmpgt>
 80039e6:	2800      	cmp	r0, #0
 80039e8:	f040 8296 	bne.w	8003f18 <_dtoa_r+0x990>
 80039ec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80039f0:	4640      	mov	r0, r8
 80039f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80039f6:	4649      	mov	r1, r9
 80039f8:	f7fd f878 	bl	8000aec <__aeabi_dcmplt>
 80039fc:	2800      	cmp	r0, #0
 80039fe:	f040 8289 	bne.w	8003f14 <_dtoa_r+0x98c>
 8003a02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8003a06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f2c0 814e 	blt.w	8003caa <_dtoa_r+0x722>
 8003a0e:	f1bb 0f0e 	cmp.w	fp, #14
 8003a12:	f300 814a 	bgt.w	8003caa <_dtoa_r+0x722>
 8003a16:	4b6b      	ldr	r3, [pc, #428]	; (8003bc4 <_dtoa_r+0x63c>)
 8003a18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003a1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f280 80dc 	bge.w	8003be0 <_dtoa_r+0x658>
 8003a28:	9b04      	ldr	r3, [sp, #16]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f300 80d8 	bgt.w	8003be0 <_dtoa_r+0x658>
 8003a30:	f040 826f 	bne.w	8003f12 <_dtoa_r+0x98a>
 8003a34:	4b68      	ldr	r3, [pc, #416]	; (8003bd8 <_dtoa_r+0x650>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	4640      	mov	r0, r8
 8003a3a:	4649      	mov	r1, r9
 8003a3c:	f7fc fde4 	bl	8000608 <__aeabi_dmul>
 8003a40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a44:	f7fd f866 	bl	8000b14 <__aeabi_dcmpge>
 8003a48:	9e04      	ldr	r6, [sp, #16]
 8003a4a:	4637      	mov	r7, r6
 8003a4c:	2800      	cmp	r0, #0
 8003a4e:	f040 8245 	bne.w	8003edc <_dtoa_r+0x954>
 8003a52:	9d00      	ldr	r5, [sp, #0]
 8003a54:	2331      	movs	r3, #49	; 0x31
 8003a56:	f805 3b01 	strb.w	r3, [r5], #1
 8003a5a:	f10b 0b01 	add.w	fp, fp, #1
 8003a5e:	e241      	b.n	8003ee4 <_dtoa_r+0x95c>
 8003a60:	07f2      	lsls	r2, r6, #31
 8003a62:	d505      	bpl.n	8003a70 <_dtoa_r+0x4e8>
 8003a64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a68:	f7fc fdce 	bl	8000608 <__aeabi_dmul>
 8003a6c:	3501      	adds	r5, #1
 8003a6e:	2301      	movs	r3, #1
 8003a70:	1076      	asrs	r6, r6, #1
 8003a72:	3708      	adds	r7, #8
 8003a74:	e773      	b.n	800395e <_dtoa_r+0x3d6>
 8003a76:	2502      	movs	r5, #2
 8003a78:	e775      	b.n	8003966 <_dtoa_r+0x3de>
 8003a7a:	9e04      	ldr	r6, [sp, #16]
 8003a7c:	465f      	mov	r7, fp
 8003a7e:	e792      	b.n	80039a6 <_dtoa_r+0x41e>
 8003a80:	9900      	ldr	r1, [sp, #0]
 8003a82:	4b50      	ldr	r3, [pc, #320]	; (8003bc4 <_dtoa_r+0x63c>)
 8003a84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003a88:	4431      	add	r1, r6
 8003a8a:	9102      	str	r1, [sp, #8]
 8003a8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a8e:	eeb0 9a47 	vmov.f32	s18, s14
 8003a92:	eef0 9a67 	vmov.f32	s19, s15
 8003a96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003a9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003a9e:	2900      	cmp	r1, #0
 8003aa0:	d044      	beq.n	8003b2c <_dtoa_r+0x5a4>
 8003aa2:	494e      	ldr	r1, [pc, #312]	; (8003bdc <_dtoa_r+0x654>)
 8003aa4:	2000      	movs	r0, #0
 8003aa6:	f7fc fed9 	bl	800085c <__aeabi_ddiv>
 8003aaa:	ec53 2b19 	vmov	r2, r3, d9
 8003aae:	f7fc fbf3 	bl	8000298 <__aeabi_dsub>
 8003ab2:	9d00      	ldr	r5, [sp, #0]
 8003ab4:	ec41 0b19 	vmov	d9, r0, r1
 8003ab8:	4649      	mov	r1, r9
 8003aba:	4640      	mov	r0, r8
 8003abc:	f7fd f854 	bl	8000b68 <__aeabi_d2iz>
 8003ac0:	4606      	mov	r6, r0
 8003ac2:	f7fc fd37 	bl	8000534 <__aeabi_i2d>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4640      	mov	r0, r8
 8003acc:	4649      	mov	r1, r9
 8003ace:	f7fc fbe3 	bl	8000298 <__aeabi_dsub>
 8003ad2:	3630      	adds	r6, #48	; 0x30
 8003ad4:	f805 6b01 	strb.w	r6, [r5], #1
 8003ad8:	ec53 2b19 	vmov	r2, r3, d9
 8003adc:	4680      	mov	r8, r0
 8003ade:	4689      	mov	r9, r1
 8003ae0:	f7fd f804 	bl	8000aec <__aeabi_dcmplt>
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	d164      	bne.n	8003bb2 <_dtoa_r+0x62a>
 8003ae8:	4642      	mov	r2, r8
 8003aea:	464b      	mov	r3, r9
 8003aec:	4937      	ldr	r1, [pc, #220]	; (8003bcc <_dtoa_r+0x644>)
 8003aee:	2000      	movs	r0, #0
 8003af0:	f7fc fbd2 	bl	8000298 <__aeabi_dsub>
 8003af4:	ec53 2b19 	vmov	r2, r3, d9
 8003af8:	f7fc fff8 	bl	8000aec <__aeabi_dcmplt>
 8003afc:	2800      	cmp	r0, #0
 8003afe:	f040 80b6 	bne.w	8003c6e <_dtoa_r+0x6e6>
 8003b02:	9b02      	ldr	r3, [sp, #8]
 8003b04:	429d      	cmp	r5, r3
 8003b06:	f43f af7c 	beq.w	8003a02 <_dtoa_r+0x47a>
 8003b0a:	4b31      	ldr	r3, [pc, #196]	; (8003bd0 <_dtoa_r+0x648>)
 8003b0c:	ec51 0b19 	vmov	r0, r1, d9
 8003b10:	2200      	movs	r2, #0
 8003b12:	f7fc fd79 	bl	8000608 <__aeabi_dmul>
 8003b16:	4b2e      	ldr	r3, [pc, #184]	; (8003bd0 <_dtoa_r+0x648>)
 8003b18:	ec41 0b19 	vmov	d9, r0, r1
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	4640      	mov	r0, r8
 8003b20:	4649      	mov	r1, r9
 8003b22:	f7fc fd71 	bl	8000608 <__aeabi_dmul>
 8003b26:	4680      	mov	r8, r0
 8003b28:	4689      	mov	r9, r1
 8003b2a:	e7c5      	b.n	8003ab8 <_dtoa_r+0x530>
 8003b2c:	ec51 0b17 	vmov	r0, r1, d7
 8003b30:	f7fc fd6a 	bl	8000608 <__aeabi_dmul>
 8003b34:	9b02      	ldr	r3, [sp, #8]
 8003b36:	9d00      	ldr	r5, [sp, #0]
 8003b38:	930f      	str	r3, [sp, #60]	; 0x3c
 8003b3a:	ec41 0b19 	vmov	d9, r0, r1
 8003b3e:	4649      	mov	r1, r9
 8003b40:	4640      	mov	r0, r8
 8003b42:	f7fd f811 	bl	8000b68 <__aeabi_d2iz>
 8003b46:	4606      	mov	r6, r0
 8003b48:	f7fc fcf4 	bl	8000534 <__aeabi_i2d>
 8003b4c:	3630      	adds	r6, #48	; 0x30
 8003b4e:	4602      	mov	r2, r0
 8003b50:	460b      	mov	r3, r1
 8003b52:	4640      	mov	r0, r8
 8003b54:	4649      	mov	r1, r9
 8003b56:	f7fc fb9f 	bl	8000298 <__aeabi_dsub>
 8003b5a:	f805 6b01 	strb.w	r6, [r5], #1
 8003b5e:	9b02      	ldr	r3, [sp, #8]
 8003b60:	429d      	cmp	r5, r3
 8003b62:	4680      	mov	r8, r0
 8003b64:	4689      	mov	r9, r1
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	d124      	bne.n	8003bb6 <_dtoa_r+0x62e>
 8003b6c:	4b1b      	ldr	r3, [pc, #108]	; (8003bdc <_dtoa_r+0x654>)
 8003b6e:	ec51 0b19 	vmov	r0, r1, d9
 8003b72:	f7fc fb93 	bl	800029c <__adddf3>
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4640      	mov	r0, r8
 8003b7c:	4649      	mov	r1, r9
 8003b7e:	f7fc ffd3 	bl	8000b28 <__aeabi_dcmpgt>
 8003b82:	2800      	cmp	r0, #0
 8003b84:	d173      	bne.n	8003c6e <_dtoa_r+0x6e6>
 8003b86:	ec53 2b19 	vmov	r2, r3, d9
 8003b8a:	4914      	ldr	r1, [pc, #80]	; (8003bdc <_dtoa_r+0x654>)
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	f7fc fb83 	bl	8000298 <__aeabi_dsub>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4640      	mov	r0, r8
 8003b98:	4649      	mov	r1, r9
 8003b9a:	f7fc ffa7 	bl	8000aec <__aeabi_dcmplt>
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	f43f af2f 	beq.w	8003a02 <_dtoa_r+0x47a>
 8003ba4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003ba6:	1e6b      	subs	r3, r5, #1
 8003ba8:	930f      	str	r3, [sp, #60]	; 0x3c
 8003baa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003bae:	2b30      	cmp	r3, #48	; 0x30
 8003bb0:	d0f8      	beq.n	8003ba4 <_dtoa_r+0x61c>
 8003bb2:	46bb      	mov	fp, r7
 8003bb4:	e04a      	b.n	8003c4c <_dtoa_r+0x6c4>
 8003bb6:	4b06      	ldr	r3, [pc, #24]	; (8003bd0 <_dtoa_r+0x648>)
 8003bb8:	f7fc fd26 	bl	8000608 <__aeabi_dmul>
 8003bbc:	4680      	mov	r8, r0
 8003bbe:	4689      	mov	r9, r1
 8003bc0:	e7bd      	b.n	8003b3e <_dtoa_r+0x5b6>
 8003bc2:	bf00      	nop
 8003bc4:	08005428 	.word	0x08005428
 8003bc8:	08005400 	.word	0x08005400
 8003bcc:	3ff00000 	.word	0x3ff00000
 8003bd0:	40240000 	.word	0x40240000
 8003bd4:	401c0000 	.word	0x401c0000
 8003bd8:	40140000 	.word	0x40140000
 8003bdc:	3fe00000 	.word	0x3fe00000
 8003be0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003be4:	9d00      	ldr	r5, [sp, #0]
 8003be6:	4642      	mov	r2, r8
 8003be8:	464b      	mov	r3, r9
 8003bea:	4630      	mov	r0, r6
 8003bec:	4639      	mov	r1, r7
 8003bee:	f7fc fe35 	bl	800085c <__aeabi_ddiv>
 8003bf2:	f7fc ffb9 	bl	8000b68 <__aeabi_d2iz>
 8003bf6:	9001      	str	r0, [sp, #4]
 8003bf8:	f7fc fc9c 	bl	8000534 <__aeabi_i2d>
 8003bfc:	4642      	mov	r2, r8
 8003bfe:	464b      	mov	r3, r9
 8003c00:	f7fc fd02 	bl	8000608 <__aeabi_dmul>
 8003c04:	4602      	mov	r2, r0
 8003c06:	460b      	mov	r3, r1
 8003c08:	4630      	mov	r0, r6
 8003c0a:	4639      	mov	r1, r7
 8003c0c:	f7fc fb44 	bl	8000298 <__aeabi_dsub>
 8003c10:	9e01      	ldr	r6, [sp, #4]
 8003c12:	9f04      	ldr	r7, [sp, #16]
 8003c14:	3630      	adds	r6, #48	; 0x30
 8003c16:	f805 6b01 	strb.w	r6, [r5], #1
 8003c1a:	9e00      	ldr	r6, [sp, #0]
 8003c1c:	1bae      	subs	r6, r5, r6
 8003c1e:	42b7      	cmp	r7, r6
 8003c20:	4602      	mov	r2, r0
 8003c22:	460b      	mov	r3, r1
 8003c24:	d134      	bne.n	8003c90 <_dtoa_r+0x708>
 8003c26:	f7fc fb39 	bl	800029c <__adddf3>
 8003c2a:	4642      	mov	r2, r8
 8003c2c:	464b      	mov	r3, r9
 8003c2e:	4606      	mov	r6, r0
 8003c30:	460f      	mov	r7, r1
 8003c32:	f7fc ff79 	bl	8000b28 <__aeabi_dcmpgt>
 8003c36:	b9c8      	cbnz	r0, 8003c6c <_dtoa_r+0x6e4>
 8003c38:	4642      	mov	r2, r8
 8003c3a:	464b      	mov	r3, r9
 8003c3c:	4630      	mov	r0, r6
 8003c3e:	4639      	mov	r1, r7
 8003c40:	f7fc ff4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8003c44:	b110      	cbz	r0, 8003c4c <_dtoa_r+0x6c4>
 8003c46:	9b01      	ldr	r3, [sp, #4]
 8003c48:	07db      	lsls	r3, r3, #31
 8003c4a:	d40f      	bmi.n	8003c6c <_dtoa_r+0x6e4>
 8003c4c:	4651      	mov	r1, sl
 8003c4e:	4620      	mov	r0, r4
 8003c50:	f000 fbcc 	bl	80043ec <_Bfree>
 8003c54:	2300      	movs	r3, #0
 8003c56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003c58:	702b      	strb	r3, [r5, #0]
 8003c5a:	f10b 0301 	add.w	r3, fp, #1
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f43f ace2 	beq.w	800362c <_dtoa_r+0xa4>
 8003c68:	601d      	str	r5, [r3, #0]
 8003c6a:	e4df      	b.n	800362c <_dtoa_r+0xa4>
 8003c6c:	465f      	mov	r7, fp
 8003c6e:	462b      	mov	r3, r5
 8003c70:	461d      	mov	r5, r3
 8003c72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003c76:	2a39      	cmp	r2, #57	; 0x39
 8003c78:	d106      	bne.n	8003c88 <_dtoa_r+0x700>
 8003c7a:	9a00      	ldr	r2, [sp, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d1f7      	bne.n	8003c70 <_dtoa_r+0x6e8>
 8003c80:	9900      	ldr	r1, [sp, #0]
 8003c82:	2230      	movs	r2, #48	; 0x30
 8003c84:	3701      	adds	r7, #1
 8003c86:	700a      	strb	r2, [r1, #0]
 8003c88:	781a      	ldrb	r2, [r3, #0]
 8003c8a:	3201      	adds	r2, #1
 8003c8c:	701a      	strb	r2, [r3, #0]
 8003c8e:	e790      	b.n	8003bb2 <_dtoa_r+0x62a>
 8003c90:	4ba3      	ldr	r3, [pc, #652]	; (8003f20 <_dtoa_r+0x998>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	f7fc fcb8 	bl	8000608 <__aeabi_dmul>
 8003c98:	2200      	movs	r2, #0
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	4606      	mov	r6, r0
 8003c9e:	460f      	mov	r7, r1
 8003ca0:	f7fc ff1a 	bl	8000ad8 <__aeabi_dcmpeq>
 8003ca4:	2800      	cmp	r0, #0
 8003ca6:	d09e      	beq.n	8003be6 <_dtoa_r+0x65e>
 8003ca8:	e7d0      	b.n	8003c4c <_dtoa_r+0x6c4>
 8003caa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cac:	2a00      	cmp	r2, #0
 8003cae:	f000 80ca 	beq.w	8003e46 <_dtoa_r+0x8be>
 8003cb2:	9a07      	ldr	r2, [sp, #28]
 8003cb4:	2a01      	cmp	r2, #1
 8003cb6:	f300 80ad 	bgt.w	8003e14 <_dtoa_r+0x88c>
 8003cba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003cbc:	2a00      	cmp	r2, #0
 8003cbe:	f000 80a5 	beq.w	8003e0c <_dtoa_r+0x884>
 8003cc2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003cc6:	9e08      	ldr	r6, [sp, #32]
 8003cc8:	9d05      	ldr	r5, [sp, #20]
 8003cca:	9a05      	ldr	r2, [sp, #20]
 8003ccc:	441a      	add	r2, r3
 8003cce:	9205      	str	r2, [sp, #20]
 8003cd0:	9a06      	ldr	r2, [sp, #24]
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	441a      	add	r2, r3
 8003cd6:	4620      	mov	r0, r4
 8003cd8:	9206      	str	r2, [sp, #24]
 8003cda:	f000 fc3d 	bl	8004558 <__i2b>
 8003cde:	4607      	mov	r7, r0
 8003ce0:	b165      	cbz	r5, 8003cfc <_dtoa_r+0x774>
 8003ce2:	9b06      	ldr	r3, [sp, #24]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	dd09      	ble.n	8003cfc <_dtoa_r+0x774>
 8003ce8:	42ab      	cmp	r3, r5
 8003cea:	9a05      	ldr	r2, [sp, #20]
 8003cec:	bfa8      	it	ge
 8003cee:	462b      	movge	r3, r5
 8003cf0:	1ad2      	subs	r2, r2, r3
 8003cf2:	9205      	str	r2, [sp, #20]
 8003cf4:	9a06      	ldr	r2, [sp, #24]
 8003cf6:	1aed      	subs	r5, r5, r3
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	9306      	str	r3, [sp, #24]
 8003cfc:	9b08      	ldr	r3, [sp, #32]
 8003cfe:	b1f3      	cbz	r3, 8003d3e <_dtoa_r+0x7b6>
 8003d00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f000 80a3 	beq.w	8003e4e <_dtoa_r+0x8c6>
 8003d08:	2e00      	cmp	r6, #0
 8003d0a:	dd10      	ble.n	8003d2e <_dtoa_r+0x7a6>
 8003d0c:	4639      	mov	r1, r7
 8003d0e:	4632      	mov	r2, r6
 8003d10:	4620      	mov	r0, r4
 8003d12:	f000 fce1 	bl	80046d8 <__pow5mult>
 8003d16:	4652      	mov	r2, sl
 8003d18:	4601      	mov	r1, r0
 8003d1a:	4607      	mov	r7, r0
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	f000 fc31 	bl	8004584 <__multiply>
 8003d22:	4651      	mov	r1, sl
 8003d24:	4680      	mov	r8, r0
 8003d26:	4620      	mov	r0, r4
 8003d28:	f000 fb60 	bl	80043ec <_Bfree>
 8003d2c:	46c2      	mov	sl, r8
 8003d2e:	9b08      	ldr	r3, [sp, #32]
 8003d30:	1b9a      	subs	r2, r3, r6
 8003d32:	d004      	beq.n	8003d3e <_dtoa_r+0x7b6>
 8003d34:	4651      	mov	r1, sl
 8003d36:	4620      	mov	r0, r4
 8003d38:	f000 fcce 	bl	80046d8 <__pow5mult>
 8003d3c:	4682      	mov	sl, r0
 8003d3e:	2101      	movs	r1, #1
 8003d40:	4620      	mov	r0, r4
 8003d42:	f000 fc09 	bl	8004558 <__i2b>
 8003d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	4606      	mov	r6, r0
 8003d4c:	f340 8081 	ble.w	8003e52 <_dtoa_r+0x8ca>
 8003d50:	461a      	mov	r2, r3
 8003d52:	4601      	mov	r1, r0
 8003d54:	4620      	mov	r0, r4
 8003d56:	f000 fcbf 	bl	80046d8 <__pow5mult>
 8003d5a:	9b07      	ldr	r3, [sp, #28]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	4606      	mov	r6, r0
 8003d60:	dd7a      	ble.n	8003e58 <_dtoa_r+0x8d0>
 8003d62:	f04f 0800 	mov.w	r8, #0
 8003d66:	6933      	ldr	r3, [r6, #16]
 8003d68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003d6c:	6918      	ldr	r0, [r3, #16]
 8003d6e:	f000 fba5 	bl	80044bc <__hi0bits>
 8003d72:	f1c0 0020 	rsb	r0, r0, #32
 8003d76:	9b06      	ldr	r3, [sp, #24]
 8003d78:	4418      	add	r0, r3
 8003d7a:	f010 001f 	ands.w	r0, r0, #31
 8003d7e:	f000 8094 	beq.w	8003eaa <_dtoa_r+0x922>
 8003d82:	f1c0 0320 	rsb	r3, r0, #32
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	f340 8085 	ble.w	8003e96 <_dtoa_r+0x90e>
 8003d8c:	9b05      	ldr	r3, [sp, #20]
 8003d8e:	f1c0 001c 	rsb	r0, r0, #28
 8003d92:	4403      	add	r3, r0
 8003d94:	9305      	str	r3, [sp, #20]
 8003d96:	9b06      	ldr	r3, [sp, #24]
 8003d98:	4403      	add	r3, r0
 8003d9a:	4405      	add	r5, r0
 8003d9c:	9306      	str	r3, [sp, #24]
 8003d9e:	9b05      	ldr	r3, [sp, #20]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	dd05      	ble.n	8003db0 <_dtoa_r+0x828>
 8003da4:	4651      	mov	r1, sl
 8003da6:	461a      	mov	r2, r3
 8003da8:	4620      	mov	r0, r4
 8003daa:	f000 fcef 	bl	800478c <__lshift>
 8003dae:	4682      	mov	sl, r0
 8003db0:	9b06      	ldr	r3, [sp, #24]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	dd05      	ble.n	8003dc2 <_dtoa_r+0x83a>
 8003db6:	4631      	mov	r1, r6
 8003db8:	461a      	mov	r2, r3
 8003dba:	4620      	mov	r0, r4
 8003dbc:	f000 fce6 	bl	800478c <__lshift>
 8003dc0:	4606      	mov	r6, r0
 8003dc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d072      	beq.n	8003eae <_dtoa_r+0x926>
 8003dc8:	4631      	mov	r1, r6
 8003dca:	4650      	mov	r0, sl
 8003dcc:	f000 fd4a 	bl	8004864 <__mcmp>
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	da6c      	bge.n	8003eae <_dtoa_r+0x926>
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	4651      	mov	r1, sl
 8003dd8:	220a      	movs	r2, #10
 8003dda:	4620      	mov	r0, r4
 8003ddc:	f000 fb28 	bl	8004430 <__multadd>
 8003de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003de2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003de6:	4682      	mov	sl, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 81b0 	beq.w	800414e <_dtoa_r+0xbc6>
 8003dee:	2300      	movs	r3, #0
 8003df0:	4639      	mov	r1, r7
 8003df2:	220a      	movs	r2, #10
 8003df4:	4620      	mov	r0, r4
 8003df6:	f000 fb1b 	bl	8004430 <__multadd>
 8003dfa:	9b01      	ldr	r3, [sp, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	4607      	mov	r7, r0
 8003e00:	f300 8096 	bgt.w	8003f30 <_dtoa_r+0x9a8>
 8003e04:	9b07      	ldr	r3, [sp, #28]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	dc59      	bgt.n	8003ebe <_dtoa_r+0x936>
 8003e0a:	e091      	b.n	8003f30 <_dtoa_r+0x9a8>
 8003e0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003e0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003e12:	e758      	b.n	8003cc6 <_dtoa_r+0x73e>
 8003e14:	9b04      	ldr	r3, [sp, #16]
 8003e16:	1e5e      	subs	r6, r3, #1
 8003e18:	9b08      	ldr	r3, [sp, #32]
 8003e1a:	42b3      	cmp	r3, r6
 8003e1c:	bfbf      	itttt	lt
 8003e1e:	9b08      	ldrlt	r3, [sp, #32]
 8003e20:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8003e22:	9608      	strlt	r6, [sp, #32]
 8003e24:	1af3      	sublt	r3, r6, r3
 8003e26:	bfb4      	ite	lt
 8003e28:	18d2      	addlt	r2, r2, r3
 8003e2a:	1b9e      	subge	r6, r3, r6
 8003e2c:	9b04      	ldr	r3, [sp, #16]
 8003e2e:	bfbc      	itt	lt
 8003e30:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8003e32:	2600      	movlt	r6, #0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	bfb7      	itett	lt
 8003e38:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8003e3c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8003e40:	1a9d      	sublt	r5, r3, r2
 8003e42:	2300      	movlt	r3, #0
 8003e44:	e741      	b.n	8003cca <_dtoa_r+0x742>
 8003e46:	9e08      	ldr	r6, [sp, #32]
 8003e48:	9d05      	ldr	r5, [sp, #20]
 8003e4a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003e4c:	e748      	b.n	8003ce0 <_dtoa_r+0x758>
 8003e4e:	9a08      	ldr	r2, [sp, #32]
 8003e50:	e770      	b.n	8003d34 <_dtoa_r+0x7ac>
 8003e52:	9b07      	ldr	r3, [sp, #28]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	dc19      	bgt.n	8003e8c <_dtoa_r+0x904>
 8003e58:	9b02      	ldr	r3, [sp, #8]
 8003e5a:	b9bb      	cbnz	r3, 8003e8c <_dtoa_r+0x904>
 8003e5c:	9b03      	ldr	r3, [sp, #12]
 8003e5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e62:	b99b      	cbnz	r3, 8003e8c <_dtoa_r+0x904>
 8003e64:	9b03      	ldr	r3, [sp, #12]
 8003e66:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e6a:	0d1b      	lsrs	r3, r3, #20
 8003e6c:	051b      	lsls	r3, r3, #20
 8003e6e:	b183      	cbz	r3, 8003e92 <_dtoa_r+0x90a>
 8003e70:	9b05      	ldr	r3, [sp, #20]
 8003e72:	3301      	adds	r3, #1
 8003e74:	9305      	str	r3, [sp, #20]
 8003e76:	9b06      	ldr	r3, [sp, #24]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	9306      	str	r3, [sp, #24]
 8003e7c:	f04f 0801 	mov.w	r8, #1
 8003e80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f47f af6f 	bne.w	8003d66 <_dtoa_r+0x7de>
 8003e88:	2001      	movs	r0, #1
 8003e8a:	e774      	b.n	8003d76 <_dtoa_r+0x7ee>
 8003e8c:	f04f 0800 	mov.w	r8, #0
 8003e90:	e7f6      	b.n	8003e80 <_dtoa_r+0x8f8>
 8003e92:	4698      	mov	r8, r3
 8003e94:	e7f4      	b.n	8003e80 <_dtoa_r+0x8f8>
 8003e96:	d082      	beq.n	8003d9e <_dtoa_r+0x816>
 8003e98:	9a05      	ldr	r2, [sp, #20]
 8003e9a:	331c      	adds	r3, #28
 8003e9c:	441a      	add	r2, r3
 8003e9e:	9205      	str	r2, [sp, #20]
 8003ea0:	9a06      	ldr	r2, [sp, #24]
 8003ea2:	441a      	add	r2, r3
 8003ea4:	441d      	add	r5, r3
 8003ea6:	9206      	str	r2, [sp, #24]
 8003ea8:	e779      	b.n	8003d9e <_dtoa_r+0x816>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	e7f4      	b.n	8003e98 <_dtoa_r+0x910>
 8003eae:	9b04      	ldr	r3, [sp, #16]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	dc37      	bgt.n	8003f24 <_dtoa_r+0x99c>
 8003eb4:	9b07      	ldr	r3, [sp, #28]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	dd34      	ble.n	8003f24 <_dtoa_r+0x99c>
 8003eba:	9b04      	ldr	r3, [sp, #16]
 8003ebc:	9301      	str	r3, [sp, #4]
 8003ebe:	9b01      	ldr	r3, [sp, #4]
 8003ec0:	b963      	cbnz	r3, 8003edc <_dtoa_r+0x954>
 8003ec2:	4631      	mov	r1, r6
 8003ec4:	2205      	movs	r2, #5
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	f000 fab2 	bl	8004430 <__multadd>
 8003ecc:	4601      	mov	r1, r0
 8003ece:	4606      	mov	r6, r0
 8003ed0:	4650      	mov	r0, sl
 8003ed2:	f000 fcc7 	bl	8004864 <__mcmp>
 8003ed6:	2800      	cmp	r0, #0
 8003ed8:	f73f adbb 	bgt.w	8003a52 <_dtoa_r+0x4ca>
 8003edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ede:	9d00      	ldr	r5, [sp, #0]
 8003ee0:	ea6f 0b03 	mvn.w	fp, r3
 8003ee4:	f04f 0800 	mov.w	r8, #0
 8003ee8:	4631      	mov	r1, r6
 8003eea:	4620      	mov	r0, r4
 8003eec:	f000 fa7e 	bl	80043ec <_Bfree>
 8003ef0:	2f00      	cmp	r7, #0
 8003ef2:	f43f aeab 	beq.w	8003c4c <_dtoa_r+0x6c4>
 8003ef6:	f1b8 0f00 	cmp.w	r8, #0
 8003efa:	d005      	beq.n	8003f08 <_dtoa_r+0x980>
 8003efc:	45b8      	cmp	r8, r7
 8003efe:	d003      	beq.n	8003f08 <_dtoa_r+0x980>
 8003f00:	4641      	mov	r1, r8
 8003f02:	4620      	mov	r0, r4
 8003f04:	f000 fa72 	bl	80043ec <_Bfree>
 8003f08:	4639      	mov	r1, r7
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	f000 fa6e 	bl	80043ec <_Bfree>
 8003f10:	e69c      	b.n	8003c4c <_dtoa_r+0x6c4>
 8003f12:	2600      	movs	r6, #0
 8003f14:	4637      	mov	r7, r6
 8003f16:	e7e1      	b.n	8003edc <_dtoa_r+0x954>
 8003f18:	46bb      	mov	fp, r7
 8003f1a:	4637      	mov	r7, r6
 8003f1c:	e599      	b.n	8003a52 <_dtoa_r+0x4ca>
 8003f1e:	bf00      	nop
 8003f20:	40240000 	.word	0x40240000
 8003f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 80c8 	beq.w	80040bc <_dtoa_r+0xb34>
 8003f2c:	9b04      	ldr	r3, [sp, #16]
 8003f2e:	9301      	str	r3, [sp, #4]
 8003f30:	2d00      	cmp	r5, #0
 8003f32:	dd05      	ble.n	8003f40 <_dtoa_r+0x9b8>
 8003f34:	4639      	mov	r1, r7
 8003f36:	462a      	mov	r2, r5
 8003f38:	4620      	mov	r0, r4
 8003f3a:	f000 fc27 	bl	800478c <__lshift>
 8003f3e:	4607      	mov	r7, r0
 8003f40:	f1b8 0f00 	cmp.w	r8, #0
 8003f44:	d05b      	beq.n	8003ffe <_dtoa_r+0xa76>
 8003f46:	6879      	ldr	r1, [r7, #4]
 8003f48:	4620      	mov	r0, r4
 8003f4a:	f000 fa0f 	bl	800436c <_Balloc>
 8003f4e:	4605      	mov	r5, r0
 8003f50:	b928      	cbnz	r0, 8003f5e <_dtoa_r+0x9d6>
 8003f52:	4b83      	ldr	r3, [pc, #524]	; (8004160 <_dtoa_r+0xbd8>)
 8003f54:	4602      	mov	r2, r0
 8003f56:	f240 21ef 	movw	r1, #751	; 0x2ef
 8003f5a:	f7ff bb2e 	b.w	80035ba <_dtoa_r+0x32>
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	3202      	adds	r2, #2
 8003f62:	0092      	lsls	r2, r2, #2
 8003f64:	f107 010c 	add.w	r1, r7, #12
 8003f68:	300c      	adds	r0, #12
 8003f6a:	f001 f813 	bl	8004f94 <memcpy>
 8003f6e:	2201      	movs	r2, #1
 8003f70:	4629      	mov	r1, r5
 8003f72:	4620      	mov	r0, r4
 8003f74:	f000 fc0a 	bl	800478c <__lshift>
 8003f78:	9b00      	ldr	r3, [sp, #0]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	9304      	str	r3, [sp, #16]
 8003f7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f82:	4413      	add	r3, r2
 8003f84:	9308      	str	r3, [sp, #32]
 8003f86:	9b02      	ldr	r3, [sp, #8]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	46b8      	mov	r8, r7
 8003f8e:	9306      	str	r3, [sp, #24]
 8003f90:	4607      	mov	r7, r0
 8003f92:	9b04      	ldr	r3, [sp, #16]
 8003f94:	4631      	mov	r1, r6
 8003f96:	3b01      	subs	r3, #1
 8003f98:	4650      	mov	r0, sl
 8003f9a:	9301      	str	r3, [sp, #4]
 8003f9c:	f7ff fa6b 	bl	8003476 <quorem>
 8003fa0:	4641      	mov	r1, r8
 8003fa2:	9002      	str	r0, [sp, #8]
 8003fa4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003fa8:	4650      	mov	r0, sl
 8003faa:	f000 fc5b 	bl	8004864 <__mcmp>
 8003fae:	463a      	mov	r2, r7
 8003fb0:	9005      	str	r0, [sp, #20]
 8003fb2:	4631      	mov	r1, r6
 8003fb4:	4620      	mov	r0, r4
 8003fb6:	f000 fc71 	bl	800489c <__mdiff>
 8003fba:	68c2      	ldr	r2, [r0, #12]
 8003fbc:	4605      	mov	r5, r0
 8003fbe:	bb02      	cbnz	r2, 8004002 <_dtoa_r+0xa7a>
 8003fc0:	4601      	mov	r1, r0
 8003fc2:	4650      	mov	r0, sl
 8003fc4:	f000 fc4e 	bl	8004864 <__mcmp>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	4629      	mov	r1, r5
 8003fcc:	4620      	mov	r0, r4
 8003fce:	9209      	str	r2, [sp, #36]	; 0x24
 8003fd0:	f000 fa0c 	bl	80043ec <_Bfree>
 8003fd4:	9b07      	ldr	r3, [sp, #28]
 8003fd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fd8:	9d04      	ldr	r5, [sp, #16]
 8003fda:	ea43 0102 	orr.w	r1, r3, r2
 8003fde:	9b06      	ldr	r3, [sp, #24]
 8003fe0:	4319      	orrs	r1, r3
 8003fe2:	d110      	bne.n	8004006 <_dtoa_r+0xa7e>
 8003fe4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003fe8:	d029      	beq.n	800403e <_dtoa_r+0xab6>
 8003fea:	9b05      	ldr	r3, [sp, #20]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	dd02      	ble.n	8003ff6 <_dtoa_r+0xa6e>
 8003ff0:	9b02      	ldr	r3, [sp, #8]
 8003ff2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8003ff6:	9b01      	ldr	r3, [sp, #4]
 8003ff8:	f883 9000 	strb.w	r9, [r3]
 8003ffc:	e774      	b.n	8003ee8 <_dtoa_r+0x960>
 8003ffe:	4638      	mov	r0, r7
 8004000:	e7ba      	b.n	8003f78 <_dtoa_r+0x9f0>
 8004002:	2201      	movs	r2, #1
 8004004:	e7e1      	b.n	8003fca <_dtoa_r+0xa42>
 8004006:	9b05      	ldr	r3, [sp, #20]
 8004008:	2b00      	cmp	r3, #0
 800400a:	db04      	blt.n	8004016 <_dtoa_r+0xa8e>
 800400c:	9907      	ldr	r1, [sp, #28]
 800400e:	430b      	orrs	r3, r1
 8004010:	9906      	ldr	r1, [sp, #24]
 8004012:	430b      	orrs	r3, r1
 8004014:	d120      	bne.n	8004058 <_dtoa_r+0xad0>
 8004016:	2a00      	cmp	r2, #0
 8004018:	dded      	ble.n	8003ff6 <_dtoa_r+0xa6e>
 800401a:	4651      	mov	r1, sl
 800401c:	2201      	movs	r2, #1
 800401e:	4620      	mov	r0, r4
 8004020:	f000 fbb4 	bl	800478c <__lshift>
 8004024:	4631      	mov	r1, r6
 8004026:	4682      	mov	sl, r0
 8004028:	f000 fc1c 	bl	8004864 <__mcmp>
 800402c:	2800      	cmp	r0, #0
 800402e:	dc03      	bgt.n	8004038 <_dtoa_r+0xab0>
 8004030:	d1e1      	bne.n	8003ff6 <_dtoa_r+0xa6e>
 8004032:	f019 0f01 	tst.w	r9, #1
 8004036:	d0de      	beq.n	8003ff6 <_dtoa_r+0xa6e>
 8004038:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800403c:	d1d8      	bne.n	8003ff0 <_dtoa_r+0xa68>
 800403e:	9a01      	ldr	r2, [sp, #4]
 8004040:	2339      	movs	r3, #57	; 0x39
 8004042:	7013      	strb	r3, [r2, #0]
 8004044:	462b      	mov	r3, r5
 8004046:	461d      	mov	r5, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800404e:	2a39      	cmp	r2, #57	; 0x39
 8004050:	d06c      	beq.n	800412c <_dtoa_r+0xba4>
 8004052:	3201      	adds	r2, #1
 8004054:	701a      	strb	r2, [r3, #0]
 8004056:	e747      	b.n	8003ee8 <_dtoa_r+0x960>
 8004058:	2a00      	cmp	r2, #0
 800405a:	dd07      	ble.n	800406c <_dtoa_r+0xae4>
 800405c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004060:	d0ed      	beq.n	800403e <_dtoa_r+0xab6>
 8004062:	9a01      	ldr	r2, [sp, #4]
 8004064:	f109 0301 	add.w	r3, r9, #1
 8004068:	7013      	strb	r3, [r2, #0]
 800406a:	e73d      	b.n	8003ee8 <_dtoa_r+0x960>
 800406c:	9b04      	ldr	r3, [sp, #16]
 800406e:	9a08      	ldr	r2, [sp, #32]
 8004070:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004074:	4293      	cmp	r3, r2
 8004076:	d043      	beq.n	8004100 <_dtoa_r+0xb78>
 8004078:	4651      	mov	r1, sl
 800407a:	2300      	movs	r3, #0
 800407c:	220a      	movs	r2, #10
 800407e:	4620      	mov	r0, r4
 8004080:	f000 f9d6 	bl	8004430 <__multadd>
 8004084:	45b8      	cmp	r8, r7
 8004086:	4682      	mov	sl, r0
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	f04f 020a 	mov.w	r2, #10
 8004090:	4641      	mov	r1, r8
 8004092:	4620      	mov	r0, r4
 8004094:	d107      	bne.n	80040a6 <_dtoa_r+0xb1e>
 8004096:	f000 f9cb 	bl	8004430 <__multadd>
 800409a:	4680      	mov	r8, r0
 800409c:	4607      	mov	r7, r0
 800409e:	9b04      	ldr	r3, [sp, #16]
 80040a0:	3301      	adds	r3, #1
 80040a2:	9304      	str	r3, [sp, #16]
 80040a4:	e775      	b.n	8003f92 <_dtoa_r+0xa0a>
 80040a6:	f000 f9c3 	bl	8004430 <__multadd>
 80040aa:	4639      	mov	r1, r7
 80040ac:	4680      	mov	r8, r0
 80040ae:	2300      	movs	r3, #0
 80040b0:	220a      	movs	r2, #10
 80040b2:	4620      	mov	r0, r4
 80040b4:	f000 f9bc 	bl	8004430 <__multadd>
 80040b8:	4607      	mov	r7, r0
 80040ba:	e7f0      	b.n	800409e <_dtoa_r+0xb16>
 80040bc:	9b04      	ldr	r3, [sp, #16]
 80040be:	9301      	str	r3, [sp, #4]
 80040c0:	9d00      	ldr	r5, [sp, #0]
 80040c2:	4631      	mov	r1, r6
 80040c4:	4650      	mov	r0, sl
 80040c6:	f7ff f9d6 	bl	8003476 <quorem>
 80040ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80040ce:	9b00      	ldr	r3, [sp, #0]
 80040d0:	f805 9b01 	strb.w	r9, [r5], #1
 80040d4:	1aea      	subs	r2, r5, r3
 80040d6:	9b01      	ldr	r3, [sp, #4]
 80040d8:	4293      	cmp	r3, r2
 80040da:	dd07      	ble.n	80040ec <_dtoa_r+0xb64>
 80040dc:	4651      	mov	r1, sl
 80040de:	2300      	movs	r3, #0
 80040e0:	220a      	movs	r2, #10
 80040e2:	4620      	mov	r0, r4
 80040e4:	f000 f9a4 	bl	8004430 <__multadd>
 80040e8:	4682      	mov	sl, r0
 80040ea:	e7ea      	b.n	80040c2 <_dtoa_r+0xb3a>
 80040ec:	9b01      	ldr	r3, [sp, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bfc8      	it	gt
 80040f2:	461d      	movgt	r5, r3
 80040f4:	9b00      	ldr	r3, [sp, #0]
 80040f6:	bfd8      	it	le
 80040f8:	2501      	movle	r5, #1
 80040fa:	441d      	add	r5, r3
 80040fc:	f04f 0800 	mov.w	r8, #0
 8004100:	4651      	mov	r1, sl
 8004102:	2201      	movs	r2, #1
 8004104:	4620      	mov	r0, r4
 8004106:	f000 fb41 	bl	800478c <__lshift>
 800410a:	4631      	mov	r1, r6
 800410c:	4682      	mov	sl, r0
 800410e:	f000 fba9 	bl	8004864 <__mcmp>
 8004112:	2800      	cmp	r0, #0
 8004114:	dc96      	bgt.n	8004044 <_dtoa_r+0xabc>
 8004116:	d102      	bne.n	800411e <_dtoa_r+0xb96>
 8004118:	f019 0f01 	tst.w	r9, #1
 800411c:	d192      	bne.n	8004044 <_dtoa_r+0xabc>
 800411e:	462b      	mov	r3, r5
 8004120:	461d      	mov	r5, r3
 8004122:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004126:	2a30      	cmp	r2, #48	; 0x30
 8004128:	d0fa      	beq.n	8004120 <_dtoa_r+0xb98>
 800412a:	e6dd      	b.n	8003ee8 <_dtoa_r+0x960>
 800412c:	9a00      	ldr	r2, [sp, #0]
 800412e:	429a      	cmp	r2, r3
 8004130:	d189      	bne.n	8004046 <_dtoa_r+0xabe>
 8004132:	f10b 0b01 	add.w	fp, fp, #1
 8004136:	2331      	movs	r3, #49	; 0x31
 8004138:	e796      	b.n	8004068 <_dtoa_r+0xae0>
 800413a:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <_dtoa_r+0xbdc>)
 800413c:	f7ff ba99 	b.w	8003672 <_dtoa_r+0xea>
 8004140:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004142:	2b00      	cmp	r3, #0
 8004144:	f47f aa6d 	bne.w	8003622 <_dtoa_r+0x9a>
 8004148:	4b07      	ldr	r3, [pc, #28]	; (8004168 <_dtoa_r+0xbe0>)
 800414a:	f7ff ba92 	b.w	8003672 <_dtoa_r+0xea>
 800414e:	9b01      	ldr	r3, [sp, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	dcb5      	bgt.n	80040c0 <_dtoa_r+0xb38>
 8004154:	9b07      	ldr	r3, [sp, #28]
 8004156:	2b02      	cmp	r3, #2
 8004158:	f73f aeb1 	bgt.w	8003ebe <_dtoa_r+0x936>
 800415c:	e7b0      	b.n	80040c0 <_dtoa_r+0xb38>
 800415e:	bf00      	nop
 8004160:	08005391 	.word	0x08005391
 8004164:	080052f1 	.word	0x080052f1
 8004168:	08005315 	.word	0x08005315

0800416c <_free_r>:
 800416c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800416e:	2900      	cmp	r1, #0
 8004170:	d044      	beq.n	80041fc <_free_r+0x90>
 8004172:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004176:	9001      	str	r0, [sp, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	f1a1 0404 	sub.w	r4, r1, #4
 800417e:	bfb8      	it	lt
 8004180:	18e4      	addlt	r4, r4, r3
 8004182:	f000 f8e7 	bl	8004354 <__malloc_lock>
 8004186:	4a1e      	ldr	r2, [pc, #120]	; (8004200 <_free_r+0x94>)
 8004188:	9801      	ldr	r0, [sp, #4]
 800418a:	6813      	ldr	r3, [r2, #0]
 800418c:	b933      	cbnz	r3, 800419c <_free_r+0x30>
 800418e:	6063      	str	r3, [r4, #4]
 8004190:	6014      	str	r4, [r2, #0]
 8004192:	b003      	add	sp, #12
 8004194:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004198:	f000 b8e2 	b.w	8004360 <__malloc_unlock>
 800419c:	42a3      	cmp	r3, r4
 800419e:	d908      	bls.n	80041b2 <_free_r+0x46>
 80041a0:	6825      	ldr	r5, [r4, #0]
 80041a2:	1961      	adds	r1, r4, r5
 80041a4:	428b      	cmp	r3, r1
 80041a6:	bf01      	itttt	eq
 80041a8:	6819      	ldreq	r1, [r3, #0]
 80041aa:	685b      	ldreq	r3, [r3, #4]
 80041ac:	1949      	addeq	r1, r1, r5
 80041ae:	6021      	streq	r1, [r4, #0]
 80041b0:	e7ed      	b.n	800418e <_free_r+0x22>
 80041b2:	461a      	mov	r2, r3
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	b10b      	cbz	r3, 80041bc <_free_r+0x50>
 80041b8:	42a3      	cmp	r3, r4
 80041ba:	d9fa      	bls.n	80041b2 <_free_r+0x46>
 80041bc:	6811      	ldr	r1, [r2, #0]
 80041be:	1855      	adds	r5, r2, r1
 80041c0:	42a5      	cmp	r5, r4
 80041c2:	d10b      	bne.n	80041dc <_free_r+0x70>
 80041c4:	6824      	ldr	r4, [r4, #0]
 80041c6:	4421      	add	r1, r4
 80041c8:	1854      	adds	r4, r2, r1
 80041ca:	42a3      	cmp	r3, r4
 80041cc:	6011      	str	r1, [r2, #0]
 80041ce:	d1e0      	bne.n	8004192 <_free_r+0x26>
 80041d0:	681c      	ldr	r4, [r3, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	6053      	str	r3, [r2, #4]
 80041d6:	440c      	add	r4, r1
 80041d8:	6014      	str	r4, [r2, #0]
 80041da:	e7da      	b.n	8004192 <_free_r+0x26>
 80041dc:	d902      	bls.n	80041e4 <_free_r+0x78>
 80041de:	230c      	movs	r3, #12
 80041e0:	6003      	str	r3, [r0, #0]
 80041e2:	e7d6      	b.n	8004192 <_free_r+0x26>
 80041e4:	6825      	ldr	r5, [r4, #0]
 80041e6:	1961      	adds	r1, r4, r5
 80041e8:	428b      	cmp	r3, r1
 80041ea:	bf04      	itt	eq
 80041ec:	6819      	ldreq	r1, [r3, #0]
 80041ee:	685b      	ldreq	r3, [r3, #4]
 80041f0:	6063      	str	r3, [r4, #4]
 80041f2:	bf04      	itt	eq
 80041f4:	1949      	addeq	r1, r1, r5
 80041f6:	6021      	streq	r1, [r4, #0]
 80041f8:	6054      	str	r4, [r2, #4]
 80041fa:	e7ca      	b.n	8004192 <_free_r+0x26>
 80041fc:	b003      	add	sp, #12
 80041fe:	bd30      	pop	{r4, r5, pc}
 8004200:	20000338 	.word	0x20000338

08004204 <malloc>:
 8004204:	4b02      	ldr	r3, [pc, #8]	; (8004210 <malloc+0xc>)
 8004206:	4601      	mov	r1, r0
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	f000 b823 	b.w	8004254 <_malloc_r>
 800420e:	bf00      	nop
 8004210:	20000060 	.word	0x20000060

08004214 <sbrk_aligned>:
 8004214:	b570      	push	{r4, r5, r6, lr}
 8004216:	4e0e      	ldr	r6, [pc, #56]	; (8004250 <sbrk_aligned+0x3c>)
 8004218:	460c      	mov	r4, r1
 800421a:	6831      	ldr	r1, [r6, #0]
 800421c:	4605      	mov	r5, r0
 800421e:	b911      	cbnz	r1, 8004226 <sbrk_aligned+0x12>
 8004220:	f000 fea8 	bl	8004f74 <_sbrk_r>
 8004224:	6030      	str	r0, [r6, #0]
 8004226:	4621      	mov	r1, r4
 8004228:	4628      	mov	r0, r5
 800422a:	f000 fea3 	bl	8004f74 <_sbrk_r>
 800422e:	1c43      	adds	r3, r0, #1
 8004230:	d00a      	beq.n	8004248 <sbrk_aligned+0x34>
 8004232:	1cc4      	adds	r4, r0, #3
 8004234:	f024 0403 	bic.w	r4, r4, #3
 8004238:	42a0      	cmp	r0, r4
 800423a:	d007      	beq.n	800424c <sbrk_aligned+0x38>
 800423c:	1a21      	subs	r1, r4, r0
 800423e:	4628      	mov	r0, r5
 8004240:	f000 fe98 	bl	8004f74 <_sbrk_r>
 8004244:	3001      	adds	r0, #1
 8004246:	d101      	bne.n	800424c <sbrk_aligned+0x38>
 8004248:	f04f 34ff 	mov.w	r4, #4294967295
 800424c:	4620      	mov	r0, r4
 800424e:	bd70      	pop	{r4, r5, r6, pc}
 8004250:	2000033c 	.word	0x2000033c

08004254 <_malloc_r>:
 8004254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004258:	1ccd      	adds	r5, r1, #3
 800425a:	f025 0503 	bic.w	r5, r5, #3
 800425e:	3508      	adds	r5, #8
 8004260:	2d0c      	cmp	r5, #12
 8004262:	bf38      	it	cc
 8004264:	250c      	movcc	r5, #12
 8004266:	2d00      	cmp	r5, #0
 8004268:	4607      	mov	r7, r0
 800426a:	db01      	blt.n	8004270 <_malloc_r+0x1c>
 800426c:	42a9      	cmp	r1, r5
 800426e:	d905      	bls.n	800427c <_malloc_r+0x28>
 8004270:	230c      	movs	r3, #12
 8004272:	603b      	str	r3, [r7, #0]
 8004274:	2600      	movs	r6, #0
 8004276:	4630      	mov	r0, r6
 8004278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800427c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004350 <_malloc_r+0xfc>
 8004280:	f000 f868 	bl	8004354 <__malloc_lock>
 8004284:	f8d8 3000 	ldr.w	r3, [r8]
 8004288:	461c      	mov	r4, r3
 800428a:	bb5c      	cbnz	r4, 80042e4 <_malloc_r+0x90>
 800428c:	4629      	mov	r1, r5
 800428e:	4638      	mov	r0, r7
 8004290:	f7ff ffc0 	bl	8004214 <sbrk_aligned>
 8004294:	1c43      	adds	r3, r0, #1
 8004296:	4604      	mov	r4, r0
 8004298:	d155      	bne.n	8004346 <_malloc_r+0xf2>
 800429a:	f8d8 4000 	ldr.w	r4, [r8]
 800429e:	4626      	mov	r6, r4
 80042a0:	2e00      	cmp	r6, #0
 80042a2:	d145      	bne.n	8004330 <_malloc_r+0xdc>
 80042a4:	2c00      	cmp	r4, #0
 80042a6:	d048      	beq.n	800433a <_malloc_r+0xe6>
 80042a8:	6823      	ldr	r3, [r4, #0]
 80042aa:	4631      	mov	r1, r6
 80042ac:	4638      	mov	r0, r7
 80042ae:	eb04 0903 	add.w	r9, r4, r3
 80042b2:	f000 fe5f 	bl	8004f74 <_sbrk_r>
 80042b6:	4581      	cmp	r9, r0
 80042b8:	d13f      	bne.n	800433a <_malloc_r+0xe6>
 80042ba:	6821      	ldr	r1, [r4, #0]
 80042bc:	1a6d      	subs	r5, r5, r1
 80042be:	4629      	mov	r1, r5
 80042c0:	4638      	mov	r0, r7
 80042c2:	f7ff ffa7 	bl	8004214 <sbrk_aligned>
 80042c6:	3001      	adds	r0, #1
 80042c8:	d037      	beq.n	800433a <_malloc_r+0xe6>
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	442b      	add	r3, r5
 80042ce:	6023      	str	r3, [r4, #0]
 80042d0:	f8d8 3000 	ldr.w	r3, [r8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d038      	beq.n	800434a <_malloc_r+0xf6>
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	42a2      	cmp	r2, r4
 80042dc:	d12b      	bne.n	8004336 <_malloc_r+0xe2>
 80042de:	2200      	movs	r2, #0
 80042e0:	605a      	str	r2, [r3, #4]
 80042e2:	e00f      	b.n	8004304 <_malloc_r+0xb0>
 80042e4:	6822      	ldr	r2, [r4, #0]
 80042e6:	1b52      	subs	r2, r2, r5
 80042e8:	d41f      	bmi.n	800432a <_malloc_r+0xd6>
 80042ea:	2a0b      	cmp	r2, #11
 80042ec:	d917      	bls.n	800431e <_malloc_r+0xca>
 80042ee:	1961      	adds	r1, r4, r5
 80042f0:	42a3      	cmp	r3, r4
 80042f2:	6025      	str	r5, [r4, #0]
 80042f4:	bf18      	it	ne
 80042f6:	6059      	strne	r1, [r3, #4]
 80042f8:	6863      	ldr	r3, [r4, #4]
 80042fa:	bf08      	it	eq
 80042fc:	f8c8 1000 	streq.w	r1, [r8]
 8004300:	5162      	str	r2, [r4, r5]
 8004302:	604b      	str	r3, [r1, #4]
 8004304:	4638      	mov	r0, r7
 8004306:	f104 060b 	add.w	r6, r4, #11
 800430a:	f000 f829 	bl	8004360 <__malloc_unlock>
 800430e:	f026 0607 	bic.w	r6, r6, #7
 8004312:	1d23      	adds	r3, r4, #4
 8004314:	1af2      	subs	r2, r6, r3
 8004316:	d0ae      	beq.n	8004276 <_malloc_r+0x22>
 8004318:	1b9b      	subs	r3, r3, r6
 800431a:	50a3      	str	r3, [r4, r2]
 800431c:	e7ab      	b.n	8004276 <_malloc_r+0x22>
 800431e:	42a3      	cmp	r3, r4
 8004320:	6862      	ldr	r2, [r4, #4]
 8004322:	d1dd      	bne.n	80042e0 <_malloc_r+0x8c>
 8004324:	f8c8 2000 	str.w	r2, [r8]
 8004328:	e7ec      	b.n	8004304 <_malloc_r+0xb0>
 800432a:	4623      	mov	r3, r4
 800432c:	6864      	ldr	r4, [r4, #4]
 800432e:	e7ac      	b.n	800428a <_malloc_r+0x36>
 8004330:	4634      	mov	r4, r6
 8004332:	6876      	ldr	r6, [r6, #4]
 8004334:	e7b4      	b.n	80042a0 <_malloc_r+0x4c>
 8004336:	4613      	mov	r3, r2
 8004338:	e7cc      	b.n	80042d4 <_malloc_r+0x80>
 800433a:	230c      	movs	r3, #12
 800433c:	603b      	str	r3, [r7, #0]
 800433e:	4638      	mov	r0, r7
 8004340:	f000 f80e 	bl	8004360 <__malloc_unlock>
 8004344:	e797      	b.n	8004276 <_malloc_r+0x22>
 8004346:	6025      	str	r5, [r4, #0]
 8004348:	e7dc      	b.n	8004304 <_malloc_r+0xb0>
 800434a:	605b      	str	r3, [r3, #4]
 800434c:	deff      	udf	#255	; 0xff
 800434e:	bf00      	nop
 8004350:	20000338 	.word	0x20000338

08004354 <__malloc_lock>:
 8004354:	4801      	ldr	r0, [pc, #4]	; (800435c <__malloc_lock+0x8>)
 8004356:	f7ff b88c 	b.w	8003472 <__retarget_lock_acquire_recursive>
 800435a:	bf00      	nop
 800435c:	20000334 	.word	0x20000334

08004360 <__malloc_unlock>:
 8004360:	4801      	ldr	r0, [pc, #4]	; (8004368 <__malloc_unlock+0x8>)
 8004362:	f7ff b887 	b.w	8003474 <__retarget_lock_release_recursive>
 8004366:	bf00      	nop
 8004368:	20000334 	.word	0x20000334

0800436c <_Balloc>:
 800436c:	b570      	push	{r4, r5, r6, lr}
 800436e:	69c6      	ldr	r6, [r0, #28]
 8004370:	4604      	mov	r4, r0
 8004372:	460d      	mov	r5, r1
 8004374:	b976      	cbnz	r6, 8004394 <_Balloc+0x28>
 8004376:	2010      	movs	r0, #16
 8004378:	f7ff ff44 	bl	8004204 <malloc>
 800437c:	4602      	mov	r2, r0
 800437e:	61e0      	str	r0, [r4, #28]
 8004380:	b920      	cbnz	r0, 800438c <_Balloc+0x20>
 8004382:	4b18      	ldr	r3, [pc, #96]	; (80043e4 <_Balloc+0x78>)
 8004384:	4818      	ldr	r0, [pc, #96]	; (80043e8 <_Balloc+0x7c>)
 8004386:	216b      	movs	r1, #107	; 0x6b
 8004388:	f000 fe12 	bl	8004fb0 <__assert_func>
 800438c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004390:	6006      	str	r6, [r0, #0]
 8004392:	60c6      	str	r6, [r0, #12]
 8004394:	69e6      	ldr	r6, [r4, #28]
 8004396:	68f3      	ldr	r3, [r6, #12]
 8004398:	b183      	cbz	r3, 80043bc <_Balloc+0x50>
 800439a:	69e3      	ldr	r3, [r4, #28]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80043a2:	b9b8      	cbnz	r0, 80043d4 <_Balloc+0x68>
 80043a4:	2101      	movs	r1, #1
 80043a6:	fa01 f605 	lsl.w	r6, r1, r5
 80043aa:	1d72      	adds	r2, r6, #5
 80043ac:	0092      	lsls	r2, r2, #2
 80043ae:	4620      	mov	r0, r4
 80043b0:	f000 fe1c 	bl	8004fec <_calloc_r>
 80043b4:	b160      	cbz	r0, 80043d0 <_Balloc+0x64>
 80043b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80043ba:	e00e      	b.n	80043da <_Balloc+0x6e>
 80043bc:	2221      	movs	r2, #33	; 0x21
 80043be:	2104      	movs	r1, #4
 80043c0:	4620      	mov	r0, r4
 80043c2:	f000 fe13 	bl	8004fec <_calloc_r>
 80043c6:	69e3      	ldr	r3, [r4, #28]
 80043c8:	60f0      	str	r0, [r6, #12]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e4      	bne.n	800439a <_Balloc+0x2e>
 80043d0:	2000      	movs	r0, #0
 80043d2:	bd70      	pop	{r4, r5, r6, pc}
 80043d4:	6802      	ldr	r2, [r0, #0]
 80043d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80043da:	2300      	movs	r3, #0
 80043dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80043e0:	e7f7      	b.n	80043d2 <_Balloc+0x66>
 80043e2:	bf00      	nop
 80043e4:	08005322 	.word	0x08005322
 80043e8:	080053a2 	.word	0x080053a2

080043ec <_Bfree>:
 80043ec:	b570      	push	{r4, r5, r6, lr}
 80043ee:	69c6      	ldr	r6, [r0, #28]
 80043f0:	4605      	mov	r5, r0
 80043f2:	460c      	mov	r4, r1
 80043f4:	b976      	cbnz	r6, 8004414 <_Bfree+0x28>
 80043f6:	2010      	movs	r0, #16
 80043f8:	f7ff ff04 	bl	8004204 <malloc>
 80043fc:	4602      	mov	r2, r0
 80043fe:	61e8      	str	r0, [r5, #28]
 8004400:	b920      	cbnz	r0, 800440c <_Bfree+0x20>
 8004402:	4b09      	ldr	r3, [pc, #36]	; (8004428 <_Bfree+0x3c>)
 8004404:	4809      	ldr	r0, [pc, #36]	; (800442c <_Bfree+0x40>)
 8004406:	218f      	movs	r1, #143	; 0x8f
 8004408:	f000 fdd2 	bl	8004fb0 <__assert_func>
 800440c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004410:	6006      	str	r6, [r0, #0]
 8004412:	60c6      	str	r6, [r0, #12]
 8004414:	b13c      	cbz	r4, 8004426 <_Bfree+0x3a>
 8004416:	69eb      	ldr	r3, [r5, #28]
 8004418:	6862      	ldr	r2, [r4, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004420:	6021      	str	r1, [r4, #0]
 8004422:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004426:	bd70      	pop	{r4, r5, r6, pc}
 8004428:	08005322 	.word	0x08005322
 800442c:	080053a2 	.word	0x080053a2

08004430 <__multadd>:
 8004430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004434:	690d      	ldr	r5, [r1, #16]
 8004436:	4607      	mov	r7, r0
 8004438:	460c      	mov	r4, r1
 800443a:	461e      	mov	r6, r3
 800443c:	f101 0c14 	add.w	ip, r1, #20
 8004440:	2000      	movs	r0, #0
 8004442:	f8dc 3000 	ldr.w	r3, [ip]
 8004446:	b299      	uxth	r1, r3
 8004448:	fb02 6101 	mla	r1, r2, r1, r6
 800444c:	0c1e      	lsrs	r6, r3, #16
 800444e:	0c0b      	lsrs	r3, r1, #16
 8004450:	fb02 3306 	mla	r3, r2, r6, r3
 8004454:	b289      	uxth	r1, r1
 8004456:	3001      	adds	r0, #1
 8004458:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800445c:	4285      	cmp	r5, r0
 800445e:	f84c 1b04 	str.w	r1, [ip], #4
 8004462:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004466:	dcec      	bgt.n	8004442 <__multadd+0x12>
 8004468:	b30e      	cbz	r6, 80044ae <__multadd+0x7e>
 800446a:	68a3      	ldr	r3, [r4, #8]
 800446c:	42ab      	cmp	r3, r5
 800446e:	dc19      	bgt.n	80044a4 <__multadd+0x74>
 8004470:	6861      	ldr	r1, [r4, #4]
 8004472:	4638      	mov	r0, r7
 8004474:	3101      	adds	r1, #1
 8004476:	f7ff ff79 	bl	800436c <_Balloc>
 800447a:	4680      	mov	r8, r0
 800447c:	b928      	cbnz	r0, 800448a <__multadd+0x5a>
 800447e:	4602      	mov	r2, r0
 8004480:	4b0c      	ldr	r3, [pc, #48]	; (80044b4 <__multadd+0x84>)
 8004482:	480d      	ldr	r0, [pc, #52]	; (80044b8 <__multadd+0x88>)
 8004484:	21ba      	movs	r1, #186	; 0xba
 8004486:	f000 fd93 	bl	8004fb0 <__assert_func>
 800448a:	6922      	ldr	r2, [r4, #16]
 800448c:	3202      	adds	r2, #2
 800448e:	f104 010c 	add.w	r1, r4, #12
 8004492:	0092      	lsls	r2, r2, #2
 8004494:	300c      	adds	r0, #12
 8004496:	f000 fd7d 	bl	8004f94 <memcpy>
 800449a:	4621      	mov	r1, r4
 800449c:	4638      	mov	r0, r7
 800449e:	f7ff ffa5 	bl	80043ec <_Bfree>
 80044a2:	4644      	mov	r4, r8
 80044a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80044a8:	3501      	adds	r5, #1
 80044aa:	615e      	str	r6, [r3, #20]
 80044ac:	6125      	str	r5, [r4, #16]
 80044ae:	4620      	mov	r0, r4
 80044b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044b4:	08005391 	.word	0x08005391
 80044b8:	080053a2 	.word	0x080053a2

080044bc <__hi0bits>:
 80044bc:	0c03      	lsrs	r3, r0, #16
 80044be:	041b      	lsls	r3, r3, #16
 80044c0:	b9d3      	cbnz	r3, 80044f8 <__hi0bits+0x3c>
 80044c2:	0400      	lsls	r0, r0, #16
 80044c4:	2310      	movs	r3, #16
 80044c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80044ca:	bf04      	itt	eq
 80044cc:	0200      	lsleq	r0, r0, #8
 80044ce:	3308      	addeq	r3, #8
 80044d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80044d4:	bf04      	itt	eq
 80044d6:	0100      	lsleq	r0, r0, #4
 80044d8:	3304      	addeq	r3, #4
 80044da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80044de:	bf04      	itt	eq
 80044e0:	0080      	lsleq	r0, r0, #2
 80044e2:	3302      	addeq	r3, #2
 80044e4:	2800      	cmp	r0, #0
 80044e6:	db05      	blt.n	80044f4 <__hi0bits+0x38>
 80044e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80044ec:	f103 0301 	add.w	r3, r3, #1
 80044f0:	bf08      	it	eq
 80044f2:	2320      	moveq	r3, #32
 80044f4:	4618      	mov	r0, r3
 80044f6:	4770      	bx	lr
 80044f8:	2300      	movs	r3, #0
 80044fa:	e7e4      	b.n	80044c6 <__hi0bits+0xa>

080044fc <__lo0bits>:
 80044fc:	6803      	ldr	r3, [r0, #0]
 80044fe:	f013 0207 	ands.w	r2, r3, #7
 8004502:	d00c      	beq.n	800451e <__lo0bits+0x22>
 8004504:	07d9      	lsls	r1, r3, #31
 8004506:	d422      	bmi.n	800454e <__lo0bits+0x52>
 8004508:	079a      	lsls	r2, r3, #30
 800450a:	bf49      	itett	mi
 800450c:	085b      	lsrmi	r3, r3, #1
 800450e:	089b      	lsrpl	r3, r3, #2
 8004510:	6003      	strmi	r3, [r0, #0]
 8004512:	2201      	movmi	r2, #1
 8004514:	bf5c      	itt	pl
 8004516:	6003      	strpl	r3, [r0, #0]
 8004518:	2202      	movpl	r2, #2
 800451a:	4610      	mov	r0, r2
 800451c:	4770      	bx	lr
 800451e:	b299      	uxth	r1, r3
 8004520:	b909      	cbnz	r1, 8004526 <__lo0bits+0x2a>
 8004522:	0c1b      	lsrs	r3, r3, #16
 8004524:	2210      	movs	r2, #16
 8004526:	b2d9      	uxtb	r1, r3
 8004528:	b909      	cbnz	r1, 800452e <__lo0bits+0x32>
 800452a:	3208      	adds	r2, #8
 800452c:	0a1b      	lsrs	r3, r3, #8
 800452e:	0719      	lsls	r1, r3, #28
 8004530:	bf04      	itt	eq
 8004532:	091b      	lsreq	r3, r3, #4
 8004534:	3204      	addeq	r2, #4
 8004536:	0799      	lsls	r1, r3, #30
 8004538:	bf04      	itt	eq
 800453a:	089b      	lsreq	r3, r3, #2
 800453c:	3202      	addeq	r2, #2
 800453e:	07d9      	lsls	r1, r3, #31
 8004540:	d403      	bmi.n	800454a <__lo0bits+0x4e>
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	f102 0201 	add.w	r2, r2, #1
 8004548:	d003      	beq.n	8004552 <__lo0bits+0x56>
 800454a:	6003      	str	r3, [r0, #0]
 800454c:	e7e5      	b.n	800451a <__lo0bits+0x1e>
 800454e:	2200      	movs	r2, #0
 8004550:	e7e3      	b.n	800451a <__lo0bits+0x1e>
 8004552:	2220      	movs	r2, #32
 8004554:	e7e1      	b.n	800451a <__lo0bits+0x1e>
	...

08004558 <__i2b>:
 8004558:	b510      	push	{r4, lr}
 800455a:	460c      	mov	r4, r1
 800455c:	2101      	movs	r1, #1
 800455e:	f7ff ff05 	bl	800436c <_Balloc>
 8004562:	4602      	mov	r2, r0
 8004564:	b928      	cbnz	r0, 8004572 <__i2b+0x1a>
 8004566:	4b05      	ldr	r3, [pc, #20]	; (800457c <__i2b+0x24>)
 8004568:	4805      	ldr	r0, [pc, #20]	; (8004580 <__i2b+0x28>)
 800456a:	f240 1145 	movw	r1, #325	; 0x145
 800456e:	f000 fd1f 	bl	8004fb0 <__assert_func>
 8004572:	2301      	movs	r3, #1
 8004574:	6144      	str	r4, [r0, #20]
 8004576:	6103      	str	r3, [r0, #16]
 8004578:	bd10      	pop	{r4, pc}
 800457a:	bf00      	nop
 800457c:	08005391 	.word	0x08005391
 8004580:	080053a2 	.word	0x080053a2

08004584 <__multiply>:
 8004584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004588:	4691      	mov	r9, r2
 800458a:	690a      	ldr	r2, [r1, #16]
 800458c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004590:	429a      	cmp	r2, r3
 8004592:	bfb8      	it	lt
 8004594:	460b      	movlt	r3, r1
 8004596:	460c      	mov	r4, r1
 8004598:	bfbc      	itt	lt
 800459a:	464c      	movlt	r4, r9
 800459c:	4699      	movlt	r9, r3
 800459e:	6927      	ldr	r7, [r4, #16]
 80045a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80045a4:	68a3      	ldr	r3, [r4, #8]
 80045a6:	6861      	ldr	r1, [r4, #4]
 80045a8:	eb07 060a 	add.w	r6, r7, sl
 80045ac:	42b3      	cmp	r3, r6
 80045ae:	b085      	sub	sp, #20
 80045b0:	bfb8      	it	lt
 80045b2:	3101      	addlt	r1, #1
 80045b4:	f7ff feda 	bl	800436c <_Balloc>
 80045b8:	b930      	cbnz	r0, 80045c8 <__multiply+0x44>
 80045ba:	4602      	mov	r2, r0
 80045bc:	4b44      	ldr	r3, [pc, #272]	; (80046d0 <__multiply+0x14c>)
 80045be:	4845      	ldr	r0, [pc, #276]	; (80046d4 <__multiply+0x150>)
 80045c0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80045c4:	f000 fcf4 	bl	8004fb0 <__assert_func>
 80045c8:	f100 0514 	add.w	r5, r0, #20
 80045cc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80045d0:	462b      	mov	r3, r5
 80045d2:	2200      	movs	r2, #0
 80045d4:	4543      	cmp	r3, r8
 80045d6:	d321      	bcc.n	800461c <__multiply+0x98>
 80045d8:	f104 0314 	add.w	r3, r4, #20
 80045dc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80045e0:	f109 0314 	add.w	r3, r9, #20
 80045e4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80045e8:	9202      	str	r2, [sp, #8]
 80045ea:	1b3a      	subs	r2, r7, r4
 80045ec:	3a15      	subs	r2, #21
 80045ee:	f022 0203 	bic.w	r2, r2, #3
 80045f2:	3204      	adds	r2, #4
 80045f4:	f104 0115 	add.w	r1, r4, #21
 80045f8:	428f      	cmp	r7, r1
 80045fa:	bf38      	it	cc
 80045fc:	2204      	movcc	r2, #4
 80045fe:	9201      	str	r2, [sp, #4]
 8004600:	9a02      	ldr	r2, [sp, #8]
 8004602:	9303      	str	r3, [sp, #12]
 8004604:	429a      	cmp	r2, r3
 8004606:	d80c      	bhi.n	8004622 <__multiply+0x9e>
 8004608:	2e00      	cmp	r6, #0
 800460a:	dd03      	ble.n	8004614 <__multiply+0x90>
 800460c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004610:	2b00      	cmp	r3, #0
 8004612:	d05b      	beq.n	80046cc <__multiply+0x148>
 8004614:	6106      	str	r6, [r0, #16]
 8004616:	b005      	add	sp, #20
 8004618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800461c:	f843 2b04 	str.w	r2, [r3], #4
 8004620:	e7d8      	b.n	80045d4 <__multiply+0x50>
 8004622:	f8b3 a000 	ldrh.w	sl, [r3]
 8004626:	f1ba 0f00 	cmp.w	sl, #0
 800462a:	d024      	beq.n	8004676 <__multiply+0xf2>
 800462c:	f104 0e14 	add.w	lr, r4, #20
 8004630:	46a9      	mov	r9, r5
 8004632:	f04f 0c00 	mov.w	ip, #0
 8004636:	f85e 2b04 	ldr.w	r2, [lr], #4
 800463a:	f8d9 1000 	ldr.w	r1, [r9]
 800463e:	fa1f fb82 	uxth.w	fp, r2
 8004642:	b289      	uxth	r1, r1
 8004644:	fb0a 110b 	mla	r1, sl, fp, r1
 8004648:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800464c:	f8d9 2000 	ldr.w	r2, [r9]
 8004650:	4461      	add	r1, ip
 8004652:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004656:	fb0a c20b 	mla	r2, sl, fp, ip
 800465a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800465e:	b289      	uxth	r1, r1
 8004660:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004664:	4577      	cmp	r7, lr
 8004666:	f849 1b04 	str.w	r1, [r9], #4
 800466a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800466e:	d8e2      	bhi.n	8004636 <__multiply+0xb2>
 8004670:	9a01      	ldr	r2, [sp, #4]
 8004672:	f845 c002 	str.w	ip, [r5, r2]
 8004676:	9a03      	ldr	r2, [sp, #12]
 8004678:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800467c:	3304      	adds	r3, #4
 800467e:	f1b9 0f00 	cmp.w	r9, #0
 8004682:	d021      	beq.n	80046c8 <__multiply+0x144>
 8004684:	6829      	ldr	r1, [r5, #0]
 8004686:	f104 0c14 	add.w	ip, r4, #20
 800468a:	46ae      	mov	lr, r5
 800468c:	f04f 0a00 	mov.w	sl, #0
 8004690:	f8bc b000 	ldrh.w	fp, [ip]
 8004694:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004698:	fb09 220b 	mla	r2, r9, fp, r2
 800469c:	4452      	add	r2, sl
 800469e:	b289      	uxth	r1, r1
 80046a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80046a4:	f84e 1b04 	str.w	r1, [lr], #4
 80046a8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80046ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80046b0:	f8be 1000 	ldrh.w	r1, [lr]
 80046b4:	fb09 110a 	mla	r1, r9, sl, r1
 80046b8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80046bc:	4567      	cmp	r7, ip
 80046be:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80046c2:	d8e5      	bhi.n	8004690 <__multiply+0x10c>
 80046c4:	9a01      	ldr	r2, [sp, #4]
 80046c6:	50a9      	str	r1, [r5, r2]
 80046c8:	3504      	adds	r5, #4
 80046ca:	e799      	b.n	8004600 <__multiply+0x7c>
 80046cc:	3e01      	subs	r6, #1
 80046ce:	e79b      	b.n	8004608 <__multiply+0x84>
 80046d0:	08005391 	.word	0x08005391
 80046d4:	080053a2 	.word	0x080053a2

080046d8 <__pow5mult>:
 80046d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046dc:	4615      	mov	r5, r2
 80046de:	f012 0203 	ands.w	r2, r2, #3
 80046e2:	4606      	mov	r6, r0
 80046e4:	460f      	mov	r7, r1
 80046e6:	d007      	beq.n	80046f8 <__pow5mult+0x20>
 80046e8:	4c25      	ldr	r4, [pc, #148]	; (8004780 <__pow5mult+0xa8>)
 80046ea:	3a01      	subs	r2, #1
 80046ec:	2300      	movs	r3, #0
 80046ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80046f2:	f7ff fe9d 	bl	8004430 <__multadd>
 80046f6:	4607      	mov	r7, r0
 80046f8:	10ad      	asrs	r5, r5, #2
 80046fa:	d03d      	beq.n	8004778 <__pow5mult+0xa0>
 80046fc:	69f4      	ldr	r4, [r6, #28]
 80046fe:	b97c      	cbnz	r4, 8004720 <__pow5mult+0x48>
 8004700:	2010      	movs	r0, #16
 8004702:	f7ff fd7f 	bl	8004204 <malloc>
 8004706:	4602      	mov	r2, r0
 8004708:	61f0      	str	r0, [r6, #28]
 800470a:	b928      	cbnz	r0, 8004718 <__pow5mult+0x40>
 800470c:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <__pow5mult+0xac>)
 800470e:	481e      	ldr	r0, [pc, #120]	; (8004788 <__pow5mult+0xb0>)
 8004710:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004714:	f000 fc4c 	bl	8004fb0 <__assert_func>
 8004718:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800471c:	6004      	str	r4, [r0, #0]
 800471e:	60c4      	str	r4, [r0, #12]
 8004720:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004724:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004728:	b94c      	cbnz	r4, 800473e <__pow5mult+0x66>
 800472a:	f240 2171 	movw	r1, #625	; 0x271
 800472e:	4630      	mov	r0, r6
 8004730:	f7ff ff12 	bl	8004558 <__i2b>
 8004734:	2300      	movs	r3, #0
 8004736:	f8c8 0008 	str.w	r0, [r8, #8]
 800473a:	4604      	mov	r4, r0
 800473c:	6003      	str	r3, [r0, #0]
 800473e:	f04f 0900 	mov.w	r9, #0
 8004742:	07eb      	lsls	r3, r5, #31
 8004744:	d50a      	bpl.n	800475c <__pow5mult+0x84>
 8004746:	4639      	mov	r1, r7
 8004748:	4622      	mov	r2, r4
 800474a:	4630      	mov	r0, r6
 800474c:	f7ff ff1a 	bl	8004584 <__multiply>
 8004750:	4639      	mov	r1, r7
 8004752:	4680      	mov	r8, r0
 8004754:	4630      	mov	r0, r6
 8004756:	f7ff fe49 	bl	80043ec <_Bfree>
 800475a:	4647      	mov	r7, r8
 800475c:	106d      	asrs	r5, r5, #1
 800475e:	d00b      	beq.n	8004778 <__pow5mult+0xa0>
 8004760:	6820      	ldr	r0, [r4, #0]
 8004762:	b938      	cbnz	r0, 8004774 <__pow5mult+0x9c>
 8004764:	4622      	mov	r2, r4
 8004766:	4621      	mov	r1, r4
 8004768:	4630      	mov	r0, r6
 800476a:	f7ff ff0b 	bl	8004584 <__multiply>
 800476e:	6020      	str	r0, [r4, #0]
 8004770:	f8c0 9000 	str.w	r9, [r0]
 8004774:	4604      	mov	r4, r0
 8004776:	e7e4      	b.n	8004742 <__pow5mult+0x6a>
 8004778:	4638      	mov	r0, r7
 800477a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800477e:	bf00      	nop
 8004780:	080054f0 	.word	0x080054f0
 8004784:	08005322 	.word	0x08005322
 8004788:	080053a2 	.word	0x080053a2

0800478c <__lshift>:
 800478c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004790:	460c      	mov	r4, r1
 8004792:	6849      	ldr	r1, [r1, #4]
 8004794:	6923      	ldr	r3, [r4, #16]
 8004796:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800479a:	68a3      	ldr	r3, [r4, #8]
 800479c:	4607      	mov	r7, r0
 800479e:	4691      	mov	r9, r2
 80047a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80047a4:	f108 0601 	add.w	r6, r8, #1
 80047a8:	42b3      	cmp	r3, r6
 80047aa:	db0b      	blt.n	80047c4 <__lshift+0x38>
 80047ac:	4638      	mov	r0, r7
 80047ae:	f7ff fddd 	bl	800436c <_Balloc>
 80047b2:	4605      	mov	r5, r0
 80047b4:	b948      	cbnz	r0, 80047ca <__lshift+0x3e>
 80047b6:	4602      	mov	r2, r0
 80047b8:	4b28      	ldr	r3, [pc, #160]	; (800485c <__lshift+0xd0>)
 80047ba:	4829      	ldr	r0, [pc, #164]	; (8004860 <__lshift+0xd4>)
 80047bc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80047c0:	f000 fbf6 	bl	8004fb0 <__assert_func>
 80047c4:	3101      	adds	r1, #1
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	e7ee      	b.n	80047a8 <__lshift+0x1c>
 80047ca:	2300      	movs	r3, #0
 80047cc:	f100 0114 	add.w	r1, r0, #20
 80047d0:	f100 0210 	add.w	r2, r0, #16
 80047d4:	4618      	mov	r0, r3
 80047d6:	4553      	cmp	r3, sl
 80047d8:	db33      	blt.n	8004842 <__lshift+0xb6>
 80047da:	6920      	ldr	r0, [r4, #16]
 80047dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80047e0:	f104 0314 	add.w	r3, r4, #20
 80047e4:	f019 091f 	ands.w	r9, r9, #31
 80047e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80047ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80047f0:	d02b      	beq.n	800484a <__lshift+0xbe>
 80047f2:	f1c9 0e20 	rsb	lr, r9, #32
 80047f6:	468a      	mov	sl, r1
 80047f8:	2200      	movs	r2, #0
 80047fa:	6818      	ldr	r0, [r3, #0]
 80047fc:	fa00 f009 	lsl.w	r0, r0, r9
 8004800:	4310      	orrs	r0, r2
 8004802:	f84a 0b04 	str.w	r0, [sl], #4
 8004806:	f853 2b04 	ldr.w	r2, [r3], #4
 800480a:	459c      	cmp	ip, r3
 800480c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004810:	d8f3      	bhi.n	80047fa <__lshift+0x6e>
 8004812:	ebac 0304 	sub.w	r3, ip, r4
 8004816:	3b15      	subs	r3, #21
 8004818:	f023 0303 	bic.w	r3, r3, #3
 800481c:	3304      	adds	r3, #4
 800481e:	f104 0015 	add.w	r0, r4, #21
 8004822:	4584      	cmp	ip, r0
 8004824:	bf38      	it	cc
 8004826:	2304      	movcc	r3, #4
 8004828:	50ca      	str	r2, [r1, r3]
 800482a:	b10a      	cbz	r2, 8004830 <__lshift+0xa4>
 800482c:	f108 0602 	add.w	r6, r8, #2
 8004830:	3e01      	subs	r6, #1
 8004832:	4638      	mov	r0, r7
 8004834:	612e      	str	r6, [r5, #16]
 8004836:	4621      	mov	r1, r4
 8004838:	f7ff fdd8 	bl	80043ec <_Bfree>
 800483c:	4628      	mov	r0, r5
 800483e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004842:	f842 0f04 	str.w	r0, [r2, #4]!
 8004846:	3301      	adds	r3, #1
 8004848:	e7c5      	b.n	80047d6 <__lshift+0x4a>
 800484a:	3904      	subs	r1, #4
 800484c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004850:	f841 2f04 	str.w	r2, [r1, #4]!
 8004854:	459c      	cmp	ip, r3
 8004856:	d8f9      	bhi.n	800484c <__lshift+0xc0>
 8004858:	e7ea      	b.n	8004830 <__lshift+0xa4>
 800485a:	bf00      	nop
 800485c:	08005391 	.word	0x08005391
 8004860:	080053a2 	.word	0x080053a2

08004864 <__mcmp>:
 8004864:	b530      	push	{r4, r5, lr}
 8004866:	6902      	ldr	r2, [r0, #16]
 8004868:	690c      	ldr	r4, [r1, #16]
 800486a:	1b12      	subs	r2, r2, r4
 800486c:	d10e      	bne.n	800488c <__mcmp+0x28>
 800486e:	f100 0314 	add.w	r3, r0, #20
 8004872:	3114      	adds	r1, #20
 8004874:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004878:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800487c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004880:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004884:	42a5      	cmp	r5, r4
 8004886:	d003      	beq.n	8004890 <__mcmp+0x2c>
 8004888:	d305      	bcc.n	8004896 <__mcmp+0x32>
 800488a:	2201      	movs	r2, #1
 800488c:	4610      	mov	r0, r2
 800488e:	bd30      	pop	{r4, r5, pc}
 8004890:	4283      	cmp	r3, r0
 8004892:	d3f3      	bcc.n	800487c <__mcmp+0x18>
 8004894:	e7fa      	b.n	800488c <__mcmp+0x28>
 8004896:	f04f 32ff 	mov.w	r2, #4294967295
 800489a:	e7f7      	b.n	800488c <__mcmp+0x28>

0800489c <__mdiff>:
 800489c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a0:	460c      	mov	r4, r1
 80048a2:	4606      	mov	r6, r0
 80048a4:	4611      	mov	r1, r2
 80048a6:	4620      	mov	r0, r4
 80048a8:	4690      	mov	r8, r2
 80048aa:	f7ff ffdb 	bl	8004864 <__mcmp>
 80048ae:	1e05      	subs	r5, r0, #0
 80048b0:	d110      	bne.n	80048d4 <__mdiff+0x38>
 80048b2:	4629      	mov	r1, r5
 80048b4:	4630      	mov	r0, r6
 80048b6:	f7ff fd59 	bl	800436c <_Balloc>
 80048ba:	b930      	cbnz	r0, 80048ca <__mdiff+0x2e>
 80048bc:	4b3a      	ldr	r3, [pc, #232]	; (80049a8 <__mdiff+0x10c>)
 80048be:	4602      	mov	r2, r0
 80048c0:	f240 2137 	movw	r1, #567	; 0x237
 80048c4:	4839      	ldr	r0, [pc, #228]	; (80049ac <__mdiff+0x110>)
 80048c6:	f000 fb73 	bl	8004fb0 <__assert_func>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80048d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048d4:	bfa4      	itt	ge
 80048d6:	4643      	movge	r3, r8
 80048d8:	46a0      	movge	r8, r4
 80048da:	4630      	mov	r0, r6
 80048dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80048e0:	bfa6      	itte	ge
 80048e2:	461c      	movge	r4, r3
 80048e4:	2500      	movge	r5, #0
 80048e6:	2501      	movlt	r5, #1
 80048e8:	f7ff fd40 	bl	800436c <_Balloc>
 80048ec:	b920      	cbnz	r0, 80048f8 <__mdiff+0x5c>
 80048ee:	4b2e      	ldr	r3, [pc, #184]	; (80049a8 <__mdiff+0x10c>)
 80048f0:	4602      	mov	r2, r0
 80048f2:	f240 2145 	movw	r1, #581	; 0x245
 80048f6:	e7e5      	b.n	80048c4 <__mdiff+0x28>
 80048f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80048fc:	6926      	ldr	r6, [r4, #16]
 80048fe:	60c5      	str	r5, [r0, #12]
 8004900:	f104 0914 	add.w	r9, r4, #20
 8004904:	f108 0514 	add.w	r5, r8, #20
 8004908:	f100 0e14 	add.w	lr, r0, #20
 800490c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004910:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004914:	f108 0210 	add.w	r2, r8, #16
 8004918:	46f2      	mov	sl, lr
 800491a:	2100      	movs	r1, #0
 800491c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004920:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004924:	fa11 f88b 	uxtah	r8, r1, fp
 8004928:	b299      	uxth	r1, r3
 800492a:	0c1b      	lsrs	r3, r3, #16
 800492c:	eba8 0801 	sub.w	r8, r8, r1
 8004930:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004934:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004938:	fa1f f888 	uxth.w	r8, r8
 800493c:	1419      	asrs	r1, r3, #16
 800493e:	454e      	cmp	r6, r9
 8004940:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004944:	f84a 3b04 	str.w	r3, [sl], #4
 8004948:	d8e8      	bhi.n	800491c <__mdiff+0x80>
 800494a:	1b33      	subs	r3, r6, r4
 800494c:	3b15      	subs	r3, #21
 800494e:	f023 0303 	bic.w	r3, r3, #3
 8004952:	3304      	adds	r3, #4
 8004954:	3415      	adds	r4, #21
 8004956:	42a6      	cmp	r6, r4
 8004958:	bf38      	it	cc
 800495a:	2304      	movcc	r3, #4
 800495c:	441d      	add	r5, r3
 800495e:	4473      	add	r3, lr
 8004960:	469e      	mov	lr, r3
 8004962:	462e      	mov	r6, r5
 8004964:	4566      	cmp	r6, ip
 8004966:	d30e      	bcc.n	8004986 <__mdiff+0xea>
 8004968:	f10c 0203 	add.w	r2, ip, #3
 800496c:	1b52      	subs	r2, r2, r5
 800496e:	f022 0203 	bic.w	r2, r2, #3
 8004972:	3d03      	subs	r5, #3
 8004974:	45ac      	cmp	ip, r5
 8004976:	bf38      	it	cc
 8004978:	2200      	movcc	r2, #0
 800497a:	4413      	add	r3, r2
 800497c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004980:	b17a      	cbz	r2, 80049a2 <__mdiff+0x106>
 8004982:	6107      	str	r7, [r0, #16]
 8004984:	e7a4      	b.n	80048d0 <__mdiff+0x34>
 8004986:	f856 8b04 	ldr.w	r8, [r6], #4
 800498a:	fa11 f288 	uxtah	r2, r1, r8
 800498e:	1414      	asrs	r4, r2, #16
 8004990:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004994:	b292      	uxth	r2, r2
 8004996:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800499a:	f84e 2b04 	str.w	r2, [lr], #4
 800499e:	1421      	asrs	r1, r4, #16
 80049a0:	e7e0      	b.n	8004964 <__mdiff+0xc8>
 80049a2:	3f01      	subs	r7, #1
 80049a4:	e7ea      	b.n	800497c <__mdiff+0xe0>
 80049a6:	bf00      	nop
 80049a8:	08005391 	.word	0x08005391
 80049ac:	080053a2 	.word	0x080053a2

080049b0 <__d2b>:
 80049b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80049b4:	460f      	mov	r7, r1
 80049b6:	2101      	movs	r1, #1
 80049b8:	ec59 8b10 	vmov	r8, r9, d0
 80049bc:	4616      	mov	r6, r2
 80049be:	f7ff fcd5 	bl	800436c <_Balloc>
 80049c2:	4604      	mov	r4, r0
 80049c4:	b930      	cbnz	r0, 80049d4 <__d2b+0x24>
 80049c6:	4602      	mov	r2, r0
 80049c8:	4b24      	ldr	r3, [pc, #144]	; (8004a5c <__d2b+0xac>)
 80049ca:	4825      	ldr	r0, [pc, #148]	; (8004a60 <__d2b+0xb0>)
 80049cc:	f240 310f 	movw	r1, #783	; 0x30f
 80049d0:	f000 faee 	bl	8004fb0 <__assert_func>
 80049d4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80049d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80049dc:	bb2d      	cbnz	r5, 8004a2a <__d2b+0x7a>
 80049de:	9301      	str	r3, [sp, #4]
 80049e0:	f1b8 0300 	subs.w	r3, r8, #0
 80049e4:	d026      	beq.n	8004a34 <__d2b+0x84>
 80049e6:	4668      	mov	r0, sp
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	f7ff fd87 	bl	80044fc <__lo0bits>
 80049ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80049f2:	b1e8      	cbz	r0, 8004a30 <__d2b+0x80>
 80049f4:	f1c0 0320 	rsb	r3, r0, #32
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	430b      	orrs	r3, r1
 80049fe:	40c2      	lsrs	r2, r0
 8004a00:	6163      	str	r3, [r4, #20]
 8004a02:	9201      	str	r2, [sp, #4]
 8004a04:	9b01      	ldr	r3, [sp, #4]
 8004a06:	61a3      	str	r3, [r4, #24]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	bf14      	ite	ne
 8004a0c:	2202      	movne	r2, #2
 8004a0e:	2201      	moveq	r2, #1
 8004a10:	6122      	str	r2, [r4, #16]
 8004a12:	b1bd      	cbz	r5, 8004a44 <__d2b+0x94>
 8004a14:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004a18:	4405      	add	r5, r0
 8004a1a:	603d      	str	r5, [r7, #0]
 8004a1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004a20:	6030      	str	r0, [r6, #0]
 8004a22:	4620      	mov	r0, r4
 8004a24:	b003      	add	sp, #12
 8004a26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004a2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a2e:	e7d6      	b.n	80049de <__d2b+0x2e>
 8004a30:	6161      	str	r1, [r4, #20]
 8004a32:	e7e7      	b.n	8004a04 <__d2b+0x54>
 8004a34:	a801      	add	r0, sp, #4
 8004a36:	f7ff fd61 	bl	80044fc <__lo0bits>
 8004a3a:	9b01      	ldr	r3, [sp, #4]
 8004a3c:	6163      	str	r3, [r4, #20]
 8004a3e:	3020      	adds	r0, #32
 8004a40:	2201      	movs	r2, #1
 8004a42:	e7e5      	b.n	8004a10 <__d2b+0x60>
 8004a44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004a48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004a4c:	6038      	str	r0, [r7, #0]
 8004a4e:	6918      	ldr	r0, [r3, #16]
 8004a50:	f7ff fd34 	bl	80044bc <__hi0bits>
 8004a54:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004a58:	e7e2      	b.n	8004a20 <__d2b+0x70>
 8004a5a:	bf00      	nop
 8004a5c:	08005391 	.word	0x08005391
 8004a60:	080053a2 	.word	0x080053a2

08004a64 <__sfputc_r>:
 8004a64:	6893      	ldr	r3, [r2, #8]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	b410      	push	{r4}
 8004a6c:	6093      	str	r3, [r2, #8]
 8004a6e:	da08      	bge.n	8004a82 <__sfputc_r+0x1e>
 8004a70:	6994      	ldr	r4, [r2, #24]
 8004a72:	42a3      	cmp	r3, r4
 8004a74:	db01      	blt.n	8004a7a <__sfputc_r+0x16>
 8004a76:	290a      	cmp	r1, #10
 8004a78:	d103      	bne.n	8004a82 <__sfputc_r+0x1e>
 8004a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a7e:	f000 b9e3 	b.w	8004e48 <__swbuf_r>
 8004a82:	6813      	ldr	r3, [r2, #0]
 8004a84:	1c58      	adds	r0, r3, #1
 8004a86:	6010      	str	r0, [r2, #0]
 8004a88:	7019      	strb	r1, [r3, #0]
 8004a8a:	4608      	mov	r0, r1
 8004a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <__sfputs_r>:
 8004a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a94:	4606      	mov	r6, r0
 8004a96:	460f      	mov	r7, r1
 8004a98:	4614      	mov	r4, r2
 8004a9a:	18d5      	adds	r5, r2, r3
 8004a9c:	42ac      	cmp	r4, r5
 8004a9e:	d101      	bne.n	8004aa4 <__sfputs_r+0x12>
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	e007      	b.n	8004ab4 <__sfputs_r+0x22>
 8004aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aa8:	463a      	mov	r2, r7
 8004aaa:	4630      	mov	r0, r6
 8004aac:	f7ff ffda 	bl	8004a64 <__sfputc_r>
 8004ab0:	1c43      	adds	r3, r0, #1
 8004ab2:	d1f3      	bne.n	8004a9c <__sfputs_r+0xa>
 8004ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ab8 <_vfiprintf_r>:
 8004ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004abc:	460d      	mov	r5, r1
 8004abe:	b09d      	sub	sp, #116	; 0x74
 8004ac0:	4614      	mov	r4, r2
 8004ac2:	4698      	mov	r8, r3
 8004ac4:	4606      	mov	r6, r0
 8004ac6:	b118      	cbz	r0, 8004ad0 <_vfiprintf_r+0x18>
 8004ac8:	6a03      	ldr	r3, [r0, #32]
 8004aca:	b90b      	cbnz	r3, 8004ad0 <_vfiprintf_r+0x18>
 8004acc:	f7fe fbc8 	bl	8003260 <__sinit>
 8004ad0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ad2:	07d9      	lsls	r1, r3, #31
 8004ad4:	d405      	bmi.n	8004ae2 <_vfiprintf_r+0x2a>
 8004ad6:	89ab      	ldrh	r3, [r5, #12]
 8004ad8:	059a      	lsls	r2, r3, #22
 8004ada:	d402      	bmi.n	8004ae2 <_vfiprintf_r+0x2a>
 8004adc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ade:	f7fe fcc8 	bl	8003472 <__retarget_lock_acquire_recursive>
 8004ae2:	89ab      	ldrh	r3, [r5, #12]
 8004ae4:	071b      	lsls	r3, r3, #28
 8004ae6:	d501      	bpl.n	8004aec <_vfiprintf_r+0x34>
 8004ae8:	692b      	ldr	r3, [r5, #16]
 8004aea:	b99b      	cbnz	r3, 8004b14 <_vfiprintf_r+0x5c>
 8004aec:	4629      	mov	r1, r5
 8004aee:	4630      	mov	r0, r6
 8004af0:	f000 f9e8 	bl	8004ec4 <__swsetup_r>
 8004af4:	b170      	cbz	r0, 8004b14 <_vfiprintf_r+0x5c>
 8004af6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004af8:	07dc      	lsls	r4, r3, #31
 8004afa:	d504      	bpl.n	8004b06 <_vfiprintf_r+0x4e>
 8004afc:	f04f 30ff 	mov.w	r0, #4294967295
 8004b00:	b01d      	add	sp, #116	; 0x74
 8004b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b06:	89ab      	ldrh	r3, [r5, #12]
 8004b08:	0598      	lsls	r0, r3, #22
 8004b0a:	d4f7      	bmi.n	8004afc <_vfiprintf_r+0x44>
 8004b0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b0e:	f7fe fcb1 	bl	8003474 <__retarget_lock_release_recursive>
 8004b12:	e7f3      	b.n	8004afc <_vfiprintf_r+0x44>
 8004b14:	2300      	movs	r3, #0
 8004b16:	9309      	str	r3, [sp, #36]	; 0x24
 8004b18:	2320      	movs	r3, #32
 8004b1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b22:	2330      	movs	r3, #48	; 0x30
 8004b24:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004cd8 <_vfiprintf_r+0x220>
 8004b28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b2c:	f04f 0901 	mov.w	r9, #1
 8004b30:	4623      	mov	r3, r4
 8004b32:	469a      	mov	sl, r3
 8004b34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b38:	b10a      	cbz	r2, 8004b3e <_vfiprintf_r+0x86>
 8004b3a:	2a25      	cmp	r2, #37	; 0x25
 8004b3c:	d1f9      	bne.n	8004b32 <_vfiprintf_r+0x7a>
 8004b3e:	ebba 0b04 	subs.w	fp, sl, r4
 8004b42:	d00b      	beq.n	8004b5c <_vfiprintf_r+0xa4>
 8004b44:	465b      	mov	r3, fp
 8004b46:	4622      	mov	r2, r4
 8004b48:	4629      	mov	r1, r5
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	f7ff ffa1 	bl	8004a92 <__sfputs_r>
 8004b50:	3001      	adds	r0, #1
 8004b52:	f000 80a9 	beq.w	8004ca8 <_vfiprintf_r+0x1f0>
 8004b56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b58:	445a      	add	r2, fp
 8004b5a:	9209      	str	r2, [sp, #36]	; 0x24
 8004b5c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 80a1 	beq.w	8004ca8 <_vfiprintf_r+0x1f0>
 8004b66:	2300      	movs	r3, #0
 8004b68:	f04f 32ff 	mov.w	r2, #4294967295
 8004b6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b70:	f10a 0a01 	add.w	sl, sl, #1
 8004b74:	9304      	str	r3, [sp, #16]
 8004b76:	9307      	str	r3, [sp, #28]
 8004b78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b7c:	931a      	str	r3, [sp, #104]	; 0x68
 8004b7e:	4654      	mov	r4, sl
 8004b80:	2205      	movs	r2, #5
 8004b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b86:	4854      	ldr	r0, [pc, #336]	; (8004cd8 <_vfiprintf_r+0x220>)
 8004b88:	f7fb fb2a 	bl	80001e0 <memchr>
 8004b8c:	9a04      	ldr	r2, [sp, #16]
 8004b8e:	b9d8      	cbnz	r0, 8004bc8 <_vfiprintf_r+0x110>
 8004b90:	06d1      	lsls	r1, r2, #27
 8004b92:	bf44      	itt	mi
 8004b94:	2320      	movmi	r3, #32
 8004b96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b9a:	0713      	lsls	r3, r2, #28
 8004b9c:	bf44      	itt	mi
 8004b9e:	232b      	movmi	r3, #43	; 0x2b
 8004ba0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8004baa:	d015      	beq.n	8004bd8 <_vfiprintf_r+0x120>
 8004bac:	9a07      	ldr	r2, [sp, #28]
 8004bae:	4654      	mov	r4, sl
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	f04f 0c0a 	mov.w	ip, #10
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bbc:	3b30      	subs	r3, #48	; 0x30
 8004bbe:	2b09      	cmp	r3, #9
 8004bc0:	d94d      	bls.n	8004c5e <_vfiprintf_r+0x1a6>
 8004bc2:	b1b0      	cbz	r0, 8004bf2 <_vfiprintf_r+0x13a>
 8004bc4:	9207      	str	r2, [sp, #28]
 8004bc6:	e014      	b.n	8004bf2 <_vfiprintf_r+0x13a>
 8004bc8:	eba0 0308 	sub.w	r3, r0, r8
 8004bcc:	fa09 f303 	lsl.w	r3, r9, r3
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	9304      	str	r3, [sp, #16]
 8004bd4:	46a2      	mov	sl, r4
 8004bd6:	e7d2      	b.n	8004b7e <_vfiprintf_r+0xc6>
 8004bd8:	9b03      	ldr	r3, [sp, #12]
 8004bda:	1d19      	adds	r1, r3, #4
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	9103      	str	r1, [sp, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	bfbb      	ittet	lt
 8004be4:	425b      	neglt	r3, r3
 8004be6:	f042 0202 	orrlt.w	r2, r2, #2
 8004bea:	9307      	strge	r3, [sp, #28]
 8004bec:	9307      	strlt	r3, [sp, #28]
 8004bee:	bfb8      	it	lt
 8004bf0:	9204      	strlt	r2, [sp, #16]
 8004bf2:	7823      	ldrb	r3, [r4, #0]
 8004bf4:	2b2e      	cmp	r3, #46	; 0x2e
 8004bf6:	d10c      	bne.n	8004c12 <_vfiprintf_r+0x15a>
 8004bf8:	7863      	ldrb	r3, [r4, #1]
 8004bfa:	2b2a      	cmp	r3, #42	; 0x2a
 8004bfc:	d134      	bne.n	8004c68 <_vfiprintf_r+0x1b0>
 8004bfe:	9b03      	ldr	r3, [sp, #12]
 8004c00:	1d1a      	adds	r2, r3, #4
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	9203      	str	r2, [sp, #12]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	bfb8      	it	lt
 8004c0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c0e:	3402      	adds	r4, #2
 8004c10:	9305      	str	r3, [sp, #20]
 8004c12:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004ce8 <_vfiprintf_r+0x230>
 8004c16:	7821      	ldrb	r1, [r4, #0]
 8004c18:	2203      	movs	r2, #3
 8004c1a:	4650      	mov	r0, sl
 8004c1c:	f7fb fae0 	bl	80001e0 <memchr>
 8004c20:	b138      	cbz	r0, 8004c32 <_vfiprintf_r+0x17a>
 8004c22:	9b04      	ldr	r3, [sp, #16]
 8004c24:	eba0 000a 	sub.w	r0, r0, sl
 8004c28:	2240      	movs	r2, #64	; 0x40
 8004c2a:	4082      	lsls	r2, r0
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	3401      	adds	r4, #1
 8004c30:	9304      	str	r3, [sp, #16]
 8004c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c36:	4829      	ldr	r0, [pc, #164]	; (8004cdc <_vfiprintf_r+0x224>)
 8004c38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c3c:	2206      	movs	r2, #6
 8004c3e:	f7fb facf 	bl	80001e0 <memchr>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d03f      	beq.n	8004cc6 <_vfiprintf_r+0x20e>
 8004c46:	4b26      	ldr	r3, [pc, #152]	; (8004ce0 <_vfiprintf_r+0x228>)
 8004c48:	bb1b      	cbnz	r3, 8004c92 <_vfiprintf_r+0x1da>
 8004c4a:	9b03      	ldr	r3, [sp, #12]
 8004c4c:	3307      	adds	r3, #7
 8004c4e:	f023 0307 	bic.w	r3, r3, #7
 8004c52:	3308      	adds	r3, #8
 8004c54:	9303      	str	r3, [sp, #12]
 8004c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c58:	443b      	add	r3, r7
 8004c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c5c:	e768      	b.n	8004b30 <_vfiprintf_r+0x78>
 8004c5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c62:	460c      	mov	r4, r1
 8004c64:	2001      	movs	r0, #1
 8004c66:	e7a6      	b.n	8004bb6 <_vfiprintf_r+0xfe>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	3401      	adds	r4, #1
 8004c6c:	9305      	str	r3, [sp, #20]
 8004c6e:	4619      	mov	r1, r3
 8004c70:	f04f 0c0a 	mov.w	ip, #10
 8004c74:	4620      	mov	r0, r4
 8004c76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c7a:	3a30      	subs	r2, #48	; 0x30
 8004c7c:	2a09      	cmp	r2, #9
 8004c7e:	d903      	bls.n	8004c88 <_vfiprintf_r+0x1d0>
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0c6      	beq.n	8004c12 <_vfiprintf_r+0x15a>
 8004c84:	9105      	str	r1, [sp, #20]
 8004c86:	e7c4      	b.n	8004c12 <_vfiprintf_r+0x15a>
 8004c88:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c8c:	4604      	mov	r4, r0
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e7f0      	b.n	8004c74 <_vfiprintf_r+0x1bc>
 8004c92:	ab03      	add	r3, sp, #12
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	462a      	mov	r2, r5
 8004c98:	4b12      	ldr	r3, [pc, #72]	; (8004ce4 <_vfiprintf_r+0x22c>)
 8004c9a:	a904      	add	r1, sp, #16
 8004c9c:	4630      	mov	r0, r6
 8004c9e:	f7fd fe8d 	bl	80029bc <_printf_float>
 8004ca2:	4607      	mov	r7, r0
 8004ca4:	1c78      	adds	r0, r7, #1
 8004ca6:	d1d6      	bne.n	8004c56 <_vfiprintf_r+0x19e>
 8004ca8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004caa:	07d9      	lsls	r1, r3, #31
 8004cac:	d405      	bmi.n	8004cba <_vfiprintf_r+0x202>
 8004cae:	89ab      	ldrh	r3, [r5, #12]
 8004cb0:	059a      	lsls	r2, r3, #22
 8004cb2:	d402      	bmi.n	8004cba <_vfiprintf_r+0x202>
 8004cb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cb6:	f7fe fbdd 	bl	8003474 <__retarget_lock_release_recursive>
 8004cba:	89ab      	ldrh	r3, [r5, #12]
 8004cbc:	065b      	lsls	r3, r3, #25
 8004cbe:	f53f af1d 	bmi.w	8004afc <_vfiprintf_r+0x44>
 8004cc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cc4:	e71c      	b.n	8004b00 <_vfiprintf_r+0x48>
 8004cc6:	ab03      	add	r3, sp, #12
 8004cc8:	9300      	str	r3, [sp, #0]
 8004cca:	462a      	mov	r2, r5
 8004ccc:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <_vfiprintf_r+0x22c>)
 8004cce:	a904      	add	r1, sp, #16
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	f7fe f917 	bl	8002f04 <_printf_i>
 8004cd6:	e7e4      	b.n	8004ca2 <_vfiprintf_r+0x1ea>
 8004cd8:	080054fc 	.word	0x080054fc
 8004cdc:	08005506 	.word	0x08005506
 8004ce0:	080029bd 	.word	0x080029bd
 8004ce4:	08004a93 	.word	0x08004a93
 8004ce8:	08005502 	.word	0x08005502

08004cec <__sflush_r>:
 8004cec:	898a      	ldrh	r2, [r1, #12]
 8004cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf2:	4605      	mov	r5, r0
 8004cf4:	0710      	lsls	r0, r2, #28
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	d458      	bmi.n	8004dac <__sflush_r+0xc0>
 8004cfa:	684b      	ldr	r3, [r1, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	dc05      	bgt.n	8004d0c <__sflush_r+0x20>
 8004d00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	dc02      	bgt.n	8004d0c <__sflush_r+0x20>
 8004d06:	2000      	movs	r0, #0
 8004d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d0e:	2e00      	cmp	r6, #0
 8004d10:	d0f9      	beq.n	8004d06 <__sflush_r+0x1a>
 8004d12:	2300      	movs	r3, #0
 8004d14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d18:	682f      	ldr	r7, [r5, #0]
 8004d1a:	6a21      	ldr	r1, [r4, #32]
 8004d1c:	602b      	str	r3, [r5, #0]
 8004d1e:	d032      	beq.n	8004d86 <__sflush_r+0x9a>
 8004d20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d22:	89a3      	ldrh	r3, [r4, #12]
 8004d24:	075a      	lsls	r2, r3, #29
 8004d26:	d505      	bpl.n	8004d34 <__sflush_r+0x48>
 8004d28:	6863      	ldr	r3, [r4, #4]
 8004d2a:	1ac0      	subs	r0, r0, r3
 8004d2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d2e:	b10b      	cbz	r3, 8004d34 <__sflush_r+0x48>
 8004d30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d32:	1ac0      	subs	r0, r0, r3
 8004d34:	2300      	movs	r3, #0
 8004d36:	4602      	mov	r2, r0
 8004d38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d3a:	6a21      	ldr	r1, [r4, #32]
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	47b0      	blx	r6
 8004d40:	1c43      	adds	r3, r0, #1
 8004d42:	89a3      	ldrh	r3, [r4, #12]
 8004d44:	d106      	bne.n	8004d54 <__sflush_r+0x68>
 8004d46:	6829      	ldr	r1, [r5, #0]
 8004d48:	291d      	cmp	r1, #29
 8004d4a:	d82b      	bhi.n	8004da4 <__sflush_r+0xb8>
 8004d4c:	4a29      	ldr	r2, [pc, #164]	; (8004df4 <__sflush_r+0x108>)
 8004d4e:	410a      	asrs	r2, r1
 8004d50:	07d6      	lsls	r6, r2, #31
 8004d52:	d427      	bmi.n	8004da4 <__sflush_r+0xb8>
 8004d54:	2200      	movs	r2, #0
 8004d56:	6062      	str	r2, [r4, #4]
 8004d58:	04d9      	lsls	r1, r3, #19
 8004d5a:	6922      	ldr	r2, [r4, #16]
 8004d5c:	6022      	str	r2, [r4, #0]
 8004d5e:	d504      	bpl.n	8004d6a <__sflush_r+0x7e>
 8004d60:	1c42      	adds	r2, r0, #1
 8004d62:	d101      	bne.n	8004d68 <__sflush_r+0x7c>
 8004d64:	682b      	ldr	r3, [r5, #0]
 8004d66:	b903      	cbnz	r3, 8004d6a <__sflush_r+0x7e>
 8004d68:	6560      	str	r0, [r4, #84]	; 0x54
 8004d6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d6c:	602f      	str	r7, [r5, #0]
 8004d6e:	2900      	cmp	r1, #0
 8004d70:	d0c9      	beq.n	8004d06 <__sflush_r+0x1a>
 8004d72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d76:	4299      	cmp	r1, r3
 8004d78:	d002      	beq.n	8004d80 <__sflush_r+0x94>
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	f7ff f9f6 	bl	800416c <_free_r>
 8004d80:	2000      	movs	r0, #0
 8004d82:	6360      	str	r0, [r4, #52]	; 0x34
 8004d84:	e7c0      	b.n	8004d08 <__sflush_r+0x1c>
 8004d86:	2301      	movs	r3, #1
 8004d88:	4628      	mov	r0, r5
 8004d8a:	47b0      	blx	r6
 8004d8c:	1c41      	adds	r1, r0, #1
 8004d8e:	d1c8      	bne.n	8004d22 <__sflush_r+0x36>
 8004d90:	682b      	ldr	r3, [r5, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0c5      	beq.n	8004d22 <__sflush_r+0x36>
 8004d96:	2b1d      	cmp	r3, #29
 8004d98:	d001      	beq.n	8004d9e <__sflush_r+0xb2>
 8004d9a:	2b16      	cmp	r3, #22
 8004d9c:	d101      	bne.n	8004da2 <__sflush_r+0xb6>
 8004d9e:	602f      	str	r7, [r5, #0]
 8004da0:	e7b1      	b.n	8004d06 <__sflush_r+0x1a>
 8004da2:	89a3      	ldrh	r3, [r4, #12]
 8004da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004da8:	81a3      	strh	r3, [r4, #12]
 8004daa:	e7ad      	b.n	8004d08 <__sflush_r+0x1c>
 8004dac:	690f      	ldr	r7, [r1, #16]
 8004dae:	2f00      	cmp	r7, #0
 8004db0:	d0a9      	beq.n	8004d06 <__sflush_r+0x1a>
 8004db2:	0793      	lsls	r3, r2, #30
 8004db4:	680e      	ldr	r6, [r1, #0]
 8004db6:	bf08      	it	eq
 8004db8:	694b      	ldreq	r3, [r1, #20]
 8004dba:	600f      	str	r7, [r1, #0]
 8004dbc:	bf18      	it	ne
 8004dbe:	2300      	movne	r3, #0
 8004dc0:	eba6 0807 	sub.w	r8, r6, r7
 8004dc4:	608b      	str	r3, [r1, #8]
 8004dc6:	f1b8 0f00 	cmp.w	r8, #0
 8004dca:	dd9c      	ble.n	8004d06 <__sflush_r+0x1a>
 8004dcc:	6a21      	ldr	r1, [r4, #32]
 8004dce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004dd0:	4643      	mov	r3, r8
 8004dd2:	463a      	mov	r2, r7
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	47b0      	blx	r6
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	dc06      	bgt.n	8004dea <__sflush_r+0xfe>
 8004ddc:	89a3      	ldrh	r3, [r4, #12]
 8004dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004de2:	81a3      	strh	r3, [r4, #12]
 8004de4:	f04f 30ff 	mov.w	r0, #4294967295
 8004de8:	e78e      	b.n	8004d08 <__sflush_r+0x1c>
 8004dea:	4407      	add	r7, r0
 8004dec:	eba8 0800 	sub.w	r8, r8, r0
 8004df0:	e7e9      	b.n	8004dc6 <__sflush_r+0xda>
 8004df2:	bf00      	nop
 8004df4:	dfbffffe 	.word	0xdfbffffe

08004df8 <_fflush_r>:
 8004df8:	b538      	push	{r3, r4, r5, lr}
 8004dfa:	690b      	ldr	r3, [r1, #16]
 8004dfc:	4605      	mov	r5, r0
 8004dfe:	460c      	mov	r4, r1
 8004e00:	b913      	cbnz	r3, 8004e08 <_fflush_r+0x10>
 8004e02:	2500      	movs	r5, #0
 8004e04:	4628      	mov	r0, r5
 8004e06:	bd38      	pop	{r3, r4, r5, pc}
 8004e08:	b118      	cbz	r0, 8004e12 <_fflush_r+0x1a>
 8004e0a:	6a03      	ldr	r3, [r0, #32]
 8004e0c:	b90b      	cbnz	r3, 8004e12 <_fflush_r+0x1a>
 8004e0e:	f7fe fa27 	bl	8003260 <__sinit>
 8004e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0f3      	beq.n	8004e02 <_fflush_r+0xa>
 8004e1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e1c:	07d0      	lsls	r0, r2, #31
 8004e1e:	d404      	bmi.n	8004e2a <_fflush_r+0x32>
 8004e20:	0599      	lsls	r1, r3, #22
 8004e22:	d402      	bmi.n	8004e2a <_fflush_r+0x32>
 8004e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e26:	f7fe fb24 	bl	8003472 <__retarget_lock_acquire_recursive>
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	4621      	mov	r1, r4
 8004e2e:	f7ff ff5d 	bl	8004cec <__sflush_r>
 8004e32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e34:	07da      	lsls	r2, r3, #31
 8004e36:	4605      	mov	r5, r0
 8004e38:	d4e4      	bmi.n	8004e04 <_fflush_r+0xc>
 8004e3a:	89a3      	ldrh	r3, [r4, #12]
 8004e3c:	059b      	lsls	r3, r3, #22
 8004e3e:	d4e1      	bmi.n	8004e04 <_fflush_r+0xc>
 8004e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e42:	f7fe fb17 	bl	8003474 <__retarget_lock_release_recursive>
 8004e46:	e7dd      	b.n	8004e04 <_fflush_r+0xc>

08004e48 <__swbuf_r>:
 8004e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4a:	460e      	mov	r6, r1
 8004e4c:	4614      	mov	r4, r2
 8004e4e:	4605      	mov	r5, r0
 8004e50:	b118      	cbz	r0, 8004e5a <__swbuf_r+0x12>
 8004e52:	6a03      	ldr	r3, [r0, #32]
 8004e54:	b90b      	cbnz	r3, 8004e5a <__swbuf_r+0x12>
 8004e56:	f7fe fa03 	bl	8003260 <__sinit>
 8004e5a:	69a3      	ldr	r3, [r4, #24]
 8004e5c:	60a3      	str	r3, [r4, #8]
 8004e5e:	89a3      	ldrh	r3, [r4, #12]
 8004e60:	071a      	lsls	r2, r3, #28
 8004e62:	d525      	bpl.n	8004eb0 <__swbuf_r+0x68>
 8004e64:	6923      	ldr	r3, [r4, #16]
 8004e66:	b31b      	cbz	r3, 8004eb0 <__swbuf_r+0x68>
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	6922      	ldr	r2, [r4, #16]
 8004e6c:	1a98      	subs	r0, r3, r2
 8004e6e:	6963      	ldr	r3, [r4, #20]
 8004e70:	b2f6      	uxtb	r6, r6
 8004e72:	4283      	cmp	r3, r0
 8004e74:	4637      	mov	r7, r6
 8004e76:	dc04      	bgt.n	8004e82 <__swbuf_r+0x3a>
 8004e78:	4621      	mov	r1, r4
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	f7ff ffbc 	bl	8004df8 <_fflush_r>
 8004e80:	b9e0      	cbnz	r0, 8004ebc <__swbuf_r+0x74>
 8004e82:	68a3      	ldr	r3, [r4, #8]
 8004e84:	3b01      	subs	r3, #1
 8004e86:	60a3      	str	r3, [r4, #8]
 8004e88:	6823      	ldr	r3, [r4, #0]
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	6022      	str	r2, [r4, #0]
 8004e8e:	701e      	strb	r6, [r3, #0]
 8004e90:	6962      	ldr	r2, [r4, #20]
 8004e92:	1c43      	adds	r3, r0, #1
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d004      	beq.n	8004ea2 <__swbuf_r+0x5a>
 8004e98:	89a3      	ldrh	r3, [r4, #12]
 8004e9a:	07db      	lsls	r3, r3, #31
 8004e9c:	d506      	bpl.n	8004eac <__swbuf_r+0x64>
 8004e9e:	2e0a      	cmp	r6, #10
 8004ea0:	d104      	bne.n	8004eac <__swbuf_r+0x64>
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	f7ff ffa7 	bl	8004df8 <_fflush_r>
 8004eaa:	b938      	cbnz	r0, 8004ebc <__swbuf_r+0x74>
 8004eac:	4638      	mov	r0, r7
 8004eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eb0:	4621      	mov	r1, r4
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	f000 f806 	bl	8004ec4 <__swsetup_r>
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	d0d5      	beq.n	8004e68 <__swbuf_r+0x20>
 8004ebc:	f04f 37ff 	mov.w	r7, #4294967295
 8004ec0:	e7f4      	b.n	8004eac <__swbuf_r+0x64>
	...

08004ec4 <__swsetup_r>:
 8004ec4:	b538      	push	{r3, r4, r5, lr}
 8004ec6:	4b2a      	ldr	r3, [pc, #168]	; (8004f70 <__swsetup_r+0xac>)
 8004ec8:	4605      	mov	r5, r0
 8004eca:	6818      	ldr	r0, [r3, #0]
 8004ecc:	460c      	mov	r4, r1
 8004ece:	b118      	cbz	r0, 8004ed8 <__swsetup_r+0x14>
 8004ed0:	6a03      	ldr	r3, [r0, #32]
 8004ed2:	b90b      	cbnz	r3, 8004ed8 <__swsetup_r+0x14>
 8004ed4:	f7fe f9c4 	bl	8003260 <__sinit>
 8004ed8:	89a3      	ldrh	r3, [r4, #12]
 8004eda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ede:	0718      	lsls	r0, r3, #28
 8004ee0:	d422      	bmi.n	8004f28 <__swsetup_r+0x64>
 8004ee2:	06d9      	lsls	r1, r3, #27
 8004ee4:	d407      	bmi.n	8004ef6 <__swsetup_r+0x32>
 8004ee6:	2309      	movs	r3, #9
 8004ee8:	602b      	str	r3, [r5, #0]
 8004eea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004eee:	81a3      	strh	r3, [r4, #12]
 8004ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef4:	e034      	b.n	8004f60 <__swsetup_r+0x9c>
 8004ef6:	0758      	lsls	r0, r3, #29
 8004ef8:	d512      	bpl.n	8004f20 <__swsetup_r+0x5c>
 8004efa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004efc:	b141      	cbz	r1, 8004f10 <__swsetup_r+0x4c>
 8004efe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f02:	4299      	cmp	r1, r3
 8004f04:	d002      	beq.n	8004f0c <__swsetup_r+0x48>
 8004f06:	4628      	mov	r0, r5
 8004f08:	f7ff f930 	bl	800416c <_free_r>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	6363      	str	r3, [r4, #52]	; 0x34
 8004f10:	89a3      	ldrh	r3, [r4, #12]
 8004f12:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f16:	81a3      	strh	r3, [r4, #12]
 8004f18:	2300      	movs	r3, #0
 8004f1a:	6063      	str	r3, [r4, #4]
 8004f1c:	6923      	ldr	r3, [r4, #16]
 8004f1e:	6023      	str	r3, [r4, #0]
 8004f20:	89a3      	ldrh	r3, [r4, #12]
 8004f22:	f043 0308 	orr.w	r3, r3, #8
 8004f26:	81a3      	strh	r3, [r4, #12]
 8004f28:	6923      	ldr	r3, [r4, #16]
 8004f2a:	b94b      	cbnz	r3, 8004f40 <__swsetup_r+0x7c>
 8004f2c:	89a3      	ldrh	r3, [r4, #12]
 8004f2e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f36:	d003      	beq.n	8004f40 <__swsetup_r+0x7c>
 8004f38:	4621      	mov	r1, r4
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	f000 f8c4 	bl	80050c8 <__smakebuf_r>
 8004f40:	89a0      	ldrh	r0, [r4, #12]
 8004f42:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f46:	f010 0301 	ands.w	r3, r0, #1
 8004f4a:	d00a      	beq.n	8004f62 <__swsetup_r+0x9e>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60a3      	str	r3, [r4, #8]
 8004f50:	6963      	ldr	r3, [r4, #20]
 8004f52:	425b      	negs	r3, r3
 8004f54:	61a3      	str	r3, [r4, #24]
 8004f56:	6923      	ldr	r3, [r4, #16]
 8004f58:	b943      	cbnz	r3, 8004f6c <__swsetup_r+0xa8>
 8004f5a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f5e:	d1c4      	bne.n	8004eea <__swsetup_r+0x26>
 8004f60:	bd38      	pop	{r3, r4, r5, pc}
 8004f62:	0781      	lsls	r1, r0, #30
 8004f64:	bf58      	it	pl
 8004f66:	6963      	ldrpl	r3, [r4, #20]
 8004f68:	60a3      	str	r3, [r4, #8]
 8004f6a:	e7f4      	b.n	8004f56 <__swsetup_r+0x92>
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	e7f7      	b.n	8004f60 <__swsetup_r+0x9c>
 8004f70:	20000060 	.word	0x20000060

08004f74 <_sbrk_r>:
 8004f74:	b538      	push	{r3, r4, r5, lr}
 8004f76:	4d06      	ldr	r5, [pc, #24]	; (8004f90 <_sbrk_r+0x1c>)
 8004f78:	2300      	movs	r3, #0
 8004f7a:	4604      	mov	r4, r0
 8004f7c:	4608      	mov	r0, r1
 8004f7e:	602b      	str	r3, [r5, #0]
 8004f80:	f7fd fafa 	bl	8002578 <_sbrk>
 8004f84:	1c43      	adds	r3, r0, #1
 8004f86:	d102      	bne.n	8004f8e <_sbrk_r+0x1a>
 8004f88:	682b      	ldr	r3, [r5, #0]
 8004f8a:	b103      	cbz	r3, 8004f8e <_sbrk_r+0x1a>
 8004f8c:	6023      	str	r3, [r4, #0]
 8004f8e:	bd38      	pop	{r3, r4, r5, pc}
 8004f90:	20000330 	.word	0x20000330

08004f94 <memcpy>:
 8004f94:	440a      	add	r2, r1
 8004f96:	4291      	cmp	r1, r2
 8004f98:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f9c:	d100      	bne.n	8004fa0 <memcpy+0xc>
 8004f9e:	4770      	bx	lr
 8004fa0:	b510      	push	{r4, lr}
 8004fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004faa:	4291      	cmp	r1, r2
 8004fac:	d1f9      	bne.n	8004fa2 <memcpy+0xe>
 8004fae:	bd10      	pop	{r4, pc}

08004fb0 <__assert_func>:
 8004fb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004fb2:	4614      	mov	r4, r2
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	4b09      	ldr	r3, [pc, #36]	; (8004fdc <__assert_func+0x2c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4605      	mov	r5, r0
 8004fbc:	68d8      	ldr	r0, [r3, #12]
 8004fbe:	b14c      	cbz	r4, 8004fd4 <__assert_func+0x24>
 8004fc0:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <__assert_func+0x30>)
 8004fc2:	9100      	str	r1, [sp, #0]
 8004fc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004fc8:	4906      	ldr	r1, [pc, #24]	; (8004fe4 <__assert_func+0x34>)
 8004fca:	462b      	mov	r3, r5
 8004fcc:	f000 f844 	bl	8005058 <fiprintf>
 8004fd0:	f000 f8d8 	bl	8005184 <abort>
 8004fd4:	4b04      	ldr	r3, [pc, #16]	; (8004fe8 <__assert_func+0x38>)
 8004fd6:	461c      	mov	r4, r3
 8004fd8:	e7f3      	b.n	8004fc2 <__assert_func+0x12>
 8004fda:	bf00      	nop
 8004fdc:	20000060 	.word	0x20000060
 8004fe0:	08005517 	.word	0x08005517
 8004fe4:	08005524 	.word	0x08005524
 8004fe8:	08005552 	.word	0x08005552

08004fec <_calloc_r>:
 8004fec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fee:	fba1 2402 	umull	r2, r4, r1, r2
 8004ff2:	b94c      	cbnz	r4, 8005008 <_calloc_r+0x1c>
 8004ff4:	4611      	mov	r1, r2
 8004ff6:	9201      	str	r2, [sp, #4]
 8004ff8:	f7ff f92c 	bl	8004254 <_malloc_r>
 8004ffc:	9a01      	ldr	r2, [sp, #4]
 8004ffe:	4605      	mov	r5, r0
 8005000:	b930      	cbnz	r0, 8005010 <_calloc_r+0x24>
 8005002:	4628      	mov	r0, r5
 8005004:	b003      	add	sp, #12
 8005006:	bd30      	pop	{r4, r5, pc}
 8005008:	220c      	movs	r2, #12
 800500a:	6002      	str	r2, [r0, #0]
 800500c:	2500      	movs	r5, #0
 800500e:	e7f8      	b.n	8005002 <_calloc_r+0x16>
 8005010:	4621      	mov	r1, r4
 8005012:	f7fe f9b0 	bl	8003376 <memset>
 8005016:	e7f4      	b.n	8005002 <_calloc_r+0x16>

08005018 <__ascii_mbtowc>:
 8005018:	b082      	sub	sp, #8
 800501a:	b901      	cbnz	r1, 800501e <__ascii_mbtowc+0x6>
 800501c:	a901      	add	r1, sp, #4
 800501e:	b142      	cbz	r2, 8005032 <__ascii_mbtowc+0x1a>
 8005020:	b14b      	cbz	r3, 8005036 <__ascii_mbtowc+0x1e>
 8005022:	7813      	ldrb	r3, [r2, #0]
 8005024:	600b      	str	r3, [r1, #0]
 8005026:	7812      	ldrb	r2, [r2, #0]
 8005028:	1e10      	subs	r0, r2, #0
 800502a:	bf18      	it	ne
 800502c:	2001      	movne	r0, #1
 800502e:	b002      	add	sp, #8
 8005030:	4770      	bx	lr
 8005032:	4610      	mov	r0, r2
 8005034:	e7fb      	b.n	800502e <__ascii_mbtowc+0x16>
 8005036:	f06f 0001 	mvn.w	r0, #1
 800503a:	e7f8      	b.n	800502e <__ascii_mbtowc+0x16>

0800503c <__ascii_wctomb>:
 800503c:	b149      	cbz	r1, 8005052 <__ascii_wctomb+0x16>
 800503e:	2aff      	cmp	r2, #255	; 0xff
 8005040:	bf85      	ittet	hi
 8005042:	238a      	movhi	r3, #138	; 0x8a
 8005044:	6003      	strhi	r3, [r0, #0]
 8005046:	700a      	strbls	r2, [r1, #0]
 8005048:	f04f 30ff 	movhi.w	r0, #4294967295
 800504c:	bf98      	it	ls
 800504e:	2001      	movls	r0, #1
 8005050:	4770      	bx	lr
 8005052:	4608      	mov	r0, r1
 8005054:	4770      	bx	lr
	...

08005058 <fiprintf>:
 8005058:	b40e      	push	{r1, r2, r3}
 800505a:	b503      	push	{r0, r1, lr}
 800505c:	4601      	mov	r1, r0
 800505e:	ab03      	add	r3, sp, #12
 8005060:	4805      	ldr	r0, [pc, #20]	; (8005078 <fiprintf+0x20>)
 8005062:	f853 2b04 	ldr.w	r2, [r3], #4
 8005066:	6800      	ldr	r0, [r0, #0]
 8005068:	9301      	str	r3, [sp, #4]
 800506a:	f7ff fd25 	bl	8004ab8 <_vfiprintf_r>
 800506e:	b002      	add	sp, #8
 8005070:	f85d eb04 	ldr.w	lr, [sp], #4
 8005074:	b003      	add	sp, #12
 8005076:	4770      	bx	lr
 8005078:	20000060 	.word	0x20000060

0800507c <__swhatbuf_r>:
 800507c:	b570      	push	{r4, r5, r6, lr}
 800507e:	460c      	mov	r4, r1
 8005080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005084:	2900      	cmp	r1, #0
 8005086:	b096      	sub	sp, #88	; 0x58
 8005088:	4615      	mov	r5, r2
 800508a:	461e      	mov	r6, r3
 800508c:	da0d      	bge.n	80050aa <__swhatbuf_r+0x2e>
 800508e:	89a3      	ldrh	r3, [r4, #12]
 8005090:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005094:	f04f 0100 	mov.w	r1, #0
 8005098:	bf0c      	ite	eq
 800509a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800509e:	2340      	movne	r3, #64	; 0x40
 80050a0:	2000      	movs	r0, #0
 80050a2:	6031      	str	r1, [r6, #0]
 80050a4:	602b      	str	r3, [r5, #0]
 80050a6:	b016      	add	sp, #88	; 0x58
 80050a8:	bd70      	pop	{r4, r5, r6, pc}
 80050aa:	466a      	mov	r2, sp
 80050ac:	f000 f848 	bl	8005140 <_fstat_r>
 80050b0:	2800      	cmp	r0, #0
 80050b2:	dbec      	blt.n	800508e <__swhatbuf_r+0x12>
 80050b4:	9901      	ldr	r1, [sp, #4]
 80050b6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80050ba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80050be:	4259      	negs	r1, r3
 80050c0:	4159      	adcs	r1, r3
 80050c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050c6:	e7eb      	b.n	80050a0 <__swhatbuf_r+0x24>

080050c8 <__smakebuf_r>:
 80050c8:	898b      	ldrh	r3, [r1, #12]
 80050ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80050cc:	079d      	lsls	r5, r3, #30
 80050ce:	4606      	mov	r6, r0
 80050d0:	460c      	mov	r4, r1
 80050d2:	d507      	bpl.n	80050e4 <__smakebuf_r+0x1c>
 80050d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80050d8:	6023      	str	r3, [r4, #0]
 80050da:	6123      	str	r3, [r4, #16]
 80050dc:	2301      	movs	r3, #1
 80050de:	6163      	str	r3, [r4, #20]
 80050e0:	b002      	add	sp, #8
 80050e2:	bd70      	pop	{r4, r5, r6, pc}
 80050e4:	ab01      	add	r3, sp, #4
 80050e6:	466a      	mov	r2, sp
 80050e8:	f7ff ffc8 	bl	800507c <__swhatbuf_r>
 80050ec:	9900      	ldr	r1, [sp, #0]
 80050ee:	4605      	mov	r5, r0
 80050f0:	4630      	mov	r0, r6
 80050f2:	f7ff f8af 	bl	8004254 <_malloc_r>
 80050f6:	b948      	cbnz	r0, 800510c <__smakebuf_r+0x44>
 80050f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050fc:	059a      	lsls	r2, r3, #22
 80050fe:	d4ef      	bmi.n	80050e0 <__smakebuf_r+0x18>
 8005100:	f023 0303 	bic.w	r3, r3, #3
 8005104:	f043 0302 	orr.w	r3, r3, #2
 8005108:	81a3      	strh	r3, [r4, #12]
 800510a:	e7e3      	b.n	80050d4 <__smakebuf_r+0xc>
 800510c:	89a3      	ldrh	r3, [r4, #12]
 800510e:	6020      	str	r0, [r4, #0]
 8005110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005114:	81a3      	strh	r3, [r4, #12]
 8005116:	9b00      	ldr	r3, [sp, #0]
 8005118:	6163      	str	r3, [r4, #20]
 800511a:	9b01      	ldr	r3, [sp, #4]
 800511c:	6120      	str	r0, [r4, #16]
 800511e:	b15b      	cbz	r3, 8005138 <__smakebuf_r+0x70>
 8005120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005124:	4630      	mov	r0, r6
 8005126:	f000 f81d 	bl	8005164 <_isatty_r>
 800512a:	b128      	cbz	r0, 8005138 <__smakebuf_r+0x70>
 800512c:	89a3      	ldrh	r3, [r4, #12]
 800512e:	f023 0303 	bic.w	r3, r3, #3
 8005132:	f043 0301 	orr.w	r3, r3, #1
 8005136:	81a3      	strh	r3, [r4, #12]
 8005138:	89a3      	ldrh	r3, [r4, #12]
 800513a:	431d      	orrs	r5, r3
 800513c:	81a5      	strh	r5, [r4, #12]
 800513e:	e7cf      	b.n	80050e0 <__smakebuf_r+0x18>

08005140 <_fstat_r>:
 8005140:	b538      	push	{r3, r4, r5, lr}
 8005142:	4d07      	ldr	r5, [pc, #28]	; (8005160 <_fstat_r+0x20>)
 8005144:	2300      	movs	r3, #0
 8005146:	4604      	mov	r4, r0
 8005148:	4608      	mov	r0, r1
 800514a:	4611      	mov	r1, r2
 800514c:	602b      	str	r3, [r5, #0]
 800514e:	f7fd f9ea 	bl	8002526 <_fstat>
 8005152:	1c43      	adds	r3, r0, #1
 8005154:	d102      	bne.n	800515c <_fstat_r+0x1c>
 8005156:	682b      	ldr	r3, [r5, #0]
 8005158:	b103      	cbz	r3, 800515c <_fstat_r+0x1c>
 800515a:	6023      	str	r3, [r4, #0]
 800515c:	bd38      	pop	{r3, r4, r5, pc}
 800515e:	bf00      	nop
 8005160:	20000330 	.word	0x20000330

08005164 <_isatty_r>:
 8005164:	b538      	push	{r3, r4, r5, lr}
 8005166:	4d06      	ldr	r5, [pc, #24]	; (8005180 <_isatty_r+0x1c>)
 8005168:	2300      	movs	r3, #0
 800516a:	4604      	mov	r4, r0
 800516c:	4608      	mov	r0, r1
 800516e:	602b      	str	r3, [r5, #0]
 8005170:	f7fd f9e9 	bl	8002546 <_isatty>
 8005174:	1c43      	adds	r3, r0, #1
 8005176:	d102      	bne.n	800517e <_isatty_r+0x1a>
 8005178:	682b      	ldr	r3, [r5, #0]
 800517a:	b103      	cbz	r3, 800517e <_isatty_r+0x1a>
 800517c:	6023      	str	r3, [r4, #0]
 800517e:	bd38      	pop	{r3, r4, r5, pc}
 8005180:	20000330 	.word	0x20000330

08005184 <abort>:
 8005184:	b508      	push	{r3, lr}
 8005186:	2006      	movs	r0, #6
 8005188:	f000 f82c 	bl	80051e4 <raise>
 800518c:	2001      	movs	r0, #1
 800518e:	f7fd f97b 	bl	8002488 <_exit>

08005192 <_raise_r>:
 8005192:	291f      	cmp	r1, #31
 8005194:	b538      	push	{r3, r4, r5, lr}
 8005196:	4604      	mov	r4, r0
 8005198:	460d      	mov	r5, r1
 800519a:	d904      	bls.n	80051a6 <_raise_r+0x14>
 800519c:	2316      	movs	r3, #22
 800519e:	6003      	str	r3, [r0, #0]
 80051a0:	f04f 30ff 	mov.w	r0, #4294967295
 80051a4:	bd38      	pop	{r3, r4, r5, pc}
 80051a6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80051a8:	b112      	cbz	r2, 80051b0 <_raise_r+0x1e>
 80051aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80051ae:	b94b      	cbnz	r3, 80051c4 <_raise_r+0x32>
 80051b0:	4620      	mov	r0, r4
 80051b2:	f000 f831 	bl	8005218 <_getpid_r>
 80051b6:	462a      	mov	r2, r5
 80051b8:	4601      	mov	r1, r0
 80051ba:	4620      	mov	r0, r4
 80051bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051c0:	f000 b818 	b.w	80051f4 <_kill_r>
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d00a      	beq.n	80051de <_raise_r+0x4c>
 80051c8:	1c59      	adds	r1, r3, #1
 80051ca:	d103      	bne.n	80051d4 <_raise_r+0x42>
 80051cc:	2316      	movs	r3, #22
 80051ce:	6003      	str	r3, [r0, #0]
 80051d0:	2001      	movs	r0, #1
 80051d2:	e7e7      	b.n	80051a4 <_raise_r+0x12>
 80051d4:	2400      	movs	r4, #0
 80051d6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80051da:	4628      	mov	r0, r5
 80051dc:	4798      	blx	r3
 80051de:	2000      	movs	r0, #0
 80051e0:	e7e0      	b.n	80051a4 <_raise_r+0x12>
	...

080051e4 <raise>:
 80051e4:	4b02      	ldr	r3, [pc, #8]	; (80051f0 <raise+0xc>)
 80051e6:	4601      	mov	r1, r0
 80051e8:	6818      	ldr	r0, [r3, #0]
 80051ea:	f7ff bfd2 	b.w	8005192 <_raise_r>
 80051ee:	bf00      	nop
 80051f0:	20000060 	.word	0x20000060

080051f4 <_kill_r>:
 80051f4:	b538      	push	{r3, r4, r5, lr}
 80051f6:	4d07      	ldr	r5, [pc, #28]	; (8005214 <_kill_r+0x20>)
 80051f8:	2300      	movs	r3, #0
 80051fa:	4604      	mov	r4, r0
 80051fc:	4608      	mov	r0, r1
 80051fe:	4611      	mov	r1, r2
 8005200:	602b      	str	r3, [r5, #0]
 8005202:	f7fd f931 	bl	8002468 <_kill>
 8005206:	1c43      	adds	r3, r0, #1
 8005208:	d102      	bne.n	8005210 <_kill_r+0x1c>
 800520a:	682b      	ldr	r3, [r5, #0]
 800520c:	b103      	cbz	r3, 8005210 <_kill_r+0x1c>
 800520e:	6023      	str	r3, [r4, #0]
 8005210:	bd38      	pop	{r3, r4, r5, pc}
 8005212:	bf00      	nop
 8005214:	20000330 	.word	0x20000330

08005218 <_getpid_r>:
 8005218:	f7fd b91e 	b.w	8002458 <_getpid>

0800521c <_init>:
 800521c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521e:	bf00      	nop
 8005220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005222:	bc08      	pop	{r3}
 8005224:	469e      	mov	lr, r3
 8005226:	4770      	bx	lr

08005228 <_fini>:
 8005228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522a:	bf00      	nop
 800522c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800522e:	bc08      	pop	{r3}
 8005230:	469e      	mov	lr, r3
 8005232:	4770      	bx	lr
