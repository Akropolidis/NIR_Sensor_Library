
AS7421.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005014  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  080051b8  080051b8  000151b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800559c  0800559c  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800559c  0800559c  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800559c  0800559c  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800559c  0800559c  0001559c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055a0  080055a0  000155a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  080055a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200001d0  08005774  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08005774  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   000029ea  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ac9  00000000  00000000  00022c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000550  00000000  00000000  000236f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003e1  00000000  00000000  00023c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010127  00000000  00000000  00024029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004241  00000000  00000000  00034150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00056495  00000000  00000000  00038391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002358  00000000  00000000  0008e828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00090b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d0 	.word	0x200001d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800519c 	.word	0x0800519c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	0800519c 	.word	0x0800519c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <AS7421_readRegister>:
static void AS7421_writeRegister(uint8_t addr, uint8_t val);
static void AS7421_writeRegisters(uint8_t startAddr, uint8_t bufferSize, char *val);

//Reads from a given location from the AS7421
static uint8_t AS7421_readRegister(uint8_t addr)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
	char data = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	73fb      	strb	r3, [r7, #15]
	I2C1_byteRead(AS7421_ADDR, addr, &data);
 8000bc6:	f107 020f 	add.w	r2, r7, #15
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	2064      	movs	r0, #100	; 0x64
 8000bd0:	f001 fa74 	bl	80020bc <I2C1_byteRead>
	return data;
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <AS7421_readRegisters>:

//Reads from consecutive register locations on the AS7421
static void AS7421_readRegisters(uint8_t addr, uint8_t bufferSize, uint8_t *data)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	603a      	str	r2, [r7, #0]
 8000be8:	71fb      	strb	r3, [r7, #7]
 8000bea:	460b      	mov	r3, r1
 8000bec:	71bb      	strb	r3, [r7, #6]
	I2C1_burstRead(AS7421_ADDR, addr, bufferSize, data);
 8000bee:	79ba      	ldrb	r2, [r7, #6]
 8000bf0:	79f9      	ldrb	r1, [r7, #7]
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	2064      	movs	r0, #100	; 0x64
 8000bf6:	f001 fadb 	bl	80021b0 <I2C1_burstRead>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <AS7421_writeRegister>:

//Write a value to a given location on the AS7421
static void AS7421_writeRegister(uint8_t addr, uint8_t val)
{
 8000c02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c06:	b087      	sub	sp, #28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	460a      	mov	r2, r1
 8000c0e:	71fb      	strb	r3, [r7, #7]
 8000c10:	4613      	mov	r3, r2
 8000c12:	71bb      	strb	r3, [r7, #6]
 8000c14:	466b      	mov	r3, sp
 8000c16:	461e      	mov	r6, r3
	uint8_t bufferSize = 1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	75fb      	strb	r3, [r7, #23]
	char data[bufferSize];
 8000c1c:	7df9      	ldrb	r1, [r7, #23]
 8000c1e:	460b      	mov	r3, r1
 8000c20:	3b01      	subs	r3, #1
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	b2cb      	uxtb	r3, r1
 8000c26:	2200      	movs	r2, #0
 8000c28:	4698      	mov	r8, r3
 8000c2a:	4691      	mov	r9, r2
 8000c2c:	f04f 0200 	mov.w	r2, #0
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c40:	b2cb      	uxtb	r3, r1
 8000c42:	2200      	movs	r2, #0
 8000c44:	461c      	mov	r4, r3
 8000c46:	4615      	mov	r5, r2
 8000c48:	f04f 0200 	mov.w	r2, #0
 8000c4c:	f04f 0300 	mov.w	r3, #0
 8000c50:	00eb      	lsls	r3, r5, #3
 8000c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c56:	00e2      	lsls	r2, r4, #3
 8000c58:	460b      	mov	r3, r1
 8000c5a:	3307      	adds	r3, #7
 8000c5c:	08db      	lsrs	r3, r3, #3
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	ebad 0d03 	sub.w	sp, sp, r3
 8000c64:	466b      	mov	r3, sp
 8000c66:	3300      	adds	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]

	data[0] = val;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	79ba      	ldrb	r2, [r7, #6]
 8000c6e:	701a      	strb	r2, [r3, #0]
	I2C1_burstWrite(AS7421_ADDR, addr, bufferSize, data);
 8000c70:	7dfa      	ldrb	r2, [r7, #23]
 8000c72:	79f9      	ldrb	r1, [r7, #7]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2064      	movs	r0, #100	; 0x64
 8000c78:	f001 fb36 	bl	80022e8 <I2C1_burstWrite>
 8000c7c:	46b5      	mov	sp, r6
}
 8000c7e:	bf00      	nop
 8000c80:	371c      	adds	r7, #28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c88 <AS7421_writeRegisters>:

//Write values to consecutive register locations on the AS7421
static void AS7421_writeRegisters(uint8_t startAddr, uint8_t bufferSize, char *val)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	603a      	str	r2, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
 8000c94:	460b      	mov	r3, r1
 8000c96:	71bb      	strb	r3, [r7, #6]
//
//	for (int i = 0; i < bufferSize; i++)
//	{
//		data[i] = val[i];
//	}
	I2C1_burstWrite(AS7421_ADDR, startAddr, bufferSize, val);
 8000c98:	79ba      	ldrb	r2, [r7, #6]
 8000c9a:	79f9      	ldrb	r1, [r7, #7]
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	2064      	movs	r0, #100	; 0x64
 8000ca0:	f001 fb22 	bl	80022e8 <I2C1_burstWrite>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <fpu_enable>:

// Enable FPU
void fpu_enable()
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
	/*Enable Floating Point Unit: Enable CP10 and CP11 full access*/
	SCB->CPACR |= (1U<<20);
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <fpu_enable+0x50>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb6:	4a11      	ldr	r2, [pc, #68]	; (8000cfc <fpu_enable+0x50>)
 8000cb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |= (1U<<21);
 8000cc0:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <fpu_enable+0x50>)
 8000cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc6:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <fpu_enable+0x50>)
 8000cc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ccc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |= (1U<<22);
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <fpu_enable+0x50>)
 8000cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd6:	4a09      	ldr	r2, [pc, #36]	; (8000cfc <fpu_enable+0x50>)
 8000cd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |= (1U<<23);
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <fpu_enable+0x50>)
 8000ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <fpu_enable+0x50>)
 8000ce8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <isConnected>:

//Returns TRUE if the device sends an ACK indicating it is connected
bool isConnected()
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
	uint32_t timeout = 1000; //Timeout to connect set to 1000ms
 8000d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0a:	60fb      	str	r3, [r7, #12]
	unsigned long startTime = getMillis();
 8000d0c:	f001 fc84 	bl	8002618 <getMillis>
 8000d10:	60b8      	str	r0, [r7, #8]

	while ((getMillis() - startTime) < timeout)
 8000d12:	e035      	b.n	8000d80 <isConnected+0x80>
	{
		volatile int tmp;

		/* Wait until bus not busy */
		while (I2C1->SR2 & (SR2_BUSY)){}
 8000d14:	bf00      	nop
 8000d16:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <isConnected+0x9c>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d1f9      	bne.n	8000d16 <isConnected+0x16>

		/* Generate start condition */
		I2C1->CR1 |= CR1_START;
 8000d22:	4b1e      	ldr	r3, [pc, #120]	; (8000d9c <isConnected+0x9c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a1d      	ldr	r2, [pc, #116]	; (8000d9c <isConnected+0x9c>)
 8000d28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d2c:	6013      	str	r3, [r2, #0]

		/* Wait until start condition flag is set */
		while (!(I2C1->SR1 & (SR1_SB))){}
 8000d2e:	bf00      	nop
 8000d30:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <isConnected+0x9c>)
 8000d32:	695b      	ldr	r3, [r3, #20]
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d0f9      	beq.n	8000d30 <isConnected+0x30>

		/* Transmit slave address + Write (0) */
		I2C1->DR = AS7421_WRITE_ADDR;
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <isConnected+0x9c>)
 8000d3e:	22c8      	movs	r2, #200	; 0xc8
 8000d40:	611a      	str	r2, [r3, #16]

		/* Wait until address flag is set */
		while (!(I2C1->SR1 & (SR1_ADDR))){}
 8000d42:	bf00      	nop
 8000d44:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <isConnected+0x9c>)
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d0f9      	beq.n	8000d44 <isConnected+0x44>

		/* Clear address flag by reading SR2 register */
		tmp = I2C1->SR2;
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <isConnected+0x9c>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	607b      	str	r3, [r7, #4]

		if (I2C1->SR1 & SR1_AF)
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <isConnected+0x9c>)
 8000d58:	695b      	ldr	r3, [r3, #20]
 8000d5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d006      	beq.n	8000d70 <isConnected+0x70>
		{
			//No ACK received, address not acknowledged
			I2C1->CR1 |= CR1_STOP;  // Send STOP condition
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <isConnected+0x9c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <isConnected+0x9c>)
 8000d68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d6c:	6013      	str	r3, [r2, #0]
			continue;
 8000d6e:	e007      	b.n	8000d80 <isConnected+0x80>
		}

		//Address acknowledged, device is connected
		I2C1->CR1 |= CR1_STOP; // Send STOP condition
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <isConnected+0x9c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a09      	ldr	r2, [pc, #36]	; (8000d9c <isConnected+0x9c>)
 8000d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d7a:	6013      	str	r3, [r2, #0]
		return true;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e008      	b.n	8000d92 <isConnected+0x92>
	while ((getMillis() - startTime) < timeout)
 8000d80:	f001 fc4a 	bl	8002618 <getMillis>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8c1      	bhi.n	8000d14 <isConnected+0x14>
	}
	//Timeout to connect has expired, hence device is not connected
	return false;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40005400 	.word	0x40005400

08000da0 <initialize>:

//Initializes the sensor with basic settings
//Returns false if sensor is not detected
bool initialize()
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	SysTick_Init();
 8000da4:	f001 fc06 	bl	80025b4 <SysTick_Init>
	uart2_rxtx_init();
 8000da8:	f001 fc4e 	bl	8002648 <uart2_rxtx_init>
	I2C1_Init();
 8000dac:	f001 f8e2 	bl	8001f74 <I2C1_Init>
	fpu_enable();
 8000db0:	f7ff ff7c 	bl	8000cac <fpu_enable>

	if (isConnected() == false)
 8000db4:	f7ff ffa4 	bl	8000d00 <isConnected>
 8000db8:	4603      	mov	r3, r0
 8000dba:	f083 0301 	eor.w	r3, r3, #1
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <initialize+0x28>
	{
		return false; //Check for sensor presence
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e01e      	b.n	8000e06 <initialize+0x66>
	}

	//Add initialization functions
	configueLEDWait(false);
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f000 f879 	bl	8000ec0 <configueLEDWait>
	setInterLED(2);
 8000dce:	2002      	movs	r0, #2
 8000dd0:	f000 f895 	bl	8000efe <setInterLED>
	configureWaitCycle(true);
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f000 f8a0 	bl	8000f1a <configureWaitCycle>
	configureLEDAuto(false);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f000 f8ee 	bl	8000fbc <configureLEDAuto>
	setWaitTime(10);
 8000de0:	200a      	movs	r0, #10
 8000de2:	f000 f8b9 	bl	8000f58 <setWaitTime>
	setIntegrationTime(20);
 8000de6:	2014      	movs	r0, #20
 8000de8:	f000 f910 	bl	800100c <setIntegrationTime>
	numMeasurements(CONTINUOUS);
 8000dec:	20ff      	movs	r0, #255	; 0xff
 8000dee:	f000 f93f 	bl	8001070 <numMeasurements>
	setIntegrationMode(INTEGRATIONCYLE_ABCD);
 8000df2:	2003      	movs	r0, #3
 8000df4:	f000 f94a 	bl	800108c <setIntegrationMode>
	configureAutozero(true, AZ_WTIME_128US, 0, 1);
 8000df8:	2301      	movs	r3, #1
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2102      	movs	r1, #2
 8000dfe:	2001      	movs	r0, #1
 8000e00:	f000 f968 	bl	80010d4 <configureAutozero>
//	configueLEDWait(false);

	return true;
 8000e04:	2301      	movs	r3, #1
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <startup>:

void startup()
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
	bool works = initialize();
 8000e12:	f7ff ffc5 	bl	8000da0 <initialize>
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
	if (works)
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d012      	beq.n	8000e46 <startup+0x3a>
	{
		setIntegrationTime(65.5);
 8000e20:	2041      	movs	r0, #65	; 0x41
 8000e22:	f000 f8f3 	bl	800100c <setIntegrationTime>
		setWaitTime(5);
 8000e26:	2005      	movs	r0, #5
 8000e28:	f000 f896 	bl	8000f58 <setWaitTime>

		powerup();
 8000e2c:	f000 f9a9 	bl	8001182 <powerup>
		configureSMUX();
 8000e30:	f000 fb48 	bl	80014c4 <configureSMUX>
		configureGain(6); //Sets gain for all ADCs
 8000e34:	2006      	movs	r0, #6
 8000e36:	f000 fb59 	bl	80014ec <configureGain>
		configureLEDs(true, ALL_LEDS, LED_CURRENT_LIMIT_50MA);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	211f      	movs	r1, #31
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f000 fba1 	bl	8001586 <configureLEDs>
 8000e44:	e003      	b.n	8000e4e <startup+0x42>
	}
	else
	{
		printf("Sensor failed to respond \n\r");
 8000e46:	4803      	ldr	r0, [pc, #12]	; (8000e54 <startup+0x48>)
 8000e48:	f002 f9fe 	bl	8003248 <iprintf>
		return;
 8000e4c:	bf00      	nop
	}
}
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	080051b8 	.word	0x080051b8

08000e58 <performMeasurements>:

// Perform Measurements
void performMeasurements(uint16_t arrSpectra[CHANNELSIZE], uint16_t arrTemp[TEMPSIZE])
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
	startMeasurements(true);
 8000e62:	2001      	movs	r0, #1
 8000e64:	f000 fbd6 	bl	8001614 <startMeasurements>
	while (mesurementActive())
 8000e68:	e01c      	b.n	8000ea4 <performMeasurements+0x4c>
	{
		unsigned long startTime = getMillis();
 8000e6a:	f001 fbd5 	bl	8002618 <getMillis>
 8000e6e:	60f8      	str	r0, [r7, #12]
		while (getMeasurementStatus(ADATA) == 0){} //End of measurement, new measurement data can be read if true
 8000e70:	bf00      	nop
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 fc22 	bl	80016bc <getMeasurementStatus>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	f083 0301 	eor.w	r3, r3, #1
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1f6      	bne.n	8000e72 <performMeasurements+0x1a>

		unsigned long endTime = getMillis();
 8000e84:	f001 fbc8 	bl	8002618 <getMillis>
 8000e88:	60b8      	str	r0, [r7, #8]
		printf("TIme to get data: %ld \n\r", endTime - startTime);
 8000e8a:	68ba      	ldr	r2, [r7, #8]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	4619      	mov	r1, r3
 8000e92:	480a      	ldr	r0, [pc, #40]	; (8000ebc <performMeasurements+0x64>)
 8000e94:	f002 f9d8 	bl	8003248 <iprintf>

		getAllSpectralData(arrSpectra); //Reading spectral data channels and passing organized values into arrSpectra
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f000 fe4d 	bl	8001b38 <getAllSpectralData>
		getAllTemperatureData(arrTemp); //Reading temperatures of integration cycles A to D
 8000e9e:	6838      	ldr	r0, [r7, #0]
 8000ea0:	f001 f848 	bl	8001f34 <getAllTemperatureData>
	while (mesurementActive())
 8000ea4:	f000 fbf5 	bl	8001692 <mesurementActive>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d1dd      	bne.n	8000e6a <performMeasurements+0x12>
	}
	stopMeasurements();
 8000eae:	f000 fbd4 	bl	800165a <stopMeasurements>
}
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	080051d4 	.word	0x080051d4

08000ec0 <configueLEDWait>:

//Configure LED_WAIT_OFF or Disable LED_WAIT_OFF to modify waiting time between integration cycle A to D
void configueLEDWait(bool setting)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
	uint8_t value = AS7421_readRegister(CFG_MISC); //Read existing state
 8000eca:	2038      	movs	r0, #56	; 0x38
 8000ecc:	f7ff fe74 	bl	8000bb8 <AS7421_readRegister>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	73fb      	strb	r3, [r7, #15]
	if (setting)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d004      	beq.n	8000ee4 <configueLEDWait+0x24>
	{
		value |= (1U << 2); //Set LED_WAIT_OFF bit (bit 2)
 8000eda:	7bfb      	ldrb	r3, [r7, #15]
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	73fb      	strb	r3, [r7, #15]
 8000ee2:	e003      	b.n	8000eec <configueLEDWait+0x2c>
	}
	else
	{
		value &= ~(1U << 2); //Reset LED_WAIT_OFF bit (bit 2)
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	f023 0304 	bic.w	r3, r3, #4
 8000eea:	73fb      	strb	r3, [r7, #15]
	}

	AS7421_writeRegister(CFG_MISC, value); //Write value to CFG_MISC register to configure the LED_WAIT_OFF bit
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	2038      	movs	r0, #56	; 0x38
 8000ef2:	f7ff fe86 	bl	8000c02 <AS7421_writeRegister>
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <setInterLED>:

// Set Wait time (LED_WAIT) between switching on the LED and begin of integration/modulation. Wait time = 1024us * waitTime
void setInterLED(uint8_t waitTime)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	71fb      	strb	r3, [r7, #7]
	if (waitTime > 255)
	{
        waitTime = 255; // Set to maximum value if out of range
	}

	AS7421_writeRegister(LED_WAIT, waitTime);
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	203d      	movs	r0, #61	; 0x3d
 8000f0e:	f7ff fe78 	bl	8000c02 <AS7421_writeRegister>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <configureWaitCycle>:

//Configure the waiting time between integration cycle A to D (programmable with LTF_WTIME)
void configureWaitCycle(bool setting)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b084      	sub	sp, #16
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	4603      	mov	r3, r0
 8000f22:	71fb      	strb	r3, [r7, #7]
	uint8_t value = AS7421_readRegister(CFG_MISC); //Read existing state
 8000f24:	2038      	movs	r0, #56	; 0x38
 8000f26:	f7ff fe47 	bl	8000bb8 <AS7421_readRegister>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	73fb      	strb	r3, [r7, #15]
	if (setting)
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d004      	beq.n	8000f3e <configureWaitCycle+0x24>
	{
		value |= (1U << 1); //Set WAIT_CYCLE_ON bit (bit 1)
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	f043 0302 	orr.w	r3, r3, #2
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	e003      	b.n	8000f46 <configureWaitCycle+0x2c>
	}
	else
	{
		value &= ~(1U << 1); //Reset WAIT_CYCLE_ON bit (bit 1)
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	f023 0302 	bic.w	r3, r3, #2
 8000f44:	73fb      	strb	r3, [r7, #15]
	}

	AS7421_writeRegister(CFG_MISC, value); //Write value to CFG_MISC register to configure the WAIT_CYCLE_ON bit
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	2038      	movs	r0, #56	; 0x38
 8000f4c:	f7ff fe59 	bl	8000c02 <AS7421_writeRegister>
}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <setWaitTime>:

//Programs the wait time (WTIME) in ms between two consecutive spectral measurements
void setWaitTime(uint8_t waitTime)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
	uint32_t waitCounts = ((waitTime/1000) * F_CLKMOD) - 1;
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	4a12      	ldr	r2, [pc, #72]	; (8000fb0 <setWaitTime+0x58>)
 8000f66:	fb82 1203 	smull	r1, r2, r2, r3
 8000f6a:	1192      	asrs	r2, r2, #6
 8000f6c:	17db      	asrs	r3, r3, #31
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	4a10      	ldr	r2, [pc, #64]	; (8000fb4 <setWaitTime+0x5c>)
 8000f72:	fb02 f303 	mul.w	r3, r2, r3
 8000f76:	3b01      	subs	r3, #1
 8000f78:	60fb      	str	r3, [r7, #12]

	char data[3] = {0};
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <setWaitTime+0x60>)
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	813b      	strh	r3, [r7, #8]
 8000f80:	2300      	movs	r3, #0
 8000f82:	72bb      	strb	r3, [r7, #10]
	data[0] = waitCounts & 0xFF; //low byte
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	723b      	strb	r3, [r7, #8]
	data[1] = (waitCounts >> 8) & 0xFF; //mid byte
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	727b      	strb	r3, [r7, #9]
	data[2] = (waitCounts >> 16) & 0xFF; //high byte
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	0c1b      	lsrs	r3, r3, #16
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	72bb      	strb	r3, [r7, #10]

	AS7421_writeRegisters(LTF_WTIME, 3, data);
 8000f9a:	f107 0308 	add.w	r3, r7, #8
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	2103      	movs	r1, #3
 8000fa2:	2064      	movs	r0, #100	; 0x64
 8000fa4:	f7ff fe70 	bl	8000c88 <AS7421_writeRegisters>
}
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	10624dd3 	.word	0x10624dd3
 8000fb4:	000f4240 	.word	0x000f4240
 8000fb8:	080051f0 	.word	0x080051f0

08000fbc <configureLEDAuto>:

//Controls NIR light source during spectral measurement
void configureLEDAuto(bool mode)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	uint8_t value = AS7421_readRegister(ENABLE); //Read existing state
 8000fc6:	2060      	movs	r0, #96	; 0x60
 8000fc8:	f7ff fdf6 	bl	8000bb8 <AS7421_readRegister>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	73fb      	strb	r3, [r7, #15]
	if (mode)
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d008      	beq.n	8000fe8 <configureLEDAuto+0x2c>
	{
		value |= (1U << 4); //Set LED_AUTO bit (bit 4 and 5)
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	f043 0310 	orr.w	r3, r3, #16
 8000fdc:	73fb      	strb	r3, [r7, #15]
		value |= (1U << 5);
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	f043 0320 	orr.w	r3, r3, #32
 8000fe4:	73fb      	strb	r3, [r7, #15]
 8000fe6:	e007      	b.n	8000ff8 <configureLEDAuto+0x3c>
	}
	else
	{
		value &= ~(1U << 4); //Reset LED_AUTO bit (bit 4 and 5)
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	f023 0310 	bic.w	r3, r3, #16
 8000fee:	73fb      	strb	r3, [r7, #15]
		value &= ~(1U << 5);
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	f023 0320 	bic.w	r3, r3, #32
 8000ff6:	73fb      	strb	r3, [r7, #15]
	}

	AS7421_writeRegister(ENABLE, value);
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	2060      	movs	r0, #96	; 0x60
 8000ffe:	f7ff fe00 	bl	8000c02 <AS7421_writeRegister>
}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <setIntegrationTime>:

//Programs the integration time (ITIME) in ms of the LTF converter
void setIntegrationTime(uint8_t intTime)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
	uint32_t intCounts = ((intTime/1000) * F_CLKMOD) - 1;
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	4a12      	ldr	r2, [pc, #72]	; (8001064 <setIntegrationTime+0x58>)
 800101a:	fb82 1203 	smull	r1, r2, r2, r3
 800101e:	1192      	asrs	r2, r2, #6
 8001020:	17db      	asrs	r3, r3, #31
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	4a10      	ldr	r2, [pc, #64]	; (8001068 <setIntegrationTime+0x5c>)
 8001026:	fb02 f303 	mul.w	r3, r2, r3
 800102a:	3b01      	subs	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]

	char data[3] = {0};
 800102e:	4b0f      	ldr	r3, [pc, #60]	; (800106c <setIntegrationTime+0x60>)
 8001030:	881b      	ldrh	r3, [r3, #0]
 8001032:	813b      	strh	r3, [r7, #8]
 8001034:	2300      	movs	r3, #0
 8001036:	72bb      	strb	r3, [r7, #10]
	data[0] = intCounts & 0xFF;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	723b      	strb	r3, [r7, #8]
	data[1] = (intCounts >> 8) & 0xFF;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	b2db      	uxtb	r3, r3
 8001044:	727b      	strb	r3, [r7, #9]
	data[2] = (intCounts >> 16) & 0xFF;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	0c1b      	lsrs	r3, r3, #16
 800104a:	b2db      	uxtb	r3, r3
 800104c:	72bb      	strb	r3, [r7, #10]

	AS7421_writeRegisters(LTF_ITIME, 3, data);
 800104e:	f107 0308 	add.w	r3, r7, #8
 8001052:	461a      	mov	r2, r3
 8001054:	2103      	movs	r1, #3
 8001056:	2061      	movs	r0, #97	; 0x61
 8001058:	f7ff fe16 	bl	8000c88 <AS7421_writeRegisters>
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	10624dd3 	.word	0x10624dd3
 8001068:	000f4240 	.word	0x000f4240
 800106c:	080051f0 	.word	0x080051f0

08001070 <numMeasurements>:

void numMeasurements(uint8_t counts) //specifying number of measurements
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
	if (counts > 255)
	{
		counts = 255; // Set to maximum value if out of range
	}

	AS7421_writeRegister(LTF_ICOUNT, counts);
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	4619      	mov	r1, r3
 800107e:	2069      	movs	r0, #105	; 0x69
 8001080:	f7ff fdbf 	bl	8000c02 <AS7421_writeRegister>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <setIntegrationMode>:

//16 channels (A), 32 channels (AB), 48 channels (ABC), 64 channels (ABCD)
void setIntegrationMode(uint8_t mode)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
	if (mode > INTEGRATIONCYLE_ABCD)
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b03      	cmp	r3, #3
 800109a:	d901      	bls.n	80010a0 <setIntegrationMode+0x14>
	{
		mode = INTEGRATIONCYLE_ABCD; //Limit mode to 2 bits
 800109c:	2303      	movs	r3, #3
 800109e:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t value = AS7421_readRegister(CFG_LTF); //Read existing state
 80010a0:	2067      	movs	r0, #103	; 0x67
 80010a2:	f7ff fd89 	bl	8000bb8 <AS7421_readRegister>
 80010a6:	4603      	mov	r3, r0
 80010a8:	73fb      	strb	r3, [r7, #15]
	value &= 0b11100111; //Clear LTF_CYCLE bits
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	f023 0318 	bic.w	r3, r3, #24
 80010b0:	73fb      	strb	r3, [r7, #15]
	value |= (mode << 3); //Set LTF_CYCLE bits with user's choice
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	b25a      	sxtb	r2, r3
 80010b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010bc:	4313      	orrs	r3, r2
 80010be:	b25b      	sxtb	r3, r3
 80010c0:	73fb      	strb	r3, [r7, #15]

	AS7421_writeRegister(CFG_LTF, value);
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	4619      	mov	r1, r3
 80010c6:	2067      	movs	r0, #103	; 0x67
 80010c8:	f7ff fd9b 	bl	8000c02 <AS7421_writeRegister>
}
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <configureAutozero>:


void configureAutozero(bool enable, uint8_t az_waitTime, uint8_t iteration, uint8_t cycle)
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4604      	mov	r4, r0
 80010dc:	4608      	mov	r0, r1
 80010de:	4611      	mov	r1, r2
 80010e0:	461a      	mov	r2, r3
 80010e2:	4623      	mov	r3, r4
 80010e4:	71fb      	strb	r3, [r7, #7]
 80010e6:	4603      	mov	r3, r0
 80010e8:	71bb      	strb	r3, [r7, #6]
 80010ea:	460b      	mov	r3, r1
 80010ec:	717b      	strb	r3, [r7, #5]
 80010ee:	4613      	mov	r3, r2
 80010f0:	713b      	strb	r3, [r7, #4]
	uint8_t value = AS7421_readRegister(CFG_AZ);
 80010f2:	206d      	movs	r0, #109	; 0x6d
 80010f4:	f7ff fd60 	bl	8000bb8 <AS7421_readRegister>
 80010f8:	4603      	mov	r3, r0
 80010fa:	73fb      	strb	r3, [r7, #15]

	value |= (1U << 7); //Enable AZ_ON (bit 7)
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001102:	73fb      	strb	r3, [r7, #15]
	if (az_waitTime > 0b11)
 8001104:	79bb      	ldrb	r3, [r7, #6]
 8001106:	2b03      	cmp	r3, #3
 8001108:	d901      	bls.n	800110e <configureAutozero+0x3a>
	{
		az_waitTime = 0b11;
 800110a:	2303      	movs	r3, #3
 800110c:	71bb      	strb	r3, [r7, #6]
	}
    value &= ~(0b11 << 5);  // Clear the AZ_WTIME bits (bits 5 and 6)
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001114:	73fb      	strb	r3, [r7, #15]
	value |= (az_waitTime << 5); //Set AZ_WTIME (bit 5 and 6)
 8001116:	79bb      	ldrb	r3, [r7, #6]
 8001118:	015b      	lsls	r3, r3, #5
 800111a:	b25a      	sxtb	r2, r3
 800111c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001120:	4313      	orrs	r3, r2
 8001122:	b25b      	sxtb	r3, r3
 8001124:	73fb      	strb	r3, [r7, #15]

    value &= ~(1U << 4);  // Clear the AZ_EN bit
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	f023 0310 	bic.w	r3, r3, #16
 800112c:	73fb      	strb	r3, [r7, #15]
	value |= (enable << 4); //Set AZ_EN (bit 4)
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	b25a      	sxtb	r2, r3
 8001134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001138:	4313      	orrs	r3, r2
 800113a:	b25b      	sxtb	r3, r3
 800113c:	73fb      	strb	r3, [r7, #15]

	value &= ~(1U << 3);  // Clear the AZ_CYCLE bit
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	f023 0308 	bic.w	r3, r3, #8
 8001144:	73fb      	strb	r3, [r7, #15]
	value |= (cycle << 3); //Set AZ_CYCLE (bit 3)
 8001146:	793b      	ldrb	r3, [r7, #4]
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	b25a      	sxtb	r2, r3
 800114c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001150:	4313      	orrs	r3, r2
 8001152:	b25b      	sxtb	r3, r3
 8001154:	73fb      	strb	r3, [r7, #15]

	if (iteration > 0b111)
 8001156:	797b      	ldrb	r3, [r7, #5]
 8001158:	2b07      	cmp	r3, #7
 800115a:	d901      	bls.n	8001160 <configureAutozero+0x8c>
	{
		iteration = 0b111;
 800115c:	2307      	movs	r3, #7
 800115e:	717b      	strb	r3, [r7, #5]
	}
    value &= ~0b111;  // Clear the iteration bits (bits 0, 1, and 2)
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	f023 0307 	bic.w	r3, r3, #7
 8001166:	73fb      	strb	r3, [r7, #15]
	value |= iteration;
 8001168:	7bfa      	ldrb	r2, [r7, #15]
 800116a:	797b      	ldrb	r3, [r7, #5]
 800116c:	4313      	orrs	r3, r2
 800116e:	73fb      	strb	r3, [r7, #15]

    AS7421_writeRegister(CFG_AZ, value);
 8001170:	7bfb      	ldrb	r3, [r7, #15]
 8001172:	4619      	mov	r1, r3
 8001174:	206d      	movs	r0, #109	; 0x6d
 8001176:	f7ff fd44 	bl	8000c02 <AS7421_writeRegister>
}
 800117a:	bf00      	nop
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	bd90      	pop	{r4, r7, pc}

08001182 <powerup>:

// Internal oscillator enabled, potentially write 0x44 to register 0x6F, 0x20 to register 0x6E, 0x00 to register 0x6F
void powerup()
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
	uint8_t value = AS7421_readRegister(ENABLE); //Read existing state
 8001188:	2060      	movs	r0, #96	; 0x60
 800118a:	f7ff fd15 	bl	8000bb8 <AS7421_readRegister>
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
	value |= (1U << 0); //Set PON (bit 0)
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	71fb      	strb	r3, [r7, #7]
    AS7421_writeRegister(ENABLE, value);
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	4619      	mov	r1, r3
 800119e:	2060      	movs	r0, #96	; 0x60
 80011a0:	f7ff fd2f 	bl	8000c02 <AS7421_writeRegister>

    //After power on reset the following commands have to be written prior accessing other registers
    AS7421_writeRegister(0x6F, 0x44);
 80011a4:	2144      	movs	r1, #68	; 0x44
 80011a6:	206f      	movs	r0, #111	; 0x6f
 80011a8:	f7ff fd2b 	bl	8000c02 <AS7421_writeRegister>
    AS7421_writeRegister(0x6E, 0x20);
 80011ac:	2120      	movs	r1, #32
 80011ae:	206e      	movs	r0, #110	; 0x6e
 80011b0:	f7ff fd27 	bl	8000c02 <AS7421_writeRegister>
    AS7421_writeRegister(0x6F, 0x00);
 80011b4:	2100      	movs	r1, #0
 80011b6:	206f      	movs	r0, #111	; 0x6f
 80011b8:	f7ff fd23 	bl	8000c02 <AS7421_writeRegister>
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <sleep>:
	AS7421_writeRegister(CFG_MISC, value);
}

// Internal oscillator disabled
void sleep()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	uint8_t value = AS7421_readRegister(ENABLE); //Read existing state
 80011ca:	2060      	movs	r0, #96	; 0x60
 80011cc:	f7ff fcf4 	bl	8000bb8 <AS7421_readRegister>
 80011d0:	4603      	mov	r3, r0
 80011d2:	71fb      	strb	r3, [r7, #7]
	value &= ~(1U << 0); //Reset PON (bit 0)
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	f023 0301 	bic.w	r3, r3, #1
 80011da:	71fb      	strb	r3, [r7, #7]
    AS7421_writeRegister(ENABLE, value);
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	4619      	mov	r1, r3
 80011e0:	2060      	movs	r0, #96	; 0x60
 80011e2:	f7ff fd0e 	bl	8000c02 <AS7421_writeRegister>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <writeRAMData>:

void writeRAMData(uint8_t *smuxData, uint8_t offset)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
 80011f6:	460b      	mov	r3, r1
 80011f8:	70fb      	strb	r3, [r7, #3]
	if (offset == INTA_OFFSET)
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d136      	bne.n	800126e <writeRAMData+0x80>
	{
		AS7421_writeRegister(CFG_RAM_0, smuxData[0]);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	2040      	movs	r0, #64	; 0x40
 8001208:	f7ff fcfb 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_1, smuxData[1]);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3301      	adds	r3, #1
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	4619      	mov	r1, r3
 8001214:	2041      	movs	r0, #65	; 0x41
 8001216:	f7ff fcf4 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_2, smuxData[2]);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3302      	adds	r3, #2
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4619      	mov	r1, r3
 8001222:	2042      	movs	r0, #66	; 0x42
 8001224:	f7ff fced 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_3, smuxData[3]);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3303      	adds	r3, #3
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4619      	mov	r1, r3
 8001230:	2043      	movs	r0, #67	; 0x43
 8001232:	f7ff fce6 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_4, smuxData[4]);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3304      	adds	r3, #4
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	2044      	movs	r0, #68	; 0x44
 8001240:	f7ff fcdf 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_5, smuxData[5]);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	3305      	adds	r3, #5
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	4619      	mov	r1, r3
 800124c:	2045      	movs	r0, #69	; 0x45
 800124e:	f7ff fcd8 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_6, smuxData[6]);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3306      	adds	r3, #6
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4619      	mov	r1, r3
 800125a:	2046      	movs	r0, #70	; 0x46
 800125c:	f7ff fcd1 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_7, smuxData[7]);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3307      	adds	r3, #7
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	4619      	mov	r1, r3
 8001268:	2047      	movs	r0, #71	; 0x47
 800126a:	f7ff fcca 	bl	8000c02 <AS7421_writeRegister>
	}

	if (offset == INTB_OFFSET)
 800126e:	78fb      	ldrb	r3, [r7, #3]
 8001270:	2b08      	cmp	r3, #8
 8001272:	d136      	bne.n	80012e2 <writeRAMData+0xf4>
	{
		AS7421_writeRegister(CFG_RAM_8, smuxData[0]);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	2048      	movs	r0, #72	; 0x48
 800127c:	f7ff fcc1 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_9, smuxData[1]);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3301      	adds	r3, #1
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	4619      	mov	r1, r3
 8001288:	2049      	movs	r0, #73	; 0x49
 800128a:	f7ff fcba 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_10, smuxData[2]);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3302      	adds	r3, #2
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	204a      	movs	r0, #74	; 0x4a
 8001298:	f7ff fcb3 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_11, smuxData[3]);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3303      	adds	r3, #3
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	4619      	mov	r1, r3
 80012a4:	204b      	movs	r0, #75	; 0x4b
 80012a6:	f7ff fcac 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_12, smuxData[4]);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3304      	adds	r3, #4
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	204c      	movs	r0, #76	; 0x4c
 80012b4:	f7ff fca5 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_13, smuxData[5]);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3305      	adds	r3, #5
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	4619      	mov	r1, r3
 80012c0:	204d      	movs	r0, #77	; 0x4d
 80012c2:	f7ff fc9e 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_14, smuxData[6]);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	3306      	adds	r3, #6
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	204e      	movs	r0, #78	; 0x4e
 80012d0:	f7ff fc97 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_15, smuxData[7]);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3307      	adds	r3, #7
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	4619      	mov	r1, r3
 80012dc:	204f      	movs	r0, #79	; 0x4f
 80012de:	f7ff fc90 	bl	8000c02 <AS7421_writeRegister>
	}

	if (offset == INTC_OFFSET)
 80012e2:	78fb      	ldrb	r3, [r7, #3]
 80012e4:	2b10      	cmp	r3, #16
 80012e6:	d136      	bne.n	8001356 <writeRAMData+0x168>
	{
		AS7421_writeRegister(CFG_RAM_16, smuxData[0]);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	2050      	movs	r0, #80	; 0x50
 80012f0:	f7ff fc87 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_17, smuxData[1]);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3301      	adds	r3, #1
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	4619      	mov	r1, r3
 80012fc:	2051      	movs	r0, #81	; 0x51
 80012fe:	f7ff fc80 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_18, smuxData[2]);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3302      	adds	r3, #2
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	2052      	movs	r0, #82	; 0x52
 800130c:	f7ff fc79 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_19, smuxData[3]);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3303      	adds	r3, #3
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	4619      	mov	r1, r3
 8001318:	2053      	movs	r0, #83	; 0x53
 800131a:	f7ff fc72 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_20, smuxData[4]);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3304      	adds	r3, #4
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	2054      	movs	r0, #84	; 0x54
 8001328:	f7ff fc6b 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_21, smuxData[5]);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3305      	adds	r3, #5
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	4619      	mov	r1, r3
 8001334:	2055      	movs	r0, #85	; 0x55
 8001336:	f7ff fc64 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_22, smuxData[6]);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	3306      	adds	r3, #6
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4619      	mov	r1, r3
 8001342:	2056      	movs	r0, #86	; 0x56
 8001344:	f7ff fc5d 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_23, smuxData[7]);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3307      	adds	r3, #7
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	4619      	mov	r1, r3
 8001350:	2057      	movs	r0, #87	; 0x57
 8001352:	f7ff fc56 	bl	8000c02 <AS7421_writeRegister>
	}

	if (offset == INTD_OFFSET)
 8001356:	78fb      	ldrb	r3, [r7, #3]
 8001358:	2b18      	cmp	r3, #24
 800135a:	d136      	bne.n	80013ca <writeRAMData+0x1dc>
	{
		AS7421_writeRegister(CFG_RAM_24, smuxData[0]);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	2058      	movs	r0, #88	; 0x58
 8001364:	f7ff fc4d 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_25, smuxData[1]);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3301      	adds	r3, #1
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	4619      	mov	r1, r3
 8001370:	2059      	movs	r0, #89	; 0x59
 8001372:	f7ff fc46 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_26, smuxData[2]);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3302      	adds	r3, #2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
 800137e:	205a      	movs	r0, #90	; 0x5a
 8001380:	f7ff fc3f 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_27, smuxData[3]);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3303      	adds	r3, #3
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	4619      	mov	r1, r3
 800138c:	205b      	movs	r0, #91	; 0x5b
 800138e:	f7ff fc38 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_28, smuxData[4]);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3304      	adds	r3, #4
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4619      	mov	r1, r3
 800139a:	205c      	movs	r0, #92	; 0x5c
 800139c:	f7ff fc31 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_29, smuxData[5]);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3305      	adds	r3, #5
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	4619      	mov	r1, r3
 80013a8:	205d      	movs	r0, #93	; 0x5d
 80013aa:	f7ff fc2a 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_30, smuxData[6]);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3306      	adds	r3, #6
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	4619      	mov	r1, r3
 80013b6:	205e      	movs	r0, #94	; 0x5e
 80013b8:	f7ff fc23 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_31, smuxData[7]);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3307      	adds	r3, #7
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	4619      	mov	r1, r3
 80013c4:	205f      	movs	r0, #95	; 0x5f
 80013c6:	f7ff fc1c 	bl	8000c02 <AS7421_writeRegister>
	}
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <zeroSMUX>:

// Clear RAM registers with SMUX
void zeroSMUX()
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b084      	sub	sp, #16
 80013d6:	af00      	add	r7, sp, #0
	uint8_t zeros[8] = {0};
 80013d8:	2300      	movs	r3, #0
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
	for (int i = SMUX_A_ADDR; i <= SMUX_D_ADDR; i++)
 80013e0:	230c      	movs	r3, #12
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	e01c      	b.n	8001420 <zeroSMUX+0x4e>
	{
		AS7421_writeRegister(CFG_RAM, i);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	4619      	mov	r1, r3
 80013ec:	206a      	movs	r0, #106	; 0x6a
 80013ee:	f7ff fc08 	bl	8000c02 <AS7421_writeRegister>

		writeRAMData(zeros, 0);
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fef9 	bl	80011ee <writeRAMData>
		writeRAMData(zeros, 1);
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	2101      	movs	r1, #1
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fef4 	bl	80011ee <writeRAMData>
		writeRAMData(zeros, 2);
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2102      	movs	r1, #2
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff feef 	bl	80011ee <writeRAMData>
		writeRAMData(zeros, 3);
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	2103      	movs	r1, #3
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff feea 	bl	80011ee <writeRAMData>
	for (int i = SMUX_A_ADDR; i <= SMUX_D_ADDR; i++)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	3301      	adds	r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2b0f      	cmp	r3, #15
 8001424:	dddf      	ble.n	80013e6 <zeroSMUX+0x14>
	}
}
 8001426:	bf00      	nop
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <setSMUX>:

// Set SMUX region (A,B,C, or D) with ramOffsetAddr
void setSMUX(uint8_t ramOffsetAddr, uint8_t offset, uint8_t* configvalues)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	603a      	str	r2, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
 800143c:	460b      	mov	r3, r1
 800143e:	71bb      	strb	r3, [r7, #6]
	AS7421_writeRegister(CFG_RAM, ramOffsetAddr); //Writing the ram offset(SMUX addresses) for programming the configuration into RAM
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	4619      	mov	r1, r3
 8001444:	206a      	movs	r0, #106	; 0x6a
 8001446:	f7ff fbdc 	bl	8000c02 <AS7421_writeRegister>
	writeRAMData(configvalues, offset); //Writing to respective ram registers after setting RAM offset
 800144a:	79bb      	ldrb	r3, [r7, #6]
 800144c:	4619      	mov	r1, r3
 800144e:	6838      	ldr	r0, [r7, #0]
 8001450:	f7ff fecd 	bl	80011ee <writeRAMData>
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <setSMUX_A>:

// Set SMUX for integration cycle A and write to ram registers
void setSMUX_A(uint8_t* configvalues)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	setSMUX(SMUX_A_ADDR, INTA_OFFSET, configvalues);
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	2100      	movs	r1, #0
 8001468:	200c      	movs	r0, #12
 800146a:	f7ff ffe1 	bl	8001430 <setSMUX>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <setSMUX_B>:

// Set SMUX for integration cycle B and write to ram registers
void setSMUX_B(uint8_t* configvalues)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
	setSMUX(SMUX_B_ADDR, INTB_OFFSET, configvalues);
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	2108      	movs	r1, #8
 8001482:	200d      	movs	r0, #13
 8001484:	f7ff ffd4 	bl	8001430 <setSMUX>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <setSMUX_C>:

// Set SMUX for integration cycle C and write to ram registers
void setSMUX_C(uint8_t* configvalues)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	setSMUX(SMUX_C_ADDR, INTC_OFFSET, configvalues);
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	2110      	movs	r1, #16
 800149c:	200e      	movs	r0, #14
 800149e:	f7ff ffc7 	bl	8001430 <setSMUX>
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <setSMUX_D>:

// Set SMUX for integration cycle D and write to ram registers
void setSMUX_D(uint8_t* configvalues)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
	setSMUX(SMUX_D_ADDR, INTD_OFFSET, configvalues);
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	2118      	movs	r1, #24
 80014b6:	200f      	movs	r0, #15
 80014b8:	f7ff ffba 	bl	8001430 <setSMUX>
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <configureSMUX>:

// Configure all SMUX registers either with a specified default array of bytes or the config_values
void configureSMUX()
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
    zeroSMUX();
 80014c8:	f7ff ff83 	bl	80013d2 <zeroSMUX>

    // Configure SMUX registers
	setSMUX_A(config_values);
 80014cc:	4806      	ldr	r0, [pc, #24]	; (80014e8 <configureSMUX+0x24>)
 80014ce:	f7ff ffc5 	bl	800145c <setSMUX_A>
	setSMUX_B(config_values);
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <configureSMUX+0x24>)
 80014d4:	f7ff ffcf 	bl	8001476 <setSMUX_B>
	setSMUX_C(config_values);
 80014d8:	4803      	ldr	r0, [pc, #12]	; (80014e8 <configureSMUX+0x24>)
 80014da:	f7ff ffd9 	bl	8001490 <setSMUX_C>
	setSMUX_D(config_values);
 80014de:	4802      	ldr	r0, [pc, #8]	; (80014e8 <configureSMUX+0x24>)
 80014e0:	f7ff ffe3 	bl	80014aa <setSMUX_D>
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000000 	.word	0x20000000

080014ec <configureGain>:

//2^x gain, i.e. gain of 5 = 2^5 = 128x
void configureGain(uint8_t gain)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
	if (gain > 8)
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	2b08      	cmp	r3, #8
 80014fa:	d901      	bls.n	8001500 <configureGain+0x14>
	{
		gain = 8;
 80014fc:	2308      	movs	r3, #8
 80014fe:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t data[8] = {gain};
 8001500:	f107 0308 	add.w	r3, r7, #8
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	723b      	strb	r3, [r7, #8]

	AS7421_writeRegister(CFG_RAM, ASETUP_AB);
 800150e:	2110      	movs	r1, #16
 8001510:	206a      	movs	r0, #106	; 0x6a
 8001512:	f7ff fb76 	bl	8000c02 <AS7421_writeRegister>

	writeRAMData(data, 0);
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	2100      	movs	r1, #0
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fe66 	bl	80011ee <writeRAMData>
	writeRAMData(data, 1);
 8001522:	f107 0308 	add.w	r3, r7, #8
 8001526:	2101      	movs	r1, #1
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fe60 	bl	80011ee <writeRAMData>
	writeRAMData(data, 2);
 800152e:	f107 0308 	add.w	r3, r7, #8
 8001532:	2102      	movs	r1, #2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fe5a 	bl	80011ee <writeRAMData>
	writeRAMData(data, 3);
 800153a:	f107 0308 	add.w	r3, r7, #8
 800153e:	2103      	movs	r1, #3
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fe54 	bl	80011ee <writeRAMData>

	AS7421_writeRegister(CFG_RAM, ASETUP_CD);
 8001546:	2111      	movs	r1, #17
 8001548:	206a      	movs	r0, #106	; 0x6a
 800154a:	f7ff fb5a 	bl	8000c02 <AS7421_writeRegister>

	writeRAMData(data, 0);
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fe4a 	bl	80011ee <writeRAMData>
	writeRAMData(data, 1);
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	2101      	movs	r1, #1
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fe44 	bl	80011ee <writeRAMData>
	writeRAMData(data, 2);
 8001566:	f107 0308 	add.w	r3, r7, #8
 800156a:	2102      	movs	r1, #2
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fe3e 	bl	80011ee <writeRAMData>
	writeRAMData(data, 3);
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	2103      	movs	r1, #3
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fe38 	bl	80011ee <writeRAMData>
}
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <configureLEDs>:

// Configure LED register
void configureLEDs(bool enable, uint8_t led, uint8_t current)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b084      	sub	sp, #16
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	71fb      	strb	r3, [r7, #7]
 8001590:	460b      	mov	r3, r1
 8001592:	71bb      	strb	r3, [r7, #6]
 8001594:	4613      	mov	r3, r2
 8001596:	717b      	strb	r3, [r7, #5]
	//Clearing LED config register to default
	AS7421_writeRegister(CFG_LED, 0);
 8001598:	2100      	movs	r1, #0
 800159a:	2068      	movs	r0, #104	; 0x68
 800159c:	f7ff fb31 	bl	8000c02 <AS7421_writeRegister>

	uint8_t value = AS7421_readRegister(CFG_LED);
 80015a0:	2068      	movs	r0, #104	; 0x68
 80015a2:	f7ff fb09 	bl	8000bb8 <AS7421_readRegister>
 80015a6:	4603      	mov	r3, r0
 80015a8:	73fb      	strb	r3, [r7, #15]

	value |= (enable << 7); //Configure SET_LED_ON (bit 7)
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	01db      	lsls	r3, r3, #7
 80015ae:	b25a      	sxtb	r2, r3
 80015b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	b25b      	sxtb	r3, r3
 80015b8:	73fb      	strb	r3, [r7, #15]

	for (int i = LED_MULT_0; i <= LED_MULT_3; i++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	e014      	b.n	80015ea <configureLEDs+0x64>
	{
		value |= (i << 4); //Enable LED_OFFSET (bits 4 and 5)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	011b      	lsls	r3, r3, #4
 80015c4:	b25a      	sxtb	r2, r3
 80015c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b25b      	sxtb	r3, r3
 80015ce:	73fb      	strb	r3, [r7, #15]
		AS7421_writeRegister(CFG_LED, value); // Setting Offset address for programming the values for LED_MULT
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	4619      	mov	r1, r3
 80015d4:	2068      	movs	r0, #104	; 0x68
 80015d6:	f7ff fb14 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_LED_MULT, led);
 80015da:	79bb      	ldrb	r3, [r7, #6]
 80015dc:	4619      	mov	r1, r3
 80015de:	2039      	movs	r0, #57	; 0x39
 80015e0:	f7ff fb0f 	bl	8000c02 <AS7421_writeRegister>
	for (int i = LED_MULT_0; i <= LED_MULT_3; i++)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	3301      	adds	r3, #1
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	2b03      	cmp	r3, #3
 80015ee:	dde7      	ble.n	80015c0 <configureLEDs+0x3a>
	}

	if (current > LED_CURRENT_LIMIT_75MA)
 80015f0:	797b      	ldrb	r3, [r7, #5]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d901      	bls.n	80015fa <configureLEDs+0x74>
	{
		current = LED_CURRENT_LIMIT_75MA;
 80015f6:	2301      	movs	r3, #1
 80015f8:	717b      	strb	r3, [r7, #5]
	}
	value |= (current << 0);
 80015fa:	7bfa      	ldrb	r2, [r7, #15]
 80015fc:	797b      	ldrb	r3, [r7, #5]
 80015fe:	4313      	orrs	r3, r2
 8001600:	73fb      	strb	r3, [r7, #15]

	AS7421_writeRegister(CFG_LED, value);
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	4619      	mov	r1, r3
 8001606:	2068      	movs	r0, #104	; 0x68
 8001608:	f7ff fafb 	bl	8000c02 <AS7421_writeRegister>
}
 800160c:	bf00      	nop
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <startMeasurements>:

// Start spectral measurement
void startMeasurements(bool withLED)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
	//Turn on LEDs
	configureLEDAuto(withLED);
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fccb 	bl	8000fbc <configureLEDAuto>

	uint8_t value = AS7421_readRegister(ENABLE); //Read existing state
 8001626:	2060      	movs	r0, #96	; 0x60
 8001628:	f7ff fac6 	bl	8000bb8 <AS7421_readRegister>
 800162c:	4603      	mov	r3, r0
 800162e:	73fb      	strb	r3, [r7, #15]

	// Power on
	value |= (1U << 0); //Set PON (bit 0)
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	f043 0301 	orr.w	r3, r3, #1
 8001636:	73fb      	strb	r3, [r7, #15]

    //Spectral measurement enabled
    value |= (1U << 1); //Set LTF_EN (bit 1)
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	f043 0302 	orr.w	r3, r3, #2
 800163e:	73fb      	strb	r3, [r7, #15]

    //Automatic power down by temperature measurement
    value |= (1U << 2); //Set TSD_EN (bit 2)
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	73fb      	strb	r3, [r7, #15]

    AS7421_writeRegister(ENABLE, value);
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	4619      	mov	r1, r3
 800164c:	2060      	movs	r0, #96	; 0x60
 800164e:	f7ff fad8 	bl	8000c02 <AS7421_writeRegister>
}
 8001652:	bf00      	nop
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <stopMeasurements>:

void stopMeasurements()
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
	uint8_t value = AS7421_readRegister(ENABLE); //Read existing state
 8001660:	2060      	movs	r0, #96	; 0x60
 8001662:	f7ff faa9 	bl	8000bb8 <AS7421_readRegister>
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]

    //Spectral measurement enabled
    value &= ~(1U << 1); //Reset LTF_EN (bit 1)
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	f023 0302 	bic.w	r3, r3, #2
 8001670:	71fb      	strb	r3, [r7, #7]

    //Automatic power down by temperature measurement
    value &= ~(1U << 2); //Reset TSD_EN (bit 2)
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	f023 0304 	bic.w	r3, r3, #4
 8001678:	71fb      	strb	r3, [r7, #7]

    AS7421_writeRegister(ENABLE, value);
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	4619      	mov	r1, r3
 800167e:	2060      	movs	r0, #96	; 0x60
 8001680:	f7ff fabf 	bl	8000c02 <AS7421_writeRegister>

	configureLEDAuto(false);
 8001684:	2000      	movs	r0, #0
 8001686:	f7ff fc99 	bl	8000fbc <configureLEDAuto>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <mesurementActive>:

//Measurement is active. New measurement cannot be started
bool mesurementActive()
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
	uint8_t value = AS7421_readRegister(STATUS_6);
 8001698:	2076      	movs	r0, #118	; 0x76
 800169a:	f7ff fa8d 	bl	8000bb8 <AS7421_readRegister>
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
    bool status = (value & (1U << 4)) != 0; // Isolate bit 4 (LTF_BUSY) and check if it's set
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	f003 0310 	and.w	r3, r3, #16
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	bf14      	ite	ne
 80016ac:	2301      	movne	r3, #1
 80016ae:	2300      	moveq	r3, #0
 80016b0:	71bb      	strb	r3, [r7, #6]
    return status;
 80016b2:	79bb      	ldrb	r3, [r7, #6]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <getMeasurementStatus>:
 * Bit2 = TSD
 * Bit1 = AZ
 * Bit0 = ADATA
 */
bool getMeasurementStatus(uint8_t bit)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
	uint8_t status7 = AS7421_readRegister(STATUS_7);
 80016c6:	2077      	movs	r0, #119	; 0x77
 80016c8:	f7ff fa76 	bl	8000bb8 <AS7421_readRegister>
 80016cc:	4603      	mov	r3, r0
 80016ce:	73fb      	strb	r3, [r7, #15]
	if (bit > 7)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	2b07      	cmp	r3, #7
 80016d4:	d904      	bls.n	80016e0 <getMeasurementStatus+0x24>
	{
		printf("Bit is not within range of 0-7 of STATUS_7 register \n\r");
 80016d6:	480a      	ldr	r0, [pc, #40]	; (8001700 <getMeasurementStatus+0x44>)
 80016d8:	f001 fdb6 	bl	8003248 <iprintf>
		return 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	e00b      	b.n	80016f8 <getMeasurementStatus+0x3c>
	}
    bool status = (status7 & (1U << bit)) != 0; // Isolate a bit and check its status
 80016e0:	7bfa      	ldrb	r2, [r7, #15]
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	fa22 f303 	lsr.w	r3, r2, r3
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	bf14      	ite	ne
 80016f0:	2301      	movne	r3, #1
 80016f2:	2300      	moveq	r3, #0
 80016f4:	73bb      	strb	r3, [r7, #14]
	return status;
 80016f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	080051f4 	.word	0x080051f4

08001704 <recordChannelData>:

// Helper function to record channel data
uint16_t recordChannelData(uint8_t addr)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2] = {0};
 800170e:	2300      	movs	r3, #0
 8001710:	81bb      	strh	r3, [r7, #12]
	AS7421_readRegisters(addr, 2, data);
 8001712:	f107 020c 	add.w	r2, r7, #12
 8001716:	79fb      	ldrb	r3, [r7, #7]
 8001718:	2102      	movs	r1, #2
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fa5f 	bl	8000bde <AS7421_readRegisters>

	// Combine the two bytes into a 16-bit value
	return ((uint16_t)data[1] << 8) | data[0];
 8001720:	7b7b      	ldrb	r3, [r7, #13]
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	b21a      	sxth	r2, r3
 8001726:	7b3b      	ldrb	r3, [r7, #12]
 8001728:	b21b      	sxth	r3, r3
 800172a:	4313      	orrs	r3, r2
 800172c:	b21b      	sxth	r3, r3
 800172e:	b29b      	uxth	r3, r3
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <getChannel1>:

/* Integration Cycle A */
uint16_t getChannel1()
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
	return recordChannelData(CH1_DATA);
 800173c:	2082      	movs	r0, #130	; 0x82
 800173e:	f7ff ffe1 	bl	8001704 <recordChannelData>
 8001742:	4603      	mov	r3, r0
}
 8001744:	4618      	mov	r0, r3
 8001746:	bd80      	pop	{r7, pc}

08001748 <getChannel48>:
uint16_t getChannel48()
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
	return recordChannelData(CH48_DATA);
 800174c:	20e0      	movs	r0, #224	; 0xe0
 800174e:	f7ff ffd9 	bl	8001704 <recordChannelData>
 8001752:	4603      	mov	r3, r0
}
 8001754:	4618      	mov	r0, r3
 8001756:	bd80      	pop	{r7, pc}

08001758 <getChannel2>:
uint16_t getChannel2()
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	return recordChannelData(CH2_DATA);
 800175c:	2084      	movs	r0, #132	; 0x84
 800175e:	f7ff ffd1 	bl	8001704 <recordChannelData>
 8001762:	4603      	mov	r3, r0
}
 8001764:	4618      	mov	r0, r3
 8001766:	bd80      	pop	{r7, pc}

08001768 <getChannel34>:
uint16_t getChannel34()
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	return recordChannelData(CH34_DATA);
 800176c:	20c4      	movs	r0, #196	; 0xc4
 800176e:	f7ff ffc9 	bl	8001704 <recordChannelData>
 8001772:	4603      	mov	r3, r0
}
 8001774:	4618      	mov	r0, r3
 8001776:	bd80      	pop	{r7, pc}

08001778 <getChannel16>:
uint16_t getChannel16()
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
	return recordChannelData(CH16_DATA);
 800177c:	20a0      	movs	r0, #160	; 0xa0
 800177e:	f7ff ffc1 	bl	8001704 <recordChannelData>
 8001782:	4603      	mov	r3, r0

}
 8001784:	4618      	mov	r0, r3
 8001786:	bd80      	pop	{r7, pc}

08001788 <getChannel32>:
uint16_t getChannel32()
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
	return recordChannelData(CH32_DATA);
 800178c:	20c0      	movs	r0, #192	; 0xc0
 800178e:	f7ff ffb9 	bl	8001704 <recordChannelData>
 8001792:	4603      	mov	r3, r0
}
 8001794:	4618      	mov	r0, r3
 8001796:	bd80      	pop	{r7, pc}

08001798 <getChannel18>:
uint16_t getChannel18()
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	return recordChannelData(CH18_DATA);
 800179c:	20a4      	movs	r0, #164	; 0xa4
 800179e:	f7ff ffb1 	bl	8001704 <recordChannelData>
 80017a2:	4603      	mov	r3, r0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <getChannel51>:
uint16_t getChannel51()
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
	return recordChannelData(CH51_DATA);
 80017ac:	20e6      	movs	r0, #230	; 0xe6
 80017ae:	f7ff ffa9 	bl	8001704 <recordChannelData>
 80017b2:	4603      	mov	r3, r0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <getChannel4>:

//Next 8 PDs
uint16_t getChannel4()
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	return recordChannelData(CH4_DATA);
 80017bc:	2088      	movs	r0, #136	; 0x88
 80017be:	f7ff ffa1 	bl	8001704 <recordChannelData>
 80017c2:	4603      	mov	r3, r0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <getChannel49>:
uint16_t getChannel49()
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
	return recordChannelData(CH49_DATA);
 80017cc:	20e2      	movs	r0, #226	; 0xe2
 80017ce:	f7ff ff99 	bl	8001704 <recordChannelData>
 80017d2:	4603      	mov	r3, r0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <getChannel3>:
uint16_t getChannel3()
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	return recordChannelData(CH3_DATA);
 80017dc:	2086      	movs	r0, #134	; 0x86
 80017de:	f7ff ff91 	bl	8001704 <recordChannelData>
 80017e2:	4603      	mov	r3, r0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <getChannel35>:
uint16_t getChannel35()
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
	return recordChannelData(CH35_DATA);
 80017ec:	20c6      	movs	r0, #198	; 0xc6
 80017ee:	f7ff ff89 	bl	8001704 <recordChannelData>
 80017f2:	4603      	mov	r3, r0

}
 80017f4:	4618      	mov	r0, r3
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <getChannel17>:
uint16_t getChannel17()
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	return recordChannelData(CH17_DATA);
 80017fc:	20a2      	movs	r0, #162	; 0xa2
 80017fe:	f7ff ff81 	bl	8001704 <recordChannelData>
 8001802:	4603      	mov	r3, r0
}
 8001804:	4618      	mov	r0, r3
 8001806:	bd80      	pop	{r7, pc}

08001808 <getChannel33>:
uint16_t getChannel33()
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
	return recordChannelData(CH33_DATA);
 800180c:	20c2      	movs	r0, #194	; 0xc2
 800180e:	f7ff ff79 	bl	8001704 <recordChannelData>
 8001812:	4603      	mov	r3, r0
}
 8001814:	4618      	mov	r0, r3
 8001816:	bd80      	pop	{r7, pc}

08001818 <getChannel19>:
uint16_t getChannel19()
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
	return recordChannelData(CH19_DATA);
 800181c:	20a6      	movs	r0, #166	; 0xa6
 800181e:	f7ff ff71 	bl	8001704 <recordChannelData>
 8001822:	4603      	mov	r3, r0
}
 8001824:	4618      	mov	r0, r3
 8001826:	bd80      	pop	{r7, pc}

08001828 <getChannel54>:
uint16_t getChannel54()
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	return recordChannelData(CH54_DATA);
 800182c:	20ec      	movs	r0, #236	; 0xec
 800182e:	f7ff ff69 	bl	8001704 <recordChannelData>
 8001832:	4603      	mov	r3, r0
}
 8001834:	4618      	mov	r0, r3
 8001836:	bd80      	pop	{r7, pc}

08001838 <getChannel0>:

/* Integration Cycle B */
uint16_t getChannel0()
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
	return recordChannelData(CH0_DATA);
 800183c:	2080      	movs	r0, #128	; 0x80
 800183e:	f7ff ff61 	bl	8001704 <recordChannelData>
 8001842:	4603      	mov	r3, r0
}
 8001844:	4618      	mov	r0, r3
 8001846:	bd80      	pop	{r7, pc}

08001848 <getChannel13>:
uint16_t getChannel13()
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
	return recordChannelData(CH13_DATA);
 800184c:	209a      	movs	r0, #154	; 0x9a
 800184e:	f7ff ff59 	bl	8001704 <recordChannelData>
 8001852:	4603      	mov	r3, r0
}
 8001854:	4618      	mov	r0, r3
 8001856:	bd80      	pop	{r7, pc}

08001858 <getChannel50>:
uint16_t getChannel50()
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	return recordChannelData(CH50_DATA);
 800185c:	20e4      	movs	r0, #228	; 0xe4
 800185e:	f7ff ff51 	bl	8001704 <recordChannelData>
 8001862:	4603      	mov	r3, r0
}
 8001864:	4618      	mov	r0, r3
 8001866:	bd80      	pop	{r7, pc}

08001868 <getChannel63>:
uint16_t getChannel63()
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
	return recordChannelData(CH63_DATA);
 800186c:	20fe      	movs	r0, #254	; 0xfe
 800186e:	f7ff ff49 	bl	8001704 <recordChannelData>
 8001872:	4603      	mov	r3, r0
}
 8001874:	4618      	mov	r0, r3
 8001876:	bd80      	pop	{r7, pc}

08001878 <getChannel52>:
uint16_t getChannel52()
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
	return recordChannelData(CH52_DATA);
 800187c:	20e8      	movs	r0, #232	; 0xe8
 800187e:	f7ff ff41 	bl	8001704 <recordChannelData>
 8001882:	4603      	mov	r3, r0
}
 8001884:	4618      	mov	r0, r3
 8001886:	bd80      	pop	{r7, pc}

08001888 <getChannel6>:
uint16_t getChannel6()
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
	return recordChannelData(CH6_DATA);
 800188c:	208c      	movs	r0, #140	; 0x8c
 800188e:	f7ff ff39 	bl	8001704 <recordChannelData>
 8001892:	4603      	mov	r3, r0
}
 8001894:	4618      	mov	r0, r3
 8001896:	bd80      	pop	{r7, pc}

08001898 <getChannel38>:
uint16_t getChannel38()
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
	return recordChannelData(CH38_DATA);
 800189c:	20cc      	movs	r0, #204	; 0xcc
 800189e:	f7ff ff31 	bl	8001704 <recordChannelData>
 80018a2:	4603      	mov	r3, r0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <getChannel20>:
uint16_t getChannel20()
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	return recordChannelData(CH20_DATA);
 80018ac:	20a8      	movs	r0, #168	; 0xa8
 80018ae:	f7ff ff29 	bl	8001704 <recordChannelData>
 80018b2:	4603      	mov	r3, r0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <getChannel36>:

//Next 8 PDs
uint16_t getChannel36()
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
	return recordChannelData(CH36_DATA);
 80018bc:	20c8      	movs	r0, #200	; 0xc8
 80018be:	f7ff ff21 	bl	8001704 <recordChannelData>
 80018c2:	4603      	mov	r3, r0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <getChannel22>:
uint16_t getChannel22()
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	return recordChannelData(CH22_DATA);
 80018cc:	20ac      	movs	r0, #172	; 0xac
 80018ce:	f7ff ff19 	bl	8001704 <recordChannelData>
 80018d2:	4603      	mov	r3, r0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <getChannel55>:
uint16_t getChannel55()
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	return recordChannelData(CH55_DATA);
 80018dc:	20ee      	movs	r0, #238	; 0xee
 80018de:	f7ff ff11 	bl	8001704 <recordChannelData>
 80018e2:	4603      	mov	r3, r0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <getChannel5>:
uint16_t getChannel5()
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	return recordChannelData(CH5_DATA);
 80018ec:	208a      	movs	r0, #138	; 0x8a
 80018ee:	f7ff ff09 	bl	8001704 <recordChannelData>
 80018f2:	4603      	mov	r3, r0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <getChannel53>:
uint16_t getChannel53()
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
	return recordChannelData(CH53_DATA);
 80018fc:	20ea      	movs	r0, #234	; 0xea
 80018fe:	f7ff ff01 	bl	8001704 <recordChannelData>
 8001902:	4603      	mov	r3, r0
}
 8001904:	4618      	mov	r0, r3
 8001906:	bd80      	pop	{r7, pc}

08001908 <getChannel7>:
uint16_t getChannel7()
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	return recordChannelData(CH7_DATA);
 800190c:	208e      	movs	r0, #142	; 0x8e
 800190e:	f7ff fef9 	bl	8001704 <recordChannelData>
 8001912:	4603      	mov	r3, r0
}
 8001914:	4618      	mov	r0, r3
 8001916:	bd80      	pop	{r7, pc}

08001918 <getChannel39>:
uint16_t getChannel39()
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	return recordChannelData(CH39_DATA);
 800191c:	20ce      	movs	r0, #206	; 0xce
 800191e:	f7ff fef1 	bl	8001704 <recordChannelData>
 8001922:	4603      	mov	r3, r0
}
 8001924:	4618      	mov	r0, r3
 8001926:	bd80      	pop	{r7, pc}

08001928 <getChannel21>:
uint16_t getChannel21()
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
	return recordChannelData(CH21_DATA);
 800192c:	20aa      	movs	r0, #170	; 0xaa
 800192e:	f7ff fee9 	bl	8001704 <recordChannelData>
 8001932:	4603      	mov	r3, r0
}
 8001934:	4618      	mov	r0, r3
 8001936:	bd80      	pop	{r7, pc}

08001938 <getChannel37>:

/* Integration Cycle C */
uint16_t getChannel37()
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
	return recordChannelData(CH37_DATA);
 800193c:	20ca      	movs	r0, #202	; 0xca
 800193e:	f7ff fee1 	bl	8001704 <recordChannelData>
 8001942:	4603      	mov	r3, r0
}
 8001944:	4618      	mov	r0, r3
 8001946:	bd80      	pop	{r7, pc}

08001948 <getChannel23>:
uint16_t getChannel23()
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	return recordChannelData(CH23_DATA);
 800194c:	20ae      	movs	r0, #174	; 0xae
 800194e:	f7ff fed9 	bl	8001704 <recordChannelData>
 8001952:	4603      	mov	r3, r0
}
 8001954:	4618      	mov	r0, r3
 8001956:	bd80      	pop	{r7, pc}

08001958 <getChannel40>:
uint16_t getChannel40()
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
	return recordChannelData(CH40_DATA);
 800195c:	20d0      	movs	r0, #208	; 0xd0
 800195e:	f7ff fed1 	bl	8001704 <recordChannelData>
 8001962:	4603      	mov	r3, r0
}
 8001964:	4618      	mov	r0, r3
 8001966:	bd80      	pop	{r7, pc}

08001968 <getChannel26>:
uint16_t getChannel26()
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	return recordChannelData(CH26_DATA);
 800196c:	20b4      	movs	r0, #180	; 0xb4
 800196e:	f7ff fec9 	bl	8001704 <recordChannelData>
 8001972:	4603      	mov	r3, r0
}
 8001974:	4618      	mov	r0, r3
 8001976:	bd80      	pop	{r7, pc}

08001978 <getChannel42>:
uint16_t getChannel42()
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
	return recordChannelData(CH42_DATA);
 800197c:	20d4      	movs	r0, #212	; 0xd4
 800197e:	f7ff fec1 	bl	8001704 <recordChannelData>
 8001982:	4603      	mov	r3, r0
}
 8001984:	4618      	mov	r0, r3
 8001986:	bd80      	pop	{r7, pc}

08001988 <getChannel24>:
uint16_t getChannel24()
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
	return recordChannelData(CH24_DATA);
 800198c:	20b0      	movs	r0, #176	; 0xb0
 800198e:	f7ff feb9 	bl	8001704 <recordChannelData>
 8001992:	4603      	mov	r3, r0
}
 8001994:	4618      	mov	r0, r3
 8001996:	bd80      	pop	{r7, pc}

08001998 <getChannel56>:
uint16_t getChannel56()
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
	return recordChannelData(CH56_DATA);
 800199c:	20f0      	movs	r0, #240	; 0xf0
 800199e:	f7ff feb1 	bl	8001704 <recordChannelData>
 80019a2:	4603      	mov	r3, r0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <getChannel10>:
uint16_t getChannel10()
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
	return recordChannelData(CH10_DATA);
 80019ac:	2094      	movs	r0, #148	; 0x94
 80019ae:	f7ff fea9 	bl	8001704 <recordChannelData>
 80019b2:	4603      	mov	r3, r0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <getChannel58>:

//Next 8 PDs
uint16_t getChannel58()
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
	return recordChannelData(CH58_DATA);
 80019bc:	20f4      	movs	r0, #244	; 0xf4
 80019be:	f7ff fea1 	bl	8001704 <recordChannelData>
 80019c2:	4603      	mov	r3, r0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <getChannel8>:
uint16_t getChannel8()
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
	return recordChannelData(CH8_DATA);
 80019cc:	2090      	movs	r0, #144	; 0x90
 80019ce:	f7ff fe99 	bl	8001704 <recordChannelData>
 80019d2:	4603      	mov	r3, r0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <getChannel41>:
uint16_t getChannel41()
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	return recordChannelData(CH41_DATA);
 80019dc:	20d2      	movs	r0, #210	; 0xd2
 80019de:	f7ff fe91 	bl	8001704 <recordChannelData>
 80019e2:	4603      	mov	r3, r0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <getChannel27>:
uint16_t getChannel27()
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
	return recordChannelData(CH27_DATA);
 80019ec:	20b6      	movs	r0, #182	; 0xb6
 80019ee:	f7ff fe89 	bl	8001704 <recordChannelData>
 80019f2:	4603      	mov	r3, r0
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <getChannel43>:
uint16_t getChannel43()
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	return recordChannelData(CH43_DATA);
 80019fc:	20d6      	movs	r0, #214	; 0xd6
 80019fe:	f7ff fe81 	bl	8001704 <recordChannelData>
 8001a02:	4603      	mov	r3, r0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <getChannel25>:
uint16_t getChannel25()
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
	return recordChannelData(CH25_DATA);
 8001a0c:	20b2      	movs	r0, #178	; 0xb2
 8001a0e:	f7ff fe79 	bl	8001704 <recordChannelData>
 8001a12:	4603      	mov	r3, r0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	bd80      	pop	{r7, pc}

08001a18 <getChannel57>:
uint16_t getChannel57()
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	return recordChannelData(CH57_DATA);
 8001a1c:	20f2      	movs	r0, #242	; 0xf2
 8001a1e:	f7ff fe71 	bl	8001704 <recordChannelData>
 8001a22:	4603      	mov	r3, r0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <getChannel11>:
uint16_t getChannel11()
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	return recordChannelData(CH11_DATA);
 8001a2c:	2096      	movs	r0, #150	; 0x96
 8001a2e:	f7ff fe69 	bl	8001704 <recordChannelData>
 8001a32:	4603      	mov	r3, r0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <getChannel59>:

/* Integration Cycle D */
uint16_t getChannel59()
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
	return recordChannelData(CH59_DATA);
 8001a3c:	20f6      	movs	r0, #246	; 0xf6
 8001a3e:	f7ff fe61 	bl	8001704 <recordChannelData>
 8001a42:	4603      	mov	r3, r0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <getChannel9>:
uint16_t getChannel9()
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
	return recordChannelData(CH9_DATA);
 8001a4c:	2092      	movs	r0, #146	; 0x92
 8001a4e:	f7ff fe59 	bl	8001704 <recordChannelData>
 8001a52:	4603      	mov	r3, r0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <getChannel44>:
uint16_t getChannel44()
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
	return recordChannelData(CH44_DATA);
 8001a5c:	20d8      	movs	r0, #216	; 0xd8
 8001a5e:	f7ff fe51 	bl	8001704 <recordChannelData>
 8001a62:	4603      	mov	r3, r0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <getChannel30>:
uint16_t getChannel30()
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
	return recordChannelData(CH30_DATA);
 8001a6c:	20bc      	movs	r0, #188	; 0xbc
 8001a6e:	f7ff fe49 	bl	8001704 <recordChannelData>
 8001a72:	4603      	mov	r3, r0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <getChannel46>:
uint16_t getChannel46()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	return recordChannelData(CH46_DATA);
 8001a7c:	20dc      	movs	r0, #220	; 0xdc
 8001a7e:	f7ff fe41 	bl	8001704 <recordChannelData>
 8001a82:	4603      	mov	r3, r0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <getChannel28>:
uint16_t getChannel28()
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
	return recordChannelData(CH28_DATA);
 8001a8c:	20b8      	movs	r0, #184	; 0xb8
 8001a8e:	f7ff fe39 	bl	8001704 <recordChannelData>
 8001a92:	4603      	mov	r3, r0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <getChannel60>:
uint16_t getChannel60()
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
	return recordChannelData(CH60_DATA);
 8001a9c:	20f8      	movs	r0, #248	; 0xf8
 8001a9e:	f7ff fe31 	bl	8001704 <recordChannelData>
 8001aa2:	4603      	mov	r3, r0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <getChannel14>:
uint16_t getChannel14()
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	return recordChannelData(CH14_DATA);
 8001aac:	209c      	movs	r0, #156	; 0x9c
 8001aae:	f7ff fe29 	bl	8001704 <recordChannelData>
 8001ab2:	4603      	mov	r3, r0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <getChannel62>:

//Next 8 PDs
uint16_t getChannel62()
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
	return recordChannelData(CH62_DATA);
 8001abc:	20fc      	movs	r0, #252	; 0xfc
 8001abe:	f7ff fe21 	bl	8001704 <recordChannelData>
 8001ac2:	4603      	mov	r3, r0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <getChannel12>:
uint16_t getChannel12()
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
	return recordChannelData(CH12_DATA);
 8001acc:	2098      	movs	r0, #152	; 0x98
 8001ace:	f7ff fe19 	bl	8001704 <recordChannelData>
 8001ad2:	4603      	mov	r3, r0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <getChannel45>:
uint16_t getChannel45()
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
	return recordChannelData(CH45_DATA);
 8001adc:	20da      	movs	r0, #218	; 0xda
 8001ade:	f7ff fe11 	bl	8001704 <recordChannelData>
 8001ae2:	4603      	mov	r3, r0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <getChannel31>:
uint16_t getChannel31()
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
	return recordChannelData(CH31_DATA);
 8001aec:	20be      	movs	r0, #190	; 0xbe
 8001aee:	f7ff fe09 	bl	8001704 <recordChannelData>
 8001af2:	4603      	mov	r3, r0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <getChannel47>:
uint16_t getChannel47()
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
	return recordChannelData(CH47_DATA);
 8001afc:	20de      	movs	r0, #222	; 0xde
 8001afe:	f7ff fe01 	bl	8001704 <recordChannelData>
 8001b02:	4603      	mov	r3, r0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <getChannel29>:
uint16_t getChannel29()
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	return recordChannelData(CH29_DATA);
 8001b0c:	20ba      	movs	r0, #186	; 0xba
 8001b0e:	f7ff fdf9 	bl	8001704 <recordChannelData>
 8001b12:	4603      	mov	r3, r0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <getChannel61>:
uint16_t getChannel61()
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	return recordChannelData(CH61_DATA);
 8001b1c:	20fa      	movs	r0, #250	; 0xfa
 8001b1e:	f7ff fdf1 	bl	8001704 <recordChannelData>
 8001b22:	4603      	mov	r3, r0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <getChannel15>:
uint16_t getChannel15()
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
	return recordChannelData(CH15_DATA);
 8001b2c:	209e      	movs	r0, #158	; 0x9e
 8001b2e:	f7ff fde9 	bl	8001704 <recordChannelData>
 8001b32:	4603      	mov	r3, r0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <getAllSpectralData>:


void getAllSpectralData(uint16_t arr[CHANNELSIZE])
{
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
	/* Integration Cycle A */
	arr[0] = getChannel1();
 8001b40:	f7ff fdfa 	bl	8001738 <getChannel1>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	801a      	strh	r2, [r3, #0]
	arr[1] = getChannel48();
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	1c9c      	adds	r4, r3, #2
 8001b50:	f7ff fdfa 	bl	8001748 <getChannel48>
 8001b54:	4603      	mov	r3, r0
 8001b56:	8023      	strh	r3, [r4, #0]
	arr[2] = getChannel2();
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	1d1c      	adds	r4, r3, #4
 8001b5c:	f7ff fdfc 	bl	8001758 <getChannel2>
 8001b60:	4603      	mov	r3, r0
 8001b62:	8023      	strh	r3, [r4, #0]
	arr[3] = getChannel34();
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	1d9c      	adds	r4, r3, #6
 8001b68:	f7ff fdfe 	bl	8001768 <getChannel34>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	8023      	strh	r3, [r4, #0]
	arr[4] = getChannel16();
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f103 0408 	add.w	r4, r3, #8
 8001b76:	f7ff fdff 	bl	8001778 <getChannel16>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	8023      	strh	r3, [r4, #0]
	arr[5] = getChannel32();
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f103 040a 	add.w	r4, r3, #10
 8001b84:	f7ff fe00 	bl	8001788 <getChannel32>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	8023      	strh	r3, [r4, #0]
	arr[6] = getChannel18();
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f103 040c 	add.w	r4, r3, #12
 8001b92:	f7ff fe01 	bl	8001798 <getChannel18>
 8001b96:	4603      	mov	r3, r0
 8001b98:	8023      	strh	r3, [r4, #0]
	arr[7] = getChannel51();
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f103 040e 	add.w	r4, r3, #14
 8001ba0:	f7ff fe02 	bl	80017a8 <getChannel51>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	8023      	strh	r3, [r4, #0]

	arr[8] = getChannel4();
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f103 0410 	add.w	r4, r3, #16
 8001bae:	f7ff fe03 	bl	80017b8 <getChannel4>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	8023      	strh	r3, [r4, #0]
	arr[9] = getChannel49();
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f103 0412 	add.w	r4, r3, #18
 8001bbc:	f7ff fe04 	bl	80017c8 <getChannel49>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	8023      	strh	r3, [r4, #0]
	arr[10] = getChannel3();
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f103 0414 	add.w	r4, r3, #20
 8001bca:	f7ff fe05 	bl	80017d8 <getChannel3>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	8023      	strh	r3, [r4, #0]
	arr[11] = getChannel35();
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f103 0416 	add.w	r4, r3, #22
 8001bd8:	f7ff fe06 	bl	80017e8 <getChannel35>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	8023      	strh	r3, [r4, #0]
	arr[12] = getChannel17();
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f103 0418 	add.w	r4, r3, #24
 8001be6:	f7ff fe07 	bl	80017f8 <getChannel17>
 8001bea:	4603      	mov	r3, r0
 8001bec:	8023      	strh	r3, [r4, #0]
	arr[13] = getChannel33();
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f103 041a 	add.w	r4, r3, #26
 8001bf4:	f7ff fe08 	bl	8001808 <getChannel33>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	8023      	strh	r3, [r4, #0]
	arr[14] = getChannel19();
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f103 041c 	add.w	r4, r3, #28
 8001c02:	f7ff fe09 	bl	8001818 <getChannel19>
 8001c06:	4603      	mov	r3, r0
 8001c08:	8023      	strh	r3, [r4, #0]
	arr[15] = getChannel54();
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f103 041e 	add.w	r4, r3, #30
 8001c10:	f7ff fe0a 	bl	8001828 <getChannel54>
 8001c14:	4603      	mov	r3, r0
 8001c16:	8023      	strh	r3, [r4, #0]

	/* Integration Cycle B */
	arr[16] = getChannel0();
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f103 0420 	add.w	r4, r3, #32
 8001c1e:	f7ff fe0b 	bl	8001838 <getChannel0>
 8001c22:	4603      	mov	r3, r0
 8001c24:	8023      	strh	r3, [r4, #0]
	arr[17] = getChannel13();
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f103 0422 	add.w	r4, r3, #34	; 0x22
 8001c2c:	f7ff fe0c 	bl	8001848 <getChannel13>
 8001c30:	4603      	mov	r3, r0
 8001c32:	8023      	strh	r3, [r4, #0]
	arr[18] = getChannel50();
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001c3a:	f7ff fe0d 	bl	8001858 <getChannel50>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	8023      	strh	r3, [r4, #0]
	arr[19] = getChannel63();
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f103 0426 	add.w	r4, r3, #38	; 0x26
 8001c48:	f7ff fe0e 	bl	8001868 <getChannel63>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	8023      	strh	r3, [r4, #0]
	arr[20] = getChannel52();
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001c56:	f7ff fe0f 	bl	8001878 <getChannel52>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	8023      	strh	r3, [r4, #0]
	arr[21] = getChannel6();
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f103 042a 	add.w	r4, r3, #42	; 0x2a
 8001c64:	f7ff fe10 	bl	8001888 <getChannel6>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	8023      	strh	r3, [r4, #0]
	arr[22] = getChannel38();
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8001c72:	f7ff fe11 	bl	8001898 <getChannel38>
 8001c76:	4603      	mov	r3, r0
 8001c78:	8023      	strh	r3, [r4, #0]
	arr[23] = getChannel20();
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f103 042e 	add.w	r4, r3, #46	; 0x2e
 8001c80:	f7ff fe12 	bl	80018a8 <getChannel20>
 8001c84:	4603      	mov	r3, r0
 8001c86:	8023      	strh	r3, [r4, #0]

	arr[24] = getChannel36();
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001c8e:	f7ff fe13 	bl	80018b8 <getChannel36>
 8001c92:	4603      	mov	r3, r0
 8001c94:	8023      	strh	r3, [r4, #0]
	arr[25] = getChannel22();
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001c9c:	f7ff fe14 	bl	80018c8 <getChannel22>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	8023      	strh	r3, [r4, #0]
	arr[26] = getChannel55();
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8001caa:	f7ff fe15 	bl	80018d8 <getChannel55>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	8023      	strh	r3, [r4, #0]
	arr[27] = getChannel5();
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f103 0436 	add.w	r4, r3, #54	; 0x36
 8001cb8:	f7ff fe16 	bl	80018e8 <getChannel5>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	8023      	strh	r3, [r4, #0]
	arr[28] = getChannel53();
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8001cc6:	f7ff fe17 	bl	80018f8 <getChannel53>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	8023      	strh	r3, [r4, #0]
	arr[29] = getChannel7();
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f103 043a 	add.w	r4, r3, #58	; 0x3a
 8001cd4:	f7ff fe18 	bl	8001908 <getChannel7>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	8023      	strh	r3, [r4, #0]
	arr[30] = getChannel39();
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8001ce2:	f7ff fe19 	bl	8001918 <getChannel39>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	8023      	strh	r3, [r4, #0]
	arr[31] = getChannel21();
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f103 043e 	add.w	r4, r3, #62	; 0x3e
 8001cf0:	f7ff fe1a 	bl	8001928 <getChannel21>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	8023      	strh	r3, [r4, #0]

	/* Integration Cycle C */
	arr[32] = getChannel37();
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001cfe:	f7ff fe1b 	bl	8001938 <getChannel37>
 8001d02:	4603      	mov	r3, r0
 8001d04:	8023      	strh	r3, [r4, #0]
	arr[33] = getChannel23();
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f103 0442 	add.w	r4, r3, #66	; 0x42
 8001d0c:	f7ff fe1c 	bl	8001948 <getChannel23>
 8001d10:	4603      	mov	r3, r0
 8001d12:	8023      	strh	r3, [r4, #0]
	arr[34] = getChannel40();
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f103 0444 	add.w	r4, r3, #68	; 0x44
 8001d1a:	f7ff fe1d 	bl	8001958 <getChannel40>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	8023      	strh	r3, [r4, #0]
	arr[35] = getChannel26();
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f103 0446 	add.w	r4, r3, #70	; 0x46
 8001d28:	f7ff fe1e 	bl	8001968 <getChannel26>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	8023      	strh	r3, [r4, #0]
	arr[36] = getChannel42();
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8001d36:	f7ff fe1f 	bl	8001978 <getChannel42>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	8023      	strh	r3, [r4, #0]
	arr[37] = getChannel24();
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f103 044a 	add.w	r4, r3, #74	; 0x4a
 8001d44:	f7ff fe20 	bl	8001988 <getChannel24>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	8023      	strh	r3, [r4, #0]
	arr[38] = getChannel56();
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8001d52:	f7ff fe21 	bl	8001998 <getChannel56>
 8001d56:	4603      	mov	r3, r0
 8001d58:	8023      	strh	r3, [r4, #0]
	arr[39] = getChannel10();
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f103 044e 	add.w	r4, r3, #78	; 0x4e
 8001d60:	f7ff fe22 	bl	80019a8 <getChannel10>
 8001d64:	4603      	mov	r3, r0
 8001d66:	8023      	strh	r3, [r4, #0]

	arr[40] = getChannel58();
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8001d6e:	f7ff fe23 	bl	80019b8 <getChannel58>
 8001d72:	4603      	mov	r3, r0
 8001d74:	8023      	strh	r3, [r4, #0]
	arr[41] = getChannel8();
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f103 0452 	add.w	r4, r3, #82	; 0x52
 8001d7c:	f7ff fe24 	bl	80019c8 <getChannel8>
 8001d80:	4603      	mov	r3, r0
 8001d82:	8023      	strh	r3, [r4, #0]
	arr[42] = getChannel41();
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8001d8a:	f7ff fe25 	bl	80019d8 <getChannel41>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	8023      	strh	r3, [r4, #0]
	arr[43] = getChannel27();
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f103 0456 	add.w	r4, r3, #86	; 0x56
 8001d98:	f7ff fe26 	bl	80019e8 <getChannel27>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	8023      	strh	r3, [r4, #0]
	arr[44] = getChannel43();
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f103 0458 	add.w	r4, r3, #88	; 0x58
 8001da6:	f7ff fe27 	bl	80019f8 <getChannel43>
 8001daa:	4603      	mov	r3, r0
 8001dac:	8023      	strh	r3, [r4, #0]
	arr[45] = getChannel25();
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f103 045a 	add.w	r4, r3, #90	; 0x5a
 8001db4:	f7ff fe28 	bl	8001a08 <getChannel25>
 8001db8:	4603      	mov	r3, r0
 8001dba:	8023      	strh	r3, [r4, #0]
	arr[46] = getChannel57();
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8001dc2:	f7ff fe29 	bl	8001a18 <getChannel57>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	8023      	strh	r3, [r4, #0]
	arr[47] = getChannel11();
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f103 045e 	add.w	r4, r3, #94	; 0x5e
 8001dd0:	f7ff fe2a 	bl	8001a28 <getChannel11>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	8023      	strh	r3, [r4, #0]

	/* Integration Cycle D */
	arr[48] = getChannel59();
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8001dde:	f7ff fe2b 	bl	8001a38 <getChannel59>
 8001de2:	4603      	mov	r3, r0
 8001de4:	8023      	strh	r3, [r4, #0]
	arr[49] = getChannel9();
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f103 0462 	add.w	r4, r3, #98	; 0x62
 8001dec:	f7ff fe2c 	bl	8001a48 <getChannel9>
 8001df0:	4603      	mov	r3, r0
 8001df2:	8023      	strh	r3, [r4, #0]
	arr[50] = getChannel44();
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8001dfa:	f7ff fe2d 	bl	8001a58 <getChannel44>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	8023      	strh	r3, [r4, #0]
	arr[51] = getChannel30();
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f103 0466 	add.w	r4, r3, #102	; 0x66
 8001e08:	f7ff fe2e 	bl	8001a68 <getChannel30>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	8023      	strh	r3, [r4, #0]
	arr[52] = getChannel46();
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8001e16:	f7ff fe2f 	bl	8001a78 <getChannel46>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	8023      	strh	r3, [r4, #0]
	arr[53] = getChannel28();
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f103 046a 	add.w	r4, r3, #106	; 0x6a
 8001e24:	f7ff fe30 	bl	8001a88 <getChannel28>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	8023      	strh	r3, [r4, #0]
	arr[54] = getChannel60();
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8001e32:	f7ff fe31 	bl	8001a98 <getChannel60>
 8001e36:	4603      	mov	r3, r0
 8001e38:	8023      	strh	r3, [r4, #0]
	arr[55] = getChannel14();
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 8001e40:	f7ff fe32 	bl	8001aa8 <getChannel14>
 8001e44:	4603      	mov	r3, r0
 8001e46:	8023      	strh	r3, [r4, #0]

	arr[56] = getChannel62();
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001e4e:	f7ff fe33 	bl	8001ab8 <getChannel62>
 8001e52:	4603      	mov	r3, r0
 8001e54:	8023      	strh	r3, [r4, #0]
	arr[57] = getChannel12();
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	f103 0472 	add.w	r4, r3, #114	; 0x72
 8001e5c:	f7ff fe34 	bl	8001ac8 <getChannel12>
 8001e60:	4603      	mov	r3, r0
 8001e62:	8023      	strh	r3, [r4, #0]
	arr[58] = getChannel45();
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f103 0474 	add.w	r4, r3, #116	; 0x74
 8001e6a:	f7ff fe35 	bl	8001ad8 <getChannel45>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	8023      	strh	r3, [r4, #0]
	arr[59] = getChannel31();
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f103 0476 	add.w	r4, r3, #118	; 0x76
 8001e78:	f7ff fe36 	bl	8001ae8 <getChannel31>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	8023      	strh	r3, [r4, #0]
	arr[60] = getChannel47();
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8001e86:	f7ff fe37 	bl	8001af8 <getChannel47>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	8023      	strh	r3, [r4, #0]
	arr[61] = getChannel29();
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f103 047a 	add.w	r4, r3, #122	; 0x7a
 8001e94:	f7ff fe38 	bl	8001b08 <getChannel29>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	8023      	strh	r3, [r4, #0]
	arr[62] = getChannel61();
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8001ea2:	f7ff fe39 	bl	8001b18 <getChannel61>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	8023      	strh	r3, [r4, #0]
	arr[63] = getChannel15();
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f103 047e 	add.w	r4, r3, #126	; 0x7e
 8001eb0:	f7ff fe3a 	bl	8001b28 <getChannel15>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	8023      	strh	r3, [r4, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd90      	pop	{r4, r7, pc}

08001ec0 <recordTemperatures>:



// Helper function to record temperature data
uint16_t recordTemperatures(uint8_t addr)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2] = {0};
 8001eca:	2300      	movs	r3, #0
 8001ecc:	81bb      	strh	r3, [r7, #12]
	AS7421_readRegisters(addr, 2, data);
 8001ece:	f107 020c 	add.w	r2, r7, #12
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	2102      	movs	r1, #2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fe81 	bl	8000bde <AS7421_readRegisters>

	// Combine the two bytes into a 16-bit value
	return ((uint16_t)data[1] << 8) | data[0];
 8001edc:	7b7b      	ldrb	r3, [r7, #13]
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	b21a      	sxth	r2, r3
 8001ee2:	7b3b      	ldrb	r3, [r7, #12]
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	b21b      	sxth	r3, r3
 8001eea:	b29b      	uxth	r3, r3
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <getTemp_IntA>:

uint16_t getTemp_IntA()
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
	return recordTemperatures(TEMPA);
 8001ef8:	2078      	movs	r0, #120	; 0x78
 8001efa:	f7ff ffe1 	bl	8001ec0 <recordTemperatures>
 8001efe:	4603      	mov	r3, r0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <getTemp_IntB>:
uint16_t getTemp_IntB()
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
	return recordTemperatures(TEMPB);
 8001f08:	207a      	movs	r0, #122	; 0x7a
 8001f0a:	f7ff ffd9 	bl	8001ec0 <recordTemperatures>
 8001f0e:	4603      	mov	r3, r0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <getTemp_IntC>:
uint16_t getTemp_IntC()
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
	return recordTemperatures(TEMPC);
 8001f18:	207c      	movs	r0, #124	; 0x7c
 8001f1a:	f7ff ffd1 	bl	8001ec0 <recordTemperatures>
 8001f1e:	4603      	mov	r3, r0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <getTemp_IntD>:
uint16_t getTemp_IntD()
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
	return recordTemperatures(TEMPD);
 8001f28:	207e      	movs	r0, #126	; 0x7e
 8001f2a:	f7ff ffc9 	bl	8001ec0 <recordTemperatures>
 8001f2e:	4603      	mov	r3, r0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <getAllTemperatureData>:

void getAllTemperatureData(uint16_t arr[TEMPSIZE])
{
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	arr[0] = getTemp_IntA();
 8001f3c:	f7ff ffda 	bl	8001ef4 <getTemp_IntA>
 8001f40:	4603      	mov	r3, r0
 8001f42:	461a      	mov	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	801a      	strh	r2, [r3, #0]
	arr[1] = getTemp_IntB();
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	1c9c      	adds	r4, r3, #2
 8001f4c:	f7ff ffda 	bl	8001f04 <getTemp_IntB>
 8001f50:	4603      	mov	r3, r0
 8001f52:	8023      	strh	r3, [r4, #0]
	arr[2] = getTemp_IntC();
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	1d1c      	adds	r4, r3, #4
 8001f58:	f7ff ffdc 	bl	8001f14 <getTemp_IntC>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	8023      	strh	r3, [r4, #0]
	arr[3] = getTemp_IntD();
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	1d9c      	adds	r4, r3, #6
 8001f64:	f7ff ffde 	bl	8001f24 <getTemp_IntD>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	8023      	strh	r3, [r4, #0]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd90      	pop	{r4, r7, pc}

08001f74 <I2C1_Init>:
//#define	SR1_BTF					(1U<<2)
//#define SR1_AF					(1U<<10)


void I2C1_Init(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOB*/
	RCC->AHB1ENR |= GPIOBEN;
 8001f78:	4b4d      	ldr	r3, [pc, #308]	; (80020b0 <I2C1_Init+0x13c>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	4a4c      	ldr	r2, [pc, #304]	; (80020b0 <I2C1_Init+0x13c>)
 8001f7e:	f043 0302 	orr.w	r3, r3, #2
 8001f82:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PB6 and PB7 mode to alternate function*/
	GPIOB->MODER &= ~(1U<<12);
 8001f84:	4b4b      	ldr	r3, [pc, #300]	; (80020b4 <I2C1_Init+0x140>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a4a      	ldr	r2, [pc, #296]	; (80020b4 <I2C1_Init+0x140>)
 8001f8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f8e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<13);
 8001f90:	4b48      	ldr	r3, [pc, #288]	; (80020b4 <I2C1_Init+0x140>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a47      	ldr	r2, [pc, #284]	; (80020b4 <I2C1_Init+0x140>)
 8001f96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f9a:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~(1U<<14);
 8001f9c:	4b45      	ldr	r3, [pc, #276]	; (80020b4 <I2C1_Init+0x140>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a44      	ldr	r2, [pc, #272]	; (80020b4 <I2C1_Init+0x140>)
 8001fa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fa6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<15);
 8001fa8:	4b42      	ldr	r3, [pc, #264]	; (80020b4 <I2C1_Init+0x140>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a41      	ldr	r2, [pc, #260]	; (80020b4 <I2C1_Init+0x140>)
 8001fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fb2:	6013      	str	r3, [r2, #0]

	/*Set PB6 and PB7 output type to  open drain*/
	GPIOB->OTYPER |= (1U<<6);
 8001fb4:	4b3f      	ldr	r3, [pc, #252]	; (80020b4 <I2C1_Init+0x140>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	4a3e      	ldr	r2, [pc, #248]	; (80020b4 <I2C1_Init+0x140>)
 8001fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fbe:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (1U<<7);
 8001fc0:	4b3c      	ldr	r3, [pc, #240]	; (80020b4 <I2C1_Init+0x140>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4a3b      	ldr	r2, [pc, #236]	; (80020b4 <I2C1_Init+0x140>)
 8001fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fca:	6053      	str	r3, [r2, #4]

	/*Enable Pull-up for PB6 and PB7*/
	GPIOB->PUPDR |= (1U<<12);
 8001fcc:	4b39      	ldr	r3, [pc, #228]	; (80020b4 <I2C1_Init+0x140>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	4a38      	ldr	r2, [pc, #224]	; (80020b4 <I2C1_Init+0x140>)
 8001fd2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fd6:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<13);
 8001fd8:	4b36      	ldr	r3, [pc, #216]	; (80020b4 <I2C1_Init+0x140>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4a35      	ldr	r2, [pc, #212]	; (80020b4 <I2C1_Init+0x140>)
 8001fde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001fe2:	60d3      	str	r3, [r2, #12]

	GPIOB->PUPDR |= (1U<<14);
 8001fe4:	4b33      	ldr	r3, [pc, #204]	; (80020b4 <I2C1_Init+0x140>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4a32      	ldr	r2, [pc, #200]	; (80020b4 <I2C1_Init+0x140>)
 8001fea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fee:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<15);
 8001ff0:	4b30      	ldr	r3, [pc, #192]	; (80020b4 <I2C1_Init+0x140>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4a2f      	ldr	r2, [pc, #188]	; (80020b4 <I2C1_Init+0x140>)
 8001ff6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001ffa:	60d3      	str	r3, [r2, #12]

	/*Set PB6 and PB7 alternate function type to I2C (AF4)
	 * PB6 --> SCL
	 * PB7 --> SDA*/
	GPIOB->AFR[0] &= ~(1U<<24);
 8001ffc:	4b2d      	ldr	r3, [pc, #180]	; (80020b4 <I2C1_Init+0x140>)
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	4a2c      	ldr	r2, [pc, #176]	; (80020b4 <I2C1_Init+0x140>)
 8002002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002006:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<25);
 8002008:	4b2a      	ldr	r3, [pc, #168]	; (80020b4 <I2C1_Init+0x140>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4a29      	ldr	r2, [pc, #164]	; (80020b4 <I2C1_Init+0x140>)
 800200e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002012:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1U<<26);
 8002014:	4b27      	ldr	r3, [pc, #156]	; (80020b4 <I2C1_Init+0x140>)
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	4a26      	ldr	r2, [pc, #152]	; (80020b4 <I2C1_Init+0x140>)
 800201a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800201e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<27);
 8002020:	4b24      	ldr	r3, [pc, #144]	; (80020b4 <I2C1_Init+0x140>)
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	4a23      	ldr	r2, [pc, #140]	; (80020b4 <I2C1_Init+0x140>)
 8002026:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800202a:	6213      	str	r3, [r2, #32]

	GPIOB->AFR[0] &= ~(1U<<28);
 800202c:	4b21      	ldr	r3, [pc, #132]	; (80020b4 <I2C1_Init+0x140>)
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	4a20      	ldr	r2, [pc, #128]	; (80020b4 <I2C1_Init+0x140>)
 8002032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002036:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<29);
 8002038:	4b1e      	ldr	r3, [pc, #120]	; (80020b4 <I2C1_Init+0x140>)
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	4a1d      	ldr	r2, [pc, #116]	; (80020b4 <I2C1_Init+0x140>)
 800203e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002042:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1U<<30);
 8002044:	4b1b      	ldr	r3, [pc, #108]	; (80020b4 <I2C1_Init+0x140>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	4a1a      	ldr	r2, [pc, #104]	; (80020b4 <I2C1_Init+0x140>)
 800204a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800204e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<31);
 8002050:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <I2C1_Init+0x140>)
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	4a17      	ldr	r2, [pc, #92]	; (80020b4 <I2C1_Init+0x140>)
 8002056:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800205a:	6213      	str	r3, [r2, #32]

	/***Configuring I2C1***/

	/*Enable clock access to I2C1*/
	RCC->APB1ENR |= I2C1EN;
 800205c:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <I2C1_Init+0x13c>)
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	4a13      	ldr	r2, [pc, #76]	; (80020b0 <I2C1_Init+0x13c>)
 8002062:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002066:	6413      	str	r3, [r2, #64]	; 0x40

	/*Enter reset mode  */
	I2C1->CR1 |= (1U<<15);
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <I2C1_Init+0x144>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a12      	ldr	r2, [pc, #72]	; (80020b8 <I2C1_Init+0x144>)
 800206e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002072:	6013      	str	r3, [r2, #0]

	/*Come out of reset mode  */
	I2C1->CR1 &= ~(1U<<15);
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <I2C1_Init+0x144>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a0f      	ldr	r2, [pc, #60]	; (80020b8 <I2C1_Init+0x144>)
 800207a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800207e:	6013      	str	r3, [r2, #0]

	/*Set Peripheral clock frequency*/
	I2C1->CR2 = (1U<<4);   //16 Mhz
 8002080:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <I2C1_Init+0x144>)
 8002082:	2210      	movs	r2, #16
 8002084:	605a      	str	r2, [r3, #4]
//
//	/*Set rise time */
//	I2C1->TRISE = SD_MODE_MAX_RISE_TIME; //(1000ns/(1/16MHz)+1 = 17

	/*Set I2C to fast mode, 400kHz clock */
	I2C1->CCR = 1; //Refer to ST reference manual for derivation
 8002086:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <I2C1_Init+0x144>)
 8002088:	2201      	movs	r2, #1
 800208a:	61da      	str	r2, [r3, #28]
	I2C1->CCR = I2C_FAST_DUTY; //Set to Fast mode and duty cycle of 16/9
 800208c:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <I2C1_Init+0x144>)
 800208e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002092:	61da      	str	r2, [r3, #28]

	/*Set rise time */
	I2C1->TRISE = 6;//FS_MODE_MAX_RISE_TIME; //(300ns/(1/16MHz)+1 = 5.8
 8002094:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <I2C1_Init+0x144>)
 8002096:	2206      	movs	r2, #6
 8002098:	621a      	str	r2, [r3, #32]

	/*Enable I2C1 module */
	I2C1->CR1 |= CR1_PE;
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <I2C1_Init+0x144>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a06      	ldr	r2, [pc, #24]	; (80020b8 <I2C1_Init+0x144>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6013      	str	r3, [r2, #0]
}
 80020a6:	bf00      	nop
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40020400 	.word	0x40020400
 80020b8:	40005400 	.word	0x40005400

080020bc <I2C1_byteRead>:

void I2C1_byteRead(char saddr, char maddr, char* data) {
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	603a      	str	r2, [r7, #0]
 80020c6:	71fb      	strb	r3, [r7, #7]
 80020c8:	460b      	mov	r3, r1
 80020ca:	71bb      	strb	r3, [r7, #6]

	  volatile int tmp;

	  /* Wait until bus not busy */
	  while (I2C1->SR2 & (SR2_BUSY)){}
 80020cc:	bf00      	nop
 80020ce:	4b37      	ldr	r3, [pc, #220]	; (80021ac <I2C1_byteRead+0xf0>)
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f9      	bne.n	80020ce <I2C1_byteRead+0x12>

	  /* Generate start condition */
	  I2C1->CR1 |= CR1_START;
 80020da:	4b34      	ldr	r3, [pc, #208]	; (80021ac <I2C1_byteRead+0xf0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a33      	ldr	r2, [pc, #204]	; (80021ac <I2C1_byteRead+0xf0>)
 80020e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e4:	6013      	str	r3, [r2, #0]

	  /* Wait until start condition flag is set, note the negation */
	  /* Stay in loop if start flag is not set */
	  while (!(I2C1->SR1 & (SR1_SB))){}
 80020e6:	bf00      	nop
 80020e8:	4b30      	ldr	r3, [pc, #192]	; (80021ac <I2C1_byteRead+0xf0>)
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f9      	beq.n	80020e8 <I2C1_byteRead+0x2c>

	  /* Transmit slave address + Write (0) */
	  /* This slave address is sent to each slave device along with an indication to establish either read or write communication */
	  /* Yo device A, I want to write to one of your memory registers */
	  I2C1->DR = saddr << 1; // shifting the address left makes room for the R/W bit, which is 0 for write
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	005a      	lsls	r2, r3, #1
 80020f8:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <I2C1_byteRead+0xf0>)
 80020fa:	611a      	str	r2, [r3, #16]

	  /* Wait until address flag is set */
	  /* Each slave device compares the address from master to its own address and sends an ACK if matched */
	  /* I'm device A and of course you can write to one of my registers */
	  while (!(I2C1->SR1 & (SR1_ADDR))){}
 80020fc:	bf00      	nop
 80020fe:	4b2b      	ldr	r3, [pc, #172]	; (80021ac <I2C1_byteRead+0xf0>)
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f9      	beq.n	80020fe <I2C1_byteRead+0x42>

	  /* Clear address flag by reading SR2 register */
	  tmp = I2C1->SR2;
 800210a:	4b28      	ldr	r3, [pc, #160]	; (80021ac <I2C1_byteRead+0xf0>)
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	60fb      	str	r3, [r7, #12]

	  /*Wait until transmitter empty */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 8002110:	bf00      	nop
 8002112:	4b26      	ldr	r3, [pc, #152]	; (80021ac <I2C1_byteRead+0xf0>)
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f9      	beq.n	8002112 <I2C1_byteRead+0x56>

	  /* Send register address */
	  /* Aight, here is the address of the register I'm want to write to read from*/
	  I2C1->DR = maddr;
 800211e:	4a23      	ldr	r2, [pc, #140]	; (80021ac <I2C1_byteRead+0xf0>)
 8002120:	79bb      	ldrb	r3, [r7, #6]
 8002122:	6113      	str	r3, [r2, #16]

	  /*Wait until transmitter empty */
	  /* No probs */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 8002124:	bf00      	nop
 8002126:	4b21      	ldr	r3, [pc, #132]	; (80021ac <I2C1_byteRead+0xf0>)
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f9      	beq.n	8002126 <I2C1_byteRead+0x6a>

	 /* Begin actual reading process once slave device and register of interest are understood between master and slave*/
	 /*Generate restart */
	 I2C1->CR1 |= CR1_START;
 8002132:	4b1e      	ldr	r3, [pc, #120]	; (80021ac <I2C1_byteRead+0xf0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <I2C1_byteRead+0xf0>)
 8002138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213c:	6013      	str	r3, [r2, #0]

	 /* Wait until start flag is set */
	 while (!(I2C1->SR1 & SR1_SB)){}
 800213e:	bf00      	nop
 8002140:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <I2C1_byteRead+0xf0>)
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f9      	beq.n	8002140 <I2C1_byteRead+0x84>

	 /* Transmit slave address + Read */
	 I2C1->DR = saddr << 1 | 1;
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	f043 0201 	orr.w	r2, r3, #1
 8002154:	4b15      	ldr	r3, [pc, #84]	; (80021ac <I2C1_byteRead+0xf0>)
 8002156:	611a      	str	r2, [r3, #16]

	 /* Wait until addr flag is set */
	 while (!(I2C1->SR1 & (SR1_ADDR))){}
 8002158:	bf00      	nop
 800215a:	4b14      	ldr	r3, [pc, #80]	; (80021ac <I2C1_byteRead+0xf0>)
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d0f9      	beq.n	800215a <I2C1_byteRead+0x9e>

	 /* Clear addr flag */
	 tmp = I2C1->SR2;
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <I2C1_byteRead+0xf0>)
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	60fb      	str	r3, [r7, #12]

	 /* Disable Acknowledge */
	 I2C1->CR1 &= ~CR1_ACK;
 800216c:	4b0f      	ldr	r3, [pc, #60]	; (80021ac <I2C1_byteRead+0xf0>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a0e      	ldr	r2, [pc, #56]	; (80021ac <I2C1_byteRead+0xf0>)
 8002172:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002176:	6013      	str	r3, [r2, #0]

	 /* Generate stop after data received */
	 I2C1->CR1 |= CR1_STOP;
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <I2C1_byteRead+0xf0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0b      	ldr	r2, [pc, #44]	; (80021ac <I2C1_byteRead+0xf0>)
 800217e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002182:	6013      	str	r3, [r2, #0]

	 /* Wait until RXNE flag is set
	  * Wait until receiver is not empty (has contents to read)*/
	 while (!(I2C1->SR1 & SR1_RXNE)){}
 8002184:	bf00      	nop
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <I2C1_byteRead+0xf0>)
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f9      	beq.n	8002186 <I2C1_byteRead+0xca>

	 /* Read data from DR */
	 *data++ = I2C1->DR;
 8002192:	4b06      	ldr	r3, [pc, #24]	; (80021ac <I2C1_byteRead+0xf0>)
 8002194:	6919      	ldr	r1, [r3, #16]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	603a      	str	r2, [r7, #0]
 800219c:	b2ca      	uxtb	r2, r1
 800219e:	701a      	strb	r2, [r3, #0]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	40005400 	.word	0x40005400

080021b0 <I2C1_burstRead>:

void I2C1_burstRead(char saddr, char maddr, int n, char* data) {
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60ba      	str	r2, [r7, #8]
 80021b8:	607b      	str	r3, [r7, #4]
 80021ba:	4603      	mov	r3, r0
 80021bc:	73fb      	strb	r3, [r7, #15]
 80021be:	460b      	mov	r3, r1
 80021c0:	73bb      	strb	r3, [r7, #14]

	  volatile int tmp;

	  /* Wait until bus not busy */
	  while (I2C1->SR2 & (SR2_BUSY)){}
 80021c2:	bf00      	nop
 80021c4:	4b47      	ldr	r3, [pc, #284]	; (80022e4 <I2C1_burstRead+0x134>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1f9      	bne.n	80021c4 <I2C1_burstRead+0x14>

	  /* Generate start condition */
	  I2C1->CR1 |= CR1_START;
 80021d0:	4b44      	ldr	r3, [pc, #272]	; (80022e4 <I2C1_burstRead+0x134>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a43      	ldr	r2, [pc, #268]	; (80022e4 <I2C1_burstRead+0x134>)
 80021d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021da:	6013      	str	r3, [r2, #0]

	  /* Wait until start condition flag is set, note the negation */
	  /* Stay in loop if start flag is not set */
	  while (!(I2C1->SR1 & (SR1_SB))){}
 80021dc:	bf00      	nop
 80021de:	4b41      	ldr	r3, [pc, #260]	; (80022e4 <I2C1_burstRead+0x134>)
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f9      	beq.n	80021de <I2C1_burstRead+0x2e>

	  /* Transmit slave address + Write (0) */
	  /* This slave address is sent to each slave device along with an indication to establish either read or write communication */
	  I2C1->DR = saddr << 1; // shifting the address left makes room for the R/W bit, which is 0 for write
 80021ea:	7bfb      	ldrb	r3, [r7, #15]
 80021ec:	005a      	lsls	r2, r3, #1
 80021ee:	4b3d      	ldr	r3, [pc, #244]	; (80022e4 <I2C1_burstRead+0x134>)
 80021f0:	611a      	str	r2, [r3, #16]

	  /* Wait until address flag is set */
	  /* Each slave device compares the address from master to its own address and sends an ACK if matched */
	  while (!(I2C1->SR1 & (SR1_ADDR))){}
 80021f2:	bf00      	nop
 80021f4:	4b3b      	ldr	r3, [pc, #236]	; (80022e4 <I2C1_burstRead+0x134>)
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f9      	beq.n	80021f4 <I2C1_burstRead+0x44>

	  /* Clear address flag by reading SR2 register */
	  tmp = I2C1->SR2;
 8002200:	4b38      	ldr	r3, [pc, #224]	; (80022e4 <I2C1_burstRead+0x134>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	617b      	str	r3, [r7, #20]

	  /*Wait until transmitter empty */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 8002206:	bf00      	nop
 8002208:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <I2C1_burstRead+0x134>)
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f9      	beq.n	8002208 <I2C1_burstRead+0x58>

	  /* Send register address */
	  I2C1->DR = maddr;
 8002214:	4a33      	ldr	r2, [pc, #204]	; (80022e4 <I2C1_burstRead+0x134>)
 8002216:	7bbb      	ldrb	r3, [r7, #14]
 8002218:	6113      	str	r3, [r2, #16]

	  /*Wait until transmitter empty */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 800221a:	bf00      	nop
 800221c:	4b31      	ldr	r3, [pc, #196]	; (80022e4 <I2C1_burstRead+0x134>)
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002224:	2b00      	cmp	r3, #0
 8002226:	d0f9      	beq.n	800221c <I2C1_burstRead+0x6c>

	 /* Begin actual reading process once slave device and register of interest are understood between master and slave*/
	 /*Generate restart */
	 I2C1->CR1 |= CR1_START;
 8002228:	4b2e      	ldr	r3, [pc, #184]	; (80022e4 <I2C1_burstRead+0x134>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a2d      	ldr	r2, [pc, #180]	; (80022e4 <I2C1_burstRead+0x134>)
 800222e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002232:	6013      	str	r3, [r2, #0]

	 /* Wait until start flag is set */
	 while (!(I2C1->SR1 & SR1_SB)){}
 8002234:	bf00      	nop
 8002236:	4b2b      	ldr	r3, [pc, #172]	; (80022e4 <I2C1_burstRead+0x134>)
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f9      	beq.n	8002236 <I2C1_burstRead+0x86>

	 /* Transmit slave address + Read */
	 I2C1->DR = saddr << 1 | 1;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	f043 0201 	orr.w	r2, r3, #1
 800224a:	4b26      	ldr	r3, [pc, #152]	; (80022e4 <I2C1_burstRead+0x134>)
 800224c:	611a      	str	r2, [r3, #16]

	 /* Wait until addr flag is set */
	 while (!(I2C1->SR1 & (SR1_ADDR))){}
 800224e:	bf00      	nop
 8002250:	4b24      	ldr	r3, [pc, #144]	; (80022e4 <I2C1_burstRead+0x134>)
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	f003 0302 	and.w	r3, r3, #2
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f9      	beq.n	8002250 <I2C1_burstRead+0xa0>

	 /* Clear addr flag */
	 tmp = I2C1->SR2;
 800225c:	4b21      	ldr	r3, [pc, #132]	; (80022e4 <I2C1_burstRead+0x134>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	617b      	str	r3, [r7, #20]

	 /* Enable Acknowledge */
	 I2C1->CR1 |= CR1_ACK;
 8002262:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <I2C1_burstRead+0x134>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a1f      	ldr	r2, [pc, #124]	; (80022e4 <I2C1_burstRead+0x134>)
 8002268:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800226c:	6013      	str	r3, [r2, #0]

	 while(n > 0U)
 800226e:	e02e      	b.n	80022ce <I2C1_burstRead+0x11e>
	 {
		 /*if one byte*/
		 if(n == 1U)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d11a      	bne.n	80022ac <I2C1_burstRead+0xfc>
		 {
			 /* Disable Acknowledge */
			 I2C1->CR1 &= ~CR1_ACK;
 8002276:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <I2C1_burstRead+0x134>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a1a      	ldr	r2, [pc, #104]	; (80022e4 <I2C1_burstRead+0x134>)
 800227c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002280:	6013      	str	r3, [r2, #0]

			 /* Generate Stop */
			 I2C1->CR1 |= CR1_STOP;
 8002282:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <I2C1_burstRead+0x134>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a17      	ldr	r2, [pc, #92]	; (80022e4 <I2C1_burstRead+0x134>)
 8002288:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800228c:	6013      	str	r3, [r2, #0]

			 /* Wait for RXNE flag set */
			 while (!(I2C1->SR1 & SR1_RXNE)){}
 800228e:	bf00      	nop
 8002290:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <I2C1_burstRead+0x134>)
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f9      	beq.n	8002290 <I2C1_burstRead+0xe0>

			 /* Read data from DR */
			 *data++ = I2C1->DR;
 800229c:	4b11      	ldr	r3, [pc, #68]	; (80022e4 <I2C1_burstRead+0x134>)
 800229e:	6919      	ldr	r1, [r3, #16]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	b2ca      	uxtb	r2, r1
 80022a8:	701a      	strb	r2, [r3, #0]
			 break;
 80022aa:	e014      	b.n	80022d6 <I2C1_burstRead+0x126>
		 }
		 else
		 {
			 /* Wait until RXNE flag is set */
			 while (!(I2C1->SR1 & SR1_RXNE)){}
 80022ac:	bf00      	nop
 80022ae:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <I2C1_burstRead+0x134>)
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f9      	beq.n	80022ae <I2C1_burstRead+0xfe>

			 /* Read data from DR */
			 (*data++) = I2C1->DR;
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <I2C1_burstRead+0x134>)
 80022bc:	6919      	ldr	r1, [r3, #16]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	b2ca      	uxtb	r2, r1
 80022c6:	701a      	strb	r2, [r3, #0]

			 n--;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	60bb      	str	r3, [r7, #8]
	 while(n > 0U)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1cd      	bne.n	8002270 <I2C1_burstRead+0xc0>
		 }
	 }

}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	371c      	adds	r7, #28
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40005400 	.word	0x40005400

080022e8 <I2C1_burstWrite>:

void I2C1_burstWrite(char saddr, char maddr, int n, char* data) {
 80022e8:	b480      	push	{r7}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60ba      	str	r2, [r7, #8]
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	4603      	mov	r3, r0
 80022f4:	73fb      	strb	r3, [r7, #15]
 80022f6:	460b      	mov	r3, r1
 80022f8:	73bb      	strb	r3, [r7, #14]

	/* Temporary variable to read SR2*/
	volatile int tmp;

	/* Wait until bus not busy */
	while (I2C1->SR2 & (SR2_BUSY)){}
 80022fa:	bf00      	nop
 80022fc:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <I2C1_burstWrite+0xc0>)
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1f9      	bne.n	80022fc <I2C1_burstWrite+0x14>

	/* Generate start condition */
	I2C1->CR1 |= CR1_START;
 8002308:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <I2C1_burstWrite+0xc0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a26      	ldr	r2, [pc, #152]	; (80023a8 <I2C1_burstWrite+0xc0>)
 800230e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002312:	6013      	str	r3, [r2, #0]

	/* Wait until start condition flag is set, note the negation */
	/* Stay in loop if start flag is not set*/
	while (!(I2C1->SR1 & (SR1_SB))){}
 8002314:	bf00      	nop
 8002316:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <I2C1_burstWrite+0xc0>)
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f9      	beq.n	8002316 <I2C1_burstWrite+0x2e>

	/* Transmit slave address + Write (0) */
	/* This slave address is sent to each slave device along with an indication to establish either read or write communication*/
	/* Yo device A, I want to write to one of your memory registers */
	I2C1->DR = saddr << 1; // shifting the address left makes room for the R/W bit, which is 0 for write
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	005a      	lsls	r2, r3, #1
 8002326:	4b20      	ldr	r3, [pc, #128]	; (80023a8 <I2C1_burstWrite+0xc0>)
 8002328:	611a      	str	r2, [r3, #16]

	/* Wait until address flag is set */
	/* Each slave device compares the address from master to its own address and sends an ACK if mathced*/
	/* I'm device A and of course you can write to one of my registers */
	while (!(I2C1->SR1 & (SR1_ADDR))){}
 800232a:	bf00      	nop
 800232c:	4b1e      	ldr	r3, [pc, #120]	; (80023a8 <I2C1_burstWrite+0xc0>)
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f9      	beq.n	800232c <I2C1_burstWrite+0x44>

	/* Clear address flag by reading SR2 register */
	tmp = I2C1->SR2;
 8002338:	4b1b      	ldr	r3, [pc, #108]	; (80023a8 <I2C1_burstWrite+0xc0>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	613b      	str	r3, [r7, #16]

	/*Wait until data register empty */
	while (!(I2C1->SR1 & SR1_TXE)){}
 800233e:	bf00      	nop
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <I2C1_burstWrite+0xc0>)
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f9      	beq.n	8002340 <I2C1_burstWrite+0x58>

	/* Send register address */
	/* aight here is the register I'm writing to write to and the value I want written */
	I2C1->DR = maddr;
 800234c:	4a16      	ldr	r2, [pc, #88]	; (80023a8 <I2C1_burstWrite+0xc0>)
 800234e:	7bbb      	ldrb	r3, [r7, #14]
 8002350:	6113      	str	r3, [r2, #16]

	for (int i = 0; i < n; i++) {
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	e00f      	b.n	8002378 <I2C1_burstWrite+0x90>

		/*Wait until data register empty */
		while (!(I2C1->SR1 & SR1_TXE)){}
 8002358:	bf00      	nop
 800235a:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <I2C1_burstWrite+0xc0>)
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f9      	beq.n	800235a <I2C1_burstWrite+0x72>

		/* Transmit memory address */
		I2C1->DR = *data++;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	781a      	ldrb	r2, [r3, #0]
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <I2C1_burstWrite+0xc0>)
 8002370:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < n; i++) {
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	3301      	adds	r3, #1
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	429a      	cmp	r2, r3
 800237e:	dbeb      	blt.n	8002358 <I2C1_burstWrite+0x70>
	}
	/* Wait until transfer finished */
	while (!(I2C1->SR1 & (SR1_BTF))){}
 8002380:	bf00      	nop
 8002382:	4b09      	ldr	r3, [pc, #36]	; (80023a8 <I2C1_burstWrite+0xc0>)
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f9      	beq.n	8002382 <I2C1_burstWrite+0x9a>

	/* Generate stop */
	I2C1->CR1 |= CR1_STOP;
 800238e:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <I2C1_burstWrite+0xc0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a05      	ldr	r2, [pc, #20]	; (80023a8 <I2C1_burstWrite+0xc0>)
 8002394:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002398:	6013      	str	r3, [r2, #0]
}
 800239a:	bf00      	nop
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40005400 	.word	0x40005400

080023ac <main>:

#define NUM_CHANNELS	18


int main(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b0c0      	sub	sp, #256	; 0x100
 80023b0:	af00      	add	r7, sp, #0

	uint16_t channel_data[CHANNELSIZE];
	uint16_t temp_data[CHANNELSIZE];


	startup();
 80023b2:	f7fe fd2b 	bl	8000e0c <startup>
	performMeasurements(channel_data, temp_data);
 80023b6:	463a      	mov	r2, r7
 80023b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80023bc:	4611      	mov	r1, r2
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe fd4a 	bl	8000e58 <performMeasurements>
	sleep();
 80023c4:	f7fe fefe 	bl	80011c4 <sleep>
//	while(1)
//	{
//
//	}

	return 0;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return 1;
 80023d8:	2301      	movs	r3, #1
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <_kill>:

int _kill(int pid, int sig)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023ee:	f000 ffd3 	bl	8003398 <__errno>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2216      	movs	r2, #22
 80023f6:	601a      	str	r2, [r3, #0]
  return -1;
 80023f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <_exit>:

void _exit (int status)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800240c:	f04f 31ff 	mov.w	r1, #4294967295
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ffe7 	bl	80023e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002416:	e7fe      	b.n	8002416 <_exit+0x12>

08002418 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	e00a      	b.n	8002440 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800242a:	f3af 8000 	nop.w
 800242e:	4601      	mov	r1, r0
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	60ba      	str	r2, [r7, #8]
 8002436:	b2ca      	uxtb	r2, r1
 8002438:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	3301      	adds	r3, #1
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	697a      	ldr	r2, [r7, #20]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	429a      	cmp	r2, r3
 8002446:	dbf0      	blt.n	800242a <_read+0x12>
  }

  return len;
 8002448:	687b      	ldr	r3, [r7, #4]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3718      	adds	r7, #24
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b086      	sub	sp, #24
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	e009      	b.n	8002478 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	60ba      	str	r2, [r7, #8]
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f000 f8df 	bl	8002630 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	3301      	adds	r3, #1
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	429a      	cmp	r2, r3
 800247e:	dbf1      	blt.n	8002464 <_write+0x12>
  }
  return len;
 8002480:	687b      	ldr	r3, [r7, #4]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <_close>:

int _close(int file)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002492:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002496:	4618      	mov	r0, r3
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024b2:	605a      	str	r2, [r3, #4]
  return 0;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <_isatty>:

int _isatty(int file)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024ca:	2301      	movs	r3, #1
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
	...

080024f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024fc:	4a14      	ldr	r2, [pc, #80]	; (8002550 <_sbrk+0x5c>)
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <_sbrk+0x60>)
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002508:	4b13      	ldr	r3, [pc, #76]	; (8002558 <_sbrk+0x64>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d102      	bne.n	8002516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <_sbrk+0x64>)
 8002512:	4a12      	ldr	r2, [pc, #72]	; (800255c <_sbrk+0x68>)
 8002514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <_sbrk+0x64>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	429a      	cmp	r2, r3
 8002522:	d207      	bcs.n	8002534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002524:	f000 ff38 	bl	8003398 <__errno>
 8002528:	4603      	mov	r3, r0
 800252a:	220c      	movs	r2, #12
 800252c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800252e:	f04f 33ff 	mov.w	r3, #4294967295
 8002532:	e009      	b.n	8002548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <_sbrk+0x64>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800253a:	4b07      	ldr	r3, [pc, #28]	; (8002558 <_sbrk+0x64>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	4a05      	ldr	r2, [pc, #20]	; (8002558 <_sbrk+0x64>)
 8002544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002546:	68fb      	ldr	r3, [r7, #12]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3718      	adds	r7, #24
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	20018000 	.word	0x20018000
 8002554:	00000400 	.word	0x00000400
 8002558:	200001ec 	.word	0x200001ec
 800255c:	20000340 	.word	0x20000340

08002560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	6039      	str	r1, [r7, #0]
 800256a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002570:	2b00      	cmp	r3, #0
 8002572:	db0a      	blt.n	800258a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	b2da      	uxtb	r2, r3
 8002578:	490c      	ldr	r1, [pc, #48]	; (80025ac <__NVIC_SetPriority+0x4c>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	0112      	lsls	r2, r2, #4
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	440b      	add	r3, r1
 8002584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002588:	e00a      	b.n	80025a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4908      	ldr	r1, [pc, #32]	; (80025b0 <__NVIC_SetPriority+0x50>)
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	3b04      	subs	r3, #4
 8002598:	0112      	lsls	r2, r2, #4
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	440b      	add	r3, r1
 800259e:	761a      	strb	r2, [r3, #24]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000e100 	.word	0xe000e100
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <SysTick_Init>:
#define CTRL_COUNTFLAG			(1U<<16)

volatile uint32_t msTicks = 0;

void SysTick_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
    // Reload with the number of clocks per millisecond
    SysTick->LOAD = SYSTICK_LOAD_VAL - 1;  // Set reload register (off by one)
 80025b8:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <SysTick_Init+0x44>)
 80025ba:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80025be:	605a      	str	r2, [r3, #4]

    // Set the priority of the SysTick interrupt
    NVIC_SetPriority(SysTick_IRQn, (1 << __NVIC_PRIO_BITS) - 1);  // Set lowest priority
 80025c0:	210f      	movs	r1, #15
 80025c2:	f04f 30ff 	mov.w	r0, #4294967295
 80025c6:	f7ff ffcb 	bl	8002560 <__NVIC_SetPriority>

    // Reset the SysTick counter value
    SysTick->VAL = 0;
 80025ca:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <SysTick_Init+0x44>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]

    // Select processor clock as SysTick clock source
    SysTick->CTRL |= CTRL_CLKSRC;
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <SysTick_Init+0x44>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a08      	ldr	r2, [pc, #32]	; (80025f8 <SysTick_Init+0x44>)
 80025d6:	f043 0304 	orr.w	r3, r3, #4
 80025da:	6013      	str	r3, [r2, #0]

    // Enable SysTick interrupt
    SysTick->CTRL |= CTRL_TICKINT;
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <SysTick_Init+0x44>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a05      	ldr	r2, [pc, #20]	; (80025f8 <SysTick_Init+0x44>)
 80025e2:	f043 0302 	orr.w	r3, r3, #2
 80025e6:	6013      	str	r3, [r2, #0]

    // Enable SysTick timer
    SysTick->CTRL |= CTRL_ENABLE;
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <SysTick_Init+0x44>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a02      	ldr	r2, [pc, #8]	; (80025f8 <SysTick_Init+0x44>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	6013      	str	r3, [r2, #0]
}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	e000e010 	.word	0xe000e010

080025fc <SysTick_Handler>:

// SysTick Handler - Called every 1ms
void SysTick_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
	msTicks++;
 8002600:	4b04      	ldr	r3, [pc, #16]	; (8002614 <SysTick_Handler+0x18>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	3301      	adds	r3, #1
 8002606:	4a03      	ldr	r2, [pc, #12]	; (8002614 <SysTick_Handler+0x18>)
 8002608:	6013      	str	r3, [r2, #0]
}
 800260a:	bf00      	nop
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	200001f0 	.word	0x200001f0

08002618 <getMillis>:

// Function to get the current time in milliseconds
uint32_t getMillis(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
	return msTicks;
 800261c:	4b03      	ldr	r3, [pc, #12]	; (800262c <getMillis+0x14>)
 800261e:	681b      	ldr	r3, [r3, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	200001f0 	.word	0x200001f0

08002630 <__io_putchar>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);

int __io_putchar(int ch)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f875 	bl	8002728 <uart2_write>
	return ch;
 800263e:	687b      	ldr	r3, [r7, #4]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <uart2_rxtx_init>:

void uart2_rxtx_init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
	/****************Configure uart  pin using gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 800264c:	4b32      	ldr	r3, [pc, #200]	; (8002718 <uart2_rxtx_init+0xd0>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	4a31      	ldr	r2, [pc, #196]	; (8002718 <uart2_rxtx_init+0xd0>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6313      	str	r3, [r2, #48]	; 0x30


	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~ (1U<<4);
 8002658:	4b30      	ldr	r3, [pc, #192]	; (800271c <uart2_rxtx_init+0xd4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a2f      	ldr	r2, [pc, #188]	; (800271c <uart2_rxtx_init+0xd4>)
 800265e:	f023 0310 	bic.w	r3, r3, #16
 8002662:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8002664:	4b2d      	ldr	r3, [pc, #180]	; (800271c <uart2_rxtx_init+0xd4>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a2c      	ldr	r2, [pc, #176]	; (800271c <uart2_rxtx_init+0xd4>)
 800266a:	f043 0320 	orr.w	r3, r3, #32
 800266e:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0]|= (1U<<8);
 8002670:	4b2a      	ldr	r3, [pc, #168]	; (800271c <uart2_rxtx_init+0xd4>)
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	4a29      	ldr	r2, [pc, #164]	; (800271c <uart2_rxtx_init+0xd4>)
 8002676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<9);
 800267c:	4b27      	ldr	r3, [pc, #156]	; (800271c <uart2_rxtx_init+0xd4>)
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	4a26      	ldr	r2, [pc, #152]	; (800271c <uart2_rxtx_init+0xd4>)
 8002682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002686:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<10);
 8002688:	4b24      	ldr	r3, [pc, #144]	; (800271c <uart2_rxtx_init+0xd4>)
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	4a23      	ldr	r2, [pc, #140]	; (800271c <uart2_rxtx_init+0xd4>)
 800268e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002692:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<11);
 8002694:	4b21      	ldr	r3, [pc, #132]	; (800271c <uart2_rxtx_init+0xd4>)
 8002696:	6a1b      	ldr	r3, [r3, #32]
 8002698:	4a20      	ldr	r2, [pc, #128]	; (800271c <uart2_rxtx_init+0xd4>)
 800269a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800269e:	6213      	str	r3, [r2, #32]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~ (1U<<6);
 80026a0:	4b1e      	ldr	r3, [pc, #120]	; (800271c <uart2_rxtx_init+0xd4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a1d      	ldr	r2, [pc, #116]	; (800271c <uart2_rxtx_init+0xd4>)
 80026a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026aa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 80026ac:	4b1b      	ldr	r3, [pc, #108]	; (800271c <uart2_rxtx_init+0xd4>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1a      	ldr	r2, [pc, #104]	; (800271c <uart2_rxtx_init+0xd4>)
 80026b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b6:	6013      	str	r3, [r2, #0]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0]|= (1U<<12);
 80026b8:	4b18      	ldr	r3, [pc, #96]	; (800271c <uart2_rxtx_init+0xd4>)
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	4a17      	ldr	r2, [pc, #92]	; (800271c <uart2_rxtx_init+0xd4>)
 80026be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026c2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<13);
 80026c4:	4b15      	ldr	r3, [pc, #84]	; (800271c <uart2_rxtx_init+0xd4>)
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	4a14      	ldr	r2, [pc, #80]	; (800271c <uart2_rxtx_init+0xd4>)
 80026ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026ce:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<14);
 80026d0:	4b12      	ldr	r3, [pc, #72]	; (800271c <uart2_rxtx_init+0xd4>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	4a11      	ldr	r2, [pc, #68]	; (800271c <uart2_rxtx_init+0xd4>)
 80026d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026da:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<15);
 80026dc:	4b0f      	ldr	r3, [pc, #60]	; (800271c <uart2_rxtx_init+0xd4>)
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	4a0e      	ldr	r2, [pc, #56]	; (800271c <uart2_rxtx_init+0xd4>)
 80026e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80026e6:	6213      	str	r3, [r2, #32]



	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= USART2EN;
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <uart2_rxtx_init+0xd0>)
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <uart2_rxtx_init+0xd0>)
 80026ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026f2:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 80026f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026f8:	4909      	ldr	r1, [pc, #36]	; (8002720 <uart2_rxtx_init+0xd8>)
 80026fa:	480a      	ldr	r0, [pc, #40]	; (8002724 <uart2_rxtx_init+0xdc>)
 80026fc:	f000 f82c 	bl	8002758 <uart_set_baudrate>

	/*Configure the transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8002700:	4b08      	ldr	r3, [pc, #32]	; (8002724 <uart2_rxtx_init+0xdc>)
 8002702:	220c      	movs	r2, #12
 8002704:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	USART2->CR1 |= CR1_UE;
 8002706:	4b07      	ldr	r3, [pc, #28]	; (8002724 <uart2_rxtx_init+0xdc>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	4a06      	ldr	r2, [pc, #24]	; (8002724 <uart2_rxtx_init+0xdc>)
 800270c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002710:	60d3      	str	r3, [r2, #12]

}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40023800 	.word	0x40023800
 800271c:	40020000 	.word	0x40020000
 8002720:	00f42400 	.word	0x00f42400
 8002724:	40004400 	.word	0x40004400

08002728 <uart2_write>:
	return USART2->DR;

}

void uart2_write(int ch)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){} // Program stays here until condition in while loop no longer holds
 8002730:	bf00      	nop
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <uart2_write+0x2c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800273a:	2b00      	cmp	r3, #0
 800273c:	d0f9      	beq.n	8002732 <uart2_write+0xa>

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a04      	ldr	r2, [pc, #16]	; (8002754 <uart2_write+0x2c>)
 8002742:	b2db      	uxtb	r3, r3
 8002744:	6053      	str	r3, [r2, #4]
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40004400 	.word	0x40004400

08002758 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	68b8      	ldr	r0, [r7, #8]
 8002768:	f000 f808 	bl	800277c <compute_uart_bd>
 800276c:	4603      	mov	r3, r0
 800276e:	461a      	mov	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	609a      	str	r2, [r3, #8]
}
 8002774:	bf00      	nop
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	085a      	lsrs	r2, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	441a      	add	r2, r3
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	fbb2 f3f3 	udiv	r3, r2, r3
 8002794:	b29b      	uxth	r3, r3
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
	...

080027a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027a4:	480d      	ldr	r0, [pc, #52]	; (80027dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80027a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027ac:	480c      	ldr	r0, [pc, #48]	; (80027e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80027ae:	490d      	ldr	r1, [pc, #52]	; (80027e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027b0:	4a0d      	ldr	r2, [pc, #52]	; (80027e8 <LoopForever+0xe>)
  movs r3, #0
 80027b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b4:	e002      	b.n	80027bc <LoopCopyDataInit>

080027b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ba:	3304      	adds	r3, #4

080027bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c0:	d3f9      	bcc.n	80027b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027c2:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80027c4:	4c0a      	ldr	r4, [pc, #40]	; (80027f0 <LoopForever+0x16>)
  movs r3, #0
 80027c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027c8:	e001      	b.n	80027ce <LoopFillZerobss>

080027ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027cc:	3204      	adds	r2, #4

080027ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d0:	d3fb      	bcc.n	80027ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80027d2:	f000 fde7 	bl	80033a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027d6:	f7ff fde9 	bl	80023ac <main>

080027da <LoopForever>:

LoopForever:
  b LoopForever
 80027da:	e7fe      	b.n	80027da <LoopForever>
  ldr   r0, =_estack
 80027dc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80027e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027e4:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 80027e8:	080055a4 	.word	0x080055a4
  ldr r2, =_sbss
 80027ec:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80027f0:	20000340 	.word	0x20000340

080027f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027f4:	e7fe      	b.n	80027f4 <ADC_IRQHandler>

080027f6 <__cvt>:
 80027f6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80027fa:	ec55 4b10 	vmov	r4, r5, d0
 80027fe:	2d00      	cmp	r5, #0
 8002800:	460e      	mov	r6, r1
 8002802:	4619      	mov	r1, r3
 8002804:	462b      	mov	r3, r5
 8002806:	bfbb      	ittet	lt
 8002808:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800280c:	461d      	movlt	r5, r3
 800280e:	2300      	movge	r3, #0
 8002810:	232d      	movlt	r3, #45	; 0x2d
 8002812:	700b      	strb	r3, [r1, #0]
 8002814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002816:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800281a:	4691      	mov	r9, r2
 800281c:	f023 0820 	bic.w	r8, r3, #32
 8002820:	bfbc      	itt	lt
 8002822:	4622      	movlt	r2, r4
 8002824:	4614      	movlt	r4, r2
 8002826:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800282a:	d005      	beq.n	8002838 <__cvt+0x42>
 800282c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002830:	d100      	bne.n	8002834 <__cvt+0x3e>
 8002832:	3601      	adds	r6, #1
 8002834:	2102      	movs	r1, #2
 8002836:	e000      	b.n	800283a <__cvt+0x44>
 8002838:	2103      	movs	r1, #3
 800283a:	ab03      	add	r3, sp, #12
 800283c:	9301      	str	r3, [sp, #4]
 800283e:	ab02      	add	r3, sp, #8
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	ec45 4b10 	vmov	d0, r4, r5
 8002846:	4653      	mov	r3, sl
 8002848:	4632      	mov	r2, r6
 800284a:	f000 fe5d 	bl	8003508 <_dtoa_r>
 800284e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002852:	4607      	mov	r7, r0
 8002854:	d102      	bne.n	800285c <__cvt+0x66>
 8002856:	f019 0f01 	tst.w	r9, #1
 800285a:	d022      	beq.n	80028a2 <__cvt+0xac>
 800285c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002860:	eb07 0906 	add.w	r9, r7, r6
 8002864:	d110      	bne.n	8002888 <__cvt+0x92>
 8002866:	783b      	ldrb	r3, [r7, #0]
 8002868:	2b30      	cmp	r3, #48	; 0x30
 800286a:	d10a      	bne.n	8002882 <__cvt+0x8c>
 800286c:	2200      	movs	r2, #0
 800286e:	2300      	movs	r3, #0
 8002870:	4620      	mov	r0, r4
 8002872:	4629      	mov	r1, r5
 8002874:	f7fe f930 	bl	8000ad8 <__aeabi_dcmpeq>
 8002878:	b918      	cbnz	r0, 8002882 <__cvt+0x8c>
 800287a:	f1c6 0601 	rsb	r6, r6, #1
 800287e:	f8ca 6000 	str.w	r6, [sl]
 8002882:	f8da 3000 	ldr.w	r3, [sl]
 8002886:	4499      	add	r9, r3
 8002888:	2200      	movs	r2, #0
 800288a:	2300      	movs	r3, #0
 800288c:	4620      	mov	r0, r4
 800288e:	4629      	mov	r1, r5
 8002890:	f7fe f922 	bl	8000ad8 <__aeabi_dcmpeq>
 8002894:	b108      	cbz	r0, 800289a <__cvt+0xa4>
 8002896:	f8cd 900c 	str.w	r9, [sp, #12]
 800289a:	2230      	movs	r2, #48	; 0x30
 800289c:	9b03      	ldr	r3, [sp, #12]
 800289e:	454b      	cmp	r3, r9
 80028a0:	d307      	bcc.n	80028b2 <__cvt+0xbc>
 80028a2:	9b03      	ldr	r3, [sp, #12]
 80028a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80028a6:	1bdb      	subs	r3, r3, r7
 80028a8:	4638      	mov	r0, r7
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	b004      	add	sp, #16
 80028ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028b2:	1c59      	adds	r1, r3, #1
 80028b4:	9103      	str	r1, [sp, #12]
 80028b6:	701a      	strb	r2, [r3, #0]
 80028b8:	e7f0      	b.n	800289c <__cvt+0xa6>

080028ba <__exponent>:
 80028ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028bc:	4603      	mov	r3, r0
 80028be:	2900      	cmp	r1, #0
 80028c0:	bfb8      	it	lt
 80028c2:	4249      	neglt	r1, r1
 80028c4:	f803 2b02 	strb.w	r2, [r3], #2
 80028c8:	bfb4      	ite	lt
 80028ca:	222d      	movlt	r2, #45	; 0x2d
 80028cc:	222b      	movge	r2, #43	; 0x2b
 80028ce:	2909      	cmp	r1, #9
 80028d0:	7042      	strb	r2, [r0, #1]
 80028d2:	dd2a      	ble.n	800292a <__exponent+0x70>
 80028d4:	f10d 0207 	add.w	r2, sp, #7
 80028d8:	4617      	mov	r7, r2
 80028da:	260a      	movs	r6, #10
 80028dc:	4694      	mov	ip, r2
 80028de:	fb91 f5f6 	sdiv	r5, r1, r6
 80028e2:	fb06 1415 	mls	r4, r6, r5, r1
 80028e6:	3430      	adds	r4, #48	; 0x30
 80028e8:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80028ec:	460c      	mov	r4, r1
 80028ee:	2c63      	cmp	r4, #99	; 0x63
 80028f0:	f102 32ff 	add.w	r2, r2, #4294967295
 80028f4:	4629      	mov	r1, r5
 80028f6:	dcf1      	bgt.n	80028dc <__exponent+0x22>
 80028f8:	3130      	adds	r1, #48	; 0x30
 80028fa:	f1ac 0402 	sub.w	r4, ip, #2
 80028fe:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002902:	1c41      	adds	r1, r0, #1
 8002904:	4622      	mov	r2, r4
 8002906:	42ba      	cmp	r2, r7
 8002908:	d30a      	bcc.n	8002920 <__exponent+0x66>
 800290a:	f10d 0209 	add.w	r2, sp, #9
 800290e:	eba2 020c 	sub.w	r2, r2, ip
 8002912:	42bc      	cmp	r4, r7
 8002914:	bf88      	it	hi
 8002916:	2200      	movhi	r2, #0
 8002918:	4413      	add	r3, r2
 800291a:	1a18      	subs	r0, r3, r0
 800291c:	b003      	add	sp, #12
 800291e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002920:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002924:	f801 5f01 	strb.w	r5, [r1, #1]!
 8002928:	e7ed      	b.n	8002906 <__exponent+0x4c>
 800292a:	2330      	movs	r3, #48	; 0x30
 800292c:	3130      	adds	r1, #48	; 0x30
 800292e:	7083      	strb	r3, [r0, #2]
 8002930:	70c1      	strb	r1, [r0, #3]
 8002932:	1d03      	adds	r3, r0, #4
 8002934:	e7f1      	b.n	800291a <__exponent+0x60>
	...

08002938 <_printf_float>:
 8002938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800293c:	ed2d 8b02 	vpush	{d8}
 8002940:	b08d      	sub	sp, #52	; 0x34
 8002942:	460c      	mov	r4, r1
 8002944:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002948:	4616      	mov	r6, r2
 800294a:	461f      	mov	r7, r3
 800294c:	4605      	mov	r5, r0
 800294e:	f000 fcd9 	bl	8003304 <_localeconv_r>
 8002952:	f8d0 a000 	ldr.w	sl, [r0]
 8002956:	4650      	mov	r0, sl
 8002958:	f7fd fc92 	bl	8000280 <strlen>
 800295c:	2300      	movs	r3, #0
 800295e:	930a      	str	r3, [sp, #40]	; 0x28
 8002960:	6823      	ldr	r3, [r4, #0]
 8002962:	9305      	str	r3, [sp, #20]
 8002964:	f8d8 3000 	ldr.w	r3, [r8]
 8002968:	f894 b018 	ldrb.w	fp, [r4, #24]
 800296c:	3307      	adds	r3, #7
 800296e:	f023 0307 	bic.w	r3, r3, #7
 8002972:	f103 0208 	add.w	r2, r3, #8
 8002976:	f8c8 2000 	str.w	r2, [r8]
 800297a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800297e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002982:	9307      	str	r3, [sp, #28]
 8002984:	f8cd 8018 	str.w	r8, [sp, #24]
 8002988:	ee08 0a10 	vmov	s16, r0
 800298c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8002990:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002994:	4b9e      	ldr	r3, [pc, #632]	; (8002c10 <_printf_float+0x2d8>)
 8002996:	f04f 32ff 	mov.w	r2, #4294967295
 800299a:	f7fe f8cf 	bl	8000b3c <__aeabi_dcmpun>
 800299e:	bb88      	cbnz	r0, 8002a04 <_printf_float+0xcc>
 80029a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80029a4:	4b9a      	ldr	r3, [pc, #616]	; (8002c10 <_printf_float+0x2d8>)
 80029a6:	f04f 32ff 	mov.w	r2, #4294967295
 80029aa:	f7fe f8a9 	bl	8000b00 <__aeabi_dcmple>
 80029ae:	bb48      	cbnz	r0, 8002a04 <_printf_float+0xcc>
 80029b0:	2200      	movs	r2, #0
 80029b2:	2300      	movs	r3, #0
 80029b4:	4640      	mov	r0, r8
 80029b6:	4649      	mov	r1, r9
 80029b8:	f7fe f898 	bl	8000aec <__aeabi_dcmplt>
 80029bc:	b110      	cbz	r0, 80029c4 <_printf_float+0x8c>
 80029be:	232d      	movs	r3, #45	; 0x2d
 80029c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029c4:	4a93      	ldr	r2, [pc, #588]	; (8002c14 <_printf_float+0x2dc>)
 80029c6:	4b94      	ldr	r3, [pc, #592]	; (8002c18 <_printf_float+0x2e0>)
 80029c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80029cc:	bf94      	ite	ls
 80029ce:	4690      	movls	r8, r2
 80029d0:	4698      	movhi	r8, r3
 80029d2:	2303      	movs	r3, #3
 80029d4:	6123      	str	r3, [r4, #16]
 80029d6:	9b05      	ldr	r3, [sp, #20]
 80029d8:	f023 0304 	bic.w	r3, r3, #4
 80029dc:	6023      	str	r3, [r4, #0]
 80029de:	f04f 0900 	mov.w	r9, #0
 80029e2:	9700      	str	r7, [sp, #0]
 80029e4:	4633      	mov	r3, r6
 80029e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80029e8:	4621      	mov	r1, r4
 80029ea:	4628      	mov	r0, r5
 80029ec:	f000 f9da 	bl	8002da4 <_printf_common>
 80029f0:	3001      	adds	r0, #1
 80029f2:	f040 8090 	bne.w	8002b16 <_printf_float+0x1de>
 80029f6:	f04f 30ff 	mov.w	r0, #4294967295
 80029fa:	b00d      	add	sp, #52	; 0x34
 80029fc:	ecbd 8b02 	vpop	{d8}
 8002a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a04:	4642      	mov	r2, r8
 8002a06:	464b      	mov	r3, r9
 8002a08:	4640      	mov	r0, r8
 8002a0a:	4649      	mov	r1, r9
 8002a0c:	f7fe f896 	bl	8000b3c <__aeabi_dcmpun>
 8002a10:	b140      	cbz	r0, 8002a24 <_printf_float+0xec>
 8002a12:	464b      	mov	r3, r9
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	bfbc      	itt	lt
 8002a18:	232d      	movlt	r3, #45	; 0x2d
 8002a1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002a1e:	4a7f      	ldr	r2, [pc, #508]	; (8002c1c <_printf_float+0x2e4>)
 8002a20:	4b7f      	ldr	r3, [pc, #508]	; (8002c20 <_printf_float+0x2e8>)
 8002a22:	e7d1      	b.n	80029c8 <_printf_float+0x90>
 8002a24:	6863      	ldr	r3, [r4, #4]
 8002a26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002a2a:	9206      	str	r2, [sp, #24]
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	d13f      	bne.n	8002ab0 <_printf_float+0x178>
 8002a30:	2306      	movs	r3, #6
 8002a32:	6063      	str	r3, [r4, #4]
 8002a34:	9b05      	ldr	r3, [sp, #20]
 8002a36:	6861      	ldr	r1, [r4, #4]
 8002a38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	9303      	str	r3, [sp, #12]
 8002a40:	ab0a      	add	r3, sp, #40	; 0x28
 8002a42:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002a46:	ab09      	add	r3, sp, #36	; 0x24
 8002a48:	ec49 8b10 	vmov	d0, r8, r9
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	6022      	str	r2, [r4, #0]
 8002a50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002a54:	4628      	mov	r0, r5
 8002a56:	f7ff fece 	bl	80027f6 <__cvt>
 8002a5a:	9b06      	ldr	r3, [sp, #24]
 8002a5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002a5e:	2b47      	cmp	r3, #71	; 0x47
 8002a60:	4680      	mov	r8, r0
 8002a62:	d108      	bne.n	8002a76 <_printf_float+0x13e>
 8002a64:	1cc8      	adds	r0, r1, #3
 8002a66:	db02      	blt.n	8002a6e <_printf_float+0x136>
 8002a68:	6863      	ldr	r3, [r4, #4]
 8002a6a:	4299      	cmp	r1, r3
 8002a6c:	dd41      	ble.n	8002af2 <_printf_float+0x1ba>
 8002a6e:	f1ab 0302 	sub.w	r3, fp, #2
 8002a72:	fa5f fb83 	uxtb.w	fp, r3
 8002a76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002a7a:	d820      	bhi.n	8002abe <_printf_float+0x186>
 8002a7c:	3901      	subs	r1, #1
 8002a7e:	465a      	mov	r2, fp
 8002a80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002a84:	9109      	str	r1, [sp, #36]	; 0x24
 8002a86:	f7ff ff18 	bl	80028ba <__exponent>
 8002a8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002a8c:	1813      	adds	r3, r2, r0
 8002a8e:	2a01      	cmp	r2, #1
 8002a90:	4681      	mov	r9, r0
 8002a92:	6123      	str	r3, [r4, #16]
 8002a94:	dc02      	bgt.n	8002a9c <_printf_float+0x164>
 8002a96:	6822      	ldr	r2, [r4, #0]
 8002a98:	07d2      	lsls	r2, r2, #31
 8002a9a:	d501      	bpl.n	8002aa0 <_printf_float+0x168>
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	6123      	str	r3, [r4, #16]
 8002aa0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d09c      	beq.n	80029e2 <_printf_float+0xaa>
 8002aa8:	232d      	movs	r3, #45	; 0x2d
 8002aaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002aae:	e798      	b.n	80029e2 <_printf_float+0xaa>
 8002ab0:	9a06      	ldr	r2, [sp, #24]
 8002ab2:	2a47      	cmp	r2, #71	; 0x47
 8002ab4:	d1be      	bne.n	8002a34 <_printf_float+0xfc>
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1bc      	bne.n	8002a34 <_printf_float+0xfc>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e7b9      	b.n	8002a32 <_printf_float+0xfa>
 8002abe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002ac2:	d118      	bne.n	8002af6 <_printf_float+0x1be>
 8002ac4:	2900      	cmp	r1, #0
 8002ac6:	6863      	ldr	r3, [r4, #4]
 8002ac8:	dd0b      	ble.n	8002ae2 <_printf_float+0x1aa>
 8002aca:	6121      	str	r1, [r4, #16]
 8002acc:	b913      	cbnz	r3, 8002ad4 <_printf_float+0x19c>
 8002ace:	6822      	ldr	r2, [r4, #0]
 8002ad0:	07d0      	lsls	r0, r2, #31
 8002ad2:	d502      	bpl.n	8002ada <_printf_float+0x1a2>
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	440b      	add	r3, r1
 8002ad8:	6123      	str	r3, [r4, #16]
 8002ada:	65a1      	str	r1, [r4, #88]	; 0x58
 8002adc:	f04f 0900 	mov.w	r9, #0
 8002ae0:	e7de      	b.n	8002aa0 <_printf_float+0x168>
 8002ae2:	b913      	cbnz	r3, 8002aea <_printf_float+0x1b2>
 8002ae4:	6822      	ldr	r2, [r4, #0]
 8002ae6:	07d2      	lsls	r2, r2, #31
 8002ae8:	d501      	bpl.n	8002aee <_printf_float+0x1b6>
 8002aea:	3302      	adds	r3, #2
 8002aec:	e7f4      	b.n	8002ad8 <_printf_float+0x1a0>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e7f2      	b.n	8002ad8 <_printf_float+0x1a0>
 8002af2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002af6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002af8:	4299      	cmp	r1, r3
 8002afa:	db05      	blt.n	8002b08 <_printf_float+0x1d0>
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	6121      	str	r1, [r4, #16]
 8002b00:	07d8      	lsls	r0, r3, #31
 8002b02:	d5ea      	bpl.n	8002ada <_printf_float+0x1a2>
 8002b04:	1c4b      	adds	r3, r1, #1
 8002b06:	e7e7      	b.n	8002ad8 <_printf_float+0x1a0>
 8002b08:	2900      	cmp	r1, #0
 8002b0a:	bfd4      	ite	le
 8002b0c:	f1c1 0202 	rsble	r2, r1, #2
 8002b10:	2201      	movgt	r2, #1
 8002b12:	4413      	add	r3, r2
 8002b14:	e7e0      	b.n	8002ad8 <_printf_float+0x1a0>
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	055a      	lsls	r2, r3, #21
 8002b1a:	d407      	bmi.n	8002b2c <_printf_float+0x1f4>
 8002b1c:	6923      	ldr	r3, [r4, #16]
 8002b1e:	4642      	mov	r2, r8
 8002b20:	4631      	mov	r1, r6
 8002b22:	4628      	mov	r0, r5
 8002b24:	47b8      	blx	r7
 8002b26:	3001      	adds	r0, #1
 8002b28:	d12c      	bne.n	8002b84 <_printf_float+0x24c>
 8002b2a:	e764      	b.n	80029f6 <_printf_float+0xbe>
 8002b2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002b30:	f240 80e0 	bls.w	8002cf4 <_printf_float+0x3bc>
 8002b34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f7fd ffcc 	bl	8000ad8 <__aeabi_dcmpeq>
 8002b40:	2800      	cmp	r0, #0
 8002b42:	d034      	beq.n	8002bae <_printf_float+0x276>
 8002b44:	4a37      	ldr	r2, [pc, #220]	; (8002c24 <_printf_float+0x2ec>)
 8002b46:	2301      	movs	r3, #1
 8002b48:	4631      	mov	r1, r6
 8002b4a:	4628      	mov	r0, r5
 8002b4c:	47b8      	blx	r7
 8002b4e:	3001      	adds	r0, #1
 8002b50:	f43f af51 	beq.w	80029f6 <_printf_float+0xbe>
 8002b54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	db02      	blt.n	8002b62 <_printf_float+0x22a>
 8002b5c:	6823      	ldr	r3, [r4, #0]
 8002b5e:	07d8      	lsls	r0, r3, #31
 8002b60:	d510      	bpl.n	8002b84 <_printf_float+0x24c>
 8002b62:	ee18 3a10 	vmov	r3, s16
 8002b66:	4652      	mov	r2, sl
 8002b68:	4631      	mov	r1, r6
 8002b6a:	4628      	mov	r0, r5
 8002b6c:	47b8      	blx	r7
 8002b6e:	3001      	adds	r0, #1
 8002b70:	f43f af41 	beq.w	80029f6 <_printf_float+0xbe>
 8002b74:	f04f 0800 	mov.w	r8, #0
 8002b78:	f104 091a 	add.w	r9, r4, #26
 8002b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	4543      	cmp	r3, r8
 8002b82:	dc09      	bgt.n	8002b98 <_printf_float+0x260>
 8002b84:	6823      	ldr	r3, [r4, #0]
 8002b86:	079b      	lsls	r3, r3, #30
 8002b88:	f100 8107 	bmi.w	8002d9a <_printf_float+0x462>
 8002b8c:	68e0      	ldr	r0, [r4, #12]
 8002b8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002b90:	4298      	cmp	r0, r3
 8002b92:	bfb8      	it	lt
 8002b94:	4618      	movlt	r0, r3
 8002b96:	e730      	b.n	80029fa <_printf_float+0xc2>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	464a      	mov	r2, r9
 8002b9c:	4631      	mov	r1, r6
 8002b9e:	4628      	mov	r0, r5
 8002ba0:	47b8      	blx	r7
 8002ba2:	3001      	adds	r0, #1
 8002ba4:	f43f af27 	beq.w	80029f6 <_printf_float+0xbe>
 8002ba8:	f108 0801 	add.w	r8, r8, #1
 8002bac:	e7e6      	b.n	8002b7c <_printf_float+0x244>
 8002bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	dc39      	bgt.n	8002c28 <_printf_float+0x2f0>
 8002bb4:	4a1b      	ldr	r2, [pc, #108]	; (8002c24 <_printf_float+0x2ec>)
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	4631      	mov	r1, r6
 8002bba:	4628      	mov	r0, r5
 8002bbc:	47b8      	blx	r7
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	f43f af19 	beq.w	80029f6 <_printf_float+0xbe>
 8002bc4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	d102      	bne.n	8002bd2 <_printf_float+0x29a>
 8002bcc:	6823      	ldr	r3, [r4, #0]
 8002bce:	07d9      	lsls	r1, r3, #31
 8002bd0:	d5d8      	bpl.n	8002b84 <_printf_float+0x24c>
 8002bd2:	ee18 3a10 	vmov	r3, s16
 8002bd6:	4652      	mov	r2, sl
 8002bd8:	4631      	mov	r1, r6
 8002bda:	4628      	mov	r0, r5
 8002bdc:	47b8      	blx	r7
 8002bde:	3001      	adds	r0, #1
 8002be0:	f43f af09 	beq.w	80029f6 <_printf_float+0xbe>
 8002be4:	f04f 0900 	mov.w	r9, #0
 8002be8:	f104 0a1a 	add.w	sl, r4, #26
 8002bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bee:	425b      	negs	r3, r3
 8002bf0:	454b      	cmp	r3, r9
 8002bf2:	dc01      	bgt.n	8002bf8 <_printf_float+0x2c0>
 8002bf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bf6:	e792      	b.n	8002b1e <_printf_float+0x1e6>
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	4652      	mov	r2, sl
 8002bfc:	4631      	mov	r1, r6
 8002bfe:	4628      	mov	r0, r5
 8002c00:	47b8      	blx	r7
 8002c02:	3001      	adds	r0, #1
 8002c04:	f43f aef7 	beq.w	80029f6 <_printf_float+0xbe>
 8002c08:	f109 0901 	add.w	r9, r9, #1
 8002c0c:	e7ee      	b.n	8002bec <_printf_float+0x2b4>
 8002c0e:	bf00      	nop
 8002c10:	7fefffff 	.word	0x7fefffff
 8002c14:	0800522b 	.word	0x0800522b
 8002c18:	0800522f 	.word	0x0800522f
 8002c1c:	08005233 	.word	0x08005233
 8002c20:	08005237 	.word	0x08005237
 8002c24:	0800523b 	.word	0x0800523b
 8002c28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002c2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	bfa8      	it	ge
 8002c30:	461a      	movge	r2, r3
 8002c32:	2a00      	cmp	r2, #0
 8002c34:	4691      	mov	r9, r2
 8002c36:	dc37      	bgt.n	8002ca8 <_printf_float+0x370>
 8002c38:	f04f 0b00 	mov.w	fp, #0
 8002c3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002c40:	f104 021a 	add.w	r2, r4, #26
 8002c44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c46:	9305      	str	r3, [sp, #20]
 8002c48:	eba3 0309 	sub.w	r3, r3, r9
 8002c4c:	455b      	cmp	r3, fp
 8002c4e:	dc33      	bgt.n	8002cb8 <_printf_float+0x380>
 8002c50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c54:	429a      	cmp	r2, r3
 8002c56:	db3b      	blt.n	8002cd0 <_printf_float+0x398>
 8002c58:	6823      	ldr	r3, [r4, #0]
 8002c5a:	07da      	lsls	r2, r3, #31
 8002c5c:	d438      	bmi.n	8002cd0 <_printf_float+0x398>
 8002c5e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002c62:	eba2 0903 	sub.w	r9, r2, r3
 8002c66:	9b05      	ldr	r3, [sp, #20]
 8002c68:	1ad2      	subs	r2, r2, r3
 8002c6a:	4591      	cmp	r9, r2
 8002c6c:	bfa8      	it	ge
 8002c6e:	4691      	movge	r9, r2
 8002c70:	f1b9 0f00 	cmp.w	r9, #0
 8002c74:	dc35      	bgt.n	8002ce2 <_printf_float+0x3aa>
 8002c76:	f04f 0800 	mov.w	r8, #0
 8002c7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002c7e:	f104 0a1a 	add.w	sl, r4, #26
 8002c82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	eba3 0309 	sub.w	r3, r3, r9
 8002c8c:	4543      	cmp	r3, r8
 8002c8e:	f77f af79 	ble.w	8002b84 <_printf_float+0x24c>
 8002c92:	2301      	movs	r3, #1
 8002c94:	4652      	mov	r2, sl
 8002c96:	4631      	mov	r1, r6
 8002c98:	4628      	mov	r0, r5
 8002c9a:	47b8      	blx	r7
 8002c9c:	3001      	adds	r0, #1
 8002c9e:	f43f aeaa 	beq.w	80029f6 <_printf_float+0xbe>
 8002ca2:	f108 0801 	add.w	r8, r8, #1
 8002ca6:	e7ec      	b.n	8002c82 <_printf_float+0x34a>
 8002ca8:	4613      	mov	r3, r2
 8002caa:	4631      	mov	r1, r6
 8002cac:	4642      	mov	r2, r8
 8002cae:	4628      	mov	r0, r5
 8002cb0:	47b8      	blx	r7
 8002cb2:	3001      	adds	r0, #1
 8002cb4:	d1c0      	bne.n	8002c38 <_printf_float+0x300>
 8002cb6:	e69e      	b.n	80029f6 <_printf_float+0xbe>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	4631      	mov	r1, r6
 8002cbc:	4628      	mov	r0, r5
 8002cbe:	9205      	str	r2, [sp, #20]
 8002cc0:	47b8      	blx	r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	f43f ae97 	beq.w	80029f6 <_printf_float+0xbe>
 8002cc8:	9a05      	ldr	r2, [sp, #20]
 8002cca:	f10b 0b01 	add.w	fp, fp, #1
 8002cce:	e7b9      	b.n	8002c44 <_printf_float+0x30c>
 8002cd0:	ee18 3a10 	vmov	r3, s16
 8002cd4:	4652      	mov	r2, sl
 8002cd6:	4631      	mov	r1, r6
 8002cd8:	4628      	mov	r0, r5
 8002cda:	47b8      	blx	r7
 8002cdc:	3001      	adds	r0, #1
 8002cde:	d1be      	bne.n	8002c5e <_printf_float+0x326>
 8002ce0:	e689      	b.n	80029f6 <_printf_float+0xbe>
 8002ce2:	9a05      	ldr	r2, [sp, #20]
 8002ce4:	464b      	mov	r3, r9
 8002ce6:	4442      	add	r2, r8
 8002ce8:	4631      	mov	r1, r6
 8002cea:	4628      	mov	r0, r5
 8002cec:	47b8      	blx	r7
 8002cee:	3001      	adds	r0, #1
 8002cf0:	d1c1      	bne.n	8002c76 <_printf_float+0x33e>
 8002cf2:	e680      	b.n	80029f6 <_printf_float+0xbe>
 8002cf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002cf6:	2a01      	cmp	r2, #1
 8002cf8:	dc01      	bgt.n	8002cfe <_printf_float+0x3c6>
 8002cfa:	07db      	lsls	r3, r3, #31
 8002cfc:	d53a      	bpl.n	8002d74 <_printf_float+0x43c>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	4642      	mov	r2, r8
 8002d02:	4631      	mov	r1, r6
 8002d04:	4628      	mov	r0, r5
 8002d06:	47b8      	blx	r7
 8002d08:	3001      	adds	r0, #1
 8002d0a:	f43f ae74 	beq.w	80029f6 <_printf_float+0xbe>
 8002d0e:	ee18 3a10 	vmov	r3, s16
 8002d12:	4652      	mov	r2, sl
 8002d14:	4631      	mov	r1, r6
 8002d16:	4628      	mov	r0, r5
 8002d18:	47b8      	blx	r7
 8002d1a:	3001      	adds	r0, #1
 8002d1c:	f43f ae6b 	beq.w	80029f6 <_printf_float+0xbe>
 8002d20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002d24:	2200      	movs	r2, #0
 8002d26:	2300      	movs	r3, #0
 8002d28:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8002d2c:	f7fd fed4 	bl	8000ad8 <__aeabi_dcmpeq>
 8002d30:	b9d8      	cbnz	r0, 8002d6a <_printf_float+0x432>
 8002d32:	f10a 33ff 	add.w	r3, sl, #4294967295
 8002d36:	f108 0201 	add.w	r2, r8, #1
 8002d3a:	4631      	mov	r1, r6
 8002d3c:	4628      	mov	r0, r5
 8002d3e:	47b8      	blx	r7
 8002d40:	3001      	adds	r0, #1
 8002d42:	d10e      	bne.n	8002d62 <_printf_float+0x42a>
 8002d44:	e657      	b.n	80029f6 <_printf_float+0xbe>
 8002d46:	2301      	movs	r3, #1
 8002d48:	4652      	mov	r2, sl
 8002d4a:	4631      	mov	r1, r6
 8002d4c:	4628      	mov	r0, r5
 8002d4e:	47b8      	blx	r7
 8002d50:	3001      	adds	r0, #1
 8002d52:	f43f ae50 	beq.w	80029f6 <_printf_float+0xbe>
 8002d56:	f108 0801 	add.w	r8, r8, #1
 8002d5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	4543      	cmp	r3, r8
 8002d60:	dcf1      	bgt.n	8002d46 <_printf_float+0x40e>
 8002d62:	464b      	mov	r3, r9
 8002d64:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002d68:	e6da      	b.n	8002b20 <_printf_float+0x1e8>
 8002d6a:	f04f 0800 	mov.w	r8, #0
 8002d6e:	f104 0a1a 	add.w	sl, r4, #26
 8002d72:	e7f2      	b.n	8002d5a <_printf_float+0x422>
 8002d74:	2301      	movs	r3, #1
 8002d76:	4642      	mov	r2, r8
 8002d78:	e7df      	b.n	8002d3a <_printf_float+0x402>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	464a      	mov	r2, r9
 8002d7e:	4631      	mov	r1, r6
 8002d80:	4628      	mov	r0, r5
 8002d82:	47b8      	blx	r7
 8002d84:	3001      	adds	r0, #1
 8002d86:	f43f ae36 	beq.w	80029f6 <_printf_float+0xbe>
 8002d8a:	f108 0801 	add.w	r8, r8, #1
 8002d8e:	68e3      	ldr	r3, [r4, #12]
 8002d90:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d92:	1a5b      	subs	r3, r3, r1
 8002d94:	4543      	cmp	r3, r8
 8002d96:	dcf0      	bgt.n	8002d7a <_printf_float+0x442>
 8002d98:	e6f8      	b.n	8002b8c <_printf_float+0x254>
 8002d9a:	f04f 0800 	mov.w	r8, #0
 8002d9e:	f104 0919 	add.w	r9, r4, #25
 8002da2:	e7f4      	b.n	8002d8e <_printf_float+0x456>

08002da4 <_printf_common>:
 8002da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002da8:	4616      	mov	r6, r2
 8002daa:	4699      	mov	r9, r3
 8002dac:	688a      	ldr	r2, [r1, #8]
 8002dae:	690b      	ldr	r3, [r1, #16]
 8002db0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002db4:	4293      	cmp	r3, r2
 8002db6:	bfb8      	it	lt
 8002db8:	4613      	movlt	r3, r2
 8002dba:	6033      	str	r3, [r6, #0]
 8002dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002dc0:	4607      	mov	r7, r0
 8002dc2:	460c      	mov	r4, r1
 8002dc4:	b10a      	cbz	r2, 8002dca <_printf_common+0x26>
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	6033      	str	r3, [r6, #0]
 8002dca:	6823      	ldr	r3, [r4, #0]
 8002dcc:	0699      	lsls	r1, r3, #26
 8002dce:	bf42      	ittt	mi
 8002dd0:	6833      	ldrmi	r3, [r6, #0]
 8002dd2:	3302      	addmi	r3, #2
 8002dd4:	6033      	strmi	r3, [r6, #0]
 8002dd6:	6825      	ldr	r5, [r4, #0]
 8002dd8:	f015 0506 	ands.w	r5, r5, #6
 8002ddc:	d106      	bne.n	8002dec <_printf_common+0x48>
 8002dde:	f104 0a19 	add.w	sl, r4, #25
 8002de2:	68e3      	ldr	r3, [r4, #12]
 8002de4:	6832      	ldr	r2, [r6, #0]
 8002de6:	1a9b      	subs	r3, r3, r2
 8002de8:	42ab      	cmp	r3, r5
 8002dea:	dc26      	bgt.n	8002e3a <_printf_common+0x96>
 8002dec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002df0:	1e13      	subs	r3, r2, #0
 8002df2:	6822      	ldr	r2, [r4, #0]
 8002df4:	bf18      	it	ne
 8002df6:	2301      	movne	r3, #1
 8002df8:	0692      	lsls	r2, r2, #26
 8002dfa:	d42b      	bmi.n	8002e54 <_printf_common+0xb0>
 8002dfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e00:	4649      	mov	r1, r9
 8002e02:	4638      	mov	r0, r7
 8002e04:	47c0      	blx	r8
 8002e06:	3001      	adds	r0, #1
 8002e08:	d01e      	beq.n	8002e48 <_printf_common+0xa4>
 8002e0a:	6823      	ldr	r3, [r4, #0]
 8002e0c:	6922      	ldr	r2, [r4, #16]
 8002e0e:	f003 0306 	and.w	r3, r3, #6
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	bf02      	ittt	eq
 8002e16:	68e5      	ldreq	r5, [r4, #12]
 8002e18:	6833      	ldreq	r3, [r6, #0]
 8002e1a:	1aed      	subeq	r5, r5, r3
 8002e1c:	68a3      	ldr	r3, [r4, #8]
 8002e1e:	bf0c      	ite	eq
 8002e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e24:	2500      	movne	r5, #0
 8002e26:	4293      	cmp	r3, r2
 8002e28:	bfc4      	itt	gt
 8002e2a:	1a9b      	subgt	r3, r3, r2
 8002e2c:	18ed      	addgt	r5, r5, r3
 8002e2e:	2600      	movs	r6, #0
 8002e30:	341a      	adds	r4, #26
 8002e32:	42b5      	cmp	r5, r6
 8002e34:	d11a      	bne.n	8002e6c <_printf_common+0xc8>
 8002e36:	2000      	movs	r0, #0
 8002e38:	e008      	b.n	8002e4c <_printf_common+0xa8>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	4652      	mov	r2, sl
 8002e3e:	4649      	mov	r1, r9
 8002e40:	4638      	mov	r0, r7
 8002e42:	47c0      	blx	r8
 8002e44:	3001      	adds	r0, #1
 8002e46:	d103      	bne.n	8002e50 <_printf_common+0xac>
 8002e48:	f04f 30ff 	mov.w	r0, #4294967295
 8002e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e50:	3501      	adds	r5, #1
 8002e52:	e7c6      	b.n	8002de2 <_printf_common+0x3e>
 8002e54:	18e1      	adds	r1, r4, r3
 8002e56:	1c5a      	adds	r2, r3, #1
 8002e58:	2030      	movs	r0, #48	; 0x30
 8002e5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e5e:	4422      	add	r2, r4
 8002e60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e68:	3302      	adds	r3, #2
 8002e6a:	e7c7      	b.n	8002dfc <_printf_common+0x58>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	4622      	mov	r2, r4
 8002e70:	4649      	mov	r1, r9
 8002e72:	4638      	mov	r0, r7
 8002e74:	47c0      	blx	r8
 8002e76:	3001      	adds	r0, #1
 8002e78:	d0e6      	beq.n	8002e48 <_printf_common+0xa4>
 8002e7a:	3601      	adds	r6, #1
 8002e7c:	e7d9      	b.n	8002e32 <_printf_common+0x8e>
	...

08002e80 <_printf_i>:
 8002e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e84:	7e0f      	ldrb	r7, [r1, #24]
 8002e86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002e88:	2f78      	cmp	r7, #120	; 0x78
 8002e8a:	4691      	mov	r9, r2
 8002e8c:	4680      	mov	r8, r0
 8002e8e:	460c      	mov	r4, r1
 8002e90:	469a      	mov	sl, r3
 8002e92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002e96:	d807      	bhi.n	8002ea8 <_printf_i+0x28>
 8002e98:	2f62      	cmp	r7, #98	; 0x62
 8002e9a:	d80a      	bhi.n	8002eb2 <_printf_i+0x32>
 8002e9c:	2f00      	cmp	r7, #0
 8002e9e:	f000 80d4 	beq.w	800304a <_printf_i+0x1ca>
 8002ea2:	2f58      	cmp	r7, #88	; 0x58
 8002ea4:	f000 80c0 	beq.w	8003028 <_printf_i+0x1a8>
 8002ea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002eac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002eb0:	e03a      	b.n	8002f28 <_printf_i+0xa8>
 8002eb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002eb6:	2b15      	cmp	r3, #21
 8002eb8:	d8f6      	bhi.n	8002ea8 <_printf_i+0x28>
 8002eba:	a101      	add	r1, pc, #4	; (adr r1, 8002ec0 <_printf_i+0x40>)
 8002ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ec0:	08002f19 	.word	0x08002f19
 8002ec4:	08002f2d 	.word	0x08002f2d
 8002ec8:	08002ea9 	.word	0x08002ea9
 8002ecc:	08002ea9 	.word	0x08002ea9
 8002ed0:	08002ea9 	.word	0x08002ea9
 8002ed4:	08002ea9 	.word	0x08002ea9
 8002ed8:	08002f2d 	.word	0x08002f2d
 8002edc:	08002ea9 	.word	0x08002ea9
 8002ee0:	08002ea9 	.word	0x08002ea9
 8002ee4:	08002ea9 	.word	0x08002ea9
 8002ee8:	08002ea9 	.word	0x08002ea9
 8002eec:	08003031 	.word	0x08003031
 8002ef0:	08002f59 	.word	0x08002f59
 8002ef4:	08002feb 	.word	0x08002feb
 8002ef8:	08002ea9 	.word	0x08002ea9
 8002efc:	08002ea9 	.word	0x08002ea9
 8002f00:	08003053 	.word	0x08003053
 8002f04:	08002ea9 	.word	0x08002ea9
 8002f08:	08002f59 	.word	0x08002f59
 8002f0c:	08002ea9 	.word	0x08002ea9
 8002f10:	08002ea9 	.word	0x08002ea9
 8002f14:	08002ff3 	.word	0x08002ff3
 8002f18:	682b      	ldr	r3, [r5, #0]
 8002f1a:	1d1a      	adds	r2, r3, #4
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	602a      	str	r2, [r5, #0]
 8002f20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e09f      	b.n	800306c <_printf_i+0x1ec>
 8002f2c:	6820      	ldr	r0, [r4, #0]
 8002f2e:	682b      	ldr	r3, [r5, #0]
 8002f30:	0607      	lsls	r7, r0, #24
 8002f32:	f103 0104 	add.w	r1, r3, #4
 8002f36:	6029      	str	r1, [r5, #0]
 8002f38:	d501      	bpl.n	8002f3e <_printf_i+0xbe>
 8002f3a:	681e      	ldr	r6, [r3, #0]
 8002f3c:	e003      	b.n	8002f46 <_printf_i+0xc6>
 8002f3e:	0646      	lsls	r6, r0, #25
 8002f40:	d5fb      	bpl.n	8002f3a <_printf_i+0xba>
 8002f42:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002f46:	2e00      	cmp	r6, #0
 8002f48:	da03      	bge.n	8002f52 <_printf_i+0xd2>
 8002f4a:	232d      	movs	r3, #45	; 0x2d
 8002f4c:	4276      	negs	r6, r6
 8002f4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f52:	485a      	ldr	r0, [pc, #360]	; (80030bc <_printf_i+0x23c>)
 8002f54:	230a      	movs	r3, #10
 8002f56:	e012      	b.n	8002f7e <_printf_i+0xfe>
 8002f58:	682b      	ldr	r3, [r5, #0]
 8002f5a:	6820      	ldr	r0, [r4, #0]
 8002f5c:	1d19      	adds	r1, r3, #4
 8002f5e:	6029      	str	r1, [r5, #0]
 8002f60:	0605      	lsls	r5, r0, #24
 8002f62:	d501      	bpl.n	8002f68 <_printf_i+0xe8>
 8002f64:	681e      	ldr	r6, [r3, #0]
 8002f66:	e002      	b.n	8002f6e <_printf_i+0xee>
 8002f68:	0641      	lsls	r1, r0, #25
 8002f6a:	d5fb      	bpl.n	8002f64 <_printf_i+0xe4>
 8002f6c:	881e      	ldrh	r6, [r3, #0]
 8002f6e:	4853      	ldr	r0, [pc, #332]	; (80030bc <_printf_i+0x23c>)
 8002f70:	2f6f      	cmp	r7, #111	; 0x6f
 8002f72:	bf0c      	ite	eq
 8002f74:	2308      	moveq	r3, #8
 8002f76:	230a      	movne	r3, #10
 8002f78:	2100      	movs	r1, #0
 8002f7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f7e:	6865      	ldr	r5, [r4, #4]
 8002f80:	60a5      	str	r5, [r4, #8]
 8002f82:	2d00      	cmp	r5, #0
 8002f84:	bfa2      	ittt	ge
 8002f86:	6821      	ldrge	r1, [r4, #0]
 8002f88:	f021 0104 	bicge.w	r1, r1, #4
 8002f8c:	6021      	strge	r1, [r4, #0]
 8002f8e:	b90e      	cbnz	r6, 8002f94 <_printf_i+0x114>
 8002f90:	2d00      	cmp	r5, #0
 8002f92:	d04b      	beq.n	800302c <_printf_i+0x1ac>
 8002f94:	4615      	mov	r5, r2
 8002f96:	fbb6 f1f3 	udiv	r1, r6, r3
 8002f9a:	fb03 6711 	mls	r7, r3, r1, r6
 8002f9e:	5dc7      	ldrb	r7, [r0, r7]
 8002fa0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002fa4:	4637      	mov	r7, r6
 8002fa6:	42bb      	cmp	r3, r7
 8002fa8:	460e      	mov	r6, r1
 8002faa:	d9f4      	bls.n	8002f96 <_printf_i+0x116>
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d10b      	bne.n	8002fc8 <_printf_i+0x148>
 8002fb0:	6823      	ldr	r3, [r4, #0]
 8002fb2:	07de      	lsls	r6, r3, #31
 8002fb4:	d508      	bpl.n	8002fc8 <_printf_i+0x148>
 8002fb6:	6923      	ldr	r3, [r4, #16]
 8002fb8:	6861      	ldr	r1, [r4, #4]
 8002fba:	4299      	cmp	r1, r3
 8002fbc:	bfde      	ittt	le
 8002fbe:	2330      	movle	r3, #48	; 0x30
 8002fc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002fc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002fc8:	1b52      	subs	r2, r2, r5
 8002fca:	6122      	str	r2, [r4, #16]
 8002fcc:	f8cd a000 	str.w	sl, [sp]
 8002fd0:	464b      	mov	r3, r9
 8002fd2:	aa03      	add	r2, sp, #12
 8002fd4:	4621      	mov	r1, r4
 8002fd6:	4640      	mov	r0, r8
 8002fd8:	f7ff fee4 	bl	8002da4 <_printf_common>
 8002fdc:	3001      	adds	r0, #1
 8002fde:	d14a      	bne.n	8003076 <_printf_i+0x1f6>
 8002fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe4:	b004      	add	sp, #16
 8002fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fea:	6823      	ldr	r3, [r4, #0]
 8002fec:	f043 0320 	orr.w	r3, r3, #32
 8002ff0:	6023      	str	r3, [r4, #0]
 8002ff2:	4833      	ldr	r0, [pc, #204]	; (80030c0 <_printf_i+0x240>)
 8002ff4:	2778      	movs	r7, #120	; 0x78
 8002ff6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002ffa:	6823      	ldr	r3, [r4, #0]
 8002ffc:	6829      	ldr	r1, [r5, #0]
 8002ffe:	061f      	lsls	r7, r3, #24
 8003000:	f851 6b04 	ldr.w	r6, [r1], #4
 8003004:	d402      	bmi.n	800300c <_printf_i+0x18c>
 8003006:	065f      	lsls	r7, r3, #25
 8003008:	bf48      	it	mi
 800300a:	b2b6      	uxthmi	r6, r6
 800300c:	07df      	lsls	r7, r3, #31
 800300e:	bf48      	it	mi
 8003010:	f043 0320 	orrmi.w	r3, r3, #32
 8003014:	6029      	str	r1, [r5, #0]
 8003016:	bf48      	it	mi
 8003018:	6023      	strmi	r3, [r4, #0]
 800301a:	b91e      	cbnz	r6, 8003024 <_printf_i+0x1a4>
 800301c:	6823      	ldr	r3, [r4, #0]
 800301e:	f023 0320 	bic.w	r3, r3, #32
 8003022:	6023      	str	r3, [r4, #0]
 8003024:	2310      	movs	r3, #16
 8003026:	e7a7      	b.n	8002f78 <_printf_i+0xf8>
 8003028:	4824      	ldr	r0, [pc, #144]	; (80030bc <_printf_i+0x23c>)
 800302a:	e7e4      	b.n	8002ff6 <_printf_i+0x176>
 800302c:	4615      	mov	r5, r2
 800302e:	e7bd      	b.n	8002fac <_printf_i+0x12c>
 8003030:	682b      	ldr	r3, [r5, #0]
 8003032:	6826      	ldr	r6, [r4, #0]
 8003034:	6961      	ldr	r1, [r4, #20]
 8003036:	1d18      	adds	r0, r3, #4
 8003038:	6028      	str	r0, [r5, #0]
 800303a:	0635      	lsls	r5, r6, #24
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	d501      	bpl.n	8003044 <_printf_i+0x1c4>
 8003040:	6019      	str	r1, [r3, #0]
 8003042:	e002      	b.n	800304a <_printf_i+0x1ca>
 8003044:	0670      	lsls	r0, r6, #25
 8003046:	d5fb      	bpl.n	8003040 <_printf_i+0x1c0>
 8003048:	8019      	strh	r1, [r3, #0]
 800304a:	2300      	movs	r3, #0
 800304c:	6123      	str	r3, [r4, #16]
 800304e:	4615      	mov	r5, r2
 8003050:	e7bc      	b.n	8002fcc <_printf_i+0x14c>
 8003052:	682b      	ldr	r3, [r5, #0]
 8003054:	1d1a      	adds	r2, r3, #4
 8003056:	602a      	str	r2, [r5, #0]
 8003058:	681d      	ldr	r5, [r3, #0]
 800305a:	6862      	ldr	r2, [r4, #4]
 800305c:	2100      	movs	r1, #0
 800305e:	4628      	mov	r0, r5
 8003060:	f7fd f8be 	bl	80001e0 <memchr>
 8003064:	b108      	cbz	r0, 800306a <_printf_i+0x1ea>
 8003066:	1b40      	subs	r0, r0, r5
 8003068:	6060      	str	r0, [r4, #4]
 800306a:	6863      	ldr	r3, [r4, #4]
 800306c:	6123      	str	r3, [r4, #16]
 800306e:	2300      	movs	r3, #0
 8003070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003074:	e7aa      	b.n	8002fcc <_printf_i+0x14c>
 8003076:	6923      	ldr	r3, [r4, #16]
 8003078:	462a      	mov	r2, r5
 800307a:	4649      	mov	r1, r9
 800307c:	4640      	mov	r0, r8
 800307e:	47d0      	blx	sl
 8003080:	3001      	adds	r0, #1
 8003082:	d0ad      	beq.n	8002fe0 <_printf_i+0x160>
 8003084:	6823      	ldr	r3, [r4, #0]
 8003086:	079b      	lsls	r3, r3, #30
 8003088:	d413      	bmi.n	80030b2 <_printf_i+0x232>
 800308a:	68e0      	ldr	r0, [r4, #12]
 800308c:	9b03      	ldr	r3, [sp, #12]
 800308e:	4298      	cmp	r0, r3
 8003090:	bfb8      	it	lt
 8003092:	4618      	movlt	r0, r3
 8003094:	e7a6      	b.n	8002fe4 <_printf_i+0x164>
 8003096:	2301      	movs	r3, #1
 8003098:	4632      	mov	r2, r6
 800309a:	4649      	mov	r1, r9
 800309c:	4640      	mov	r0, r8
 800309e:	47d0      	blx	sl
 80030a0:	3001      	adds	r0, #1
 80030a2:	d09d      	beq.n	8002fe0 <_printf_i+0x160>
 80030a4:	3501      	adds	r5, #1
 80030a6:	68e3      	ldr	r3, [r4, #12]
 80030a8:	9903      	ldr	r1, [sp, #12]
 80030aa:	1a5b      	subs	r3, r3, r1
 80030ac:	42ab      	cmp	r3, r5
 80030ae:	dcf2      	bgt.n	8003096 <_printf_i+0x216>
 80030b0:	e7eb      	b.n	800308a <_printf_i+0x20a>
 80030b2:	2500      	movs	r5, #0
 80030b4:	f104 0619 	add.w	r6, r4, #25
 80030b8:	e7f5      	b.n	80030a6 <_printf_i+0x226>
 80030ba:	bf00      	nop
 80030bc:	0800523d 	.word	0x0800523d
 80030c0:	0800524e 	.word	0x0800524e

080030c4 <std>:
 80030c4:	2300      	movs	r3, #0
 80030c6:	b510      	push	{r4, lr}
 80030c8:	4604      	mov	r4, r0
 80030ca:	e9c0 3300 	strd	r3, r3, [r0]
 80030ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030d2:	6083      	str	r3, [r0, #8]
 80030d4:	8181      	strh	r1, [r0, #12]
 80030d6:	6643      	str	r3, [r0, #100]	; 0x64
 80030d8:	81c2      	strh	r2, [r0, #14]
 80030da:	6183      	str	r3, [r0, #24]
 80030dc:	4619      	mov	r1, r3
 80030de:	2208      	movs	r2, #8
 80030e0:	305c      	adds	r0, #92	; 0x5c
 80030e2:	f000 f906 	bl	80032f2 <memset>
 80030e6:	4b0d      	ldr	r3, [pc, #52]	; (800311c <std+0x58>)
 80030e8:	6263      	str	r3, [r4, #36]	; 0x24
 80030ea:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <std+0x5c>)
 80030ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80030ee:	4b0d      	ldr	r3, [pc, #52]	; (8003124 <std+0x60>)
 80030f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030f2:	4b0d      	ldr	r3, [pc, #52]	; (8003128 <std+0x64>)
 80030f4:	6323      	str	r3, [r4, #48]	; 0x30
 80030f6:	4b0d      	ldr	r3, [pc, #52]	; (800312c <std+0x68>)
 80030f8:	6224      	str	r4, [r4, #32]
 80030fa:	429c      	cmp	r4, r3
 80030fc:	d006      	beq.n	800310c <std+0x48>
 80030fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003102:	4294      	cmp	r4, r2
 8003104:	d002      	beq.n	800310c <std+0x48>
 8003106:	33d0      	adds	r3, #208	; 0xd0
 8003108:	429c      	cmp	r4, r3
 800310a:	d105      	bne.n	8003118 <std+0x54>
 800310c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003114:	f000 b96a 	b.w	80033ec <__retarget_lock_init_recursive>
 8003118:	bd10      	pop	{r4, pc}
 800311a:	bf00      	nop
 800311c:	0800326d 	.word	0x0800326d
 8003120:	0800328f 	.word	0x0800328f
 8003124:	080032c7 	.word	0x080032c7
 8003128:	080032eb 	.word	0x080032eb
 800312c:	200001f4 	.word	0x200001f4

08003130 <stdio_exit_handler>:
 8003130:	4a02      	ldr	r2, [pc, #8]	; (800313c <stdio_exit_handler+0xc>)
 8003132:	4903      	ldr	r1, [pc, #12]	; (8003140 <stdio_exit_handler+0x10>)
 8003134:	4803      	ldr	r0, [pc, #12]	; (8003144 <stdio_exit_handler+0x14>)
 8003136:	f000 b869 	b.w	800320c <_fwalk_sglue>
 800313a:	bf00      	nop
 800313c:	20000008 	.word	0x20000008
 8003140:	08004d79 	.word	0x08004d79
 8003144:	20000014 	.word	0x20000014

08003148 <cleanup_stdio>:
 8003148:	6841      	ldr	r1, [r0, #4]
 800314a:	4b0c      	ldr	r3, [pc, #48]	; (800317c <cleanup_stdio+0x34>)
 800314c:	4299      	cmp	r1, r3
 800314e:	b510      	push	{r4, lr}
 8003150:	4604      	mov	r4, r0
 8003152:	d001      	beq.n	8003158 <cleanup_stdio+0x10>
 8003154:	f001 fe10 	bl	8004d78 <_fflush_r>
 8003158:	68a1      	ldr	r1, [r4, #8]
 800315a:	4b09      	ldr	r3, [pc, #36]	; (8003180 <cleanup_stdio+0x38>)
 800315c:	4299      	cmp	r1, r3
 800315e:	d002      	beq.n	8003166 <cleanup_stdio+0x1e>
 8003160:	4620      	mov	r0, r4
 8003162:	f001 fe09 	bl	8004d78 <_fflush_r>
 8003166:	68e1      	ldr	r1, [r4, #12]
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <cleanup_stdio+0x3c>)
 800316a:	4299      	cmp	r1, r3
 800316c:	d004      	beq.n	8003178 <cleanup_stdio+0x30>
 800316e:	4620      	mov	r0, r4
 8003170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003174:	f001 be00 	b.w	8004d78 <_fflush_r>
 8003178:	bd10      	pop	{r4, pc}
 800317a:	bf00      	nop
 800317c:	200001f4 	.word	0x200001f4
 8003180:	2000025c 	.word	0x2000025c
 8003184:	200002c4 	.word	0x200002c4

08003188 <global_stdio_init.part.0>:
 8003188:	b510      	push	{r4, lr}
 800318a:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <global_stdio_init.part.0+0x30>)
 800318c:	4c0b      	ldr	r4, [pc, #44]	; (80031bc <global_stdio_init.part.0+0x34>)
 800318e:	4a0c      	ldr	r2, [pc, #48]	; (80031c0 <global_stdio_init.part.0+0x38>)
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	4620      	mov	r0, r4
 8003194:	2200      	movs	r2, #0
 8003196:	2104      	movs	r1, #4
 8003198:	f7ff ff94 	bl	80030c4 <std>
 800319c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80031a0:	2201      	movs	r2, #1
 80031a2:	2109      	movs	r1, #9
 80031a4:	f7ff ff8e 	bl	80030c4 <std>
 80031a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80031ac:	2202      	movs	r2, #2
 80031ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031b2:	2112      	movs	r1, #18
 80031b4:	f7ff bf86 	b.w	80030c4 <std>
 80031b8:	2000032c 	.word	0x2000032c
 80031bc:	200001f4 	.word	0x200001f4
 80031c0:	08003131 	.word	0x08003131

080031c4 <__sfp_lock_acquire>:
 80031c4:	4801      	ldr	r0, [pc, #4]	; (80031cc <__sfp_lock_acquire+0x8>)
 80031c6:	f000 b912 	b.w	80033ee <__retarget_lock_acquire_recursive>
 80031ca:	bf00      	nop
 80031cc:	20000335 	.word	0x20000335

080031d0 <__sfp_lock_release>:
 80031d0:	4801      	ldr	r0, [pc, #4]	; (80031d8 <__sfp_lock_release+0x8>)
 80031d2:	f000 b90d 	b.w	80033f0 <__retarget_lock_release_recursive>
 80031d6:	bf00      	nop
 80031d8:	20000335 	.word	0x20000335

080031dc <__sinit>:
 80031dc:	b510      	push	{r4, lr}
 80031de:	4604      	mov	r4, r0
 80031e0:	f7ff fff0 	bl	80031c4 <__sfp_lock_acquire>
 80031e4:	6a23      	ldr	r3, [r4, #32]
 80031e6:	b11b      	cbz	r3, 80031f0 <__sinit+0x14>
 80031e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031ec:	f7ff bff0 	b.w	80031d0 <__sfp_lock_release>
 80031f0:	4b04      	ldr	r3, [pc, #16]	; (8003204 <__sinit+0x28>)
 80031f2:	6223      	str	r3, [r4, #32]
 80031f4:	4b04      	ldr	r3, [pc, #16]	; (8003208 <__sinit+0x2c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d1f5      	bne.n	80031e8 <__sinit+0xc>
 80031fc:	f7ff ffc4 	bl	8003188 <global_stdio_init.part.0>
 8003200:	e7f2      	b.n	80031e8 <__sinit+0xc>
 8003202:	bf00      	nop
 8003204:	08003149 	.word	0x08003149
 8003208:	2000032c 	.word	0x2000032c

0800320c <_fwalk_sglue>:
 800320c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003210:	4607      	mov	r7, r0
 8003212:	4688      	mov	r8, r1
 8003214:	4614      	mov	r4, r2
 8003216:	2600      	movs	r6, #0
 8003218:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800321c:	f1b9 0901 	subs.w	r9, r9, #1
 8003220:	d505      	bpl.n	800322e <_fwalk_sglue+0x22>
 8003222:	6824      	ldr	r4, [r4, #0]
 8003224:	2c00      	cmp	r4, #0
 8003226:	d1f7      	bne.n	8003218 <_fwalk_sglue+0xc>
 8003228:	4630      	mov	r0, r6
 800322a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800322e:	89ab      	ldrh	r3, [r5, #12]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d907      	bls.n	8003244 <_fwalk_sglue+0x38>
 8003234:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003238:	3301      	adds	r3, #1
 800323a:	d003      	beq.n	8003244 <_fwalk_sglue+0x38>
 800323c:	4629      	mov	r1, r5
 800323e:	4638      	mov	r0, r7
 8003240:	47c0      	blx	r8
 8003242:	4306      	orrs	r6, r0
 8003244:	3568      	adds	r5, #104	; 0x68
 8003246:	e7e9      	b.n	800321c <_fwalk_sglue+0x10>

08003248 <iprintf>:
 8003248:	b40f      	push	{r0, r1, r2, r3}
 800324a:	b507      	push	{r0, r1, r2, lr}
 800324c:	4906      	ldr	r1, [pc, #24]	; (8003268 <iprintf+0x20>)
 800324e:	ab04      	add	r3, sp, #16
 8003250:	6808      	ldr	r0, [r1, #0]
 8003252:	f853 2b04 	ldr.w	r2, [r3], #4
 8003256:	6881      	ldr	r1, [r0, #8]
 8003258:	9301      	str	r3, [sp, #4]
 800325a:	f001 fbed 	bl	8004a38 <_vfiprintf_r>
 800325e:	b003      	add	sp, #12
 8003260:	f85d eb04 	ldr.w	lr, [sp], #4
 8003264:	b004      	add	sp, #16
 8003266:	4770      	bx	lr
 8003268:	20000060 	.word	0x20000060

0800326c <__sread>:
 800326c:	b510      	push	{r4, lr}
 800326e:	460c      	mov	r4, r1
 8003270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003274:	f000 f86c 	bl	8003350 <_read_r>
 8003278:	2800      	cmp	r0, #0
 800327a:	bfab      	itete	ge
 800327c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800327e:	89a3      	ldrhlt	r3, [r4, #12]
 8003280:	181b      	addge	r3, r3, r0
 8003282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003286:	bfac      	ite	ge
 8003288:	6563      	strge	r3, [r4, #84]	; 0x54
 800328a:	81a3      	strhlt	r3, [r4, #12]
 800328c:	bd10      	pop	{r4, pc}

0800328e <__swrite>:
 800328e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003292:	461f      	mov	r7, r3
 8003294:	898b      	ldrh	r3, [r1, #12]
 8003296:	05db      	lsls	r3, r3, #23
 8003298:	4605      	mov	r5, r0
 800329a:	460c      	mov	r4, r1
 800329c:	4616      	mov	r6, r2
 800329e:	d505      	bpl.n	80032ac <__swrite+0x1e>
 80032a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032a4:	2302      	movs	r3, #2
 80032a6:	2200      	movs	r2, #0
 80032a8:	f000 f840 	bl	800332c <_lseek_r>
 80032ac:	89a3      	ldrh	r3, [r4, #12]
 80032ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032b6:	81a3      	strh	r3, [r4, #12]
 80032b8:	4632      	mov	r2, r6
 80032ba:	463b      	mov	r3, r7
 80032bc:	4628      	mov	r0, r5
 80032be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032c2:	f000 b857 	b.w	8003374 <_write_r>

080032c6 <__sseek>:
 80032c6:	b510      	push	{r4, lr}
 80032c8:	460c      	mov	r4, r1
 80032ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032ce:	f000 f82d 	bl	800332c <_lseek_r>
 80032d2:	1c43      	adds	r3, r0, #1
 80032d4:	89a3      	ldrh	r3, [r4, #12]
 80032d6:	bf15      	itete	ne
 80032d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80032da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80032de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80032e2:	81a3      	strheq	r3, [r4, #12]
 80032e4:	bf18      	it	ne
 80032e6:	81a3      	strhne	r3, [r4, #12]
 80032e8:	bd10      	pop	{r4, pc}

080032ea <__sclose>:
 80032ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032ee:	f000 b80d 	b.w	800330c <_close_r>

080032f2 <memset>:
 80032f2:	4402      	add	r2, r0
 80032f4:	4603      	mov	r3, r0
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d100      	bne.n	80032fc <memset+0xa>
 80032fa:	4770      	bx	lr
 80032fc:	f803 1b01 	strb.w	r1, [r3], #1
 8003300:	e7f9      	b.n	80032f6 <memset+0x4>
	...

08003304 <_localeconv_r>:
 8003304:	4800      	ldr	r0, [pc, #0]	; (8003308 <_localeconv_r+0x4>)
 8003306:	4770      	bx	lr
 8003308:	20000154 	.word	0x20000154

0800330c <_close_r>:
 800330c:	b538      	push	{r3, r4, r5, lr}
 800330e:	4d06      	ldr	r5, [pc, #24]	; (8003328 <_close_r+0x1c>)
 8003310:	2300      	movs	r3, #0
 8003312:	4604      	mov	r4, r0
 8003314:	4608      	mov	r0, r1
 8003316:	602b      	str	r3, [r5, #0]
 8003318:	f7ff f8b7 	bl	800248a <_close>
 800331c:	1c43      	adds	r3, r0, #1
 800331e:	d102      	bne.n	8003326 <_close_r+0x1a>
 8003320:	682b      	ldr	r3, [r5, #0]
 8003322:	b103      	cbz	r3, 8003326 <_close_r+0x1a>
 8003324:	6023      	str	r3, [r4, #0]
 8003326:	bd38      	pop	{r3, r4, r5, pc}
 8003328:	20000330 	.word	0x20000330

0800332c <_lseek_r>:
 800332c:	b538      	push	{r3, r4, r5, lr}
 800332e:	4d07      	ldr	r5, [pc, #28]	; (800334c <_lseek_r+0x20>)
 8003330:	4604      	mov	r4, r0
 8003332:	4608      	mov	r0, r1
 8003334:	4611      	mov	r1, r2
 8003336:	2200      	movs	r2, #0
 8003338:	602a      	str	r2, [r5, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	f7ff f8cc 	bl	80024d8 <_lseek>
 8003340:	1c43      	adds	r3, r0, #1
 8003342:	d102      	bne.n	800334a <_lseek_r+0x1e>
 8003344:	682b      	ldr	r3, [r5, #0]
 8003346:	b103      	cbz	r3, 800334a <_lseek_r+0x1e>
 8003348:	6023      	str	r3, [r4, #0]
 800334a:	bd38      	pop	{r3, r4, r5, pc}
 800334c:	20000330 	.word	0x20000330

08003350 <_read_r>:
 8003350:	b538      	push	{r3, r4, r5, lr}
 8003352:	4d07      	ldr	r5, [pc, #28]	; (8003370 <_read_r+0x20>)
 8003354:	4604      	mov	r4, r0
 8003356:	4608      	mov	r0, r1
 8003358:	4611      	mov	r1, r2
 800335a:	2200      	movs	r2, #0
 800335c:	602a      	str	r2, [r5, #0]
 800335e:	461a      	mov	r2, r3
 8003360:	f7ff f85a 	bl	8002418 <_read>
 8003364:	1c43      	adds	r3, r0, #1
 8003366:	d102      	bne.n	800336e <_read_r+0x1e>
 8003368:	682b      	ldr	r3, [r5, #0]
 800336a:	b103      	cbz	r3, 800336e <_read_r+0x1e>
 800336c:	6023      	str	r3, [r4, #0]
 800336e:	bd38      	pop	{r3, r4, r5, pc}
 8003370:	20000330 	.word	0x20000330

08003374 <_write_r>:
 8003374:	b538      	push	{r3, r4, r5, lr}
 8003376:	4d07      	ldr	r5, [pc, #28]	; (8003394 <_write_r+0x20>)
 8003378:	4604      	mov	r4, r0
 800337a:	4608      	mov	r0, r1
 800337c:	4611      	mov	r1, r2
 800337e:	2200      	movs	r2, #0
 8003380:	602a      	str	r2, [r5, #0]
 8003382:	461a      	mov	r2, r3
 8003384:	f7ff f865 	bl	8002452 <_write>
 8003388:	1c43      	adds	r3, r0, #1
 800338a:	d102      	bne.n	8003392 <_write_r+0x1e>
 800338c:	682b      	ldr	r3, [r5, #0]
 800338e:	b103      	cbz	r3, 8003392 <_write_r+0x1e>
 8003390:	6023      	str	r3, [r4, #0]
 8003392:	bd38      	pop	{r3, r4, r5, pc}
 8003394:	20000330 	.word	0x20000330

08003398 <__errno>:
 8003398:	4b01      	ldr	r3, [pc, #4]	; (80033a0 <__errno+0x8>)
 800339a:	6818      	ldr	r0, [r3, #0]
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	20000060 	.word	0x20000060

080033a4 <__libc_init_array>:
 80033a4:	b570      	push	{r4, r5, r6, lr}
 80033a6:	4d0d      	ldr	r5, [pc, #52]	; (80033dc <__libc_init_array+0x38>)
 80033a8:	4c0d      	ldr	r4, [pc, #52]	; (80033e0 <__libc_init_array+0x3c>)
 80033aa:	1b64      	subs	r4, r4, r5
 80033ac:	10a4      	asrs	r4, r4, #2
 80033ae:	2600      	movs	r6, #0
 80033b0:	42a6      	cmp	r6, r4
 80033b2:	d109      	bne.n	80033c8 <__libc_init_array+0x24>
 80033b4:	4d0b      	ldr	r5, [pc, #44]	; (80033e4 <__libc_init_array+0x40>)
 80033b6:	4c0c      	ldr	r4, [pc, #48]	; (80033e8 <__libc_init_array+0x44>)
 80033b8:	f001 fef0 	bl	800519c <_init>
 80033bc:	1b64      	subs	r4, r4, r5
 80033be:	10a4      	asrs	r4, r4, #2
 80033c0:	2600      	movs	r6, #0
 80033c2:	42a6      	cmp	r6, r4
 80033c4:	d105      	bne.n	80033d2 <__libc_init_array+0x2e>
 80033c6:	bd70      	pop	{r4, r5, r6, pc}
 80033c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80033cc:	4798      	blx	r3
 80033ce:	3601      	adds	r6, #1
 80033d0:	e7ee      	b.n	80033b0 <__libc_init_array+0xc>
 80033d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d6:	4798      	blx	r3
 80033d8:	3601      	adds	r6, #1
 80033da:	e7f2      	b.n	80033c2 <__libc_init_array+0x1e>
 80033dc:	0800559c 	.word	0x0800559c
 80033e0:	0800559c 	.word	0x0800559c
 80033e4:	0800559c 	.word	0x0800559c
 80033e8:	080055a0 	.word	0x080055a0

080033ec <__retarget_lock_init_recursive>:
 80033ec:	4770      	bx	lr

080033ee <__retarget_lock_acquire_recursive>:
 80033ee:	4770      	bx	lr

080033f0 <__retarget_lock_release_recursive>:
 80033f0:	4770      	bx	lr

080033f2 <quorem>:
 80033f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f6:	6903      	ldr	r3, [r0, #16]
 80033f8:	690c      	ldr	r4, [r1, #16]
 80033fa:	42a3      	cmp	r3, r4
 80033fc:	4607      	mov	r7, r0
 80033fe:	db7e      	blt.n	80034fe <quorem+0x10c>
 8003400:	3c01      	subs	r4, #1
 8003402:	f101 0814 	add.w	r8, r1, #20
 8003406:	f100 0514 	add.w	r5, r0, #20
 800340a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800340e:	9301      	str	r3, [sp, #4]
 8003410:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003414:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003418:	3301      	adds	r3, #1
 800341a:	429a      	cmp	r2, r3
 800341c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003420:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003424:	fbb2 f6f3 	udiv	r6, r2, r3
 8003428:	d331      	bcc.n	800348e <quorem+0x9c>
 800342a:	f04f 0e00 	mov.w	lr, #0
 800342e:	4640      	mov	r0, r8
 8003430:	46ac      	mov	ip, r5
 8003432:	46f2      	mov	sl, lr
 8003434:	f850 2b04 	ldr.w	r2, [r0], #4
 8003438:	b293      	uxth	r3, r2
 800343a:	fb06 e303 	mla	r3, r6, r3, lr
 800343e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003442:	0c1a      	lsrs	r2, r3, #16
 8003444:	b29b      	uxth	r3, r3
 8003446:	ebaa 0303 	sub.w	r3, sl, r3
 800344a:	f8dc a000 	ldr.w	sl, [ip]
 800344e:	fa13 f38a 	uxtah	r3, r3, sl
 8003452:	fb06 220e 	mla	r2, r6, lr, r2
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	9b00      	ldr	r3, [sp, #0]
 800345a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800345e:	b292      	uxth	r2, r2
 8003460:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003464:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003468:	f8bd 3000 	ldrh.w	r3, [sp]
 800346c:	4581      	cmp	r9, r0
 800346e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003472:	f84c 3b04 	str.w	r3, [ip], #4
 8003476:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800347a:	d2db      	bcs.n	8003434 <quorem+0x42>
 800347c:	f855 300b 	ldr.w	r3, [r5, fp]
 8003480:	b92b      	cbnz	r3, 800348e <quorem+0x9c>
 8003482:	9b01      	ldr	r3, [sp, #4]
 8003484:	3b04      	subs	r3, #4
 8003486:	429d      	cmp	r5, r3
 8003488:	461a      	mov	r2, r3
 800348a:	d32c      	bcc.n	80034e6 <quorem+0xf4>
 800348c:	613c      	str	r4, [r7, #16]
 800348e:	4638      	mov	r0, r7
 8003490:	f001 f9a8 	bl	80047e4 <__mcmp>
 8003494:	2800      	cmp	r0, #0
 8003496:	db22      	blt.n	80034de <quorem+0xec>
 8003498:	3601      	adds	r6, #1
 800349a:	4629      	mov	r1, r5
 800349c:	2000      	movs	r0, #0
 800349e:	f858 2b04 	ldr.w	r2, [r8], #4
 80034a2:	f8d1 c000 	ldr.w	ip, [r1]
 80034a6:	b293      	uxth	r3, r2
 80034a8:	1ac3      	subs	r3, r0, r3
 80034aa:	0c12      	lsrs	r2, r2, #16
 80034ac:	fa13 f38c 	uxtah	r3, r3, ip
 80034b0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80034b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80034be:	45c1      	cmp	r9, r8
 80034c0:	f841 3b04 	str.w	r3, [r1], #4
 80034c4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80034c8:	d2e9      	bcs.n	800349e <quorem+0xac>
 80034ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80034ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80034d2:	b922      	cbnz	r2, 80034de <quorem+0xec>
 80034d4:	3b04      	subs	r3, #4
 80034d6:	429d      	cmp	r5, r3
 80034d8:	461a      	mov	r2, r3
 80034da:	d30a      	bcc.n	80034f2 <quorem+0x100>
 80034dc:	613c      	str	r4, [r7, #16]
 80034de:	4630      	mov	r0, r6
 80034e0:	b003      	add	sp, #12
 80034e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	3b04      	subs	r3, #4
 80034ea:	2a00      	cmp	r2, #0
 80034ec:	d1ce      	bne.n	800348c <quorem+0x9a>
 80034ee:	3c01      	subs	r4, #1
 80034f0:	e7c9      	b.n	8003486 <quorem+0x94>
 80034f2:	6812      	ldr	r2, [r2, #0]
 80034f4:	3b04      	subs	r3, #4
 80034f6:	2a00      	cmp	r2, #0
 80034f8:	d1f0      	bne.n	80034dc <quorem+0xea>
 80034fa:	3c01      	subs	r4, #1
 80034fc:	e7eb      	b.n	80034d6 <quorem+0xe4>
 80034fe:	2000      	movs	r0, #0
 8003500:	e7ee      	b.n	80034e0 <quorem+0xee>
 8003502:	0000      	movs	r0, r0
 8003504:	0000      	movs	r0, r0
	...

08003508 <_dtoa_r>:
 8003508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800350c:	ed2d 8b04 	vpush	{d8-d9}
 8003510:	69c5      	ldr	r5, [r0, #28]
 8003512:	b093      	sub	sp, #76	; 0x4c
 8003514:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003518:	ec57 6b10 	vmov	r6, r7, d0
 800351c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003520:	9107      	str	r1, [sp, #28]
 8003522:	4604      	mov	r4, r0
 8003524:	920a      	str	r2, [sp, #40]	; 0x28
 8003526:	930d      	str	r3, [sp, #52]	; 0x34
 8003528:	b975      	cbnz	r5, 8003548 <_dtoa_r+0x40>
 800352a:	2010      	movs	r0, #16
 800352c:	f000 fe2a 	bl	8004184 <malloc>
 8003530:	4602      	mov	r2, r0
 8003532:	61e0      	str	r0, [r4, #28]
 8003534:	b920      	cbnz	r0, 8003540 <_dtoa_r+0x38>
 8003536:	4bae      	ldr	r3, [pc, #696]	; (80037f0 <_dtoa_r+0x2e8>)
 8003538:	21ef      	movs	r1, #239	; 0xef
 800353a:	48ae      	ldr	r0, [pc, #696]	; (80037f4 <_dtoa_r+0x2ec>)
 800353c:	f001 fcf8 	bl	8004f30 <__assert_func>
 8003540:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003544:	6005      	str	r5, [r0, #0]
 8003546:	60c5      	str	r5, [r0, #12]
 8003548:	69e3      	ldr	r3, [r4, #28]
 800354a:	6819      	ldr	r1, [r3, #0]
 800354c:	b151      	cbz	r1, 8003564 <_dtoa_r+0x5c>
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	604a      	str	r2, [r1, #4]
 8003552:	2301      	movs	r3, #1
 8003554:	4093      	lsls	r3, r2
 8003556:	608b      	str	r3, [r1, #8]
 8003558:	4620      	mov	r0, r4
 800355a:	f000 ff07 	bl	800436c <_Bfree>
 800355e:	69e3      	ldr	r3, [r4, #28]
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	1e3b      	subs	r3, r7, #0
 8003566:	bfbb      	ittet	lt
 8003568:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800356c:	9303      	strlt	r3, [sp, #12]
 800356e:	2300      	movge	r3, #0
 8003570:	2201      	movlt	r2, #1
 8003572:	bfac      	ite	ge
 8003574:	f8c8 3000 	strge.w	r3, [r8]
 8003578:	f8c8 2000 	strlt.w	r2, [r8]
 800357c:	4b9e      	ldr	r3, [pc, #632]	; (80037f8 <_dtoa_r+0x2f0>)
 800357e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003582:	ea33 0308 	bics.w	r3, r3, r8
 8003586:	d11b      	bne.n	80035c0 <_dtoa_r+0xb8>
 8003588:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800358a:	f242 730f 	movw	r3, #9999	; 0x270f
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003594:	4333      	orrs	r3, r6
 8003596:	f000 8593 	beq.w	80040c0 <_dtoa_r+0xbb8>
 800359a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800359c:	b963      	cbnz	r3, 80035b8 <_dtoa_r+0xb0>
 800359e:	4b97      	ldr	r3, [pc, #604]	; (80037fc <_dtoa_r+0x2f4>)
 80035a0:	e027      	b.n	80035f2 <_dtoa_r+0xea>
 80035a2:	4b97      	ldr	r3, [pc, #604]	; (8003800 <_dtoa_r+0x2f8>)
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	3308      	adds	r3, #8
 80035a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	9800      	ldr	r0, [sp, #0]
 80035ae:	b013      	add	sp, #76	; 0x4c
 80035b0:	ecbd 8b04 	vpop	{d8-d9}
 80035b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035b8:	4b90      	ldr	r3, [pc, #576]	; (80037fc <_dtoa_r+0x2f4>)
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	3303      	adds	r3, #3
 80035be:	e7f3      	b.n	80035a8 <_dtoa_r+0xa0>
 80035c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80035c4:	2200      	movs	r2, #0
 80035c6:	ec51 0b17 	vmov	r0, r1, d7
 80035ca:	eeb0 8a47 	vmov.f32	s16, s14
 80035ce:	eef0 8a67 	vmov.f32	s17, s15
 80035d2:	2300      	movs	r3, #0
 80035d4:	f7fd fa80 	bl	8000ad8 <__aeabi_dcmpeq>
 80035d8:	4681      	mov	r9, r0
 80035da:	b160      	cbz	r0, 80035f6 <_dtoa_r+0xee>
 80035dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80035de:	2301      	movs	r3, #1
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8568 	beq.w	80040ba <_dtoa_r+0xbb2>
 80035ea:	4b86      	ldr	r3, [pc, #536]	; (8003804 <_dtoa_r+0x2fc>)
 80035ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	3b01      	subs	r3, #1
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	e7da      	b.n	80035ac <_dtoa_r+0xa4>
 80035f6:	aa10      	add	r2, sp, #64	; 0x40
 80035f8:	a911      	add	r1, sp, #68	; 0x44
 80035fa:	4620      	mov	r0, r4
 80035fc:	eeb0 0a48 	vmov.f32	s0, s16
 8003600:	eef0 0a68 	vmov.f32	s1, s17
 8003604:	f001 f994 	bl	8004930 <__d2b>
 8003608:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800360c:	4682      	mov	sl, r0
 800360e:	2d00      	cmp	r5, #0
 8003610:	d07f      	beq.n	8003712 <_dtoa_r+0x20a>
 8003612:	ee18 3a90 	vmov	r3, s17
 8003616:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800361a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800361e:	ec51 0b18 	vmov	r0, r1, d8
 8003622:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003626:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800362a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800362e:	4619      	mov	r1, r3
 8003630:	2200      	movs	r2, #0
 8003632:	4b75      	ldr	r3, [pc, #468]	; (8003808 <_dtoa_r+0x300>)
 8003634:	f7fc fe30 	bl	8000298 <__aeabi_dsub>
 8003638:	a367      	add	r3, pc, #412	; (adr r3, 80037d8 <_dtoa_r+0x2d0>)
 800363a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363e:	f7fc ffe3 	bl	8000608 <__aeabi_dmul>
 8003642:	a367      	add	r3, pc, #412	; (adr r3, 80037e0 <_dtoa_r+0x2d8>)
 8003644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003648:	f7fc fe28 	bl	800029c <__adddf3>
 800364c:	4606      	mov	r6, r0
 800364e:	4628      	mov	r0, r5
 8003650:	460f      	mov	r7, r1
 8003652:	f7fc ff6f 	bl	8000534 <__aeabi_i2d>
 8003656:	a364      	add	r3, pc, #400	; (adr r3, 80037e8 <_dtoa_r+0x2e0>)
 8003658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365c:	f7fc ffd4 	bl	8000608 <__aeabi_dmul>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4630      	mov	r0, r6
 8003666:	4639      	mov	r1, r7
 8003668:	f7fc fe18 	bl	800029c <__adddf3>
 800366c:	4606      	mov	r6, r0
 800366e:	460f      	mov	r7, r1
 8003670:	f7fd fa7a 	bl	8000b68 <__aeabi_d2iz>
 8003674:	2200      	movs	r2, #0
 8003676:	4683      	mov	fp, r0
 8003678:	2300      	movs	r3, #0
 800367a:	4630      	mov	r0, r6
 800367c:	4639      	mov	r1, r7
 800367e:	f7fd fa35 	bl	8000aec <__aeabi_dcmplt>
 8003682:	b148      	cbz	r0, 8003698 <_dtoa_r+0x190>
 8003684:	4658      	mov	r0, fp
 8003686:	f7fc ff55 	bl	8000534 <__aeabi_i2d>
 800368a:	4632      	mov	r2, r6
 800368c:	463b      	mov	r3, r7
 800368e:	f7fd fa23 	bl	8000ad8 <__aeabi_dcmpeq>
 8003692:	b908      	cbnz	r0, 8003698 <_dtoa_r+0x190>
 8003694:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003698:	f1bb 0f16 	cmp.w	fp, #22
 800369c:	d857      	bhi.n	800374e <_dtoa_r+0x246>
 800369e:	4b5b      	ldr	r3, [pc, #364]	; (800380c <_dtoa_r+0x304>)
 80036a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80036a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a8:	ec51 0b18 	vmov	r0, r1, d8
 80036ac:	f7fd fa1e 	bl	8000aec <__aeabi_dcmplt>
 80036b0:	2800      	cmp	r0, #0
 80036b2:	d04e      	beq.n	8003752 <_dtoa_r+0x24a>
 80036b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80036b8:	2300      	movs	r3, #0
 80036ba:	930c      	str	r3, [sp, #48]	; 0x30
 80036bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80036be:	1b5b      	subs	r3, r3, r5
 80036c0:	1e5a      	subs	r2, r3, #1
 80036c2:	bf45      	ittet	mi
 80036c4:	f1c3 0301 	rsbmi	r3, r3, #1
 80036c8:	9305      	strmi	r3, [sp, #20]
 80036ca:	2300      	movpl	r3, #0
 80036cc:	2300      	movmi	r3, #0
 80036ce:	9206      	str	r2, [sp, #24]
 80036d0:	bf54      	ite	pl
 80036d2:	9305      	strpl	r3, [sp, #20]
 80036d4:	9306      	strmi	r3, [sp, #24]
 80036d6:	f1bb 0f00 	cmp.w	fp, #0
 80036da:	db3c      	blt.n	8003756 <_dtoa_r+0x24e>
 80036dc:	9b06      	ldr	r3, [sp, #24]
 80036de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80036e2:	445b      	add	r3, fp
 80036e4:	9306      	str	r3, [sp, #24]
 80036e6:	2300      	movs	r3, #0
 80036e8:	9308      	str	r3, [sp, #32]
 80036ea:	9b07      	ldr	r3, [sp, #28]
 80036ec:	2b09      	cmp	r3, #9
 80036ee:	d868      	bhi.n	80037c2 <_dtoa_r+0x2ba>
 80036f0:	2b05      	cmp	r3, #5
 80036f2:	bfc4      	itt	gt
 80036f4:	3b04      	subgt	r3, #4
 80036f6:	9307      	strgt	r3, [sp, #28]
 80036f8:	9b07      	ldr	r3, [sp, #28]
 80036fa:	f1a3 0302 	sub.w	r3, r3, #2
 80036fe:	bfcc      	ite	gt
 8003700:	2500      	movgt	r5, #0
 8003702:	2501      	movle	r5, #1
 8003704:	2b03      	cmp	r3, #3
 8003706:	f200 8085 	bhi.w	8003814 <_dtoa_r+0x30c>
 800370a:	e8df f003 	tbb	[pc, r3]
 800370e:	3b2e      	.short	0x3b2e
 8003710:	5839      	.short	0x5839
 8003712:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003716:	441d      	add	r5, r3
 8003718:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800371c:	2b20      	cmp	r3, #32
 800371e:	bfc1      	itttt	gt
 8003720:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003724:	fa08 f803 	lslgt.w	r8, r8, r3
 8003728:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800372c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003730:	bfd6      	itet	le
 8003732:	f1c3 0320 	rsble	r3, r3, #32
 8003736:	ea48 0003 	orrgt.w	r0, r8, r3
 800373a:	fa06 f003 	lslle.w	r0, r6, r3
 800373e:	f7fc fee9 	bl	8000514 <__aeabi_ui2d>
 8003742:	2201      	movs	r2, #1
 8003744:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003748:	3d01      	subs	r5, #1
 800374a:	920e      	str	r2, [sp, #56]	; 0x38
 800374c:	e76f      	b.n	800362e <_dtoa_r+0x126>
 800374e:	2301      	movs	r3, #1
 8003750:	e7b3      	b.n	80036ba <_dtoa_r+0x1b2>
 8003752:	900c      	str	r0, [sp, #48]	; 0x30
 8003754:	e7b2      	b.n	80036bc <_dtoa_r+0x1b4>
 8003756:	9b05      	ldr	r3, [sp, #20]
 8003758:	eba3 030b 	sub.w	r3, r3, fp
 800375c:	9305      	str	r3, [sp, #20]
 800375e:	f1cb 0300 	rsb	r3, fp, #0
 8003762:	9308      	str	r3, [sp, #32]
 8003764:	2300      	movs	r3, #0
 8003766:	930b      	str	r3, [sp, #44]	; 0x2c
 8003768:	e7bf      	b.n	80036ea <_dtoa_r+0x1e2>
 800376a:	2300      	movs	r3, #0
 800376c:	9309      	str	r3, [sp, #36]	; 0x24
 800376e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003770:	2b00      	cmp	r3, #0
 8003772:	dc52      	bgt.n	800381a <_dtoa_r+0x312>
 8003774:	2301      	movs	r3, #1
 8003776:	9301      	str	r3, [sp, #4]
 8003778:	9304      	str	r3, [sp, #16]
 800377a:	461a      	mov	r2, r3
 800377c:	920a      	str	r2, [sp, #40]	; 0x28
 800377e:	e00b      	b.n	8003798 <_dtoa_r+0x290>
 8003780:	2301      	movs	r3, #1
 8003782:	e7f3      	b.n	800376c <_dtoa_r+0x264>
 8003784:	2300      	movs	r3, #0
 8003786:	9309      	str	r3, [sp, #36]	; 0x24
 8003788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800378a:	445b      	add	r3, fp
 800378c:	9301      	str	r3, [sp, #4]
 800378e:	3301      	adds	r3, #1
 8003790:	2b01      	cmp	r3, #1
 8003792:	9304      	str	r3, [sp, #16]
 8003794:	bfb8      	it	lt
 8003796:	2301      	movlt	r3, #1
 8003798:	69e0      	ldr	r0, [r4, #28]
 800379a:	2100      	movs	r1, #0
 800379c:	2204      	movs	r2, #4
 800379e:	f102 0614 	add.w	r6, r2, #20
 80037a2:	429e      	cmp	r6, r3
 80037a4:	d93d      	bls.n	8003822 <_dtoa_r+0x31a>
 80037a6:	6041      	str	r1, [r0, #4]
 80037a8:	4620      	mov	r0, r4
 80037aa:	f000 fd9f 	bl	80042ec <_Balloc>
 80037ae:	9000      	str	r0, [sp, #0]
 80037b0:	2800      	cmp	r0, #0
 80037b2:	d139      	bne.n	8003828 <_dtoa_r+0x320>
 80037b4:	4b16      	ldr	r3, [pc, #88]	; (8003810 <_dtoa_r+0x308>)
 80037b6:	4602      	mov	r2, r0
 80037b8:	f240 11af 	movw	r1, #431	; 0x1af
 80037bc:	e6bd      	b.n	800353a <_dtoa_r+0x32>
 80037be:	2301      	movs	r3, #1
 80037c0:	e7e1      	b.n	8003786 <_dtoa_r+0x27e>
 80037c2:	2501      	movs	r5, #1
 80037c4:	2300      	movs	r3, #0
 80037c6:	9307      	str	r3, [sp, #28]
 80037c8:	9509      	str	r5, [sp, #36]	; 0x24
 80037ca:	f04f 33ff 	mov.w	r3, #4294967295
 80037ce:	9301      	str	r3, [sp, #4]
 80037d0:	9304      	str	r3, [sp, #16]
 80037d2:	2200      	movs	r2, #0
 80037d4:	2312      	movs	r3, #18
 80037d6:	e7d1      	b.n	800377c <_dtoa_r+0x274>
 80037d8:	636f4361 	.word	0x636f4361
 80037dc:	3fd287a7 	.word	0x3fd287a7
 80037e0:	8b60c8b3 	.word	0x8b60c8b3
 80037e4:	3fc68a28 	.word	0x3fc68a28
 80037e8:	509f79fb 	.word	0x509f79fb
 80037ec:	3fd34413 	.word	0x3fd34413
 80037f0:	0800526c 	.word	0x0800526c
 80037f4:	08005283 	.word	0x08005283
 80037f8:	7ff00000 	.word	0x7ff00000
 80037fc:	08005268 	.word	0x08005268
 8003800:	0800525f 	.word	0x0800525f
 8003804:	0800523c 	.word	0x0800523c
 8003808:	3ff80000 	.word	0x3ff80000
 800380c:	08005370 	.word	0x08005370
 8003810:	080052db 	.word	0x080052db
 8003814:	2301      	movs	r3, #1
 8003816:	9309      	str	r3, [sp, #36]	; 0x24
 8003818:	e7d7      	b.n	80037ca <_dtoa_r+0x2c2>
 800381a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	9304      	str	r3, [sp, #16]
 8003820:	e7ba      	b.n	8003798 <_dtoa_r+0x290>
 8003822:	3101      	adds	r1, #1
 8003824:	0052      	lsls	r2, r2, #1
 8003826:	e7ba      	b.n	800379e <_dtoa_r+0x296>
 8003828:	69e3      	ldr	r3, [r4, #28]
 800382a:	9a00      	ldr	r2, [sp, #0]
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	9b04      	ldr	r3, [sp, #16]
 8003830:	2b0e      	cmp	r3, #14
 8003832:	f200 80a8 	bhi.w	8003986 <_dtoa_r+0x47e>
 8003836:	2d00      	cmp	r5, #0
 8003838:	f000 80a5 	beq.w	8003986 <_dtoa_r+0x47e>
 800383c:	f1bb 0f00 	cmp.w	fp, #0
 8003840:	dd38      	ble.n	80038b4 <_dtoa_r+0x3ac>
 8003842:	4bc0      	ldr	r3, [pc, #768]	; (8003b44 <_dtoa_r+0x63c>)
 8003844:	f00b 020f 	and.w	r2, fp, #15
 8003848:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800384c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003850:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003854:	ea4f 182b 	mov.w	r8, fp, asr #4
 8003858:	d019      	beq.n	800388e <_dtoa_r+0x386>
 800385a:	4bbb      	ldr	r3, [pc, #748]	; (8003b48 <_dtoa_r+0x640>)
 800385c:	ec51 0b18 	vmov	r0, r1, d8
 8003860:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003864:	f7fc fffa 	bl	800085c <__aeabi_ddiv>
 8003868:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800386c:	f008 080f 	and.w	r8, r8, #15
 8003870:	2503      	movs	r5, #3
 8003872:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8003b48 <_dtoa_r+0x640>
 8003876:	f1b8 0f00 	cmp.w	r8, #0
 800387a:	d10a      	bne.n	8003892 <_dtoa_r+0x38a>
 800387c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003880:	4632      	mov	r2, r6
 8003882:	463b      	mov	r3, r7
 8003884:	f7fc ffea 	bl	800085c <__aeabi_ddiv>
 8003888:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800388c:	e02b      	b.n	80038e6 <_dtoa_r+0x3de>
 800388e:	2502      	movs	r5, #2
 8003890:	e7ef      	b.n	8003872 <_dtoa_r+0x36a>
 8003892:	f018 0f01 	tst.w	r8, #1
 8003896:	d008      	beq.n	80038aa <_dtoa_r+0x3a2>
 8003898:	4630      	mov	r0, r6
 800389a:	4639      	mov	r1, r7
 800389c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80038a0:	f7fc feb2 	bl	8000608 <__aeabi_dmul>
 80038a4:	3501      	adds	r5, #1
 80038a6:	4606      	mov	r6, r0
 80038a8:	460f      	mov	r7, r1
 80038aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80038ae:	f109 0908 	add.w	r9, r9, #8
 80038b2:	e7e0      	b.n	8003876 <_dtoa_r+0x36e>
 80038b4:	f000 809f 	beq.w	80039f6 <_dtoa_r+0x4ee>
 80038b8:	f1cb 0600 	rsb	r6, fp, #0
 80038bc:	4ba1      	ldr	r3, [pc, #644]	; (8003b44 <_dtoa_r+0x63c>)
 80038be:	4fa2      	ldr	r7, [pc, #648]	; (8003b48 <_dtoa_r+0x640>)
 80038c0:	f006 020f 	and.w	r2, r6, #15
 80038c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80038c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038cc:	ec51 0b18 	vmov	r0, r1, d8
 80038d0:	f7fc fe9a 	bl	8000608 <__aeabi_dmul>
 80038d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80038d8:	1136      	asrs	r6, r6, #4
 80038da:	2300      	movs	r3, #0
 80038dc:	2502      	movs	r5, #2
 80038de:	2e00      	cmp	r6, #0
 80038e0:	d17e      	bne.n	80039e0 <_dtoa_r+0x4d8>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1d0      	bne.n	8003888 <_dtoa_r+0x380>
 80038e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80038e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 8084 	beq.w	80039fa <_dtoa_r+0x4f2>
 80038f2:	4b96      	ldr	r3, [pc, #600]	; (8003b4c <_dtoa_r+0x644>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	4640      	mov	r0, r8
 80038f8:	4649      	mov	r1, r9
 80038fa:	f7fd f8f7 	bl	8000aec <__aeabi_dcmplt>
 80038fe:	2800      	cmp	r0, #0
 8003900:	d07b      	beq.n	80039fa <_dtoa_r+0x4f2>
 8003902:	9b04      	ldr	r3, [sp, #16]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d078      	beq.n	80039fa <_dtoa_r+0x4f2>
 8003908:	9b01      	ldr	r3, [sp, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	dd39      	ble.n	8003982 <_dtoa_r+0x47a>
 800390e:	4b90      	ldr	r3, [pc, #576]	; (8003b50 <_dtoa_r+0x648>)
 8003910:	2200      	movs	r2, #0
 8003912:	4640      	mov	r0, r8
 8003914:	4649      	mov	r1, r9
 8003916:	f7fc fe77 	bl	8000608 <__aeabi_dmul>
 800391a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800391e:	9e01      	ldr	r6, [sp, #4]
 8003920:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003924:	3501      	adds	r5, #1
 8003926:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800392a:	4628      	mov	r0, r5
 800392c:	f7fc fe02 	bl	8000534 <__aeabi_i2d>
 8003930:	4642      	mov	r2, r8
 8003932:	464b      	mov	r3, r9
 8003934:	f7fc fe68 	bl	8000608 <__aeabi_dmul>
 8003938:	4b86      	ldr	r3, [pc, #536]	; (8003b54 <_dtoa_r+0x64c>)
 800393a:	2200      	movs	r2, #0
 800393c:	f7fc fcae 	bl	800029c <__adddf3>
 8003940:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8003944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003948:	9303      	str	r3, [sp, #12]
 800394a:	2e00      	cmp	r6, #0
 800394c:	d158      	bne.n	8003a00 <_dtoa_r+0x4f8>
 800394e:	4b82      	ldr	r3, [pc, #520]	; (8003b58 <_dtoa_r+0x650>)
 8003950:	2200      	movs	r2, #0
 8003952:	4640      	mov	r0, r8
 8003954:	4649      	mov	r1, r9
 8003956:	f7fc fc9f 	bl	8000298 <__aeabi_dsub>
 800395a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800395e:	4680      	mov	r8, r0
 8003960:	4689      	mov	r9, r1
 8003962:	f7fd f8e1 	bl	8000b28 <__aeabi_dcmpgt>
 8003966:	2800      	cmp	r0, #0
 8003968:	f040 8296 	bne.w	8003e98 <_dtoa_r+0x990>
 800396c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8003970:	4640      	mov	r0, r8
 8003972:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003976:	4649      	mov	r1, r9
 8003978:	f7fd f8b8 	bl	8000aec <__aeabi_dcmplt>
 800397c:	2800      	cmp	r0, #0
 800397e:	f040 8289 	bne.w	8003e94 <_dtoa_r+0x98c>
 8003982:	ed8d 8b02 	vstr	d8, [sp, #8]
 8003986:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003988:	2b00      	cmp	r3, #0
 800398a:	f2c0 814e 	blt.w	8003c2a <_dtoa_r+0x722>
 800398e:	f1bb 0f0e 	cmp.w	fp, #14
 8003992:	f300 814a 	bgt.w	8003c2a <_dtoa_r+0x722>
 8003996:	4b6b      	ldr	r3, [pc, #428]	; (8003b44 <_dtoa_r+0x63c>)
 8003998:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800399c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80039a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f280 80dc 	bge.w	8003b60 <_dtoa_r+0x658>
 80039a8:	9b04      	ldr	r3, [sp, #16]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f300 80d8 	bgt.w	8003b60 <_dtoa_r+0x658>
 80039b0:	f040 826f 	bne.w	8003e92 <_dtoa_r+0x98a>
 80039b4:	4b68      	ldr	r3, [pc, #416]	; (8003b58 <_dtoa_r+0x650>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	4640      	mov	r0, r8
 80039ba:	4649      	mov	r1, r9
 80039bc:	f7fc fe24 	bl	8000608 <__aeabi_dmul>
 80039c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80039c4:	f7fd f8a6 	bl	8000b14 <__aeabi_dcmpge>
 80039c8:	9e04      	ldr	r6, [sp, #16]
 80039ca:	4637      	mov	r7, r6
 80039cc:	2800      	cmp	r0, #0
 80039ce:	f040 8245 	bne.w	8003e5c <_dtoa_r+0x954>
 80039d2:	9d00      	ldr	r5, [sp, #0]
 80039d4:	2331      	movs	r3, #49	; 0x31
 80039d6:	f805 3b01 	strb.w	r3, [r5], #1
 80039da:	f10b 0b01 	add.w	fp, fp, #1
 80039de:	e241      	b.n	8003e64 <_dtoa_r+0x95c>
 80039e0:	07f2      	lsls	r2, r6, #31
 80039e2:	d505      	bpl.n	80039f0 <_dtoa_r+0x4e8>
 80039e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039e8:	f7fc fe0e 	bl	8000608 <__aeabi_dmul>
 80039ec:	3501      	adds	r5, #1
 80039ee:	2301      	movs	r3, #1
 80039f0:	1076      	asrs	r6, r6, #1
 80039f2:	3708      	adds	r7, #8
 80039f4:	e773      	b.n	80038de <_dtoa_r+0x3d6>
 80039f6:	2502      	movs	r5, #2
 80039f8:	e775      	b.n	80038e6 <_dtoa_r+0x3de>
 80039fa:	9e04      	ldr	r6, [sp, #16]
 80039fc:	465f      	mov	r7, fp
 80039fe:	e792      	b.n	8003926 <_dtoa_r+0x41e>
 8003a00:	9900      	ldr	r1, [sp, #0]
 8003a02:	4b50      	ldr	r3, [pc, #320]	; (8003b44 <_dtoa_r+0x63c>)
 8003a04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003a08:	4431      	add	r1, r6
 8003a0a:	9102      	str	r1, [sp, #8]
 8003a0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a0e:	eeb0 9a47 	vmov.f32	s18, s14
 8003a12:	eef0 9a67 	vmov.f32	s19, s15
 8003a16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003a1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003a1e:	2900      	cmp	r1, #0
 8003a20:	d044      	beq.n	8003aac <_dtoa_r+0x5a4>
 8003a22:	494e      	ldr	r1, [pc, #312]	; (8003b5c <_dtoa_r+0x654>)
 8003a24:	2000      	movs	r0, #0
 8003a26:	f7fc ff19 	bl	800085c <__aeabi_ddiv>
 8003a2a:	ec53 2b19 	vmov	r2, r3, d9
 8003a2e:	f7fc fc33 	bl	8000298 <__aeabi_dsub>
 8003a32:	9d00      	ldr	r5, [sp, #0]
 8003a34:	ec41 0b19 	vmov	d9, r0, r1
 8003a38:	4649      	mov	r1, r9
 8003a3a:	4640      	mov	r0, r8
 8003a3c:	f7fd f894 	bl	8000b68 <__aeabi_d2iz>
 8003a40:	4606      	mov	r6, r0
 8003a42:	f7fc fd77 	bl	8000534 <__aeabi_i2d>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4640      	mov	r0, r8
 8003a4c:	4649      	mov	r1, r9
 8003a4e:	f7fc fc23 	bl	8000298 <__aeabi_dsub>
 8003a52:	3630      	adds	r6, #48	; 0x30
 8003a54:	f805 6b01 	strb.w	r6, [r5], #1
 8003a58:	ec53 2b19 	vmov	r2, r3, d9
 8003a5c:	4680      	mov	r8, r0
 8003a5e:	4689      	mov	r9, r1
 8003a60:	f7fd f844 	bl	8000aec <__aeabi_dcmplt>
 8003a64:	2800      	cmp	r0, #0
 8003a66:	d164      	bne.n	8003b32 <_dtoa_r+0x62a>
 8003a68:	4642      	mov	r2, r8
 8003a6a:	464b      	mov	r3, r9
 8003a6c:	4937      	ldr	r1, [pc, #220]	; (8003b4c <_dtoa_r+0x644>)
 8003a6e:	2000      	movs	r0, #0
 8003a70:	f7fc fc12 	bl	8000298 <__aeabi_dsub>
 8003a74:	ec53 2b19 	vmov	r2, r3, d9
 8003a78:	f7fd f838 	bl	8000aec <__aeabi_dcmplt>
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	f040 80b6 	bne.w	8003bee <_dtoa_r+0x6e6>
 8003a82:	9b02      	ldr	r3, [sp, #8]
 8003a84:	429d      	cmp	r5, r3
 8003a86:	f43f af7c 	beq.w	8003982 <_dtoa_r+0x47a>
 8003a8a:	4b31      	ldr	r3, [pc, #196]	; (8003b50 <_dtoa_r+0x648>)
 8003a8c:	ec51 0b19 	vmov	r0, r1, d9
 8003a90:	2200      	movs	r2, #0
 8003a92:	f7fc fdb9 	bl	8000608 <__aeabi_dmul>
 8003a96:	4b2e      	ldr	r3, [pc, #184]	; (8003b50 <_dtoa_r+0x648>)
 8003a98:	ec41 0b19 	vmov	d9, r0, r1
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	4640      	mov	r0, r8
 8003aa0:	4649      	mov	r1, r9
 8003aa2:	f7fc fdb1 	bl	8000608 <__aeabi_dmul>
 8003aa6:	4680      	mov	r8, r0
 8003aa8:	4689      	mov	r9, r1
 8003aaa:	e7c5      	b.n	8003a38 <_dtoa_r+0x530>
 8003aac:	ec51 0b17 	vmov	r0, r1, d7
 8003ab0:	f7fc fdaa 	bl	8000608 <__aeabi_dmul>
 8003ab4:	9b02      	ldr	r3, [sp, #8]
 8003ab6:	9d00      	ldr	r5, [sp, #0]
 8003ab8:	930f      	str	r3, [sp, #60]	; 0x3c
 8003aba:	ec41 0b19 	vmov	d9, r0, r1
 8003abe:	4649      	mov	r1, r9
 8003ac0:	4640      	mov	r0, r8
 8003ac2:	f7fd f851 	bl	8000b68 <__aeabi_d2iz>
 8003ac6:	4606      	mov	r6, r0
 8003ac8:	f7fc fd34 	bl	8000534 <__aeabi_i2d>
 8003acc:	3630      	adds	r6, #48	; 0x30
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4640      	mov	r0, r8
 8003ad4:	4649      	mov	r1, r9
 8003ad6:	f7fc fbdf 	bl	8000298 <__aeabi_dsub>
 8003ada:	f805 6b01 	strb.w	r6, [r5], #1
 8003ade:	9b02      	ldr	r3, [sp, #8]
 8003ae0:	429d      	cmp	r5, r3
 8003ae2:	4680      	mov	r8, r0
 8003ae4:	4689      	mov	r9, r1
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	d124      	bne.n	8003b36 <_dtoa_r+0x62e>
 8003aec:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <_dtoa_r+0x654>)
 8003aee:	ec51 0b19 	vmov	r0, r1, d9
 8003af2:	f7fc fbd3 	bl	800029c <__adddf3>
 8003af6:	4602      	mov	r2, r0
 8003af8:	460b      	mov	r3, r1
 8003afa:	4640      	mov	r0, r8
 8003afc:	4649      	mov	r1, r9
 8003afe:	f7fd f813 	bl	8000b28 <__aeabi_dcmpgt>
 8003b02:	2800      	cmp	r0, #0
 8003b04:	d173      	bne.n	8003bee <_dtoa_r+0x6e6>
 8003b06:	ec53 2b19 	vmov	r2, r3, d9
 8003b0a:	4914      	ldr	r1, [pc, #80]	; (8003b5c <_dtoa_r+0x654>)
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	f7fc fbc3 	bl	8000298 <__aeabi_dsub>
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	4640      	mov	r0, r8
 8003b18:	4649      	mov	r1, r9
 8003b1a:	f7fc ffe7 	bl	8000aec <__aeabi_dcmplt>
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	f43f af2f 	beq.w	8003982 <_dtoa_r+0x47a>
 8003b24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003b26:	1e6b      	subs	r3, r5, #1
 8003b28:	930f      	str	r3, [sp, #60]	; 0x3c
 8003b2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003b2e:	2b30      	cmp	r3, #48	; 0x30
 8003b30:	d0f8      	beq.n	8003b24 <_dtoa_r+0x61c>
 8003b32:	46bb      	mov	fp, r7
 8003b34:	e04a      	b.n	8003bcc <_dtoa_r+0x6c4>
 8003b36:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <_dtoa_r+0x648>)
 8003b38:	f7fc fd66 	bl	8000608 <__aeabi_dmul>
 8003b3c:	4680      	mov	r8, r0
 8003b3e:	4689      	mov	r9, r1
 8003b40:	e7bd      	b.n	8003abe <_dtoa_r+0x5b6>
 8003b42:	bf00      	nop
 8003b44:	08005370 	.word	0x08005370
 8003b48:	08005348 	.word	0x08005348
 8003b4c:	3ff00000 	.word	0x3ff00000
 8003b50:	40240000 	.word	0x40240000
 8003b54:	401c0000 	.word	0x401c0000
 8003b58:	40140000 	.word	0x40140000
 8003b5c:	3fe00000 	.word	0x3fe00000
 8003b60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003b64:	9d00      	ldr	r5, [sp, #0]
 8003b66:	4642      	mov	r2, r8
 8003b68:	464b      	mov	r3, r9
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	4639      	mov	r1, r7
 8003b6e:	f7fc fe75 	bl	800085c <__aeabi_ddiv>
 8003b72:	f7fc fff9 	bl	8000b68 <__aeabi_d2iz>
 8003b76:	9001      	str	r0, [sp, #4]
 8003b78:	f7fc fcdc 	bl	8000534 <__aeabi_i2d>
 8003b7c:	4642      	mov	r2, r8
 8003b7e:	464b      	mov	r3, r9
 8003b80:	f7fc fd42 	bl	8000608 <__aeabi_dmul>
 8003b84:	4602      	mov	r2, r0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4630      	mov	r0, r6
 8003b8a:	4639      	mov	r1, r7
 8003b8c:	f7fc fb84 	bl	8000298 <__aeabi_dsub>
 8003b90:	9e01      	ldr	r6, [sp, #4]
 8003b92:	9f04      	ldr	r7, [sp, #16]
 8003b94:	3630      	adds	r6, #48	; 0x30
 8003b96:	f805 6b01 	strb.w	r6, [r5], #1
 8003b9a:	9e00      	ldr	r6, [sp, #0]
 8003b9c:	1bae      	subs	r6, r5, r6
 8003b9e:	42b7      	cmp	r7, r6
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	d134      	bne.n	8003c10 <_dtoa_r+0x708>
 8003ba6:	f7fc fb79 	bl	800029c <__adddf3>
 8003baa:	4642      	mov	r2, r8
 8003bac:	464b      	mov	r3, r9
 8003bae:	4606      	mov	r6, r0
 8003bb0:	460f      	mov	r7, r1
 8003bb2:	f7fc ffb9 	bl	8000b28 <__aeabi_dcmpgt>
 8003bb6:	b9c8      	cbnz	r0, 8003bec <_dtoa_r+0x6e4>
 8003bb8:	4642      	mov	r2, r8
 8003bba:	464b      	mov	r3, r9
 8003bbc:	4630      	mov	r0, r6
 8003bbe:	4639      	mov	r1, r7
 8003bc0:	f7fc ff8a 	bl	8000ad8 <__aeabi_dcmpeq>
 8003bc4:	b110      	cbz	r0, 8003bcc <_dtoa_r+0x6c4>
 8003bc6:	9b01      	ldr	r3, [sp, #4]
 8003bc8:	07db      	lsls	r3, r3, #31
 8003bca:	d40f      	bmi.n	8003bec <_dtoa_r+0x6e4>
 8003bcc:	4651      	mov	r1, sl
 8003bce:	4620      	mov	r0, r4
 8003bd0:	f000 fbcc 	bl	800436c <_Bfree>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003bd8:	702b      	strb	r3, [r5, #0]
 8003bda:	f10b 0301 	add.w	r3, fp, #1
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	f43f ace2 	beq.w	80035ac <_dtoa_r+0xa4>
 8003be8:	601d      	str	r5, [r3, #0]
 8003bea:	e4df      	b.n	80035ac <_dtoa_r+0xa4>
 8003bec:	465f      	mov	r7, fp
 8003bee:	462b      	mov	r3, r5
 8003bf0:	461d      	mov	r5, r3
 8003bf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003bf6:	2a39      	cmp	r2, #57	; 0x39
 8003bf8:	d106      	bne.n	8003c08 <_dtoa_r+0x700>
 8003bfa:	9a00      	ldr	r2, [sp, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d1f7      	bne.n	8003bf0 <_dtoa_r+0x6e8>
 8003c00:	9900      	ldr	r1, [sp, #0]
 8003c02:	2230      	movs	r2, #48	; 0x30
 8003c04:	3701      	adds	r7, #1
 8003c06:	700a      	strb	r2, [r1, #0]
 8003c08:	781a      	ldrb	r2, [r3, #0]
 8003c0a:	3201      	adds	r2, #1
 8003c0c:	701a      	strb	r2, [r3, #0]
 8003c0e:	e790      	b.n	8003b32 <_dtoa_r+0x62a>
 8003c10:	4ba3      	ldr	r3, [pc, #652]	; (8003ea0 <_dtoa_r+0x998>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	f7fc fcf8 	bl	8000608 <__aeabi_dmul>
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	4606      	mov	r6, r0
 8003c1e:	460f      	mov	r7, r1
 8003c20:	f7fc ff5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8003c24:	2800      	cmp	r0, #0
 8003c26:	d09e      	beq.n	8003b66 <_dtoa_r+0x65e>
 8003c28:	e7d0      	b.n	8003bcc <_dtoa_r+0x6c4>
 8003c2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c2c:	2a00      	cmp	r2, #0
 8003c2e:	f000 80ca 	beq.w	8003dc6 <_dtoa_r+0x8be>
 8003c32:	9a07      	ldr	r2, [sp, #28]
 8003c34:	2a01      	cmp	r2, #1
 8003c36:	f300 80ad 	bgt.w	8003d94 <_dtoa_r+0x88c>
 8003c3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003c3c:	2a00      	cmp	r2, #0
 8003c3e:	f000 80a5 	beq.w	8003d8c <_dtoa_r+0x884>
 8003c42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003c46:	9e08      	ldr	r6, [sp, #32]
 8003c48:	9d05      	ldr	r5, [sp, #20]
 8003c4a:	9a05      	ldr	r2, [sp, #20]
 8003c4c:	441a      	add	r2, r3
 8003c4e:	9205      	str	r2, [sp, #20]
 8003c50:	9a06      	ldr	r2, [sp, #24]
 8003c52:	2101      	movs	r1, #1
 8003c54:	441a      	add	r2, r3
 8003c56:	4620      	mov	r0, r4
 8003c58:	9206      	str	r2, [sp, #24]
 8003c5a:	f000 fc3d 	bl	80044d8 <__i2b>
 8003c5e:	4607      	mov	r7, r0
 8003c60:	b165      	cbz	r5, 8003c7c <_dtoa_r+0x774>
 8003c62:	9b06      	ldr	r3, [sp, #24]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	dd09      	ble.n	8003c7c <_dtoa_r+0x774>
 8003c68:	42ab      	cmp	r3, r5
 8003c6a:	9a05      	ldr	r2, [sp, #20]
 8003c6c:	bfa8      	it	ge
 8003c6e:	462b      	movge	r3, r5
 8003c70:	1ad2      	subs	r2, r2, r3
 8003c72:	9205      	str	r2, [sp, #20]
 8003c74:	9a06      	ldr	r2, [sp, #24]
 8003c76:	1aed      	subs	r5, r5, r3
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	9306      	str	r3, [sp, #24]
 8003c7c:	9b08      	ldr	r3, [sp, #32]
 8003c7e:	b1f3      	cbz	r3, 8003cbe <_dtoa_r+0x7b6>
 8003c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 80a3 	beq.w	8003dce <_dtoa_r+0x8c6>
 8003c88:	2e00      	cmp	r6, #0
 8003c8a:	dd10      	ble.n	8003cae <_dtoa_r+0x7a6>
 8003c8c:	4639      	mov	r1, r7
 8003c8e:	4632      	mov	r2, r6
 8003c90:	4620      	mov	r0, r4
 8003c92:	f000 fce1 	bl	8004658 <__pow5mult>
 8003c96:	4652      	mov	r2, sl
 8003c98:	4601      	mov	r1, r0
 8003c9a:	4607      	mov	r7, r0
 8003c9c:	4620      	mov	r0, r4
 8003c9e:	f000 fc31 	bl	8004504 <__multiply>
 8003ca2:	4651      	mov	r1, sl
 8003ca4:	4680      	mov	r8, r0
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	f000 fb60 	bl	800436c <_Bfree>
 8003cac:	46c2      	mov	sl, r8
 8003cae:	9b08      	ldr	r3, [sp, #32]
 8003cb0:	1b9a      	subs	r2, r3, r6
 8003cb2:	d004      	beq.n	8003cbe <_dtoa_r+0x7b6>
 8003cb4:	4651      	mov	r1, sl
 8003cb6:	4620      	mov	r0, r4
 8003cb8:	f000 fcce 	bl	8004658 <__pow5mult>
 8003cbc:	4682      	mov	sl, r0
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	f000 fc09 	bl	80044d8 <__i2b>
 8003cc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	4606      	mov	r6, r0
 8003ccc:	f340 8081 	ble.w	8003dd2 <_dtoa_r+0x8ca>
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4601      	mov	r1, r0
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	f000 fcbf 	bl	8004658 <__pow5mult>
 8003cda:	9b07      	ldr	r3, [sp, #28]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	4606      	mov	r6, r0
 8003ce0:	dd7a      	ble.n	8003dd8 <_dtoa_r+0x8d0>
 8003ce2:	f04f 0800 	mov.w	r8, #0
 8003ce6:	6933      	ldr	r3, [r6, #16]
 8003ce8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003cec:	6918      	ldr	r0, [r3, #16]
 8003cee:	f000 fba5 	bl	800443c <__hi0bits>
 8003cf2:	f1c0 0020 	rsb	r0, r0, #32
 8003cf6:	9b06      	ldr	r3, [sp, #24]
 8003cf8:	4418      	add	r0, r3
 8003cfa:	f010 001f 	ands.w	r0, r0, #31
 8003cfe:	f000 8094 	beq.w	8003e2a <_dtoa_r+0x922>
 8003d02:	f1c0 0320 	rsb	r3, r0, #32
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	f340 8085 	ble.w	8003e16 <_dtoa_r+0x90e>
 8003d0c:	9b05      	ldr	r3, [sp, #20]
 8003d0e:	f1c0 001c 	rsb	r0, r0, #28
 8003d12:	4403      	add	r3, r0
 8003d14:	9305      	str	r3, [sp, #20]
 8003d16:	9b06      	ldr	r3, [sp, #24]
 8003d18:	4403      	add	r3, r0
 8003d1a:	4405      	add	r5, r0
 8003d1c:	9306      	str	r3, [sp, #24]
 8003d1e:	9b05      	ldr	r3, [sp, #20]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	dd05      	ble.n	8003d30 <_dtoa_r+0x828>
 8003d24:	4651      	mov	r1, sl
 8003d26:	461a      	mov	r2, r3
 8003d28:	4620      	mov	r0, r4
 8003d2a:	f000 fcef 	bl	800470c <__lshift>
 8003d2e:	4682      	mov	sl, r0
 8003d30:	9b06      	ldr	r3, [sp, #24]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	dd05      	ble.n	8003d42 <_dtoa_r+0x83a>
 8003d36:	4631      	mov	r1, r6
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f000 fce6 	bl	800470c <__lshift>
 8003d40:	4606      	mov	r6, r0
 8003d42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d072      	beq.n	8003e2e <_dtoa_r+0x926>
 8003d48:	4631      	mov	r1, r6
 8003d4a:	4650      	mov	r0, sl
 8003d4c:	f000 fd4a 	bl	80047e4 <__mcmp>
 8003d50:	2800      	cmp	r0, #0
 8003d52:	da6c      	bge.n	8003e2e <_dtoa_r+0x926>
 8003d54:	2300      	movs	r3, #0
 8003d56:	4651      	mov	r1, sl
 8003d58:	220a      	movs	r2, #10
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	f000 fb28 	bl	80043b0 <__multadd>
 8003d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003d66:	4682      	mov	sl, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 81b0 	beq.w	80040ce <_dtoa_r+0xbc6>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	4639      	mov	r1, r7
 8003d72:	220a      	movs	r2, #10
 8003d74:	4620      	mov	r0, r4
 8003d76:	f000 fb1b 	bl	80043b0 <__multadd>
 8003d7a:	9b01      	ldr	r3, [sp, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	4607      	mov	r7, r0
 8003d80:	f300 8096 	bgt.w	8003eb0 <_dtoa_r+0x9a8>
 8003d84:	9b07      	ldr	r3, [sp, #28]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	dc59      	bgt.n	8003e3e <_dtoa_r+0x936>
 8003d8a:	e091      	b.n	8003eb0 <_dtoa_r+0x9a8>
 8003d8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003d8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003d92:	e758      	b.n	8003c46 <_dtoa_r+0x73e>
 8003d94:	9b04      	ldr	r3, [sp, #16]
 8003d96:	1e5e      	subs	r6, r3, #1
 8003d98:	9b08      	ldr	r3, [sp, #32]
 8003d9a:	42b3      	cmp	r3, r6
 8003d9c:	bfbf      	itttt	lt
 8003d9e:	9b08      	ldrlt	r3, [sp, #32]
 8003da0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8003da2:	9608      	strlt	r6, [sp, #32]
 8003da4:	1af3      	sublt	r3, r6, r3
 8003da6:	bfb4      	ite	lt
 8003da8:	18d2      	addlt	r2, r2, r3
 8003daa:	1b9e      	subge	r6, r3, r6
 8003dac:	9b04      	ldr	r3, [sp, #16]
 8003dae:	bfbc      	itt	lt
 8003db0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8003db2:	2600      	movlt	r6, #0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	bfb7      	itett	lt
 8003db8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8003dbc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8003dc0:	1a9d      	sublt	r5, r3, r2
 8003dc2:	2300      	movlt	r3, #0
 8003dc4:	e741      	b.n	8003c4a <_dtoa_r+0x742>
 8003dc6:	9e08      	ldr	r6, [sp, #32]
 8003dc8:	9d05      	ldr	r5, [sp, #20]
 8003dca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003dcc:	e748      	b.n	8003c60 <_dtoa_r+0x758>
 8003dce:	9a08      	ldr	r2, [sp, #32]
 8003dd0:	e770      	b.n	8003cb4 <_dtoa_r+0x7ac>
 8003dd2:	9b07      	ldr	r3, [sp, #28]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	dc19      	bgt.n	8003e0c <_dtoa_r+0x904>
 8003dd8:	9b02      	ldr	r3, [sp, #8]
 8003dda:	b9bb      	cbnz	r3, 8003e0c <_dtoa_r+0x904>
 8003ddc:	9b03      	ldr	r3, [sp, #12]
 8003dde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003de2:	b99b      	cbnz	r3, 8003e0c <_dtoa_r+0x904>
 8003de4:	9b03      	ldr	r3, [sp, #12]
 8003de6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003dea:	0d1b      	lsrs	r3, r3, #20
 8003dec:	051b      	lsls	r3, r3, #20
 8003dee:	b183      	cbz	r3, 8003e12 <_dtoa_r+0x90a>
 8003df0:	9b05      	ldr	r3, [sp, #20]
 8003df2:	3301      	adds	r3, #1
 8003df4:	9305      	str	r3, [sp, #20]
 8003df6:	9b06      	ldr	r3, [sp, #24]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	9306      	str	r3, [sp, #24]
 8003dfc:	f04f 0801 	mov.w	r8, #1
 8003e00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f47f af6f 	bne.w	8003ce6 <_dtoa_r+0x7de>
 8003e08:	2001      	movs	r0, #1
 8003e0a:	e774      	b.n	8003cf6 <_dtoa_r+0x7ee>
 8003e0c:	f04f 0800 	mov.w	r8, #0
 8003e10:	e7f6      	b.n	8003e00 <_dtoa_r+0x8f8>
 8003e12:	4698      	mov	r8, r3
 8003e14:	e7f4      	b.n	8003e00 <_dtoa_r+0x8f8>
 8003e16:	d082      	beq.n	8003d1e <_dtoa_r+0x816>
 8003e18:	9a05      	ldr	r2, [sp, #20]
 8003e1a:	331c      	adds	r3, #28
 8003e1c:	441a      	add	r2, r3
 8003e1e:	9205      	str	r2, [sp, #20]
 8003e20:	9a06      	ldr	r2, [sp, #24]
 8003e22:	441a      	add	r2, r3
 8003e24:	441d      	add	r5, r3
 8003e26:	9206      	str	r2, [sp, #24]
 8003e28:	e779      	b.n	8003d1e <_dtoa_r+0x816>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	e7f4      	b.n	8003e18 <_dtoa_r+0x910>
 8003e2e:	9b04      	ldr	r3, [sp, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	dc37      	bgt.n	8003ea4 <_dtoa_r+0x99c>
 8003e34:	9b07      	ldr	r3, [sp, #28]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	dd34      	ble.n	8003ea4 <_dtoa_r+0x99c>
 8003e3a:	9b04      	ldr	r3, [sp, #16]
 8003e3c:	9301      	str	r3, [sp, #4]
 8003e3e:	9b01      	ldr	r3, [sp, #4]
 8003e40:	b963      	cbnz	r3, 8003e5c <_dtoa_r+0x954>
 8003e42:	4631      	mov	r1, r6
 8003e44:	2205      	movs	r2, #5
 8003e46:	4620      	mov	r0, r4
 8003e48:	f000 fab2 	bl	80043b0 <__multadd>
 8003e4c:	4601      	mov	r1, r0
 8003e4e:	4606      	mov	r6, r0
 8003e50:	4650      	mov	r0, sl
 8003e52:	f000 fcc7 	bl	80047e4 <__mcmp>
 8003e56:	2800      	cmp	r0, #0
 8003e58:	f73f adbb 	bgt.w	80039d2 <_dtoa_r+0x4ca>
 8003e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e5e:	9d00      	ldr	r5, [sp, #0]
 8003e60:	ea6f 0b03 	mvn.w	fp, r3
 8003e64:	f04f 0800 	mov.w	r8, #0
 8003e68:	4631      	mov	r1, r6
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	f000 fa7e 	bl	800436c <_Bfree>
 8003e70:	2f00      	cmp	r7, #0
 8003e72:	f43f aeab 	beq.w	8003bcc <_dtoa_r+0x6c4>
 8003e76:	f1b8 0f00 	cmp.w	r8, #0
 8003e7a:	d005      	beq.n	8003e88 <_dtoa_r+0x980>
 8003e7c:	45b8      	cmp	r8, r7
 8003e7e:	d003      	beq.n	8003e88 <_dtoa_r+0x980>
 8003e80:	4641      	mov	r1, r8
 8003e82:	4620      	mov	r0, r4
 8003e84:	f000 fa72 	bl	800436c <_Bfree>
 8003e88:	4639      	mov	r1, r7
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f000 fa6e 	bl	800436c <_Bfree>
 8003e90:	e69c      	b.n	8003bcc <_dtoa_r+0x6c4>
 8003e92:	2600      	movs	r6, #0
 8003e94:	4637      	mov	r7, r6
 8003e96:	e7e1      	b.n	8003e5c <_dtoa_r+0x954>
 8003e98:	46bb      	mov	fp, r7
 8003e9a:	4637      	mov	r7, r6
 8003e9c:	e599      	b.n	80039d2 <_dtoa_r+0x4ca>
 8003e9e:	bf00      	nop
 8003ea0:	40240000 	.word	0x40240000
 8003ea4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 80c8 	beq.w	800403c <_dtoa_r+0xb34>
 8003eac:	9b04      	ldr	r3, [sp, #16]
 8003eae:	9301      	str	r3, [sp, #4]
 8003eb0:	2d00      	cmp	r5, #0
 8003eb2:	dd05      	ble.n	8003ec0 <_dtoa_r+0x9b8>
 8003eb4:	4639      	mov	r1, r7
 8003eb6:	462a      	mov	r2, r5
 8003eb8:	4620      	mov	r0, r4
 8003eba:	f000 fc27 	bl	800470c <__lshift>
 8003ebe:	4607      	mov	r7, r0
 8003ec0:	f1b8 0f00 	cmp.w	r8, #0
 8003ec4:	d05b      	beq.n	8003f7e <_dtoa_r+0xa76>
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	4620      	mov	r0, r4
 8003eca:	f000 fa0f 	bl	80042ec <_Balloc>
 8003ece:	4605      	mov	r5, r0
 8003ed0:	b928      	cbnz	r0, 8003ede <_dtoa_r+0x9d6>
 8003ed2:	4b83      	ldr	r3, [pc, #524]	; (80040e0 <_dtoa_r+0xbd8>)
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8003eda:	f7ff bb2e 	b.w	800353a <_dtoa_r+0x32>
 8003ede:	693a      	ldr	r2, [r7, #16]
 8003ee0:	3202      	adds	r2, #2
 8003ee2:	0092      	lsls	r2, r2, #2
 8003ee4:	f107 010c 	add.w	r1, r7, #12
 8003ee8:	300c      	adds	r0, #12
 8003eea:	f001 f813 	bl	8004f14 <memcpy>
 8003eee:	2201      	movs	r2, #1
 8003ef0:	4629      	mov	r1, r5
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	f000 fc0a 	bl	800470c <__lshift>
 8003ef8:	9b00      	ldr	r3, [sp, #0]
 8003efa:	3301      	adds	r3, #1
 8003efc:	9304      	str	r3, [sp, #16]
 8003efe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003f02:	4413      	add	r3, r2
 8003f04:	9308      	str	r3, [sp, #32]
 8003f06:	9b02      	ldr	r3, [sp, #8]
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	46b8      	mov	r8, r7
 8003f0e:	9306      	str	r3, [sp, #24]
 8003f10:	4607      	mov	r7, r0
 8003f12:	9b04      	ldr	r3, [sp, #16]
 8003f14:	4631      	mov	r1, r6
 8003f16:	3b01      	subs	r3, #1
 8003f18:	4650      	mov	r0, sl
 8003f1a:	9301      	str	r3, [sp, #4]
 8003f1c:	f7ff fa69 	bl	80033f2 <quorem>
 8003f20:	4641      	mov	r1, r8
 8003f22:	9002      	str	r0, [sp, #8]
 8003f24:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003f28:	4650      	mov	r0, sl
 8003f2a:	f000 fc5b 	bl	80047e4 <__mcmp>
 8003f2e:	463a      	mov	r2, r7
 8003f30:	9005      	str	r0, [sp, #20]
 8003f32:	4631      	mov	r1, r6
 8003f34:	4620      	mov	r0, r4
 8003f36:	f000 fc71 	bl	800481c <__mdiff>
 8003f3a:	68c2      	ldr	r2, [r0, #12]
 8003f3c:	4605      	mov	r5, r0
 8003f3e:	bb02      	cbnz	r2, 8003f82 <_dtoa_r+0xa7a>
 8003f40:	4601      	mov	r1, r0
 8003f42:	4650      	mov	r0, sl
 8003f44:	f000 fc4e 	bl	80047e4 <__mcmp>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	4629      	mov	r1, r5
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	9209      	str	r2, [sp, #36]	; 0x24
 8003f50:	f000 fa0c 	bl	800436c <_Bfree>
 8003f54:	9b07      	ldr	r3, [sp, #28]
 8003f56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f58:	9d04      	ldr	r5, [sp, #16]
 8003f5a:	ea43 0102 	orr.w	r1, r3, r2
 8003f5e:	9b06      	ldr	r3, [sp, #24]
 8003f60:	4319      	orrs	r1, r3
 8003f62:	d110      	bne.n	8003f86 <_dtoa_r+0xa7e>
 8003f64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003f68:	d029      	beq.n	8003fbe <_dtoa_r+0xab6>
 8003f6a:	9b05      	ldr	r3, [sp, #20]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	dd02      	ble.n	8003f76 <_dtoa_r+0xa6e>
 8003f70:	9b02      	ldr	r3, [sp, #8]
 8003f72:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8003f76:	9b01      	ldr	r3, [sp, #4]
 8003f78:	f883 9000 	strb.w	r9, [r3]
 8003f7c:	e774      	b.n	8003e68 <_dtoa_r+0x960>
 8003f7e:	4638      	mov	r0, r7
 8003f80:	e7ba      	b.n	8003ef8 <_dtoa_r+0x9f0>
 8003f82:	2201      	movs	r2, #1
 8003f84:	e7e1      	b.n	8003f4a <_dtoa_r+0xa42>
 8003f86:	9b05      	ldr	r3, [sp, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	db04      	blt.n	8003f96 <_dtoa_r+0xa8e>
 8003f8c:	9907      	ldr	r1, [sp, #28]
 8003f8e:	430b      	orrs	r3, r1
 8003f90:	9906      	ldr	r1, [sp, #24]
 8003f92:	430b      	orrs	r3, r1
 8003f94:	d120      	bne.n	8003fd8 <_dtoa_r+0xad0>
 8003f96:	2a00      	cmp	r2, #0
 8003f98:	dded      	ble.n	8003f76 <_dtoa_r+0xa6e>
 8003f9a:	4651      	mov	r1, sl
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	f000 fbb4 	bl	800470c <__lshift>
 8003fa4:	4631      	mov	r1, r6
 8003fa6:	4682      	mov	sl, r0
 8003fa8:	f000 fc1c 	bl	80047e4 <__mcmp>
 8003fac:	2800      	cmp	r0, #0
 8003fae:	dc03      	bgt.n	8003fb8 <_dtoa_r+0xab0>
 8003fb0:	d1e1      	bne.n	8003f76 <_dtoa_r+0xa6e>
 8003fb2:	f019 0f01 	tst.w	r9, #1
 8003fb6:	d0de      	beq.n	8003f76 <_dtoa_r+0xa6e>
 8003fb8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003fbc:	d1d8      	bne.n	8003f70 <_dtoa_r+0xa68>
 8003fbe:	9a01      	ldr	r2, [sp, #4]
 8003fc0:	2339      	movs	r3, #57	; 0x39
 8003fc2:	7013      	strb	r3, [r2, #0]
 8003fc4:	462b      	mov	r3, r5
 8003fc6:	461d      	mov	r5, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003fce:	2a39      	cmp	r2, #57	; 0x39
 8003fd0:	d06c      	beq.n	80040ac <_dtoa_r+0xba4>
 8003fd2:	3201      	adds	r2, #1
 8003fd4:	701a      	strb	r2, [r3, #0]
 8003fd6:	e747      	b.n	8003e68 <_dtoa_r+0x960>
 8003fd8:	2a00      	cmp	r2, #0
 8003fda:	dd07      	ble.n	8003fec <_dtoa_r+0xae4>
 8003fdc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003fe0:	d0ed      	beq.n	8003fbe <_dtoa_r+0xab6>
 8003fe2:	9a01      	ldr	r2, [sp, #4]
 8003fe4:	f109 0301 	add.w	r3, r9, #1
 8003fe8:	7013      	strb	r3, [r2, #0]
 8003fea:	e73d      	b.n	8003e68 <_dtoa_r+0x960>
 8003fec:	9b04      	ldr	r3, [sp, #16]
 8003fee:	9a08      	ldr	r2, [sp, #32]
 8003ff0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d043      	beq.n	8004080 <_dtoa_r+0xb78>
 8003ff8:	4651      	mov	r1, sl
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	220a      	movs	r2, #10
 8003ffe:	4620      	mov	r0, r4
 8004000:	f000 f9d6 	bl	80043b0 <__multadd>
 8004004:	45b8      	cmp	r8, r7
 8004006:	4682      	mov	sl, r0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	f04f 020a 	mov.w	r2, #10
 8004010:	4641      	mov	r1, r8
 8004012:	4620      	mov	r0, r4
 8004014:	d107      	bne.n	8004026 <_dtoa_r+0xb1e>
 8004016:	f000 f9cb 	bl	80043b0 <__multadd>
 800401a:	4680      	mov	r8, r0
 800401c:	4607      	mov	r7, r0
 800401e:	9b04      	ldr	r3, [sp, #16]
 8004020:	3301      	adds	r3, #1
 8004022:	9304      	str	r3, [sp, #16]
 8004024:	e775      	b.n	8003f12 <_dtoa_r+0xa0a>
 8004026:	f000 f9c3 	bl	80043b0 <__multadd>
 800402a:	4639      	mov	r1, r7
 800402c:	4680      	mov	r8, r0
 800402e:	2300      	movs	r3, #0
 8004030:	220a      	movs	r2, #10
 8004032:	4620      	mov	r0, r4
 8004034:	f000 f9bc 	bl	80043b0 <__multadd>
 8004038:	4607      	mov	r7, r0
 800403a:	e7f0      	b.n	800401e <_dtoa_r+0xb16>
 800403c:	9b04      	ldr	r3, [sp, #16]
 800403e:	9301      	str	r3, [sp, #4]
 8004040:	9d00      	ldr	r5, [sp, #0]
 8004042:	4631      	mov	r1, r6
 8004044:	4650      	mov	r0, sl
 8004046:	f7ff f9d4 	bl	80033f2 <quorem>
 800404a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800404e:	9b00      	ldr	r3, [sp, #0]
 8004050:	f805 9b01 	strb.w	r9, [r5], #1
 8004054:	1aea      	subs	r2, r5, r3
 8004056:	9b01      	ldr	r3, [sp, #4]
 8004058:	4293      	cmp	r3, r2
 800405a:	dd07      	ble.n	800406c <_dtoa_r+0xb64>
 800405c:	4651      	mov	r1, sl
 800405e:	2300      	movs	r3, #0
 8004060:	220a      	movs	r2, #10
 8004062:	4620      	mov	r0, r4
 8004064:	f000 f9a4 	bl	80043b0 <__multadd>
 8004068:	4682      	mov	sl, r0
 800406a:	e7ea      	b.n	8004042 <_dtoa_r+0xb3a>
 800406c:	9b01      	ldr	r3, [sp, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	bfc8      	it	gt
 8004072:	461d      	movgt	r5, r3
 8004074:	9b00      	ldr	r3, [sp, #0]
 8004076:	bfd8      	it	le
 8004078:	2501      	movle	r5, #1
 800407a:	441d      	add	r5, r3
 800407c:	f04f 0800 	mov.w	r8, #0
 8004080:	4651      	mov	r1, sl
 8004082:	2201      	movs	r2, #1
 8004084:	4620      	mov	r0, r4
 8004086:	f000 fb41 	bl	800470c <__lshift>
 800408a:	4631      	mov	r1, r6
 800408c:	4682      	mov	sl, r0
 800408e:	f000 fba9 	bl	80047e4 <__mcmp>
 8004092:	2800      	cmp	r0, #0
 8004094:	dc96      	bgt.n	8003fc4 <_dtoa_r+0xabc>
 8004096:	d102      	bne.n	800409e <_dtoa_r+0xb96>
 8004098:	f019 0f01 	tst.w	r9, #1
 800409c:	d192      	bne.n	8003fc4 <_dtoa_r+0xabc>
 800409e:	462b      	mov	r3, r5
 80040a0:	461d      	mov	r5, r3
 80040a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80040a6:	2a30      	cmp	r2, #48	; 0x30
 80040a8:	d0fa      	beq.n	80040a0 <_dtoa_r+0xb98>
 80040aa:	e6dd      	b.n	8003e68 <_dtoa_r+0x960>
 80040ac:	9a00      	ldr	r2, [sp, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d189      	bne.n	8003fc6 <_dtoa_r+0xabe>
 80040b2:	f10b 0b01 	add.w	fp, fp, #1
 80040b6:	2331      	movs	r3, #49	; 0x31
 80040b8:	e796      	b.n	8003fe8 <_dtoa_r+0xae0>
 80040ba:	4b0a      	ldr	r3, [pc, #40]	; (80040e4 <_dtoa_r+0xbdc>)
 80040bc:	f7ff ba99 	b.w	80035f2 <_dtoa_r+0xea>
 80040c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f47f aa6d 	bne.w	80035a2 <_dtoa_r+0x9a>
 80040c8:	4b07      	ldr	r3, [pc, #28]	; (80040e8 <_dtoa_r+0xbe0>)
 80040ca:	f7ff ba92 	b.w	80035f2 <_dtoa_r+0xea>
 80040ce:	9b01      	ldr	r3, [sp, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	dcb5      	bgt.n	8004040 <_dtoa_r+0xb38>
 80040d4:	9b07      	ldr	r3, [sp, #28]
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	f73f aeb1 	bgt.w	8003e3e <_dtoa_r+0x936>
 80040dc:	e7b0      	b.n	8004040 <_dtoa_r+0xb38>
 80040de:	bf00      	nop
 80040e0:	080052db 	.word	0x080052db
 80040e4:	0800523b 	.word	0x0800523b
 80040e8:	0800525f 	.word	0x0800525f

080040ec <_free_r>:
 80040ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040ee:	2900      	cmp	r1, #0
 80040f0:	d044      	beq.n	800417c <_free_r+0x90>
 80040f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040f6:	9001      	str	r0, [sp, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f1a1 0404 	sub.w	r4, r1, #4
 80040fe:	bfb8      	it	lt
 8004100:	18e4      	addlt	r4, r4, r3
 8004102:	f000 f8e7 	bl	80042d4 <__malloc_lock>
 8004106:	4a1e      	ldr	r2, [pc, #120]	; (8004180 <_free_r+0x94>)
 8004108:	9801      	ldr	r0, [sp, #4]
 800410a:	6813      	ldr	r3, [r2, #0]
 800410c:	b933      	cbnz	r3, 800411c <_free_r+0x30>
 800410e:	6063      	str	r3, [r4, #4]
 8004110:	6014      	str	r4, [r2, #0]
 8004112:	b003      	add	sp, #12
 8004114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004118:	f000 b8e2 	b.w	80042e0 <__malloc_unlock>
 800411c:	42a3      	cmp	r3, r4
 800411e:	d908      	bls.n	8004132 <_free_r+0x46>
 8004120:	6825      	ldr	r5, [r4, #0]
 8004122:	1961      	adds	r1, r4, r5
 8004124:	428b      	cmp	r3, r1
 8004126:	bf01      	itttt	eq
 8004128:	6819      	ldreq	r1, [r3, #0]
 800412a:	685b      	ldreq	r3, [r3, #4]
 800412c:	1949      	addeq	r1, r1, r5
 800412e:	6021      	streq	r1, [r4, #0]
 8004130:	e7ed      	b.n	800410e <_free_r+0x22>
 8004132:	461a      	mov	r2, r3
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	b10b      	cbz	r3, 800413c <_free_r+0x50>
 8004138:	42a3      	cmp	r3, r4
 800413a:	d9fa      	bls.n	8004132 <_free_r+0x46>
 800413c:	6811      	ldr	r1, [r2, #0]
 800413e:	1855      	adds	r5, r2, r1
 8004140:	42a5      	cmp	r5, r4
 8004142:	d10b      	bne.n	800415c <_free_r+0x70>
 8004144:	6824      	ldr	r4, [r4, #0]
 8004146:	4421      	add	r1, r4
 8004148:	1854      	adds	r4, r2, r1
 800414a:	42a3      	cmp	r3, r4
 800414c:	6011      	str	r1, [r2, #0]
 800414e:	d1e0      	bne.n	8004112 <_free_r+0x26>
 8004150:	681c      	ldr	r4, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	6053      	str	r3, [r2, #4]
 8004156:	440c      	add	r4, r1
 8004158:	6014      	str	r4, [r2, #0]
 800415a:	e7da      	b.n	8004112 <_free_r+0x26>
 800415c:	d902      	bls.n	8004164 <_free_r+0x78>
 800415e:	230c      	movs	r3, #12
 8004160:	6003      	str	r3, [r0, #0]
 8004162:	e7d6      	b.n	8004112 <_free_r+0x26>
 8004164:	6825      	ldr	r5, [r4, #0]
 8004166:	1961      	adds	r1, r4, r5
 8004168:	428b      	cmp	r3, r1
 800416a:	bf04      	itt	eq
 800416c:	6819      	ldreq	r1, [r3, #0]
 800416e:	685b      	ldreq	r3, [r3, #4]
 8004170:	6063      	str	r3, [r4, #4]
 8004172:	bf04      	itt	eq
 8004174:	1949      	addeq	r1, r1, r5
 8004176:	6021      	streq	r1, [r4, #0]
 8004178:	6054      	str	r4, [r2, #4]
 800417a:	e7ca      	b.n	8004112 <_free_r+0x26>
 800417c:	b003      	add	sp, #12
 800417e:	bd30      	pop	{r4, r5, pc}
 8004180:	20000338 	.word	0x20000338

08004184 <malloc>:
 8004184:	4b02      	ldr	r3, [pc, #8]	; (8004190 <malloc+0xc>)
 8004186:	4601      	mov	r1, r0
 8004188:	6818      	ldr	r0, [r3, #0]
 800418a:	f000 b823 	b.w	80041d4 <_malloc_r>
 800418e:	bf00      	nop
 8004190:	20000060 	.word	0x20000060

08004194 <sbrk_aligned>:
 8004194:	b570      	push	{r4, r5, r6, lr}
 8004196:	4e0e      	ldr	r6, [pc, #56]	; (80041d0 <sbrk_aligned+0x3c>)
 8004198:	460c      	mov	r4, r1
 800419a:	6831      	ldr	r1, [r6, #0]
 800419c:	4605      	mov	r5, r0
 800419e:	b911      	cbnz	r1, 80041a6 <sbrk_aligned+0x12>
 80041a0:	f000 fea8 	bl	8004ef4 <_sbrk_r>
 80041a4:	6030      	str	r0, [r6, #0]
 80041a6:	4621      	mov	r1, r4
 80041a8:	4628      	mov	r0, r5
 80041aa:	f000 fea3 	bl	8004ef4 <_sbrk_r>
 80041ae:	1c43      	adds	r3, r0, #1
 80041b0:	d00a      	beq.n	80041c8 <sbrk_aligned+0x34>
 80041b2:	1cc4      	adds	r4, r0, #3
 80041b4:	f024 0403 	bic.w	r4, r4, #3
 80041b8:	42a0      	cmp	r0, r4
 80041ba:	d007      	beq.n	80041cc <sbrk_aligned+0x38>
 80041bc:	1a21      	subs	r1, r4, r0
 80041be:	4628      	mov	r0, r5
 80041c0:	f000 fe98 	bl	8004ef4 <_sbrk_r>
 80041c4:	3001      	adds	r0, #1
 80041c6:	d101      	bne.n	80041cc <sbrk_aligned+0x38>
 80041c8:	f04f 34ff 	mov.w	r4, #4294967295
 80041cc:	4620      	mov	r0, r4
 80041ce:	bd70      	pop	{r4, r5, r6, pc}
 80041d0:	2000033c 	.word	0x2000033c

080041d4 <_malloc_r>:
 80041d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041d8:	1ccd      	adds	r5, r1, #3
 80041da:	f025 0503 	bic.w	r5, r5, #3
 80041de:	3508      	adds	r5, #8
 80041e0:	2d0c      	cmp	r5, #12
 80041e2:	bf38      	it	cc
 80041e4:	250c      	movcc	r5, #12
 80041e6:	2d00      	cmp	r5, #0
 80041e8:	4607      	mov	r7, r0
 80041ea:	db01      	blt.n	80041f0 <_malloc_r+0x1c>
 80041ec:	42a9      	cmp	r1, r5
 80041ee:	d905      	bls.n	80041fc <_malloc_r+0x28>
 80041f0:	230c      	movs	r3, #12
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	2600      	movs	r6, #0
 80041f6:	4630      	mov	r0, r6
 80041f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80042d0 <_malloc_r+0xfc>
 8004200:	f000 f868 	bl	80042d4 <__malloc_lock>
 8004204:	f8d8 3000 	ldr.w	r3, [r8]
 8004208:	461c      	mov	r4, r3
 800420a:	bb5c      	cbnz	r4, 8004264 <_malloc_r+0x90>
 800420c:	4629      	mov	r1, r5
 800420e:	4638      	mov	r0, r7
 8004210:	f7ff ffc0 	bl	8004194 <sbrk_aligned>
 8004214:	1c43      	adds	r3, r0, #1
 8004216:	4604      	mov	r4, r0
 8004218:	d155      	bne.n	80042c6 <_malloc_r+0xf2>
 800421a:	f8d8 4000 	ldr.w	r4, [r8]
 800421e:	4626      	mov	r6, r4
 8004220:	2e00      	cmp	r6, #0
 8004222:	d145      	bne.n	80042b0 <_malloc_r+0xdc>
 8004224:	2c00      	cmp	r4, #0
 8004226:	d048      	beq.n	80042ba <_malloc_r+0xe6>
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	4631      	mov	r1, r6
 800422c:	4638      	mov	r0, r7
 800422e:	eb04 0903 	add.w	r9, r4, r3
 8004232:	f000 fe5f 	bl	8004ef4 <_sbrk_r>
 8004236:	4581      	cmp	r9, r0
 8004238:	d13f      	bne.n	80042ba <_malloc_r+0xe6>
 800423a:	6821      	ldr	r1, [r4, #0]
 800423c:	1a6d      	subs	r5, r5, r1
 800423e:	4629      	mov	r1, r5
 8004240:	4638      	mov	r0, r7
 8004242:	f7ff ffa7 	bl	8004194 <sbrk_aligned>
 8004246:	3001      	adds	r0, #1
 8004248:	d037      	beq.n	80042ba <_malloc_r+0xe6>
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	442b      	add	r3, r5
 800424e:	6023      	str	r3, [r4, #0]
 8004250:	f8d8 3000 	ldr.w	r3, [r8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d038      	beq.n	80042ca <_malloc_r+0xf6>
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	42a2      	cmp	r2, r4
 800425c:	d12b      	bne.n	80042b6 <_malloc_r+0xe2>
 800425e:	2200      	movs	r2, #0
 8004260:	605a      	str	r2, [r3, #4]
 8004262:	e00f      	b.n	8004284 <_malloc_r+0xb0>
 8004264:	6822      	ldr	r2, [r4, #0]
 8004266:	1b52      	subs	r2, r2, r5
 8004268:	d41f      	bmi.n	80042aa <_malloc_r+0xd6>
 800426a:	2a0b      	cmp	r2, #11
 800426c:	d917      	bls.n	800429e <_malloc_r+0xca>
 800426e:	1961      	adds	r1, r4, r5
 8004270:	42a3      	cmp	r3, r4
 8004272:	6025      	str	r5, [r4, #0]
 8004274:	bf18      	it	ne
 8004276:	6059      	strne	r1, [r3, #4]
 8004278:	6863      	ldr	r3, [r4, #4]
 800427a:	bf08      	it	eq
 800427c:	f8c8 1000 	streq.w	r1, [r8]
 8004280:	5162      	str	r2, [r4, r5]
 8004282:	604b      	str	r3, [r1, #4]
 8004284:	4638      	mov	r0, r7
 8004286:	f104 060b 	add.w	r6, r4, #11
 800428a:	f000 f829 	bl	80042e0 <__malloc_unlock>
 800428e:	f026 0607 	bic.w	r6, r6, #7
 8004292:	1d23      	adds	r3, r4, #4
 8004294:	1af2      	subs	r2, r6, r3
 8004296:	d0ae      	beq.n	80041f6 <_malloc_r+0x22>
 8004298:	1b9b      	subs	r3, r3, r6
 800429a:	50a3      	str	r3, [r4, r2]
 800429c:	e7ab      	b.n	80041f6 <_malloc_r+0x22>
 800429e:	42a3      	cmp	r3, r4
 80042a0:	6862      	ldr	r2, [r4, #4]
 80042a2:	d1dd      	bne.n	8004260 <_malloc_r+0x8c>
 80042a4:	f8c8 2000 	str.w	r2, [r8]
 80042a8:	e7ec      	b.n	8004284 <_malloc_r+0xb0>
 80042aa:	4623      	mov	r3, r4
 80042ac:	6864      	ldr	r4, [r4, #4]
 80042ae:	e7ac      	b.n	800420a <_malloc_r+0x36>
 80042b0:	4634      	mov	r4, r6
 80042b2:	6876      	ldr	r6, [r6, #4]
 80042b4:	e7b4      	b.n	8004220 <_malloc_r+0x4c>
 80042b6:	4613      	mov	r3, r2
 80042b8:	e7cc      	b.n	8004254 <_malloc_r+0x80>
 80042ba:	230c      	movs	r3, #12
 80042bc:	603b      	str	r3, [r7, #0]
 80042be:	4638      	mov	r0, r7
 80042c0:	f000 f80e 	bl	80042e0 <__malloc_unlock>
 80042c4:	e797      	b.n	80041f6 <_malloc_r+0x22>
 80042c6:	6025      	str	r5, [r4, #0]
 80042c8:	e7dc      	b.n	8004284 <_malloc_r+0xb0>
 80042ca:	605b      	str	r3, [r3, #4]
 80042cc:	deff      	udf	#255	; 0xff
 80042ce:	bf00      	nop
 80042d0:	20000338 	.word	0x20000338

080042d4 <__malloc_lock>:
 80042d4:	4801      	ldr	r0, [pc, #4]	; (80042dc <__malloc_lock+0x8>)
 80042d6:	f7ff b88a 	b.w	80033ee <__retarget_lock_acquire_recursive>
 80042da:	bf00      	nop
 80042dc:	20000334 	.word	0x20000334

080042e0 <__malloc_unlock>:
 80042e0:	4801      	ldr	r0, [pc, #4]	; (80042e8 <__malloc_unlock+0x8>)
 80042e2:	f7ff b885 	b.w	80033f0 <__retarget_lock_release_recursive>
 80042e6:	bf00      	nop
 80042e8:	20000334 	.word	0x20000334

080042ec <_Balloc>:
 80042ec:	b570      	push	{r4, r5, r6, lr}
 80042ee:	69c6      	ldr	r6, [r0, #28]
 80042f0:	4604      	mov	r4, r0
 80042f2:	460d      	mov	r5, r1
 80042f4:	b976      	cbnz	r6, 8004314 <_Balloc+0x28>
 80042f6:	2010      	movs	r0, #16
 80042f8:	f7ff ff44 	bl	8004184 <malloc>
 80042fc:	4602      	mov	r2, r0
 80042fe:	61e0      	str	r0, [r4, #28]
 8004300:	b920      	cbnz	r0, 800430c <_Balloc+0x20>
 8004302:	4b18      	ldr	r3, [pc, #96]	; (8004364 <_Balloc+0x78>)
 8004304:	4818      	ldr	r0, [pc, #96]	; (8004368 <_Balloc+0x7c>)
 8004306:	216b      	movs	r1, #107	; 0x6b
 8004308:	f000 fe12 	bl	8004f30 <__assert_func>
 800430c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004310:	6006      	str	r6, [r0, #0]
 8004312:	60c6      	str	r6, [r0, #12]
 8004314:	69e6      	ldr	r6, [r4, #28]
 8004316:	68f3      	ldr	r3, [r6, #12]
 8004318:	b183      	cbz	r3, 800433c <_Balloc+0x50>
 800431a:	69e3      	ldr	r3, [r4, #28]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004322:	b9b8      	cbnz	r0, 8004354 <_Balloc+0x68>
 8004324:	2101      	movs	r1, #1
 8004326:	fa01 f605 	lsl.w	r6, r1, r5
 800432a:	1d72      	adds	r2, r6, #5
 800432c:	0092      	lsls	r2, r2, #2
 800432e:	4620      	mov	r0, r4
 8004330:	f000 fe1c 	bl	8004f6c <_calloc_r>
 8004334:	b160      	cbz	r0, 8004350 <_Balloc+0x64>
 8004336:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800433a:	e00e      	b.n	800435a <_Balloc+0x6e>
 800433c:	2221      	movs	r2, #33	; 0x21
 800433e:	2104      	movs	r1, #4
 8004340:	4620      	mov	r0, r4
 8004342:	f000 fe13 	bl	8004f6c <_calloc_r>
 8004346:	69e3      	ldr	r3, [r4, #28]
 8004348:	60f0      	str	r0, [r6, #12]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1e4      	bne.n	800431a <_Balloc+0x2e>
 8004350:	2000      	movs	r0, #0
 8004352:	bd70      	pop	{r4, r5, r6, pc}
 8004354:	6802      	ldr	r2, [r0, #0]
 8004356:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800435a:	2300      	movs	r3, #0
 800435c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004360:	e7f7      	b.n	8004352 <_Balloc+0x66>
 8004362:	bf00      	nop
 8004364:	0800526c 	.word	0x0800526c
 8004368:	080052ec 	.word	0x080052ec

0800436c <_Bfree>:
 800436c:	b570      	push	{r4, r5, r6, lr}
 800436e:	69c6      	ldr	r6, [r0, #28]
 8004370:	4605      	mov	r5, r0
 8004372:	460c      	mov	r4, r1
 8004374:	b976      	cbnz	r6, 8004394 <_Bfree+0x28>
 8004376:	2010      	movs	r0, #16
 8004378:	f7ff ff04 	bl	8004184 <malloc>
 800437c:	4602      	mov	r2, r0
 800437e:	61e8      	str	r0, [r5, #28]
 8004380:	b920      	cbnz	r0, 800438c <_Bfree+0x20>
 8004382:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <_Bfree+0x3c>)
 8004384:	4809      	ldr	r0, [pc, #36]	; (80043ac <_Bfree+0x40>)
 8004386:	218f      	movs	r1, #143	; 0x8f
 8004388:	f000 fdd2 	bl	8004f30 <__assert_func>
 800438c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004390:	6006      	str	r6, [r0, #0]
 8004392:	60c6      	str	r6, [r0, #12]
 8004394:	b13c      	cbz	r4, 80043a6 <_Bfree+0x3a>
 8004396:	69eb      	ldr	r3, [r5, #28]
 8004398:	6862      	ldr	r2, [r4, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043a0:	6021      	str	r1, [r4, #0]
 80043a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80043a6:	bd70      	pop	{r4, r5, r6, pc}
 80043a8:	0800526c 	.word	0x0800526c
 80043ac:	080052ec 	.word	0x080052ec

080043b0 <__multadd>:
 80043b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043b4:	690d      	ldr	r5, [r1, #16]
 80043b6:	4607      	mov	r7, r0
 80043b8:	460c      	mov	r4, r1
 80043ba:	461e      	mov	r6, r3
 80043bc:	f101 0c14 	add.w	ip, r1, #20
 80043c0:	2000      	movs	r0, #0
 80043c2:	f8dc 3000 	ldr.w	r3, [ip]
 80043c6:	b299      	uxth	r1, r3
 80043c8:	fb02 6101 	mla	r1, r2, r1, r6
 80043cc:	0c1e      	lsrs	r6, r3, #16
 80043ce:	0c0b      	lsrs	r3, r1, #16
 80043d0:	fb02 3306 	mla	r3, r2, r6, r3
 80043d4:	b289      	uxth	r1, r1
 80043d6:	3001      	adds	r0, #1
 80043d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80043dc:	4285      	cmp	r5, r0
 80043de:	f84c 1b04 	str.w	r1, [ip], #4
 80043e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80043e6:	dcec      	bgt.n	80043c2 <__multadd+0x12>
 80043e8:	b30e      	cbz	r6, 800442e <__multadd+0x7e>
 80043ea:	68a3      	ldr	r3, [r4, #8]
 80043ec:	42ab      	cmp	r3, r5
 80043ee:	dc19      	bgt.n	8004424 <__multadd+0x74>
 80043f0:	6861      	ldr	r1, [r4, #4]
 80043f2:	4638      	mov	r0, r7
 80043f4:	3101      	adds	r1, #1
 80043f6:	f7ff ff79 	bl	80042ec <_Balloc>
 80043fa:	4680      	mov	r8, r0
 80043fc:	b928      	cbnz	r0, 800440a <__multadd+0x5a>
 80043fe:	4602      	mov	r2, r0
 8004400:	4b0c      	ldr	r3, [pc, #48]	; (8004434 <__multadd+0x84>)
 8004402:	480d      	ldr	r0, [pc, #52]	; (8004438 <__multadd+0x88>)
 8004404:	21ba      	movs	r1, #186	; 0xba
 8004406:	f000 fd93 	bl	8004f30 <__assert_func>
 800440a:	6922      	ldr	r2, [r4, #16]
 800440c:	3202      	adds	r2, #2
 800440e:	f104 010c 	add.w	r1, r4, #12
 8004412:	0092      	lsls	r2, r2, #2
 8004414:	300c      	adds	r0, #12
 8004416:	f000 fd7d 	bl	8004f14 <memcpy>
 800441a:	4621      	mov	r1, r4
 800441c:	4638      	mov	r0, r7
 800441e:	f7ff ffa5 	bl	800436c <_Bfree>
 8004422:	4644      	mov	r4, r8
 8004424:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004428:	3501      	adds	r5, #1
 800442a:	615e      	str	r6, [r3, #20]
 800442c:	6125      	str	r5, [r4, #16]
 800442e:	4620      	mov	r0, r4
 8004430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004434:	080052db 	.word	0x080052db
 8004438:	080052ec 	.word	0x080052ec

0800443c <__hi0bits>:
 800443c:	0c03      	lsrs	r3, r0, #16
 800443e:	041b      	lsls	r3, r3, #16
 8004440:	b9d3      	cbnz	r3, 8004478 <__hi0bits+0x3c>
 8004442:	0400      	lsls	r0, r0, #16
 8004444:	2310      	movs	r3, #16
 8004446:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800444a:	bf04      	itt	eq
 800444c:	0200      	lsleq	r0, r0, #8
 800444e:	3308      	addeq	r3, #8
 8004450:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004454:	bf04      	itt	eq
 8004456:	0100      	lsleq	r0, r0, #4
 8004458:	3304      	addeq	r3, #4
 800445a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800445e:	bf04      	itt	eq
 8004460:	0080      	lsleq	r0, r0, #2
 8004462:	3302      	addeq	r3, #2
 8004464:	2800      	cmp	r0, #0
 8004466:	db05      	blt.n	8004474 <__hi0bits+0x38>
 8004468:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800446c:	f103 0301 	add.w	r3, r3, #1
 8004470:	bf08      	it	eq
 8004472:	2320      	moveq	r3, #32
 8004474:	4618      	mov	r0, r3
 8004476:	4770      	bx	lr
 8004478:	2300      	movs	r3, #0
 800447a:	e7e4      	b.n	8004446 <__hi0bits+0xa>

0800447c <__lo0bits>:
 800447c:	6803      	ldr	r3, [r0, #0]
 800447e:	f013 0207 	ands.w	r2, r3, #7
 8004482:	d00c      	beq.n	800449e <__lo0bits+0x22>
 8004484:	07d9      	lsls	r1, r3, #31
 8004486:	d422      	bmi.n	80044ce <__lo0bits+0x52>
 8004488:	079a      	lsls	r2, r3, #30
 800448a:	bf49      	itett	mi
 800448c:	085b      	lsrmi	r3, r3, #1
 800448e:	089b      	lsrpl	r3, r3, #2
 8004490:	6003      	strmi	r3, [r0, #0]
 8004492:	2201      	movmi	r2, #1
 8004494:	bf5c      	itt	pl
 8004496:	6003      	strpl	r3, [r0, #0]
 8004498:	2202      	movpl	r2, #2
 800449a:	4610      	mov	r0, r2
 800449c:	4770      	bx	lr
 800449e:	b299      	uxth	r1, r3
 80044a0:	b909      	cbnz	r1, 80044a6 <__lo0bits+0x2a>
 80044a2:	0c1b      	lsrs	r3, r3, #16
 80044a4:	2210      	movs	r2, #16
 80044a6:	b2d9      	uxtb	r1, r3
 80044a8:	b909      	cbnz	r1, 80044ae <__lo0bits+0x32>
 80044aa:	3208      	adds	r2, #8
 80044ac:	0a1b      	lsrs	r3, r3, #8
 80044ae:	0719      	lsls	r1, r3, #28
 80044b0:	bf04      	itt	eq
 80044b2:	091b      	lsreq	r3, r3, #4
 80044b4:	3204      	addeq	r2, #4
 80044b6:	0799      	lsls	r1, r3, #30
 80044b8:	bf04      	itt	eq
 80044ba:	089b      	lsreq	r3, r3, #2
 80044bc:	3202      	addeq	r2, #2
 80044be:	07d9      	lsls	r1, r3, #31
 80044c0:	d403      	bmi.n	80044ca <__lo0bits+0x4e>
 80044c2:	085b      	lsrs	r3, r3, #1
 80044c4:	f102 0201 	add.w	r2, r2, #1
 80044c8:	d003      	beq.n	80044d2 <__lo0bits+0x56>
 80044ca:	6003      	str	r3, [r0, #0]
 80044cc:	e7e5      	b.n	800449a <__lo0bits+0x1e>
 80044ce:	2200      	movs	r2, #0
 80044d0:	e7e3      	b.n	800449a <__lo0bits+0x1e>
 80044d2:	2220      	movs	r2, #32
 80044d4:	e7e1      	b.n	800449a <__lo0bits+0x1e>
	...

080044d8 <__i2b>:
 80044d8:	b510      	push	{r4, lr}
 80044da:	460c      	mov	r4, r1
 80044dc:	2101      	movs	r1, #1
 80044de:	f7ff ff05 	bl	80042ec <_Balloc>
 80044e2:	4602      	mov	r2, r0
 80044e4:	b928      	cbnz	r0, 80044f2 <__i2b+0x1a>
 80044e6:	4b05      	ldr	r3, [pc, #20]	; (80044fc <__i2b+0x24>)
 80044e8:	4805      	ldr	r0, [pc, #20]	; (8004500 <__i2b+0x28>)
 80044ea:	f240 1145 	movw	r1, #325	; 0x145
 80044ee:	f000 fd1f 	bl	8004f30 <__assert_func>
 80044f2:	2301      	movs	r3, #1
 80044f4:	6144      	str	r4, [r0, #20]
 80044f6:	6103      	str	r3, [r0, #16]
 80044f8:	bd10      	pop	{r4, pc}
 80044fa:	bf00      	nop
 80044fc:	080052db 	.word	0x080052db
 8004500:	080052ec 	.word	0x080052ec

08004504 <__multiply>:
 8004504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004508:	4691      	mov	r9, r2
 800450a:	690a      	ldr	r2, [r1, #16]
 800450c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004510:	429a      	cmp	r2, r3
 8004512:	bfb8      	it	lt
 8004514:	460b      	movlt	r3, r1
 8004516:	460c      	mov	r4, r1
 8004518:	bfbc      	itt	lt
 800451a:	464c      	movlt	r4, r9
 800451c:	4699      	movlt	r9, r3
 800451e:	6927      	ldr	r7, [r4, #16]
 8004520:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004524:	68a3      	ldr	r3, [r4, #8]
 8004526:	6861      	ldr	r1, [r4, #4]
 8004528:	eb07 060a 	add.w	r6, r7, sl
 800452c:	42b3      	cmp	r3, r6
 800452e:	b085      	sub	sp, #20
 8004530:	bfb8      	it	lt
 8004532:	3101      	addlt	r1, #1
 8004534:	f7ff feda 	bl	80042ec <_Balloc>
 8004538:	b930      	cbnz	r0, 8004548 <__multiply+0x44>
 800453a:	4602      	mov	r2, r0
 800453c:	4b44      	ldr	r3, [pc, #272]	; (8004650 <__multiply+0x14c>)
 800453e:	4845      	ldr	r0, [pc, #276]	; (8004654 <__multiply+0x150>)
 8004540:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004544:	f000 fcf4 	bl	8004f30 <__assert_func>
 8004548:	f100 0514 	add.w	r5, r0, #20
 800454c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004550:	462b      	mov	r3, r5
 8004552:	2200      	movs	r2, #0
 8004554:	4543      	cmp	r3, r8
 8004556:	d321      	bcc.n	800459c <__multiply+0x98>
 8004558:	f104 0314 	add.w	r3, r4, #20
 800455c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004560:	f109 0314 	add.w	r3, r9, #20
 8004564:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004568:	9202      	str	r2, [sp, #8]
 800456a:	1b3a      	subs	r2, r7, r4
 800456c:	3a15      	subs	r2, #21
 800456e:	f022 0203 	bic.w	r2, r2, #3
 8004572:	3204      	adds	r2, #4
 8004574:	f104 0115 	add.w	r1, r4, #21
 8004578:	428f      	cmp	r7, r1
 800457a:	bf38      	it	cc
 800457c:	2204      	movcc	r2, #4
 800457e:	9201      	str	r2, [sp, #4]
 8004580:	9a02      	ldr	r2, [sp, #8]
 8004582:	9303      	str	r3, [sp, #12]
 8004584:	429a      	cmp	r2, r3
 8004586:	d80c      	bhi.n	80045a2 <__multiply+0x9e>
 8004588:	2e00      	cmp	r6, #0
 800458a:	dd03      	ble.n	8004594 <__multiply+0x90>
 800458c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004590:	2b00      	cmp	r3, #0
 8004592:	d05b      	beq.n	800464c <__multiply+0x148>
 8004594:	6106      	str	r6, [r0, #16]
 8004596:	b005      	add	sp, #20
 8004598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800459c:	f843 2b04 	str.w	r2, [r3], #4
 80045a0:	e7d8      	b.n	8004554 <__multiply+0x50>
 80045a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80045a6:	f1ba 0f00 	cmp.w	sl, #0
 80045aa:	d024      	beq.n	80045f6 <__multiply+0xf2>
 80045ac:	f104 0e14 	add.w	lr, r4, #20
 80045b0:	46a9      	mov	r9, r5
 80045b2:	f04f 0c00 	mov.w	ip, #0
 80045b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80045ba:	f8d9 1000 	ldr.w	r1, [r9]
 80045be:	fa1f fb82 	uxth.w	fp, r2
 80045c2:	b289      	uxth	r1, r1
 80045c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80045c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80045cc:	f8d9 2000 	ldr.w	r2, [r9]
 80045d0:	4461      	add	r1, ip
 80045d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80045d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80045da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80045de:	b289      	uxth	r1, r1
 80045e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80045e4:	4577      	cmp	r7, lr
 80045e6:	f849 1b04 	str.w	r1, [r9], #4
 80045ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80045ee:	d8e2      	bhi.n	80045b6 <__multiply+0xb2>
 80045f0:	9a01      	ldr	r2, [sp, #4]
 80045f2:	f845 c002 	str.w	ip, [r5, r2]
 80045f6:	9a03      	ldr	r2, [sp, #12]
 80045f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80045fc:	3304      	adds	r3, #4
 80045fe:	f1b9 0f00 	cmp.w	r9, #0
 8004602:	d021      	beq.n	8004648 <__multiply+0x144>
 8004604:	6829      	ldr	r1, [r5, #0]
 8004606:	f104 0c14 	add.w	ip, r4, #20
 800460a:	46ae      	mov	lr, r5
 800460c:	f04f 0a00 	mov.w	sl, #0
 8004610:	f8bc b000 	ldrh.w	fp, [ip]
 8004614:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004618:	fb09 220b 	mla	r2, r9, fp, r2
 800461c:	4452      	add	r2, sl
 800461e:	b289      	uxth	r1, r1
 8004620:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004624:	f84e 1b04 	str.w	r1, [lr], #4
 8004628:	f85c 1b04 	ldr.w	r1, [ip], #4
 800462c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004630:	f8be 1000 	ldrh.w	r1, [lr]
 8004634:	fb09 110a 	mla	r1, r9, sl, r1
 8004638:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800463c:	4567      	cmp	r7, ip
 800463e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004642:	d8e5      	bhi.n	8004610 <__multiply+0x10c>
 8004644:	9a01      	ldr	r2, [sp, #4]
 8004646:	50a9      	str	r1, [r5, r2]
 8004648:	3504      	adds	r5, #4
 800464a:	e799      	b.n	8004580 <__multiply+0x7c>
 800464c:	3e01      	subs	r6, #1
 800464e:	e79b      	b.n	8004588 <__multiply+0x84>
 8004650:	080052db 	.word	0x080052db
 8004654:	080052ec 	.word	0x080052ec

08004658 <__pow5mult>:
 8004658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800465c:	4615      	mov	r5, r2
 800465e:	f012 0203 	ands.w	r2, r2, #3
 8004662:	4606      	mov	r6, r0
 8004664:	460f      	mov	r7, r1
 8004666:	d007      	beq.n	8004678 <__pow5mult+0x20>
 8004668:	4c25      	ldr	r4, [pc, #148]	; (8004700 <__pow5mult+0xa8>)
 800466a:	3a01      	subs	r2, #1
 800466c:	2300      	movs	r3, #0
 800466e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004672:	f7ff fe9d 	bl	80043b0 <__multadd>
 8004676:	4607      	mov	r7, r0
 8004678:	10ad      	asrs	r5, r5, #2
 800467a:	d03d      	beq.n	80046f8 <__pow5mult+0xa0>
 800467c:	69f4      	ldr	r4, [r6, #28]
 800467e:	b97c      	cbnz	r4, 80046a0 <__pow5mult+0x48>
 8004680:	2010      	movs	r0, #16
 8004682:	f7ff fd7f 	bl	8004184 <malloc>
 8004686:	4602      	mov	r2, r0
 8004688:	61f0      	str	r0, [r6, #28]
 800468a:	b928      	cbnz	r0, 8004698 <__pow5mult+0x40>
 800468c:	4b1d      	ldr	r3, [pc, #116]	; (8004704 <__pow5mult+0xac>)
 800468e:	481e      	ldr	r0, [pc, #120]	; (8004708 <__pow5mult+0xb0>)
 8004690:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004694:	f000 fc4c 	bl	8004f30 <__assert_func>
 8004698:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800469c:	6004      	str	r4, [r0, #0]
 800469e:	60c4      	str	r4, [r0, #12]
 80046a0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80046a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80046a8:	b94c      	cbnz	r4, 80046be <__pow5mult+0x66>
 80046aa:	f240 2171 	movw	r1, #625	; 0x271
 80046ae:	4630      	mov	r0, r6
 80046b0:	f7ff ff12 	bl	80044d8 <__i2b>
 80046b4:	2300      	movs	r3, #0
 80046b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80046ba:	4604      	mov	r4, r0
 80046bc:	6003      	str	r3, [r0, #0]
 80046be:	f04f 0900 	mov.w	r9, #0
 80046c2:	07eb      	lsls	r3, r5, #31
 80046c4:	d50a      	bpl.n	80046dc <__pow5mult+0x84>
 80046c6:	4639      	mov	r1, r7
 80046c8:	4622      	mov	r2, r4
 80046ca:	4630      	mov	r0, r6
 80046cc:	f7ff ff1a 	bl	8004504 <__multiply>
 80046d0:	4639      	mov	r1, r7
 80046d2:	4680      	mov	r8, r0
 80046d4:	4630      	mov	r0, r6
 80046d6:	f7ff fe49 	bl	800436c <_Bfree>
 80046da:	4647      	mov	r7, r8
 80046dc:	106d      	asrs	r5, r5, #1
 80046de:	d00b      	beq.n	80046f8 <__pow5mult+0xa0>
 80046e0:	6820      	ldr	r0, [r4, #0]
 80046e2:	b938      	cbnz	r0, 80046f4 <__pow5mult+0x9c>
 80046e4:	4622      	mov	r2, r4
 80046e6:	4621      	mov	r1, r4
 80046e8:	4630      	mov	r0, r6
 80046ea:	f7ff ff0b 	bl	8004504 <__multiply>
 80046ee:	6020      	str	r0, [r4, #0]
 80046f0:	f8c0 9000 	str.w	r9, [r0]
 80046f4:	4604      	mov	r4, r0
 80046f6:	e7e4      	b.n	80046c2 <__pow5mult+0x6a>
 80046f8:	4638      	mov	r0, r7
 80046fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046fe:	bf00      	nop
 8004700:	08005438 	.word	0x08005438
 8004704:	0800526c 	.word	0x0800526c
 8004708:	080052ec 	.word	0x080052ec

0800470c <__lshift>:
 800470c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004710:	460c      	mov	r4, r1
 8004712:	6849      	ldr	r1, [r1, #4]
 8004714:	6923      	ldr	r3, [r4, #16]
 8004716:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800471a:	68a3      	ldr	r3, [r4, #8]
 800471c:	4607      	mov	r7, r0
 800471e:	4691      	mov	r9, r2
 8004720:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004724:	f108 0601 	add.w	r6, r8, #1
 8004728:	42b3      	cmp	r3, r6
 800472a:	db0b      	blt.n	8004744 <__lshift+0x38>
 800472c:	4638      	mov	r0, r7
 800472e:	f7ff fddd 	bl	80042ec <_Balloc>
 8004732:	4605      	mov	r5, r0
 8004734:	b948      	cbnz	r0, 800474a <__lshift+0x3e>
 8004736:	4602      	mov	r2, r0
 8004738:	4b28      	ldr	r3, [pc, #160]	; (80047dc <__lshift+0xd0>)
 800473a:	4829      	ldr	r0, [pc, #164]	; (80047e0 <__lshift+0xd4>)
 800473c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004740:	f000 fbf6 	bl	8004f30 <__assert_func>
 8004744:	3101      	adds	r1, #1
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	e7ee      	b.n	8004728 <__lshift+0x1c>
 800474a:	2300      	movs	r3, #0
 800474c:	f100 0114 	add.w	r1, r0, #20
 8004750:	f100 0210 	add.w	r2, r0, #16
 8004754:	4618      	mov	r0, r3
 8004756:	4553      	cmp	r3, sl
 8004758:	db33      	blt.n	80047c2 <__lshift+0xb6>
 800475a:	6920      	ldr	r0, [r4, #16]
 800475c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004760:	f104 0314 	add.w	r3, r4, #20
 8004764:	f019 091f 	ands.w	r9, r9, #31
 8004768:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800476c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004770:	d02b      	beq.n	80047ca <__lshift+0xbe>
 8004772:	f1c9 0e20 	rsb	lr, r9, #32
 8004776:	468a      	mov	sl, r1
 8004778:	2200      	movs	r2, #0
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	fa00 f009 	lsl.w	r0, r0, r9
 8004780:	4310      	orrs	r0, r2
 8004782:	f84a 0b04 	str.w	r0, [sl], #4
 8004786:	f853 2b04 	ldr.w	r2, [r3], #4
 800478a:	459c      	cmp	ip, r3
 800478c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004790:	d8f3      	bhi.n	800477a <__lshift+0x6e>
 8004792:	ebac 0304 	sub.w	r3, ip, r4
 8004796:	3b15      	subs	r3, #21
 8004798:	f023 0303 	bic.w	r3, r3, #3
 800479c:	3304      	adds	r3, #4
 800479e:	f104 0015 	add.w	r0, r4, #21
 80047a2:	4584      	cmp	ip, r0
 80047a4:	bf38      	it	cc
 80047a6:	2304      	movcc	r3, #4
 80047a8:	50ca      	str	r2, [r1, r3]
 80047aa:	b10a      	cbz	r2, 80047b0 <__lshift+0xa4>
 80047ac:	f108 0602 	add.w	r6, r8, #2
 80047b0:	3e01      	subs	r6, #1
 80047b2:	4638      	mov	r0, r7
 80047b4:	612e      	str	r6, [r5, #16]
 80047b6:	4621      	mov	r1, r4
 80047b8:	f7ff fdd8 	bl	800436c <_Bfree>
 80047bc:	4628      	mov	r0, r5
 80047be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80047c6:	3301      	adds	r3, #1
 80047c8:	e7c5      	b.n	8004756 <__lshift+0x4a>
 80047ca:	3904      	subs	r1, #4
 80047cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80047d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80047d4:	459c      	cmp	ip, r3
 80047d6:	d8f9      	bhi.n	80047cc <__lshift+0xc0>
 80047d8:	e7ea      	b.n	80047b0 <__lshift+0xa4>
 80047da:	bf00      	nop
 80047dc:	080052db 	.word	0x080052db
 80047e0:	080052ec 	.word	0x080052ec

080047e4 <__mcmp>:
 80047e4:	b530      	push	{r4, r5, lr}
 80047e6:	6902      	ldr	r2, [r0, #16]
 80047e8:	690c      	ldr	r4, [r1, #16]
 80047ea:	1b12      	subs	r2, r2, r4
 80047ec:	d10e      	bne.n	800480c <__mcmp+0x28>
 80047ee:	f100 0314 	add.w	r3, r0, #20
 80047f2:	3114      	adds	r1, #20
 80047f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80047f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80047fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004800:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004804:	42a5      	cmp	r5, r4
 8004806:	d003      	beq.n	8004810 <__mcmp+0x2c>
 8004808:	d305      	bcc.n	8004816 <__mcmp+0x32>
 800480a:	2201      	movs	r2, #1
 800480c:	4610      	mov	r0, r2
 800480e:	bd30      	pop	{r4, r5, pc}
 8004810:	4283      	cmp	r3, r0
 8004812:	d3f3      	bcc.n	80047fc <__mcmp+0x18>
 8004814:	e7fa      	b.n	800480c <__mcmp+0x28>
 8004816:	f04f 32ff 	mov.w	r2, #4294967295
 800481a:	e7f7      	b.n	800480c <__mcmp+0x28>

0800481c <__mdiff>:
 800481c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004820:	460c      	mov	r4, r1
 8004822:	4606      	mov	r6, r0
 8004824:	4611      	mov	r1, r2
 8004826:	4620      	mov	r0, r4
 8004828:	4690      	mov	r8, r2
 800482a:	f7ff ffdb 	bl	80047e4 <__mcmp>
 800482e:	1e05      	subs	r5, r0, #0
 8004830:	d110      	bne.n	8004854 <__mdiff+0x38>
 8004832:	4629      	mov	r1, r5
 8004834:	4630      	mov	r0, r6
 8004836:	f7ff fd59 	bl	80042ec <_Balloc>
 800483a:	b930      	cbnz	r0, 800484a <__mdiff+0x2e>
 800483c:	4b3a      	ldr	r3, [pc, #232]	; (8004928 <__mdiff+0x10c>)
 800483e:	4602      	mov	r2, r0
 8004840:	f240 2137 	movw	r1, #567	; 0x237
 8004844:	4839      	ldr	r0, [pc, #228]	; (800492c <__mdiff+0x110>)
 8004846:	f000 fb73 	bl	8004f30 <__assert_func>
 800484a:	2301      	movs	r3, #1
 800484c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004850:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004854:	bfa4      	itt	ge
 8004856:	4643      	movge	r3, r8
 8004858:	46a0      	movge	r8, r4
 800485a:	4630      	mov	r0, r6
 800485c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004860:	bfa6      	itte	ge
 8004862:	461c      	movge	r4, r3
 8004864:	2500      	movge	r5, #0
 8004866:	2501      	movlt	r5, #1
 8004868:	f7ff fd40 	bl	80042ec <_Balloc>
 800486c:	b920      	cbnz	r0, 8004878 <__mdiff+0x5c>
 800486e:	4b2e      	ldr	r3, [pc, #184]	; (8004928 <__mdiff+0x10c>)
 8004870:	4602      	mov	r2, r0
 8004872:	f240 2145 	movw	r1, #581	; 0x245
 8004876:	e7e5      	b.n	8004844 <__mdiff+0x28>
 8004878:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800487c:	6926      	ldr	r6, [r4, #16]
 800487e:	60c5      	str	r5, [r0, #12]
 8004880:	f104 0914 	add.w	r9, r4, #20
 8004884:	f108 0514 	add.w	r5, r8, #20
 8004888:	f100 0e14 	add.w	lr, r0, #20
 800488c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004890:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004894:	f108 0210 	add.w	r2, r8, #16
 8004898:	46f2      	mov	sl, lr
 800489a:	2100      	movs	r1, #0
 800489c:	f859 3b04 	ldr.w	r3, [r9], #4
 80048a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80048a4:	fa11 f88b 	uxtah	r8, r1, fp
 80048a8:	b299      	uxth	r1, r3
 80048aa:	0c1b      	lsrs	r3, r3, #16
 80048ac:	eba8 0801 	sub.w	r8, r8, r1
 80048b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80048b4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80048b8:	fa1f f888 	uxth.w	r8, r8
 80048bc:	1419      	asrs	r1, r3, #16
 80048be:	454e      	cmp	r6, r9
 80048c0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80048c4:	f84a 3b04 	str.w	r3, [sl], #4
 80048c8:	d8e8      	bhi.n	800489c <__mdiff+0x80>
 80048ca:	1b33      	subs	r3, r6, r4
 80048cc:	3b15      	subs	r3, #21
 80048ce:	f023 0303 	bic.w	r3, r3, #3
 80048d2:	3304      	adds	r3, #4
 80048d4:	3415      	adds	r4, #21
 80048d6:	42a6      	cmp	r6, r4
 80048d8:	bf38      	it	cc
 80048da:	2304      	movcc	r3, #4
 80048dc:	441d      	add	r5, r3
 80048de:	4473      	add	r3, lr
 80048e0:	469e      	mov	lr, r3
 80048e2:	462e      	mov	r6, r5
 80048e4:	4566      	cmp	r6, ip
 80048e6:	d30e      	bcc.n	8004906 <__mdiff+0xea>
 80048e8:	f10c 0203 	add.w	r2, ip, #3
 80048ec:	1b52      	subs	r2, r2, r5
 80048ee:	f022 0203 	bic.w	r2, r2, #3
 80048f2:	3d03      	subs	r5, #3
 80048f4:	45ac      	cmp	ip, r5
 80048f6:	bf38      	it	cc
 80048f8:	2200      	movcc	r2, #0
 80048fa:	4413      	add	r3, r2
 80048fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004900:	b17a      	cbz	r2, 8004922 <__mdiff+0x106>
 8004902:	6107      	str	r7, [r0, #16]
 8004904:	e7a4      	b.n	8004850 <__mdiff+0x34>
 8004906:	f856 8b04 	ldr.w	r8, [r6], #4
 800490a:	fa11 f288 	uxtah	r2, r1, r8
 800490e:	1414      	asrs	r4, r2, #16
 8004910:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004914:	b292      	uxth	r2, r2
 8004916:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800491a:	f84e 2b04 	str.w	r2, [lr], #4
 800491e:	1421      	asrs	r1, r4, #16
 8004920:	e7e0      	b.n	80048e4 <__mdiff+0xc8>
 8004922:	3f01      	subs	r7, #1
 8004924:	e7ea      	b.n	80048fc <__mdiff+0xe0>
 8004926:	bf00      	nop
 8004928:	080052db 	.word	0x080052db
 800492c:	080052ec 	.word	0x080052ec

08004930 <__d2b>:
 8004930:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004934:	460f      	mov	r7, r1
 8004936:	2101      	movs	r1, #1
 8004938:	ec59 8b10 	vmov	r8, r9, d0
 800493c:	4616      	mov	r6, r2
 800493e:	f7ff fcd5 	bl	80042ec <_Balloc>
 8004942:	4604      	mov	r4, r0
 8004944:	b930      	cbnz	r0, 8004954 <__d2b+0x24>
 8004946:	4602      	mov	r2, r0
 8004948:	4b24      	ldr	r3, [pc, #144]	; (80049dc <__d2b+0xac>)
 800494a:	4825      	ldr	r0, [pc, #148]	; (80049e0 <__d2b+0xb0>)
 800494c:	f240 310f 	movw	r1, #783	; 0x30f
 8004950:	f000 faee 	bl	8004f30 <__assert_func>
 8004954:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004958:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800495c:	bb2d      	cbnz	r5, 80049aa <__d2b+0x7a>
 800495e:	9301      	str	r3, [sp, #4]
 8004960:	f1b8 0300 	subs.w	r3, r8, #0
 8004964:	d026      	beq.n	80049b4 <__d2b+0x84>
 8004966:	4668      	mov	r0, sp
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	f7ff fd87 	bl	800447c <__lo0bits>
 800496e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004972:	b1e8      	cbz	r0, 80049b0 <__d2b+0x80>
 8004974:	f1c0 0320 	rsb	r3, r0, #32
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	430b      	orrs	r3, r1
 800497e:	40c2      	lsrs	r2, r0
 8004980:	6163      	str	r3, [r4, #20]
 8004982:	9201      	str	r2, [sp, #4]
 8004984:	9b01      	ldr	r3, [sp, #4]
 8004986:	61a3      	str	r3, [r4, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	bf14      	ite	ne
 800498c:	2202      	movne	r2, #2
 800498e:	2201      	moveq	r2, #1
 8004990:	6122      	str	r2, [r4, #16]
 8004992:	b1bd      	cbz	r5, 80049c4 <__d2b+0x94>
 8004994:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004998:	4405      	add	r5, r0
 800499a:	603d      	str	r5, [r7, #0]
 800499c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80049a0:	6030      	str	r0, [r6, #0]
 80049a2:	4620      	mov	r0, r4
 80049a4:	b003      	add	sp, #12
 80049a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049ae:	e7d6      	b.n	800495e <__d2b+0x2e>
 80049b0:	6161      	str	r1, [r4, #20]
 80049b2:	e7e7      	b.n	8004984 <__d2b+0x54>
 80049b4:	a801      	add	r0, sp, #4
 80049b6:	f7ff fd61 	bl	800447c <__lo0bits>
 80049ba:	9b01      	ldr	r3, [sp, #4]
 80049bc:	6163      	str	r3, [r4, #20]
 80049be:	3020      	adds	r0, #32
 80049c0:	2201      	movs	r2, #1
 80049c2:	e7e5      	b.n	8004990 <__d2b+0x60>
 80049c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80049c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80049cc:	6038      	str	r0, [r7, #0]
 80049ce:	6918      	ldr	r0, [r3, #16]
 80049d0:	f7ff fd34 	bl	800443c <__hi0bits>
 80049d4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80049d8:	e7e2      	b.n	80049a0 <__d2b+0x70>
 80049da:	bf00      	nop
 80049dc:	080052db 	.word	0x080052db
 80049e0:	080052ec 	.word	0x080052ec

080049e4 <__sfputc_r>:
 80049e4:	6893      	ldr	r3, [r2, #8]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	b410      	push	{r4}
 80049ec:	6093      	str	r3, [r2, #8]
 80049ee:	da08      	bge.n	8004a02 <__sfputc_r+0x1e>
 80049f0:	6994      	ldr	r4, [r2, #24]
 80049f2:	42a3      	cmp	r3, r4
 80049f4:	db01      	blt.n	80049fa <__sfputc_r+0x16>
 80049f6:	290a      	cmp	r1, #10
 80049f8:	d103      	bne.n	8004a02 <__sfputc_r+0x1e>
 80049fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049fe:	f000 b9e3 	b.w	8004dc8 <__swbuf_r>
 8004a02:	6813      	ldr	r3, [r2, #0]
 8004a04:	1c58      	adds	r0, r3, #1
 8004a06:	6010      	str	r0, [r2, #0]
 8004a08:	7019      	strb	r1, [r3, #0]
 8004a0a:	4608      	mov	r0, r1
 8004a0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <__sfputs_r>:
 8004a12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a14:	4606      	mov	r6, r0
 8004a16:	460f      	mov	r7, r1
 8004a18:	4614      	mov	r4, r2
 8004a1a:	18d5      	adds	r5, r2, r3
 8004a1c:	42ac      	cmp	r4, r5
 8004a1e:	d101      	bne.n	8004a24 <__sfputs_r+0x12>
 8004a20:	2000      	movs	r0, #0
 8004a22:	e007      	b.n	8004a34 <__sfputs_r+0x22>
 8004a24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a28:	463a      	mov	r2, r7
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	f7ff ffda 	bl	80049e4 <__sfputc_r>
 8004a30:	1c43      	adds	r3, r0, #1
 8004a32:	d1f3      	bne.n	8004a1c <__sfputs_r+0xa>
 8004a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a38 <_vfiprintf_r>:
 8004a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3c:	460d      	mov	r5, r1
 8004a3e:	b09d      	sub	sp, #116	; 0x74
 8004a40:	4614      	mov	r4, r2
 8004a42:	4698      	mov	r8, r3
 8004a44:	4606      	mov	r6, r0
 8004a46:	b118      	cbz	r0, 8004a50 <_vfiprintf_r+0x18>
 8004a48:	6a03      	ldr	r3, [r0, #32]
 8004a4a:	b90b      	cbnz	r3, 8004a50 <_vfiprintf_r+0x18>
 8004a4c:	f7fe fbc6 	bl	80031dc <__sinit>
 8004a50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a52:	07d9      	lsls	r1, r3, #31
 8004a54:	d405      	bmi.n	8004a62 <_vfiprintf_r+0x2a>
 8004a56:	89ab      	ldrh	r3, [r5, #12]
 8004a58:	059a      	lsls	r2, r3, #22
 8004a5a:	d402      	bmi.n	8004a62 <_vfiprintf_r+0x2a>
 8004a5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a5e:	f7fe fcc6 	bl	80033ee <__retarget_lock_acquire_recursive>
 8004a62:	89ab      	ldrh	r3, [r5, #12]
 8004a64:	071b      	lsls	r3, r3, #28
 8004a66:	d501      	bpl.n	8004a6c <_vfiprintf_r+0x34>
 8004a68:	692b      	ldr	r3, [r5, #16]
 8004a6a:	b99b      	cbnz	r3, 8004a94 <_vfiprintf_r+0x5c>
 8004a6c:	4629      	mov	r1, r5
 8004a6e:	4630      	mov	r0, r6
 8004a70:	f000 f9e8 	bl	8004e44 <__swsetup_r>
 8004a74:	b170      	cbz	r0, 8004a94 <_vfiprintf_r+0x5c>
 8004a76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a78:	07dc      	lsls	r4, r3, #31
 8004a7a:	d504      	bpl.n	8004a86 <_vfiprintf_r+0x4e>
 8004a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004a80:	b01d      	add	sp, #116	; 0x74
 8004a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a86:	89ab      	ldrh	r3, [r5, #12]
 8004a88:	0598      	lsls	r0, r3, #22
 8004a8a:	d4f7      	bmi.n	8004a7c <_vfiprintf_r+0x44>
 8004a8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a8e:	f7fe fcaf 	bl	80033f0 <__retarget_lock_release_recursive>
 8004a92:	e7f3      	b.n	8004a7c <_vfiprintf_r+0x44>
 8004a94:	2300      	movs	r3, #0
 8004a96:	9309      	str	r3, [sp, #36]	; 0x24
 8004a98:	2320      	movs	r3, #32
 8004a9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004aa2:	2330      	movs	r3, #48	; 0x30
 8004aa4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004c58 <_vfiprintf_r+0x220>
 8004aa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004aac:	f04f 0901 	mov.w	r9, #1
 8004ab0:	4623      	mov	r3, r4
 8004ab2:	469a      	mov	sl, r3
 8004ab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ab8:	b10a      	cbz	r2, 8004abe <_vfiprintf_r+0x86>
 8004aba:	2a25      	cmp	r2, #37	; 0x25
 8004abc:	d1f9      	bne.n	8004ab2 <_vfiprintf_r+0x7a>
 8004abe:	ebba 0b04 	subs.w	fp, sl, r4
 8004ac2:	d00b      	beq.n	8004adc <_vfiprintf_r+0xa4>
 8004ac4:	465b      	mov	r3, fp
 8004ac6:	4622      	mov	r2, r4
 8004ac8:	4629      	mov	r1, r5
 8004aca:	4630      	mov	r0, r6
 8004acc:	f7ff ffa1 	bl	8004a12 <__sfputs_r>
 8004ad0:	3001      	adds	r0, #1
 8004ad2:	f000 80a9 	beq.w	8004c28 <_vfiprintf_r+0x1f0>
 8004ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ad8:	445a      	add	r2, fp
 8004ada:	9209      	str	r2, [sp, #36]	; 0x24
 8004adc:	f89a 3000 	ldrb.w	r3, [sl]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 80a1 	beq.w	8004c28 <_vfiprintf_r+0x1f0>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8004aec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004af0:	f10a 0a01 	add.w	sl, sl, #1
 8004af4:	9304      	str	r3, [sp, #16]
 8004af6:	9307      	str	r3, [sp, #28]
 8004af8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004afc:	931a      	str	r3, [sp, #104]	; 0x68
 8004afe:	4654      	mov	r4, sl
 8004b00:	2205      	movs	r2, #5
 8004b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b06:	4854      	ldr	r0, [pc, #336]	; (8004c58 <_vfiprintf_r+0x220>)
 8004b08:	f7fb fb6a 	bl	80001e0 <memchr>
 8004b0c:	9a04      	ldr	r2, [sp, #16]
 8004b0e:	b9d8      	cbnz	r0, 8004b48 <_vfiprintf_r+0x110>
 8004b10:	06d1      	lsls	r1, r2, #27
 8004b12:	bf44      	itt	mi
 8004b14:	2320      	movmi	r3, #32
 8004b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b1a:	0713      	lsls	r3, r2, #28
 8004b1c:	bf44      	itt	mi
 8004b1e:	232b      	movmi	r3, #43	; 0x2b
 8004b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b24:	f89a 3000 	ldrb.w	r3, [sl]
 8004b28:	2b2a      	cmp	r3, #42	; 0x2a
 8004b2a:	d015      	beq.n	8004b58 <_vfiprintf_r+0x120>
 8004b2c:	9a07      	ldr	r2, [sp, #28]
 8004b2e:	4654      	mov	r4, sl
 8004b30:	2000      	movs	r0, #0
 8004b32:	f04f 0c0a 	mov.w	ip, #10
 8004b36:	4621      	mov	r1, r4
 8004b38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b3c:	3b30      	subs	r3, #48	; 0x30
 8004b3e:	2b09      	cmp	r3, #9
 8004b40:	d94d      	bls.n	8004bde <_vfiprintf_r+0x1a6>
 8004b42:	b1b0      	cbz	r0, 8004b72 <_vfiprintf_r+0x13a>
 8004b44:	9207      	str	r2, [sp, #28]
 8004b46:	e014      	b.n	8004b72 <_vfiprintf_r+0x13a>
 8004b48:	eba0 0308 	sub.w	r3, r0, r8
 8004b4c:	fa09 f303 	lsl.w	r3, r9, r3
 8004b50:	4313      	orrs	r3, r2
 8004b52:	9304      	str	r3, [sp, #16]
 8004b54:	46a2      	mov	sl, r4
 8004b56:	e7d2      	b.n	8004afe <_vfiprintf_r+0xc6>
 8004b58:	9b03      	ldr	r3, [sp, #12]
 8004b5a:	1d19      	adds	r1, r3, #4
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	9103      	str	r1, [sp, #12]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	bfbb      	ittet	lt
 8004b64:	425b      	neglt	r3, r3
 8004b66:	f042 0202 	orrlt.w	r2, r2, #2
 8004b6a:	9307      	strge	r3, [sp, #28]
 8004b6c:	9307      	strlt	r3, [sp, #28]
 8004b6e:	bfb8      	it	lt
 8004b70:	9204      	strlt	r2, [sp, #16]
 8004b72:	7823      	ldrb	r3, [r4, #0]
 8004b74:	2b2e      	cmp	r3, #46	; 0x2e
 8004b76:	d10c      	bne.n	8004b92 <_vfiprintf_r+0x15a>
 8004b78:	7863      	ldrb	r3, [r4, #1]
 8004b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b7c:	d134      	bne.n	8004be8 <_vfiprintf_r+0x1b0>
 8004b7e:	9b03      	ldr	r3, [sp, #12]
 8004b80:	1d1a      	adds	r2, r3, #4
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	9203      	str	r2, [sp, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	bfb8      	it	lt
 8004b8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b8e:	3402      	adds	r4, #2
 8004b90:	9305      	str	r3, [sp, #20]
 8004b92:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004c68 <_vfiprintf_r+0x230>
 8004b96:	7821      	ldrb	r1, [r4, #0]
 8004b98:	2203      	movs	r2, #3
 8004b9a:	4650      	mov	r0, sl
 8004b9c:	f7fb fb20 	bl	80001e0 <memchr>
 8004ba0:	b138      	cbz	r0, 8004bb2 <_vfiprintf_r+0x17a>
 8004ba2:	9b04      	ldr	r3, [sp, #16]
 8004ba4:	eba0 000a 	sub.w	r0, r0, sl
 8004ba8:	2240      	movs	r2, #64	; 0x40
 8004baa:	4082      	lsls	r2, r0
 8004bac:	4313      	orrs	r3, r2
 8004bae:	3401      	adds	r4, #1
 8004bb0:	9304      	str	r3, [sp, #16]
 8004bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bb6:	4829      	ldr	r0, [pc, #164]	; (8004c5c <_vfiprintf_r+0x224>)
 8004bb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004bbc:	2206      	movs	r2, #6
 8004bbe:	f7fb fb0f 	bl	80001e0 <memchr>
 8004bc2:	2800      	cmp	r0, #0
 8004bc4:	d03f      	beq.n	8004c46 <_vfiprintf_r+0x20e>
 8004bc6:	4b26      	ldr	r3, [pc, #152]	; (8004c60 <_vfiprintf_r+0x228>)
 8004bc8:	bb1b      	cbnz	r3, 8004c12 <_vfiprintf_r+0x1da>
 8004bca:	9b03      	ldr	r3, [sp, #12]
 8004bcc:	3307      	adds	r3, #7
 8004bce:	f023 0307 	bic.w	r3, r3, #7
 8004bd2:	3308      	adds	r3, #8
 8004bd4:	9303      	str	r3, [sp, #12]
 8004bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bd8:	443b      	add	r3, r7
 8004bda:	9309      	str	r3, [sp, #36]	; 0x24
 8004bdc:	e768      	b.n	8004ab0 <_vfiprintf_r+0x78>
 8004bde:	fb0c 3202 	mla	r2, ip, r2, r3
 8004be2:	460c      	mov	r4, r1
 8004be4:	2001      	movs	r0, #1
 8004be6:	e7a6      	b.n	8004b36 <_vfiprintf_r+0xfe>
 8004be8:	2300      	movs	r3, #0
 8004bea:	3401      	adds	r4, #1
 8004bec:	9305      	str	r3, [sp, #20]
 8004bee:	4619      	mov	r1, r3
 8004bf0:	f04f 0c0a 	mov.w	ip, #10
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bfa:	3a30      	subs	r2, #48	; 0x30
 8004bfc:	2a09      	cmp	r2, #9
 8004bfe:	d903      	bls.n	8004c08 <_vfiprintf_r+0x1d0>
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0c6      	beq.n	8004b92 <_vfiprintf_r+0x15a>
 8004c04:	9105      	str	r1, [sp, #20]
 8004c06:	e7c4      	b.n	8004b92 <_vfiprintf_r+0x15a>
 8004c08:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c0c:	4604      	mov	r4, r0
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e7f0      	b.n	8004bf4 <_vfiprintf_r+0x1bc>
 8004c12:	ab03      	add	r3, sp, #12
 8004c14:	9300      	str	r3, [sp, #0]
 8004c16:	462a      	mov	r2, r5
 8004c18:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <_vfiprintf_r+0x22c>)
 8004c1a:	a904      	add	r1, sp, #16
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	f7fd fe8b 	bl	8002938 <_printf_float>
 8004c22:	4607      	mov	r7, r0
 8004c24:	1c78      	adds	r0, r7, #1
 8004c26:	d1d6      	bne.n	8004bd6 <_vfiprintf_r+0x19e>
 8004c28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c2a:	07d9      	lsls	r1, r3, #31
 8004c2c:	d405      	bmi.n	8004c3a <_vfiprintf_r+0x202>
 8004c2e:	89ab      	ldrh	r3, [r5, #12]
 8004c30:	059a      	lsls	r2, r3, #22
 8004c32:	d402      	bmi.n	8004c3a <_vfiprintf_r+0x202>
 8004c34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c36:	f7fe fbdb 	bl	80033f0 <__retarget_lock_release_recursive>
 8004c3a:	89ab      	ldrh	r3, [r5, #12]
 8004c3c:	065b      	lsls	r3, r3, #25
 8004c3e:	f53f af1d 	bmi.w	8004a7c <_vfiprintf_r+0x44>
 8004c42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c44:	e71c      	b.n	8004a80 <_vfiprintf_r+0x48>
 8004c46:	ab03      	add	r3, sp, #12
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	462a      	mov	r2, r5
 8004c4c:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <_vfiprintf_r+0x22c>)
 8004c4e:	a904      	add	r1, sp, #16
 8004c50:	4630      	mov	r0, r6
 8004c52:	f7fe f915 	bl	8002e80 <_printf_i>
 8004c56:	e7e4      	b.n	8004c22 <_vfiprintf_r+0x1ea>
 8004c58:	08005444 	.word	0x08005444
 8004c5c:	0800544e 	.word	0x0800544e
 8004c60:	08002939 	.word	0x08002939
 8004c64:	08004a13 	.word	0x08004a13
 8004c68:	0800544a 	.word	0x0800544a

08004c6c <__sflush_r>:
 8004c6c:	898a      	ldrh	r2, [r1, #12]
 8004c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c72:	4605      	mov	r5, r0
 8004c74:	0710      	lsls	r0, r2, #28
 8004c76:	460c      	mov	r4, r1
 8004c78:	d458      	bmi.n	8004d2c <__sflush_r+0xc0>
 8004c7a:	684b      	ldr	r3, [r1, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	dc05      	bgt.n	8004c8c <__sflush_r+0x20>
 8004c80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	dc02      	bgt.n	8004c8c <__sflush_r+0x20>
 8004c86:	2000      	movs	r0, #0
 8004c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c8e:	2e00      	cmp	r6, #0
 8004c90:	d0f9      	beq.n	8004c86 <__sflush_r+0x1a>
 8004c92:	2300      	movs	r3, #0
 8004c94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c98:	682f      	ldr	r7, [r5, #0]
 8004c9a:	6a21      	ldr	r1, [r4, #32]
 8004c9c:	602b      	str	r3, [r5, #0]
 8004c9e:	d032      	beq.n	8004d06 <__sflush_r+0x9a>
 8004ca0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ca2:	89a3      	ldrh	r3, [r4, #12]
 8004ca4:	075a      	lsls	r2, r3, #29
 8004ca6:	d505      	bpl.n	8004cb4 <__sflush_r+0x48>
 8004ca8:	6863      	ldr	r3, [r4, #4]
 8004caa:	1ac0      	subs	r0, r0, r3
 8004cac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cae:	b10b      	cbz	r3, 8004cb4 <__sflush_r+0x48>
 8004cb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cb2:	1ac0      	subs	r0, r0, r3
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cba:	6a21      	ldr	r1, [r4, #32]
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	47b0      	blx	r6
 8004cc0:	1c43      	adds	r3, r0, #1
 8004cc2:	89a3      	ldrh	r3, [r4, #12]
 8004cc4:	d106      	bne.n	8004cd4 <__sflush_r+0x68>
 8004cc6:	6829      	ldr	r1, [r5, #0]
 8004cc8:	291d      	cmp	r1, #29
 8004cca:	d82b      	bhi.n	8004d24 <__sflush_r+0xb8>
 8004ccc:	4a29      	ldr	r2, [pc, #164]	; (8004d74 <__sflush_r+0x108>)
 8004cce:	410a      	asrs	r2, r1
 8004cd0:	07d6      	lsls	r6, r2, #31
 8004cd2:	d427      	bmi.n	8004d24 <__sflush_r+0xb8>
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	6062      	str	r2, [r4, #4]
 8004cd8:	04d9      	lsls	r1, r3, #19
 8004cda:	6922      	ldr	r2, [r4, #16]
 8004cdc:	6022      	str	r2, [r4, #0]
 8004cde:	d504      	bpl.n	8004cea <__sflush_r+0x7e>
 8004ce0:	1c42      	adds	r2, r0, #1
 8004ce2:	d101      	bne.n	8004ce8 <__sflush_r+0x7c>
 8004ce4:	682b      	ldr	r3, [r5, #0]
 8004ce6:	b903      	cbnz	r3, 8004cea <__sflush_r+0x7e>
 8004ce8:	6560      	str	r0, [r4, #84]	; 0x54
 8004cea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cec:	602f      	str	r7, [r5, #0]
 8004cee:	2900      	cmp	r1, #0
 8004cf0:	d0c9      	beq.n	8004c86 <__sflush_r+0x1a>
 8004cf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cf6:	4299      	cmp	r1, r3
 8004cf8:	d002      	beq.n	8004d00 <__sflush_r+0x94>
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	f7ff f9f6 	bl	80040ec <_free_r>
 8004d00:	2000      	movs	r0, #0
 8004d02:	6360      	str	r0, [r4, #52]	; 0x34
 8004d04:	e7c0      	b.n	8004c88 <__sflush_r+0x1c>
 8004d06:	2301      	movs	r3, #1
 8004d08:	4628      	mov	r0, r5
 8004d0a:	47b0      	blx	r6
 8004d0c:	1c41      	adds	r1, r0, #1
 8004d0e:	d1c8      	bne.n	8004ca2 <__sflush_r+0x36>
 8004d10:	682b      	ldr	r3, [r5, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0c5      	beq.n	8004ca2 <__sflush_r+0x36>
 8004d16:	2b1d      	cmp	r3, #29
 8004d18:	d001      	beq.n	8004d1e <__sflush_r+0xb2>
 8004d1a:	2b16      	cmp	r3, #22
 8004d1c:	d101      	bne.n	8004d22 <__sflush_r+0xb6>
 8004d1e:	602f      	str	r7, [r5, #0]
 8004d20:	e7b1      	b.n	8004c86 <__sflush_r+0x1a>
 8004d22:	89a3      	ldrh	r3, [r4, #12]
 8004d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d28:	81a3      	strh	r3, [r4, #12]
 8004d2a:	e7ad      	b.n	8004c88 <__sflush_r+0x1c>
 8004d2c:	690f      	ldr	r7, [r1, #16]
 8004d2e:	2f00      	cmp	r7, #0
 8004d30:	d0a9      	beq.n	8004c86 <__sflush_r+0x1a>
 8004d32:	0793      	lsls	r3, r2, #30
 8004d34:	680e      	ldr	r6, [r1, #0]
 8004d36:	bf08      	it	eq
 8004d38:	694b      	ldreq	r3, [r1, #20]
 8004d3a:	600f      	str	r7, [r1, #0]
 8004d3c:	bf18      	it	ne
 8004d3e:	2300      	movne	r3, #0
 8004d40:	eba6 0807 	sub.w	r8, r6, r7
 8004d44:	608b      	str	r3, [r1, #8]
 8004d46:	f1b8 0f00 	cmp.w	r8, #0
 8004d4a:	dd9c      	ble.n	8004c86 <__sflush_r+0x1a>
 8004d4c:	6a21      	ldr	r1, [r4, #32]
 8004d4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d50:	4643      	mov	r3, r8
 8004d52:	463a      	mov	r2, r7
 8004d54:	4628      	mov	r0, r5
 8004d56:	47b0      	blx	r6
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	dc06      	bgt.n	8004d6a <__sflush_r+0xfe>
 8004d5c:	89a3      	ldrh	r3, [r4, #12]
 8004d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d62:	81a3      	strh	r3, [r4, #12]
 8004d64:	f04f 30ff 	mov.w	r0, #4294967295
 8004d68:	e78e      	b.n	8004c88 <__sflush_r+0x1c>
 8004d6a:	4407      	add	r7, r0
 8004d6c:	eba8 0800 	sub.w	r8, r8, r0
 8004d70:	e7e9      	b.n	8004d46 <__sflush_r+0xda>
 8004d72:	bf00      	nop
 8004d74:	dfbffffe 	.word	0xdfbffffe

08004d78 <_fflush_r>:
 8004d78:	b538      	push	{r3, r4, r5, lr}
 8004d7a:	690b      	ldr	r3, [r1, #16]
 8004d7c:	4605      	mov	r5, r0
 8004d7e:	460c      	mov	r4, r1
 8004d80:	b913      	cbnz	r3, 8004d88 <_fflush_r+0x10>
 8004d82:	2500      	movs	r5, #0
 8004d84:	4628      	mov	r0, r5
 8004d86:	bd38      	pop	{r3, r4, r5, pc}
 8004d88:	b118      	cbz	r0, 8004d92 <_fflush_r+0x1a>
 8004d8a:	6a03      	ldr	r3, [r0, #32]
 8004d8c:	b90b      	cbnz	r3, 8004d92 <_fflush_r+0x1a>
 8004d8e:	f7fe fa25 	bl	80031dc <__sinit>
 8004d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0f3      	beq.n	8004d82 <_fflush_r+0xa>
 8004d9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d9c:	07d0      	lsls	r0, r2, #31
 8004d9e:	d404      	bmi.n	8004daa <_fflush_r+0x32>
 8004da0:	0599      	lsls	r1, r3, #22
 8004da2:	d402      	bmi.n	8004daa <_fflush_r+0x32>
 8004da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004da6:	f7fe fb22 	bl	80033ee <__retarget_lock_acquire_recursive>
 8004daa:	4628      	mov	r0, r5
 8004dac:	4621      	mov	r1, r4
 8004dae:	f7ff ff5d 	bl	8004c6c <__sflush_r>
 8004db2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004db4:	07da      	lsls	r2, r3, #31
 8004db6:	4605      	mov	r5, r0
 8004db8:	d4e4      	bmi.n	8004d84 <_fflush_r+0xc>
 8004dba:	89a3      	ldrh	r3, [r4, #12]
 8004dbc:	059b      	lsls	r3, r3, #22
 8004dbe:	d4e1      	bmi.n	8004d84 <_fflush_r+0xc>
 8004dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dc2:	f7fe fb15 	bl	80033f0 <__retarget_lock_release_recursive>
 8004dc6:	e7dd      	b.n	8004d84 <_fflush_r+0xc>

08004dc8 <__swbuf_r>:
 8004dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dca:	460e      	mov	r6, r1
 8004dcc:	4614      	mov	r4, r2
 8004dce:	4605      	mov	r5, r0
 8004dd0:	b118      	cbz	r0, 8004dda <__swbuf_r+0x12>
 8004dd2:	6a03      	ldr	r3, [r0, #32]
 8004dd4:	b90b      	cbnz	r3, 8004dda <__swbuf_r+0x12>
 8004dd6:	f7fe fa01 	bl	80031dc <__sinit>
 8004dda:	69a3      	ldr	r3, [r4, #24]
 8004ddc:	60a3      	str	r3, [r4, #8]
 8004dde:	89a3      	ldrh	r3, [r4, #12]
 8004de0:	071a      	lsls	r2, r3, #28
 8004de2:	d525      	bpl.n	8004e30 <__swbuf_r+0x68>
 8004de4:	6923      	ldr	r3, [r4, #16]
 8004de6:	b31b      	cbz	r3, 8004e30 <__swbuf_r+0x68>
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	6922      	ldr	r2, [r4, #16]
 8004dec:	1a98      	subs	r0, r3, r2
 8004dee:	6963      	ldr	r3, [r4, #20]
 8004df0:	b2f6      	uxtb	r6, r6
 8004df2:	4283      	cmp	r3, r0
 8004df4:	4637      	mov	r7, r6
 8004df6:	dc04      	bgt.n	8004e02 <__swbuf_r+0x3a>
 8004df8:	4621      	mov	r1, r4
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	f7ff ffbc 	bl	8004d78 <_fflush_r>
 8004e00:	b9e0      	cbnz	r0, 8004e3c <__swbuf_r+0x74>
 8004e02:	68a3      	ldr	r3, [r4, #8]
 8004e04:	3b01      	subs	r3, #1
 8004e06:	60a3      	str	r3, [r4, #8]
 8004e08:	6823      	ldr	r3, [r4, #0]
 8004e0a:	1c5a      	adds	r2, r3, #1
 8004e0c:	6022      	str	r2, [r4, #0]
 8004e0e:	701e      	strb	r6, [r3, #0]
 8004e10:	6962      	ldr	r2, [r4, #20]
 8004e12:	1c43      	adds	r3, r0, #1
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d004      	beq.n	8004e22 <__swbuf_r+0x5a>
 8004e18:	89a3      	ldrh	r3, [r4, #12]
 8004e1a:	07db      	lsls	r3, r3, #31
 8004e1c:	d506      	bpl.n	8004e2c <__swbuf_r+0x64>
 8004e1e:	2e0a      	cmp	r6, #10
 8004e20:	d104      	bne.n	8004e2c <__swbuf_r+0x64>
 8004e22:	4621      	mov	r1, r4
 8004e24:	4628      	mov	r0, r5
 8004e26:	f7ff ffa7 	bl	8004d78 <_fflush_r>
 8004e2a:	b938      	cbnz	r0, 8004e3c <__swbuf_r+0x74>
 8004e2c:	4638      	mov	r0, r7
 8004e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e30:	4621      	mov	r1, r4
 8004e32:	4628      	mov	r0, r5
 8004e34:	f000 f806 	bl	8004e44 <__swsetup_r>
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	d0d5      	beq.n	8004de8 <__swbuf_r+0x20>
 8004e3c:	f04f 37ff 	mov.w	r7, #4294967295
 8004e40:	e7f4      	b.n	8004e2c <__swbuf_r+0x64>
	...

08004e44 <__swsetup_r>:
 8004e44:	b538      	push	{r3, r4, r5, lr}
 8004e46:	4b2a      	ldr	r3, [pc, #168]	; (8004ef0 <__swsetup_r+0xac>)
 8004e48:	4605      	mov	r5, r0
 8004e4a:	6818      	ldr	r0, [r3, #0]
 8004e4c:	460c      	mov	r4, r1
 8004e4e:	b118      	cbz	r0, 8004e58 <__swsetup_r+0x14>
 8004e50:	6a03      	ldr	r3, [r0, #32]
 8004e52:	b90b      	cbnz	r3, 8004e58 <__swsetup_r+0x14>
 8004e54:	f7fe f9c2 	bl	80031dc <__sinit>
 8004e58:	89a3      	ldrh	r3, [r4, #12]
 8004e5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e5e:	0718      	lsls	r0, r3, #28
 8004e60:	d422      	bmi.n	8004ea8 <__swsetup_r+0x64>
 8004e62:	06d9      	lsls	r1, r3, #27
 8004e64:	d407      	bmi.n	8004e76 <__swsetup_r+0x32>
 8004e66:	2309      	movs	r3, #9
 8004e68:	602b      	str	r3, [r5, #0]
 8004e6a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e6e:	81a3      	strh	r3, [r4, #12]
 8004e70:	f04f 30ff 	mov.w	r0, #4294967295
 8004e74:	e034      	b.n	8004ee0 <__swsetup_r+0x9c>
 8004e76:	0758      	lsls	r0, r3, #29
 8004e78:	d512      	bpl.n	8004ea0 <__swsetup_r+0x5c>
 8004e7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e7c:	b141      	cbz	r1, 8004e90 <__swsetup_r+0x4c>
 8004e7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e82:	4299      	cmp	r1, r3
 8004e84:	d002      	beq.n	8004e8c <__swsetup_r+0x48>
 8004e86:	4628      	mov	r0, r5
 8004e88:	f7ff f930 	bl	80040ec <_free_r>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	6363      	str	r3, [r4, #52]	; 0x34
 8004e90:	89a3      	ldrh	r3, [r4, #12]
 8004e92:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e96:	81a3      	strh	r3, [r4, #12]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	6063      	str	r3, [r4, #4]
 8004e9c:	6923      	ldr	r3, [r4, #16]
 8004e9e:	6023      	str	r3, [r4, #0]
 8004ea0:	89a3      	ldrh	r3, [r4, #12]
 8004ea2:	f043 0308 	orr.w	r3, r3, #8
 8004ea6:	81a3      	strh	r3, [r4, #12]
 8004ea8:	6923      	ldr	r3, [r4, #16]
 8004eaa:	b94b      	cbnz	r3, 8004ec0 <__swsetup_r+0x7c>
 8004eac:	89a3      	ldrh	r3, [r4, #12]
 8004eae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eb6:	d003      	beq.n	8004ec0 <__swsetup_r+0x7c>
 8004eb8:	4621      	mov	r1, r4
 8004eba:	4628      	mov	r0, r5
 8004ebc:	f000 f8c4 	bl	8005048 <__smakebuf_r>
 8004ec0:	89a0      	ldrh	r0, [r4, #12]
 8004ec2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ec6:	f010 0301 	ands.w	r3, r0, #1
 8004eca:	d00a      	beq.n	8004ee2 <__swsetup_r+0x9e>
 8004ecc:	2300      	movs	r3, #0
 8004ece:	60a3      	str	r3, [r4, #8]
 8004ed0:	6963      	ldr	r3, [r4, #20]
 8004ed2:	425b      	negs	r3, r3
 8004ed4:	61a3      	str	r3, [r4, #24]
 8004ed6:	6923      	ldr	r3, [r4, #16]
 8004ed8:	b943      	cbnz	r3, 8004eec <__swsetup_r+0xa8>
 8004eda:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ede:	d1c4      	bne.n	8004e6a <__swsetup_r+0x26>
 8004ee0:	bd38      	pop	{r3, r4, r5, pc}
 8004ee2:	0781      	lsls	r1, r0, #30
 8004ee4:	bf58      	it	pl
 8004ee6:	6963      	ldrpl	r3, [r4, #20]
 8004ee8:	60a3      	str	r3, [r4, #8]
 8004eea:	e7f4      	b.n	8004ed6 <__swsetup_r+0x92>
 8004eec:	2000      	movs	r0, #0
 8004eee:	e7f7      	b.n	8004ee0 <__swsetup_r+0x9c>
 8004ef0:	20000060 	.word	0x20000060

08004ef4 <_sbrk_r>:
 8004ef4:	b538      	push	{r3, r4, r5, lr}
 8004ef6:	4d06      	ldr	r5, [pc, #24]	; (8004f10 <_sbrk_r+0x1c>)
 8004ef8:	2300      	movs	r3, #0
 8004efa:	4604      	mov	r4, r0
 8004efc:	4608      	mov	r0, r1
 8004efe:	602b      	str	r3, [r5, #0]
 8004f00:	f7fd faf8 	bl	80024f4 <_sbrk>
 8004f04:	1c43      	adds	r3, r0, #1
 8004f06:	d102      	bne.n	8004f0e <_sbrk_r+0x1a>
 8004f08:	682b      	ldr	r3, [r5, #0]
 8004f0a:	b103      	cbz	r3, 8004f0e <_sbrk_r+0x1a>
 8004f0c:	6023      	str	r3, [r4, #0]
 8004f0e:	bd38      	pop	{r3, r4, r5, pc}
 8004f10:	20000330 	.word	0x20000330

08004f14 <memcpy>:
 8004f14:	440a      	add	r2, r1
 8004f16:	4291      	cmp	r1, r2
 8004f18:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f1c:	d100      	bne.n	8004f20 <memcpy+0xc>
 8004f1e:	4770      	bx	lr
 8004f20:	b510      	push	{r4, lr}
 8004f22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f2a:	4291      	cmp	r1, r2
 8004f2c:	d1f9      	bne.n	8004f22 <memcpy+0xe>
 8004f2e:	bd10      	pop	{r4, pc}

08004f30 <__assert_func>:
 8004f30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004f32:	4614      	mov	r4, r2
 8004f34:	461a      	mov	r2, r3
 8004f36:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <__assert_func+0x2c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4605      	mov	r5, r0
 8004f3c:	68d8      	ldr	r0, [r3, #12]
 8004f3e:	b14c      	cbz	r4, 8004f54 <__assert_func+0x24>
 8004f40:	4b07      	ldr	r3, [pc, #28]	; (8004f60 <__assert_func+0x30>)
 8004f42:	9100      	str	r1, [sp, #0]
 8004f44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004f48:	4906      	ldr	r1, [pc, #24]	; (8004f64 <__assert_func+0x34>)
 8004f4a:	462b      	mov	r3, r5
 8004f4c:	f000 f844 	bl	8004fd8 <fiprintf>
 8004f50:	f000 f8d8 	bl	8005104 <abort>
 8004f54:	4b04      	ldr	r3, [pc, #16]	; (8004f68 <__assert_func+0x38>)
 8004f56:	461c      	mov	r4, r3
 8004f58:	e7f3      	b.n	8004f42 <__assert_func+0x12>
 8004f5a:	bf00      	nop
 8004f5c:	20000060 	.word	0x20000060
 8004f60:	0800545f 	.word	0x0800545f
 8004f64:	0800546c 	.word	0x0800546c
 8004f68:	0800549a 	.word	0x0800549a

08004f6c <_calloc_r>:
 8004f6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f6e:	fba1 2402 	umull	r2, r4, r1, r2
 8004f72:	b94c      	cbnz	r4, 8004f88 <_calloc_r+0x1c>
 8004f74:	4611      	mov	r1, r2
 8004f76:	9201      	str	r2, [sp, #4]
 8004f78:	f7ff f92c 	bl	80041d4 <_malloc_r>
 8004f7c:	9a01      	ldr	r2, [sp, #4]
 8004f7e:	4605      	mov	r5, r0
 8004f80:	b930      	cbnz	r0, 8004f90 <_calloc_r+0x24>
 8004f82:	4628      	mov	r0, r5
 8004f84:	b003      	add	sp, #12
 8004f86:	bd30      	pop	{r4, r5, pc}
 8004f88:	220c      	movs	r2, #12
 8004f8a:	6002      	str	r2, [r0, #0]
 8004f8c:	2500      	movs	r5, #0
 8004f8e:	e7f8      	b.n	8004f82 <_calloc_r+0x16>
 8004f90:	4621      	mov	r1, r4
 8004f92:	f7fe f9ae 	bl	80032f2 <memset>
 8004f96:	e7f4      	b.n	8004f82 <_calloc_r+0x16>

08004f98 <__ascii_mbtowc>:
 8004f98:	b082      	sub	sp, #8
 8004f9a:	b901      	cbnz	r1, 8004f9e <__ascii_mbtowc+0x6>
 8004f9c:	a901      	add	r1, sp, #4
 8004f9e:	b142      	cbz	r2, 8004fb2 <__ascii_mbtowc+0x1a>
 8004fa0:	b14b      	cbz	r3, 8004fb6 <__ascii_mbtowc+0x1e>
 8004fa2:	7813      	ldrb	r3, [r2, #0]
 8004fa4:	600b      	str	r3, [r1, #0]
 8004fa6:	7812      	ldrb	r2, [r2, #0]
 8004fa8:	1e10      	subs	r0, r2, #0
 8004faa:	bf18      	it	ne
 8004fac:	2001      	movne	r0, #1
 8004fae:	b002      	add	sp, #8
 8004fb0:	4770      	bx	lr
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	e7fb      	b.n	8004fae <__ascii_mbtowc+0x16>
 8004fb6:	f06f 0001 	mvn.w	r0, #1
 8004fba:	e7f8      	b.n	8004fae <__ascii_mbtowc+0x16>

08004fbc <__ascii_wctomb>:
 8004fbc:	b149      	cbz	r1, 8004fd2 <__ascii_wctomb+0x16>
 8004fbe:	2aff      	cmp	r2, #255	; 0xff
 8004fc0:	bf85      	ittet	hi
 8004fc2:	238a      	movhi	r3, #138	; 0x8a
 8004fc4:	6003      	strhi	r3, [r0, #0]
 8004fc6:	700a      	strbls	r2, [r1, #0]
 8004fc8:	f04f 30ff 	movhi.w	r0, #4294967295
 8004fcc:	bf98      	it	ls
 8004fce:	2001      	movls	r0, #1
 8004fd0:	4770      	bx	lr
 8004fd2:	4608      	mov	r0, r1
 8004fd4:	4770      	bx	lr
	...

08004fd8 <fiprintf>:
 8004fd8:	b40e      	push	{r1, r2, r3}
 8004fda:	b503      	push	{r0, r1, lr}
 8004fdc:	4601      	mov	r1, r0
 8004fde:	ab03      	add	r3, sp, #12
 8004fe0:	4805      	ldr	r0, [pc, #20]	; (8004ff8 <fiprintf+0x20>)
 8004fe2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fe6:	6800      	ldr	r0, [r0, #0]
 8004fe8:	9301      	str	r3, [sp, #4]
 8004fea:	f7ff fd25 	bl	8004a38 <_vfiprintf_r>
 8004fee:	b002      	add	sp, #8
 8004ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ff4:	b003      	add	sp, #12
 8004ff6:	4770      	bx	lr
 8004ff8:	20000060 	.word	0x20000060

08004ffc <__swhatbuf_r>:
 8004ffc:	b570      	push	{r4, r5, r6, lr}
 8004ffe:	460c      	mov	r4, r1
 8005000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005004:	2900      	cmp	r1, #0
 8005006:	b096      	sub	sp, #88	; 0x58
 8005008:	4615      	mov	r5, r2
 800500a:	461e      	mov	r6, r3
 800500c:	da0d      	bge.n	800502a <__swhatbuf_r+0x2e>
 800500e:	89a3      	ldrh	r3, [r4, #12]
 8005010:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005014:	f04f 0100 	mov.w	r1, #0
 8005018:	bf0c      	ite	eq
 800501a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800501e:	2340      	movne	r3, #64	; 0x40
 8005020:	2000      	movs	r0, #0
 8005022:	6031      	str	r1, [r6, #0]
 8005024:	602b      	str	r3, [r5, #0]
 8005026:	b016      	add	sp, #88	; 0x58
 8005028:	bd70      	pop	{r4, r5, r6, pc}
 800502a:	466a      	mov	r2, sp
 800502c:	f000 f848 	bl	80050c0 <_fstat_r>
 8005030:	2800      	cmp	r0, #0
 8005032:	dbec      	blt.n	800500e <__swhatbuf_r+0x12>
 8005034:	9901      	ldr	r1, [sp, #4]
 8005036:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800503a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800503e:	4259      	negs	r1, r3
 8005040:	4159      	adcs	r1, r3
 8005042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005046:	e7eb      	b.n	8005020 <__swhatbuf_r+0x24>

08005048 <__smakebuf_r>:
 8005048:	898b      	ldrh	r3, [r1, #12]
 800504a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800504c:	079d      	lsls	r5, r3, #30
 800504e:	4606      	mov	r6, r0
 8005050:	460c      	mov	r4, r1
 8005052:	d507      	bpl.n	8005064 <__smakebuf_r+0x1c>
 8005054:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005058:	6023      	str	r3, [r4, #0]
 800505a:	6123      	str	r3, [r4, #16]
 800505c:	2301      	movs	r3, #1
 800505e:	6163      	str	r3, [r4, #20]
 8005060:	b002      	add	sp, #8
 8005062:	bd70      	pop	{r4, r5, r6, pc}
 8005064:	ab01      	add	r3, sp, #4
 8005066:	466a      	mov	r2, sp
 8005068:	f7ff ffc8 	bl	8004ffc <__swhatbuf_r>
 800506c:	9900      	ldr	r1, [sp, #0]
 800506e:	4605      	mov	r5, r0
 8005070:	4630      	mov	r0, r6
 8005072:	f7ff f8af 	bl	80041d4 <_malloc_r>
 8005076:	b948      	cbnz	r0, 800508c <__smakebuf_r+0x44>
 8005078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800507c:	059a      	lsls	r2, r3, #22
 800507e:	d4ef      	bmi.n	8005060 <__smakebuf_r+0x18>
 8005080:	f023 0303 	bic.w	r3, r3, #3
 8005084:	f043 0302 	orr.w	r3, r3, #2
 8005088:	81a3      	strh	r3, [r4, #12]
 800508a:	e7e3      	b.n	8005054 <__smakebuf_r+0xc>
 800508c:	89a3      	ldrh	r3, [r4, #12]
 800508e:	6020      	str	r0, [r4, #0]
 8005090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005094:	81a3      	strh	r3, [r4, #12]
 8005096:	9b00      	ldr	r3, [sp, #0]
 8005098:	6163      	str	r3, [r4, #20]
 800509a:	9b01      	ldr	r3, [sp, #4]
 800509c:	6120      	str	r0, [r4, #16]
 800509e:	b15b      	cbz	r3, 80050b8 <__smakebuf_r+0x70>
 80050a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050a4:	4630      	mov	r0, r6
 80050a6:	f000 f81d 	bl	80050e4 <_isatty_r>
 80050aa:	b128      	cbz	r0, 80050b8 <__smakebuf_r+0x70>
 80050ac:	89a3      	ldrh	r3, [r4, #12]
 80050ae:	f023 0303 	bic.w	r3, r3, #3
 80050b2:	f043 0301 	orr.w	r3, r3, #1
 80050b6:	81a3      	strh	r3, [r4, #12]
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	431d      	orrs	r5, r3
 80050bc:	81a5      	strh	r5, [r4, #12]
 80050be:	e7cf      	b.n	8005060 <__smakebuf_r+0x18>

080050c0 <_fstat_r>:
 80050c0:	b538      	push	{r3, r4, r5, lr}
 80050c2:	4d07      	ldr	r5, [pc, #28]	; (80050e0 <_fstat_r+0x20>)
 80050c4:	2300      	movs	r3, #0
 80050c6:	4604      	mov	r4, r0
 80050c8:	4608      	mov	r0, r1
 80050ca:	4611      	mov	r1, r2
 80050cc:	602b      	str	r3, [r5, #0]
 80050ce:	f7fd f9e8 	bl	80024a2 <_fstat>
 80050d2:	1c43      	adds	r3, r0, #1
 80050d4:	d102      	bne.n	80050dc <_fstat_r+0x1c>
 80050d6:	682b      	ldr	r3, [r5, #0]
 80050d8:	b103      	cbz	r3, 80050dc <_fstat_r+0x1c>
 80050da:	6023      	str	r3, [r4, #0]
 80050dc:	bd38      	pop	{r3, r4, r5, pc}
 80050de:	bf00      	nop
 80050e0:	20000330 	.word	0x20000330

080050e4 <_isatty_r>:
 80050e4:	b538      	push	{r3, r4, r5, lr}
 80050e6:	4d06      	ldr	r5, [pc, #24]	; (8005100 <_isatty_r+0x1c>)
 80050e8:	2300      	movs	r3, #0
 80050ea:	4604      	mov	r4, r0
 80050ec:	4608      	mov	r0, r1
 80050ee:	602b      	str	r3, [r5, #0]
 80050f0:	f7fd f9e7 	bl	80024c2 <_isatty>
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	d102      	bne.n	80050fe <_isatty_r+0x1a>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	b103      	cbz	r3, 80050fe <_isatty_r+0x1a>
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	bd38      	pop	{r3, r4, r5, pc}
 8005100:	20000330 	.word	0x20000330

08005104 <abort>:
 8005104:	b508      	push	{r3, lr}
 8005106:	2006      	movs	r0, #6
 8005108:	f000 f82c 	bl	8005164 <raise>
 800510c:	2001      	movs	r0, #1
 800510e:	f7fd f979 	bl	8002404 <_exit>

08005112 <_raise_r>:
 8005112:	291f      	cmp	r1, #31
 8005114:	b538      	push	{r3, r4, r5, lr}
 8005116:	4604      	mov	r4, r0
 8005118:	460d      	mov	r5, r1
 800511a:	d904      	bls.n	8005126 <_raise_r+0x14>
 800511c:	2316      	movs	r3, #22
 800511e:	6003      	str	r3, [r0, #0]
 8005120:	f04f 30ff 	mov.w	r0, #4294967295
 8005124:	bd38      	pop	{r3, r4, r5, pc}
 8005126:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005128:	b112      	cbz	r2, 8005130 <_raise_r+0x1e>
 800512a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800512e:	b94b      	cbnz	r3, 8005144 <_raise_r+0x32>
 8005130:	4620      	mov	r0, r4
 8005132:	f000 f831 	bl	8005198 <_getpid_r>
 8005136:	462a      	mov	r2, r5
 8005138:	4601      	mov	r1, r0
 800513a:	4620      	mov	r0, r4
 800513c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005140:	f000 b818 	b.w	8005174 <_kill_r>
 8005144:	2b01      	cmp	r3, #1
 8005146:	d00a      	beq.n	800515e <_raise_r+0x4c>
 8005148:	1c59      	adds	r1, r3, #1
 800514a:	d103      	bne.n	8005154 <_raise_r+0x42>
 800514c:	2316      	movs	r3, #22
 800514e:	6003      	str	r3, [r0, #0]
 8005150:	2001      	movs	r0, #1
 8005152:	e7e7      	b.n	8005124 <_raise_r+0x12>
 8005154:	2400      	movs	r4, #0
 8005156:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800515a:	4628      	mov	r0, r5
 800515c:	4798      	blx	r3
 800515e:	2000      	movs	r0, #0
 8005160:	e7e0      	b.n	8005124 <_raise_r+0x12>
	...

08005164 <raise>:
 8005164:	4b02      	ldr	r3, [pc, #8]	; (8005170 <raise+0xc>)
 8005166:	4601      	mov	r1, r0
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	f7ff bfd2 	b.w	8005112 <_raise_r>
 800516e:	bf00      	nop
 8005170:	20000060 	.word	0x20000060

08005174 <_kill_r>:
 8005174:	b538      	push	{r3, r4, r5, lr}
 8005176:	4d07      	ldr	r5, [pc, #28]	; (8005194 <_kill_r+0x20>)
 8005178:	2300      	movs	r3, #0
 800517a:	4604      	mov	r4, r0
 800517c:	4608      	mov	r0, r1
 800517e:	4611      	mov	r1, r2
 8005180:	602b      	str	r3, [r5, #0]
 8005182:	f7fd f92f 	bl	80023e4 <_kill>
 8005186:	1c43      	adds	r3, r0, #1
 8005188:	d102      	bne.n	8005190 <_kill_r+0x1c>
 800518a:	682b      	ldr	r3, [r5, #0]
 800518c:	b103      	cbz	r3, 8005190 <_kill_r+0x1c>
 800518e:	6023      	str	r3, [r4, #0]
 8005190:	bd38      	pop	{r3, r4, r5, pc}
 8005192:	bf00      	nop
 8005194:	20000330 	.word	0x20000330

08005198 <_getpid_r>:
 8005198:	f7fd b91c 	b.w	80023d4 <_getpid>

0800519c <_init>:
 800519c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519e:	bf00      	nop
 80051a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a2:	bc08      	pop	{r3}
 80051a4:	469e      	mov	lr, r3
 80051a6:	4770      	bx	lr

080051a8 <_fini>:
 80051a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051aa:	bf00      	nop
 80051ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ae:	bc08      	pop	{r3}
 80051b0:	469e      	mov	lr, r3
 80051b2:	4770      	bx	lr
