
AS7421.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005114  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  080052b8  080052b8  000152b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056b4  080056b4  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  080056b4  080056b4  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056b4  080056b4  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056b4  080056b4  000156b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056b8  080056b8  000156b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  080056bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200001d0  0800588c  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  0800588c  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002b0e  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b49  00000000  00000000  00022d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000560  00000000  00000000  000238a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003ee  00000000  00000000  00023e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001012e  00000000  00000000  000241ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000042aa  00000000  00000000  0003431c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000564cc  00000000  00000000  000385c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000023a8  00000000  00000000  0008ea94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00090e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d0 	.word	0x200001d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800529c 	.word	0x0800529c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	0800529c 	.word	0x0800529c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <AS7421_readRegister>:
static void AS7421_writeRegisters(uint8_t startAddr, uint8_t bufferSize, uint8_t *val);
static uint16_t byteSwap16(uint16_t value);

//Reads from a given location from the AS7421
static uint8_t AS7421_readRegister(uint8_t addr)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
	char data = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	73fb      	strb	r3, [r7, #15]
	I2C1_byteRead(AS7421_ADDR, addr, &data);
 8000bc6:	f107 020f 	add.w	r2, r7, #15
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	2064      	movs	r0, #100	; 0x64
 8000bd0:	f001 faa0 	bl	8002114 <I2C1_byteRead>
	return data;
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <AS7421_readRegisters>:

//Reads from consecutive register locations on the AS7421
static void AS7421_readRegisters(uint8_t addr, uint8_t bufferSize, uint8_t *data)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	603a      	str	r2, [r7, #0]
 8000be8:	71fb      	strb	r3, [r7, #7]
 8000bea:	460b      	mov	r3, r1
 8000bec:	71bb      	strb	r3, [r7, #6]
	I2C1_burstRead(AS7421_ADDR, addr, bufferSize, (char *)data);
 8000bee:	79ba      	ldrb	r2, [r7, #6]
 8000bf0:	79f9      	ldrb	r1, [r7, #7]
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	2064      	movs	r0, #100	; 0x64
 8000bf6:	f001 fb07 	bl	8002208 <I2C1_burstRead>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <AS7421_writeRegister>:

//Write a value to a given location on the AS7421
static void AS7421_writeRegister(uint8_t addr, uint8_t val)
{
 8000c02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c06:	b087      	sub	sp, #28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	460a      	mov	r2, r1
 8000c0e:	71fb      	strb	r3, [r7, #7]
 8000c10:	4613      	mov	r3, r2
 8000c12:	71bb      	strb	r3, [r7, #6]
 8000c14:	466b      	mov	r3, sp
 8000c16:	461e      	mov	r6, r3
	uint8_t bufferSize = 1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	75fb      	strb	r3, [r7, #23]
	char data[bufferSize];
 8000c1c:	7df9      	ldrb	r1, [r7, #23]
 8000c1e:	460b      	mov	r3, r1
 8000c20:	3b01      	subs	r3, #1
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	b2cb      	uxtb	r3, r1
 8000c26:	2200      	movs	r2, #0
 8000c28:	4698      	mov	r8, r3
 8000c2a:	4691      	mov	r9, r2
 8000c2c:	f04f 0200 	mov.w	r2, #0
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c38:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c3c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c40:	b2cb      	uxtb	r3, r1
 8000c42:	2200      	movs	r2, #0
 8000c44:	461c      	mov	r4, r3
 8000c46:	4615      	mov	r5, r2
 8000c48:	f04f 0200 	mov.w	r2, #0
 8000c4c:	f04f 0300 	mov.w	r3, #0
 8000c50:	00eb      	lsls	r3, r5, #3
 8000c52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c56:	00e2      	lsls	r2, r4, #3
 8000c58:	460b      	mov	r3, r1
 8000c5a:	3307      	adds	r3, #7
 8000c5c:	08db      	lsrs	r3, r3, #3
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	ebad 0d03 	sub.w	sp, sp, r3
 8000c64:	466b      	mov	r3, sp
 8000c66:	3300      	adds	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]

	data[0] = val;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	79ba      	ldrb	r2, [r7, #6]
 8000c6e:	701a      	strb	r2, [r3, #0]
	I2C1_burstWrite(AS7421_ADDR, addr, bufferSize, data);
 8000c70:	7dfa      	ldrb	r2, [r7, #23]
 8000c72:	79f9      	ldrb	r1, [r7, #7]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	2064      	movs	r0, #100	; 0x64
 8000c78:	f001 fb62 	bl	8002340 <I2C1_burstWrite>
 8000c7c:	46b5      	mov	sp, r6
}
 8000c7e:	bf00      	nop
 8000c80:	371c      	adds	r7, #28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c88 <AS7421_writeRegisters>:

//Write values to consecutive register locations on the AS7421
static void AS7421_writeRegisters(uint8_t startAddr, uint8_t bufferSize, uint8_t *val)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	603a      	str	r2, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
 8000c94:	460b      	mov	r3, r1
 8000c96:	71bb      	strb	r3, [r7, #6]
//
//	for (int i = 0; i < bufferSize; i++)
//	{
//		data[i] = val[i];
//	}
	I2C1_burstWrite(AS7421_ADDR, startAddr, bufferSize, (char *)val);
 8000c98:	79ba      	ldrb	r2, [r7, #6]
 8000c9a:	79f9      	ldrb	r1, [r7, #7]
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	2064      	movs	r0, #100	; 0x64
 8000ca0:	f001 fb4e 	bl	8002340 <I2C1_burstWrite>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <byteSwap16>:

static uint16_t byteSwap16(uint16_t value) {
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	80fb      	strh	r3, [r7, #6]
    return (value >> 8) | (value << 8);
 8000cb6:	88fb      	ldrh	r3, [r7, #6]
 8000cb8:	0a1b      	lsrs	r3, r3, #8
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	88fb      	ldrh	r3, [r7, #6]
 8000cc0:	021b      	lsls	r3, r3, #8
 8000cc2:	b21b      	sxth	r3, r3
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	b21b      	sxth	r3, r3
 8000cc8:	b29b      	uxth	r3, r3
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <fpu_enable>:

// Enable FPU
void fpu_enable()
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
	/*Enable Floating Point Unit: Enable CP10 and CP11 full access*/
	SCB->CPACR |= (1U<<20);
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <fpu_enable+0x50>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce2:	4a11      	ldr	r2, [pc, #68]	; (8000d28 <fpu_enable+0x50>)
 8000ce4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |= (1U<<21);
 8000cec:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <fpu_enable+0x50>)
 8000cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cf2:	4a0d      	ldr	r2, [pc, #52]	; (8000d28 <fpu_enable+0x50>)
 8000cf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |= (1U<<22);
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <fpu_enable+0x50>)
 8000cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d02:	4a09      	ldr	r2, [pc, #36]	; (8000d28 <fpu_enable+0x50>)
 8000d04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |= (1U<<23);
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <fpu_enable+0x50>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <fpu_enable+0x50>)
 8000d14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8000d1c:	bf00      	nop
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <isConnected>:

//Returns TRUE if the device sends an ACK indicating it is connected
bool isConnected()
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
	uint32_t timeout = 1000; //Timeout to connect set to 1000ms
 8000d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d36:	60fb      	str	r3, [r7, #12]
	unsigned long startTime = getMillis();
 8000d38:	f001 fcda 	bl	80026f0 <getMillis>
 8000d3c:	60b8      	str	r0, [r7, #8]

	while ((getMillis() - startTime) < timeout)
 8000d3e:	e035      	b.n	8000dac <isConnected+0x80>
	{
		volatile int tmp;

		/* Wait until bus not busy */
		while (I2C1->SR2 & (SR2_BUSY)){}
 8000d40:	bf00      	nop
 8000d42:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <isConnected+0x9c>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d1f9      	bne.n	8000d42 <isConnected+0x16>

		/* Generate start condition */
		I2C1->CR1 |= CR1_START;
 8000d4e:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <isConnected+0x9c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a1d      	ldr	r2, [pc, #116]	; (8000dc8 <isConnected+0x9c>)
 8000d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d58:	6013      	str	r3, [r2, #0]

		/* Wait until start condition flag is set */
		while (!(I2C1->SR1 & (SR1_SB))){}
 8000d5a:	bf00      	nop
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <isConnected+0x9c>)
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d0f9      	beq.n	8000d5c <isConnected+0x30>

		/* Transmit slave address + Write (0) */
		I2C1->DR = AS7421_WRITE_ADDR;
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <isConnected+0x9c>)
 8000d6a:	22c8      	movs	r2, #200	; 0xc8
 8000d6c:	611a      	str	r2, [r3, #16]

		/* Wait until address flag is set */
		while (!(I2C1->SR1 & (SR1_ADDR))){}
 8000d6e:	bf00      	nop
 8000d70:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <isConnected+0x9c>)
 8000d72:	695b      	ldr	r3, [r3, #20]
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d0f9      	beq.n	8000d70 <isConnected+0x44>

		/* Clear address flag by reading SR2 register */
		tmp = I2C1->SR2;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <isConnected+0x9c>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	607b      	str	r3, [r7, #4]

		if (I2C1->SR1 & SR1_AF)
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <isConnected+0x9c>)
 8000d84:	695b      	ldr	r3, [r3, #20]
 8000d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d006      	beq.n	8000d9c <isConnected+0x70>
		{
			//No ACK received, address not acknowledged
			I2C1->CR1 |= CR1_STOP;  // Send STOP condition
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <isConnected+0x9c>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <isConnected+0x9c>)
 8000d94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d98:	6013      	str	r3, [r2, #0]
			continue;
 8000d9a:	e007      	b.n	8000dac <isConnected+0x80>
		}

		//Address acknowledged, device is connected
		I2C1->CR1 |= CR1_STOP; // Send STOP condition
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <isConnected+0x9c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <isConnected+0x9c>)
 8000da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da6:	6013      	str	r3, [r2, #0]
		return true;
 8000da8:	2301      	movs	r3, #1
 8000daa:	e008      	b.n	8000dbe <isConnected+0x92>
	while ((getMillis() - startTime) < timeout)
 8000dac:	f001 fca0 	bl	80026f0 <getMillis>
 8000db0:	4602      	mov	r2, r0
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d8c1      	bhi.n	8000d40 <isConnected+0x14>
	}
	//Timeout to connect has expired, hence device is not connected
	return false;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40005400 	.word	0x40005400

08000dcc <initialize>:

//Initializes the sensor with basic settings
//Returns false if sensor is not detected
bool initialize()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
	SysTick_Init();
 8000dd0:	f001 fc5c 	bl	800268c <SysTick_Init>
	uart2_rxtx_init();
 8000dd4:	f001 fcba 	bl	800274c <uart2_rxtx_init>
	I2C1_Init();
 8000dd8:	f001 f8f8 	bl	8001fcc <I2C1_Init>
	fpu_enable();
 8000ddc:	f7ff ff7c 	bl	8000cd8 <fpu_enable>

	if (isConnected() == false)
 8000de0:	f7ff ffa4 	bl	8000d2c <isConnected>
 8000de4:	4603      	mov	r3, r0
 8000de6:	f083 0301 	eor.w	r3, r3, #1
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <initialize+0x28>
	{
		return false; //Check for sensor presence
 8000df0:	2300      	movs	r3, #0
 8000df2:	e022      	b.n	8000e3a <initialize+0x6e>
	}

	//Add initialization functions
	configueLEDWait(false); //False is to enable LED wait time between cycles
 8000df4:	2000      	movs	r0, #0
 8000df6:	f000 f873 	bl	8000ee0 <configueLEDWait>
	configureWaitCycle(true);
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f000 f89d 	bl	8000f3a <configureWaitCycle>
	setInterLED(2);
 8000e00:	2002      	movs	r0, #2
 8000e02:	f000 f88c 	bl	8000f1e <setInterLED>
	setLTF_CCOUNT(1023);
 8000e06:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8000e0a:	f000 f8e5 	bl	8000fd8 <setLTF_CCOUNT>

	configureLEDAuto(false);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 f902 	bl	8001018 <configureLEDAuto>
	setWaitTime(10);
 8000e14:	200a      	movs	r0, #10
 8000e16:	f000 f8af 	bl	8000f78 <setWaitTime>
	setIntegrationTime(20);
 8000e1a:	2014      	movs	r0, #20
 8000e1c:	f000 f924 	bl	8001068 <setIntegrationTime>
	numMeasurements(CONTINUOUS);
 8000e20:	20ff      	movs	r0, #255	; 0xff
 8000e22:	f000 f951 	bl	80010c8 <numMeasurements>
	setIntegrationMode(INTEGRATIONCYLE_ABCD);
 8000e26:	2003      	movs	r0, #3
 8000e28:	f000 f95c 	bl	80010e4 <setIntegrationMode>
	configureAutozero(true, AZ_WTIME_128US, 0, 1);
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2102      	movs	r1, #2
 8000e32:	2001      	movs	r0, #1
 8000e34:	f000 f97a 	bl	800112c <configureAutozero>
//	configueLEDWait(false);

	return true;
 8000e38:	2301      	movs	r3, #1
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
	...

08000e40 <startup>:

void startup()
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
	bool works = initialize();
 8000e46:	f7ff ffc1 	bl	8000dcc <initialize>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
	if (works)
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d014      	beq.n	8000e7e <startup+0x3e>
	{
		setIntegrationTime(65.5);
 8000e54:	2041      	movs	r0, #65	; 0x41
 8000e56:	f000 f907 	bl	8001068 <setIntegrationTime>
		setWaitTime(5);
 8000e5a:	2005      	movs	r0, #5
 8000e5c:	f000 f88c 	bl	8000f78 <setWaitTime>

		sleep();
 8000e60:	f000 f9dc 	bl	800121c <sleep>
		powerup();
 8000e64:	f000 f9b9 	bl	80011da <powerup>
		configureSMUX();
 8000e68:	f000 fb58 	bl	800151c <configureSMUX>
		configureGain(6); //Sets gain for all ADCs
 8000e6c:	2006      	movs	r0, #6
 8000e6e:	f000 fb69 	bl	8001544 <configureGain>
		configureLEDs(true, ALL_LEDS, LED_CURRENT_LIMIT_50MA);
 8000e72:	2200      	movs	r2, #0
 8000e74:	211f      	movs	r1, #31
 8000e76:	2001      	movs	r0, #1
 8000e78:	f000 fbb1 	bl	80015de <configureLEDs>
 8000e7c:	e003      	b.n	8000e86 <startup+0x46>
	}
	else
	{
		printf("Sensor failed to respond \n\r");
 8000e7e:	4803      	ldr	r0, [pc, #12]	; (8000e8c <startup+0x4c>)
 8000e80:	f002 fa64 	bl	800334c <iprintf>
		return;
 8000e84:	bf00      	nop
	}
}
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	080052b8 	.word	0x080052b8

08000e90 <performMeasurements>:

// Perform Measurements
void performMeasurements(uint16_t arrSpectra[CHANNELSIZE], uint16_t arrTemp[TEMPSIZE])
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	unsigned long startTime = getMillis();
 8000e9a:	f001 fc29 	bl	80026f0 <getMillis>
 8000e9e:	60f8      	str	r0, [r7, #12]
	while (getMeasurementStatus(ADATA) == 0){} //End of measurement, new measurement data can be read if true
 8000ea0:	bf00      	nop
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f000 fc36 	bl	8001714 <getMeasurementStatus>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	f083 0301 	eor.w	r3, r3, #1
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d1f6      	bne.n	8000ea2 <performMeasurements+0x12>

	unsigned long endTime = getMillis();
 8000eb4:	f001 fc1c 	bl	80026f0 <getMillis>
 8000eb8:	60b8      	str	r0, [r7, #8]
	printf("\nTIme to get data: %ld \n\r", endTime - startTime);
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4806      	ldr	r0, [pc, #24]	; (8000edc <performMeasurements+0x4c>)
 8000ec4:	f002 fa42 	bl	800334c <iprintf>

	getAllSpectralData(arrSpectra); //Reading spectral data channels and passing organized values into arrSpectra
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 fe61 	bl	8001b90 <getAllSpectralData>
	getAllTemperatureData(arrTemp); //Reading temperatures of integration cycles A to D
 8000ece:	6838      	ldr	r0, [r7, #0]
 8000ed0:	f001 f85c 	bl	8001f8c <getAllTemperatureData>
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	080052d4 	.word	0x080052d4

08000ee0 <configueLEDWait>:

//Configure LED_WAIT_OFF or Disable LED_WAIT_OFF to modify waiting time between integration cycle A to D
void configueLEDWait(bool setting)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
	uint8_t value = AS7421_readRegister(CFG_MISC); //Read existing state
 8000eea:	2038      	movs	r0, #56	; 0x38
 8000eec:	f7ff fe64 	bl	8000bb8 <AS7421_readRegister>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	73fb      	strb	r3, [r7, #15]
	if (setting)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d004      	beq.n	8000f04 <configueLEDWait+0x24>
	{
		value |= (1U << 2); //Set LED_WAIT_OFF bit (bit 2)
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	f043 0304 	orr.w	r3, r3, #4
 8000f00:	73fb      	strb	r3, [r7, #15]
 8000f02:	e003      	b.n	8000f0c <configueLEDWait+0x2c>
	}
	else
	{
		value &= ~(1U << 2); //Reset LED_WAIT_OFF bit (bit 2)
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	f023 0304 	bic.w	r3, r3, #4
 8000f0a:	73fb      	strb	r3, [r7, #15]
	}

	AS7421_writeRegister(CFG_MISC, value); //Write value to CFG_MISC register to configure the LED_WAIT_OFF bit
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	2038      	movs	r0, #56	; 0x38
 8000f12:	f7ff fe76 	bl	8000c02 <AS7421_writeRegister>
}
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <setInterLED>:

// Set Wait time (LED_WAIT) between switching on the LED and begin of integration/modulation. Wait time = 1024us * waitTime
void setInterLED(uint8_t waitTime)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
	if (waitTime > 255)
	{
        waitTime = 255; // Set to maximum value if out of range
	}

	AS7421_writeRegister(LED_WAIT, waitTime);
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	203d      	movs	r0, #61	; 0x3d
 8000f2e:	f7ff fe68 	bl	8000c02 <AS7421_writeRegister>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <configureWaitCycle>:

//Configure the waiting time between integration cycle A to D (programmable with LTF_WTIME)
void configureWaitCycle(bool setting)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4603      	mov	r3, r0
 8000f42:	71fb      	strb	r3, [r7, #7]
	uint8_t value = AS7421_readRegister(CFG_MISC); //Read existing state
 8000f44:	2038      	movs	r0, #56	; 0x38
 8000f46:	f7ff fe37 	bl	8000bb8 <AS7421_readRegister>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	73fb      	strb	r3, [r7, #15]
	if (setting)
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d004      	beq.n	8000f5e <configureWaitCycle+0x24>
	{
		value |= (1U << 1); //Set WAIT_CYCLE_ON bit (bit 1)
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	f043 0302 	orr.w	r3, r3, #2
 8000f5a:	73fb      	strb	r3, [r7, #15]
 8000f5c:	e003      	b.n	8000f66 <configureWaitCycle+0x2c>
	}
	else
	{
		value &= ~(1U << 1); //Reset WAIT_CYCLE_ON bit (bit 1)
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	f023 0302 	bic.w	r3, r3, #2
 8000f64:	73fb      	strb	r3, [r7, #15]
	}

	AS7421_writeRegister(CFG_MISC, value); //Write value to CFG_MISC register to configure the WAIT_CYCLE_ON bit
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	2038      	movs	r0, #56	; 0x38
 8000f6c:	f7ff fe49 	bl	8000c02 <AS7421_writeRegister>
}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <setWaitTime>:

//Programs the wait time (WTIME) in ms between two consecutive spectral measurements
void setWaitTime(uint32_t waitTime)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	uint32_t waitCounts = ((waitTime * F_CLKMOD) / 1000) - 1;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <setWaitTime+0x54>)
 8000f84:	fb02 f303 	mul.w	r3, r2, r3
 8000f88:	4a11      	ldr	r2, [pc, #68]	; (8000fd0 <setWaitTime+0x58>)
 8000f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8e:	099b      	lsrs	r3, r3, #6
 8000f90:	3b01      	subs	r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]

	uint8_t data[3] = {0};
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <setWaitTime+0x5c>)
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	813b      	strh	r3, [r7, #8]
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	72bb      	strb	r3, [r7, #10]
	data[0] = waitCounts & 0xFF; //low byte
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	723b      	strb	r3, [r7, #8]
	data[1] = (waitCounts >> 8) & 0xFF; //mid byte
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	0a1b      	lsrs	r3, r3, #8
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	727b      	strb	r3, [r7, #9]
	data[2] = (waitCounts >> 16) & 0xFF; //high byte
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	0c1b      	lsrs	r3, r3, #16
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	72bb      	strb	r3, [r7, #10]

	AS7421_writeRegisters(LTF_WTIME, 3, data);
 8000fb4:	f107 0308 	add.w	r3, r7, #8
 8000fb8:	461a      	mov	r2, r3
 8000fba:	2103      	movs	r1, #3
 8000fbc:	2064      	movs	r0, #100	; 0x64
 8000fbe:	f7ff fe63 	bl	8000c88 <AS7421_writeRegisters>
}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	000f4240 	.word	0x000f4240
 8000fd0:	10624dd3 	.word	0x10624dd3
 8000fd4:	080052f0 	.word	0x080052f0

08000fd8 <setLTF_CCOUNT>:

void setLTF_CCOUNT(uint16_t ccount_value)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	80fb      	strh	r3, [r7, #6]
    // Validate the input value
    if (ccount_value > 0xFFFF) {
        ccount_value = 0xFFFF;  // Cap to maximum 16-bit value
    }
	uint8_t data[2] = {0};
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	81bb      	strh	r3, [r7, #12]
	ccount_value = byteSwap16(ccount_value);
 8000fe6:	88fb      	ldrh	r3, [r7, #6]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fe5f 	bl	8000cac <byteSwap16>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	80fb      	strh	r3, [r7, #6]

	data[0] = ccount_value & 0xFF; //low byte
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	733b      	strb	r3, [r7, #12]
	data[1] = (ccount_value >> 8) & 0xFF; //high byte
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	0a1b      	lsrs	r3, r3, #8
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	737b      	strb	r3, [r7, #13]

    // Write the value to the LTF_CCOUNT register
    AS7421_writeRegisters(LTF_CCOUNT, 2, data);
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	461a      	mov	r2, r3
 8001008:	2102      	movs	r1, #2
 800100a:	203a      	movs	r0, #58	; 0x3a
 800100c:	f7ff fe3c 	bl	8000c88 <AS7421_writeRegisters>
}
 8001010:	bf00      	nop
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <configureLEDAuto>:

//Controls NIR light source during spectral measurement
void configureLEDAuto(bool mode)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
	uint8_t value = AS7421_readRegister(ENABLE); //Read existing state
 8001022:	2060      	movs	r0, #96	; 0x60
 8001024:	f7ff fdc8 	bl	8000bb8 <AS7421_readRegister>
 8001028:	4603      	mov	r3, r0
 800102a:	73fb      	strb	r3, [r7, #15]
	if (mode)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d008      	beq.n	8001044 <configureLEDAuto+0x2c>
	{
		value |= (1U << 4); //Set LED_AUTO bit (bit 4 and 5)
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	f043 0310 	orr.w	r3, r3, #16
 8001038:	73fb      	strb	r3, [r7, #15]
		value |= (1U << 5);
 800103a:	7bfb      	ldrb	r3, [r7, #15]
 800103c:	f043 0320 	orr.w	r3, r3, #32
 8001040:	73fb      	strb	r3, [r7, #15]
 8001042:	e007      	b.n	8001054 <configureLEDAuto+0x3c>
	}
	else
	{
		value &= ~(1U << 4); //Reset LED_AUTO bit (bit 4 and 5)
 8001044:	7bfb      	ldrb	r3, [r7, #15]
 8001046:	f023 0310 	bic.w	r3, r3, #16
 800104a:	73fb      	strb	r3, [r7, #15]
		value &= ~(1U << 5);
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	f023 0320 	bic.w	r3, r3, #32
 8001052:	73fb      	strb	r3, [r7, #15]
	}

	AS7421_writeRegister(ENABLE, value);
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	4619      	mov	r1, r3
 8001058:	2060      	movs	r0, #96	; 0x60
 800105a:	f7ff fdd2 	bl	8000c02 <AS7421_writeRegister>
}
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <setIntegrationTime>:

//Programs the integration time (ITIME) in ms of the LTF converter
void setIntegrationTime(uint32_t intTime)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
//	if (intTime > 256)
//	{
//		intTime = 256;
//	}
	uint32_t intCounts = ((intTime * F_CLKMOD) / 1000) - 1;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a12      	ldr	r2, [pc, #72]	; (80010bc <setIntegrationTime+0x54>)
 8001074:	fb02 f303 	mul.w	r3, r2, r3
 8001078:	4a11      	ldr	r2, [pc, #68]	; (80010c0 <setIntegrationTime+0x58>)
 800107a:	fba2 2303 	umull	r2, r3, r2, r3
 800107e:	099b      	lsrs	r3, r3, #6
 8001080:	3b01      	subs	r3, #1
 8001082:	60fb      	str	r3, [r7, #12]

	uint8_t data[3] = {0};
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <setIntegrationTime+0x5c>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	813b      	strh	r3, [r7, #8]
 800108a:	2300      	movs	r3, #0
 800108c:	72bb      	strb	r3, [r7, #10]
	data[0] = intCounts & 0xFF;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	723b      	strb	r3, [r7, #8]
	data[1] = (intCounts >> 8) & 0xFF;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	0a1b      	lsrs	r3, r3, #8
 8001098:	b2db      	uxtb	r3, r3
 800109a:	727b      	strb	r3, [r7, #9]
	data[2] = (intCounts >> 16) & 0xFF;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	0c1b      	lsrs	r3, r3, #16
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	72bb      	strb	r3, [r7, #10]

	AS7421_writeRegisters(LTF_ITIME, 3, data);
 80010a4:	f107 0308 	add.w	r3, r7, #8
 80010a8:	461a      	mov	r2, r3
 80010aa:	2103      	movs	r1, #3
 80010ac:	2061      	movs	r0, #97	; 0x61
 80010ae:	f7ff fdeb 	bl	8000c88 <AS7421_writeRegisters>
}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	000f4240 	.word	0x000f4240
 80010c0:	10624dd3 	.word	0x10624dd3
 80010c4:	080052f0 	.word	0x080052f0

080010c8 <numMeasurements>:

void numMeasurements(uint8_t counts) //specifying number of measurements
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	71fb      	strb	r3, [r7, #7]
	if (counts > 255)
	{
		counts = 255; // Set to maximum value if out of range
	}

	AS7421_writeRegister(LTF_ICOUNT, counts);
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	4619      	mov	r1, r3
 80010d6:	2069      	movs	r0, #105	; 0x69
 80010d8:	f7ff fd93 	bl	8000c02 <AS7421_writeRegister>
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <setIntegrationMode>:

//16 channels (A), 32 channels (AB), 48 channels (ABC), 64 channels (ABCD)
void setIntegrationMode(uint8_t mode)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	71fb      	strb	r3, [r7, #7]
	if (mode > INTEGRATIONCYLE_ABCD)
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d901      	bls.n	80010f8 <setIntegrationMode+0x14>
	{
		mode = INTEGRATIONCYLE_ABCD; //Limit mode to 2 bits
 80010f4:	2303      	movs	r3, #3
 80010f6:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t value = AS7421_readRegister(CFG_LTF); //Read existing state
 80010f8:	2067      	movs	r0, #103	; 0x67
 80010fa:	f7ff fd5d 	bl	8000bb8 <AS7421_readRegister>
 80010fe:	4603      	mov	r3, r0
 8001100:	73fb      	strb	r3, [r7, #15]
	value &= 0b11100111; //Clear LTF_CYCLE bits
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	f023 0318 	bic.w	r3, r3, #24
 8001108:	73fb      	strb	r3, [r7, #15]
	value |= (mode << 3); //Set LTF_CYCLE bits with user's choice
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	b25a      	sxtb	r2, r3
 8001110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001114:	4313      	orrs	r3, r2
 8001116:	b25b      	sxtb	r3, r3
 8001118:	73fb      	strb	r3, [r7, #15]

	AS7421_writeRegister(CFG_LTF, value);
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	4619      	mov	r1, r3
 800111e:	2067      	movs	r0, #103	; 0x67
 8001120:	f7ff fd6f 	bl	8000c02 <AS7421_writeRegister>
}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <configureAutozero>:


void configureAutozero(bool enable, uint8_t az_waitTime, uint8_t iteration, uint8_t cycle)
{
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	4604      	mov	r4, r0
 8001134:	4608      	mov	r0, r1
 8001136:	4611      	mov	r1, r2
 8001138:	461a      	mov	r2, r3
 800113a:	4623      	mov	r3, r4
 800113c:	71fb      	strb	r3, [r7, #7]
 800113e:	4603      	mov	r3, r0
 8001140:	71bb      	strb	r3, [r7, #6]
 8001142:	460b      	mov	r3, r1
 8001144:	717b      	strb	r3, [r7, #5]
 8001146:	4613      	mov	r3, r2
 8001148:	713b      	strb	r3, [r7, #4]
	uint8_t value = AS7421_readRegister(CFG_AZ);
 800114a:	206d      	movs	r0, #109	; 0x6d
 800114c:	f7ff fd34 	bl	8000bb8 <AS7421_readRegister>
 8001150:	4603      	mov	r3, r0
 8001152:	73fb      	strb	r3, [r7, #15]

	value |= (1U << 7); //Enable AZ_ON (bit 7)
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800115a:	73fb      	strb	r3, [r7, #15]
	if (az_waitTime > 0b11)
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	2b03      	cmp	r3, #3
 8001160:	d901      	bls.n	8001166 <configureAutozero+0x3a>
	{
		az_waitTime = 0b11;
 8001162:	2303      	movs	r3, #3
 8001164:	71bb      	strb	r3, [r7, #6]
	}
    value &= ~(0b11 << 5);  // Clear the AZ_WTIME bits (bits 5 and 6)
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800116c:	73fb      	strb	r3, [r7, #15]
	value |= (az_waitTime << 5); //Set AZ_WTIME (bit 5 and 6)
 800116e:	79bb      	ldrb	r3, [r7, #6]
 8001170:	015b      	lsls	r3, r3, #5
 8001172:	b25a      	sxtb	r2, r3
 8001174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001178:	4313      	orrs	r3, r2
 800117a:	b25b      	sxtb	r3, r3
 800117c:	73fb      	strb	r3, [r7, #15]

    value &= ~(1U << 4);  // Clear the AZ_EN bit
 800117e:	7bfb      	ldrb	r3, [r7, #15]
 8001180:	f023 0310 	bic.w	r3, r3, #16
 8001184:	73fb      	strb	r3, [r7, #15]
	value |= (enable << 4); //Set AZ_EN (bit 4)
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	b25a      	sxtb	r2, r3
 800118c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001190:	4313      	orrs	r3, r2
 8001192:	b25b      	sxtb	r3, r3
 8001194:	73fb      	strb	r3, [r7, #15]

	value &= ~(1U << 3);  // Clear the AZ_CYCLE bit
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	f023 0308 	bic.w	r3, r3, #8
 800119c:	73fb      	strb	r3, [r7, #15]
	value |= (cycle << 3); //Set AZ_CYCLE (bit 3)
 800119e:	793b      	ldrb	r3, [r7, #4]
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	b25a      	sxtb	r2, r3
 80011a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	73fb      	strb	r3, [r7, #15]

	if (iteration > 0b111)
 80011ae:	797b      	ldrb	r3, [r7, #5]
 80011b0:	2b07      	cmp	r3, #7
 80011b2:	d901      	bls.n	80011b8 <configureAutozero+0x8c>
	{
		iteration = 0b111;
 80011b4:	2307      	movs	r3, #7
 80011b6:	717b      	strb	r3, [r7, #5]
	}
    value &= ~0b111;  // Clear the iteration bits (bits 0, 1, and 2)
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	f023 0307 	bic.w	r3, r3, #7
 80011be:	73fb      	strb	r3, [r7, #15]
	value |= iteration;
 80011c0:	7bfa      	ldrb	r2, [r7, #15]
 80011c2:	797b      	ldrb	r3, [r7, #5]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	73fb      	strb	r3, [r7, #15]

    AS7421_writeRegister(CFG_AZ, value);
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	4619      	mov	r1, r3
 80011cc:	206d      	movs	r0, #109	; 0x6d
 80011ce:	f7ff fd18 	bl	8000c02 <AS7421_writeRegister>
}
 80011d2:	bf00      	nop
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd90      	pop	{r4, r7, pc}

080011da <powerup>:

// Internal oscillator enabled, potentially write 0x44 to register 0x6F, 0x20 to register 0x6E, 0x00 to register 0x6F, sensor is in idle state
void powerup()
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
	uint8_t value = AS7421_readRegister(ENABLE); //Read existing state
 80011e0:	2060      	movs	r0, #96	; 0x60
 80011e2:	f7ff fce9 	bl	8000bb8 <AS7421_readRegister>
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
	value |= (1U << 0); //Set PON (bit 0)
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	71fb      	strb	r3, [r7, #7]
    AS7421_writeRegister(ENABLE, value);
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	4619      	mov	r1, r3
 80011f6:	2060      	movs	r0, #96	; 0x60
 80011f8:	f7ff fd03 	bl	8000c02 <AS7421_writeRegister>

    //After power on reset the following commands have to be written prior accessing other registers
    AS7421_writeRegister(0x6F, 0x44);
 80011fc:	2144      	movs	r1, #68	; 0x44
 80011fe:	206f      	movs	r0, #111	; 0x6f
 8001200:	f7ff fcff 	bl	8000c02 <AS7421_writeRegister>
    AS7421_writeRegister(0x6E, 0x20);
 8001204:	2120      	movs	r1, #32
 8001206:	206e      	movs	r0, #110	; 0x6e
 8001208:	f7ff fcfb 	bl	8000c02 <AS7421_writeRegister>
    AS7421_writeRegister(0x6F, 0x00);
 800120c:	2100      	movs	r1, #0
 800120e:	206f      	movs	r0, #111	; 0x6f
 8001210:	f7ff fcf7 	bl	8000c02 <AS7421_writeRegister>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <sleep>:
	AS7421_writeRegister(CFG_MISC, value);
}

// Internal oscillator disabled, sensor is in sleep state
void sleep()
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
	uint8_t value = AS7421_readRegister(ENABLE); //Read existing state
 8001222:	2060      	movs	r0, #96	; 0x60
 8001224:	f7ff fcc8 	bl	8000bb8 <AS7421_readRegister>
 8001228:	4603      	mov	r3, r0
 800122a:	71fb      	strb	r3, [r7, #7]
	value &= ~(1U << 0); //Reset PON (bit 0)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f023 0301 	bic.w	r3, r3, #1
 8001232:	71fb      	strb	r3, [r7, #7]
    AS7421_writeRegister(ENABLE, value);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	4619      	mov	r1, r3
 8001238:	2060      	movs	r0, #96	; 0x60
 800123a:	f7ff fce2 	bl	8000c02 <AS7421_writeRegister>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <writeRAMData>:

void writeRAMData(uint8_t *smuxData, uint8_t offset)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
 800124e:	460b      	mov	r3, r1
 8001250:	70fb      	strb	r3, [r7, #3]
	if (offset == INTA_OFFSET)
 8001252:	78fb      	ldrb	r3, [r7, #3]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d136      	bne.n	80012c6 <writeRAMData+0x80>
	{
		AS7421_writeRegister(CFG_RAM_0, smuxData[0]);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4619      	mov	r1, r3
 800125e:	2040      	movs	r0, #64	; 0x40
 8001260:	f7ff fccf 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_1, smuxData[1]);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3301      	adds	r3, #1
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	4619      	mov	r1, r3
 800126c:	2041      	movs	r0, #65	; 0x41
 800126e:	f7ff fcc8 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_2, smuxData[2]);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3302      	adds	r3, #2
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	2042      	movs	r0, #66	; 0x42
 800127c:	f7ff fcc1 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_3, smuxData[3]);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3303      	adds	r3, #3
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	4619      	mov	r1, r3
 8001288:	2043      	movs	r0, #67	; 0x43
 800128a:	f7ff fcba 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_4, smuxData[4]);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3304      	adds	r3, #4
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	2044      	movs	r0, #68	; 0x44
 8001298:	f7ff fcb3 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_5, smuxData[5]);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3305      	adds	r3, #5
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	4619      	mov	r1, r3
 80012a4:	2045      	movs	r0, #69	; 0x45
 80012a6:	f7ff fcac 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_6, smuxData[6]);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3306      	adds	r3, #6
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	2046      	movs	r0, #70	; 0x46
 80012b4:	f7ff fca5 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_7, smuxData[7]);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3307      	adds	r3, #7
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	4619      	mov	r1, r3
 80012c0:	2047      	movs	r0, #71	; 0x47
 80012c2:	f7ff fc9e 	bl	8000c02 <AS7421_writeRegister>
	}

	if (offset == INTB_OFFSET)
 80012c6:	78fb      	ldrb	r3, [r7, #3]
 80012c8:	2b08      	cmp	r3, #8
 80012ca:	d136      	bne.n	800133a <writeRAMData+0xf4>
	{
		AS7421_writeRegister(CFG_RAM_8, smuxData[0]);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	2048      	movs	r0, #72	; 0x48
 80012d4:	f7ff fc95 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_9, smuxData[1]);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3301      	adds	r3, #1
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	4619      	mov	r1, r3
 80012e0:	2049      	movs	r0, #73	; 0x49
 80012e2:	f7ff fc8e 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_10, smuxData[2]);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3302      	adds	r3, #2
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	204a      	movs	r0, #74	; 0x4a
 80012f0:	f7ff fc87 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_11, smuxData[3]);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3303      	adds	r3, #3
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	4619      	mov	r1, r3
 80012fc:	204b      	movs	r0, #75	; 0x4b
 80012fe:	f7ff fc80 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_12, smuxData[4]);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3304      	adds	r3, #4
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	204c      	movs	r0, #76	; 0x4c
 800130c:	f7ff fc79 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_13, smuxData[5]);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3305      	adds	r3, #5
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	4619      	mov	r1, r3
 8001318:	204d      	movs	r0, #77	; 0x4d
 800131a:	f7ff fc72 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_14, smuxData[6]);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3306      	adds	r3, #6
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	204e      	movs	r0, #78	; 0x4e
 8001328:	f7ff fc6b 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_15, smuxData[7]);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3307      	adds	r3, #7
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	4619      	mov	r1, r3
 8001334:	204f      	movs	r0, #79	; 0x4f
 8001336:	f7ff fc64 	bl	8000c02 <AS7421_writeRegister>
	}

	if (offset == INTC_OFFSET)
 800133a:	78fb      	ldrb	r3, [r7, #3]
 800133c:	2b10      	cmp	r3, #16
 800133e:	d136      	bne.n	80013ae <writeRAMData+0x168>
	{
		AS7421_writeRegister(CFG_RAM_16, smuxData[0]);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	2050      	movs	r0, #80	; 0x50
 8001348:	f7ff fc5b 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_17, smuxData[1]);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3301      	adds	r3, #1
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	4619      	mov	r1, r3
 8001354:	2051      	movs	r0, #81	; 0x51
 8001356:	f7ff fc54 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_18, smuxData[2]);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3302      	adds	r3, #2
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	2052      	movs	r0, #82	; 0x52
 8001364:	f7ff fc4d 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_19, smuxData[3]);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3303      	adds	r3, #3
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	4619      	mov	r1, r3
 8001370:	2053      	movs	r0, #83	; 0x53
 8001372:	f7ff fc46 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_20, smuxData[4]);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3304      	adds	r3, #4
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
 800137e:	2054      	movs	r0, #84	; 0x54
 8001380:	f7ff fc3f 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_21, smuxData[5]);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3305      	adds	r3, #5
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	4619      	mov	r1, r3
 800138c:	2055      	movs	r0, #85	; 0x55
 800138e:	f7ff fc38 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_22, smuxData[6]);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3306      	adds	r3, #6
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4619      	mov	r1, r3
 800139a:	2056      	movs	r0, #86	; 0x56
 800139c:	f7ff fc31 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_23, smuxData[7]);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3307      	adds	r3, #7
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	4619      	mov	r1, r3
 80013a8:	2057      	movs	r0, #87	; 0x57
 80013aa:	f7ff fc2a 	bl	8000c02 <AS7421_writeRegister>
	}

	if (offset == INTD_OFFSET)
 80013ae:	78fb      	ldrb	r3, [r7, #3]
 80013b0:	2b18      	cmp	r3, #24
 80013b2:	d136      	bne.n	8001422 <writeRAMData+0x1dc>
	{
		AS7421_writeRegister(CFG_RAM_24, smuxData[0]);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	2058      	movs	r0, #88	; 0x58
 80013bc:	f7ff fc21 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_25, smuxData[1]);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3301      	adds	r3, #1
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	4619      	mov	r1, r3
 80013c8:	2059      	movs	r0, #89	; 0x59
 80013ca:	f7ff fc1a 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_26, smuxData[2]);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3302      	adds	r3, #2
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	4619      	mov	r1, r3
 80013d6:	205a      	movs	r0, #90	; 0x5a
 80013d8:	f7ff fc13 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_27, smuxData[3]);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3303      	adds	r3, #3
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	4619      	mov	r1, r3
 80013e4:	205b      	movs	r0, #91	; 0x5b
 80013e6:	f7ff fc0c 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_28, smuxData[4]);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3304      	adds	r3, #4
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	205c      	movs	r0, #92	; 0x5c
 80013f4:	f7ff fc05 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_29, smuxData[5]);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3305      	adds	r3, #5
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	4619      	mov	r1, r3
 8001400:	205d      	movs	r0, #93	; 0x5d
 8001402:	f7ff fbfe 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_30, smuxData[6]);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3306      	adds	r3, #6
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4619      	mov	r1, r3
 800140e:	205e      	movs	r0, #94	; 0x5e
 8001410:	f7ff fbf7 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_31, smuxData[7]);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3307      	adds	r3, #7
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	4619      	mov	r1, r3
 800141c:	205f      	movs	r0, #95	; 0x5f
 800141e:	f7ff fbf0 	bl	8000c02 <AS7421_writeRegister>
	}
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <zeroSMUX>:

// Clear RAM registers with SMUX
void zeroSMUX()
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
	uint8_t zeros[8] = {0};
 8001430:	2300      	movs	r3, #0
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
	for (int i = SMUX_A_ADDR; i <= SMUX_D_ADDR; i++)
 8001438:	230c      	movs	r3, #12
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	e01c      	b.n	8001478 <zeroSMUX+0x4e>
	{
		AS7421_writeRegister(CFG_RAM, i);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	b2db      	uxtb	r3, r3
 8001442:	4619      	mov	r1, r3
 8001444:	206a      	movs	r0, #106	; 0x6a
 8001446:	f7ff fbdc 	bl	8000c02 <AS7421_writeRegister>

		writeRAMData(zeros, 0);
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	2100      	movs	r1, #0
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fef9 	bl	8001246 <writeRAMData>
		writeRAMData(zeros, 1);
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	2101      	movs	r1, #1
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fef4 	bl	8001246 <writeRAMData>
		writeRAMData(zeros, 2);
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	2102      	movs	r1, #2
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff feef 	bl	8001246 <writeRAMData>
		writeRAMData(zeros, 3);
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	2103      	movs	r1, #3
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff feea 	bl	8001246 <writeRAMData>
	for (int i = SMUX_A_ADDR; i <= SMUX_D_ADDR; i++)
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3301      	adds	r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2b0f      	cmp	r3, #15
 800147c:	dddf      	ble.n	800143e <zeroSMUX+0x14>
	}
}
 800147e:	bf00      	nop
 8001480:	bf00      	nop
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <setSMUX>:

// Set SMUX region (A,B,C, or D) with ramOffsetAddr
void setSMUX(uint8_t ramOffsetAddr, uint8_t offset, uint8_t* configvalues)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	603a      	str	r2, [r7, #0]
 8001492:	71fb      	strb	r3, [r7, #7]
 8001494:	460b      	mov	r3, r1
 8001496:	71bb      	strb	r3, [r7, #6]
	AS7421_writeRegister(CFG_RAM, ramOffsetAddr); //Writing the ram offset(SMUX addresses) for programming the configuration into RAM
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	4619      	mov	r1, r3
 800149c:	206a      	movs	r0, #106	; 0x6a
 800149e:	f7ff fbb0 	bl	8000c02 <AS7421_writeRegister>
	writeRAMData(configvalues, offset); //Writing to respective ram registers after setting RAM offset
 80014a2:	79bb      	ldrb	r3, [r7, #6]
 80014a4:	4619      	mov	r1, r3
 80014a6:	6838      	ldr	r0, [r7, #0]
 80014a8:	f7ff fecd 	bl	8001246 <writeRAMData>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <setSMUX_A>:

// Set SMUX for integration cycle A and write to ram registers
void setSMUX_A(uint8_t* configvalues)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	setSMUX(SMUX_A_ADDR, INTA_OFFSET, configvalues);
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	2100      	movs	r1, #0
 80014c0:	200c      	movs	r0, #12
 80014c2:	f7ff ffe1 	bl	8001488 <setSMUX>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <setSMUX_B>:

// Set SMUX for integration cycle B and write to ram registers
void setSMUX_B(uint8_t* configvalues)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
	setSMUX(SMUX_B_ADDR, INTB_OFFSET, configvalues);
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	2108      	movs	r1, #8
 80014da:	200d      	movs	r0, #13
 80014dc:	f7ff ffd4 	bl	8001488 <setSMUX>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <setSMUX_C>:

// Set SMUX for integration cycle C and write to ram registers
void setSMUX_C(uint8_t* configvalues)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	setSMUX(SMUX_C_ADDR, INTC_OFFSET, configvalues);
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	2110      	movs	r1, #16
 80014f4:	200e      	movs	r0, #14
 80014f6:	f7ff ffc7 	bl	8001488 <setSMUX>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <setSMUX_D>:

// Set SMUX for integration cycle D and write to ram registers
void setSMUX_D(uint8_t* configvalues)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
	setSMUX(SMUX_D_ADDR, INTD_OFFSET, configvalues);
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	2118      	movs	r1, #24
 800150e:	200f      	movs	r0, #15
 8001510:	f7ff ffba 	bl	8001488 <setSMUX>
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <configureSMUX>:

// Configure all SMUX registers either with a specified default array of bytes or the config_values
void configureSMUX()
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
    zeroSMUX();
 8001520:	f7ff ff83 	bl	800142a <zeroSMUX>

    // Configure SMUX registers
	setSMUX_A(config_values);
 8001524:	4806      	ldr	r0, [pc, #24]	; (8001540 <configureSMUX+0x24>)
 8001526:	f7ff ffc5 	bl	80014b4 <setSMUX_A>
	setSMUX_B(config_values);
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <configureSMUX+0x24>)
 800152c:	f7ff ffcf 	bl	80014ce <setSMUX_B>
	setSMUX_C(config_values);
 8001530:	4803      	ldr	r0, [pc, #12]	; (8001540 <configureSMUX+0x24>)
 8001532:	f7ff ffd9 	bl	80014e8 <setSMUX_C>
	setSMUX_D(config_values);
 8001536:	4802      	ldr	r0, [pc, #8]	; (8001540 <configureSMUX+0x24>)
 8001538:	f7ff ffe3 	bl	8001502 <setSMUX_D>
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20000000 	.word	0x20000000

08001544 <configureGain>:

//2^x gain, i.e. gain of 6 = 2^6 = 256x
void configureGain(uint8_t gain)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
	if (gain > 8)
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2b08      	cmp	r3, #8
 8001552:	d901      	bls.n	8001558 <configureGain+0x14>
	{
		gain = 8;
 8001554:	2308      	movs	r3, #8
 8001556:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t data[8] = {gain};
 8001558:	f107 0308 	add.w	r3, r7, #8
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	723b      	strb	r3, [r7, #8]

	AS7421_writeRegister(CFG_RAM, ASETUP_AB);
 8001566:	2110      	movs	r1, #16
 8001568:	206a      	movs	r0, #106	; 0x6a
 800156a:	f7ff fb4a 	bl	8000c02 <AS7421_writeRegister>

	writeRAMData(data, 0);
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fe66 	bl	8001246 <writeRAMData>
	writeRAMData(data, 1);
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	2101      	movs	r1, #1
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fe60 	bl	8001246 <writeRAMData>
	writeRAMData(data, 2);
 8001586:	f107 0308 	add.w	r3, r7, #8
 800158a:	2102      	movs	r1, #2
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fe5a 	bl	8001246 <writeRAMData>
	writeRAMData(data, 3);
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	2103      	movs	r1, #3
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fe54 	bl	8001246 <writeRAMData>

	AS7421_writeRegister(CFG_RAM, ASETUP_CD);
 800159e:	2111      	movs	r1, #17
 80015a0:	206a      	movs	r0, #106	; 0x6a
 80015a2:	f7ff fb2e 	bl	8000c02 <AS7421_writeRegister>

	writeRAMData(data, 0);
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	2100      	movs	r1, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff fe4a 	bl	8001246 <writeRAMData>
	writeRAMData(data, 1);
 80015b2:	f107 0308 	add.w	r3, r7, #8
 80015b6:	2101      	movs	r1, #1
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fe44 	bl	8001246 <writeRAMData>
	writeRAMData(data, 2);
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	2102      	movs	r1, #2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fe3e 	bl	8001246 <writeRAMData>
	writeRAMData(data, 3);
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	2103      	movs	r1, #3
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fe38 	bl	8001246 <writeRAMData>
}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <configureLEDs>:

// Configure LED register
void configureLEDs(bool enable, uint8_t led, uint8_t current)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b084      	sub	sp, #16
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	71fb      	strb	r3, [r7, #7]
 80015e8:	460b      	mov	r3, r1
 80015ea:	71bb      	strb	r3, [r7, #6]
 80015ec:	4613      	mov	r3, r2
 80015ee:	717b      	strb	r3, [r7, #5]
	//Clearing LED config register to default
	AS7421_writeRegister(CFG_LED, 0);
 80015f0:	2100      	movs	r1, #0
 80015f2:	2068      	movs	r0, #104	; 0x68
 80015f4:	f7ff fb05 	bl	8000c02 <AS7421_writeRegister>

	uint8_t value = AS7421_readRegister(CFG_LED);
 80015f8:	2068      	movs	r0, #104	; 0x68
 80015fa:	f7ff fadd 	bl	8000bb8 <AS7421_readRegister>
 80015fe:	4603      	mov	r3, r0
 8001600:	73fb      	strb	r3, [r7, #15]

	value |= (enable << 7); //Configure SET_LED_ON (bit 7)
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	01db      	lsls	r3, r3, #7
 8001606:	b25a      	sxtb	r2, r3
 8001608:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800160c:	4313      	orrs	r3, r2
 800160e:	b25b      	sxtb	r3, r3
 8001610:	73fb      	strb	r3, [r7, #15]

	for (int i = LED_MULT_0; i <= LED_MULT_3; i++)
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	e014      	b.n	8001642 <configureLEDs+0x64>
	{
		value |= (i << 4); //Enable LED_OFFSET (bits 4 and 5)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	b25a      	sxtb	r2, r3
 800161e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001622:	4313      	orrs	r3, r2
 8001624:	b25b      	sxtb	r3, r3
 8001626:	73fb      	strb	r3, [r7, #15]
		AS7421_writeRegister(CFG_LED, value); // Setting Offset address for programming the values for LED_MULT
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	4619      	mov	r1, r3
 800162c:	2068      	movs	r0, #104	; 0x68
 800162e:	f7ff fae8 	bl	8000c02 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_LED_MULT, led);
 8001632:	79bb      	ldrb	r3, [r7, #6]
 8001634:	4619      	mov	r1, r3
 8001636:	2039      	movs	r0, #57	; 0x39
 8001638:	f7ff fae3 	bl	8000c02 <AS7421_writeRegister>
	for (int i = LED_MULT_0; i <= LED_MULT_3; i++)
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	3301      	adds	r3, #1
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	2b03      	cmp	r3, #3
 8001646:	dde7      	ble.n	8001618 <configureLEDs+0x3a>
	}

	if (current > LED_CURRENT_LIMIT_75MA)
 8001648:	797b      	ldrb	r3, [r7, #5]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d901      	bls.n	8001652 <configureLEDs+0x74>
	{
		current = LED_CURRENT_LIMIT_75MA;
 800164e:	2301      	movs	r3, #1
 8001650:	717b      	strb	r3, [r7, #5]
	}
	value |= (current << 0);
 8001652:	7bfa      	ldrb	r2, [r7, #15]
 8001654:	797b      	ldrb	r3, [r7, #5]
 8001656:	4313      	orrs	r3, r2
 8001658:	73fb      	strb	r3, [r7, #15]

	AS7421_writeRegister(CFG_LED, value);
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	4619      	mov	r1, r3
 800165e:	2068      	movs	r0, #104	; 0x68
 8001660:	f7ff facf 	bl	8000c02 <AS7421_writeRegister>
}
 8001664:	bf00      	nop
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <startMeasurements>:

// Start spectral measurement
void startMeasurements(bool withLED)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
	//Turn on LEDs
	configureLEDAuto(withLED);
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fccd 	bl	8001018 <configureLEDAuto>

	uint8_t value = AS7421_readRegister(ENABLE); //Read existing state
 800167e:	2060      	movs	r0, #96	; 0x60
 8001680:	f7ff fa9a 	bl	8000bb8 <AS7421_readRegister>
 8001684:	4603      	mov	r3, r0
 8001686:	73fb      	strb	r3, [r7, #15]

	// Power on
	value |= (1U << 0); //Set PON (bit 0)
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	73fb      	strb	r3, [r7, #15]

    //Spectral measurement enabled
    value |= (1U << 1); //Set LTF_EN (bit 1)
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	f043 0302 	orr.w	r3, r3, #2
 8001696:	73fb      	strb	r3, [r7, #15]

    //Automatic power down by temperature measurement
    value |= (1U << 2); //Set TSD_EN (bit 2)
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	f043 0304 	orr.w	r3, r3, #4
 800169e:	73fb      	strb	r3, [r7, #15]

    AS7421_writeRegister(ENABLE, value);
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	4619      	mov	r1, r3
 80016a4:	2060      	movs	r0, #96	; 0x60
 80016a6:	f7ff faac 	bl	8000c02 <AS7421_writeRegister>
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <stopMeasurements>:

void stopMeasurements()
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
	uint8_t value = AS7421_readRegister(ENABLE); //Read existing state
 80016b8:	2060      	movs	r0, #96	; 0x60
 80016ba:	f7ff fa7d 	bl	8000bb8 <AS7421_readRegister>
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]

    //Spectral measurement enabled
    value &= ~(1U << 1); //Reset LTF_EN (bit 1)
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	f023 0302 	bic.w	r3, r3, #2
 80016c8:	71fb      	strb	r3, [r7, #7]

    //Automatic power down by temperature measurement
    value &= ~(1U << 2); //Reset TSD_EN (bit 2)
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	f023 0304 	bic.w	r3, r3, #4
 80016d0:	71fb      	strb	r3, [r7, #7]

    AS7421_writeRegister(ENABLE, value);
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	4619      	mov	r1, r3
 80016d6:	2060      	movs	r0, #96	; 0x60
 80016d8:	f7ff fa93 	bl	8000c02 <AS7421_writeRegister>

	configureLEDAuto(false);
 80016dc:	2000      	movs	r0, #0
 80016de:	f7ff fc9b 	bl	8001018 <configureLEDAuto>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <measurementActive>:

//Measurement is active. New measurement cannot be started
bool measurementActive()
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
	uint8_t value = AS7421_readRegister(STATUS_6);
 80016f0:	2076      	movs	r0, #118	; 0x76
 80016f2:	f7ff fa61 	bl	8000bb8 <AS7421_readRegister>
 80016f6:	4603      	mov	r3, r0
 80016f8:	71fb      	strb	r3, [r7, #7]
    bool status = (value & (1U << 4)) != 0; // Isolate bit 4 (LTF_BUSY) and check if it's set
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	f003 0310 	and.w	r3, r3, #16
 8001700:	2b00      	cmp	r3, #0
 8001702:	bf14      	ite	ne
 8001704:	2301      	movne	r3, #1
 8001706:	2300      	moveq	r3, #0
 8001708:	71bb      	strb	r3, [r7, #6]
    return status;
 800170a:	79bb      	ldrb	r3, [r7, #6]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <getMeasurementStatus>:
 * Bit2 = TSD
 * Bit1 = AZ
 * Bit0 = ADATA
 */
bool getMeasurementStatus(uint8_t bit)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
	uint8_t status7 = AS7421_readRegister(STATUS_7);
 800171e:	2077      	movs	r0, #119	; 0x77
 8001720:	f7ff fa4a 	bl	8000bb8 <AS7421_readRegister>
 8001724:	4603      	mov	r3, r0
 8001726:	73fb      	strb	r3, [r7, #15]
	if (bit > 7)
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	2b07      	cmp	r3, #7
 800172c:	d904      	bls.n	8001738 <getMeasurementStatus+0x24>
	{
		printf("Bit is not within range of 0-7 of STATUS_7 register \n\r");
 800172e:	480a      	ldr	r0, [pc, #40]	; (8001758 <getMeasurementStatus+0x44>)
 8001730:	f001 fe0c 	bl	800334c <iprintf>
		return 0;
 8001734:	2300      	movs	r3, #0
 8001736:	e00b      	b.n	8001750 <getMeasurementStatus+0x3c>
	}
    bool status = (status7 & (1U << bit)) != 0; // Isolate a bit and check its status
 8001738:	7bfa      	ldrb	r2, [r7, #15]
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	fa22 f303 	lsr.w	r3, r2, r3
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b00      	cmp	r3, #0
 8001746:	bf14      	ite	ne
 8001748:	2301      	movne	r3, #1
 800174a:	2300      	moveq	r3, #0
 800174c:	73bb      	strb	r3, [r7, #14]
	return status;
 800174e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	080052f4 	.word	0x080052f4

0800175c <recordChannelData>:

// Helper function to record channel data
uint16_t recordChannelData(uint8_t addr)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2] = {0};
 8001766:	2300      	movs	r3, #0
 8001768:	81bb      	strh	r3, [r7, #12]
	AS7421_readRegisters(addr, 2, data);
 800176a:	f107 020c 	add.w	r2, r7, #12
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	2102      	movs	r1, #2
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fa33 	bl	8000bde <AS7421_readRegisters>

	// Combine the two bytes into a 16-bit value
	return ((uint16_t)data[1] << 8) | data[0];
 8001778:	7b7b      	ldrb	r3, [r7, #13]
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	b21a      	sxth	r2, r3
 800177e:	7b3b      	ldrb	r3, [r7, #12]
 8001780:	b21b      	sxth	r3, r3
 8001782:	4313      	orrs	r3, r2
 8001784:	b21b      	sxth	r3, r3
 8001786:	b29b      	uxth	r3, r3
}
 8001788:	4618      	mov	r0, r3
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <getChannel1>:

/* Integration Cycle A */
uint16_t getChannel1()
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	return recordChannelData(CH1_DATA);
 8001794:	2082      	movs	r0, #130	; 0x82
 8001796:	f7ff ffe1 	bl	800175c <recordChannelData>
 800179a:	4603      	mov	r3, r0
}
 800179c:	4618      	mov	r0, r3
 800179e:	bd80      	pop	{r7, pc}

080017a0 <getChannel48>:
uint16_t getChannel48()
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	return recordChannelData(CH48_DATA);
 80017a4:	20e0      	movs	r0, #224	; 0xe0
 80017a6:	f7ff ffd9 	bl	800175c <recordChannelData>
 80017aa:	4603      	mov	r3, r0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	bd80      	pop	{r7, pc}

080017b0 <getChannel2>:
uint16_t getChannel2()
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	return recordChannelData(CH2_DATA);
 80017b4:	2084      	movs	r0, #132	; 0x84
 80017b6:	f7ff ffd1 	bl	800175c <recordChannelData>
 80017ba:	4603      	mov	r3, r0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	bd80      	pop	{r7, pc}

080017c0 <getChannel34>:
uint16_t getChannel34()
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
	return recordChannelData(CH34_DATA);
 80017c4:	20c4      	movs	r0, #196	; 0xc4
 80017c6:	f7ff ffc9 	bl	800175c <recordChannelData>
 80017ca:	4603      	mov	r3, r0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <getChannel16>:
uint16_t getChannel16()
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	return recordChannelData(CH16_DATA);
 80017d4:	20a0      	movs	r0, #160	; 0xa0
 80017d6:	f7ff ffc1 	bl	800175c <recordChannelData>
 80017da:	4603      	mov	r3, r0

}
 80017dc:	4618      	mov	r0, r3
 80017de:	bd80      	pop	{r7, pc}

080017e0 <getChannel32>:
uint16_t getChannel32()
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	return recordChannelData(CH32_DATA);
 80017e4:	20c0      	movs	r0, #192	; 0xc0
 80017e6:	f7ff ffb9 	bl	800175c <recordChannelData>
 80017ea:	4603      	mov	r3, r0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <getChannel18>:
uint16_t getChannel18()
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	return recordChannelData(CH18_DATA);
 80017f4:	20a4      	movs	r0, #164	; 0xa4
 80017f6:	f7ff ffb1 	bl	800175c <recordChannelData>
 80017fa:	4603      	mov	r3, r0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	bd80      	pop	{r7, pc}

08001800 <getChannel51>:
uint16_t getChannel51()
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	return recordChannelData(CH51_DATA);
 8001804:	20e6      	movs	r0, #230	; 0xe6
 8001806:	f7ff ffa9 	bl	800175c <recordChannelData>
 800180a:	4603      	mov	r3, r0
}
 800180c:	4618      	mov	r0, r3
 800180e:	bd80      	pop	{r7, pc}

08001810 <getChannel4>:

//Next 8 PDs
uint16_t getChannel4()
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	return recordChannelData(CH4_DATA);
 8001814:	2088      	movs	r0, #136	; 0x88
 8001816:	f7ff ffa1 	bl	800175c <recordChannelData>
 800181a:	4603      	mov	r3, r0
}
 800181c:	4618      	mov	r0, r3
 800181e:	bd80      	pop	{r7, pc}

08001820 <getChannel49>:
uint16_t getChannel49()
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	return recordChannelData(CH49_DATA);
 8001824:	20e2      	movs	r0, #226	; 0xe2
 8001826:	f7ff ff99 	bl	800175c <recordChannelData>
 800182a:	4603      	mov	r3, r0
}
 800182c:	4618      	mov	r0, r3
 800182e:	bd80      	pop	{r7, pc}

08001830 <getChannel3>:
uint16_t getChannel3()
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	return recordChannelData(CH3_DATA);
 8001834:	2086      	movs	r0, #134	; 0x86
 8001836:	f7ff ff91 	bl	800175c <recordChannelData>
 800183a:	4603      	mov	r3, r0
}
 800183c:	4618      	mov	r0, r3
 800183e:	bd80      	pop	{r7, pc}

08001840 <getChannel35>:
uint16_t getChannel35()
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	return recordChannelData(CH35_DATA);
 8001844:	20c6      	movs	r0, #198	; 0xc6
 8001846:	f7ff ff89 	bl	800175c <recordChannelData>
 800184a:	4603      	mov	r3, r0

}
 800184c:	4618      	mov	r0, r3
 800184e:	bd80      	pop	{r7, pc}

08001850 <getChannel17>:
uint16_t getChannel17()
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	return recordChannelData(CH17_DATA);
 8001854:	20a2      	movs	r0, #162	; 0xa2
 8001856:	f7ff ff81 	bl	800175c <recordChannelData>
 800185a:	4603      	mov	r3, r0
}
 800185c:	4618      	mov	r0, r3
 800185e:	bd80      	pop	{r7, pc}

08001860 <getChannel33>:
uint16_t getChannel33()
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	return recordChannelData(CH33_DATA);
 8001864:	20c2      	movs	r0, #194	; 0xc2
 8001866:	f7ff ff79 	bl	800175c <recordChannelData>
 800186a:	4603      	mov	r3, r0
}
 800186c:	4618      	mov	r0, r3
 800186e:	bd80      	pop	{r7, pc}

08001870 <getChannel19>:
uint16_t getChannel19()
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
	return recordChannelData(CH19_DATA);
 8001874:	20a6      	movs	r0, #166	; 0xa6
 8001876:	f7ff ff71 	bl	800175c <recordChannelData>
 800187a:	4603      	mov	r3, r0
}
 800187c:	4618      	mov	r0, r3
 800187e:	bd80      	pop	{r7, pc}

08001880 <getChannel54>:
uint16_t getChannel54()
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
	return recordChannelData(CH54_DATA);
 8001884:	20ec      	movs	r0, #236	; 0xec
 8001886:	f7ff ff69 	bl	800175c <recordChannelData>
 800188a:	4603      	mov	r3, r0
}
 800188c:	4618      	mov	r0, r3
 800188e:	bd80      	pop	{r7, pc}

08001890 <getChannel0>:

/* Integration Cycle B */
uint16_t getChannel0()
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	return recordChannelData(CH0_DATA);
 8001894:	2080      	movs	r0, #128	; 0x80
 8001896:	f7ff ff61 	bl	800175c <recordChannelData>
 800189a:	4603      	mov	r3, r0
}
 800189c:	4618      	mov	r0, r3
 800189e:	bd80      	pop	{r7, pc}

080018a0 <getChannel13>:
uint16_t getChannel13()
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	return recordChannelData(CH13_DATA);
 80018a4:	209a      	movs	r0, #154	; 0x9a
 80018a6:	f7ff ff59 	bl	800175c <recordChannelData>
 80018aa:	4603      	mov	r3, r0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <getChannel50>:
uint16_t getChannel50()
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	return recordChannelData(CH50_DATA);
 80018b4:	20e4      	movs	r0, #228	; 0xe4
 80018b6:	f7ff ff51 	bl	800175c <recordChannelData>
 80018ba:	4603      	mov	r3, r0
}
 80018bc:	4618      	mov	r0, r3
 80018be:	bd80      	pop	{r7, pc}

080018c0 <getChannel63>:
uint16_t getChannel63()
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	return recordChannelData(CH63_DATA);
 80018c4:	20fe      	movs	r0, #254	; 0xfe
 80018c6:	f7ff ff49 	bl	800175c <recordChannelData>
 80018ca:	4603      	mov	r3, r0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <getChannel52>:
uint16_t getChannel52()
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	return recordChannelData(CH52_DATA);
 80018d4:	20e8      	movs	r0, #232	; 0xe8
 80018d6:	f7ff ff41 	bl	800175c <recordChannelData>
 80018da:	4603      	mov	r3, r0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	bd80      	pop	{r7, pc}

080018e0 <getChannel6>:
uint16_t getChannel6()
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	return recordChannelData(CH6_DATA);
 80018e4:	208c      	movs	r0, #140	; 0x8c
 80018e6:	f7ff ff39 	bl	800175c <recordChannelData>
 80018ea:	4603      	mov	r3, r0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <getChannel38>:
uint16_t getChannel38()
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	return recordChannelData(CH38_DATA);
 80018f4:	20cc      	movs	r0, #204	; 0xcc
 80018f6:	f7ff ff31 	bl	800175c <recordChannelData>
 80018fa:	4603      	mov	r3, r0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	bd80      	pop	{r7, pc}

08001900 <getChannel20>:
uint16_t getChannel20()
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	return recordChannelData(CH20_DATA);
 8001904:	20a8      	movs	r0, #168	; 0xa8
 8001906:	f7ff ff29 	bl	800175c <recordChannelData>
 800190a:	4603      	mov	r3, r0
}
 800190c:	4618      	mov	r0, r3
 800190e:	bd80      	pop	{r7, pc}

08001910 <getChannel36>:

//Next 8 PDs
uint16_t getChannel36()
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
	return recordChannelData(CH36_DATA);
 8001914:	20c8      	movs	r0, #200	; 0xc8
 8001916:	f7ff ff21 	bl	800175c <recordChannelData>
 800191a:	4603      	mov	r3, r0
}
 800191c:	4618      	mov	r0, r3
 800191e:	bd80      	pop	{r7, pc}

08001920 <getChannel22>:
uint16_t getChannel22()
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	return recordChannelData(CH22_DATA);
 8001924:	20ac      	movs	r0, #172	; 0xac
 8001926:	f7ff ff19 	bl	800175c <recordChannelData>
 800192a:	4603      	mov	r3, r0
}
 800192c:	4618      	mov	r0, r3
 800192e:	bd80      	pop	{r7, pc}

08001930 <getChannel55>:
uint16_t getChannel55()
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	return recordChannelData(CH55_DATA);
 8001934:	20ee      	movs	r0, #238	; 0xee
 8001936:	f7ff ff11 	bl	800175c <recordChannelData>
 800193a:	4603      	mov	r3, r0
}
 800193c:	4618      	mov	r0, r3
 800193e:	bd80      	pop	{r7, pc}

08001940 <getChannel5>:
uint16_t getChannel5()
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
	return recordChannelData(CH5_DATA);
 8001944:	208a      	movs	r0, #138	; 0x8a
 8001946:	f7ff ff09 	bl	800175c <recordChannelData>
 800194a:	4603      	mov	r3, r0
}
 800194c:	4618      	mov	r0, r3
 800194e:	bd80      	pop	{r7, pc}

08001950 <getChannel53>:
uint16_t getChannel53()
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
	return recordChannelData(CH53_DATA);
 8001954:	20ea      	movs	r0, #234	; 0xea
 8001956:	f7ff ff01 	bl	800175c <recordChannelData>
 800195a:	4603      	mov	r3, r0
}
 800195c:	4618      	mov	r0, r3
 800195e:	bd80      	pop	{r7, pc}

08001960 <getChannel7>:
uint16_t getChannel7()
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	return recordChannelData(CH7_DATA);
 8001964:	208e      	movs	r0, #142	; 0x8e
 8001966:	f7ff fef9 	bl	800175c <recordChannelData>
 800196a:	4603      	mov	r3, r0
}
 800196c:	4618      	mov	r0, r3
 800196e:	bd80      	pop	{r7, pc}

08001970 <getChannel39>:
uint16_t getChannel39()
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	return recordChannelData(CH39_DATA);
 8001974:	20ce      	movs	r0, #206	; 0xce
 8001976:	f7ff fef1 	bl	800175c <recordChannelData>
 800197a:	4603      	mov	r3, r0
}
 800197c:	4618      	mov	r0, r3
 800197e:	bd80      	pop	{r7, pc}

08001980 <getChannel21>:
uint16_t getChannel21()
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
	return recordChannelData(CH21_DATA);
 8001984:	20aa      	movs	r0, #170	; 0xaa
 8001986:	f7ff fee9 	bl	800175c <recordChannelData>
 800198a:	4603      	mov	r3, r0
}
 800198c:	4618      	mov	r0, r3
 800198e:	bd80      	pop	{r7, pc}

08001990 <getChannel37>:

/* Integration Cycle C */
uint16_t getChannel37()
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	return recordChannelData(CH37_DATA);
 8001994:	20ca      	movs	r0, #202	; 0xca
 8001996:	f7ff fee1 	bl	800175c <recordChannelData>
 800199a:	4603      	mov	r3, r0
}
 800199c:	4618      	mov	r0, r3
 800199e:	bd80      	pop	{r7, pc}

080019a0 <getChannel23>:
uint16_t getChannel23()
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	return recordChannelData(CH23_DATA);
 80019a4:	20ae      	movs	r0, #174	; 0xae
 80019a6:	f7ff fed9 	bl	800175c <recordChannelData>
 80019aa:	4603      	mov	r3, r0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <getChannel40>:
uint16_t getChannel40()
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	return recordChannelData(CH40_DATA);
 80019b4:	20d0      	movs	r0, #208	; 0xd0
 80019b6:	f7ff fed1 	bl	800175c <recordChannelData>
 80019ba:	4603      	mov	r3, r0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	bd80      	pop	{r7, pc}

080019c0 <getChannel26>:
uint16_t getChannel26()
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	return recordChannelData(CH26_DATA);
 80019c4:	20b4      	movs	r0, #180	; 0xb4
 80019c6:	f7ff fec9 	bl	800175c <recordChannelData>
 80019ca:	4603      	mov	r3, r0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <getChannel42>:
uint16_t getChannel42()
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	return recordChannelData(CH42_DATA);
 80019d4:	20d4      	movs	r0, #212	; 0xd4
 80019d6:	f7ff fec1 	bl	800175c <recordChannelData>
 80019da:	4603      	mov	r3, r0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	bd80      	pop	{r7, pc}

080019e0 <getChannel24>:
uint16_t getChannel24()
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	return recordChannelData(CH24_DATA);
 80019e4:	20b0      	movs	r0, #176	; 0xb0
 80019e6:	f7ff feb9 	bl	800175c <recordChannelData>
 80019ea:	4603      	mov	r3, r0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <getChannel56>:
uint16_t getChannel56()
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	return recordChannelData(CH56_DATA);
 80019f4:	20f0      	movs	r0, #240	; 0xf0
 80019f6:	f7ff feb1 	bl	800175c <recordChannelData>
 80019fa:	4603      	mov	r3, r0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <getChannel10>:
uint16_t getChannel10()
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
	return recordChannelData(CH10_DATA);
 8001a04:	2094      	movs	r0, #148	; 0x94
 8001a06:	f7ff fea9 	bl	800175c <recordChannelData>
 8001a0a:	4603      	mov	r3, r0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <getChannel58>:

//Next 8 PDs
uint16_t getChannel58()
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
	return recordChannelData(CH58_DATA);
 8001a14:	20f4      	movs	r0, #244	; 0xf4
 8001a16:	f7ff fea1 	bl	800175c <recordChannelData>
 8001a1a:	4603      	mov	r3, r0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <getChannel8>:
uint16_t getChannel8()
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
	return recordChannelData(CH8_DATA);
 8001a24:	2090      	movs	r0, #144	; 0x90
 8001a26:	f7ff fe99 	bl	800175c <recordChannelData>
 8001a2a:	4603      	mov	r3, r0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <getChannel41>:
uint16_t getChannel41()
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	return recordChannelData(CH41_DATA);
 8001a34:	20d2      	movs	r0, #210	; 0xd2
 8001a36:	f7ff fe91 	bl	800175c <recordChannelData>
 8001a3a:	4603      	mov	r3, r0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <getChannel27>:
uint16_t getChannel27()
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	return recordChannelData(CH27_DATA);
 8001a44:	20b6      	movs	r0, #182	; 0xb6
 8001a46:	f7ff fe89 	bl	800175c <recordChannelData>
 8001a4a:	4603      	mov	r3, r0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <getChannel43>:
uint16_t getChannel43()
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
	return recordChannelData(CH43_DATA);
 8001a54:	20d6      	movs	r0, #214	; 0xd6
 8001a56:	f7ff fe81 	bl	800175c <recordChannelData>
 8001a5a:	4603      	mov	r3, r0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <getChannel25>:
uint16_t getChannel25()
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
	return recordChannelData(CH25_DATA);
 8001a64:	20b2      	movs	r0, #178	; 0xb2
 8001a66:	f7ff fe79 	bl	800175c <recordChannelData>
 8001a6a:	4603      	mov	r3, r0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <getChannel57>:
uint16_t getChannel57()
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
	return recordChannelData(CH57_DATA);
 8001a74:	20f2      	movs	r0, #242	; 0xf2
 8001a76:	f7ff fe71 	bl	800175c <recordChannelData>
 8001a7a:	4603      	mov	r3, r0
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <getChannel11>:
uint16_t getChannel11()
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	return recordChannelData(CH11_DATA);
 8001a84:	2096      	movs	r0, #150	; 0x96
 8001a86:	f7ff fe69 	bl	800175c <recordChannelData>
 8001a8a:	4603      	mov	r3, r0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <getChannel59>:

/* Integration Cycle D */
uint16_t getChannel59()
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	return recordChannelData(CH59_DATA);
 8001a94:	20f6      	movs	r0, #246	; 0xf6
 8001a96:	f7ff fe61 	bl	800175c <recordChannelData>
 8001a9a:	4603      	mov	r3, r0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <getChannel9>:
uint16_t getChannel9()
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
	return recordChannelData(CH9_DATA);
 8001aa4:	2092      	movs	r0, #146	; 0x92
 8001aa6:	f7ff fe59 	bl	800175c <recordChannelData>
 8001aaa:	4603      	mov	r3, r0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <getChannel44>:
uint16_t getChannel44()
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	return recordChannelData(CH44_DATA);
 8001ab4:	20d8      	movs	r0, #216	; 0xd8
 8001ab6:	f7ff fe51 	bl	800175c <recordChannelData>
 8001aba:	4603      	mov	r3, r0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <getChannel30>:
uint16_t getChannel30()
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
	return recordChannelData(CH30_DATA);
 8001ac4:	20bc      	movs	r0, #188	; 0xbc
 8001ac6:	f7ff fe49 	bl	800175c <recordChannelData>
 8001aca:	4603      	mov	r3, r0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <getChannel46>:
uint16_t getChannel46()
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	return recordChannelData(CH46_DATA);
 8001ad4:	20dc      	movs	r0, #220	; 0xdc
 8001ad6:	f7ff fe41 	bl	800175c <recordChannelData>
 8001ada:	4603      	mov	r3, r0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <getChannel28>:
uint16_t getChannel28()
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
	return recordChannelData(CH28_DATA);
 8001ae4:	20b8      	movs	r0, #184	; 0xb8
 8001ae6:	f7ff fe39 	bl	800175c <recordChannelData>
 8001aea:	4603      	mov	r3, r0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <getChannel60>:
uint16_t getChannel60()
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	return recordChannelData(CH60_DATA);
 8001af4:	20f8      	movs	r0, #248	; 0xf8
 8001af6:	f7ff fe31 	bl	800175c <recordChannelData>
 8001afa:	4603      	mov	r3, r0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <getChannel14>:
uint16_t getChannel14()
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
	return recordChannelData(CH14_DATA);
 8001b04:	209c      	movs	r0, #156	; 0x9c
 8001b06:	f7ff fe29 	bl	800175c <recordChannelData>
 8001b0a:	4603      	mov	r3, r0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <getChannel62>:

//Next 8 PDs
uint16_t getChannel62()
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	return recordChannelData(CH62_DATA);
 8001b14:	20fc      	movs	r0, #252	; 0xfc
 8001b16:	f7ff fe21 	bl	800175c <recordChannelData>
 8001b1a:	4603      	mov	r3, r0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <getChannel12>:
uint16_t getChannel12()
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
	return recordChannelData(CH12_DATA);
 8001b24:	2098      	movs	r0, #152	; 0x98
 8001b26:	f7ff fe19 	bl	800175c <recordChannelData>
 8001b2a:	4603      	mov	r3, r0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <getChannel45>:
uint16_t getChannel45()
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	return recordChannelData(CH45_DATA);
 8001b34:	20da      	movs	r0, #218	; 0xda
 8001b36:	f7ff fe11 	bl	800175c <recordChannelData>
 8001b3a:	4603      	mov	r3, r0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <getChannel31>:
uint16_t getChannel31()
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
	return recordChannelData(CH31_DATA);
 8001b44:	20be      	movs	r0, #190	; 0xbe
 8001b46:	f7ff fe09 	bl	800175c <recordChannelData>
 8001b4a:	4603      	mov	r3, r0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <getChannel47>:
uint16_t getChannel47()
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	return recordChannelData(CH47_DATA);
 8001b54:	20de      	movs	r0, #222	; 0xde
 8001b56:	f7ff fe01 	bl	800175c <recordChannelData>
 8001b5a:	4603      	mov	r3, r0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <getChannel29>:
uint16_t getChannel29()
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	return recordChannelData(CH29_DATA);
 8001b64:	20ba      	movs	r0, #186	; 0xba
 8001b66:	f7ff fdf9 	bl	800175c <recordChannelData>
 8001b6a:	4603      	mov	r3, r0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <getChannel61>:
uint16_t getChannel61()
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	return recordChannelData(CH61_DATA);
 8001b74:	20fa      	movs	r0, #250	; 0xfa
 8001b76:	f7ff fdf1 	bl	800175c <recordChannelData>
 8001b7a:	4603      	mov	r3, r0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <getChannel15>:
uint16_t getChannel15()
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	return recordChannelData(CH15_DATA);
 8001b84:	209e      	movs	r0, #158	; 0x9e
 8001b86:	f7ff fde9 	bl	800175c <recordChannelData>
 8001b8a:	4603      	mov	r3, r0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <getAllSpectralData>:


void getAllSpectralData(uint16_t arr[CHANNELSIZE])
{
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
	/* Integration Cycle A */
	arr[0] = getChannel1();
 8001b98:	f7ff fdfa 	bl	8001790 <getChannel1>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	801a      	strh	r2, [r3, #0]
	arr[1] = getChannel48();
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	1c9c      	adds	r4, r3, #2
 8001ba8:	f7ff fdfa 	bl	80017a0 <getChannel48>
 8001bac:	4603      	mov	r3, r0
 8001bae:	8023      	strh	r3, [r4, #0]
	arr[2] = getChannel2();
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	1d1c      	adds	r4, r3, #4
 8001bb4:	f7ff fdfc 	bl	80017b0 <getChannel2>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	8023      	strh	r3, [r4, #0]
	arr[3] = getChannel34();
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	1d9c      	adds	r4, r3, #6
 8001bc0:	f7ff fdfe 	bl	80017c0 <getChannel34>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	8023      	strh	r3, [r4, #0]
	arr[4] = getChannel16();
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f103 0408 	add.w	r4, r3, #8
 8001bce:	f7ff fdff 	bl	80017d0 <getChannel16>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	8023      	strh	r3, [r4, #0]
	arr[5] = getChannel32();
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f103 040a 	add.w	r4, r3, #10
 8001bdc:	f7ff fe00 	bl	80017e0 <getChannel32>
 8001be0:	4603      	mov	r3, r0
 8001be2:	8023      	strh	r3, [r4, #0]
	arr[6] = getChannel18();
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f103 040c 	add.w	r4, r3, #12
 8001bea:	f7ff fe01 	bl	80017f0 <getChannel18>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	8023      	strh	r3, [r4, #0]
	arr[7] = getChannel51();
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	f103 040e 	add.w	r4, r3, #14
 8001bf8:	f7ff fe02 	bl	8001800 <getChannel51>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	8023      	strh	r3, [r4, #0]

	arr[8] = getChannel4();
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f103 0410 	add.w	r4, r3, #16
 8001c06:	f7ff fe03 	bl	8001810 <getChannel4>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	8023      	strh	r3, [r4, #0]
	arr[9] = getChannel49();
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f103 0412 	add.w	r4, r3, #18
 8001c14:	f7ff fe04 	bl	8001820 <getChannel49>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	8023      	strh	r3, [r4, #0]
	arr[10] = getChannel3();
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f103 0414 	add.w	r4, r3, #20
 8001c22:	f7ff fe05 	bl	8001830 <getChannel3>
 8001c26:	4603      	mov	r3, r0
 8001c28:	8023      	strh	r3, [r4, #0]
	arr[11] = getChannel35();
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f103 0416 	add.w	r4, r3, #22
 8001c30:	f7ff fe06 	bl	8001840 <getChannel35>
 8001c34:	4603      	mov	r3, r0
 8001c36:	8023      	strh	r3, [r4, #0]
	arr[12] = getChannel17();
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f103 0418 	add.w	r4, r3, #24
 8001c3e:	f7ff fe07 	bl	8001850 <getChannel17>
 8001c42:	4603      	mov	r3, r0
 8001c44:	8023      	strh	r3, [r4, #0]
	arr[13] = getChannel33();
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f103 041a 	add.w	r4, r3, #26
 8001c4c:	f7ff fe08 	bl	8001860 <getChannel33>
 8001c50:	4603      	mov	r3, r0
 8001c52:	8023      	strh	r3, [r4, #0]
	arr[14] = getChannel19();
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f103 041c 	add.w	r4, r3, #28
 8001c5a:	f7ff fe09 	bl	8001870 <getChannel19>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	8023      	strh	r3, [r4, #0]
	arr[15] = getChannel54();
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f103 041e 	add.w	r4, r3, #30
 8001c68:	f7ff fe0a 	bl	8001880 <getChannel54>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	8023      	strh	r3, [r4, #0]

	/* Integration Cycle B */
	arr[16] = getChannel0();
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f103 0420 	add.w	r4, r3, #32
 8001c76:	f7ff fe0b 	bl	8001890 <getChannel0>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	8023      	strh	r3, [r4, #0]
	arr[17] = getChannel13();
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f103 0422 	add.w	r4, r3, #34	; 0x22
 8001c84:	f7ff fe0c 	bl	80018a0 <getChannel13>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	8023      	strh	r3, [r4, #0]
	arr[18] = getChannel50();
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001c92:	f7ff fe0d 	bl	80018b0 <getChannel50>
 8001c96:	4603      	mov	r3, r0
 8001c98:	8023      	strh	r3, [r4, #0]
	arr[19] = getChannel63();
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f103 0426 	add.w	r4, r3, #38	; 0x26
 8001ca0:	f7ff fe0e 	bl	80018c0 <getChannel63>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	8023      	strh	r3, [r4, #0]
	arr[20] = getChannel52();
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001cae:	f7ff fe0f 	bl	80018d0 <getChannel52>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	8023      	strh	r3, [r4, #0]
	arr[21] = getChannel6();
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f103 042a 	add.w	r4, r3, #42	; 0x2a
 8001cbc:	f7ff fe10 	bl	80018e0 <getChannel6>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	8023      	strh	r3, [r4, #0]
	arr[22] = getChannel38();
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8001cca:	f7ff fe11 	bl	80018f0 <getChannel38>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	8023      	strh	r3, [r4, #0]
	arr[23] = getChannel20();
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f103 042e 	add.w	r4, r3, #46	; 0x2e
 8001cd8:	f7ff fe12 	bl	8001900 <getChannel20>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	8023      	strh	r3, [r4, #0]

	arr[24] = getChannel36();
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001ce6:	f7ff fe13 	bl	8001910 <getChannel36>
 8001cea:	4603      	mov	r3, r0
 8001cec:	8023      	strh	r3, [r4, #0]
	arr[25] = getChannel22();
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001cf4:	f7ff fe14 	bl	8001920 <getChannel22>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	8023      	strh	r3, [r4, #0]
	arr[26] = getChannel55();
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8001d02:	f7ff fe15 	bl	8001930 <getChannel55>
 8001d06:	4603      	mov	r3, r0
 8001d08:	8023      	strh	r3, [r4, #0]
	arr[27] = getChannel5();
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f103 0436 	add.w	r4, r3, #54	; 0x36
 8001d10:	f7ff fe16 	bl	8001940 <getChannel5>
 8001d14:	4603      	mov	r3, r0
 8001d16:	8023      	strh	r3, [r4, #0]
	arr[28] = getChannel53();
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8001d1e:	f7ff fe17 	bl	8001950 <getChannel53>
 8001d22:	4603      	mov	r3, r0
 8001d24:	8023      	strh	r3, [r4, #0]
	arr[29] = getChannel7();
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f103 043a 	add.w	r4, r3, #58	; 0x3a
 8001d2c:	f7ff fe18 	bl	8001960 <getChannel7>
 8001d30:	4603      	mov	r3, r0
 8001d32:	8023      	strh	r3, [r4, #0]
	arr[30] = getChannel39();
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8001d3a:	f7ff fe19 	bl	8001970 <getChannel39>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	8023      	strh	r3, [r4, #0]
	arr[31] = getChannel21();
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f103 043e 	add.w	r4, r3, #62	; 0x3e
 8001d48:	f7ff fe1a 	bl	8001980 <getChannel21>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	8023      	strh	r3, [r4, #0]

	/* Integration Cycle C */
	arr[32] = getChannel37();
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8001d56:	f7ff fe1b 	bl	8001990 <getChannel37>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	8023      	strh	r3, [r4, #0]
	arr[33] = getChannel23();
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f103 0442 	add.w	r4, r3, #66	; 0x42
 8001d64:	f7ff fe1c 	bl	80019a0 <getChannel23>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	8023      	strh	r3, [r4, #0]
	arr[34] = getChannel40();
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f103 0444 	add.w	r4, r3, #68	; 0x44
 8001d72:	f7ff fe1d 	bl	80019b0 <getChannel40>
 8001d76:	4603      	mov	r3, r0
 8001d78:	8023      	strh	r3, [r4, #0]
	arr[35] = getChannel26();
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f103 0446 	add.w	r4, r3, #70	; 0x46
 8001d80:	f7ff fe1e 	bl	80019c0 <getChannel26>
 8001d84:	4603      	mov	r3, r0
 8001d86:	8023      	strh	r3, [r4, #0]
	arr[36] = getChannel42();
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8001d8e:	f7ff fe1f 	bl	80019d0 <getChannel42>
 8001d92:	4603      	mov	r3, r0
 8001d94:	8023      	strh	r3, [r4, #0]
	arr[37] = getChannel24();
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f103 044a 	add.w	r4, r3, #74	; 0x4a
 8001d9c:	f7ff fe20 	bl	80019e0 <getChannel24>
 8001da0:	4603      	mov	r3, r0
 8001da2:	8023      	strh	r3, [r4, #0]
	arr[38] = getChannel56();
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8001daa:	f7ff fe21 	bl	80019f0 <getChannel56>
 8001dae:	4603      	mov	r3, r0
 8001db0:	8023      	strh	r3, [r4, #0]
	arr[39] = getChannel10();
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f103 044e 	add.w	r4, r3, #78	; 0x4e
 8001db8:	f7ff fe22 	bl	8001a00 <getChannel10>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	8023      	strh	r3, [r4, #0]

	arr[40] = getChannel58();
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8001dc6:	f7ff fe23 	bl	8001a10 <getChannel58>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	8023      	strh	r3, [r4, #0]
	arr[41] = getChannel8();
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f103 0452 	add.w	r4, r3, #82	; 0x52
 8001dd4:	f7ff fe24 	bl	8001a20 <getChannel8>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	8023      	strh	r3, [r4, #0]
	arr[42] = getChannel41();
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8001de2:	f7ff fe25 	bl	8001a30 <getChannel41>
 8001de6:	4603      	mov	r3, r0
 8001de8:	8023      	strh	r3, [r4, #0]
	arr[43] = getChannel27();
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f103 0456 	add.w	r4, r3, #86	; 0x56
 8001df0:	f7ff fe26 	bl	8001a40 <getChannel27>
 8001df4:	4603      	mov	r3, r0
 8001df6:	8023      	strh	r3, [r4, #0]
	arr[44] = getChannel43();
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f103 0458 	add.w	r4, r3, #88	; 0x58
 8001dfe:	f7ff fe27 	bl	8001a50 <getChannel43>
 8001e02:	4603      	mov	r3, r0
 8001e04:	8023      	strh	r3, [r4, #0]
	arr[45] = getChannel25();
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f103 045a 	add.w	r4, r3, #90	; 0x5a
 8001e0c:	f7ff fe28 	bl	8001a60 <getChannel25>
 8001e10:	4603      	mov	r3, r0
 8001e12:	8023      	strh	r3, [r4, #0]
	arr[46] = getChannel57();
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8001e1a:	f7ff fe29 	bl	8001a70 <getChannel57>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	8023      	strh	r3, [r4, #0]
	arr[47] = getChannel11();
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f103 045e 	add.w	r4, r3, #94	; 0x5e
 8001e28:	f7ff fe2a 	bl	8001a80 <getChannel11>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	8023      	strh	r3, [r4, #0]

	/* Integration Cycle D */
	arr[48] = getChannel59();
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8001e36:	f7ff fe2b 	bl	8001a90 <getChannel59>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	8023      	strh	r3, [r4, #0]
	arr[49] = getChannel9();
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f103 0462 	add.w	r4, r3, #98	; 0x62
 8001e44:	f7ff fe2c 	bl	8001aa0 <getChannel9>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	8023      	strh	r3, [r4, #0]
	arr[50] = getChannel44();
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8001e52:	f7ff fe2d 	bl	8001ab0 <getChannel44>
 8001e56:	4603      	mov	r3, r0
 8001e58:	8023      	strh	r3, [r4, #0]
	arr[51] = getChannel30();
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f103 0466 	add.w	r4, r3, #102	; 0x66
 8001e60:	f7ff fe2e 	bl	8001ac0 <getChannel30>
 8001e64:	4603      	mov	r3, r0
 8001e66:	8023      	strh	r3, [r4, #0]
	arr[52] = getChannel46();
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8001e6e:	f7ff fe2f 	bl	8001ad0 <getChannel46>
 8001e72:	4603      	mov	r3, r0
 8001e74:	8023      	strh	r3, [r4, #0]
	arr[53] = getChannel28();
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f103 046a 	add.w	r4, r3, #106	; 0x6a
 8001e7c:	f7ff fe30 	bl	8001ae0 <getChannel28>
 8001e80:	4603      	mov	r3, r0
 8001e82:	8023      	strh	r3, [r4, #0]
	arr[54] = getChannel60();
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8001e8a:	f7ff fe31 	bl	8001af0 <getChannel60>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	8023      	strh	r3, [r4, #0]
	arr[55] = getChannel14();
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 8001e98:	f7ff fe32 	bl	8001b00 <getChannel14>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	8023      	strh	r3, [r4, #0]

	arr[56] = getChannel62();
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8001ea6:	f7ff fe33 	bl	8001b10 <getChannel62>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	8023      	strh	r3, [r4, #0]
	arr[57] = getChannel12();
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f103 0472 	add.w	r4, r3, #114	; 0x72
 8001eb4:	f7ff fe34 	bl	8001b20 <getChannel12>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	8023      	strh	r3, [r4, #0]
	arr[58] = getChannel45();
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f103 0474 	add.w	r4, r3, #116	; 0x74
 8001ec2:	f7ff fe35 	bl	8001b30 <getChannel45>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	8023      	strh	r3, [r4, #0]
	arr[59] = getChannel31();
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f103 0476 	add.w	r4, r3, #118	; 0x76
 8001ed0:	f7ff fe36 	bl	8001b40 <getChannel31>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	8023      	strh	r3, [r4, #0]
	arr[60] = getChannel47();
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8001ede:	f7ff fe37 	bl	8001b50 <getChannel47>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	8023      	strh	r3, [r4, #0]
	arr[61] = getChannel29();
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f103 047a 	add.w	r4, r3, #122	; 0x7a
 8001eec:	f7ff fe38 	bl	8001b60 <getChannel29>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	8023      	strh	r3, [r4, #0]
	arr[62] = getChannel61();
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8001efa:	f7ff fe39 	bl	8001b70 <getChannel61>
 8001efe:	4603      	mov	r3, r0
 8001f00:	8023      	strh	r3, [r4, #0]
	arr[63] = getChannel15();
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f103 047e 	add.w	r4, r3, #126	; 0x7e
 8001f08:	f7ff fe3a 	bl	8001b80 <getChannel15>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	8023      	strh	r3, [r4, #0]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd90      	pop	{r4, r7, pc}

08001f18 <recordTemperatures>:
//}


// Helper function to record temperature data
uint16_t recordTemperatures(uint8_t addr)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2] = {0};
 8001f22:	2300      	movs	r3, #0
 8001f24:	81bb      	strh	r3, [r7, #12]
	AS7421_readRegisters(addr, 2, data);
 8001f26:	f107 020c 	add.w	r2, r7, #12
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	2102      	movs	r1, #2
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fe55 	bl	8000bde <AS7421_readRegisters>

	// Combine the two bytes into a 16-bit value
	return ((uint16_t)data[1] << 8) | data[0];
 8001f34:	7b7b      	ldrb	r3, [r7, #13]
 8001f36:	021b      	lsls	r3, r3, #8
 8001f38:	b21a      	sxth	r2, r3
 8001f3a:	7b3b      	ldrb	r3, [r7, #12]
 8001f3c:	b21b      	sxth	r3, r3
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	b29b      	uxth	r3, r3
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <getTemp_IntA>:

uint16_t getTemp_IntA()
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
	return recordTemperatures(TEMPA);
 8001f50:	2078      	movs	r0, #120	; 0x78
 8001f52:	f7ff ffe1 	bl	8001f18 <recordTemperatures>
 8001f56:	4603      	mov	r3, r0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <getTemp_IntB>:
uint16_t getTemp_IntB()
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
	return recordTemperatures(TEMPB);
 8001f60:	207a      	movs	r0, #122	; 0x7a
 8001f62:	f7ff ffd9 	bl	8001f18 <recordTemperatures>
 8001f66:	4603      	mov	r3, r0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <getTemp_IntC>:
uint16_t getTemp_IntC()
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
	return recordTemperatures(TEMPC);
 8001f70:	207c      	movs	r0, #124	; 0x7c
 8001f72:	f7ff ffd1 	bl	8001f18 <recordTemperatures>
 8001f76:	4603      	mov	r3, r0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <getTemp_IntD>:
uint16_t getTemp_IntD()
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
	return recordTemperatures(TEMPD);
 8001f80:	207e      	movs	r0, #126	; 0x7e
 8001f82:	f7ff ffc9 	bl	8001f18 <recordTemperatures>
 8001f86:	4603      	mov	r3, r0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <getAllTemperatureData>:

void getAllTemperatureData(uint16_t arr[TEMPSIZE])
{
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	arr[0] = getTemp_IntA();
 8001f94:	f7ff ffda 	bl	8001f4c <getTemp_IntA>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	461a      	mov	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	801a      	strh	r2, [r3, #0]
	arr[1] = getTemp_IntB();
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	1c9c      	adds	r4, r3, #2
 8001fa4:	f7ff ffda 	bl	8001f5c <getTemp_IntB>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	8023      	strh	r3, [r4, #0]
	arr[2] = getTemp_IntC();
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	1d1c      	adds	r4, r3, #4
 8001fb0:	f7ff ffdc 	bl	8001f6c <getTemp_IntC>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	8023      	strh	r3, [r4, #0]
	arr[3] = getTemp_IntD();
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	1d9c      	adds	r4, r3, #6
 8001fbc:	f7ff ffde 	bl	8001f7c <getTemp_IntD>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	8023      	strh	r3, [r4, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd90      	pop	{r4, r7, pc}

08001fcc <I2C1_Init>:
//#define	SR1_BTF					(1U<<2)
//#define SR1_AF					(1U<<10)


void I2C1_Init(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOB*/
	RCC->AHB1ENR |= GPIOBEN;
 8001fd0:	4b4d      	ldr	r3, [pc, #308]	; (8002108 <I2C1_Init+0x13c>)
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd4:	4a4c      	ldr	r2, [pc, #304]	; (8002108 <I2C1_Init+0x13c>)
 8001fd6:	f043 0302 	orr.w	r3, r3, #2
 8001fda:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PB6 and PB7 mode to alternate function*/
	GPIOB->MODER &= ~(1U<<12);
 8001fdc:	4b4b      	ldr	r3, [pc, #300]	; (800210c <I2C1_Init+0x140>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a4a      	ldr	r2, [pc, #296]	; (800210c <I2C1_Init+0x140>)
 8001fe2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fe6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<13);
 8001fe8:	4b48      	ldr	r3, [pc, #288]	; (800210c <I2C1_Init+0x140>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a47      	ldr	r2, [pc, #284]	; (800210c <I2C1_Init+0x140>)
 8001fee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ff2:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~(1U<<14);
 8001ff4:	4b45      	ldr	r3, [pc, #276]	; (800210c <I2C1_Init+0x140>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a44      	ldr	r2, [pc, #272]	; (800210c <I2C1_Init+0x140>)
 8001ffa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ffe:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<15);
 8002000:	4b42      	ldr	r3, [pc, #264]	; (800210c <I2C1_Init+0x140>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a41      	ldr	r2, [pc, #260]	; (800210c <I2C1_Init+0x140>)
 8002006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800200a:	6013      	str	r3, [r2, #0]

	/*Set PB6 and PB7 output type to  open drain*/
	GPIOB->OTYPER |= (1U<<6);
 800200c:	4b3f      	ldr	r3, [pc, #252]	; (800210c <I2C1_Init+0x140>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	4a3e      	ldr	r2, [pc, #248]	; (800210c <I2C1_Init+0x140>)
 8002012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002016:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (1U<<7);
 8002018:	4b3c      	ldr	r3, [pc, #240]	; (800210c <I2C1_Init+0x140>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	4a3b      	ldr	r2, [pc, #236]	; (800210c <I2C1_Init+0x140>)
 800201e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002022:	6053      	str	r3, [r2, #4]

	/*Enable Pull-up for PB6 and PB7*/
	GPIOB->PUPDR |= (1U<<12);
 8002024:	4b39      	ldr	r3, [pc, #228]	; (800210c <I2C1_Init+0x140>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4a38      	ldr	r2, [pc, #224]	; (800210c <I2C1_Init+0x140>)
 800202a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800202e:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<13);
 8002030:	4b36      	ldr	r3, [pc, #216]	; (800210c <I2C1_Init+0x140>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4a35      	ldr	r2, [pc, #212]	; (800210c <I2C1_Init+0x140>)
 8002036:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800203a:	60d3      	str	r3, [r2, #12]

	GPIOB->PUPDR |= (1U<<14);
 800203c:	4b33      	ldr	r3, [pc, #204]	; (800210c <I2C1_Init+0x140>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4a32      	ldr	r2, [pc, #200]	; (800210c <I2C1_Init+0x140>)
 8002042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002046:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<15);
 8002048:	4b30      	ldr	r3, [pc, #192]	; (800210c <I2C1_Init+0x140>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4a2f      	ldr	r2, [pc, #188]	; (800210c <I2C1_Init+0x140>)
 800204e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002052:	60d3      	str	r3, [r2, #12]

	/*Set PB6 and PB7 alternate function type to I2C (AF4)
	 * PB6 --> SCL
	 * PB7 --> SDA*/
	GPIOB->AFR[0] &= ~(1U<<24);
 8002054:	4b2d      	ldr	r3, [pc, #180]	; (800210c <I2C1_Init+0x140>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	4a2c      	ldr	r2, [pc, #176]	; (800210c <I2C1_Init+0x140>)
 800205a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800205e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<25);
 8002060:	4b2a      	ldr	r3, [pc, #168]	; (800210c <I2C1_Init+0x140>)
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	4a29      	ldr	r2, [pc, #164]	; (800210c <I2C1_Init+0x140>)
 8002066:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800206a:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1U<<26);
 800206c:	4b27      	ldr	r3, [pc, #156]	; (800210c <I2C1_Init+0x140>)
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	4a26      	ldr	r2, [pc, #152]	; (800210c <I2C1_Init+0x140>)
 8002072:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002076:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<27);
 8002078:	4b24      	ldr	r3, [pc, #144]	; (800210c <I2C1_Init+0x140>)
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	4a23      	ldr	r2, [pc, #140]	; (800210c <I2C1_Init+0x140>)
 800207e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002082:	6213      	str	r3, [r2, #32]

	GPIOB->AFR[0] &= ~(1U<<28);
 8002084:	4b21      	ldr	r3, [pc, #132]	; (800210c <I2C1_Init+0x140>)
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4a20      	ldr	r2, [pc, #128]	; (800210c <I2C1_Init+0x140>)
 800208a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800208e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<29);
 8002090:	4b1e      	ldr	r3, [pc, #120]	; (800210c <I2C1_Init+0x140>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4a1d      	ldr	r2, [pc, #116]	; (800210c <I2C1_Init+0x140>)
 8002096:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800209a:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1U<<30);
 800209c:	4b1b      	ldr	r3, [pc, #108]	; (800210c <I2C1_Init+0x140>)
 800209e:	6a1b      	ldr	r3, [r3, #32]
 80020a0:	4a1a      	ldr	r2, [pc, #104]	; (800210c <I2C1_Init+0x140>)
 80020a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020a6:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<31);
 80020a8:	4b18      	ldr	r3, [pc, #96]	; (800210c <I2C1_Init+0x140>)
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	4a17      	ldr	r2, [pc, #92]	; (800210c <I2C1_Init+0x140>)
 80020ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020b2:	6213      	str	r3, [r2, #32]

	/***Configuring I2C1***/

	/*Enable clock access to I2C1*/
	RCC->APB1ENR |= I2C1EN;
 80020b4:	4b14      	ldr	r3, [pc, #80]	; (8002108 <I2C1_Init+0x13c>)
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	4a13      	ldr	r2, [pc, #76]	; (8002108 <I2C1_Init+0x13c>)
 80020ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020be:	6413      	str	r3, [r2, #64]	; 0x40

	/*Enter reset mode  */
	I2C1->CR1 |= (1U<<15);
 80020c0:	4b13      	ldr	r3, [pc, #76]	; (8002110 <I2C1_Init+0x144>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a12      	ldr	r2, [pc, #72]	; (8002110 <I2C1_Init+0x144>)
 80020c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ca:	6013      	str	r3, [r2, #0]

	/*Come out of reset mode  */
	I2C1->CR1 &= ~(1U<<15);
 80020cc:	4b10      	ldr	r3, [pc, #64]	; (8002110 <I2C1_Init+0x144>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0f      	ldr	r2, [pc, #60]	; (8002110 <I2C1_Init+0x144>)
 80020d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80020d6:	6013      	str	r3, [r2, #0]

	/*Set Peripheral clock frequency*/
	I2C1->CR2 = (1U<<4);   //16 Mhz
 80020d8:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <I2C1_Init+0x144>)
 80020da:	2210      	movs	r2, #16
 80020dc:	605a      	str	r2, [r3, #4]
//
//	/*Set rise time */
//	I2C1->TRISE = SD_MODE_MAX_RISE_TIME; //(1000ns/(1/16MHz)+1 = 17

	/*Set I2C to fast mode, 400kHz clock */
	I2C1->CCR = 1; //Refer to ST reference manual for derivation
 80020de:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <I2C1_Init+0x144>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	61da      	str	r2, [r3, #28]
	I2C1->CCR = I2C_FAST_DUTY; //Set to Fast mode and duty cycle of 16/9
 80020e4:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <I2C1_Init+0x144>)
 80020e6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80020ea:	61da      	str	r2, [r3, #28]

	/*Set rise time */
	I2C1->TRISE = 6;//FS_MODE_MAX_RISE_TIME; //(300ns/(1/16MHz)+1 = 5.8
 80020ec:	4b08      	ldr	r3, [pc, #32]	; (8002110 <I2C1_Init+0x144>)
 80020ee:	2206      	movs	r2, #6
 80020f0:	621a      	str	r2, [r3, #32]

	/*Enable I2C1 module */
	I2C1->CR1 |= CR1_PE;
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <I2C1_Init+0x144>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a06      	ldr	r2, [pc, #24]	; (8002110 <I2C1_Init+0x144>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6013      	str	r3, [r2, #0]
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	40023800 	.word	0x40023800
 800210c:	40020400 	.word	0x40020400
 8002110:	40005400 	.word	0x40005400

08002114 <I2C1_byteRead>:

void I2C1_byteRead(char saddr, char maddr, char* data) {
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	4603      	mov	r3, r0
 800211c:	603a      	str	r2, [r7, #0]
 800211e:	71fb      	strb	r3, [r7, #7]
 8002120:	460b      	mov	r3, r1
 8002122:	71bb      	strb	r3, [r7, #6]

	  volatile int tmp;

	  /* Wait until bus not busy */
	  while (I2C1->SR2 & (SR2_BUSY)){}
 8002124:	bf00      	nop
 8002126:	4b37      	ldr	r3, [pc, #220]	; (8002204 <I2C1_byteRead+0xf0>)
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f9      	bne.n	8002126 <I2C1_byteRead+0x12>

	  /* Generate start condition */
	  I2C1->CR1 |= CR1_START;
 8002132:	4b34      	ldr	r3, [pc, #208]	; (8002204 <I2C1_byteRead+0xf0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a33      	ldr	r2, [pc, #204]	; (8002204 <I2C1_byteRead+0xf0>)
 8002138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213c:	6013      	str	r3, [r2, #0]

	  /* Wait until start condition flag is set, note the negation */
	  /* Stay in loop if start flag is not set */
	  while (!(I2C1->SR1 & (SR1_SB))){}
 800213e:	bf00      	nop
 8002140:	4b30      	ldr	r3, [pc, #192]	; (8002204 <I2C1_byteRead+0xf0>)
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f9      	beq.n	8002140 <I2C1_byteRead+0x2c>

	  /* Transmit slave address + Write (0) */
	  /* This slave address is sent to each slave device along with an indication to establish either read or write communication */
	  /* Yo device A, I want to write to one of your memory registers */
	  I2C1->DR = saddr << 1; // shifting the address left makes room for the R/W bit, which is 0 for write
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	005a      	lsls	r2, r3, #1
 8002150:	4b2c      	ldr	r3, [pc, #176]	; (8002204 <I2C1_byteRead+0xf0>)
 8002152:	611a      	str	r2, [r3, #16]

	  /* Wait until address flag is set */
	  /* Each slave device compares the address from master to its own address and sends an ACK if matched */
	  /* I'm device A and of course you can write to one of my registers */
	  while (!(I2C1->SR1 & (SR1_ADDR))){}
 8002154:	bf00      	nop
 8002156:	4b2b      	ldr	r3, [pc, #172]	; (8002204 <I2C1_byteRead+0xf0>)
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0f9      	beq.n	8002156 <I2C1_byteRead+0x42>

	  /* Clear address flag by reading SR2 register */
	  tmp = I2C1->SR2;
 8002162:	4b28      	ldr	r3, [pc, #160]	; (8002204 <I2C1_byteRead+0xf0>)
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	60fb      	str	r3, [r7, #12]

	  /*Wait until transmitter empty */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 8002168:	bf00      	nop
 800216a:	4b26      	ldr	r3, [pc, #152]	; (8002204 <I2C1_byteRead+0xf0>)
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f9      	beq.n	800216a <I2C1_byteRead+0x56>

	  /* Send register address */
	  /* Aight, here is the address of the register I'm want to write to read from*/
	  I2C1->DR = maddr;
 8002176:	4a23      	ldr	r2, [pc, #140]	; (8002204 <I2C1_byteRead+0xf0>)
 8002178:	79bb      	ldrb	r3, [r7, #6]
 800217a:	6113      	str	r3, [r2, #16]

	  /*Wait until transmitter empty */
	  /* No probs */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 800217c:	bf00      	nop
 800217e:	4b21      	ldr	r3, [pc, #132]	; (8002204 <I2C1_byteRead+0xf0>)
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f9      	beq.n	800217e <I2C1_byteRead+0x6a>

	 /* Begin actual reading process once slave device and register of interest are understood between master and slave*/
	 /*Generate restart */
	 I2C1->CR1 |= CR1_START;
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <I2C1_byteRead+0xf0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a1d      	ldr	r2, [pc, #116]	; (8002204 <I2C1_byteRead+0xf0>)
 8002190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002194:	6013      	str	r3, [r2, #0]

	 /* Wait until start flag is set */
	 while (!(I2C1->SR1 & SR1_SB)){}
 8002196:	bf00      	nop
 8002198:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <I2C1_byteRead+0xf0>)
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f9      	beq.n	8002198 <I2C1_byteRead+0x84>

	 /* Transmit slave address + Read */
	 I2C1->DR = saddr << 1 | 1;
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	f043 0201 	orr.w	r2, r3, #1
 80021ac:	4b15      	ldr	r3, [pc, #84]	; (8002204 <I2C1_byteRead+0xf0>)
 80021ae:	611a      	str	r2, [r3, #16]

	 /* Wait until addr flag is set */
	 while (!(I2C1->SR1 & (SR1_ADDR))){}
 80021b0:	bf00      	nop
 80021b2:	4b14      	ldr	r3, [pc, #80]	; (8002204 <I2C1_byteRead+0xf0>)
 80021b4:	695b      	ldr	r3, [r3, #20]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f9      	beq.n	80021b2 <I2C1_byteRead+0x9e>

	 /* Clear addr flag */
	 tmp = I2C1->SR2;
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <I2C1_byteRead+0xf0>)
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	60fb      	str	r3, [r7, #12]

	 /* Disable Acknowledge */
	 I2C1->CR1 &= ~CR1_ACK;
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <I2C1_byteRead+0xf0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0e      	ldr	r2, [pc, #56]	; (8002204 <I2C1_byteRead+0xf0>)
 80021ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021ce:	6013      	str	r3, [r2, #0]

	 /* Generate stop after data received */
	 I2C1->CR1 |= CR1_STOP;
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <I2C1_byteRead+0xf0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a0b      	ldr	r2, [pc, #44]	; (8002204 <I2C1_byteRead+0xf0>)
 80021d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021da:	6013      	str	r3, [r2, #0]

	 /* Wait until RXNE flag is set
	  * Wait until receiver is not empty (has contents to read)*/
	 while (!(I2C1->SR1 & SR1_RXNE)){}
 80021dc:	bf00      	nop
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <I2C1_byteRead+0xf0>)
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f9      	beq.n	80021de <I2C1_byteRead+0xca>

	 /* Read data from DR */
	 *data++ = I2C1->DR;
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <I2C1_byteRead+0xf0>)
 80021ec:	6919      	ldr	r1, [r3, #16]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	603a      	str	r2, [r7, #0]
 80021f4:	b2ca      	uxtb	r2, r1
 80021f6:	701a      	strb	r2, [r3, #0]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	40005400 	.word	0x40005400

08002208 <I2C1_burstRead>:

void I2C1_burstRead(char saddr, char maddr, int n, char* data) {
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	60ba      	str	r2, [r7, #8]
 8002210:	607b      	str	r3, [r7, #4]
 8002212:	4603      	mov	r3, r0
 8002214:	73fb      	strb	r3, [r7, #15]
 8002216:	460b      	mov	r3, r1
 8002218:	73bb      	strb	r3, [r7, #14]

	  volatile int tmp;

	  /* Wait until bus not busy */
	  while (I2C1->SR2 & (SR2_BUSY)){}
 800221a:	bf00      	nop
 800221c:	4b47      	ldr	r3, [pc, #284]	; (800233c <I2C1_burstRead+0x134>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f003 0302 	and.w	r3, r3, #2
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f9      	bne.n	800221c <I2C1_burstRead+0x14>

	  /* Generate start condition */
	  I2C1->CR1 |= CR1_START;
 8002228:	4b44      	ldr	r3, [pc, #272]	; (800233c <I2C1_burstRead+0x134>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a43      	ldr	r2, [pc, #268]	; (800233c <I2C1_burstRead+0x134>)
 800222e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002232:	6013      	str	r3, [r2, #0]

	  /* Wait until start condition flag is set, note the negation */
	  /* Stay in loop if start flag is not set */
	  while (!(I2C1->SR1 & (SR1_SB))){}
 8002234:	bf00      	nop
 8002236:	4b41      	ldr	r3, [pc, #260]	; (800233c <I2C1_burstRead+0x134>)
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f9      	beq.n	8002236 <I2C1_burstRead+0x2e>

	  /* Transmit slave address + Write (0) */
	  /* This slave address is sent to each slave device along with an indication to establish either read or write communication */
	  I2C1->DR = saddr << 1; // shifting the address left makes room for the R/W bit, which is 0 for write
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	005a      	lsls	r2, r3, #1
 8002246:	4b3d      	ldr	r3, [pc, #244]	; (800233c <I2C1_burstRead+0x134>)
 8002248:	611a      	str	r2, [r3, #16]

	  /* Wait until address flag is set */
	  /* Each slave device compares the address from master to its own address and sends an ACK if matched */
	  while (!(I2C1->SR1 & (SR1_ADDR))){}
 800224a:	bf00      	nop
 800224c:	4b3b      	ldr	r3, [pc, #236]	; (800233c <I2C1_burstRead+0x134>)
 800224e:	695b      	ldr	r3, [r3, #20]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f9      	beq.n	800224c <I2C1_burstRead+0x44>

	  /* Clear address flag by reading SR2 register */
	  tmp = I2C1->SR2;
 8002258:	4b38      	ldr	r3, [pc, #224]	; (800233c <I2C1_burstRead+0x134>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	617b      	str	r3, [r7, #20]

	  /*Wait until transmitter empty */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 800225e:	bf00      	nop
 8002260:	4b36      	ldr	r3, [pc, #216]	; (800233c <I2C1_burstRead+0x134>)
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0f9      	beq.n	8002260 <I2C1_burstRead+0x58>

	  /* Send register address */
	  I2C1->DR = maddr;
 800226c:	4a33      	ldr	r2, [pc, #204]	; (800233c <I2C1_burstRead+0x134>)
 800226e:	7bbb      	ldrb	r3, [r7, #14]
 8002270:	6113      	str	r3, [r2, #16]

	  /*Wait until transmitter empty */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 8002272:	bf00      	nop
 8002274:	4b31      	ldr	r3, [pc, #196]	; (800233c <I2C1_burstRead+0x134>)
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f9      	beq.n	8002274 <I2C1_burstRead+0x6c>

	 /* Begin actual reading process once slave device and register of interest are understood between master and slave*/
	 /*Generate restart */
	 I2C1->CR1 |= CR1_START;
 8002280:	4b2e      	ldr	r3, [pc, #184]	; (800233c <I2C1_burstRead+0x134>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a2d      	ldr	r2, [pc, #180]	; (800233c <I2C1_burstRead+0x134>)
 8002286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228a:	6013      	str	r3, [r2, #0]

	 /* Wait until start flag is set */
	 while (!(I2C1->SR1 & SR1_SB)){}
 800228c:	bf00      	nop
 800228e:	4b2b      	ldr	r3, [pc, #172]	; (800233c <I2C1_burstRead+0x134>)
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f9      	beq.n	800228e <I2C1_burstRead+0x86>

	 /* Transmit slave address + Read */
	 I2C1->DR = saddr << 1 | 1;
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	f043 0201 	orr.w	r2, r3, #1
 80022a2:	4b26      	ldr	r3, [pc, #152]	; (800233c <I2C1_burstRead+0x134>)
 80022a4:	611a      	str	r2, [r3, #16]

	 /* Wait until addr flag is set */
	 while (!(I2C1->SR1 & (SR1_ADDR))){}
 80022a6:	bf00      	nop
 80022a8:	4b24      	ldr	r3, [pc, #144]	; (800233c <I2C1_burstRead+0x134>)
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f9      	beq.n	80022a8 <I2C1_burstRead+0xa0>

	 /* Clear addr flag */
	 tmp = I2C1->SR2;
 80022b4:	4b21      	ldr	r3, [pc, #132]	; (800233c <I2C1_burstRead+0x134>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	617b      	str	r3, [r7, #20]

	 /* Enable Acknowledge */
	 I2C1->CR1 |= CR1_ACK;
 80022ba:	4b20      	ldr	r3, [pc, #128]	; (800233c <I2C1_burstRead+0x134>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a1f      	ldr	r2, [pc, #124]	; (800233c <I2C1_burstRead+0x134>)
 80022c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022c4:	6013      	str	r3, [r2, #0]

	 while(n > 0U)
 80022c6:	e02e      	b.n	8002326 <I2C1_burstRead+0x11e>
	 {
		 /*if one byte*/
		 if(n == 1U)
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d11a      	bne.n	8002304 <I2C1_burstRead+0xfc>
		 {
			 /* Disable Acknowledge */
			 I2C1->CR1 &= ~CR1_ACK;
 80022ce:	4b1b      	ldr	r3, [pc, #108]	; (800233c <I2C1_burstRead+0x134>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a1a      	ldr	r2, [pc, #104]	; (800233c <I2C1_burstRead+0x134>)
 80022d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022d8:	6013      	str	r3, [r2, #0]

			 /* Generate Stop */
			 I2C1->CR1 |= CR1_STOP;
 80022da:	4b18      	ldr	r3, [pc, #96]	; (800233c <I2C1_burstRead+0x134>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a17      	ldr	r2, [pc, #92]	; (800233c <I2C1_burstRead+0x134>)
 80022e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022e4:	6013      	str	r3, [r2, #0]

			 /* Wait for RXNE flag set */
			 while (!(I2C1->SR1 & SR1_RXNE)){}
 80022e6:	bf00      	nop
 80022e8:	4b14      	ldr	r3, [pc, #80]	; (800233c <I2C1_burstRead+0x134>)
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f9      	beq.n	80022e8 <I2C1_burstRead+0xe0>

			 /* Read data from DR */
			 *data++ = I2C1->DR;
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <I2C1_burstRead+0x134>)
 80022f6:	6919      	ldr	r1, [r3, #16]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	b2ca      	uxtb	r2, r1
 8002300:	701a      	strb	r2, [r3, #0]
			 break;
 8002302:	e014      	b.n	800232e <I2C1_burstRead+0x126>
		 }
		 else
		 {
			 /* Wait until RXNE flag is set */
			 while (!(I2C1->SR1 & SR1_RXNE)){}
 8002304:	bf00      	nop
 8002306:	4b0d      	ldr	r3, [pc, #52]	; (800233c <I2C1_burstRead+0x134>)
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f9      	beq.n	8002306 <I2C1_burstRead+0xfe>

			 /* Read data from DR */
			 (*data++) = I2C1->DR;
 8002312:	4b0a      	ldr	r3, [pc, #40]	; (800233c <I2C1_burstRead+0x134>)
 8002314:	6919      	ldr	r1, [r3, #16]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	b2ca      	uxtb	r2, r1
 800231e:	701a      	strb	r2, [r3, #0]

			 n--;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	3b01      	subs	r3, #1
 8002324:	60bb      	str	r3, [r7, #8]
	 while(n > 0U)
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1cd      	bne.n	80022c8 <I2C1_burstRead+0xc0>
		 }
	 }

}
 800232c:	bf00      	nop
 800232e:	bf00      	nop
 8002330:	371c      	adds	r7, #28
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40005400 	.word	0x40005400

08002340 <I2C1_burstWrite>:

void I2C1_burstWrite(char saddr, char maddr, int n, char* data) {
 8002340:	b480      	push	{r7}
 8002342:	b087      	sub	sp, #28
 8002344:	af00      	add	r7, sp, #0
 8002346:	60ba      	str	r2, [r7, #8]
 8002348:	607b      	str	r3, [r7, #4]
 800234a:	4603      	mov	r3, r0
 800234c:	73fb      	strb	r3, [r7, #15]
 800234e:	460b      	mov	r3, r1
 8002350:	73bb      	strb	r3, [r7, #14]

	/* Temporary variable to read SR2*/
	volatile int tmp;

	/* Wait until bus not busy */
	while (I2C1->SR2 & (SR2_BUSY)){}
 8002352:	bf00      	nop
 8002354:	4b2a      	ldr	r3, [pc, #168]	; (8002400 <I2C1_burstWrite+0xc0>)
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f9      	bne.n	8002354 <I2C1_burstWrite+0x14>

	/* Generate start condition */
	I2C1->CR1 |= CR1_START;
 8002360:	4b27      	ldr	r3, [pc, #156]	; (8002400 <I2C1_burstWrite+0xc0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a26      	ldr	r2, [pc, #152]	; (8002400 <I2C1_burstWrite+0xc0>)
 8002366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236a:	6013      	str	r3, [r2, #0]

	/* Wait until start condition flag is set, note the negation */
	/* Stay in loop if start flag is not set*/
	while (!(I2C1->SR1 & (SR1_SB))){}
 800236c:	bf00      	nop
 800236e:	4b24      	ldr	r3, [pc, #144]	; (8002400 <I2C1_burstWrite+0xc0>)
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f9      	beq.n	800236e <I2C1_burstWrite+0x2e>

	/* Transmit slave address + Write (0) */
	/* This slave address is sent to each slave device along with an indication to establish either read or write communication*/
	/* Yo device A, I want to write to one of your memory registers */
	I2C1->DR = saddr << 1; // shifting the address left makes room for the R/W bit, which is 0 for write
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	005a      	lsls	r2, r3, #1
 800237e:	4b20      	ldr	r3, [pc, #128]	; (8002400 <I2C1_burstWrite+0xc0>)
 8002380:	611a      	str	r2, [r3, #16]

	/* Wait until address flag is set */
	/* Each slave device compares the address from master to its own address and sends an ACK if mathced*/
	/* I'm device A and of course you can write to one of my registers */
	while (!(I2C1->SR1 & (SR1_ADDR))){}
 8002382:	bf00      	nop
 8002384:	4b1e      	ldr	r3, [pc, #120]	; (8002400 <I2C1_burstWrite+0xc0>)
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f9      	beq.n	8002384 <I2C1_burstWrite+0x44>

	/* Clear address flag by reading SR2 register */
	tmp = I2C1->SR2;
 8002390:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <I2C1_burstWrite+0xc0>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	613b      	str	r3, [r7, #16]

	/*Wait until data register empty */
	while (!(I2C1->SR1 & SR1_TXE)){}
 8002396:	bf00      	nop
 8002398:	4b19      	ldr	r3, [pc, #100]	; (8002400 <I2C1_burstWrite+0xc0>)
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f9      	beq.n	8002398 <I2C1_burstWrite+0x58>

	/* Send register address */
	/* aight here is the register I'm writing to write to and the value I want written */
	I2C1->DR = maddr;
 80023a4:	4a16      	ldr	r2, [pc, #88]	; (8002400 <I2C1_burstWrite+0xc0>)
 80023a6:	7bbb      	ldrb	r3, [r7, #14]
 80023a8:	6113      	str	r3, [r2, #16]

	for (int i = 0; i < n; i++) {
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	e00f      	b.n	80023d0 <I2C1_burstWrite+0x90>

		/*Wait until data register empty */
		while (!(I2C1->SR1 & SR1_TXE)){}
 80023b0:	bf00      	nop
 80023b2:	4b13      	ldr	r3, [pc, #76]	; (8002400 <I2C1_burstWrite+0xc0>)
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f9      	beq.n	80023b2 <I2C1_burstWrite+0x72>

		/* Transmit memory address */
		I2C1->DR = *data++;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	781a      	ldrb	r2, [r3, #0]
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <I2C1_burstWrite+0xc0>)
 80023c8:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < n; i++) {
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	3301      	adds	r3, #1
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	dbeb      	blt.n	80023b0 <I2C1_burstWrite+0x70>
	}
	/* Wait until transfer finished */
	while (!(I2C1->SR1 & (SR1_BTF))){}
 80023d8:	bf00      	nop
 80023da:	4b09      	ldr	r3, [pc, #36]	; (8002400 <I2C1_burstWrite+0xc0>)
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f9      	beq.n	80023da <I2C1_burstWrite+0x9a>

	/* Generate stop */
	I2C1->CR1 |= CR1_STOP;
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <I2C1_burstWrite+0xc0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a05      	ldr	r2, [pc, #20]	; (8002400 <I2C1_burstWrite+0xc0>)
 80023ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023f0:	6013      	str	r3, [r2, #0]
}
 80023f2:	bf00      	nop
 80023f4:	371c      	adds	r7, #28
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40005400 	.word	0x40005400

08002404 <main>:


#define NUM_CHANNELS		64

int main(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b0c2      	sub	sp, #264	; 0x108
 8002408:	af00      	add	r7, sp, #0
	// Containers to receive channel data
	uint16_t channel_data[CHANNELSIZE];
	uint16_t temp_data[CHANNELSIZE];


	startup();
 800240a:	f7fe fd19 	bl	8000e40 <startup>
	delayMillis(2000);
 800240e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002412:	f000 f979 	bl	8002708 <delayMillis>
	startMeasurements(true);
 8002416:	2001      	movs	r0, #1
 8002418:	f7ff f928 	bl	800166c <startMeasurements>
	uint8_t count = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	while (measurementActive())
 8002422:	e02e      	b.n	8002482 <main+0x7e>
	{
		performMeasurements(channel_data, temp_data);
 8002424:	463a      	mov	r2, r7
 8002426:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe fd2f 	bl	8000e90 <performMeasurements>
//		getAllSpectralData(channel_data); //Reading spectral data channels and passing organized values into arrSpectra
//		getAllTemperatureData(temp_data); //Reading temperatures of integration cycles A to D



		printf("Measurement %i: \n\r", count);
 8002432:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8002436:	4619      	mov	r1, r3
 8002438:	481a      	ldr	r0, [pc, #104]	; (80024a4 <main+0xa0>)
 800243a:	f000 ff87 	bl	800334c <iprintf>
		for (int i = 0; i < NUM_CHANNELS; i++)
 800243e:	2300      	movs	r3, #0
 8002440:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002444:	e010      	b.n	8002468 <main+0x64>
		{
//			printf("Channel %i: %f\n\r", i+1, channel_data[i]);
			printf("%d\n\r", channel_data[i]);
 8002446:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002450:	443b      	add	r3, r7
 8002452:	f833 3c88 	ldrh.w	r3, [r3, #-136]
 8002456:	4619      	mov	r1, r3
 8002458:	4813      	ldr	r0, [pc, #76]	; (80024a8 <main+0xa4>)
 800245a:	f000 ff77 	bl	800334c <iprintf>
		for (int i = 0; i < NUM_CHANNELS; i++)
 800245e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002462:	3301      	adds	r3, #1
 8002464:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002468:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800246c:	2b3f      	cmp	r3, #63	; 0x3f
 800246e:	ddea      	ble.n	8002446 <main+0x42>
		}

		count++;
 8002470:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8002474:	3301      	adds	r3, #1
 8002476:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

		// If in continuous mode, specify number of measurements before exiting loop
		if (count == 200)
 800247a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800247e:	2bc8      	cmp	r3, #200	; 0xc8
 8002480:	d005      	beq.n	800248e <main+0x8a>
	while (measurementActive())
 8002482:	f7ff f932 	bl	80016ea <measurementActive>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1cb      	bne.n	8002424 <main+0x20>
 800248c:	e000      	b.n	8002490 <main+0x8c>
		{
			break;
 800248e:	bf00      	nop
		}
	}
	stopMeasurements();
 8002490:	f7ff f90f 	bl	80016b2 <stopMeasurements>
	sleep();
 8002494:	f7fe fec2 	bl	800121c <sleep>

	return 0;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	0800532c 	.word	0x0800532c
 80024a8:	08005340 	.word	0x08005340

080024ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return 1;
 80024b0:	2301      	movs	r3, #1
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <_kill>:

int _kill(int pid, int sig)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80024c6:	f000 ffe9 	bl	800349c <__errno>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2216      	movs	r2, #22
 80024ce:	601a      	str	r2, [r3, #0]
  return -1;
 80024d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <_exit>:

void _exit (int status)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024e4:	f04f 31ff 	mov.w	r1, #4294967295
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ffe7 	bl	80024bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80024ee:	e7fe      	b.n	80024ee <_exit+0x12>

080024f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	e00a      	b.n	8002518 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002502:	f3af 8000 	nop.w
 8002506:	4601      	mov	r1, r0
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	60ba      	str	r2, [r7, #8]
 800250e:	b2ca      	uxtb	r2, r1
 8002510:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	3301      	adds	r3, #1
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	429a      	cmp	r2, r3
 800251e:	dbf0      	blt.n	8002502 <_read+0x12>
  }

  return len;
 8002520:	687b      	ldr	r3, [r7, #4]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b086      	sub	sp, #24
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	e009      	b.n	8002550 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	60ba      	str	r2, [r7, #8]
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f000 f8f4 	bl	8002732 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	3301      	adds	r3, #1
 800254e:	617b      	str	r3, [r7, #20]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	429a      	cmp	r2, r3
 8002556:	dbf1      	blt.n	800253c <_write+0x12>
  }
  return len;
 8002558:	687b      	ldr	r3, [r7, #4]
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <_close>:

int _close(int file)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800256a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800258a:	605a      	str	r2, [r3, #4]
  return 0;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <_isatty>:

int _isatty(int file)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025a2:	2301      	movs	r3, #1
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025d4:	4a14      	ldr	r2, [pc, #80]	; (8002628 <_sbrk+0x5c>)
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <_sbrk+0x60>)
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025e0:	4b13      	ldr	r3, [pc, #76]	; (8002630 <_sbrk+0x64>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d102      	bne.n	80025ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025e8:	4b11      	ldr	r3, [pc, #68]	; (8002630 <_sbrk+0x64>)
 80025ea:	4a12      	ldr	r2, [pc, #72]	; (8002634 <_sbrk+0x68>)
 80025ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <_sbrk+0x64>)
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d207      	bcs.n	800260c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025fc:	f000 ff4e 	bl	800349c <__errno>
 8002600:	4603      	mov	r3, r0
 8002602:	220c      	movs	r2, #12
 8002604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002606:	f04f 33ff 	mov.w	r3, #4294967295
 800260a:	e009      	b.n	8002620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800260c:	4b08      	ldr	r3, [pc, #32]	; (8002630 <_sbrk+0x64>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002612:	4b07      	ldr	r3, [pc, #28]	; (8002630 <_sbrk+0x64>)
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4413      	add	r3, r2
 800261a:	4a05      	ldr	r2, [pc, #20]	; (8002630 <_sbrk+0x64>)
 800261c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800261e:	68fb      	ldr	r3, [r7, #12]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20018000 	.word	0x20018000
 800262c:	00000400 	.word	0x00000400
 8002630:	200001ec 	.word	0x200001ec
 8002634:	20000340 	.word	0x20000340

08002638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	6039      	str	r1, [r7, #0]
 8002642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002648:	2b00      	cmp	r3, #0
 800264a:	db0a      	blt.n	8002662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	b2da      	uxtb	r2, r3
 8002650:	490c      	ldr	r1, [pc, #48]	; (8002684 <__NVIC_SetPriority+0x4c>)
 8002652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002656:	0112      	lsls	r2, r2, #4
 8002658:	b2d2      	uxtb	r2, r2
 800265a:	440b      	add	r3, r1
 800265c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002660:	e00a      	b.n	8002678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	4908      	ldr	r1, [pc, #32]	; (8002688 <__NVIC_SetPriority+0x50>)
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	3b04      	subs	r3, #4
 8002670:	0112      	lsls	r2, r2, #4
 8002672:	b2d2      	uxtb	r2, r2
 8002674:	440b      	add	r3, r1
 8002676:	761a      	strb	r2, [r3, #24]
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000e100 	.word	0xe000e100
 8002688:	e000ed00 	.word	0xe000ed00

0800268c <SysTick_Init>:
#define CTRL_COUNTFLAG			(1U<<16)

volatile uint32_t msTicks = 0;

void SysTick_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
    // Reload with the number of clocks per millisecond
    SysTick->LOAD = SYSTICK_LOAD_VAL - 1;  // Set reload register (off by one)
 8002690:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <SysTick_Init+0x44>)
 8002692:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002696:	605a      	str	r2, [r3, #4]

    // Set the priority of the SysTick interrupt
    NVIC_SetPriority(SysTick_IRQn, (1 << __NVIC_PRIO_BITS) - 1);  // Set lowest priority
 8002698:	210f      	movs	r1, #15
 800269a:	f04f 30ff 	mov.w	r0, #4294967295
 800269e:	f7ff ffcb 	bl	8002638 <__NVIC_SetPriority>

    // Reset the SysTick counter value
    SysTick->VAL = 0;
 80026a2:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <SysTick_Init+0x44>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]

    // Select processor clock as SysTick clock source
    SysTick->CTRL |= CTRL_CLKSRC;
 80026a8:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <SysTick_Init+0x44>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a08      	ldr	r2, [pc, #32]	; (80026d0 <SysTick_Init+0x44>)
 80026ae:	f043 0304 	orr.w	r3, r3, #4
 80026b2:	6013      	str	r3, [r2, #0]

    // Enable SysTick interrupt
    SysTick->CTRL |= CTRL_TICKINT;
 80026b4:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <SysTick_Init+0x44>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a05      	ldr	r2, [pc, #20]	; (80026d0 <SysTick_Init+0x44>)
 80026ba:	f043 0302 	orr.w	r3, r3, #2
 80026be:	6013      	str	r3, [r2, #0]

    // Enable SysTick timer
    SysTick->CTRL |= CTRL_ENABLE;
 80026c0:	4b03      	ldr	r3, [pc, #12]	; (80026d0 <SysTick_Init+0x44>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a02      	ldr	r2, [pc, #8]	; (80026d0 <SysTick_Init+0x44>)
 80026c6:	f043 0301 	orr.w	r3, r3, #1
 80026ca:	6013      	str	r3, [r2, #0]
}
 80026cc:	bf00      	nop
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	e000e010 	.word	0xe000e010

080026d4 <SysTick_Handler>:

// SysTick Handler - Called every 1ms
void SysTick_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
	msTicks++;
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <SysTick_Handler+0x18>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	3301      	adds	r3, #1
 80026de:	4a03      	ldr	r2, [pc, #12]	; (80026ec <SysTick_Handler+0x18>)
 80026e0:	6013      	str	r3, [r2, #0]
}
 80026e2:	bf00      	nop
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	200001f0 	.word	0x200001f0

080026f0 <getMillis>:

// Function to get the current time in milliseconds
uint32_t getMillis(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
	return msTicks;
 80026f4:	4b03      	ldr	r3, [pc, #12]	; (8002704 <getMillis+0x14>)
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	200001f0 	.word	0x200001f0

08002708 <delayMillis>:

void delayMillis(uint32_t delay)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
	uint32_t startTick = getMillis();
 8002710:	f7ff ffee 	bl	80026f0 <getMillis>
 8002714:	60f8      	str	r0, [r7, #12]
	while ((getMillis() - startTick) < delay){}
 8002716:	bf00      	nop
 8002718:	f7ff ffea 	bl	80026f0 <getMillis>
 800271c:	4602      	mov	r2, r0
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	429a      	cmp	r2, r3
 8002726:	d8f7      	bhi.n	8002718 <delayMillis+0x10>
}
 8002728:	bf00      	nop
 800272a:	bf00      	nop
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <__io_putchar>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);

int __io_putchar(int ch)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f876 	bl	800282c <uart2_write>
	return ch;
 8002740:	687b      	ldr	r3, [r7, #4]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <uart2_rxtx_init>:

void uart2_rxtx_init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
	/****************Configure uart  pin using gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 8002750:	4b32      	ldr	r3, [pc, #200]	; (800281c <uart2_rxtx_init+0xd0>)
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	4a31      	ldr	r2, [pc, #196]	; (800281c <uart2_rxtx_init+0xd0>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6313      	str	r3, [r2, #48]	; 0x30


	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~ (1U<<4);
 800275c:	4b30      	ldr	r3, [pc, #192]	; (8002820 <uart2_rxtx_init+0xd4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a2f      	ldr	r2, [pc, #188]	; (8002820 <uart2_rxtx_init+0xd4>)
 8002762:	f023 0310 	bic.w	r3, r3, #16
 8002766:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8002768:	4b2d      	ldr	r3, [pc, #180]	; (8002820 <uart2_rxtx_init+0xd4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a2c      	ldr	r2, [pc, #176]	; (8002820 <uart2_rxtx_init+0xd4>)
 800276e:	f043 0320 	orr.w	r3, r3, #32
 8002772:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0]|= (1U<<8);
 8002774:	4b2a      	ldr	r3, [pc, #168]	; (8002820 <uart2_rxtx_init+0xd4>)
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	4a29      	ldr	r2, [pc, #164]	; (8002820 <uart2_rxtx_init+0xd4>)
 800277a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<9);
 8002780:	4b27      	ldr	r3, [pc, #156]	; (8002820 <uart2_rxtx_init+0xd4>)
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	4a26      	ldr	r2, [pc, #152]	; (8002820 <uart2_rxtx_init+0xd4>)
 8002786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800278a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<10);
 800278c:	4b24      	ldr	r3, [pc, #144]	; (8002820 <uart2_rxtx_init+0xd4>)
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	4a23      	ldr	r2, [pc, #140]	; (8002820 <uart2_rxtx_init+0xd4>)
 8002792:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002796:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<11);
 8002798:	4b21      	ldr	r3, [pc, #132]	; (8002820 <uart2_rxtx_init+0xd4>)
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	4a20      	ldr	r2, [pc, #128]	; (8002820 <uart2_rxtx_init+0xd4>)
 800279e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027a2:	6213      	str	r3, [r2, #32]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~ (1U<<6);
 80027a4:	4b1e      	ldr	r3, [pc, #120]	; (8002820 <uart2_rxtx_init+0xd4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a1d      	ldr	r2, [pc, #116]	; (8002820 <uart2_rxtx_init+0xd4>)
 80027aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027ae:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 80027b0:	4b1b      	ldr	r3, [pc, #108]	; (8002820 <uart2_rxtx_init+0xd4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a1a      	ldr	r2, [pc, #104]	; (8002820 <uart2_rxtx_init+0xd4>)
 80027b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027ba:	6013      	str	r3, [r2, #0]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0]|= (1U<<12);
 80027bc:	4b18      	ldr	r3, [pc, #96]	; (8002820 <uart2_rxtx_init+0xd4>)
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	4a17      	ldr	r2, [pc, #92]	; (8002820 <uart2_rxtx_init+0xd4>)
 80027c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027c6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<13);
 80027c8:	4b15      	ldr	r3, [pc, #84]	; (8002820 <uart2_rxtx_init+0xd4>)
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	4a14      	ldr	r2, [pc, #80]	; (8002820 <uart2_rxtx_init+0xd4>)
 80027ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027d2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<14);
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <uart2_rxtx_init+0xd4>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4a11      	ldr	r2, [pc, #68]	; (8002820 <uart2_rxtx_init+0xd4>)
 80027da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027de:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<15);
 80027e0:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <uart2_rxtx_init+0xd4>)
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	4a0e      	ldr	r2, [pc, #56]	; (8002820 <uart2_rxtx_init+0xd4>)
 80027e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80027ea:	6213      	str	r3, [r2, #32]



	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= USART2EN;
 80027ec:	4b0b      	ldr	r3, [pc, #44]	; (800281c <uart2_rxtx_init+0xd0>)
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	4a0a      	ldr	r2, [pc, #40]	; (800281c <uart2_rxtx_init+0xd0>)
 80027f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f6:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 80027f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027fc:	4909      	ldr	r1, [pc, #36]	; (8002824 <uart2_rxtx_init+0xd8>)
 80027fe:	480a      	ldr	r0, [pc, #40]	; (8002828 <uart2_rxtx_init+0xdc>)
 8002800:	f000 f82c 	bl	800285c <uart_set_baudrate>

	/*Configure the transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <uart2_rxtx_init+0xdc>)
 8002806:	220c      	movs	r2, #12
 8002808:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	USART2->CR1 |= CR1_UE;
 800280a:	4b07      	ldr	r3, [pc, #28]	; (8002828 <uart2_rxtx_init+0xdc>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	4a06      	ldr	r2, [pc, #24]	; (8002828 <uart2_rxtx_init+0xdc>)
 8002810:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002814:	60d3      	str	r3, [r2, #12]

}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40023800 	.word	0x40023800
 8002820:	40020000 	.word	0x40020000
 8002824:	00f42400 	.word	0x00f42400
 8002828:	40004400 	.word	0x40004400

0800282c <uart2_write>:
	return USART2->DR;

}

void uart2_write(int ch)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){} // Program stays here until condition in while loop no longer holds
 8002834:	bf00      	nop
 8002836:	4b08      	ldr	r3, [pc, #32]	; (8002858 <uart2_write+0x2c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f9      	beq.n	8002836 <uart2_write+0xa>

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a04      	ldr	r2, [pc, #16]	; (8002858 <uart2_write+0x2c>)
 8002846:	b2db      	uxtb	r3, r3
 8002848:	6053      	str	r3, [r2, #4]
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40004400 	.word	0x40004400

0800285c <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	68b8      	ldr	r0, [r7, #8]
 800286c:	f000 f808 	bl	8002880 <compute_uart_bd>
 8002870:	4603      	mov	r3, r0
 8002872:	461a      	mov	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	609a      	str	r2, [r3, #8]
}
 8002878:	bf00      	nop
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	085a      	lsrs	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	441a      	add	r2, r3
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	fbb2 f3f3 	udiv	r3, r2, r3
 8002898:	b29b      	uxth	r3, r3
}
 800289a:	4618      	mov	r0, r3
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028a8:	480d      	ldr	r0, [pc, #52]	; (80028e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80028ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028b0:	480c      	ldr	r0, [pc, #48]	; (80028e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80028b2:	490d      	ldr	r1, [pc, #52]	; (80028e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028b4:	4a0d      	ldr	r2, [pc, #52]	; (80028ec <LoopForever+0xe>)
  movs r3, #0
 80028b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028b8:	e002      	b.n	80028c0 <LoopCopyDataInit>

080028ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028be:	3304      	adds	r3, #4

080028c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028c4:	d3f9      	bcc.n	80028ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028c6:	4a0a      	ldr	r2, [pc, #40]	; (80028f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028c8:	4c0a      	ldr	r4, [pc, #40]	; (80028f4 <LoopForever+0x16>)
  movs r3, #0
 80028ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028cc:	e001      	b.n	80028d2 <LoopFillZerobss>

080028ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d0:	3204      	adds	r2, #4

080028d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028d4:	d3fb      	bcc.n	80028ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80028d6:	f000 fde7 	bl	80034a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028da:	f7ff fd93 	bl	8002404 <main>

080028de <LoopForever>:

LoopForever:
  b LoopForever
 80028de:	e7fe      	b.n	80028de <LoopForever>
  ldr   r0, =_estack
 80028e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80028e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028e8:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 80028ec:	080056bc 	.word	0x080056bc
  ldr r2, =_sbss
 80028f0:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80028f4:	20000340 	.word	0x20000340

080028f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028f8:	e7fe      	b.n	80028f8 <ADC_IRQHandler>

080028fa <__cvt>:
 80028fa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028fe:	ec55 4b10 	vmov	r4, r5, d0
 8002902:	2d00      	cmp	r5, #0
 8002904:	460e      	mov	r6, r1
 8002906:	4619      	mov	r1, r3
 8002908:	462b      	mov	r3, r5
 800290a:	bfbb      	ittet	lt
 800290c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002910:	461d      	movlt	r5, r3
 8002912:	2300      	movge	r3, #0
 8002914:	232d      	movlt	r3, #45	; 0x2d
 8002916:	700b      	strb	r3, [r1, #0]
 8002918:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800291a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800291e:	4691      	mov	r9, r2
 8002920:	f023 0820 	bic.w	r8, r3, #32
 8002924:	bfbc      	itt	lt
 8002926:	4622      	movlt	r2, r4
 8002928:	4614      	movlt	r4, r2
 800292a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800292e:	d005      	beq.n	800293c <__cvt+0x42>
 8002930:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8002934:	d100      	bne.n	8002938 <__cvt+0x3e>
 8002936:	3601      	adds	r6, #1
 8002938:	2102      	movs	r1, #2
 800293a:	e000      	b.n	800293e <__cvt+0x44>
 800293c:	2103      	movs	r1, #3
 800293e:	ab03      	add	r3, sp, #12
 8002940:	9301      	str	r3, [sp, #4]
 8002942:	ab02      	add	r3, sp, #8
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	ec45 4b10 	vmov	d0, r4, r5
 800294a:	4653      	mov	r3, sl
 800294c:	4632      	mov	r2, r6
 800294e:	f000 fe5b 	bl	8003608 <_dtoa_r>
 8002952:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8002956:	4607      	mov	r7, r0
 8002958:	d102      	bne.n	8002960 <__cvt+0x66>
 800295a:	f019 0f01 	tst.w	r9, #1
 800295e:	d022      	beq.n	80029a6 <__cvt+0xac>
 8002960:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002964:	eb07 0906 	add.w	r9, r7, r6
 8002968:	d110      	bne.n	800298c <__cvt+0x92>
 800296a:	783b      	ldrb	r3, [r7, #0]
 800296c:	2b30      	cmp	r3, #48	; 0x30
 800296e:	d10a      	bne.n	8002986 <__cvt+0x8c>
 8002970:	2200      	movs	r2, #0
 8002972:	2300      	movs	r3, #0
 8002974:	4620      	mov	r0, r4
 8002976:	4629      	mov	r1, r5
 8002978:	f7fe f8ae 	bl	8000ad8 <__aeabi_dcmpeq>
 800297c:	b918      	cbnz	r0, 8002986 <__cvt+0x8c>
 800297e:	f1c6 0601 	rsb	r6, r6, #1
 8002982:	f8ca 6000 	str.w	r6, [sl]
 8002986:	f8da 3000 	ldr.w	r3, [sl]
 800298a:	4499      	add	r9, r3
 800298c:	2200      	movs	r2, #0
 800298e:	2300      	movs	r3, #0
 8002990:	4620      	mov	r0, r4
 8002992:	4629      	mov	r1, r5
 8002994:	f7fe f8a0 	bl	8000ad8 <__aeabi_dcmpeq>
 8002998:	b108      	cbz	r0, 800299e <__cvt+0xa4>
 800299a:	f8cd 900c 	str.w	r9, [sp, #12]
 800299e:	2230      	movs	r2, #48	; 0x30
 80029a0:	9b03      	ldr	r3, [sp, #12]
 80029a2:	454b      	cmp	r3, r9
 80029a4:	d307      	bcc.n	80029b6 <__cvt+0xbc>
 80029a6:	9b03      	ldr	r3, [sp, #12]
 80029a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80029aa:	1bdb      	subs	r3, r3, r7
 80029ac:	4638      	mov	r0, r7
 80029ae:	6013      	str	r3, [r2, #0]
 80029b0:	b004      	add	sp, #16
 80029b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029b6:	1c59      	adds	r1, r3, #1
 80029b8:	9103      	str	r1, [sp, #12]
 80029ba:	701a      	strb	r2, [r3, #0]
 80029bc:	e7f0      	b.n	80029a0 <__cvt+0xa6>

080029be <__exponent>:
 80029be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029c0:	4603      	mov	r3, r0
 80029c2:	2900      	cmp	r1, #0
 80029c4:	bfb8      	it	lt
 80029c6:	4249      	neglt	r1, r1
 80029c8:	f803 2b02 	strb.w	r2, [r3], #2
 80029cc:	bfb4      	ite	lt
 80029ce:	222d      	movlt	r2, #45	; 0x2d
 80029d0:	222b      	movge	r2, #43	; 0x2b
 80029d2:	2909      	cmp	r1, #9
 80029d4:	7042      	strb	r2, [r0, #1]
 80029d6:	dd2a      	ble.n	8002a2e <__exponent+0x70>
 80029d8:	f10d 0207 	add.w	r2, sp, #7
 80029dc:	4617      	mov	r7, r2
 80029de:	260a      	movs	r6, #10
 80029e0:	4694      	mov	ip, r2
 80029e2:	fb91 f5f6 	sdiv	r5, r1, r6
 80029e6:	fb06 1415 	mls	r4, r6, r5, r1
 80029ea:	3430      	adds	r4, #48	; 0x30
 80029ec:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80029f0:	460c      	mov	r4, r1
 80029f2:	2c63      	cmp	r4, #99	; 0x63
 80029f4:	f102 32ff 	add.w	r2, r2, #4294967295
 80029f8:	4629      	mov	r1, r5
 80029fa:	dcf1      	bgt.n	80029e0 <__exponent+0x22>
 80029fc:	3130      	adds	r1, #48	; 0x30
 80029fe:	f1ac 0402 	sub.w	r4, ip, #2
 8002a02:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002a06:	1c41      	adds	r1, r0, #1
 8002a08:	4622      	mov	r2, r4
 8002a0a:	42ba      	cmp	r2, r7
 8002a0c:	d30a      	bcc.n	8002a24 <__exponent+0x66>
 8002a0e:	f10d 0209 	add.w	r2, sp, #9
 8002a12:	eba2 020c 	sub.w	r2, r2, ip
 8002a16:	42bc      	cmp	r4, r7
 8002a18:	bf88      	it	hi
 8002a1a:	2200      	movhi	r2, #0
 8002a1c:	4413      	add	r3, r2
 8002a1e:	1a18      	subs	r0, r3, r0
 8002a20:	b003      	add	sp, #12
 8002a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a24:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002a28:	f801 5f01 	strb.w	r5, [r1, #1]!
 8002a2c:	e7ed      	b.n	8002a0a <__exponent+0x4c>
 8002a2e:	2330      	movs	r3, #48	; 0x30
 8002a30:	3130      	adds	r1, #48	; 0x30
 8002a32:	7083      	strb	r3, [r0, #2]
 8002a34:	70c1      	strb	r1, [r0, #3]
 8002a36:	1d03      	adds	r3, r0, #4
 8002a38:	e7f1      	b.n	8002a1e <__exponent+0x60>
	...

08002a3c <_printf_float>:
 8002a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a40:	ed2d 8b02 	vpush	{d8}
 8002a44:	b08d      	sub	sp, #52	; 0x34
 8002a46:	460c      	mov	r4, r1
 8002a48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002a4c:	4616      	mov	r6, r2
 8002a4e:	461f      	mov	r7, r3
 8002a50:	4605      	mov	r5, r0
 8002a52:	f000 fcd9 	bl	8003408 <_localeconv_r>
 8002a56:	f8d0 a000 	ldr.w	sl, [r0]
 8002a5a:	4650      	mov	r0, sl
 8002a5c:	f7fd fc10 	bl	8000280 <strlen>
 8002a60:	2300      	movs	r3, #0
 8002a62:	930a      	str	r3, [sp, #40]	; 0x28
 8002a64:	6823      	ldr	r3, [r4, #0]
 8002a66:	9305      	str	r3, [sp, #20]
 8002a68:	f8d8 3000 	ldr.w	r3, [r8]
 8002a6c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002a70:	3307      	adds	r3, #7
 8002a72:	f023 0307 	bic.w	r3, r3, #7
 8002a76:	f103 0208 	add.w	r2, r3, #8
 8002a7a:	f8c8 2000 	str.w	r2, [r8]
 8002a7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002a82:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002a86:	9307      	str	r3, [sp, #28]
 8002a88:	f8cd 8018 	str.w	r8, [sp, #24]
 8002a8c:	ee08 0a10 	vmov	s16, r0
 8002a90:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8002a94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002a98:	4b9e      	ldr	r3, [pc, #632]	; (8002d14 <_printf_float+0x2d8>)
 8002a9a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a9e:	f7fe f84d 	bl	8000b3c <__aeabi_dcmpun>
 8002aa2:	bb88      	cbnz	r0, 8002b08 <_printf_float+0xcc>
 8002aa4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002aa8:	4b9a      	ldr	r3, [pc, #616]	; (8002d14 <_printf_float+0x2d8>)
 8002aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8002aae:	f7fe f827 	bl	8000b00 <__aeabi_dcmple>
 8002ab2:	bb48      	cbnz	r0, 8002b08 <_printf_float+0xcc>
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	4640      	mov	r0, r8
 8002aba:	4649      	mov	r1, r9
 8002abc:	f7fe f816 	bl	8000aec <__aeabi_dcmplt>
 8002ac0:	b110      	cbz	r0, 8002ac8 <_printf_float+0x8c>
 8002ac2:	232d      	movs	r3, #45	; 0x2d
 8002ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002ac8:	4a93      	ldr	r2, [pc, #588]	; (8002d18 <_printf_float+0x2dc>)
 8002aca:	4b94      	ldr	r3, [pc, #592]	; (8002d1c <_printf_float+0x2e0>)
 8002acc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002ad0:	bf94      	ite	ls
 8002ad2:	4690      	movls	r8, r2
 8002ad4:	4698      	movhi	r8, r3
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	6123      	str	r3, [r4, #16]
 8002ada:	9b05      	ldr	r3, [sp, #20]
 8002adc:	f023 0304 	bic.w	r3, r3, #4
 8002ae0:	6023      	str	r3, [r4, #0]
 8002ae2:	f04f 0900 	mov.w	r9, #0
 8002ae6:	9700      	str	r7, [sp, #0]
 8002ae8:	4633      	mov	r3, r6
 8002aea:	aa0b      	add	r2, sp, #44	; 0x2c
 8002aec:	4621      	mov	r1, r4
 8002aee:	4628      	mov	r0, r5
 8002af0:	f000 f9da 	bl	8002ea8 <_printf_common>
 8002af4:	3001      	adds	r0, #1
 8002af6:	f040 8090 	bne.w	8002c1a <_printf_float+0x1de>
 8002afa:	f04f 30ff 	mov.w	r0, #4294967295
 8002afe:	b00d      	add	sp, #52	; 0x34
 8002b00:	ecbd 8b02 	vpop	{d8}
 8002b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b08:	4642      	mov	r2, r8
 8002b0a:	464b      	mov	r3, r9
 8002b0c:	4640      	mov	r0, r8
 8002b0e:	4649      	mov	r1, r9
 8002b10:	f7fe f814 	bl	8000b3c <__aeabi_dcmpun>
 8002b14:	b140      	cbz	r0, 8002b28 <_printf_float+0xec>
 8002b16:	464b      	mov	r3, r9
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	bfbc      	itt	lt
 8002b1c:	232d      	movlt	r3, #45	; 0x2d
 8002b1e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002b22:	4a7f      	ldr	r2, [pc, #508]	; (8002d20 <_printf_float+0x2e4>)
 8002b24:	4b7f      	ldr	r3, [pc, #508]	; (8002d24 <_printf_float+0x2e8>)
 8002b26:	e7d1      	b.n	8002acc <_printf_float+0x90>
 8002b28:	6863      	ldr	r3, [r4, #4]
 8002b2a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8002b2e:	9206      	str	r2, [sp, #24]
 8002b30:	1c5a      	adds	r2, r3, #1
 8002b32:	d13f      	bne.n	8002bb4 <_printf_float+0x178>
 8002b34:	2306      	movs	r3, #6
 8002b36:	6063      	str	r3, [r4, #4]
 8002b38:	9b05      	ldr	r3, [sp, #20]
 8002b3a:	6861      	ldr	r1, [r4, #4]
 8002b3c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002b40:	2300      	movs	r3, #0
 8002b42:	9303      	str	r3, [sp, #12]
 8002b44:	ab0a      	add	r3, sp, #40	; 0x28
 8002b46:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002b4a:	ab09      	add	r3, sp, #36	; 0x24
 8002b4c:	ec49 8b10 	vmov	d0, r8, r9
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	6022      	str	r2, [r4, #0]
 8002b54:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002b58:	4628      	mov	r0, r5
 8002b5a:	f7ff fece 	bl	80028fa <__cvt>
 8002b5e:	9b06      	ldr	r3, [sp, #24]
 8002b60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002b62:	2b47      	cmp	r3, #71	; 0x47
 8002b64:	4680      	mov	r8, r0
 8002b66:	d108      	bne.n	8002b7a <_printf_float+0x13e>
 8002b68:	1cc8      	adds	r0, r1, #3
 8002b6a:	db02      	blt.n	8002b72 <_printf_float+0x136>
 8002b6c:	6863      	ldr	r3, [r4, #4]
 8002b6e:	4299      	cmp	r1, r3
 8002b70:	dd41      	ble.n	8002bf6 <_printf_float+0x1ba>
 8002b72:	f1ab 0302 	sub.w	r3, fp, #2
 8002b76:	fa5f fb83 	uxtb.w	fp, r3
 8002b7a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002b7e:	d820      	bhi.n	8002bc2 <_printf_float+0x186>
 8002b80:	3901      	subs	r1, #1
 8002b82:	465a      	mov	r2, fp
 8002b84:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002b88:	9109      	str	r1, [sp, #36]	; 0x24
 8002b8a:	f7ff ff18 	bl	80029be <__exponent>
 8002b8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b90:	1813      	adds	r3, r2, r0
 8002b92:	2a01      	cmp	r2, #1
 8002b94:	4681      	mov	r9, r0
 8002b96:	6123      	str	r3, [r4, #16]
 8002b98:	dc02      	bgt.n	8002ba0 <_printf_float+0x164>
 8002b9a:	6822      	ldr	r2, [r4, #0]
 8002b9c:	07d2      	lsls	r2, r2, #31
 8002b9e:	d501      	bpl.n	8002ba4 <_printf_float+0x168>
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	6123      	str	r3, [r4, #16]
 8002ba4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d09c      	beq.n	8002ae6 <_printf_float+0xaa>
 8002bac:	232d      	movs	r3, #45	; 0x2d
 8002bae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bb2:	e798      	b.n	8002ae6 <_printf_float+0xaa>
 8002bb4:	9a06      	ldr	r2, [sp, #24]
 8002bb6:	2a47      	cmp	r2, #71	; 0x47
 8002bb8:	d1be      	bne.n	8002b38 <_printf_float+0xfc>
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1bc      	bne.n	8002b38 <_printf_float+0xfc>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e7b9      	b.n	8002b36 <_printf_float+0xfa>
 8002bc2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002bc6:	d118      	bne.n	8002bfa <_printf_float+0x1be>
 8002bc8:	2900      	cmp	r1, #0
 8002bca:	6863      	ldr	r3, [r4, #4]
 8002bcc:	dd0b      	ble.n	8002be6 <_printf_float+0x1aa>
 8002bce:	6121      	str	r1, [r4, #16]
 8002bd0:	b913      	cbnz	r3, 8002bd8 <_printf_float+0x19c>
 8002bd2:	6822      	ldr	r2, [r4, #0]
 8002bd4:	07d0      	lsls	r0, r2, #31
 8002bd6:	d502      	bpl.n	8002bde <_printf_float+0x1a2>
 8002bd8:	3301      	adds	r3, #1
 8002bda:	440b      	add	r3, r1
 8002bdc:	6123      	str	r3, [r4, #16]
 8002bde:	65a1      	str	r1, [r4, #88]	; 0x58
 8002be0:	f04f 0900 	mov.w	r9, #0
 8002be4:	e7de      	b.n	8002ba4 <_printf_float+0x168>
 8002be6:	b913      	cbnz	r3, 8002bee <_printf_float+0x1b2>
 8002be8:	6822      	ldr	r2, [r4, #0]
 8002bea:	07d2      	lsls	r2, r2, #31
 8002bec:	d501      	bpl.n	8002bf2 <_printf_float+0x1b6>
 8002bee:	3302      	adds	r3, #2
 8002bf0:	e7f4      	b.n	8002bdc <_printf_float+0x1a0>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e7f2      	b.n	8002bdc <_printf_float+0x1a0>
 8002bf6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002bfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bfc:	4299      	cmp	r1, r3
 8002bfe:	db05      	blt.n	8002c0c <_printf_float+0x1d0>
 8002c00:	6823      	ldr	r3, [r4, #0]
 8002c02:	6121      	str	r1, [r4, #16]
 8002c04:	07d8      	lsls	r0, r3, #31
 8002c06:	d5ea      	bpl.n	8002bde <_printf_float+0x1a2>
 8002c08:	1c4b      	adds	r3, r1, #1
 8002c0a:	e7e7      	b.n	8002bdc <_printf_float+0x1a0>
 8002c0c:	2900      	cmp	r1, #0
 8002c0e:	bfd4      	ite	le
 8002c10:	f1c1 0202 	rsble	r2, r1, #2
 8002c14:	2201      	movgt	r2, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	e7e0      	b.n	8002bdc <_printf_float+0x1a0>
 8002c1a:	6823      	ldr	r3, [r4, #0]
 8002c1c:	055a      	lsls	r2, r3, #21
 8002c1e:	d407      	bmi.n	8002c30 <_printf_float+0x1f4>
 8002c20:	6923      	ldr	r3, [r4, #16]
 8002c22:	4642      	mov	r2, r8
 8002c24:	4631      	mov	r1, r6
 8002c26:	4628      	mov	r0, r5
 8002c28:	47b8      	blx	r7
 8002c2a:	3001      	adds	r0, #1
 8002c2c:	d12c      	bne.n	8002c88 <_printf_float+0x24c>
 8002c2e:	e764      	b.n	8002afa <_printf_float+0xbe>
 8002c30:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002c34:	f240 80e0 	bls.w	8002df8 <_printf_float+0x3bc>
 8002c38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f7fd ff4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8002c44:	2800      	cmp	r0, #0
 8002c46:	d034      	beq.n	8002cb2 <_printf_float+0x276>
 8002c48:	4a37      	ldr	r2, [pc, #220]	; (8002d28 <_printf_float+0x2ec>)
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	4631      	mov	r1, r6
 8002c4e:	4628      	mov	r0, r5
 8002c50:	47b8      	blx	r7
 8002c52:	3001      	adds	r0, #1
 8002c54:	f43f af51 	beq.w	8002afa <_printf_float+0xbe>
 8002c58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	db02      	blt.n	8002c66 <_printf_float+0x22a>
 8002c60:	6823      	ldr	r3, [r4, #0]
 8002c62:	07d8      	lsls	r0, r3, #31
 8002c64:	d510      	bpl.n	8002c88 <_printf_float+0x24c>
 8002c66:	ee18 3a10 	vmov	r3, s16
 8002c6a:	4652      	mov	r2, sl
 8002c6c:	4631      	mov	r1, r6
 8002c6e:	4628      	mov	r0, r5
 8002c70:	47b8      	blx	r7
 8002c72:	3001      	adds	r0, #1
 8002c74:	f43f af41 	beq.w	8002afa <_printf_float+0xbe>
 8002c78:	f04f 0800 	mov.w	r8, #0
 8002c7c:	f104 091a 	add.w	r9, r4, #26
 8002c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c82:	3b01      	subs	r3, #1
 8002c84:	4543      	cmp	r3, r8
 8002c86:	dc09      	bgt.n	8002c9c <_printf_float+0x260>
 8002c88:	6823      	ldr	r3, [r4, #0]
 8002c8a:	079b      	lsls	r3, r3, #30
 8002c8c:	f100 8107 	bmi.w	8002e9e <_printf_float+0x462>
 8002c90:	68e0      	ldr	r0, [r4, #12]
 8002c92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c94:	4298      	cmp	r0, r3
 8002c96:	bfb8      	it	lt
 8002c98:	4618      	movlt	r0, r3
 8002c9a:	e730      	b.n	8002afe <_printf_float+0xc2>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	464a      	mov	r2, r9
 8002ca0:	4631      	mov	r1, r6
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	47b8      	blx	r7
 8002ca6:	3001      	adds	r0, #1
 8002ca8:	f43f af27 	beq.w	8002afa <_printf_float+0xbe>
 8002cac:	f108 0801 	add.w	r8, r8, #1
 8002cb0:	e7e6      	b.n	8002c80 <_printf_float+0x244>
 8002cb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	dc39      	bgt.n	8002d2c <_printf_float+0x2f0>
 8002cb8:	4a1b      	ldr	r2, [pc, #108]	; (8002d28 <_printf_float+0x2ec>)
 8002cba:	2301      	movs	r3, #1
 8002cbc:	4631      	mov	r1, r6
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	47b8      	blx	r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	f43f af19 	beq.w	8002afa <_printf_float+0xbe>
 8002cc8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	d102      	bne.n	8002cd6 <_printf_float+0x29a>
 8002cd0:	6823      	ldr	r3, [r4, #0]
 8002cd2:	07d9      	lsls	r1, r3, #31
 8002cd4:	d5d8      	bpl.n	8002c88 <_printf_float+0x24c>
 8002cd6:	ee18 3a10 	vmov	r3, s16
 8002cda:	4652      	mov	r2, sl
 8002cdc:	4631      	mov	r1, r6
 8002cde:	4628      	mov	r0, r5
 8002ce0:	47b8      	blx	r7
 8002ce2:	3001      	adds	r0, #1
 8002ce4:	f43f af09 	beq.w	8002afa <_printf_float+0xbe>
 8002ce8:	f04f 0900 	mov.w	r9, #0
 8002cec:	f104 0a1a 	add.w	sl, r4, #26
 8002cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cf2:	425b      	negs	r3, r3
 8002cf4:	454b      	cmp	r3, r9
 8002cf6:	dc01      	bgt.n	8002cfc <_printf_float+0x2c0>
 8002cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002cfa:	e792      	b.n	8002c22 <_printf_float+0x1e6>
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	4652      	mov	r2, sl
 8002d00:	4631      	mov	r1, r6
 8002d02:	4628      	mov	r0, r5
 8002d04:	47b8      	blx	r7
 8002d06:	3001      	adds	r0, #1
 8002d08:	f43f aef7 	beq.w	8002afa <_printf_float+0xbe>
 8002d0c:	f109 0901 	add.w	r9, r9, #1
 8002d10:	e7ee      	b.n	8002cf0 <_printf_float+0x2b4>
 8002d12:	bf00      	nop
 8002d14:	7fefffff 	.word	0x7fefffff
 8002d18:	08005345 	.word	0x08005345
 8002d1c:	08005349 	.word	0x08005349
 8002d20:	0800534d 	.word	0x0800534d
 8002d24:	08005351 	.word	0x08005351
 8002d28:	08005355 	.word	0x08005355
 8002d2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d30:	429a      	cmp	r2, r3
 8002d32:	bfa8      	it	ge
 8002d34:	461a      	movge	r2, r3
 8002d36:	2a00      	cmp	r2, #0
 8002d38:	4691      	mov	r9, r2
 8002d3a:	dc37      	bgt.n	8002dac <_printf_float+0x370>
 8002d3c:	f04f 0b00 	mov.w	fp, #0
 8002d40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002d44:	f104 021a 	add.w	r2, r4, #26
 8002d48:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002d4a:	9305      	str	r3, [sp, #20]
 8002d4c:	eba3 0309 	sub.w	r3, r3, r9
 8002d50:	455b      	cmp	r3, fp
 8002d52:	dc33      	bgt.n	8002dbc <_printf_float+0x380>
 8002d54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	db3b      	blt.n	8002dd4 <_printf_float+0x398>
 8002d5c:	6823      	ldr	r3, [r4, #0]
 8002d5e:	07da      	lsls	r2, r3, #31
 8002d60:	d438      	bmi.n	8002dd4 <_printf_float+0x398>
 8002d62:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002d66:	eba2 0903 	sub.w	r9, r2, r3
 8002d6a:	9b05      	ldr	r3, [sp, #20]
 8002d6c:	1ad2      	subs	r2, r2, r3
 8002d6e:	4591      	cmp	r9, r2
 8002d70:	bfa8      	it	ge
 8002d72:	4691      	movge	r9, r2
 8002d74:	f1b9 0f00 	cmp.w	r9, #0
 8002d78:	dc35      	bgt.n	8002de6 <_printf_float+0x3aa>
 8002d7a:	f04f 0800 	mov.w	r8, #0
 8002d7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002d82:	f104 0a1a 	add.w	sl, r4, #26
 8002d86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	eba3 0309 	sub.w	r3, r3, r9
 8002d90:	4543      	cmp	r3, r8
 8002d92:	f77f af79 	ble.w	8002c88 <_printf_float+0x24c>
 8002d96:	2301      	movs	r3, #1
 8002d98:	4652      	mov	r2, sl
 8002d9a:	4631      	mov	r1, r6
 8002d9c:	4628      	mov	r0, r5
 8002d9e:	47b8      	blx	r7
 8002da0:	3001      	adds	r0, #1
 8002da2:	f43f aeaa 	beq.w	8002afa <_printf_float+0xbe>
 8002da6:	f108 0801 	add.w	r8, r8, #1
 8002daa:	e7ec      	b.n	8002d86 <_printf_float+0x34a>
 8002dac:	4613      	mov	r3, r2
 8002dae:	4631      	mov	r1, r6
 8002db0:	4642      	mov	r2, r8
 8002db2:	4628      	mov	r0, r5
 8002db4:	47b8      	blx	r7
 8002db6:	3001      	adds	r0, #1
 8002db8:	d1c0      	bne.n	8002d3c <_printf_float+0x300>
 8002dba:	e69e      	b.n	8002afa <_printf_float+0xbe>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	4631      	mov	r1, r6
 8002dc0:	4628      	mov	r0, r5
 8002dc2:	9205      	str	r2, [sp, #20]
 8002dc4:	47b8      	blx	r7
 8002dc6:	3001      	adds	r0, #1
 8002dc8:	f43f ae97 	beq.w	8002afa <_printf_float+0xbe>
 8002dcc:	9a05      	ldr	r2, [sp, #20]
 8002dce:	f10b 0b01 	add.w	fp, fp, #1
 8002dd2:	e7b9      	b.n	8002d48 <_printf_float+0x30c>
 8002dd4:	ee18 3a10 	vmov	r3, s16
 8002dd8:	4652      	mov	r2, sl
 8002dda:	4631      	mov	r1, r6
 8002ddc:	4628      	mov	r0, r5
 8002dde:	47b8      	blx	r7
 8002de0:	3001      	adds	r0, #1
 8002de2:	d1be      	bne.n	8002d62 <_printf_float+0x326>
 8002de4:	e689      	b.n	8002afa <_printf_float+0xbe>
 8002de6:	9a05      	ldr	r2, [sp, #20]
 8002de8:	464b      	mov	r3, r9
 8002dea:	4442      	add	r2, r8
 8002dec:	4631      	mov	r1, r6
 8002dee:	4628      	mov	r0, r5
 8002df0:	47b8      	blx	r7
 8002df2:	3001      	adds	r0, #1
 8002df4:	d1c1      	bne.n	8002d7a <_printf_float+0x33e>
 8002df6:	e680      	b.n	8002afa <_printf_float+0xbe>
 8002df8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002dfa:	2a01      	cmp	r2, #1
 8002dfc:	dc01      	bgt.n	8002e02 <_printf_float+0x3c6>
 8002dfe:	07db      	lsls	r3, r3, #31
 8002e00:	d53a      	bpl.n	8002e78 <_printf_float+0x43c>
 8002e02:	2301      	movs	r3, #1
 8002e04:	4642      	mov	r2, r8
 8002e06:	4631      	mov	r1, r6
 8002e08:	4628      	mov	r0, r5
 8002e0a:	47b8      	blx	r7
 8002e0c:	3001      	adds	r0, #1
 8002e0e:	f43f ae74 	beq.w	8002afa <_printf_float+0xbe>
 8002e12:	ee18 3a10 	vmov	r3, s16
 8002e16:	4652      	mov	r2, sl
 8002e18:	4631      	mov	r1, r6
 8002e1a:	4628      	mov	r0, r5
 8002e1c:	47b8      	blx	r7
 8002e1e:	3001      	adds	r0, #1
 8002e20:	f43f ae6b 	beq.w	8002afa <_printf_float+0xbe>
 8002e24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8002e30:	f7fd fe52 	bl	8000ad8 <__aeabi_dcmpeq>
 8002e34:	b9d8      	cbnz	r0, 8002e6e <_printf_float+0x432>
 8002e36:	f10a 33ff 	add.w	r3, sl, #4294967295
 8002e3a:	f108 0201 	add.w	r2, r8, #1
 8002e3e:	4631      	mov	r1, r6
 8002e40:	4628      	mov	r0, r5
 8002e42:	47b8      	blx	r7
 8002e44:	3001      	adds	r0, #1
 8002e46:	d10e      	bne.n	8002e66 <_printf_float+0x42a>
 8002e48:	e657      	b.n	8002afa <_printf_float+0xbe>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	4652      	mov	r2, sl
 8002e4e:	4631      	mov	r1, r6
 8002e50:	4628      	mov	r0, r5
 8002e52:	47b8      	blx	r7
 8002e54:	3001      	adds	r0, #1
 8002e56:	f43f ae50 	beq.w	8002afa <_printf_float+0xbe>
 8002e5a:	f108 0801 	add.w	r8, r8, #1
 8002e5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e60:	3b01      	subs	r3, #1
 8002e62:	4543      	cmp	r3, r8
 8002e64:	dcf1      	bgt.n	8002e4a <_printf_float+0x40e>
 8002e66:	464b      	mov	r3, r9
 8002e68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002e6c:	e6da      	b.n	8002c24 <_printf_float+0x1e8>
 8002e6e:	f04f 0800 	mov.w	r8, #0
 8002e72:	f104 0a1a 	add.w	sl, r4, #26
 8002e76:	e7f2      	b.n	8002e5e <_printf_float+0x422>
 8002e78:	2301      	movs	r3, #1
 8002e7a:	4642      	mov	r2, r8
 8002e7c:	e7df      	b.n	8002e3e <_printf_float+0x402>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	464a      	mov	r2, r9
 8002e82:	4631      	mov	r1, r6
 8002e84:	4628      	mov	r0, r5
 8002e86:	47b8      	blx	r7
 8002e88:	3001      	adds	r0, #1
 8002e8a:	f43f ae36 	beq.w	8002afa <_printf_float+0xbe>
 8002e8e:	f108 0801 	add.w	r8, r8, #1
 8002e92:	68e3      	ldr	r3, [r4, #12]
 8002e94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002e96:	1a5b      	subs	r3, r3, r1
 8002e98:	4543      	cmp	r3, r8
 8002e9a:	dcf0      	bgt.n	8002e7e <_printf_float+0x442>
 8002e9c:	e6f8      	b.n	8002c90 <_printf_float+0x254>
 8002e9e:	f04f 0800 	mov.w	r8, #0
 8002ea2:	f104 0919 	add.w	r9, r4, #25
 8002ea6:	e7f4      	b.n	8002e92 <_printf_float+0x456>

08002ea8 <_printf_common>:
 8002ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002eac:	4616      	mov	r6, r2
 8002eae:	4699      	mov	r9, r3
 8002eb0:	688a      	ldr	r2, [r1, #8]
 8002eb2:	690b      	ldr	r3, [r1, #16]
 8002eb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	bfb8      	it	lt
 8002ebc:	4613      	movlt	r3, r2
 8002ebe:	6033      	str	r3, [r6, #0]
 8002ec0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ec4:	4607      	mov	r7, r0
 8002ec6:	460c      	mov	r4, r1
 8002ec8:	b10a      	cbz	r2, 8002ece <_printf_common+0x26>
 8002eca:	3301      	adds	r3, #1
 8002ecc:	6033      	str	r3, [r6, #0]
 8002ece:	6823      	ldr	r3, [r4, #0]
 8002ed0:	0699      	lsls	r1, r3, #26
 8002ed2:	bf42      	ittt	mi
 8002ed4:	6833      	ldrmi	r3, [r6, #0]
 8002ed6:	3302      	addmi	r3, #2
 8002ed8:	6033      	strmi	r3, [r6, #0]
 8002eda:	6825      	ldr	r5, [r4, #0]
 8002edc:	f015 0506 	ands.w	r5, r5, #6
 8002ee0:	d106      	bne.n	8002ef0 <_printf_common+0x48>
 8002ee2:	f104 0a19 	add.w	sl, r4, #25
 8002ee6:	68e3      	ldr	r3, [r4, #12]
 8002ee8:	6832      	ldr	r2, [r6, #0]
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	42ab      	cmp	r3, r5
 8002eee:	dc26      	bgt.n	8002f3e <_printf_common+0x96>
 8002ef0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ef4:	1e13      	subs	r3, r2, #0
 8002ef6:	6822      	ldr	r2, [r4, #0]
 8002ef8:	bf18      	it	ne
 8002efa:	2301      	movne	r3, #1
 8002efc:	0692      	lsls	r2, r2, #26
 8002efe:	d42b      	bmi.n	8002f58 <_printf_common+0xb0>
 8002f00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f04:	4649      	mov	r1, r9
 8002f06:	4638      	mov	r0, r7
 8002f08:	47c0      	blx	r8
 8002f0a:	3001      	adds	r0, #1
 8002f0c:	d01e      	beq.n	8002f4c <_printf_common+0xa4>
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	6922      	ldr	r2, [r4, #16]
 8002f12:	f003 0306 	and.w	r3, r3, #6
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	bf02      	ittt	eq
 8002f1a:	68e5      	ldreq	r5, [r4, #12]
 8002f1c:	6833      	ldreq	r3, [r6, #0]
 8002f1e:	1aed      	subeq	r5, r5, r3
 8002f20:	68a3      	ldr	r3, [r4, #8]
 8002f22:	bf0c      	ite	eq
 8002f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f28:	2500      	movne	r5, #0
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	bfc4      	itt	gt
 8002f2e:	1a9b      	subgt	r3, r3, r2
 8002f30:	18ed      	addgt	r5, r5, r3
 8002f32:	2600      	movs	r6, #0
 8002f34:	341a      	adds	r4, #26
 8002f36:	42b5      	cmp	r5, r6
 8002f38:	d11a      	bne.n	8002f70 <_printf_common+0xc8>
 8002f3a:	2000      	movs	r0, #0
 8002f3c:	e008      	b.n	8002f50 <_printf_common+0xa8>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	4652      	mov	r2, sl
 8002f42:	4649      	mov	r1, r9
 8002f44:	4638      	mov	r0, r7
 8002f46:	47c0      	blx	r8
 8002f48:	3001      	adds	r0, #1
 8002f4a:	d103      	bne.n	8002f54 <_printf_common+0xac>
 8002f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f54:	3501      	adds	r5, #1
 8002f56:	e7c6      	b.n	8002ee6 <_printf_common+0x3e>
 8002f58:	18e1      	adds	r1, r4, r3
 8002f5a:	1c5a      	adds	r2, r3, #1
 8002f5c:	2030      	movs	r0, #48	; 0x30
 8002f5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f62:	4422      	add	r2, r4
 8002f64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f6c:	3302      	adds	r3, #2
 8002f6e:	e7c7      	b.n	8002f00 <_printf_common+0x58>
 8002f70:	2301      	movs	r3, #1
 8002f72:	4622      	mov	r2, r4
 8002f74:	4649      	mov	r1, r9
 8002f76:	4638      	mov	r0, r7
 8002f78:	47c0      	blx	r8
 8002f7a:	3001      	adds	r0, #1
 8002f7c:	d0e6      	beq.n	8002f4c <_printf_common+0xa4>
 8002f7e:	3601      	adds	r6, #1
 8002f80:	e7d9      	b.n	8002f36 <_printf_common+0x8e>
	...

08002f84 <_printf_i>:
 8002f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f88:	7e0f      	ldrb	r7, [r1, #24]
 8002f8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f8c:	2f78      	cmp	r7, #120	; 0x78
 8002f8e:	4691      	mov	r9, r2
 8002f90:	4680      	mov	r8, r0
 8002f92:	460c      	mov	r4, r1
 8002f94:	469a      	mov	sl, r3
 8002f96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f9a:	d807      	bhi.n	8002fac <_printf_i+0x28>
 8002f9c:	2f62      	cmp	r7, #98	; 0x62
 8002f9e:	d80a      	bhi.n	8002fb6 <_printf_i+0x32>
 8002fa0:	2f00      	cmp	r7, #0
 8002fa2:	f000 80d4 	beq.w	800314e <_printf_i+0x1ca>
 8002fa6:	2f58      	cmp	r7, #88	; 0x58
 8002fa8:	f000 80c0 	beq.w	800312c <_printf_i+0x1a8>
 8002fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002fb4:	e03a      	b.n	800302c <_printf_i+0xa8>
 8002fb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002fba:	2b15      	cmp	r3, #21
 8002fbc:	d8f6      	bhi.n	8002fac <_printf_i+0x28>
 8002fbe:	a101      	add	r1, pc, #4	; (adr r1, 8002fc4 <_printf_i+0x40>)
 8002fc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fc4:	0800301d 	.word	0x0800301d
 8002fc8:	08003031 	.word	0x08003031
 8002fcc:	08002fad 	.word	0x08002fad
 8002fd0:	08002fad 	.word	0x08002fad
 8002fd4:	08002fad 	.word	0x08002fad
 8002fd8:	08002fad 	.word	0x08002fad
 8002fdc:	08003031 	.word	0x08003031
 8002fe0:	08002fad 	.word	0x08002fad
 8002fe4:	08002fad 	.word	0x08002fad
 8002fe8:	08002fad 	.word	0x08002fad
 8002fec:	08002fad 	.word	0x08002fad
 8002ff0:	08003135 	.word	0x08003135
 8002ff4:	0800305d 	.word	0x0800305d
 8002ff8:	080030ef 	.word	0x080030ef
 8002ffc:	08002fad 	.word	0x08002fad
 8003000:	08002fad 	.word	0x08002fad
 8003004:	08003157 	.word	0x08003157
 8003008:	08002fad 	.word	0x08002fad
 800300c:	0800305d 	.word	0x0800305d
 8003010:	08002fad 	.word	0x08002fad
 8003014:	08002fad 	.word	0x08002fad
 8003018:	080030f7 	.word	0x080030f7
 800301c:	682b      	ldr	r3, [r5, #0]
 800301e:	1d1a      	adds	r2, r3, #4
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	602a      	str	r2, [r5, #0]
 8003024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800302c:	2301      	movs	r3, #1
 800302e:	e09f      	b.n	8003170 <_printf_i+0x1ec>
 8003030:	6820      	ldr	r0, [r4, #0]
 8003032:	682b      	ldr	r3, [r5, #0]
 8003034:	0607      	lsls	r7, r0, #24
 8003036:	f103 0104 	add.w	r1, r3, #4
 800303a:	6029      	str	r1, [r5, #0]
 800303c:	d501      	bpl.n	8003042 <_printf_i+0xbe>
 800303e:	681e      	ldr	r6, [r3, #0]
 8003040:	e003      	b.n	800304a <_printf_i+0xc6>
 8003042:	0646      	lsls	r6, r0, #25
 8003044:	d5fb      	bpl.n	800303e <_printf_i+0xba>
 8003046:	f9b3 6000 	ldrsh.w	r6, [r3]
 800304a:	2e00      	cmp	r6, #0
 800304c:	da03      	bge.n	8003056 <_printf_i+0xd2>
 800304e:	232d      	movs	r3, #45	; 0x2d
 8003050:	4276      	negs	r6, r6
 8003052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003056:	485a      	ldr	r0, [pc, #360]	; (80031c0 <_printf_i+0x23c>)
 8003058:	230a      	movs	r3, #10
 800305a:	e012      	b.n	8003082 <_printf_i+0xfe>
 800305c:	682b      	ldr	r3, [r5, #0]
 800305e:	6820      	ldr	r0, [r4, #0]
 8003060:	1d19      	adds	r1, r3, #4
 8003062:	6029      	str	r1, [r5, #0]
 8003064:	0605      	lsls	r5, r0, #24
 8003066:	d501      	bpl.n	800306c <_printf_i+0xe8>
 8003068:	681e      	ldr	r6, [r3, #0]
 800306a:	e002      	b.n	8003072 <_printf_i+0xee>
 800306c:	0641      	lsls	r1, r0, #25
 800306e:	d5fb      	bpl.n	8003068 <_printf_i+0xe4>
 8003070:	881e      	ldrh	r6, [r3, #0]
 8003072:	4853      	ldr	r0, [pc, #332]	; (80031c0 <_printf_i+0x23c>)
 8003074:	2f6f      	cmp	r7, #111	; 0x6f
 8003076:	bf0c      	ite	eq
 8003078:	2308      	moveq	r3, #8
 800307a:	230a      	movne	r3, #10
 800307c:	2100      	movs	r1, #0
 800307e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003082:	6865      	ldr	r5, [r4, #4]
 8003084:	60a5      	str	r5, [r4, #8]
 8003086:	2d00      	cmp	r5, #0
 8003088:	bfa2      	ittt	ge
 800308a:	6821      	ldrge	r1, [r4, #0]
 800308c:	f021 0104 	bicge.w	r1, r1, #4
 8003090:	6021      	strge	r1, [r4, #0]
 8003092:	b90e      	cbnz	r6, 8003098 <_printf_i+0x114>
 8003094:	2d00      	cmp	r5, #0
 8003096:	d04b      	beq.n	8003130 <_printf_i+0x1ac>
 8003098:	4615      	mov	r5, r2
 800309a:	fbb6 f1f3 	udiv	r1, r6, r3
 800309e:	fb03 6711 	mls	r7, r3, r1, r6
 80030a2:	5dc7      	ldrb	r7, [r0, r7]
 80030a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80030a8:	4637      	mov	r7, r6
 80030aa:	42bb      	cmp	r3, r7
 80030ac:	460e      	mov	r6, r1
 80030ae:	d9f4      	bls.n	800309a <_printf_i+0x116>
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	d10b      	bne.n	80030cc <_printf_i+0x148>
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	07de      	lsls	r6, r3, #31
 80030b8:	d508      	bpl.n	80030cc <_printf_i+0x148>
 80030ba:	6923      	ldr	r3, [r4, #16]
 80030bc:	6861      	ldr	r1, [r4, #4]
 80030be:	4299      	cmp	r1, r3
 80030c0:	bfde      	ittt	le
 80030c2:	2330      	movle	r3, #48	; 0x30
 80030c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80030cc:	1b52      	subs	r2, r2, r5
 80030ce:	6122      	str	r2, [r4, #16]
 80030d0:	f8cd a000 	str.w	sl, [sp]
 80030d4:	464b      	mov	r3, r9
 80030d6:	aa03      	add	r2, sp, #12
 80030d8:	4621      	mov	r1, r4
 80030da:	4640      	mov	r0, r8
 80030dc:	f7ff fee4 	bl	8002ea8 <_printf_common>
 80030e0:	3001      	adds	r0, #1
 80030e2:	d14a      	bne.n	800317a <_printf_i+0x1f6>
 80030e4:	f04f 30ff 	mov.w	r0, #4294967295
 80030e8:	b004      	add	sp, #16
 80030ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	f043 0320 	orr.w	r3, r3, #32
 80030f4:	6023      	str	r3, [r4, #0]
 80030f6:	4833      	ldr	r0, [pc, #204]	; (80031c4 <_printf_i+0x240>)
 80030f8:	2778      	movs	r7, #120	; 0x78
 80030fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	6829      	ldr	r1, [r5, #0]
 8003102:	061f      	lsls	r7, r3, #24
 8003104:	f851 6b04 	ldr.w	r6, [r1], #4
 8003108:	d402      	bmi.n	8003110 <_printf_i+0x18c>
 800310a:	065f      	lsls	r7, r3, #25
 800310c:	bf48      	it	mi
 800310e:	b2b6      	uxthmi	r6, r6
 8003110:	07df      	lsls	r7, r3, #31
 8003112:	bf48      	it	mi
 8003114:	f043 0320 	orrmi.w	r3, r3, #32
 8003118:	6029      	str	r1, [r5, #0]
 800311a:	bf48      	it	mi
 800311c:	6023      	strmi	r3, [r4, #0]
 800311e:	b91e      	cbnz	r6, 8003128 <_printf_i+0x1a4>
 8003120:	6823      	ldr	r3, [r4, #0]
 8003122:	f023 0320 	bic.w	r3, r3, #32
 8003126:	6023      	str	r3, [r4, #0]
 8003128:	2310      	movs	r3, #16
 800312a:	e7a7      	b.n	800307c <_printf_i+0xf8>
 800312c:	4824      	ldr	r0, [pc, #144]	; (80031c0 <_printf_i+0x23c>)
 800312e:	e7e4      	b.n	80030fa <_printf_i+0x176>
 8003130:	4615      	mov	r5, r2
 8003132:	e7bd      	b.n	80030b0 <_printf_i+0x12c>
 8003134:	682b      	ldr	r3, [r5, #0]
 8003136:	6826      	ldr	r6, [r4, #0]
 8003138:	6961      	ldr	r1, [r4, #20]
 800313a:	1d18      	adds	r0, r3, #4
 800313c:	6028      	str	r0, [r5, #0]
 800313e:	0635      	lsls	r5, r6, #24
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	d501      	bpl.n	8003148 <_printf_i+0x1c4>
 8003144:	6019      	str	r1, [r3, #0]
 8003146:	e002      	b.n	800314e <_printf_i+0x1ca>
 8003148:	0670      	lsls	r0, r6, #25
 800314a:	d5fb      	bpl.n	8003144 <_printf_i+0x1c0>
 800314c:	8019      	strh	r1, [r3, #0]
 800314e:	2300      	movs	r3, #0
 8003150:	6123      	str	r3, [r4, #16]
 8003152:	4615      	mov	r5, r2
 8003154:	e7bc      	b.n	80030d0 <_printf_i+0x14c>
 8003156:	682b      	ldr	r3, [r5, #0]
 8003158:	1d1a      	adds	r2, r3, #4
 800315a:	602a      	str	r2, [r5, #0]
 800315c:	681d      	ldr	r5, [r3, #0]
 800315e:	6862      	ldr	r2, [r4, #4]
 8003160:	2100      	movs	r1, #0
 8003162:	4628      	mov	r0, r5
 8003164:	f7fd f83c 	bl	80001e0 <memchr>
 8003168:	b108      	cbz	r0, 800316e <_printf_i+0x1ea>
 800316a:	1b40      	subs	r0, r0, r5
 800316c:	6060      	str	r0, [r4, #4]
 800316e:	6863      	ldr	r3, [r4, #4]
 8003170:	6123      	str	r3, [r4, #16]
 8003172:	2300      	movs	r3, #0
 8003174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003178:	e7aa      	b.n	80030d0 <_printf_i+0x14c>
 800317a:	6923      	ldr	r3, [r4, #16]
 800317c:	462a      	mov	r2, r5
 800317e:	4649      	mov	r1, r9
 8003180:	4640      	mov	r0, r8
 8003182:	47d0      	blx	sl
 8003184:	3001      	adds	r0, #1
 8003186:	d0ad      	beq.n	80030e4 <_printf_i+0x160>
 8003188:	6823      	ldr	r3, [r4, #0]
 800318a:	079b      	lsls	r3, r3, #30
 800318c:	d413      	bmi.n	80031b6 <_printf_i+0x232>
 800318e:	68e0      	ldr	r0, [r4, #12]
 8003190:	9b03      	ldr	r3, [sp, #12]
 8003192:	4298      	cmp	r0, r3
 8003194:	bfb8      	it	lt
 8003196:	4618      	movlt	r0, r3
 8003198:	e7a6      	b.n	80030e8 <_printf_i+0x164>
 800319a:	2301      	movs	r3, #1
 800319c:	4632      	mov	r2, r6
 800319e:	4649      	mov	r1, r9
 80031a0:	4640      	mov	r0, r8
 80031a2:	47d0      	blx	sl
 80031a4:	3001      	adds	r0, #1
 80031a6:	d09d      	beq.n	80030e4 <_printf_i+0x160>
 80031a8:	3501      	adds	r5, #1
 80031aa:	68e3      	ldr	r3, [r4, #12]
 80031ac:	9903      	ldr	r1, [sp, #12]
 80031ae:	1a5b      	subs	r3, r3, r1
 80031b0:	42ab      	cmp	r3, r5
 80031b2:	dcf2      	bgt.n	800319a <_printf_i+0x216>
 80031b4:	e7eb      	b.n	800318e <_printf_i+0x20a>
 80031b6:	2500      	movs	r5, #0
 80031b8:	f104 0619 	add.w	r6, r4, #25
 80031bc:	e7f5      	b.n	80031aa <_printf_i+0x226>
 80031be:	bf00      	nop
 80031c0:	08005357 	.word	0x08005357
 80031c4:	08005368 	.word	0x08005368

080031c8 <std>:
 80031c8:	2300      	movs	r3, #0
 80031ca:	b510      	push	{r4, lr}
 80031cc:	4604      	mov	r4, r0
 80031ce:	e9c0 3300 	strd	r3, r3, [r0]
 80031d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031d6:	6083      	str	r3, [r0, #8]
 80031d8:	8181      	strh	r1, [r0, #12]
 80031da:	6643      	str	r3, [r0, #100]	; 0x64
 80031dc:	81c2      	strh	r2, [r0, #14]
 80031de:	6183      	str	r3, [r0, #24]
 80031e0:	4619      	mov	r1, r3
 80031e2:	2208      	movs	r2, #8
 80031e4:	305c      	adds	r0, #92	; 0x5c
 80031e6:	f000 f906 	bl	80033f6 <memset>
 80031ea:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <std+0x58>)
 80031ec:	6263      	str	r3, [r4, #36]	; 0x24
 80031ee:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <std+0x5c>)
 80031f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80031f2:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <std+0x60>)
 80031f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031f6:	4b0d      	ldr	r3, [pc, #52]	; (800322c <std+0x64>)
 80031f8:	6323      	str	r3, [r4, #48]	; 0x30
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <std+0x68>)
 80031fc:	6224      	str	r4, [r4, #32]
 80031fe:	429c      	cmp	r4, r3
 8003200:	d006      	beq.n	8003210 <std+0x48>
 8003202:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003206:	4294      	cmp	r4, r2
 8003208:	d002      	beq.n	8003210 <std+0x48>
 800320a:	33d0      	adds	r3, #208	; 0xd0
 800320c:	429c      	cmp	r4, r3
 800320e:	d105      	bne.n	800321c <std+0x54>
 8003210:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003218:	f000 b96a 	b.w	80034f0 <__retarget_lock_init_recursive>
 800321c:	bd10      	pop	{r4, pc}
 800321e:	bf00      	nop
 8003220:	08003371 	.word	0x08003371
 8003224:	08003393 	.word	0x08003393
 8003228:	080033cb 	.word	0x080033cb
 800322c:	080033ef 	.word	0x080033ef
 8003230:	200001f4 	.word	0x200001f4

08003234 <stdio_exit_handler>:
 8003234:	4a02      	ldr	r2, [pc, #8]	; (8003240 <stdio_exit_handler+0xc>)
 8003236:	4903      	ldr	r1, [pc, #12]	; (8003244 <stdio_exit_handler+0x10>)
 8003238:	4803      	ldr	r0, [pc, #12]	; (8003248 <stdio_exit_handler+0x14>)
 800323a:	f000 b869 	b.w	8003310 <_fwalk_sglue>
 800323e:	bf00      	nop
 8003240:	20000008 	.word	0x20000008
 8003244:	08004e79 	.word	0x08004e79
 8003248:	20000014 	.word	0x20000014

0800324c <cleanup_stdio>:
 800324c:	6841      	ldr	r1, [r0, #4]
 800324e:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <cleanup_stdio+0x34>)
 8003250:	4299      	cmp	r1, r3
 8003252:	b510      	push	{r4, lr}
 8003254:	4604      	mov	r4, r0
 8003256:	d001      	beq.n	800325c <cleanup_stdio+0x10>
 8003258:	f001 fe0e 	bl	8004e78 <_fflush_r>
 800325c:	68a1      	ldr	r1, [r4, #8]
 800325e:	4b09      	ldr	r3, [pc, #36]	; (8003284 <cleanup_stdio+0x38>)
 8003260:	4299      	cmp	r1, r3
 8003262:	d002      	beq.n	800326a <cleanup_stdio+0x1e>
 8003264:	4620      	mov	r0, r4
 8003266:	f001 fe07 	bl	8004e78 <_fflush_r>
 800326a:	68e1      	ldr	r1, [r4, #12]
 800326c:	4b06      	ldr	r3, [pc, #24]	; (8003288 <cleanup_stdio+0x3c>)
 800326e:	4299      	cmp	r1, r3
 8003270:	d004      	beq.n	800327c <cleanup_stdio+0x30>
 8003272:	4620      	mov	r0, r4
 8003274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003278:	f001 bdfe 	b.w	8004e78 <_fflush_r>
 800327c:	bd10      	pop	{r4, pc}
 800327e:	bf00      	nop
 8003280:	200001f4 	.word	0x200001f4
 8003284:	2000025c 	.word	0x2000025c
 8003288:	200002c4 	.word	0x200002c4

0800328c <global_stdio_init.part.0>:
 800328c:	b510      	push	{r4, lr}
 800328e:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <global_stdio_init.part.0+0x30>)
 8003290:	4c0b      	ldr	r4, [pc, #44]	; (80032c0 <global_stdio_init.part.0+0x34>)
 8003292:	4a0c      	ldr	r2, [pc, #48]	; (80032c4 <global_stdio_init.part.0+0x38>)
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	4620      	mov	r0, r4
 8003298:	2200      	movs	r2, #0
 800329a:	2104      	movs	r1, #4
 800329c:	f7ff ff94 	bl	80031c8 <std>
 80032a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80032a4:	2201      	movs	r2, #1
 80032a6:	2109      	movs	r1, #9
 80032a8:	f7ff ff8e 	bl	80031c8 <std>
 80032ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80032b0:	2202      	movs	r2, #2
 80032b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032b6:	2112      	movs	r1, #18
 80032b8:	f7ff bf86 	b.w	80031c8 <std>
 80032bc:	2000032c 	.word	0x2000032c
 80032c0:	200001f4 	.word	0x200001f4
 80032c4:	08003235 	.word	0x08003235

080032c8 <__sfp_lock_acquire>:
 80032c8:	4801      	ldr	r0, [pc, #4]	; (80032d0 <__sfp_lock_acquire+0x8>)
 80032ca:	f000 b912 	b.w	80034f2 <__retarget_lock_acquire_recursive>
 80032ce:	bf00      	nop
 80032d0:	20000335 	.word	0x20000335

080032d4 <__sfp_lock_release>:
 80032d4:	4801      	ldr	r0, [pc, #4]	; (80032dc <__sfp_lock_release+0x8>)
 80032d6:	f000 b90d 	b.w	80034f4 <__retarget_lock_release_recursive>
 80032da:	bf00      	nop
 80032dc:	20000335 	.word	0x20000335

080032e0 <__sinit>:
 80032e0:	b510      	push	{r4, lr}
 80032e2:	4604      	mov	r4, r0
 80032e4:	f7ff fff0 	bl	80032c8 <__sfp_lock_acquire>
 80032e8:	6a23      	ldr	r3, [r4, #32]
 80032ea:	b11b      	cbz	r3, 80032f4 <__sinit+0x14>
 80032ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032f0:	f7ff bff0 	b.w	80032d4 <__sfp_lock_release>
 80032f4:	4b04      	ldr	r3, [pc, #16]	; (8003308 <__sinit+0x28>)
 80032f6:	6223      	str	r3, [r4, #32]
 80032f8:	4b04      	ldr	r3, [pc, #16]	; (800330c <__sinit+0x2c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f5      	bne.n	80032ec <__sinit+0xc>
 8003300:	f7ff ffc4 	bl	800328c <global_stdio_init.part.0>
 8003304:	e7f2      	b.n	80032ec <__sinit+0xc>
 8003306:	bf00      	nop
 8003308:	0800324d 	.word	0x0800324d
 800330c:	2000032c 	.word	0x2000032c

08003310 <_fwalk_sglue>:
 8003310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003314:	4607      	mov	r7, r0
 8003316:	4688      	mov	r8, r1
 8003318:	4614      	mov	r4, r2
 800331a:	2600      	movs	r6, #0
 800331c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003320:	f1b9 0901 	subs.w	r9, r9, #1
 8003324:	d505      	bpl.n	8003332 <_fwalk_sglue+0x22>
 8003326:	6824      	ldr	r4, [r4, #0]
 8003328:	2c00      	cmp	r4, #0
 800332a:	d1f7      	bne.n	800331c <_fwalk_sglue+0xc>
 800332c:	4630      	mov	r0, r6
 800332e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003332:	89ab      	ldrh	r3, [r5, #12]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d907      	bls.n	8003348 <_fwalk_sglue+0x38>
 8003338:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800333c:	3301      	adds	r3, #1
 800333e:	d003      	beq.n	8003348 <_fwalk_sglue+0x38>
 8003340:	4629      	mov	r1, r5
 8003342:	4638      	mov	r0, r7
 8003344:	47c0      	blx	r8
 8003346:	4306      	orrs	r6, r0
 8003348:	3568      	adds	r5, #104	; 0x68
 800334a:	e7e9      	b.n	8003320 <_fwalk_sglue+0x10>

0800334c <iprintf>:
 800334c:	b40f      	push	{r0, r1, r2, r3}
 800334e:	b507      	push	{r0, r1, r2, lr}
 8003350:	4906      	ldr	r1, [pc, #24]	; (800336c <iprintf+0x20>)
 8003352:	ab04      	add	r3, sp, #16
 8003354:	6808      	ldr	r0, [r1, #0]
 8003356:	f853 2b04 	ldr.w	r2, [r3], #4
 800335a:	6881      	ldr	r1, [r0, #8]
 800335c:	9301      	str	r3, [sp, #4]
 800335e:	f001 fbeb 	bl	8004b38 <_vfiprintf_r>
 8003362:	b003      	add	sp, #12
 8003364:	f85d eb04 	ldr.w	lr, [sp], #4
 8003368:	b004      	add	sp, #16
 800336a:	4770      	bx	lr
 800336c:	20000060 	.word	0x20000060

08003370 <__sread>:
 8003370:	b510      	push	{r4, lr}
 8003372:	460c      	mov	r4, r1
 8003374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003378:	f000 f86c 	bl	8003454 <_read_r>
 800337c:	2800      	cmp	r0, #0
 800337e:	bfab      	itete	ge
 8003380:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003382:	89a3      	ldrhlt	r3, [r4, #12]
 8003384:	181b      	addge	r3, r3, r0
 8003386:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800338a:	bfac      	ite	ge
 800338c:	6563      	strge	r3, [r4, #84]	; 0x54
 800338e:	81a3      	strhlt	r3, [r4, #12]
 8003390:	bd10      	pop	{r4, pc}

08003392 <__swrite>:
 8003392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003396:	461f      	mov	r7, r3
 8003398:	898b      	ldrh	r3, [r1, #12]
 800339a:	05db      	lsls	r3, r3, #23
 800339c:	4605      	mov	r5, r0
 800339e:	460c      	mov	r4, r1
 80033a0:	4616      	mov	r6, r2
 80033a2:	d505      	bpl.n	80033b0 <__swrite+0x1e>
 80033a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033a8:	2302      	movs	r3, #2
 80033aa:	2200      	movs	r2, #0
 80033ac:	f000 f840 	bl	8003430 <_lseek_r>
 80033b0:	89a3      	ldrh	r3, [r4, #12]
 80033b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033ba:	81a3      	strh	r3, [r4, #12]
 80033bc:	4632      	mov	r2, r6
 80033be:	463b      	mov	r3, r7
 80033c0:	4628      	mov	r0, r5
 80033c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033c6:	f000 b857 	b.w	8003478 <_write_r>

080033ca <__sseek>:
 80033ca:	b510      	push	{r4, lr}
 80033cc:	460c      	mov	r4, r1
 80033ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033d2:	f000 f82d 	bl	8003430 <_lseek_r>
 80033d6:	1c43      	adds	r3, r0, #1
 80033d8:	89a3      	ldrh	r3, [r4, #12]
 80033da:	bf15      	itete	ne
 80033dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80033de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80033e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80033e6:	81a3      	strheq	r3, [r4, #12]
 80033e8:	bf18      	it	ne
 80033ea:	81a3      	strhne	r3, [r4, #12]
 80033ec:	bd10      	pop	{r4, pc}

080033ee <__sclose>:
 80033ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033f2:	f000 b80d 	b.w	8003410 <_close_r>

080033f6 <memset>:
 80033f6:	4402      	add	r2, r0
 80033f8:	4603      	mov	r3, r0
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d100      	bne.n	8003400 <memset+0xa>
 80033fe:	4770      	bx	lr
 8003400:	f803 1b01 	strb.w	r1, [r3], #1
 8003404:	e7f9      	b.n	80033fa <memset+0x4>
	...

08003408 <_localeconv_r>:
 8003408:	4800      	ldr	r0, [pc, #0]	; (800340c <_localeconv_r+0x4>)
 800340a:	4770      	bx	lr
 800340c:	20000154 	.word	0x20000154

08003410 <_close_r>:
 8003410:	b538      	push	{r3, r4, r5, lr}
 8003412:	4d06      	ldr	r5, [pc, #24]	; (800342c <_close_r+0x1c>)
 8003414:	2300      	movs	r3, #0
 8003416:	4604      	mov	r4, r0
 8003418:	4608      	mov	r0, r1
 800341a:	602b      	str	r3, [r5, #0]
 800341c:	f7ff f8a1 	bl	8002562 <_close>
 8003420:	1c43      	adds	r3, r0, #1
 8003422:	d102      	bne.n	800342a <_close_r+0x1a>
 8003424:	682b      	ldr	r3, [r5, #0]
 8003426:	b103      	cbz	r3, 800342a <_close_r+0x1a>
 8003428:	6023      	str	r3, [r4, #0]
 800342a:	bd38      	pop	{r3, r4, r5, pc}
 800342c:	20000330 	.word	0x20000330

08003430 <_lseek_r>:
 8003430:	b538      	push	{r3, r4, r5, lr}
 8003432:	4d07      	ldr	r5, [pc, #28]	; (8003450 <_lseek_r+0x20>)
 8003434:	4604      	mov	r4, r0
 8003436:	4608      	mov	r0, r1
 8003438:	4611      	mov	r1, r2
 800343a:	2200      	movs	r2, #0
 800343c:	602a      	str	r2, [r5, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	f7ff f8b6 	bl	80025b0 <_lseek>
 8003444:	1c43      	adds	r3, r0, #1
 8003446:	d102      	bne.n	800344e <_lseek_r+0x1e>
 8003448:	682b      	ldr	r3, [r5, #0]
 800344a:	b103      	cbz	r3, 800344e <_lseek_r+0x1e>
 800344c:	6023      	str	r3, [r4, #0]
 800344e:	bd38      	pop	{r3, r4, r5, pc}
 8003450:	20000330 	.word	0x20000330

08003454 <_read_r>:
 8003454:	b538      	push	{r3, r4, r5, lr}
 8003456:	4d07      	ldr	r5, [pc, #28]	; (8003474 <_read_r+0x20>)
 8003458:	4604      	mov	r4, r0
 800345a:	4608      	mov	r0, r1
 800345c:	4611      	mov	r1, r2
 800345e:	2200      	movs	r2, #0
 8003460:	602a      	str	r2, [r5, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	f7ff f844 	bl	80024f0 <_read>
 8003468:	1c43      	adds	r3, r0, #1
 800346a:	d102      	bne.n	8003472 <_read_r+0x1e>
 800346c:	682b      	ldr	r3, [r5, #0]
 800346e:	b103      	cbz	r3, 8003472 <_read_r+0x1e>
 8003470:	6023      	str	r3, [r4, #0]
 8003472:	bd38      	pop	{r3, r4, r5, pc}
 8003474:	20000330 	.word	0x20000330

08003478 <_write_r>:
 8003478:	b538      	push	{r3, r4, r5, lr}
 800347a:	4d07      	ldr	r5, [pc, #28]	; (8003498 <_write_r+0x20>)
 800347c:	4604      	mov	r4, r0
 800347e:	4608      	mov	r0, r1
 8003480:	4611      	mov	r1, r2
 8003482:	2200      	movs	r2, #0
 8003484:	602a      	str	r2, [r5, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	f7ff f84f 	bl	800252a <_write>
 800348c:	1c43      	adds	r3, r0, #1
 800348e:	d102      	bne.n	8003496 <_write_r+0x1e>
 8003490:	682b      	ldr	r3, [r5, #0]
 8003492:	b103      	cbz	r3, 8003496 <_write_r+0x1e>
 8003494:	6023      	str	r3, [r4, #0]
 8003496:	bd38      	pop	{r3, r4, r5, pc}
 8003498:	20000330 	.word	0x20000330

0800349c <__errno>:
 800349c:	4b01      	ldr	r3, [pc, #4]	; (80034a4 <__errno+0x8>)
 800349e:	6818      	ldr	r0, [r3, #0]
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	20000060 	.word	0x20000060

080034a8 <__libc_init_array>:
 80034a8:	b570      	push	{r4, r5, r6, lr}
 80034aa:	4d0d      	ldr	r5, [pc, #52]	; (80034e0 <__libc_init_array+0x38>)
 80034ac:	4c0d      	ldr	r4, [pc, #52]	; (80034e4 <__libc_init_array+0x3c>)
 80034ae:	1b64      	subs	r4, r4, r5
 80034b0:	10a4      	asrs	r4, r4, #2
 80034b2:	2600      	movs	r6, #0
 80034b4:	42a6      	cmp	r6, r4
 80034b6:	d109      	bne.n	80034cc <__libc_init_array+0x24>
 80034b8:	4d0b      	ldr	r5, [pc, #44]	; (80034e8 <__libc_init_array+0x40>)
 80034ba:	4c0c      	ldr	r4, [pc, #48]	; (80034ec <__libc_init_array+0x44>)
 80034bc:	f001 feee 	bl	800529c <_init>
 80034c0:	1b64      	subs	r4, r4, r5
 80034c2:	10a4      	asrs	r4, r4, #2
 80034c4:	2600      	movs	r6, #0
 80034c6:	42a6      	cmp	r6, r4
 80034c8:	d105      	bne.n	80034d6 <__libc_init_array+0x2e>
 80034ca:	bd70      	pop	{r4, r5, r6, pc}
 80034cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80034d0:	4798      	blx	r3
 80034d2:	3601      	adds	r6, #1
 80034d4:	e7ee      	b.n	80034b4 <__libc_init_array+0xc>
 80034d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80034da:	4798      	blx	r3
 80034dc:	3601      	adds	r6, #1
 80034de:	e7f2      	b.n	80034c6 <__libc_init_array+0x1e>
 80034e0:	080056b4 	.word	0x080056b4
 80034e4:	080056b4 	.word	0x080056b4
 80034e8:	080056b4 	.word	0x080056b4
 80034ec:	080056b8 	.word	0x080056b8

080034f0 <__retarget_lock_init_recursive>:
 80034f0:	4770      	bx	lr

080034f2 <__retarget_lock_acquire_recursive>:
 80034f2:	4770      	bx	lr

080034f4 <__retarget_lock_release_recursive>:
 80034f4:	4770      	bx	lr

080034f6 <quorem>:
 80034f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034fa:	6903      	ldr	r3, [r0, #16]
 80034fc:	690c      	ldr	r4, [r1, #16]
 80034fe:	42a3      	cmp	r3, r4
 8003500:	4607      	mov	r7, r0
 8003502:	db7e      	blt.n	8003602 <quorem+0x10c>
 8003504:	3c01      	subs	r4, #1
 8003506:	f101 0814 	add.w	r8, r1, #20
 800350a:	f100 0514 	add.w	r5, r0, #20
 800350e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003512:	9301      	str	r3, [sp, #4]
 8003514:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003518:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800351c:	3301      	adds	r3, #1
 800351e:	429a      	cmp	r2, r3
 8003520:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003524:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003528:	fbb2 f6f3 	udiv	r6, r2, r3
 800352c:	d331      	bcc.n	8003592 <quorem+0x9c>
 800352e:	f04f 0e00 	mov.w	lr, #0
 8003532:	4640      	mov	r0, r8
 8003534:	46ac      	mov	ip, r5
 8003536:	46f2      	mov	sl, lr
 8003538:	f850 2b04 	ldr.w	r2, [r0], #4
 800353c:	b293      	uxth	r3, r2
 800353e:	fb06 e303 	mla	r3, r6, r3, lr
 8003542:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003546:	0c1a      	lsrs	r2, r3, #16
 8003548:	b29b      	uxth	r3, r3
 800354a:	ebaa 0303 	sub.w	r3, sl, r3
 800354e:	f8dc a000 	ldr.w	sl, [ip]
 8003552:	fa13 f38a 	uxtah	r3, r3, sl
 8003556:	fb06 220e 	mla	r2, r6, lr, r2
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	9b00      	ldr	r3, [sp, #0]
 800355e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003562:	b292      	uxth	r2, r2
 8003564:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003568:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800356c:	f8bd 3000 	ldrh.w	r3, [sp]
 8003570:	4581      	cmp	r9, r0
 8003572:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003576:	f84c 3b04 	str.w	r3, [ip], #4
 800357a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800357e:	d2db      	bcs.n	8003538 <quorem+0x42>
 8003580:	f855 300b 	ldr.w	r3, [r5, fp]
 8003584:	b92b      	cbnz	r3, 8003592 <quorem+0x9c>
 8003586:	9b01      	ldr	r3, [sp, #4]
 8003588:	3b04      	subs	r3, #4
 800358a:	429d      	cmp	r5, r3
 800358c:	461a      	mov	r2, r3
 800358e:	d32c      	bcc.n	80035ea <quorem+0xf4>
 8003590:	613c      	str	r4, [r7, #16]
 8003592:	4638      	mov	r0, r7
 8003594:	f001 f9a6 	bl	80048e4 <__mcmp>
 8003598:	2800      	cmp	r0, #0
 800359a:	db22      	blt.n	80035e2 <quorem+0xec>
 800359c:	3601      	adds	r6, #1
 800359e:	4629      	mov	r1, r5
 80035a0:	2000      	movs	r0, #0
 80035a2:	f858 2b04 	ldr.w	r2, [r8], #4
 80035a6:	f8d1 c000 	ldr.w	ip, [r1]
 80035aa:	b293      	uxth	r3, r2
 80035ac:	1ac3      	subs	r3, r0, r3
 80035ae:	0c12      	lsrs	r2, r2, #16
 80035b0:	fa13 f38c 	uxtah	r3, r3, ip
 80035b4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80035b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80035bc:	b29b      	uxth	r3, r3
 80035be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80035c2:	45c1      	cmp	r9, r8
 80035c4:	f841 3b04 	str.w	r3, [r1], #4
 80035c8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80035cc:	d2e9      	bcs.n	80035a2 <quorem+0xac>
 80035ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80035d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80035d6:	b922      	cbnz	r2, 80035e2 <quorem+0xec>
 80035d8:	3b04      	subs	r3, #4
 80035da:	429d      	cmp	r5, r3
 80035dc:	461a      	mov	r2, r3
 80035de:	d30a      	bcc.n	80035f6 <quorem+0x100>
 80035e0:	613c      	str	r4, [r7, #16]
 80035e2:	4630      	mov	r0, r6
 80035e4:	b003      	add	sp, #12
 80035e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035ea:	6812      	ldr	r2, [r2, #0]
 80035ec:	3b04      	subs	r3, #4
 80035ee:	2a00      	cmp	r2, #0
 80035f0:	d1ce      	bne.n	8003590 <quorem+0x9a>
 80035f2:	3c01      	subs	r4, #1
 80035f4:	e7c9      	b.n	800358a <quorem+0x94>
 80035f6:	6812      	ldr	r2, [r2, #0]
 80035f8:	3b04      	subs	r3, #4
 80035fa:	2a00      	cmp	r2, #0
 80035fc:	d1f0      	bne.n	80035e0 <quorem+0xea>
 80035fe:	3c01      	subs	r4, #1
 8003600:	e7eb      	b.n	80035da <quorem+0xe4>
 8003602:	2000      	movs	r0, #0
 8003604:	e7ee      	b.n	80035e4 <quorem+0xee>
	...

08003608 <_dtoa_r>:
 8003608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800360c:	ed2d 8b04 	vpush	{d8-d9}
 8003610:	69c5      	ldr	r5, [r0, #28]
 8003612:	b093      	sub	sp, #76	; 0x4c
 8003614:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003618:	ec57 6b10 	vmov	r6, r7, d0
 800361c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003620:	9107      	str	r1, [sp, #28]
 8003622:	4604      	mov	r4, r0
 8003624:	920a      	str	r2, [sp, #40]	; 0x28
 8003626:	930d      	str	r3, [sp, #52]	; 0x34
 8003628:	b975      	cbnz	r5, 8003648 <_dtoa_r+0x40>
 800362a:	2010      	movs	r0, #16
 800362c:	f000 fe2a 	bl	8004284 <malloc>
 8003630:	4602      	mov	r2, r0
 8003632:	61e0      	str	r0, [r4, #28]
 8003634:	b920      	cbnz	r0, 8003640 <_dtoa_r+0x38>
 8003636:	4bae      	ldr	r3, [pc, #696]	; (80038f0 <_dtoa_r+0x2e8>)
 8003638:	21ef      	movs	r1, #239	; 0xef
 800363a:	48ae      	ldr	r0, [pc, #696]	; (80038f4 <_dtoa_r+0x2ec>)
 800363c:	f001 fcf8 	bl	8005030 <__assert_func>
 8003640:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003644:	6005      	str	r5, [r0, #0]
 8003646:	60c5      	str	r5, [r0, #12]
 8003648:	69e3      	ldr	r3, [r4, #28]
 800364a:	6819      	ldr	r1, [r3, #0]
 800364c:	b151      	cbz	r1, 8003664 <_dtoa_r+0x5c>
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	604a      	str	r2, [r1, #4]
 8003652:	2301      	movs	r3, #1
 8003654:	4093      	lsls	r3, r2
 8003656:	608b      	str	r3, [r1, #8]
 8003658:	4620      	mov	r0, r4
 800365a:	f000 ff07 	bl	800446c <_Bfree>
 800365e:	69e3      	ldr	r3, [r4, #28]
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	1e3b      	subs	r3, r7, #0
 8003666:	bfbb      	ittet	lt
 8003668:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800366c:	9303      	strlt	r3, [sp, #12]
 800366e:	2300      	movge	r3, #0
 8003670:	2201      	movlt	r2, #1
 8003672:	bfac      	ite	ge
 8003674:	f8c8 3000 	strge.w	r3, [r8]
 8003678:	f8c8 2000 	strlt.w	r2, [r8]
 800367c:	4b9e      	ldr	r3, [pc, #632]	; (80038f8 <_dtoa_r+0x2f0>)
 800367e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003682:	ea33 0308 	bics.w	r3, r3, r8
 8003686:	d11b      	bne.n	80036c0 <_dtoa_r+0xb8>
 8003688:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800368a:	f242 730f 	movw	r3, #9999	; 0x270f
 800368e:	6013      	str	r3, [r2, #0]
 8003690:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003694:	4333      	orrs	r3, r6
 8003696:	f000 8593 	beq.w	80041c0 <_dtoa_r+0xbb8>
 800369a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800369c:	b963      	cbnz	r3, 80036b8 <_dtoa_r+0xb0>
 800369e:	4b97      	ldr	r3, [pc, #604]	; (80038fc <_dtoa_r+0x2f4>)
 80036a0:	e027      	b.n	80036f2 <_dtoa_r+0xea>
 80036a2:	4b97      	ldr	r3, [pc, #604]	; (8003900 <_dtoa_r+0x2f8>)
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	3308      	adds	r3, #8
 80036a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	9800      	ldr	r0, [sp, #0]
 80036ae:	b013      	add	sp, #76	; 0x4c
 80036b0:	ecbd 8b04 	vpop	{d8-d9}
 80036b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036b8:	4b90      	ldr	r3, [pc, #576]	; (80038fc <_dtoa_r+0x2f4>)
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	3303      	adds	r3, #3
 80036be:	e7f3      	b.n	80036a8 <_dtoa_r+0xa0>
 80036c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80036c4:	2200      	movs	r2, #0
 80036c6:	ec51 0b17 	vmov	r0, r1, d7
 80036ca:	eeb0 8a47 	vmov.f32	s16, s14
 80036ce:	eef0 8a67 	vmov.f32	s17, s15
 80036d2:	2300      	movs	r3, #0
 80036d4:	f7fd fa00 	bl	8000ad8 <__aeabi_dcmpeq>
 80036d8:	4681      	mov	r9, r0
 80036da:	b160      	cbz	r0, 80036f6 <_dtoa_r+0xee>
 80036dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80036de:	2301      	movs	r3, #1
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 8568 	beq.w	80041ba <_dtoa_r+0xbb2>
 80036ea:	4b86      	ldr	r3, [pc, #536]	; (8003904 <_dtoa_r+0x2fc>)
 80036ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80036ee:	6013      	str	r3, [r2, #0]
 80036f0:	3b01      	subs	r3, #1
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	e7da      	b.n	80036ac <_dtoa_r+0xa4>
 80036f6:	aa10      	add	r2, sp, #64	; 0x40
 80036f8:	a911      	add	r1, sp, #68	; 0x44
 80036fa:	4620      	mov	r0, r4
 80036fc:	eeb0 0a48 	vmov.f32	s0, s16
 8003700:	eef0 0a68 	vmov.f32	s1, s17
 8003704:	f001 f994 	bl	8004a30 <__d2b>
 8003708:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800370c:	4682      	mov	sl, r0
 800370e:	2d00      	cmp	r5, #0
 8003710:	d07f      	beq.n	8003812 <_dtoa_r+0x20a>
 8003712:	ee18 3a90 	vmov	r3, s17
 8003716:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800371a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800371e:	ec51 0b18 	vmov	r0, r1, d8
 8003722:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003726:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800372a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800372e:	4619      	mov	r1, r3
 8003730:	2200      	movs	r2, #0
 8003732:	4b75      	ldr	r3, [pc, #468]	; (8003908 <_dtoa_r+0x300>)
 8003734:	f7fc fdb0 	bl	8000298 <__aeabi_dsub>
 8003738:	a367      	add	r3, pc, #412	; (adr r3, 80038d8 <_dtoa_r+0x2d0>)
 800373a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373e:	f7fc ff63 	bl	8000608 <__aeabi_dmul>
 8003742:	a367      	add	r3, pc, #412	; (adr r3, 80038e0 <_dtoa_r+0x2d8>)
 8003744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003748:	f7fc fda8 	bl	800029c <__adddf3>
 800374c:	4606      	mov	r6, r0
 800374e:	4628      	mov	r0, r5
 8003750:	460f      	mov	r7, r1
 8003752:	f7fc feef 	bl	8000534 <__aeabi_i2d>
 8003756:	a364      	add	r3, pc, #400	; (adr r3, 80038e8 <_dtoa_r+0x2e0>)
 8003758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375c:	f7fc ff54 	bl	8000608 <__aeabi_dmul>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4630      	mov	r0, r6
 8003766:	4639      	mov	r1, r7
 8003768:	f7fc fd98 	bl	800029c <__adddf3>
 800376c:	4606      	mov	r6, r0
 800376e:	460f      	mov	r7, r1
 8003770:	f7fd f9fa 	bl	8000b68 <__aeabi_d2iz>
 8003774:	2200      	movs	r2, #0
 8003776:	4683      	mov	fp, r0
 8003778:	2300      	movs	r3, #0
 800377a:	4630      	mov	r0, r6
 800377c:	4639      	mov	r1, r7
 800377e:	f7fd f9b5 	bl	8000aec <__aeabi_dcmplt>
 8003782:	b148      	cbz	r0, 8003798 <_dtoa_r+0x190>
 8003784:	4658      	mov	r0, fp
 8003786:	f7fc fed5 	bl	8000534 <__aeabi_i2d>
 800378a:	4632      	mov	r2, r6
 800378c:	463b      	mov	r3, r7
 800378e:	f7fd f9a3 	bl	8000ad8 <__aeabi_dcmpeq>
 8003792:	b908      	cbnz	r0, 8003798 <_dtoa_r+0x190>
 8003794:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003798:	f1bb 0f16 	cmp.w	fp, #22
 800379c:	d857      	bhi.n	800384e <_dtoa_r+0x246>
 800379e:	4b5b      	ldr	r3, [pc, #364]	; (800390c <_dtoa_r+0x304>)
 80037a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80037a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a8:	ec51 0b18 	vmov	r0, r1, d8
 80037ac:	f7fd f99e 	bl	8000aec <__aeabi_dcmplt>
 80037b0:	2800      	cmp	r0, #0
 80037b2:	d04e      	beq.n	8003852 <_dtoa_r+0x24a>
 80037b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80037b8:	2300      	movs	r3, #0
 80037ba:	930c      	str	r3, [sp, #48]	; 0x30
 80037bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80037be:	1b5b      	subs	r3, r3, r5
 80037c0:	1e5a      	subs	r2, r3, #1
 80037c2:	bf45      	ittet	mi
 80037c4:	f1c3 0301 	rsbmi	r3, r3, #1
 80037c8:	9305      	strmi	r3, [sp, #20]
 80037ca:	2300      	movpl	r3, #0
 80037cc:	2300      	movmi	r3, #0
 80037ce:	9206      	str	r2, [sp, #24]
 80037d0:	bf54      	ite	pl
 80037d2:	9305      	strpl	r3, [sp, #20]
 80037d4:	9306      	strmi	r3, [sp, #24]
 80037d6:	f1bb 0f00 	cmp.w	fp, #0
 80037da:	db3c      	blt.n	8003856 <_dtoa_r+0x24e>
 80037dc:	9b06      	ldr	r3, [sp, #24]
 80037de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80037e2:	445b      	add	r3, fp
 80037e4:	9306      	str	r3, [sp, #24]
 80037e6:	2300      	movs	r3, #0
 80037e8:	9308      	str	r3, [sp, #32]
 80037ea:	9b07      	ldr	r3, [sp, #28]
 80037ec:	2b09      	cmp	r3, #9
 80037ee:	d868      	bhi.n	80038c2 <_dtoa_r+0x2ba>
 80037f0:	2b05      	cmp	r3, #5
 80037f2:	bfc4      	itt	gt
 80037f4:	3b04      	subgt	r3, #4
 80037f6:	9307      	strgt	r3, [sp, #28]
 80037f8:	9b07      	ldr	r3, [sp, #28]
 80037fa:	f1a3 0302 	sub.w	r3, r3, #2
 80037fe:	bfcc      	ite	gt
 8003800:	2500      	movgt	r5, #0
 8003802:	2501      	movle	r5, #1
 8003804:	2b03      	cmp	r3, #3
 8003806:	f200 8085 	bhi.w	8003914 <_dtoa_r+0x30c>
 800380a:	e8df f003 	tbb	[pc, r3]
 800380e:	3b2e      	.short	0x3b2e
 8003810:	5839      	.short	0x5839
 8003812:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003816:	441d      	add	r5, r3
 8003818:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800381c:	2b20      	cmp	r3, #32
 800381e:	bfc1      	itttt	gt
 8003820:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003824:	fa08 f803 	lslgt.w	r8, r8, r3
 8003828:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800382c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003830:	bfd6      	itet	le
 8003832:	f1c3 0320 	rsble	r3, r3, #32
 8003836:	ea48 0003 	orrgt.w	r0, r8, r3
 800383a:	fa06 f003 	lslle.w	r0, r6, r3
 800383e:	f7fc fe69 	bl	8000514 <__aeabi_ui2d>
 8003842:	2201      	movs	r2, #1
 8003844:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003848:	3d01      	subs	r5, #1
 800384a:	920e      	str	r2, [sp, #56]	; 0x38
 800384c:	e76f      	b.n	800372e <_dtoa_r+0x126>
 800384e:	2301      	movs	r3, #1
 8003850:	e7b3      	b.n	80037ba <_dtoa_r+0x1b2>
 8003852:	900c      	str	r0, [sp, #48]	; 0x30
 8003854:	e7b2      	b.n	80037bc <_dtoa_r+0x1b4>
 8003856:	9b05      	ldr	r3, [sp, #20]
 8003858:	eba3 030b 	sub.w	r3, r3, fp
 800385c:	9305      	str	r3, [sp, #20]
 800385e:	f1cb 0300 	rsb	r3, fp, #0
 8003862:	9308      	str	r3, [sp, #32]
 8003864:	2300      	movs	r3, #0
 8003866:	930b      	str	r3, [sp, #44]	; 0x2c
 8003868:	e7bf      	b.n	80037ea <_dtoa_r+0x1e2>
 800386a:	2300      	movs	r3, #0
 800386c:	9309      	str	r3, [sp, #36]	; 0x24
 800386e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003870:	2b00      	cmp	r3, #0
 8003872:	dc52      	bgt.n	800391a <_dtoa_r+0x312>
 8003874:	2301      	movs	r3, #1
 8003876:	9301      	str	r3, [sp, #4]
 8003878:	9304      	str	r3, [sp, #16]
 800387a:	461a      	mov	r2, r3
 800387c:	920a      	str	r2, [sp, #40]	; 0x28
 800387e:	e00b      	b.n	8003898 <_dtoa_r+0x290>
 8003880:	2301      	movs	r3, #1
 8003882:	e7f3      	b.n	800386c <_dtoa_r+0x264>
 8003884:	2300      	movs	r3, #0
 8003886:	9309      	str	r3, [sp, #36]	; 0x24
 8003888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800388a:	445b      	add	r3, fp
 800388c:	9301      	str	r3, [sp, #4]
 800388e:	3301      	adds	r3, #1
 8003890:	2b01      	cmp	r3, #1
 8003892:	9304      	str	r3, [sp, #16]
 8003894:	bfb8      	it	lt
 8003896:	2301      	movlt	r3, #1
 8003898:	69e0      	ldr	r0, [r4, #28]
 800389a:	2100      	movs	r1, #0
 800389c:	2204      	movs	r2, #4
 800389e:	f102 0614 	add.w	r6, r2, #20
 80038a2:	429e      	cmp	r6, r3
 80038a4:	d93d      	bls.n	8003922 <_dtoa_r+0x31a>
 80038a6:	6041      	str	r1, [r0, #4]
 80038a8:	4620      	mov	r0, r4
 80038aa:	f000 fd9f 	bl	80043ec <_Balloc>
 80038ae:	9000      	str	r0, [sp, #0]
 80038b0:	2800      	cmp	r0, #0
 80038b2:	d139      	bne.n	8003928 <_dtoa_r+0x320>
 80038b4:	4b16      	ldr	r3, [pc, #88]	; (8003910 <_dtoa_r+0x308>)
 80038b6:	4602      	mov	r2, r0
 80038b8:	f240 11af 	movw	r1, #431	; 0x1af
 80038bc:	e6bd      	b.n	800363a <_dtoa_r+0x32>
 80038be:	2301      	movs	r3, #1
 80038c0:	e7e1      	b.n	8003886 <_dtoa_r+0x27e>
 80038c2:	2501      	movs	r5, #1
 80038c4:	2300      	movs	r3, #0
 80038c6:	9307      	str	r3, [sp, #28]
 80038c8:	9509      	str	r5, [sp, #36]	; 0x24
 80038ca:	f04f 33ff 	mov.w	r3, #4294967295
 80038ce:	9301      	str	r3, [sp, #4]
 80038d0:	9304      	str	r3, [sp, #16]
 80038d2:	2200      	movs	r2, #0
 80038d4:	2312      	movs	r3, #18
 80038d6:	e7d1      	b.n	800387c <_dtoa_r+0x274>
 80038d8:	636f4361 	.word	0x636f4361
 80038dc:	3fd287a7 	.word	0x3fd287a7
 80038e0:	8b60c8b3 	.word	0x8b60c8b3
 80038e4:	3fc68a28 	.word	0x3fc68a28
 80038e8:	509f79fb 	.word	0x509f79fb
 80038ec:	3fd34413 	.word	0x3fd34413
 80038f0:	08005386 	.word	0x08005386
 80038f4:	0800539d 	.word	0x0800539d
 80038f8:	7ff00000 	.word	0x7ff00000
 80038fc:	08005382 	.word	0x08005382
 8003900:	08005379 	.word	0x08005379
 8003904:	08005356 	.word	0x08005356
 8003908:	3ff80000 	.word	0x3ff80000
 800390c:	08005488 	.word	0x08005488
 8003910:	080053f5 	.word	0x080053f5
 8003914:	2301      	movs	r3, #1
 8003916:	9309      	str	r3, [sp, #36]	; 0x24
 8003918:	e7d7      	b.n	80038ca <_dtoa_r+0x2c2>
 800391a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800391c:	9301      	str	r3, [sp, #4]
 800391e:	9304      	str	r3, [sp, #16]
 8003920:	e7ba      	b.n	8003898 <_dtoa_r+0x290>
 8003922:	3101      	adds	r1, #1
 8003924:	0052      	lsls	r2, r2, #1
 8003926:	e7ba      	b.n	800389e <_dtoa_r+0x296>
 8003928:	69e3      	ldr	r3, [r4, #28]
 800392a:	9a00      	ldr	r2, [sp, #0]
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	9b04      	ldr	r3, [sp, #16]
 8003930:	2b0e      	cmp	r3, #14
 8003932:	f200 80a8 	bhi.w	8003a86 <_dtoa_r+0x47e>
 8003936:	2d00      	cmp	r5, #0
 8003938:	f000 80a5 	beq.w	8003a86 <_dtoa_r+0x47e>
 800393c:	f1bb 0f00 	cmp.w	fp, #0
 8003940:	dd38      	ble.n	80039b4 <_dtoa_r+0x3ac>
 8003942:	4bc0      	ldr	r3, [pc, #768]	; (8003c44 <_dtoa_r+0x63c>)
 8003944:	f00b 020f 	and.w	r2, fp, #15
 8003948:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800394c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003950:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003954:	ea4f 182b 	mov.w	r8, fp, asr #4
 8003958:	d019      	beq.n	800398e <_dtoa_r+0x386>
 800395a:	4bbb      	ldr	r3, [pc, #748]	; (8003c48 <_dtoa_r+0x640>)
 800395c:	ec51 0b18 	vmov	r0, r1, d8
 8003960:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003964:	f7fc ff7a 	bl	800085c <__aeabi_ddiv>
 8003968:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800396c:	f008 080f 	and.w	r8, r8, #15
 8003970:	2503      	movs	r5, #3
 8003972:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8003c48 <_dtoa_r+0x640>
 8003976:	f1b8 0f00 	cmp.w	r8, #0
 800397a:	d10a      	bne.n	8003992 <_dtoa_r+0x38a>
 800397c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003980:	4632      	mov	r2, r6
 8003982:	463b      	mov	r3, r7
 8003984:	f7fc ff6a 	bl	800085c <__aeabi_ddiv>
 8003988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800398c:	e02b      	b.n	80039e6 <_dtoa_r+0x3de>
 800398e:	2502      	movs	r5, #2
 8003990:	e7ef      	b.n	8003972 <_dtoa_r+0x36a>
 8003992:	f018 0f01 	tst.w	r8, #1
 8003996:	d008      	beq.n	80039aa <_dtoa_r+0x3a2>
 8003998:	4630      	mov	r0, r6
 800399a:	4639      	mov	r1, r7
 800399c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80039a0:	f7fc fe32 	bl	8000608 <__aeabi_dmul>
 80039a4:	3501      	adds	r5, #1
 80039a6:	4606      	mov	r6, r0
 80039a8:	460f      	mov	r7, r1
 80039aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80039ae:	f109 0908 	add.w	r9, r9, #8
 80039b2:	e7e0      	b.n	8003976 <_dtoa_r+0x36e>
 80039b4:	f000 809f 	beq.w	8003af6 <_dtoa_r+0x4ee>
 80039b8:	f1cb 0600 	rsb	r6, fp, #0
 80039bc:	4ba1      	ldr	r3, [pc, #644]	; (8003c44 <_dtoa_r+0x63c>)
 80039be:	4fa2      	ldr	r7, [pc, #648]	; (8003c48 <_dtoa_r+0x640>)
 80039c0:	f006 020f 	and.w	r2, r6, #15
 80039c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80039c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039cc:	ec51 0b18 	vmov	r0, r1, d8
 80039d0:	f7fc fe1a 	bl	8000608 <__aeabi_dmul>
 80039d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80039d8:	1136      	asrs	r6, r6, #4
 80039da:	2300      	movs	r3, #0
 80039dc:	2502      	movs	r5, #2
 80039de:	2e00      	cmp	r6, #0
 80039e0:	d17e      	bne.n	8003ae0 <_dtoa_r+0x4d8>
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1d0      	bne.n	8003988 <_dtoa_r+0x380>
 80039e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 8084 	beq.w	8003afa <_dtoa_r+0x4f2>
 80039f2:	4b96      	ldr	r3, [pc, #600]	; (8003c4c <_dtoa_r+0x644>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	4640      	mov	r0, r8
 80039f8:	4649      	mov	r1, r9
 80039fa:	f7fd f877 	bl	8000aec <__aeabi_dcmplt>
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d07b      	beq.n	8003afa <_dtoa_r+0x4f2>
 8003a02:	9b04      	ldr	r3, [sp, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d078      	beq.n	8003afa <_dtoa_r+0x4f2>
 8003a08:	9b01      	ldr	r3, [sp, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	dd39      	ble.n	8003a82 <_dtoa_r+0x47a>
 8003a0e:	4b90      	ldr	r3, [pc, #576]	; (8003c50 <_dtoa_r+0x648>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	4640      	mov	r0, r8
 8003a14:	4649      	mov	r1, r9
 8003a16:	f7fc fdf7 	bl	8000608 <__aeabi_dmul>
 8003a1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a1e:	9e01      	ldr	r6, [sp, #4]
 8003a20:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003a24:	3501      	adds	r5, #1
 8003a26:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	f7fc fd82 	bl	8000534 <__aeabi_i2d>
 8003a30:	4642      	mov	r2, r8
 8003a32:	464b      	mov	r3, r9
 8003a34:	f7fc fde8 	bl	8000608 <__aeabi_dmul>
 8003a38:	4b86      	ldr	r3, [pc, #536]	; (8003c54 <_dtoa_r+0x64c>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f7fc fc2e 	bl	800029c <__adddf3>
 8003a40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8003a44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a48:	9303      	str	r3, [sp, #12]
 8003a4a:	2e00      	cmp	r6, #0
 8003a4c:	d158      	bne.n	8003b00 <_dtoa_r+0x4f8>
 8003a4e:	4b82      	ldr	r3, [pc, #520]	; (8003c58 <_dtoa_r+0x650>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	4640      	mov	r0, r8
 8003a54:	4649      	mov	r1, r9
 8003a56:	f7fc fc1f 	bl	8000298 <__aeabi_dsub>
 8003a5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a5e:	4680      	mov	r8, r0
 8003a60:	4689      	mov	r9, r1
 8003a62:	f7fd f861 	bl	8000b28 <__aeabi_dcmpgt>
 8003a66:	2800      	cmp	r0, #0
 8003a68:	f040 8296 	bne.w	8003f98 <_dtoa_r+0x990>
 8003a6c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8003a70:	4640      	mov	r0, r8
 8003a72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003a76:	4649      	mov	r1, r9
 8003a78:	f7fd f838 	bl	8000aec <__aeabi_dcmplt>
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	f040 8289 	bne.w	8003f94 <_dtoa_r+0x98c>
 8003a82:	ed8d 8b02 	vstr	d8, [sp, #8]
 8003a86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f2c0 814e 	blt.w	8003d2a <_dtoa_r+0x722>
 8003a8e:	f1bb 0f0e 	cmp.w	fp, #14
 8003a92:	f300 814a 	bgt.w	8003d2a <_dtoa_r+0x722>
 8003a96:	4b6b      	ldr	r3, [pc, #428]	; (8003c44 <_dtoa_r+0x63c>)
 8003a98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003a9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003aa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f280 80dc 	bge.w	8003c60 <_dtoa_r+0x658>
 8003aa8:	9b04      	ldr	r3, [sp, #16]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f300 80d8 	bgt.w	8003c60 <_dtoa_r+0x658>
 8003ab0:	f040 826f 	bne.w	8003f92 <_dtoa_r+0x98a>
 8003ab4:	4b68      	ldr	r3, [pc, #416]	; (8003c58 <_dtoa_r+0x650>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	4640      	mov	r0, r8
 8003aba:	4649      	mov	r1, r9
 8003abc:	f7fc fda4 	bl	8000608 <__aeabi_dmul>
 8003ac0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ac4:	f7fd f826 	bl	8000b14 <__aeabi_dcmpge>
 8003ac8:	9e04      	ldr	r6, [sp, #16]
 8003aca:	4637      	mov	r7, r6
 8003acc:	2800      	cmp	r0, #0
 8003ace:	f040 8245 	bne.w	8003f5c <_dtoa_r+0x954>
 8003ad2:	9d00      	ldr	r5, [sp, #0]
 8003ad4:	2331      	movs	r3, #49	; 0x31
 8003ad6:	f805 3b01 	strb.w	r3, [r5], #1
 8003ada:	f10b 0b01 	add.w	fp, fp, #1
 8003ade:	e241      	b.n	8003f64 <_dtoa_r+0x95c>
 8003ae0:	07f2      	lsls	r2, r6, #31
 8003ae2:	d505      	bpl.n	8003af0 <_dtoa_r+0x4e8>
 8003ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ae8:	f7fc fd8e 	bl	8000608 <__aeabi_dmul>
 8003aec:	3501      	adds	r5, #1
 8003aee:	2301      	movs	r3, #1
 8003af0:	1076      	asrs	r6, r6, #1
 8003af2:	3708      	adds	r7, #8
 8003af4:	e773      	b.n	80039de <_dtoa_r+0x3d6>
 8003af6:	2502      	movs	r5, #2
 8003af8:	e775      	b.n	80039e6 <_dtoa_r+0x3de>
 8003afa:	9e04      	ldr	r6, [sp, #16]
 8003afc:	465f      	mov	r7, fp
 8003afe:	e792      	b.n	8003a26 <_dtoa_r+0x41e>
 8003b00:	9900      	ldr	r1, [sp, #0]
 8003b02:	4b50      	ldr	r3, [pc, #320]	; (8003c44 <_dtoa_r+0x63c>)
 8003b04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003b08:	4431      	add	r1, r6
 8003b0a:	9102      	str	r1, [sp, #8]
 8003b0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b0e:	eeb0 9a47 	vmov.f32	s18, s14
 8003b12:	eef0 9a67 	vmov.f32	s19, s15
 8003b16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003b1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003b1e:	2900      	cmp	r1, #0
 8003b20:	d044      	beq.n	8003bac <_dtoa_r+0x5a4>
 8003b22:	494e      	ldr	r1, [pc, #312]	; (8003c5c <_dtoa_r+0x654>)
 8003b24:	2000      	movs	r0, #0
 8003b26:	f7fc fe99 	bl	800085c <__aeabi_ddiv>
 8003b2a:	ec53 2b19 	vmov	r2, r3, d9
 8003b2e:	f7fc fbb3 	bl	8000298 <__aeabi_dsub>
 8003b32:	9d00      	ldr	r5, [sp, #0]
 8003b34:	ec41 0b19 	vmov	d9, r0, r1
 8003b38:	4649      	mov	r1, r9
 8003b3a:	4640      	mov	r0, r8
 8003b3c:	f7fd f814 	bl	8000b68 <__aeabi_d2iz>
 8003b40:	4606      	mov	r6, r0
 8003b42:	f7fc fcf7 	bl	8000534 <__aeabi_i2d>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4640      	mov	r0, r8
 8003b4c:	4649      	mov	r1, r9
 8003b4e:	f7fc fba3 	bl	8000298 <__aeabi_dsub>
 8003b52:	3630      	adds	r6, #48	; 0x30
 8003b54:	f805 6b01 	strb.w	r6, [r5], #1
 8003b58:	ec53 2b19 	vmov	r2, r3, d9
 8003b5c:	4680      	mov	r8, r0
 8003b5e:	4689      	mov	r9, r1
 8003b60:	f7fc ffc4 	bl	8000aec <__aeabi_dcmplt>
 8003b64:	2800      	cmp	r0, #0
 8003b66:	d164      	bne.n	8003c32 <_dtoa_r+0x62a>
 8003b68:	4642      	mov	r2, r8
 8003b6a:	464b      	mov	r3, r9
 8003b6c:	4937      	ldr	r1, [pc, #220]	; (8003c4c <_dtoa_r+0x644>)
 8003b6e:	2000      	movs	r0, #0
 8003b70:	f7fc fb92 	bl	8000298 <__aeabi_dsub>
 8003b74:	ec53 2b19 	vmov	r2, r3, d9
 8003b78:	f7fc ffb8 	bl	8000aec <__aeabi_dcmplt>
 8003b7c:	2800      	cmp	r0, #0
 8003b7e:	f040 80b6 	bne.w	8003cee <_dtoa_r+0x6e6>
 8003b82:	9b02      	ldr	r3, [sp, #8]
 8003b84:	429d      	cmp	r5, r3
 8003b86:	f43f af7c 	beq.w	8003a82 <_dtoa_r+0x47a>
 8003b8a:	4b31      	ldr	r3, [pc, #196]	; (8003c50 <_dtoa_r+0x648>)
 8003b8c:	ec51 0b19 	vmov	r0, r1, d9
 8003b90:	2200      	movs	r2, #0
 8003b92:	f7fc fd39 	bl	8000608 <__aeabi_dmul>
 8003b96:	4b2e      	ldr	r3, [pc, #184]	; (8003c50 <_dtoa_r+0x648>)
 8003b98:	ec41 0b19 	vmov	d9, r0, r1
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	4640      	mov	r0, r8
 8003ba0:	4649      	mov	r1, r9
 8003ba2:	f7fc fd31 	bl	8000608 <__aeabi_dmul>
 8003ba6:	4680      	mov	r8, r0
 8003ba8:	4689      	mov	r9, r1
 8003baa:	e7c5      	b.n	8003b38 <_dtoa_r+0x530>
 8003bac:	ec51 0b17 	vmov	r0, r1, d7
 8003bb0:	f7fc fd2a 	bl	8000608 <__aeabi_dmul>
 8003bb4:	9b02      	ldr	r3, [sp, #8]
 8003bb6:	9d00      	ldr	r5, [sp, #0]
 8003bb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8003bba:	ec41 0b19 	vmov	d9, r0, r1
 8003bbe:	4649      	mov	r1, r9
 8003bc0:	4640      	mov	r0, r8
 8003bc2:	f7fc ffd1 	bl	8000b68 <__aeabi_d2iz>
 8003bc6:	4606      	mov	r6, r0
 8003bc8:	f7fc fcb4 	bl	8000534 <__aeabi_i2d>
 8003bcc:	3630      	adds	r6, #48	; 0x30
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4640      	mov	r0, r8
 8003bd4:	4649      	mov	r1, r9
 8003bd6:	f7fc fb5f 	bl	8000298 <__aeabi_dsub>
 8003bda:	f805 6b01 	strb.w	r6, [r5], #1
 8003bde:	9b02      	ldr	r3, [sp, #8]
 8003be0:	429d      	cmp	r5, r3
 8003be2:	4680      	mov	r8, r0
 8003be4:	4689      	mov	r9, r1
 8003be6:	f04f 0200 	mov.w	r2, #0
 8003bea:	d124      	bne.n	8003c36 <_dtoa_r+0x62e>
 8003bec:	4b1b      	ldr	r3, [pc, #108]	; (8003c5c <_dtoa_r+0x654>)
 8003bee:	ec51 0b19 	vmov	r0, r1, d9
 8003bf2:	f7fc fb53 	bl	800029c <__adddf3>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4640      	mov	r0, r8
 8003bfc:	4649      	mov	r1, r9
 8003bfe:	f7fc ff93 	bl	8000b28 <__aeabi_dcmpgt>
 8003c02:	2800      	cmp	r0, #0
 8003c04:	d173      	bne.n	8003cee <_dtoa_r+0x6e6>
 8003c06:	ec53 2b19 	vmov	r2, r3, d9
 8003c0a:	4914      	ldr	r1, [pc, #80]	; (8003c5c <_dtoa_r+0x654>)
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	f7fc fb43 	bl	8000298 <__aeabi_dsub>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4640      	mov	r0, r8
 8003c18:	4649      	mov	r1, r9
 8003c1a:	f7fc ff67 	bl	8000aec <__aeabi_dcmplt>
 8003c1e:	2800      	cmp	r0, #0
 8003c20:	f43f af2f 	beq.w	8003a82 <_dtoa_r+0x47a>
 8003c24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003c26:	1e6b      	subs	r3, r5, #1
 8003c28:	930f      	str	r3, [sp, #60]	; 0x3c
 8003c2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003c2e:	2b30      	cmp	r3, #48	; 0x30
 8003c30:	d0f8      	beq.n	8003c24 <_dtoa_r+0x61c>
 8003c32:	46bb      	mov	fp, r7
 8003c34:	e04a      	b.n	8003ccc <_dtoa_r+0x6c4>
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <_dtoa_r+0x648>)
 8003c38:	f7fc fce6 	bl	8000608 <__aeabi_dmul>
 8003c3c:	4680      	mov	r8, r0
 8003c3e:	4689      	mov	r9, r1
 8003c40:	e7bd      	b.n	8003bbe <_dtoa_r+0x5b6>
 8003c42:	bf00      	nop
 8003c44:	08005488 	.word	0x08005488
 8003c48:	08005460 	.word	0x08005460
 8003c4c:	3ff00000 	.word	0x3ff00000
 8003c50:	40240000 	.word	0x40240000
 8003c54:	401c0000 	.word	0x401c0000
 8003c58:	40140000 	.word	0x40140000
 8003c5c:	3fe00000 	.word	0x3fe00000
 8003c60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003c64:	9d00      	ldr	r5, [sp, #0]
 8003c66:	4642      	mov	r2, r8
 8003c68:	464b      	mov	r3, r9
 8003c6a:	4630      	mov	r0, r6
 8003c6c:	4639      	mov	r1, r7
 8003c6e:	f7fc fdf5 	bl	800085c <__aeabi_ddiv>
 8003c72:	f7fc ff79 	bl	8000b68 <__aeabi_d2iz>
 8003c76:	9001      	str	r0, [sp, #4]
 8003c78:	f7fc fc5c 	bl	8000534 <__aeabi_i2d>
 8003c7c:	4642      	mov	r2, r8
 8003c7e:	464b      	mov	r3, r9
 8003c80:	f7fc fcc2 	bl	8000608 <__aeabi_dmul>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4630      	mov	r0, r6
 8003c8a:	4639      	mov	r1, r7
 8003c8c:	f7fc fb04 	bl	8000298 <__aeabi_dsub>
 8003c90:	9e01      	ldr	r6, [sp, #4]
 8003c92:	9f04      	ldr	r7, [sp, #16]
 8003c94:	3630      	adds	r6, #48	; 0x30
 8003c96:	f805 6b01 	strb.w	r6, [r5], #1
 8003c9a:	9e00      	ldr	r6, [sp, #0]
 8003c9c:	1bae      	subs	r6, r5, r6
 8003c9e:	42b7      	cmp	r7, r6
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	d134      	bne.n	8003d10 <_dtoa_r+0x708>
 8003ca6:	f7fc faf9 	bl	800029c <__adddf3>
 8003caa:	4642      	mov	r2, r8
 8003cac:	464b      	mov	r3, r9
 8003cae:	4606      	mov	r6, r0
 8003cb0:	460f      	mov	r7, r1
 8003cb2:	f7fc ff39 	bl	8000b28 <__aeabi_dcmpgt>
 8003cb6:	b9c8      	cbnz	r0, 8003cec <_dtoa_r+0x6e4>
 8003cb8:	4642      	mov	r2, r8
 8003cba:	464b      	mov	r3, r9
 8003cbc:	4630      	mov	r0, r6
 8003cbe:	4639      	mov	r1, r7
 8003cc0:	f7fc ff0a 	bl	8000ad8 <__aeabi_dcmpeq>
 8003cc4:	b110      	cbz	r0, 8003ccc <_dtoa_r+0x6c4>
 8003cc6:	9b01      	ldr	r3, [sp, #4]
 8003cc8:	07db      	lsls	r3, r3, #31
 8003cca:	d40f      	bmi.n	8003cec <_dtoa_r+0x6e4>
 8003ccc:	4651      	mov	r1, sl
 8003cce:	4620      	mov	r0, r4
 8003cd0:	f000 fbcc 	bl	800446c <_Bfree>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003cd8:	702b      	strb	r3, [r5, #0]
 8003cda:	f10b 0301 	add.w	r3, fp, #1
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f43f ace2 	beq.w	80036ac <_dtoa_r+0xa4>
 8003ce8:	601d      	str	r5, [r3, #0]
 8003cea:	e4df      	b.n	80036ac <_dtoa_r+0xa4>
 8003cec:	465f      	mov	r7, fp
 8003cee:	462b      	mov	r3, r5
 8003cf0:	461d      	mov	r5, r3
 8003cf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003cf6:	2a39      	cmp	r2, #57	; 0x39
 8003cf8:	d106      	bne.n	8003d08 <_dtoa_r+0x700>
 8003cfa:	9a00      	ldr	r2, [sp, #0]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d1f7      	bne.n	8003cf0 <_dtoa_r+0x6e8>
 8003d00:	9900      	ldr	r1, [sp, #0]
 8003d02:	2230      	movs	r2, #48	; 0x30
 8003d04:	3701      	adds	r7, #1
 8003d06:	700a      	strb	r2, [r1, #0]
 8003d08:	781a      	ldrb	r2, [r3, #0]
 8003d0a:	3201      	adds	r2, #1
 8003d0c:	701a      	strb	r2, [r3, #0]
 8003d0e:	e790      	b.n	8003c32 <_dtoa_r+0x62a>
 8003d10:	4ba3      	ldr	r3, [pc, #652]	; (8003fa0 <_dtoa_r+0x998>)
 8003d12:	2200      	movs	r2, #0
 8003d14:	f7fc fc78 	bl	8000608 <__aeabi_dmul>
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	4606      	mov	r6, r0
 8003d1e:	460f      	mov	r7, r1
 8003d20:	f7fc feda 	bl	8000ad8 <__aeabi_dcmpeq>
 8003d24:	2800      	cmp	r0, #0
 8003d26:	d09e      	beq.n	8003c66 <_dtoa_r+0x65e>
 8003d28:	e7d0      	b.n	8003ccc <_dtoa_r+0x6c4>
 8003d2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d2c:	2a00      	cmp	r2, #0
 8003d2e:	f000 80ca 	beq.w	8003ec6 <_dtoa_r+0x8be>
 8003d32:	9a07      	ldr	r2, [sp, #28]
 8003d34:	2a01      	cmp	r2, #1
 8003d36:	f300 80ad 	bgt.w	8003e94 <_dtoa_r+0x88c>
 8003d3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d3c:	2a00      	cmp	r2, #0
 8003d3e:	f000 80a5 	beq.w	8003e8c <_dtoa_r+0x884>
 8003d42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003d46:	9e08      	ldr	r6, [sp, #32]
 8003d48:	9d05      	ldr	r5, [sp, #20]
 8003d4a:	9a05      	ldr	r2, [sp, #20]
 8003d4c:	441a      	add	r2, r3
 8003d4e:	9205      	str	r2, [sp, #20]
 8003d50:	9a06      	ldr	r2, [sp, #24]
 8003d52:	2101      	movs	r1, #1
 8003d54:	441a      	add	r2, r3
 8003d56:	4620      	mov	r0, r4
 8003d58:	9206      	str	r2, [sp, #24]
 8003d5a:	f000 fc3d 	bl	80045d8 <__i2b>
 8003d5e:	4607      	mov	r7, r0
 8003d60:	b165      	cbz	r5, 8003d7c <_dtoa_r+0x774>
 8003d62:	9b06      	ldr	r3, [sp, #24]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	dd09      	ble.n	8003d7c <_dtoa_r+0x774>
 8003d68:	42ab      	cmp	r3, r5
 8003d6a:	9a05      	ldr	r2, [sp, #20]
 8003d6c:	bfa8      	it	ge
 8003d6e:	462b      	movge	r3, r5
 8003d70:	1ad2      	subs	r2, r2, r3
 8003d72:	9205      	str	r2, [sp, #20]
 8003d74:	9a06      	ldr	r2, [sp, #24]
 8003d76:	1aed      	subs	r5, r5, r3
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	9306      	str	r3, [sp, #24]
 8003d7c:	9b08      	ldr	r3, [sp, #32]
 8003d7e:	b1f3      	cbz	r3, 8003dbe <_dtoa_r+0x7b6>
 8003d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 80a3 	beq.w	8003ece <_dtoa_r+0x8c6>
 8003d88:	2e00      	cmp	r6, #0
 8003d8a:	dd10      	ble.n	8003dae <_dtoa_r+0x7a6>
 8003d8c:	4639      	mov	r1, r7
 8003d8e:	4632      	mov	r2, r6
 8003d90:	4620      	mov	r0, r4
 8003d92:	f000 fce1 	bl	8004758 <__pow5mult>
 8003d96:	4652      	mov	r2, sl
 8003d98:	4601      	mov	r1, r0
 8003d9a:	4607      	mov	r7, r0
 8003d9c:	4620      	mov	r0, r4
 8003d9e:	f000 fc31 	bl	8004604 <__multiply>
 8003da2:	4651      	mov	r1, sl
 8003da4:	4680      	mov	r8, r0
 8003da6:	4620      	mov	r0, r4
 8003da8:	f000 fb60 	bl	800446c <_Bfree>
 8003dac:	46c2      	mov	sl, r8
 8003dae:	9b08      	ldr	r3, [sp, #32]
 8003db0:	1b9a      	subs	r2, r3, r6
 8003db2:	d004      	beq.n	8003dbe <_dtoa_r+0x7b6>
 8003db4:	4651      	mov	r1, sl
 8003db6:	4620      	mov	r0, r4
 8003db8:	f000 fcce 	bl	8004758 <__pow5mult>
 8003dbc:	4682      	mov	sl, r0
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	f000 fc09 	bl	80045d8 <__i2b>
 8003dc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	4606      	mov	r6, r0
 8003dcc:	f340 8081 	ble.w	8003ed2 <_dtoa_r+0x8ca>
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	4601      	mov	r1, r0
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	f000 fcbf 	bl	8004758 <__pow5mult>
 8003dda:	9b07      	ldr	r3, [sp, #28]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	4606      	mov	r6, r0
 8003de0:	dd7a      	ble.n	8003ed8 <_dtoa_r+0x8d0>
 8003de2:	f04f 0800 	mov.w	r8, #0
 8003de6:	6933      	ldr	r3, [r6, #16]
 8003de8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003dec:	6918      	ldr	r0, [r3, #16]
 8003dee:	f000 fba5 	bl	800453c <__hi0bits>
 8003df2:	f1c0 0020 	rsb	r0, r0, #32
 8003df6:	9b06      	ldr	r3, [sp, #24]
 8003df8:	4418      	add	r0, r3
 8003dfa:	f010 001f 	ands.w	r0, r0, #31
 8003dfe:	f000 8094 	beq.w	8003f2a <_dtoa_r+0x922>
 8003e02:	f1c0 0320 	rsb	r3, r0, #32
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	f340 8085 	ble.w	8003f16 <_dtoa_r+0x90e>
 8003e0c:	9b05      	ldr	r3, [sp, #20]
 8003e0e:	f1c0 001c 	rsb	r0, r0, #28
 8003e12:	4403      	add	r3, r0
 8003e14:	9305      	str	r3, [sp, #20]
 8003e16:	9b06      	ldr	r3, [sp, #24]
 8003e18:	4403      	add	r3, r0
 8003e1a:	4405      	add	r5, r0
 8003e1c:	9306      	str	r3, [sp, #24]
 8003e1e:	9b05      	ldr	r3, [sp, #20]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	dd05      	ble.n	8003e30 <_dtoa_r+0x828>
 8003e24:	4651      	mov	r1, sl
 8003e26:	461a      	mov	r2, r3
 8003e28:	4620      	mov	r0, r4
 8003e2a:	f000 fcef 	bl	800480c <__lshift>
 8003e2e:	4682      	mov	sl, r0
 8003e30:	9b06      	ldr	r3, [sp, #24]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	dd05      	ble.n	8003e42 <_dtoa_r+0x83a>
 8003e36:	4631      	mov	r1, r6
 8003e38:	461a      	mov	r2, r3
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	f000 fce6 	bl	800480c <__lshift>
 8003e40:	4606      	mov	r6, r0
 8003e42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d072      	beq.n	8003f2e <_dtoa_r+0x926>
 8003e48:	4631      	mov	r1, r6
 8003e4a:	4650      	mov	r0, sl
 8003e4c:	f000 fd4a 	bl	80048e4 <__mcmp>
 8003e50:	2800      	cmp	r0, #0
 8003e52:	da6c      	bge.n	8003f2e <_dtoa_r+0x926>
 8003e54:	2300      	movs	r3, #0
 8003e56:	4651      	mov	r1, sl
 8003e58:	220a      	movs	r2, #10
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	f000 fb28 	bl	80044b0 <__multadd>
 8003e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003e66:	4682      	mov	sl, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 81b0 	beq.w	80041ce <_dtoa_r+0xbc6>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	4639      	mov	r1, r7
 8003e72:	220a      	movs	r2, #10
 8003e74:	4620      	mov	r0, r4
 8003e76:	f000 fb1b 	bl	80044b0 <__multadd>
 8003e7a:	9b01      	ldr	r3, [sp, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	4607      	mov	r7, r0
 8003e80:	f300 8096 	bgt.w	8003fb0 <_dtoa_r+0x9a8>
 8003e84:	9b07      	ldr	r3, [sp, #28]
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	dc59      	bgt.n	8003f3e <_dtoa_r+0x936>
 8003e8a:	e091      	b.n	8003fb0 <_dtoa_r+0x9a8>
 8003e8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003e8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003e92:	e758      	b.n	8003d46 <_dtoa_r+0x73e>
 8003e94:	9b04      	ldr	r3, [sp, #16]
 8003e96:	1e5e      	subs	r6, r3, #1
 8003e98:	9b08      	ldr	r3, [sp, #32]
 8003e9a:	42b3      	cmp	r3, r6
 8003e9c:	bfbf      	itttt	lt
 8003e9e:	9b08      	ldrlt	r3, [sp, #32]
 8003ea0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8003ea2:	9608      	strlt	r6, [sp, #32]
 8003ea4:	1af3      	sublt	r3, r6, r3
 8003ea6:	bfb4      	ite	lt
 8003ea8:	18d2      	addlt	r2, r2, r3
 8003eaa:	1b9e      	subge	r6, r3, r6
 8003eac:	9b04      	ldr	r3, [sp, #16]
 8003eae:	bfbc      	itt	lt
 8003eb0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8003eb2:	2600      	movlt	r6, #0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	bfb7      	itett	lt
 8003eb8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8003ebc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8003ec0:	1a9d      	sublt	r5, r3, r2
 8003ec2:	2300      	movlt	r3, #0
 8003ec4:	e741      	b.n	8003d4a <_dtoa_r+0x742>
 8003ec6:	9e08      	ldr	r6, [sp, #32]
 8003ec8:	9d05      	ldr	r5, [sp, #20]
 8003eca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003ecc:	e748      	b.n	8003d60 <_dtoa_r+0x758>
 8003ece:	9a08      	ldr	r2, [sp, #32]
 8003ed0:	e770      	b.n	8003db4 <_dtoa_r+0x7ac>
 8003ed2:	9b07      	ldr	r3, [sp, #28]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	dc19      	bgt.n	8003f0c <_dtoa_r+0x904>
 8003ed8:	9b02      	ldr	r3, [sp, #8]
 8003eda:	b9bb      	cbnz	r3, 8003f0c <_dtoa_r+0x904>
 8003edc:	9b03      	ldr	r3, [sp, #12]
 8003ede:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ee2:	b99b      	cbnz	r3, 8003f0c <_dtoa_r+0x904>
 8003ee4:	9b03      	ldr	r3, [sp, #12]
 8003ee6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003eea:	0d1b      	lsrs	r3, r3, #20
 8003eec:	051b      	lsls	r3, r3, #20
 8003eee:	b183      	cbz	r3, 8003f12 <_dtoa_r+0x90a>
 8003ef0:	9b05      	ldr	r3, [sp, #20]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	9305      	str	r3, [sp, #20]
 8003ef6:	9b06      	ldr	r3, [sp, #24]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	9306      	str	r3, [sp, #24]
 8003efc:	f04f 0801 	mov.w	r8, #1
 8003f00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f47f af6f 	bne.w	8003de6 <_dtoa_r+0x7de>
 8003f08:	2001      	movs	r0, #1
 8003f0a:	e774      	b.n	8003df6 <_dtoa_r+0x7ee>
 8003f0c:	f04f 0800 	mov.w	r8, #0
 8003f10:	e7f6      	b.n	8003f00 <_dtoa_r+0x8f8>
 8003f12:	4698      	mov	r8, r3
 8003f14:	e7f4      	b.n	8003f00 <_dtoa_r+0x8f8>
 8003f16:	d082      	beq.n	8003e1e <_dtoa_r+0x816>
 8003f18:	9a05      	ldr	r2, [sp, #20]
 8003f1a:	331c      	adds	r3, #28
 8003f1c:	441a      	add	r2, r3
 8003f1e:	9205      	str	r2, [sp, #20]
 8003f20:	9a06      	ldr	r2, [sp, #24]
 8003f22:	441a      	add	r2, r3
 8003f24:	441d      	add	r5, r3
 8003f26:	9206      	str	r2, [sp, #24]
 8003f28:	e779      	b.n	8003e1e <_dtoa_r+0x816>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	e7f4      	b.n	8003f18 <_dtoa_r+0x910>
 8003f2e:	9b04      	ldr	r3, [sp, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	dc37      	bgt.n	8003fa4 <_dtoa_r+0x99c>
 8003f34:	9b07      	ldr	r3, [sp, #28]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	dd34      	ble.n	8003fa4 <_dtoa_r+0x99c>
 8003f3a:	9b04      	ldr	r3, [sp, #16]
 8003f3c:	9301      	str	r3, [sp, #4]
 8003f3e:	9b01      	ldr	r3, [sp, #4]
 8003f40:	b963      	cbnz	r3, 8003f5c <_dtoa_r+0x954>
 8003f42:	4631      	mov	r1, r6
 8003f44:	2205      	movs	r2, #5
 8003f46:	4620      	mov	r0, r4
 8003f48:	f000 fab2 	bl	80044b0 <__multadd>
 8003f4c:	4601      	mov	r1, r0
 8003f4e:	4606      	mov	r6, r0
 8003f50:	4650      	mov	r0, sl
 8003f52:	f000 fcc7 	bl	80048e4 <__mcmp>
 8003f56:	2800      	cmp	r0, #0
 8003f58:	f73f adbb 	bgt.w	8003ad2 <_dtoa_r+0x4ca>
 8003f5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f5e:	9d00      	ldr	r5, [sp, #0]
 8003f60:	ea6f 0b03 	mvn.w	fp, r3
 8003f64:	f04f 0800 	mov.w	r8, #0
 8003f68:	4631      	mov	r1, r6
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	f000 fa7e 	bl	800446c <_Bfree>
 8003f70:	2f00      	cmp	r7, #0
 8003f72:	f43f aeab 	beq.w	8003ccc <_dtoa_r+0x6c4>
 8003f76:	f1b8 0f00 	cmp.w	r8, #0
 8003f7a:	d005      	beq.n	8003f88 <_dtoa_r+0x980>
 8003f7c:	45b8      	cmp	r8, r7
 8003f7e:	d003      	beq.n	8003f88 <_dtoa_r+0x980>
 8003f80:	4641      	mov	r1, r8
 8003f82:	4620      	mov	r0, r4
 8003f84:	f000 fa72 	bl	800446c <_Bfree>
 8003f88:	4639      	mov	r1, r7
 8003f8a:	4620      	mov	r0, r4
 8003f8c:	f000 fa6e 	bl	800446c <_Bfree>
 8003f90:	e69c      	b.n	8003ccc <_dtoa_r+0x6c4>
 8003f92:	2600      	movs	r6, #0
 8003f94:	4637      	mov	r7, r6
 8003f96:	e7e1      	b.n	8003f5c <_dtoa_r+0x954>
 8003f98:	46bb      	mov	fp, r7
 8003f9a:	4637      	mov	r7, r6
 8003f9c:	e599      	b.n	8003ad2 <_dtoa_r+0x4ca>
 8003f9e:	bf00      	nop
 8003fa0:	40240000 	.word	0x40240000
 8003fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 80c8 	beq.w	800413c <_dtoa_r+0xb34>
 8003fac:	9b04      	ldr	r3, [sp, #16]
 8003fae:	9301      	str	r3, [sp, #4]
 8003fb0:	2d00      	cmp	r5, #0
 8003fb2:	dd05      	ble.n	8003fc0 <_dtoa_r+0x9b8>
 8003fb4:	4639      	mov	r1, r7
 8003fb6:	462a      	mov	r2, r5
 8003fb8:	4620      	mov	r0, r4
 8003fba:	f000 fc27 	bl	800480c <__lshift>
 8003fbe:	4607      	mov	r7, r0
 8003fc0:	f1b8 0f00 	cmp.w	r8, #0
 8003fc4:	d05b      	beq.n	800407e <_dtoa_r+0xa76>
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4620      	mov	r0, r4
 8003fca:	f000 fa0f 	bl	80043ec <_Balloc>
 8003fce:	4605      	mov	r5, r0
 8003fd0:	b928      	cbnz	r0, 8003fde <_dtoa_r+0x9d6>
 8003fd2:	4b83      	ldr	r3, [pc, #524]	; (80041e0 <_dtoa_r+0xbd8>)
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8003fda:	f7ff bb2e 	b.w	800363a <_dtoa_r+0x32>
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	3202      	adds	r2, #2
 8003fe2:	0092      	lsls	r2, r2, #2
 8003fe4:	f107 010c 	add.w	r1, r7, #12
 8003fe8:	300c      	adds	r0, #12
 8003fea:	f001 f813 	bl	8005014 <memcpy>
 8003fee:	2201      	movs	r2, #1
 8003ff0:	4629      	mov	r1, r5
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	f000 fc0a 	bl	800480c <__lshift>
 8003ff8:	9b00      	ldr	r3, [sp, #0]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	9304      	str	r3, [sp, #16]
 8003ffe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004002:	4413      	add	r3, r2
 8004004:	9308      	str	r3, [sp, #32]
 8004006:	9b02      	ldr	r3, [sp, #8]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	46b8      	mov	r8, r7
 800400e:	9306      	str	r3, [sp, #24]
 8004010:	4607      	mov	r7, r0
 8004012:	9b04      	ldr	r3, [sp, #16]
 8004014:	4631      	mov	r1, r6
 8004016:	3b01      	subs	r3, #1
 8004018:	4650      	mov	r0, sl
 800401a:	9301      	str	r3, [sp, #4]
 800401c:	f7ff fa6b 	bl	80034f6 <quorem>
 8004020:	4641      	mov	r1, r8
 8004022:	9002      	str	r0, [sp, #8]
 8004024:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004028:	4650      	mov	r0, sl
 800402a:	f000 fc5b 	bl	80048e4 <__mcmp>
 800402e:	463a      	mov	r2, r7
 8004030:	9005      	str	r0, [sp, #20]
 8004032:	4631      	mov	r1, r6
 8004034:	4620      	mov	r0, r4
 8004036:	f000 fc71 	bl	800491c <__mdiff>
 800403a:	68c2      	ldr	r2, [r0, #12]
 800403c:	4605      	mov	r5, r0
 800403e:	bb02      	cbnz	r2, 8004082 <_dtoa_r+0xa7a>
 8004040:	4601      	mov	r1, r0
 8004042:	4650      	mov	r0, sl
 8004044:	f000 fc4e 	bl	80048e4 <__mcmp>
 8004048:	4602      	mov	r2, r0
 800404a:	4629      	mov	r1, r5
 800404c:	4620      	mov	r0, r4
 800404e:	9209      	str	r2, [sp, #36]	; 0x24
 8004050:	f000 fa0c 	bl	800446c <_Bfree>
 8004054:	9b07      	ldr	r3, [sp, #28]
 8004056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004058:	9d04      	ldr	r5, [sp, #16]
 800405a:	ea43 0102 	orr.w	r1, r3, r2
 800405e:	9b06      	ldr	r3, [sp, #24]
 8004060:	4319      	orrs	r1, r3
 8004062:	d110      	bne.n	8004086 <_dtoa_r+0xa7e>
 8004064:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004068:	d029      	beq.n	80040be <_dtoa_r+0xab6>
 800406a:	9b05      	ldr	r3, [sp, #20]
 800406c:	2b00      	cmp	r3, #0
 800406e:	dd02      	ble.n	8004076 <_dtoa_r+0xa6e>
 8004070:	9b02      	ldr	r3, [sp, #8]
 8004072:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004076:	9b01      	ldr	r3, [sp, #4]
 8004078:	f883 9000 	strb.w	r9, [r3]
 800407c:	e774      	b.n	8003f68 <_dtoa_r+0x960>
 800407e:	4638      	mov	r0, r7
 8004080:	e7ba      	b.n	8003ff8 <_dtoa_r+0x9f0>
 8004082:	2201      	movs	r2, #1
 8004084:	e7e1      	b.n	800404a <_dtoa_r+0xa42>
 8004086:	9b05      	ldr	r3, [sp, #20]
 8004088:	2b00      	cmp	r3, #0
 800408a:	db04      	blt.n	8004096 <_dtoa_r+0xa8e>
 800408c:	9907      	ldr	r1, [sp, #28]
 800408e:	430b      	orrs	r3, r1
 8004090:	9906      	ldr	r1, [sp, #24]
 8004092:	430b      	orrs	r3, r1
 8004094:	d120      	bne.n	80040d8 <_dtoa_r+0xad0>
 8004096:	2a00      	cmp	r2, #0
 8004098:	dded      	ble.n	8004076 <_dtoa_r+0xa6e>
 800409a:	4651      	mov	r1, sl
 800409c:	2201      	movs	r2, #1
 800409e:	4620      	mov	r0, r4
 80040a0:	f000 fbb4 	bl	800480c <__lshift>
 80040a4:	4631      	mov	r1, r6
 80040a6:	4682      	mov	sl, r0
 80040a8:	f000 fc1c 	bl	80048e4 <__mcmp>
 80040ac:	2800      	cmp	r0, #0
 80040ae:	dc03      	bgt.n	80040b8 <_dtoa_r+0xab0>
 80040b0:	d1e1      	bne.n	8004076 <_dtoa_r+0xa6e>
 80040b2:	f019 0f01 	tst.w	r9, #1
 80040b6:	d0de      	beq.n	8004076 <_dtoa_r+0xa6e>
 80040b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80040bc:	d1d8      	bne.n	8004070 <_dtoa_r+0xa68>
 80040be:	9a01      	ldr	r2, [sp, #4]
 80040c0:	2339      	movs	r3, #57	; 0x39
 80040c2:	7013      	strb	r3, [r2, #0]
 80040c4:	462b      	mov	r3, r5
 80040c6:	461d      	mov	r5, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80040ce:	2a39      	cmp	r2, #57	; 0x39
 80040d0:	d06c      	beq.n	80041ac <_dtoa_r+0xba4>
 80040d2:	3201      	adds	r2, #1
 80040d4:	701a      	strb	r2, [r3, #0]
 80040d6:	e747      	b.n	8003f68 <_dtoa_r+0x960>
 80040d8:	2a00      	cmp	r2, #0
 80040da:	dd07      	ble.n	80040ec <_dtoa_r+0xae4>
 80040dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80040e0:	d0ed      	beq.n	80040be <_dtoa_r+0xab6>
 80040e2:	9a01      	ldr	r2, [sp, #4]
 80040e4:	f109 0301 	add.w	r3, r9, #1
 80040e8:	7013      	strb	r3, [r2, #0]
 80040ea:	e73d      	b.n	8003f68 <_dtoa_r+0x960>
 80040ec:	9b04      	ldr	r3, [sp, #16]
 80040ee:	9a08      	ldr	r2, [sp, #32]
 80040f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d043      	beq.n	8004180 <_dtoa_r+0xb78>
 80040f8:	4651      	mov	r1, sl
 80040fa:	2300      	movs	r3, #0
 80040fc:	220a      	movs	r2, #10
 80040fe:	4620      	mov	r0, r4
 8004100:	f000 f9d6 	bl	80044b0 <__multadd>
 8004104:	45b8      	cmp	r8, r7
 8004106:	4682      	mov	sl, r0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	f04f 020a 	mov.w	r2, #10
 8004110:	4641      	mov	r1, r8
 8004112:	4620      	mov	r0, r4
 8004114:	d107      	bne.n	8004126 <_dtoa_r+0xb1e>
 8004116:	f000 f9cb 	bl	80044b0 <__multadd>
 800411a:	4680      	mov	r8, r0
 800411c:	4607      	mov	r7, r0
 800411e:	9b04      	ldr	r3, [sp, #16]
 8004120:	3301      	adds	r3, #1
 8004122:	9304      	str	r3, [sp, #16]
 8004124:	e775      	b.n	8004012 <_dtoa_r+0xa0a>
 8004126:	f000 f9c3 	bl	80044b0 <__multadd>
 800412a:	4639      	mov	r1, r7
 800412c:	4680      	mov	r8, r0
 800412e:	2300      	movs	r3, #0
 8004130:	220a      	movs	r2, #10
 8004132:	4620      	mov	r0, r4
 8004134:	f000 f9bc 	bl	80044b0 <__multadd>
 8004138:	4607      	mov	r7, r0
 800413a:	e7f0      	b.n	800411e <_dtoa_r+0xb16>
 800413c:	9b04      	ldr	r3, [sp, #16]
 800413e:	9301      	str	r3, [sp, #4]
 8004140:	9d00      	ldr	r5, [sp, #0]
 8004142:	4631      	mov	r1, r6
 8004144:	4650      	mov	r0, sl
 8004146:	f7ff f9d6 	bl	80034f6 <quorem>
 800414a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800414e:	9b00      	ldr	r3, [sp, #0]
 8004150:	f805 9b01 	strb.w	r9, [r5], #1
 8004154:	1aea      	subs	r2, r5, r3
 8004156:	9b01      	ldr	r3, [sp, #4]
 8004158:	4293      	cmp	r3, r2
 800415a:	dd07      	ble.n	800416c <_dtoa_r+0xb64>
 800415c:	4651      	mov	r1, sl
 800415e:	2300      	movs	r3, #0
 8004160:	220a      	movs	r2, #10
 8004162:	4620      	mov	r0, r4
 8004164:	f000 f9a4 	bl	80044b0 <__multadd>
 8004168:	4682      	mov	sl, r0
 800416a:	e7ea      	b.n	8004142 <_dtoa_r+0xb3a>
 800416c:	9b01      	ldr	r3, [sp, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	bfc8      	it	gt
 8004172:	461d      	movgt	r5, r3
 8004174:	9b00      	ldr	r3, [sp, #0]
 8004176:	bfd8      	it	le
 8004178:	2501      	movle	r5, #1
 800417a:	441d      	add	r5, r3
 800417c:	f04f 0800 	mov.w	r8, #0
 8004180:	4651      	mov	r1, sl
 8004182:	2201      	movs	r2, #1
 8004184:	4620      	mov	r0, r4
 8004186:	f000 fb41 	bl	800480c <__lshift>
 800418a:	4631      	mov	r1, r6
 800418c:	4682      	mov	sl, r0
 800418e:	f000 fba9 	bl	80048e4 <__mcmp>
 8004192:	2800      	cmp	r0, #0
 8004194:	dc96      	bgt.n	80040c4 <_dtoa_r+0xabc>
 8004196:	d102      	bne.n	800419e <_dtoa_r+0xb96>
 8004198:	f019 0f01 	tst.w	r9, #1
 800419c:	d192      	bne.n	80040c4 <_dtoa_r+0xabc>
 800419e:	462b      	mov	r3, r5
 80041a0:	461d      	mov	r5, r3
 80041a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80041a6:	2a30      	cmp	r2, #48	; 0x30
 80041a8:	d0fa      	beq.n	80041a0 <_dtoa_r+0xb98>
 80041aa:	e6dd      	b.n	8003f68 <_dtoa_r+0x960>
 80041ac:	9a00      	ldr	r2, [sp, #0]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d189      	bne.n	80040c6 <_dtoa_r+0xabe>
 80041b2:	f10b 0b01 	add.w	fp, fp, #1
 80041b6:	2331      	movs	r3, #49	; 0x31
 80041b8:	e796      	b.n	80040e8 <_dtoa_r+0xae0>
 80041ba:	4b0a      	ldr	r3, [pc, #40]	; (80041e4 <_dtoa_r+0xbdc>)
 80041bc:	f7ff ba99 	b.w	80036f2 <_dtoa_r+0xea>
 80041c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f47f aa6d 	bne.w	80036a2 <_dtoa_r+0x9a>
 80041c8:	4b07      	ldr	r3, [pc, #28]	; (80041e8 <_dtoa_r+0xbe0>)
 80041ca:	f7ff ba92 	b.w	80036f2 <_dtoa_r+0xea>
 80041ce:	9b01      	ldr	r3, [sp, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	dcb5      	bgt.n	8004140 <_dtoa_r+0xb38>
 80041d4:	9b07      	ldr	r3, [sp, #28]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	f73f aeb1 	bgt.w	8003f3e <_dtoa_r+0x936>
 80041dc:	e7b0      	b.n	8004140 <_dtoa_r+0xb38>
 80041de:	bf00      	nop
 80041e0:	080053f5 	.word	0x080053f5
 80041e4:	08005355 	.word	0x08005355
 80041e8:	08005379 	.word	0x08005379

080041ec <_free_r>:
 80041ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041ee:	2900      	cmp	r1, #0
 80041f0:	d044      	beq.n	800427c <_free_r+0x90>
 80041f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041f6:	9001      	str	r0, [sp, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f1a1 0404 	sub.w	r4, r1, #4
 80041fe:	bfb8      	it	lt
 8004200:	18e4      	addlt	r4, r4, r3
 8004202:	f000 f8e7 	bl	80043d4 <__malloc_lock>
 8004206:	4a1e      	ldr	r2, [pc, #120]	; (8004280 <_free_r+0x94>)
 8004208:	9801      	ldr	r0, [sp, #4]
 800420a:	6813      	ldr	r3, [r2, #0]
 800420c:	b933      	cbnz	r3, 800421c <_free_r+0x30>
 800420e:	6063      	str	r3, [r4, #4]
 8004210:	6014      	str	r4, [r2, #0]
 8004212:	b003      	add	sp, #12
 8004214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004218:	f000 b8e2 	b.w	80043e0 <__malloc_unlock>
 800421c:	42a3      	cmp	r3, r4
 800421e:	d908      	bls.n	8004232 <_free_r+0x46>
 8004220:	6825      	ldr	r5, [r4, #0]
 8004222:	1961      	adds	r1, r4, r5
 8004224:	428b      	cmp	r3, r1
 8004226:	bf01      	itttt	eq
 8004228:	6819      	ldreq	r1, [r3, #0]
 800422a:	685b      	ldreq	r3, [r3, #4]
 800422c:	1949      	addeq	r1, r1, r5
 800422e:	6021      	streq	r1, [r4, #0]
 8004230:	e7ed      	b.n	800420e <_free_r+0x22>
 8004232:	461a      	mov	r2, r3
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	b10b      	cbz	r3, 800423c <_free_r+0x50>
 8004238:	42a3      	cmp	r3, r4
 800423a:	d9fa      	bls.n	8004232 <_free_r+0x46>
 800423c:	6811      	ldr	r1, [r2, #0]
 800423e:	1855      	adds	r5, r2, r1
 8004240:	42a5      	cmp	r5, r4
 8004242:	d10b      	bne.n	800425c <_free_r+0x70>
 8004244:	6824      	ldr	r4, [r4, #0]
 8004246:	4421      	add	r1, r4
 8004248:	1854      	adds	r4, r2, r1
 800424a:	42a3      	cmp	r3, r4
 800424c:	6011      	str	r1, [r2, #0]
 800424e:	d1e0      	bne.n	8004212 <_free_r+0x26>
 8004250:	681c      	ldr	r4, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	6053      	str	r3, [r2, #4]
 8004256:	440c      	add	r4, r1
 8004258:	6014      	str	r4, [r2, #0]
 800425a:	e7da      	b.n	8004212 <_free_r+0x26>
 800425c:	d902      	bls.n	8004264 <_free_r+0x78>
 800425e:	230c      	movs	r3, #12
 8004260:	6003      	str	r3, [r0, #0]
 8004262:	e7d6      	b.n	8004212 <_free_r+0x26>
 8004264:	6825      	ldr	r5, [r4, #0]
 8004266:	1961      	adds	r1, r4, r5
 8004268:	428b      	cmp	r3, r1
 800426a:	bf04      	itt	eq
 800426c:	6819      	ldreq	r1, [r3, #0]
 800426e:	685b      	ldreq	r3, [r3, #4]
 8004270:	6063      	str	r3, [r4, #4]
 8004272:	bf04      	itt	eq
 8004274:	1949      	addeq	r1, r1, r5
 8004276:	6021      	streq	r1, [r4, #0]
 8004278:	6054      	str	r4, [r2, #4]
 800427a:	e7ca      	b.n	8004212 <_free_r+0x26>
 800427c:	b003      	add	sp, #12
 800427e:	bd30      	pop	{r4, r5, pc}
 8004280:	20000338 	.word	0x20000338

08004284 <malloc>:
 8004284:	4b02      	ldr	r3, [pc, #8]	; (8004290 <malloc+0xc>)
 8004286:	4601      	mov	r1, r0
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	f000 b823 	b.w	80042d4 <_malloc_r>
 800428e:	bf00      	nop
 8004290:	20000060 	.word	0x20000060

08004294 <sbrk_aligned>:
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	4e0e      	ldr	r6, [pc, #56]	; (80042d0 <sbrk_aligned+0x3c>)
 8004298:	460c      	mov	r4, r1
 800429a:	6831      	ldr	r1, [r6, #0]
 800429c:	4605      	mov	r5, r0
 800429e:	b911      	cbnz	r1, 80042a6 <sbrk_aligned+0x12>
 80042a0:	f000 fea8 	bl	8004ff4 <_sbrk_r>
 80042a4:	6030      	str	r0, [r6, #0]
 80042a6:	4621      	mov	r1, r4
 80042a8:	4628      	mov	r0, r5
 80042aa:	f000 fea3 	bl	8004ff4 <_sbrk_r>
 80042ae:	1c43      	adds	r3, r0, #1
 80042b0:	d00a      	beq.n	80042c8 <sbrk_aligned+0x34>
 80042b2:	1cc4      	adds	r4, r0, #3
 80042b4:	f024 0403 	bic.w	r4, r4, #3
 80042b8:	42a0      	cmp	r0, r4
 80042ba:	d007      	beq.n	80042cc <sbrk_aligned+0x38>
 80042bc:	1a21      	subs	r1, r4, r0
 80042be:	4628      	mov	r0, r5
 80042c0:	f000 fe98 	bl	8004ff4 <_sbrk_r>
 80042c4:	3001      	adds	r0, #1
 80042c6:	d101      	bne.n	80042cc <sbrk_aligned+0x38>
 80042c8:	f04f 34ff 	mov.w	r4, #4294967295
 80042cc:	4620      	mov	r0, r4
 80042ce:	bd70      	pop	{r4, r5, r6, pc}
 80042d0:	2000033c 	.word	0x2000033c

080042d4 <_malloc_r>:
 80042d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042d8:	1ccd      	adds	r5, r1, #3
 80042da:	f025 0503 	bic.w	r5, r5, #3
 80042de:	3508      	adds	r5, #8
 80042e0:	2d0c      	cmp	r5, #12
 80042e2:	bf38      	it	cc
 80042e4:	250c      	movcc	r5, #12
 80042e6:	2d00      	cmp	r5, #0
 80042e8:	4607      	mov	r7, r0
 80042ea:	db01      	blt.n	80042f0 <_malloc_r+0x1c>
 80042ec:	42a9      	cmp	r1, r5
 80042ee:	d905      	bls.n	80042fc <_malloc_r+0x28>
 80042f0:	230c      	movs	r3, #12
 80042f2:	603b      	str	r3, [r7, #0]
 80042f4:	2600      	movs	r6, #0
 80042f6:	4630      	mov	r0, r6
 80042f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80043d0 <_malloc_r+0xfc>
 8004300:	f000 f868 	bl	80043d4 <__malloc_lock>
 8004304:	f8d8 3000 	ldr.w	r3, [r8]
 8004308:	461c      	mov	r4, r3
 800430a:	bb5c      	cbnz	r4, 8004364 <_malloc_r+0x90>
 800430c:	4629      	mov	r1, r5
 800430e:	4638      	mov	r0, r7
 8004310:	f7ff ffc0 	bl	8004294 <sbrk_aligned>
 8004314:	1c43      	adds	r3, r0, #1
 8004316:	4604      	mov	r4, r0
 8004318:	d155      	bne.n	80043c6 <_malloc_r+0xf2>
 800431a:	f8d8 4000 	ldr.w	r4, [r8]
 800431e:	4626      	mov	r6, r4
 8004320:	2e00      	cmp	r6, #0
 8004322:	d145      	bne.n	80043b0 <_malloc_r+0xdc>
 8004324:	2c00      	cmp	r4, #0
 8004326:	d048      	beq.n	80043ba <_malloc_r+0xe6>
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	4631      	mov	r1, r6
 800432c:	4638      	mov	r0, r7
 800432e:	eb04 0903 	add.w	r9, r4, r3
 8004332:	f000 fe5f 	bl	8004ff4 <_sbrk_r>
 8004336:	4581      	cmp	r9, r0
 8004338:	d13f      	bne.n	80043ba <_malloc_r+0xe6>
 800433a:	6821      	ldr	r1, [r4, #0]
 800433c:	1a6d      	subs	r5, r5, r1
 800433e:	4629      	mov	r1, r5
 8004340:	4638      	mov	r0, r7
 8004342:	f7ff ffa7 	bl	8004294 <sbrk_aligned>
 8004346:	3001      	adds	r0, #1
 8004348:	d037      	beq.n	80043ba <_malloc_r+0xe6>
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	442b      	add	r3, r5
 800434e:	6023      	str	r3, [r4, #0]
 8004350:	f8d8 3000 	ldr.w	r3, [r8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d038      	beq.n	80043ca <_malloc_r+0xf6>
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	42a2      	cmp	r2, r4
 800435c:	d12b      	bne.n	80043b6 <_malloc_r+0xe2>
 800435e:	2200      	movs	r2, #0
 8004360:	605a      	str	r2, [r3, #4]
 8004362:	e00f      	b.n	8004384 <_malloc_r+0xb0>
 8004364:	6822      	ldr	r2, [r4, #0]
 8004366:	1b52      	subs	r2, r2, r5
 8004368:	d41f      	bmi.n	80043aa <_malloc_r+0xd6>
 800436a:	2a0b      	cmp	r2, #11
 800436c:	d917      	bls.n	800439e <_malloc_r+0xca>
 800436e:	1961      	adds	r1, r4, r5
 8004370:	42a3      	cmp	r3, r4
 8004372:	6025      	str	r5, [r4, #0]
 8004374:	bf18      	it	ne
 8004376:	6059      	strne	r1, [r3, #4]
 8004378:	6863      	ldr	r3, [r4, #4]
 800437a:	bf08      	it	eq
 800437c:	f8c8 1000 	streq.w	r1, [r8]
 8004380:	5162      	str	r2, [r4, r5]
 8004382:	604b      	str	r3, [r1, #4]
 8004384:	4638      	mov	r0, r7
 8004386:	f104 060b 	add.w	r6, r4, #11
 800438a:	f000 f829 	bl	80043e0 <__malloc_unlock>
 800438e:	f026 0607 	bic.w	r6, r6, #7
 8004392:	1d23      	adds	r3, r4, #4
 8004394:	1af2      	subs	r2, r6, r3
 8004396:	d0ae      	beq.n	80042f6 <_malloc_r+0x22>
 8004398:	1b9b      	subs	r3, r3, r6
 800439a:	50a3      	str	r3, [r4, r2]
 800439c:	e7ab      	b.n	80042f6 <_malloc_r+0x22>
 800439e:	42a3      	cmp	r3, r4
 80043a0:	6862      	ldr	r2, [r4, #4]
 80043a2:	d1dd      	bne.n	8004360 <_malloc_r+0x8c>
 80043a4:	f8c8 2000 	str.w	r2, [r8]
 80043a8:	e7ec      	b.n	8004384 <_malloc_r+0xb0>
 80043aa:	4623      	mov	r3, r4
 80043ac:	6864      	ldr	r4, [r4, #4]
 80043ae:	e7ac      	b.n	800430a <_malloc_r+0x36>
 80043b0:	4634      	mov	r4, r6
 80043b2:	6876      	ldr	r6, [r6, #4]
 80043b4:	e7b4      	b.n	8004320 <_malloc_r+0x4c>
 80043b6:	4613      	mov	r3, r2
 80043b8:	e7cc      	b.n	8004354 <_malloc_r+0x80>
 80043ba:	230c      	movs	r3, #12
 80043bc:	603b      	str	r3, [r7, #0]
 80043be:	4638      	mov	r0, r7
 80043c0:	f000 f80e 	bl	80043e0 <__malloc_unlock>
 80043c4:	e797      	b.n	80042f6 <_malloc_r+0x22>
 80043c6:	6025      	str	r5, [r4, #0]
 80043c8:	e7dc      	b.n	8004384 <_malloc_r+0xb0>
 80043ca:	605b      	str	r3, [r3, #4]
 80043cc:	deff      	udf	#255	; 0xff
 80043ce:	bf00      	nop
 80043d0:	20000338 	.word	0x20000338

080043d4 <__malloc_lock>:
 80043d4:	4801      	ldr	r0, [pc, #4]	; (80043dc <__malloc_lock+0x8>)
 80043d6:	f7ff b88c 	b.w	80034f2 <__retarget_lock_acquire_recursive>
 80043da:	bf00      	nop
 80043dc:	20000334 	.word	0x20000334

080043e0 <__malloc_unlock>:
 80043e0:	4801      	ldr	r0, [pc, #4]	; (80043e8 <__malloc_unlock+0x8>)
 80043e2:	f7ff b887 	b.w	80034f4 <__retarget_lock_release_recursive>
 80043e6:	bf00      	nop
 80043e8:	20000334 	.word	0x20000334

080043ec <_Balloc>:
 80043ec:	b570      	push	{r4, r5, r6, lr}
 80043ee:	69c6      	ldr	r6, [r0, #28]
 80043f0:	4604      	mov	r4, r0
 80043f2:	460d      	mov	r5, r1
 80043f4:	b976      	cbnz	r6, 8004414 <_Balloc+0x28>
 80043f6:	2010      	movs	r0, #16
 80043f8:	f7ff ff44 	bl	8004284 <malloc>
 80043fc:	4602      	mov	r2, r0
 80043fe:	61e0      	str	r0, [r4, #28]
 8004400:	b920      	cbnz	r0, 800440c <_Balloc+0x20>
 8004402:	4b18      	ldr	r3, [pc, #96]	; (8004464 <_Balloc+0x78>)
 8004404:	4818      	ldr	r0, [pc, #96]	; (8004468 <_Balloc+0x7c>)
 8004406:	216b      	movs	r1, #107	; 0x6b
 8004408:	f000 fe12 	bl	8005030 <__assert_func>
 800440c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004410:	6006      	str	r6, [r0, #0]
 8004412:	60c6      	str	r6, [r0, #12]
 8004414:	69e6      	ldr	r6, [r4, #28]
 8004416:	68f3      	ldr	r3, [r6, #12]
 8004418:	b183      	cbz	r3, 800443c <_Balloc+0x50>
 800441a:	69e3      	ldr	r3, [r4, #28]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004422:	b9b8      	cbnz	r0, 8004454 <_Balloc+0x68>
 8004424:	2101      	movs	r1, #1
 8004426:	fa01 f605 	lsl.w	r6, r1, r5
 800442a:	1d72      	adds	r2, r6, #5
 800442c:	0092      	lsls	r2, r2, #2
 800442e:	4620      	mov	r0, r4
 8004430:	f000 fe1c 	bl	800506c <_calloc_r>
 8004434:	b160      	cbz	r0, 8004450 <_Balloc+0x64>
 8004436:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800443a:	e00e      	b.n	800445a <_Balloc+0x6e>
 800443c:	2221      	movs	r2, #33	; 0x21
 800443e:	2104      	movs	r1, #4
 8004440:	4620      	mov	r0, r4
 8004442:	f000 fe13 	bl	800506c <_calloc_r>
 8004446:	69e3      	ldr	r3, [r4, #28]
 8004448:	60f0      	str	r0, [r6, #12]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1e4      	bne.n	800441a <_Balloc+0x2e>
 8004450:	2000      	movs	r0, #0
 8004452:	bd70      	pop	{r4, r5, r6, pc}
 8004454:	6802      	ldr	r2, [r0, #0]
 8004456:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800445a:	2300      	movs	r3, #0
 800445c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004460:	e7f7      	b.n	8004452 <_Balloc+0x66>
 8004462:	bf00      	nop
 8004464:	08005386 	.word	0x08005386
 8004468:	08005406 	.word	0x08005406

0800446c <_Bfree>:
 800446c:	b570      	push	{r4, r5, r6, lr}
 800446e:	69c6      	ldr	r6, [r0, #28]
 8004470:	4605      	mov	r5, r0
 8004472:	460c      	mov	r4, r1
 8004474:	b976      	cbnz	r6, 8004494 <_Bfree+0x28>
 8004476:	2010      	movs	r0, #16
 8004478:	f7ff ff04 	bl	8004284 <malloc>
 800447c:	4602      	mov	r2, r0
 800447e:	61e8      	str	r0, [r5, #28]
 8004480:	b920      	cbnz	r0, 800448c <_Bfree+0x20>
 8004482:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <_Bfree+0x3c>)
 8004484:	4809      	ldr	r0, [pc, #36]	; (80044ac <_Bfree+0x40>)
 8004486:	218f      	movs	r1, #143	; 0x8f
 8004488:	f000 fdd2 	bl	8005030 <__assert_func>
 800448c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004490:	6006      	str	r6, [r0, #0]
 8004492:	60c6      	str	r6, [r0, #12]
 8004494:	b13c      	cbz	r4, 80044a6 <_Bfree+0x3a>
 8004496:	69eb      	ldr	r3, [r5, #28]
 8004498:	6862      	ldr	r2, [r4, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80044a0:	6021      	str	r1, [r4, #0]
 80044a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80044a6:	bd70      	pop	{r4, r5, r6, pc}
 80044a8:	08005386 	.word	0x08005386
 80044ac:	08005406 	.word	0x08005406

080044b0 <__multadd>:
 80044b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044b4:	690d      	ldr	r5, [r1, #16]
 80044b6:	4607      	mov	r7, r0
 80044b8:	460c      	mov	r4, r1
 80044ba:	461e      	mov	r6, r3
 80044bc:	f101 0c14 	add.w	ip, r1, #20
 80044c0:	2000      	movs	r0, #0
 80044c2:	f8dc 3000 	ldr.w	r3, [ip]
 80044c6:	b299      	uxth	r1, r3
 80044c8:	fb02 6101 	mla	r1, r2, r1, r6
 80044cc:	0c1e      	lsrs	r6, r3, #16
 80044ce:	0c0b      	lsrs	r3, r1, #16
 80044d0:	fb02 3306 	mla	r3, r2, r6, r3
 80044d4:	b289      	uxth	r1, r1
 80044d6:	3001      	adds	r0, #1
 80044d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80044dc:	4285      	cmp	r5, r0
 80044de:	f84c 1b04 	str.w	r1, [ip], #4
 80044e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80044e6:	dcec      	bgt.n	80044c2 <__multadd+0x12>
 80044e8:	b30e      	cbz	r6, 800452e <__multadd+0x7e>
 80044ea:	68a3      	ldr	r3, [r4, #8]
 80044ec:	42ab      	cmp	r3, r5
 80044ee:	dc19      	bgt.n	8004524 <__multadd+0x74>
 80044f0:	6861      	ldr	r1, [r4, #4]
 80044f2:	4638      	mov	r0, r7
 80044f4:	3101      	adds	r1, #1
 80044f6:	f7ff ff79 	bl	80043ec <_Balloc>
 80044fa:	4680      	mov	r8, r0
 80044fc:	b928      	cbnz	r0, 800450a <__multadd+0x5a>
 80044fe:	4602      	mov	r2, r0
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <__multadd+0x84>)
 8004502:	480d      	ldr	r0, [pc, #52]	; (8004538 <__multadd+0x88>)
 8004504:	21ba      	movs	r1, #186	; 0xba
 8004506:	f000 fd93 	bl	8005030 <__assert_func>
 800450a:	6922      	ldr	r2, [r4, #16]
 800450c:	3202      	adds	r2, #2
 800450e:	f104 010c 	add.w	r1, r4, #12
 8004512:	0092      	lsls	r2, r2, #2
 8004514:	300c      	adds	r0, #12
 8004516:	f000 fd7d 	bl	8005014 <memcpy>
 800451a:	4621      	mov	r1, r4
 800451c:	4638      	mov	r0, r7
 800451e:	f7ff ffa5 	bl	800446c <_Bfree>
 8004522:	4644      	mov	r4, r8
 8004524:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004528:	3501      	adds	r5, #1
 800452a:	615e      	str	r6, [r3, #20]
 800452c:	6125      	str	r5, [r4, #16]
 800452e:	4620      	mov	r0, r4
 8004530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004534:	080053f5 	.word	0x080053f5
 8004538:	08005406 	.word	0x08005406

0800453c <__hi0bits>:
 800453c:	0c03      	lsrs	r3, r0, #16
 800453e:	041b      	lsls	r3, r3, #16
 8004540:	b9d3      	cbnz	r3, 8004578 <__hi0bits+0x3c>
 8004542:	0400      	lsls	r0, r0, #16
 8004544:	2310      	movs	r3, #16
 8004546:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800454a:	bf04      	itt	eq
 800454c:	0200      	lsleq	r0, r0, #8
 800454e:	3308      	addeq	r3, #8
 8004550:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004554:	bf04      	itt	eq
 8004556:	0100      	lsleq	r0, r0, #4
 8004558:	3304      	addeq	r3, #4
 800455a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800455e:	bf04      	itt	eq
 8004560:	0080      	lsleq	r0, r0, #2
 8004562:	3302      	addeq	r3, #2
 8004564:	2800      	cmp	r0, #0
 8004566:	db05      	blt.n	8004574 <__hi0bits+0x38>
 8004568:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800456c:	f103 0301 	add.w	r3, r3, #1
 8004570:	bf08      	it	eq
 8004572:	2320      	moveq	r3, #32
 8004574:	4618      	mov	r0, r3
 8004576:	4770      	bx	lr
 8004578:	2300      	movs	r3, #0
 800457a:	e7e4      	b.n	8004546 <__hi0bits+0xa>

0800457c <__lo0bits>:
 800457c:	6803      	ldr	r3, [r0, #0]
 800457e:	f013 0207 	ands.w	r2, r3, #7
 8004582:	d00c      	beq.n	800459e <__lo0bits+0x22>
 8004584:	07d9      	lsls	r1, r3, #31
 8004586:	d422      	bmi.n	80045ce <__lo0bits+0x52>
 8004588:	079a      	lsls	r2, r3, #30
 800458a:	bf49      	itett	mi
 800458c:	085b      	lsrmi	r3, r3, #1
 800458e:	089b      	lsrpl	r3, r3, #2
 8004590:	6003      	strmi	r3, [r0, #0]
 8004592:	2201      	movmi	r2, #1
 8004594:	bf5c      	itt	pl
 8004596:	6003      	strpl	r3, [r0, #0]
 8004598:	2202      	movpl	r2, #2
 800459a:	4610      	mov	r0, r2
 800459c:	4770      	bx	lr
 800459e:	b299      	uxth	r1, r3
 80045a0:	b909      	cbnz	r1, 80045a6 <__lo0bits+0x2a>
 80045a2:	0c1b      	lsrs	r3, r3, #16
 80045a4:	2210      	movs	r2, #16
 80045a6:	b2d9      	uxtb	r1, r3
 80045a8:	b909      	cbnz	r1, 80045ae <__lo0bits+0x32>
 80045aa:	3208      	adds	r2, #8
 80045ac:	0a1b      	lsrs	r3, r3, #8
 80045ae:	0719      	lsls	r1, r3, #28
 80045b0:	bf04      	itt	eq
 80045b2:	091b      	lsreq	r3, r3, #4
 80045b4:	3204      	addeq	r2, #4
 80045b6:	0799      	lsls	r1, r3, #30
 80045b8:	bf04      	itt	eq
 80045ba:	089b      	lsreq	r3, r3, #2
 80045bc:	3202      	addeq	r2, #2
 80045be:	07d9      	lsls	r1, r3, #31
 80045c0:	d403      	bmi.n	80045ca <__lo0bits+0x4e>
 80045c2:	085b      	lsrs	r3, r3, #1
 80045c4:	f102 0201 	add.w	r2, r2, #1
 80045c8:	d003      	beq.n	80045d2 <__lo0bits+0x56>
 80045ca:	6003      	str	r3, [r0, #0]
 80045cc:	e7e5      	b.n	800459a <__lo0bits+0x1e>
 80045ce:	2200      	movs	r2, #0
 80045d0:	e7e3      	b.n	800459a <__lo0bits+0x1e>
 80045d2:	2220      	movs	r2, #32
 80045d4:	e7e1      	b.n	800459a <__lo0bits+0x1e>
	...

080045d8 <__i2b>:
 80045d8:	b510      	push	{r4, lr}
 80045da:	460c      	mov	r4, r1
 80045dc:	2101      	movs	r1, #1
 80045de:	f7ff ff05 	bl	80043ec <_Balloc>
 80045e2:	4602      	mov	r2, r0
 80045e4:	b928      	cbnz	r0, 80045f2 <__i2b+0x1a>
 80045e6:	4b05      	ldr	r3, [pc, #20]	; (80045fc <__i2b+0x24>)
 80045e8:	4805      	ldr	r0, [pc, #20]	; (8004600 <__i2b+0x28>)
 80045ea:	f240 1145 	movw	r1, #325	; 0x145
 80045ee:	f000 fd1f 	bl	8005030 <__assert_func>
 80045f2:	2301      	movs	r3, #1
 80045f4:	6144      	str	r4, [r0, #20]
 80045f6:	6103      	str	r3, [r0, #16]
 80045f8:	bd10      	pop	{r4, pc}
 80045fa:	bf00      	nop
 80045fc:	080053f5 	.word	0x080053f5
 8004600:	08005406 	.word	0x08005406

08004604 <__multiply>:
 8004604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004608:	4691      	mov	r9, r2
 800460a:	690a      	ldr	r2, [r1, #16]
 800460c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004610:	429a      	cmp	r2, r3
 8004612:	bfb8      	it	lt
 8004614:	460b      	movlt	r3, r1
 8004616:	460c      	mov	r4, r1
 8004618:	bfbc      	itt	lt
 800461a:	464c      	movlt	r4, r9
 800461c:	4699      	movlt	r9, r3
 800461e:	6927      	ldr	r7, [r4, #16]
 8004620:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004624:	68a3      	ldr	r3, [r4, #8]
 8004626:	6861      	ldr	r1, [r4, #4]
 8004628:	eb07 060a 	add.w	r6, r7, sl
 800462c:	42b3      	cmp	r3, r6
 800462e:	b085      	sub	sp, #20
 8004630:	bfb8      	it	lt
 8004632:	3101      	addlt	r1, #1
 8004634:	f7ff feda 	bl	80043ec <_Balloc>
 8004638:	b930      	cbnz	r0, 8004648 <__multiply+0x44>
 800463a:	4602      	mov	r2, r0
 800463c:	4b44      	ldr	r3, [pc, #272]	; (8004750 <__multiply+0x14c>)
 800463e:	4845      	ldr	r0, [pc, #276]	; (8004754 <__multiply+0x150>)
 8004640:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004644:	f000 fcf4 	bl	8005030 <__assert_func>
 8004648:	f100 0514 	add.w	r5, r0, #20
 800464c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004650:	462b      	mov	r3, r5
 8004652:	2200      	movs	r2, #0
 8004654:	4543      	cmp	r3, r8
 8004656:	d321      	bcc.n	800469c <__multiply+0x98>
 8004658:	f104 0314 	add.w	r3, r4, #20
 800465c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004660:	f109 0314 	add.w	r3, r9, #20
 8004664:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004668:	9202      	str	r2, [sp, #8]
 800466a:	1b3a      	subs	r2, r7, r4
 800466c:	3a15      	subs	r2, #21
 800466e:	f022 0203 	bic.w	r2, r2, #3
 8004672:	3204      	adds	r2, #4
 8004674:	f104 0115 	add.w	r1, r4, #21
 8004678:	428f      	cmp	r7, r1
 800467a:	bf38      	it	cc
 800467c:	2204      	movcc	r2, #4
 800467e:	9201      	str	r2, [sp, #4]
 8004680:	9a02      	ldr	r2, [sp, #8]
 8004682:	9303      	str	r3, [sp, #12]
 8004684:	429a      	cmp	r2, r3
 8004686:	d80c      	bhi.n	80046a2 <__multiply+0x9e>
 8004688:	2e00      	cmp	r6, #0
 800468a:	dd03      	ble.n	8004694 <__multiply+0x90>
 800468c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004690:	2b00      	cmp	r3, #0
 8004692:	d05b      	beq.n	800474c <__multiply+0x148>
 8004694:	6106      	str	r6, [r0, #16]
 8004696:	b005      	add	sp, #20
 8004698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800469c:	f843 2b04 	str.w	r2, [r3], #4
 80046a0:	e7d8      	b.n	8004654 <__multiply+0x50>
 80046a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80046a6:	f1ba 0f00 	cmp.w	sl, #0
 80046aa:	d024      	beq.n	80046f6 <__multiply+0xf2>
 80046ac:	f104 0e14 	add.w	lr, r4, #20
 80046b0:	46a9      	mov	r9, r5
 80046b2:	f04f 0c00 	mov.w	ip, #0
 80046b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80046ba:	f8d9 1000 	ldr.w	r1, [r9]
 80046be:	fa1f fb82 	uxth.w	fp, r2
 80046c2:	b289      	uxth	r1, r1
 80046c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80046c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80046cc:	f8d9 2000 	ldr.w	r2, [r9]
 80046d0:	4461      	add	r1, ip
 80046d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80046d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80046da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80046de:	b289      	uxth	r1, r1
 80046e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80046e4:	4577      	cmp	r7, lr
 80046e6:	f849 1b04 	str.w	r1, [r9], #4
 80046ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80046ee:	d8e2      	bhi.n	80046b6 <__multiply+0xb2>
 80046f0:	9a01      	ldr	r2, [sp, #4]
 80046f2:	f845 c002 	str.w	ip, [r5, r2]
 80046f6:	9a03      	ldr	r2, [sp, #12]
 80046f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80046fc:	3304      	adds	r3, #4
 80046fe:	f1b9 0f00 	cmp.w	r9, #0
 8004702:	d021      	beq.n	8004748 <__multiply+0x144>
 8004704:	6829      	ldr	r1, [r5, #0]
 8004706:	f104 0c14 	add.w	ip, r4, #20
 800470a:	46ae      	mov	lr, r5
 800470c:	f04f 0a00 	mov.w	sl, #0
 8004710:	f8bc b000 	ldrh.w	fp, [ip]
 8004714:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004718:	fb09 220b 	mla	r2, r9, fp, r2
 800471c:	4452      	add	r2, sl
 800471e:	b289      	uxth	r1, r1
 8004720:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004724:	f84e 1b04 	str.w	r1, [lr], #4
 8004728:	f85c 1b04 	ldr.w	r1, [ip], #4
 800472c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004730:	f8be 1000 	ldrh.w	r1, [lr]
 8004734:	fb09 110a 	mla	r1, r9, sl, r1
 8004738:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800473c:	4567      	cmp	r7, ip
 800473e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004742:	d8e5      	bhi.n	8004710 <__multiply+0x10c>
 8004744:	9a01      	ldr	r2, [sp, #4]
 8004746:	50a9      	str	r1, [r5, r2]
 8004748:	3504      	adds	r5, #4
 800474a:	e799      	b.n	8004680 <__multiply+0x7c>
 800474c:	3e01      	subs	r6, #1
 800474e:	e79b      	b.n	8004688 <__multiply+0x84>
 8004750:	080053f5 	.word	0x080053f5
 8004754:	08005406 	.word	0x08005406

08004758 <__pow5mult>:
 8004758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800475c:	4615      	mov	r5, r2
 800475e:	f012 0203 	ands.w	r2, r2, #3
 8004762:	4606      	mov	r6, r0
 8004764:	460f      	mov	r7, r1
 8004766:	d007      	beq.n	8004778 <__pow5mult+0x20>
 8004768:	4c25      	ldr	r4, [pc, #148]	; (8004800 <__pow5mult+0xa8>)
 800476a:	3a01      	subs	r2, #1
 800476c:	2300      	movs	r3, #0
 800476e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004772:	f7ff fe9d 	bl	80044b0 <__multadd>
 8004776:	4607      	mov	r7, r0
 8004778:	10ad      	asrs	r5, r5, #2
 800477a:	d03d      	beq.n	80047f8 <__pow5mult+0xa0>
 800477c:	69f4      	ldr	r4, [r6, #28]
 800477e:	b97c      	cbnz	r4, 80047a0 <__pow5mult+0x48>
 8004780:	2010      	movs	r0, #16
 8004782:	f7ff fd7f 	bl	8004284 <malloc>
 8004786:	4602      	mov	r2, r0
 8004788:	61f0      	str	r0, [r6, #28]
 800478a:	b928      	cbnz	r0, 8004798 <__pow5mult+0x40>
 800478c:	4b1d      	ldr	r3, [pc, #116]	; (8004804 <__pow5mult+0xac>)
 800478e:	481e      	ldr	r0, [pc, #120]	; (8004808 <__pow5mult+0xb0>)
 8004790:	f240 11b3 	movw	r1, #435	; 0x1b3
 8004794:	f000 fc4c 	bl	8005030 <__assert_func>
 8004798:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800479c:	6004      	str	r4, [r0, #0]
 800479e:	60c4      	str	r4, [r0, #12]
 80047a0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80047a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80047a8:	b94c      	cbnz	r4, 80047be <__pow5mult+0x66>
 80047aa:	f240 2171 	movw	r1, #625	; 0x271
 80047ae:	4630      	mov	r0, r6
 80047b0:	f7ff ff12 	bl	80045d8 <__i2b>
 80047b4:	2300      	movs	r3, #0
 80047b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80047ba:	4604      	mov	r4, r0
 80047bc:	6003      	str	r3, [r0, #0]
 80047be:	f04f 0900 	mov.w	r9, #0
 80047c2:	07eb      	lsls	r3, r5, #31
 80047c4:	d50a      	bpl.n	80047dc <__pow5mult+0x84>
 80047c6:	4639      	mov	r1, r7
 80047c8:	4622      	mov	r2, r4
 80047ca:	4630      	mov	r0, r6
 80047cc:	f7ff ff1a 	bl	8004604 <__multiply>
 80047d0:	4639      	mov	r1, r7
 80047d2:	4680      	mov	r8, r0
 80047d4:	4630      	mov	r0, r6
 80047d6:	f7ff fe49 	bl	800446c <_Bfree>
 80047da:	4647      	mov	r7, r8
 80047dc:	106d      	asrs	r5, r5, #1
 80047de:	d00b      	beq.n	80047f8 <__pow5mult+0xa0>
 80047e0:	6820      	ldr	r0, [r4, #0]
 80047e2:	b938      	cbnz	r0, 80047f4 <__pow5mult+0x9c>
 80047e4:	4622      	mov	r2, r4
 80047e6:	4621      	mov	r1, r4
 80047e8:	4630      	mov	r0, r6
 80047ea:	f7ff ff0b 	bl	8004604 <__multiply>
 80047ee:	6020      	str	r0, [r4, #0]
 80047f0:	f8c0 9000 	str.w	r9, [r0]
 80047f4:	4604      	mov	r4, r0
 80047f6:	e7e4      	b.n	80047c2 <__pow5mult+0x6a>
 80047f8:	4638      	mov	r0, r7
 80047fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047fe:	bf00      	nop
 8004800:	08005550 	.word	0x08005550
 8004804:	08005386 	.word	0x08005386
 8004808:	08005406 	.word	0x08005406

0800480c <__lshift>:
 800480c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004810:	460c      	mov	r4, r1
 8004812:	6849      	ldr	r1, [r1, #4]
 8004814:	6923      	ldr	r3, [r4, #16]
 8004816:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800481a:	68a3      	ldr	r3, [r4, #8]
 800481c:	4607      	mov	r7, r0
 800481e:	4691      	mov	r9, r2
 8004820:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004824:	f108 0601 	add.w	r6, r8, #1
 8004828:	42b3      	cmp	r3, r6
 800482a:	db0b      	blt.n	8004844 <__lshift+0x38>
 800482c:	4638      	mov	r0, r7
 800482e:	f7ff fddd 	bl	80043ec <_Balloc>
 8004832:	4605      	mov	r5, r0
 8004834:	b948      	cbnz	r0, 800484a <__lshift+0x3e>
 8004836:	4602      	mov	r2, r0
 8004838:	4b28      	ldr	r3, [pc, #160]	; (80048dc <__lshift+0xd0>)
 800483a:	4829      	ldr	r0, [pc, #164]	; (80048e0 <__lshift+0xd4>)
 800483c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004840:	f000 fbf6 	bl	8005030 <__assert_func>
 8004844:	3101      	adds	r1, #1
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	e7ee      	b.n	8004828 <__lshift+0x1c>
 800484a:	2300      	movs	r3, #0
 800484c:	f100 0114 	add.w	r1, r0, #20
 8004850:	f100 0210 	add.w	r2, r0, #16
 8004854:	4618      	mov	r0, r3
 8004856:	4553      	cmp	r3, sl
 8004858:	db33      	blt.n	80048c2 <__lshift+0xb6>
 800485a:	6920      	ldr	r0, [r4, #16]
 800485c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004860:	f104 0314 	add.w	r3, r4, #20
 8004864:	f019 091f 	ands.w	r9, r9, #31
 8004868:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800486c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004870:	d02b      	beq.n	80048ca <__lshift+0xbe>
 8004872:	f1c9 0e20 	rsb	lr, r9, #32
 8004876:	468a      	mov	sl, r1
 8004878:	2200      	movs	r2, #0
 800487a:	6818      	ldr	r0, [r3, #0]
 800487c:	fa00 f009 	lsl.w	r0, r0, r9
 8004880:	4310      	orrs	r0, r2
 8004882:	f84a 0b04 	str.w	r0, [sl], #4
 8004886:	f853 2b04 	ldr.w	r2, [r3], #4
 800488a:	459c      	cmp	ip, r3
 800488c:	fa22 f20e 	lsr.w	r2, r2, lr
 8004890:	d8f3      	bhi.n	800487a <__lshift+0x6e>
 8004892:	ebac 0304 	sub.w	r3, ip, r4
 8004896:	3b15      	subs	r3, #21
 8004898:	f023 0303 	bic.w	r3, r3, #3
 800489c:	3304      	adds	r3, #4
 800489e:	f104 0015 	add.w	r0, r4, #21
 80048a2:	4584      	cmp	ip, r0
 80048a4:	bf38      	it	cc
 80048a6:	2304      	movcc	r3, #4
 80048a8:	50ca      	str	r2, [r1, r3]
 80048aa:	b10a      	cbz	r2, 80048b0 <__lshift+0xa4>
 80048ac:	f108 0602 	add.w	r6, r8, #2
 80048b0:	3e01      	subs	r6, #1
 80048b2:	4638      	mov	r0, r7
 80048b4:	612e      	str	r6, [r5, #16]
 80048b6:	4621      	mov	r1, r4
 80048b8:	f7ff fdd8 	bl	800446c <_Bfree>
 80048bc:	4628      	mov	r0, r5
 80048be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80048c6:	3301      	adds	r3, #1
 80048c8:	e7c5      	b.n	8004856 <__lshift+0x4a>
 80048ca:	3904      	subs	r1, #4
 80048cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80048d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80048d4:	459c      	cmp	ip, r3
 80048d6:	d8f9      	bhi.n	80048cc <__lshift+0xc0>
 80048d8:	e7ea      	b.n	80048b0 <__lshift+0xa4>
 80048da:	bf00      	nop
 80048dc:	080053f5 	.word	0x080053f5
 80048e0:	08005406 	.word	0x08005406

080048e4 <__mcmp>:
 80048e4:	b530      	push	{r4, r5, lr}
 80048e6:	6902      	ldr	r2, [r0, #16]
 80048e8:	690c      	ldr	r4, [r1, #16]
 80048ea:	1b12      	subs	r2, r2, r4
 80048ec:	d10e      	bne.n	800490c <__mcmp+0x28>
 80048ee:	f100 0314 	add.w	r3, r0, #20
 80048f2:	3114      	adds	r1, #20
 80048f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80048f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80048fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004900:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004904:	42a5      	cmp	r5, r4
 8004906:	d003      	beq.n	8004910 <__mcmp+0x2c>
 8004908:	d305      	bcc.n	8004916 <__mcmp+0x32>
 800490a:	2201      	movs	r2, #1
 800490c:	4610      	mov	r0, r2
 800490e:	bd30      	pop	{r4, r5, pc}
 8004910:	4283      	cmp	r3, r0
 8004912:	d3f3      	bcc.n	80048fc <__mcmp+0x18>
 8004914:	e7fa      	b.n	800490c <__mcmp+0x28>
 8004916:	f04f 32ff 	mov.w	r2, #4294967295
 800491a:	e7f7      	b.n	800490c <__mcmp+0x28>

0800491c <__mdiff>:
 800491c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004920:	460c      	mov	r4, r1
 8004922:	4606      	mov	r6, r0
 8004924:	4611      	mov	r1, r2
 8004926:	4620      	mov	r0, r4
 8004928:	4690      	mov	r8, r2
 800492a:	f7ff ffdb 	bl	80048e4 <__mcmp>
 800492e:	1e05      	subs	r5, r0, #0
 8004930:	d110      	bne.n	8004954 <__mdiff+0x38>
 8004932:	4629      	mov	r1, r5
 8004934:	4630      	mov	r0, r6
 8004936:	f7ff fd59 	bl	80043ec <_Balloc>
 800493a:	b930      	cbnz	r0, 800494a <__mdiff+0x2e>
 800493c:	4b3a      	ldr	r3, [pc, #232]	; (8004a28 <__mdiff+0x10c>)
 800493e:	4602      	mov	r2, r0
 8004940:	f240 2137 	movw	r1, #567	; 0x237
 8004944:	4839      	ldr	r0, [pc, #228]	; (8004a2c <__mdiff+0x110>)
 8004946:	f000 fb73 	bl	8005030 <__assert_func>
 800494a:	2301      	movs	r3, #1
 800494c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004950:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004954:	bfa4      	itt	ge
 8004956:	4643      	movge	r3, r8
 8004958:	46a0      	movge	r8, r4
 800495a:	4630      	mov	r0, r6
 800495c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004960:	bfa6      	itte	ge
 8004962:	461c      	movge	r4, r3
 8004964:	2500      	movge	r5, #0
 8004966:	2501      	movlt	r5, #1
 8004968:	f7ff fd40 	bl	80043ec <_Balloc>
 800496c:	b920      	cbnz	r0, 8004978 <__mdiff+0x5c>
 800496e:	4b2e      	ldr	r3, [pc, #184]	; (8004a28 <__mdiff+0x10c>)
 8004970:	4602      	mov	r2, r0
 8004972:	f240 2145 	movw	r1, #581	; 0x245
 8004976:	e7e5      	b.n	8004944 <__mdiff+0x28>
 8004978:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800497c:	6926      	ldr	r6, [r4, #16]
 800497e:	60c5      	str	r5, [r0, #12]
 8004980:	f104 0914 	add.w	r9, r4, #20
 8004984:	f108 0514 	add.w	r5, r8, #20
 8004988:	f100 0e14 	add.w	lr, r0, #20
 800498c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004990:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004994:	f108 0210 	add.w	r2, r8, #16
 8004998:	46f2      	mov	sl, lr
 800499a:	2100      	movs	r1, #0
 800499c:	f859 3b04 	ldr.w	r3, [r9], #4
 80049a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80049a4:	fa11 f88b 	uxtah	r8, r1, fp
 80049a8:	b299      	uxth	r1, r3
 80049aa:	0c1b      	lsrs	r3, r3, #16
 80049ac:	eba8 0801 	sub.w	r8, r8, r1
 80049b0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80049b4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80049b8:	fa1f f888 	uxth.w	r8, r8
 80049bc:	1419      	asrs	r1, r3, #16
 80049be:	454e      	cmp	r6, r9
 80049c0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80049c4:	f84a 3b04 	str.w	r3, [sl], #4
 80049c8:	d8e8      	bhi.n	800499c <__mdiff+0x80>
 80049ca:	1b33      	subs	r3, r6, r4
 80049cc:	3b15      	subs	r3, #21
 80049ce:	f023 0303 	bic.w	r3, r3, #3
 80049d2:	3304      	adds	r3, #4
 80049d4:	3415      	adds	r4, #21
 80049d6:	42a6      	cmp	r6, r4
 80049d8:	bf38      	it	cc
 80049da:	2304      	movcc	r3, #4
 80049dc:	441d      	add	r5, r3
 80049de:	4473      	add	r3, lr
 80049e0:	469e      	mov	lr, r3
 80049e2:	462e      	mov	r6, r5
 80049e4:	4566      	cmp	r6, ip
 80049e6:	d30e      	bcc.n	8004a06 <__mdiff+0xea>
 80049e8:	f10c 0203 	add.w	r2, ip, #3
 80049ec:	1b52      	subs	r2, r2, r5
 80049ee:	f022 0203 	bic.w	r2, r2, #3
 80049f2:	3d03      	subs	r5, #3
 80049f4:	45ac      	cmp	ip, r5
 80049f6:	bf38      	it	cc
 80049f8:	2200      	movcc	r2, #0
 80049fa:	4413      	add	r3, r2
 80049fc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004a00:	b17a      	cbz	r2, 8004a22 <__mdiff+0x106>
 8004a02:	6107      	str	r7, [r0, #16]
 8004a04:	e7a4      	b.n	8004950 <__mdiff+0x34>
 8004a06:	f856 8b04 	ldr.w	r8, [r6], #4
 8004a0a:	fa11 f288 	uxtah	r2, r1, r8
 8004a0e:	1414      	asrs	r4, r2, #16
 8004a10:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004a14:	b292      	uxth	r2, r2
 8004a16:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004a1a:	f84e 2b04 	str.w	r2, [lr], #4
 8004a1e:	1421      	asrs	r1, r4, #16
 8004a20:	e7e0      	b.n	80049e4 <__mdiff+0xc8>
 8004a22:	3f01      	subs	r7, #1
 8004a24:	e7ea      	b.n	80049fc <__mdiff+0xe0>
 8004a26:	bf00      	nop
 8004a28:	080053f5 	.word	0x080053f5
 8004a2c:	08005406 	.word	0x08005406

08004a30 <__d2b>:
 8004a30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004a34:	460f      	mov	r7, r1
 8004a36:	2101      	movs	r1, #1
 8004a38:	ec59 8b10 	vmov	r8, r9, d0
 8004a3c:	4616      	mov	r6, r2
 8004a3e:	f7ff fcd5 	bl	80043ec <_Balloc>
 8004a42:	4604      	mov	r4, r0
 8004a44:	b930      	cbnz	r0, 8004a54 <__d2b+0x24>
 8004a46:	4602      	mov	r2, r0
 8004a48:	4b24      	ldr	r3, [pc, #144]	; (8004adc <__d2b+0xac>)
 8004a4a:	4825      	ldr	r0, [pc, #148]	; (8004ae0 <__d2b+0xb0>)
 8004a4c:	f240 310f 	movw	r1, #783	; 0x30f
 8004a50:	f000 faee 	bl	8005030 <__assert_func>
 8004a54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004a58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004a5c:	bb2d      	cbnz	r5, 8004aaa <__d2b+0x7a>
 8004a5e:	9301      	str	r3, [sp, #4]
 8004a60:	f1b8 0300 	subs.w	r3, r8, #0
 8004a64:	d026      	beq.n	8004ab4 <__d2b+0x84>
 8004a66:	4668      	mov	r0, sp
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	f7ff fd87 	bl	800457c <__lo0bits>
 8004a6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004a72:	b1e8      	cbz	r0, 8004ab0 <__d2b+0x80>
 8004a74:	f1c0 0320 	rsb	r3, r0, #32
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	430b      	orrs	r3, r1
 8004a7e:	40c2      	lsrs	r2, r0
 8004a80:	6163      	str	r3, [r4, #20]
 8004a82:	9201      	str	r2, [sp, #4]
 8004a84:	9b01      	ldr	r3, [sp, #4]
 8004a86:	61a3      	str	r3, [r4, #24]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	bf14      	ite	ne
 8004a8c:	2202      	movne	r2, #2
 8004a8e:	2201      	moveq	r2, #1
 8004a90:	6122      	str	r2, [r4, #16]
 8004a92:	b1bd      	cbz	r5, 8004ac4 <__d2b+0x94>
 8004a94:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004a98:	4405      	add	r5, r0
 8004a9a:	603d      	str	r5, [r7, #0]
 8004a9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004aa0:	6030      	str	r0, [r6, #0]
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	b003      	add	sp, #12
 8004aa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004aaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aae:	e7d6      	b.n	8004a5e <__d2b+0x2e>
 8004ab0:	6161      	str	r1, [r4, #20]
 8004ab2:	e7e7      	b.n	8004a84 <__d2b+0x54>
 8004ab4:	a801      	add	r0, sp, #4
 8004ab6:	f7ff fd61 	bl	800457c <__lo0bits>
 8004aba:	9b01      	ldr	r3, [sp, #4]
 8004abc:	6163      	str	r3, [r4, #20]
 8004abe:	3020      	adds	r0, #32
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	e7e5      	b.n	8004a90 <__d2b+0x60>
 8004ac4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004ac8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004acc:	6038      	str	r0, [r7, #0]
 8004ace:	6918      	ldr	r0, [r3, #16]
 8004ad0:	f7ff fd34 	bl	800453c <__hi0bits>
 8004ad4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004ad8:	e7e2      	b.n	8004aa0 <__d2b+0x70>
 8004ada:	bf00      	nop
 8004adc:	080053f5 	.word	0x080053f5
 8004ae0:	08005406 	.word	0x08005406

08004ae4 <__sfputc_r>:
 8004ae4:	6893      	ldr	r3, [r2, #8]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	b410      	push	{r4}
 8004aec:	6093      	str	r3, [r2, #8]
 8004aee:	da08      	bge.n	8004b02 <__sfputc_r+0x1e>
 8004af0:	6994      	ldr	r4, [r2, #24]
 8004af2:	42a3      	cmp	r3, r4
 8004af4:	db01      	blt.n	8004afa <__sfputc_r+0x16>
 8004af6:	290a      	cmp	r1, #10
 8004af8:	d103      	bne.n	8004b02 <__sfputc_r+0x1e>
 8004afa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004afe:	f000 b9e3 	b.w	8004ec8 <__swbuf_r>
 8004b02:	6813      	ldr	r3, [r2, #0]
 8004b04:	1c58      	adds	r0, r3, #1
 8004b06:	6010      	str	r0, [r2, #0]
 8004b08:	7019      	strb	r1, [r3, #0]
 8004b0a:	4608      	mov	r0, r1
 8004b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <__sfputs_r>:
 8004b12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b14:	4606      	mov	r6, r0
 8004b16:	460f      	mov	r7, r1
 8004b18:	4614      	mov	r4, r2
 8004b1a:	18d5      	adds	r5, r2, r3
 8004b1c:	42ac      	cmp	r4, r5
 8004b1e:	d101      	bne.n	8004b24 <__sfputs_r+0x12>
 8004b20:	2000      	movs	r0, #0
 8004b22:	e007      	b.n	8004b34 <__sfputs_r+0x22>
 8004b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b28:	463a      	mov	r2, r7
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	f7ff ffda 	bl	8004ae4 <__sfputc_r>
 8004b30:	1c43      	adds	r3, r0, #1
 8004b32:	d1f3      	bne.n	8004b1c <__sfputs_r+0xa>
 8004b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b38 <_vfiprintf_r>:
 8004b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b3c:	460d      	mov	r5, r1
 8004b3e:	b09d      	sub	sp, #116	; 0x74
 8004b40:	4614      	mov	r4, r2
 8004b42:	4698      	mov	r8, r3
 8004b44:	4606      	mov	r6, r0
 8004b46:	b118      	cbz	r0, 8004b50 <_vfiprintf_r+0x18>
 8004b48:	6a03      	ldr	r3, [r0, #32]
 8004b4a:	b90b      	cbnz	r3, 8004b50 <_vfiprintf_r+0x18>
 8004b4c:	f7fe fbc8 	bl	80032e0 <__sinit>
 8004b50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b52:	07d9      	lsls	r1, r3, #31
 8004b54:	d405      	bmi.n	8004b62 <_vfiprintf_r+0x2a>
 8004b56:	89ab      	ldrh	r3, [r5, #12]
 8004b58:	059a      	lsls	r2, r3, #22
 8004b5a:	d402      	bmi.n	8004b62 <_vfiprintf_r+0x2a>
 8004b5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b5e:	f7fe fcc8 	bl	80034f2 <__retarget_lock_acquire_recursive>
 8004b62:	89ab      	ldrh	r3, [r5, #12]
 8004b64:	071b      	lsls	r3, r3, #28
 8004b66:	d501      	bpl.n	8004b6c <_vfiprintf_r+0x34>
 8004b68:	692b      	ldr	r3, [r5, #16]
 8004b6a:	b99b      	cbnz	r3, 8004b94 <_vfiprintf_r+0x5c>
 8004b6c:	4629      	mov	r1, r5
 8004b6e:	4630      	mov	r0, r6
 8004b70:	f000 f9e8 	bl	8004f44 <__swsetup_r>
 8004b74:	b170      	cbz	r0, 8004b94 <_vfiprintf_r+0x5c>
 8004b76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b78:	07dc      	lsls	r4, r3, #31
 8004b7a:	d504      	bpl.n	8004b86 <_vfiprintf_r+0x4e>
 8004b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b80:	b01d      	add	sp, #116	; 0x74
 8004b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b86:	89ab      	ldrh	r3, [r5, #12]
 8004b88:	0598      	lsls	r0, r3, #22
 8004b8a:	d4f7      	bmi.n	8004b7c <_vfiprintf_r+0x44>
 8004b8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b8e:	f7fe fcb1 	bl	80034f4 <__retarget_lock_release_recursive>
 8004b92:	e7f3      	b.n	8004b7c <_vfiprintf_r+0x44>
 8004b94:	2300      	movs	r3, #0
 8004b96:	9309      	str	r3, [sp, #36]	; 0x24
 8004b98:	2320      	movs	r3, #32
 8004b9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ba2:	2330      	movs	r3, #48	; 0x30
 8004ba4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004d58 <_vfiprintf_r+0x220>
 8004ba8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004bac:	f04f 0901 	mov.w	r9, #1
 8004bb0:	4623      	mov	r3, r4
 8004bb2:	469a      	mov	sl, r3
 8004bb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bb8:	b10a      	cbz	r2, 8004bbe <_vfiprintf_r+0x86>
 8004bba:	2a25      	cmp	r2, #37	; 0x25
 8004bbc:	d1f9      	bne.n	8004bb2 <_vfiprintf_r+0x7a>
 8004bbe:	ebba 0b04 	subs.w	fp, sl, r4
 8004bc2:	d00b      	beq.n	8004bdc <_vfiprintf_r+0xa4>
 8004bc4:	465b      	mov	r3, fp
 8004bc6:	4622      	mov	r2, r4
 8004bc8:	4629      	mov	r1, r5
 8004bca:	4630      	mov	r0, r6
 8004bcc:	f7ff ffa1 	bl	8004b12 <__sfputs_r>
 8004bd0:	3001      	adds	r0, #1
 8004bd2:	f000 80a9 	beq.w	8004d28 <_vfiprintf_r+0x1f0>
 8004bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bd8:	445a      	add	r2, fp
 8004bda:	9209      	str	r2, [sp, #36]	; 0x24
 8004bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f000 80a1 	beq.w	8004d28 <_vfiprintf_r+0x1f0>
 8004be6:	2300      	movs	r3, #0
 8004be8:	f04f 32ff 	mov.w	r2, #4294967295
 8004bec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bf0:	f10a 0a01 	add.w	sl, sl, #1
 8004bf4:	9304      	str	r3, [sp, #16]
 8004bf6:	9307      	str	r3, [sp, #28]
 8004bf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bfc:	931a      	str	r3, [sp, #104]	; 0x68
 8004bfe:	4654      	mov	r4, sl
 8004c00:	2205      	movs	r2, #5
 8004c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c06:	4854      	ldr	r0, [pc, #336]	; (8004d58 <_vfiprintf_r+0x220>)
 8004c08:	f7fb faea 	bl	80001e0 <memchr>
 8004c0c:	9a04      	ldr	r2, [sp, #16]
 8004c0e:	b9d8      	cbnz	r0, 8004c48 <_vfiprintf_r+0x110>
 8004c10:	06d1      	lsls	r1, r2, #27
 8004c12:	bf44      	itt	mi
 8004c14:	2320      	movmi	r3, #32
 8004c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c1a:	0713      	lsls	r3, r2, #28
 8004c1c:	bf44      	itt	mi
 8004c1e:	232b      	movmi	r3, #43	; 0x2b
 8004c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c24:	f89a 3000 	ldrb.w	r3, [sl]
 8004c28:	2b2a      	cmp	r3, #42	; 0x2a
 8004c2a:	d015      	beq.n	8004c58 <_vfiprintf_r+0x120>
 8004c2c:	9a07      	ldr	r2, [sp, #28]
 8004c2e:	4654      	mov	r4, sl
 8004c30:	2000      	movs	r0, #0
 8004c32:	f04f 0c0a 	mov.w	ip, #10
 8004c36:	4621      	mov	r1, r4
 8004c38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c3c:	3b30      	subs	r3, #48	; 0x30
 8004c3e:	2b09      	cmp	r3, #9
 8004c40:	d94d      	bls.n	8004cde <_vfiprintf_r+0x1a6>
 8004c42:	b1b0      	cbz	r0, 8004c72 <_vfiprintf_r+0x13a>
 8004c44:	9207      	str	r2, [sp, #28]
 8004c46:	e014      	b.n	8004c72 <_vfiprintf_r+0x13a>
 8004c48:	eba0 0308 	sub.w	r3, r0, r8
 8004c4c:	fa09 f303 	lsl.w	r3, r9, r3
 8004c50:	4313      	orrs	r3, r2
 8004c52:	9304      	str	r3, [sp, #16]
 8004c54:	46a2      	mov	sl, r4
 8004c56:	e7d2      	b.n	8004bfe <_vfiprintf_r+0xc6>
 8004c58:	9b03      	ldr	r3, [sp, #12]
 8004c5a:	1d19      	adds	r1, r3, #4
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	9103      	str	r1, [sp, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	bfbb      	ittet	lt
 8004c64:	425b      	neglt	r3, r3
 8004c66:	f042 0202 	orrlt.w	r2, r2, #2
 8004c6a:	9307      	strge	r3, [sp, #28]
 8004c6c:	9307      	strlt	r3, [sp, #28]
 8004c6e:	bfb8      	it	lt
 8004c70:	9204      	strlt	r2, [sp, #16]
 8004c72:	7823      	ldrb	r3, [r4, #0]
 8004c74:	2b2e      	cmp	r3, #46	; 0x2e
 8004c76:	d10c      	bne.n	8004c92 <_vfiprintf_r+0x15a>
 8004c78:	7863      	ldrb	r3, [r4, #1]
 8004c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8004c7c:	d134      	bne.n	8004ce8 <_vfiprintf_r+0x1b0>
 8004c7e:	9b03      	ldr	r3, [sp, #12]
 8004c80:	1d1a      	adds	r2, r3, #4
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	9203      	str	r2, [sp, #12]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	bfb8      	it	lt
 8004c8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c8e:	3402      	adds	r4, #2
 8004c90:	9305      	str	r3, [sp, #20]
 8004c92:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004d68 <_vfiprintf_r+0x230>
 8004c96:	7821      	ldrb	r1, [r4, #0]
 8004c98:	2203      	movs	r2, #3
 8004c9a:	4650      	mov	r0, sl
 8004c9c:	f7fb faa0 	bl	80001e0 <memchr>
 8004ca0:	b138      	cbz	r0, 8004cb2 <_vfiprintf_r+0x17a>
 8004ca2:	9b04      	ldr	r3, [sp, #16]
 8004ca4:	eba0 000a 	sub.w	r0, r0, sl
 8004ca8:	2240      	movs	r2, #64	; 0x40
 8004caa:	4082      	lsls	r2, r0
 8004cac:	4313      	orrs	r3, r2
 8004cae:	3401      	adds	r4, #1
 8004cb0:	9304      	str	r3, [sp, #16]
 8004cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cb6:	4829      	ldr	r0, [pc, #164]	; (8004d5c <_vfiprintf_r+0x224>)
 8004cb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cbc:	2206      	movs	r2, #6
 8004cbe:	f7fb fa8f 	bl	80001e0 <memchr>
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d03f      	beq.n	8004d46 <_vfiprintf_r+0x20e>
 8004cc6:	4b26      	ldr	r3, [pc, #152]	; (8004d60 <_vfiprintf_r+0x228>)
 8004cc8:	bb1b      	cbnz	r3, 8004d12 <_vfiprintf_r+0x1da>
 8004cca:	9b03      	ldr	r3, [sp, #12]
 8004ccc:	3307      	adds	r3, #7
 8004cce:	f023 0307 	bic.w	r3, r3, #7
 8004cd2:	3308      	adds	r3, #8
 8004cd4:	9303      	str	r3, [sp, #12]
 8004cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cd8:	443b      	add	r3, r7
 8004cda:	9309      	str	r3, [sp, #36]	; 0x24
 8004cdc:	e768      	b.n	8004bb0 <_vfiprintf_r+0x78>
 8004cde:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ce2:	460c      	mov	r4, r1
 8004ce4:	2001      	movs	r0, #1
 8004ce6:	e7a6      	b.n	8004c36 <_vfiprintf_r+0xfe>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	3401      	adds	r4, #1
 8004cec:	9305      	str	r3, [sp, #20]
 8004cee:	4619      	mov	r1, r3
 8004cf0:	f04f 0c0a 	mov.w	ip, #10
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cfa:	3a30      	subs	r2, #48	; 0x30
 8004cfc:	2a09      	cmp	r2, #9
 8004cfe:	d903      	bls.n	8004d08 <_vfiprintf_r+0x1d0>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d0c6      	beq.n	8004c92 <_vfiprintf_r+0x15a>
 8004d04:	9105      	str	r1, [sp, #20]
 8004d06:	e7c4      	b.n	8004c92 <_vfiprintf_r+0x15a>
 8004d08:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d0c:	4604      	mov	r4, r0
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e7f0      	b.n	8004cf4 <_vfiprintf_r+0x1bc>
 8004d12:	ab03      	add	r3, sp, #12
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	462a      	mov	r2, r5
 8004d18:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <_vfiprintf_r+0x22c>)
 8004d1a:	a904      	add	r1, sp, #16
 8004d1c:	4630      	mov	r0, r6
 8004d1e:	f7fd fe8d 	bl	8002a3c <_printf_float>
 8004d22:	4607      	mov	r7, r0
 8004d24:	1c78      	adds	r0, r7, #1
 8004d26:	d1d6      	bne.n	8004cd6 <_vfiprintf_r+0x19e>
 8004d28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d2a:	07d9      	lsls	r1, r3, #31
 8004d2c:	d405      	bmi.n	8004d3a <_vfiprintf_r+0x202>
 8004d2e:	89ab      	ldrh	r3, [r5, #12]
 8004d30:	059a      	lsls	r2, r3, #22
 8004d32:	d402      	bmi.n	8004d3a <_vfiprintf_r+0x202>
 8004d34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d36:	f7fe fbdd 	bl	80034f4 <__retarget_lock_release_recursive>
 8004d3a:	89ab      	ldrh	r3, [r5, #12]
 8004d3c:	065b      	lsls	r3, r3, #25
 8004d3e:	f53f af1d 	bmi.w	8004b7c <_vfiprintf_r+0x44>
 8004d42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d44:	e71c      	b.n	8004b80 <_vfiprintf_r+0x48>
 8004d46:	ab03      	add	r3, sp, #12
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	462a      	mov	r2, r5
 8004d4c:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <_vfiprintf_r+0x22c>)
 8004d4e:	a904      	add	r1, sp, #16
 8004d50:	4630      	mov	r0, r6
 8004d52:	f7fe f917 	bl	8002f84 <_printf_i>
 8004d56:	e7e4      	b.n	8004d22 <_vfiprintf_r+0x1ea>
 8004d58:	0800555c 	.word	0x0800555c
 8004d5c:	08005566 	.word	0x08005566
 8004d60:	08002a3d 	.word	0x08002a3d
 8004d64:	08004b13 	.word	0x08004b13
 8004d68:	08005562 	.word	0x08005562

08004d6c <__sflush_r>:
 8004d6c:	898a      	ldrh	r2, [r1, #12]
 8004d6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d72:	4605      	mov	r5, r0
 8004d74:	0710      	lsls	r0, r2, #28
 8004d76:	460c      	mov	r4, r1
 8004d78:	d458      	bmi.n	8004e2c <__sflush_r+0xc0>
 8004d7a:	684b      	ldr	r3, [r1, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	dc05      	bgt.n	8004d8c <__sflush_r+0x20>
 8004d80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	dc02      	bgt.n	8004d8c <__sflush_r+0x20>
 8004d86:	2000      	movs	r0, #0
 8004d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d8e:	2e00      	cmp	r6, #0
 8004d90:	d0f9      	beq.n	8004d86 <__sflush_r+0x1a>
 8004d92:	2300      	movs	r3, #0
 8004d94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d98:	682f      	ldr	r7, [r5, #0]
 8004d9a:	6a21      	ldr	r1, [r4, #32]
 8004d9c:	602b      	str	r3, [r5, #0]
 8004d9e:	d032      	beq.n	8004e06 <__sflush_r+0x9a>
 8004da0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004da2:	89a3      	ldrh	r3, [r4, #12]
 8004da4:	075a      	lsls	r2, r3, #29
 8004da6:	d505      	bpl.n	8004db4 <__sflush_r+0x48>
 8004da8:	6863      	ldr	r3, [r4, #4]
 8004daa:	1ac0      	subs	r0, r0, r3
 8004dac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004dae:	b10b      	cbz	r3, 8004db4 <__sflush_r+0x48>
 8004db0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004db2:	1ac0      	subs	r0, r0, r3
 8004db4:	2300      	movs	r3, #0
 8004db6:	4602      	mov	r2, r0
 8004db8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dba:	6a21      	ldr	r1, [r4, #32]
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	47b0      	blx	r6
 8004dc0:	1c43      	adds	r3, r0, #1
 8004dc2:	89a3      	ldrh	r3, [r4, #12]
 8004dc4:	d106      	bne.n	8004dd4 <__sflush_r+0x68>
 8004dc6:	6829      	ldr	r1, [r5, #0]
 8004dc8:	291d      	cmp	r1, #29
 8004dca:	d82b      	bhi.n	8004e24 <__sflush_r+0xb8>
 8004dcc:	4a29      	ldr	r2, [pc, #164]	; (8004e74 <__sflush_r+0x108>)
 8004dce:	410a      	asrs	r2, r1
 8004dd0:	07d6      	lsls	r6, r2, #31
 8004dd2:	d427      	bmi.n	8004e24 <__sflush_r+0xb8>
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	6062      	str	r2, [r4, #4]
 8004dd8:	04d9      	lsls	r1, r3, #19
 8004dda:	6922      	ldr	r2, [r4, #16]
 8004ddc:	6022      	str	r2, [r4, #0]
 8004dde:	d504      	bpl.n	8004dea <__sflush_r+0x7e>
 8004de0:	1c42      	adds	r2, r0, #1
 8004de2:	d101      	bne.n	8004de8 <__sflush_r+0x7c>
 8004de4:	682b      	ldr	r3, [r5, #0]
 8004de6:	b903      	cbnz	r3, 8004dea <__sflush_r+0x7e>
 8004de8:	6560      	str	r0, [r4, #84]	; 0x54
 8004dea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dec:	602f      	str	r7, [r5, #0]
 8004dee:	2900      	cmp	r1, #0
 8004df0:	d0c9      	beq.n	8004d86 <__sflush_r+0x1a>
 8004df2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004df6:	4299      	cmp	r1, r3
 8004df8:	d002      	beq.n	8004e00 <__sflush_r+0x94>
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	f7ff f9f6 	bl	80041ec <_free_r>
 8004e00:	2000      	movs	r0, #0
 8004e02:	6360      	str	r0, [r4, #52]	; 0x34
 8004e04:	e7c0      	b.n	8004d88 <__sflush_r+0x1c>
 8004e06:	2301      	movs	r3, #1
 8004e08:	4628      	mov	r0, r5
 8004e0a:	47b0      	blx	r6
 8004e0c:	1c41      	adds	r1, r0, #1
 8004e0e:	d1c8      	bne.n	8004da2 <__sflush_r+0x36>
 8004e10:	682b      	ldr	r3, [r5, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0c5      	beq.n	8004da2 <__sflush_r+0x36>
 8004e16:	2b1d      	cmp	r3, #29
 8004e18:	d001      	beq.n	8004e1e <__sflush_r+0xb2>
 8004e1a:	2b16      	cmp	r3, #22
 8004e1c:	d101      	bne.n	8004e22 <__sflush_r+0xb6>
 8004e1e:	602f      	str	r7, [r5, #0]
 8004e20:	e7b1      	b.n	8004d86 <__sflush_r+0x1a>
 8004e22:	89a3      	ldrh	r3, [r4, #12]
 8004e24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e28:	81a3      	strh	r3, [r4, #12]
 8004e2a:	e7ad      	b.n	8004d88 <__sflush_r+0x1c>
 8004e2c:	690f      	ldr	r7, [r1, #16]
 8004e2e:	2f00      	cmp	r7, #0
 8004e30:	d0a9      	beq.n	8004d86 <__sflush_r+0x1a>
 8004e32:	0793      	lsls	r3, r2, #30
 8004e34:	680e      	ldr	r6, [r1, #0]
 8004e36:	bf08      	it	eq
 8004e38:	694b      	ldreq	r3, [r1, #20]
 8004e3a:	600f      	str	r7, [r1, #0]
 8004e3c:	bf18      	it	ne
 8004e3e:	2300      	movne	r3, #0
 8004e40:	eba6 0807 	sub.w	r8, r6, r7
 8004e44:	608b      	str	r3, [r1, #8]
 8004e46:	f1b8 0f00 	cmp.w	r8, #0
 8004e4a:	dd9c      	ble.n	8004d86 <__sflush_r+0x1a>
 8004e4c:	6a21      	ldr	r1, [r4, #32]
 8004e4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e50:	4643      	mov	r3, r8
 8004e52:	463a      	mov	r2, r7
 8004e54:	4628      	mov	r0, r5
 8004e56:	47b0      	blx	r6
 8004e58:	2800      	cmp	r0, #0
 8004e5a:	dc06      	bgt.n	8004e6a <__sflush_r+0xfe>
 8004e5c:	89a3      	ldrh	r3, [r4, #12]
 8004e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e62:	81a3      	strh	r3, [r4, #12]
 8004e64:	f04f 30ff 	mov.w	r0, #4294967295
 8004e68:	e78e      	b.n	8004d88 <__sflush_r+0x1c>
 8004e6a:	4407      	add	r7, r0
 8004e6c:	eba8 0800 	sub.w	r8, r8, r0
 8004e70:	e7e9      	b.n	8004e46 <__sflush_r+0xda>
 8004e72:	bf00      	nop
 8004e74:	dfbffffe 	.word	0xdfbffffe

08004e78 <_fflush_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	690b      	ldr	r3, [r1, #16]
 8004e7c:	4605      	mov	r5, r0
 8004e7e:	460c      	mov	r4, r1
 8004e80:	b913      	cbnz	r3, 8004e88 <_fflush_r+0x10>
 8004e82:	2500      	movs	r5, #0
 8004e84:	4628      	mov	r0, r5
 8004e86:	bd38      	pop	{r3, r4, r5, pc}
 8004e88:	b118      	cbz	r0, 8004e92 <_fflush_r+0x1a>
 8004e8a:	6a03      	ldr	r3, [r0, #32]
 8004e8c:	b90b      	cbnz	r3, 8004e92 <_fflush_r+0x1a>
 8004e8e:	f7fe fa27 	bl	80032e0 <__sinit>
 8004e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0f3      	beq.n	8004e82 <_fflush_r+0xa>
 8004e9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e9c:	07d0      	lsls	r0, r2, #31
 8004e9e:	d404      	bmi.n	8004eaa <_fflush_r+0x32>
 8004ea0:	0599      	lsls	r1, r3, #22
 8004ea2:	d402      	bmi.n	8004eaa <_fflush_r+0x32>
 8004ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ea6:	f7fe fb24 	bl	80034f2 <__retarget_lock_acquire_recursive>
 8004eaa:	4628      	mov	r0, r5
 8004eac:	4621      	mov	r1, r4
 8004eae:	f7ff ff5d 	bl	8004d6c <__sflush_r>
 8004eb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004eb4:	07da      	lsls	r2, r3, #31
 8004eb6:	4605      	mov	r5, r0
 8004eb8:	d4e4      	bmi.n	8004e84 <_fflush_r+0xc>
 8004eba:	89a3      	ldrh	r3, [r4, #12]
 8004ebc:	059b      	lsls	r3, r3, #22
 8004ebe:	d4e1      	bmi.n	8004e84 <_fflush_r+0xc>
 8004ec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ec2:	f7fe fb17 	bl	80034f4 <__retarget_lock_release_recursive>
 8004ec6:	e7dd      	b.n	8004e84 <_fflush_r+0xc>

08004ec8 <__swbuf_r>:
 8004ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eca:	460e      	mov	r6, r1
 8004ecc:	4614      	mov	r4, r2
 8004ece:	4605      	mov	r5, r0
 8004ed0:	b118      	cbz	r0, 8004eda <__swbuf_r+0x12>
 8004ed2:	6a03      	ldr	r3, [r0, #32]
 8004ed4:	b90b      	cbnz	r3, 8004eda <__swbuf_r+0x12>
 8004ed6:	f7fe fa03 	bl	80032e0 <__sinit>
 8004eda:	69a3      	ldr	r3, [r4, #24]
 8004edc:	60a3      	str	r3, [r4, #8]
 8004ede:	89a3      	ldrh	r3, [r4, #12]
 8004ee0:	071a      	lsls	r2, r3, #28
 8004ee2:	d525      	bpl.n	8004f30 <__swbuf_r+0x68>
 8004ee4:	6923      	ldr	r3, [r4, #16]
 8004ee6:	b31b      	cbz	r3, 8004f30 <__swbuf_r+0x68>
 8004ee8:	6823      	ldr	r3, [r4, #0]
 8004eea:	6922      	ldr	r2, [r4, #16]
 8004eec:	1a98      	subs	r0, r3, r2
 8004eee:	6963      	ldr	r3, [r4, #20]
 8004ef0:	b2f6      	uxtb	r6, r6
 8004ef2:	4283      	cmp	r3, r0
 8004ef4:	4637      	mov	r7, r6
 8004ef6:	dc04      	bgt.n	8004f02 <__swbuf_r+0x3a>
 8004ef8:	4621      	mov	r1, r4
 8004efa:	4628      	mov	r0, r5
 8004efc:	f7ff ffbc 	bl	8004e78 <_fflush_r>
 8004f00:	b9e0      	cbnz	r0, 8004f3c <__swbuf_r+0x74>
 8004f02:	68a3      	ldr	r3, [r4, #8]
 8004f04:	3b01      	subs	r3, #1
 8004f06:	60a3      	str	r3, [r4, #8]
 8004f08:	6823      	ldr	r3, [r4, #0]
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	6022      	str	r2, [r4, #0]
 8004f0e:	701e      	strb	r6, [r3, #0]
 8004f10:	6962      	ldr	r2, [r4, #20]
 8004f12:	1c43      	adds	r3, r0, #1
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d004      	beq.n	8004f22 <__swbuf_r+0x5a>
 8004f18:	89a3      	ldrh	r3, [r4, #12]
 8004f1a:	07db      	lsls	r3, r3, #31
 8004f1c:	d506      	bpl.n	8004f2c <__swbuf_r+0x64>
 8004f1e:	2e0a      	cmp	r6, #10
 8004f20:	d104      	bne.n	8004f2c <__swbuf_r+0x64>
 8004f22:	4621      	mov	r1, r4
 8004f24:	4628      	mov	r0, r5
 8004f26:	f7ff ffa7 	bl	8004e78 <_fflush_r>
 8004f2a:	b938      	cbnz	r0, 8004f3c <__swbuf_r+0x74>
 8004f2c:	4638      	mov	r0, r7
 8004f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f30:	4621      	mov	r1, r4
 8004f32:	4628      	mov	r0, r5
 8004f34:	f000 f806 	bl	8004f44 <__swsetup_r>
 8004f38:	2800      	cmp	r0, #0
 8004f3a:	d0d5      	beq.n	8004ee8 <__swbuf_r+0x20>
 8004f3c:	f04f 37ff 	mov.w	r7, #4294967295
 8004f40:	e7f4      	b.n	8004f2c <__swbuf_r+0x64>
	...

08004f44 <__swsetup_r>:
 8004f44:	b538      	push	{r3, r4, r5, lr}
 8004f46:	4b2a      	ldr	r3, [pc, #168]	; (8004ff0 <__swsetup_r+0xac>)
 8004f48:	4605      	mov	r5, r0
 8004f4a:	6818      	ldr	r0, [r3, #0]
 8004f4c:	460c      	mov	r4, r1
 8004f4e:	b118      	cbz	r0, 8004f58 <__swsetup_r+0x14>
 8004f50:	6a03      	ldr	r3, [r0, #32]
 8004f52:	b90b      	cbnz	r3, 8004f58 <__swsetup_r+0x14>
 8004f54:	f7fe f9c4 	bl	80032e0 <__sinit>
 8004f58:	89a3      	ldrh	r3, [r4, #12]
 8004f5a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f5e:	0718      	lsls	r0, r3, #28
 8004f60:	d422      	bmi.n	8004fa8 <__swsetup_r+0x64>
 8004f62:	06d9      	lsls	r1, r3, #27
 8004f64:	d407      	bmi.n	8004f76 <__swsetup_r+0x32>
 8004f66:	2309      	movs	r3, #9
 8004f68:	602b      	str	r3, [r5, #0]
 8004f6a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f6e:	81a3      	strh	r3, [r4, #12]
 8004f70:	f04f 30ff 	mov.w	r0, #4294967295
 8004f74:	e034      	b.n	8004fe0 <__swsetup_r+0x9c>
 8004f76:	0758      	lsls	r0, r3, #29
 8004f78:	d512      	bpl.n	8004fa0 <__swsetup_r+0x5c>
 8004f7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f7c:	b141      	cbz	r1, 8004f90 <__swsetup_r+0x4c>
 8004f7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f82:	4299      	cmp	r1, r3
 8004f84:	d002      	beq.n	8004f8c <__swsetup_r+0x48>
 8004f86:	4628      	mov	r0, r5
 8004f88:	f7ff f930 	bl	80041ec <_free_r>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	6363      	str	r3, [r4, #52]	; 0x34
 8004f90:	89a3      	ldrh	r3, [r4, #12]
 8004f92:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f96:	81a3      	strh	r3, [r4, #12]
 8004f98:	2300      	movs	r3, #0
 8004f9a:	6063      	str	r3, [r4, #4]
 8004f9c:	6923      	ldr	r3, [r4, #16]
 8004f9e:	6023      	str	r3, [r4, #0]
 8004fa0:	89a3      	ldrh	r3, [r4, #12]
 8004fa2:	f043 0308 	orr.w	r3, r3, #8
 8004fa6:	81a3      	strh	r3, [r4, #12]
 8004fa8:	6923      	ldr	r3, [r4, #16]
 8004faa:	b94b      	cbnz	r3, 8004fc0 <__swsetup_r+0x7c>
 8004fac:	89a3      	ldrh	r3, [r4, #12]
 8004fae:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004fb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fb6:	d003      	beq.n	8004fc0 <__swsetup_r+0x7c>
 8004fb8:	4621      	mov	r1, r4
 8004fba:	4628      	mov	r0, r5
 8004fbc:	f000 f8c4 	bl	8005148 <__smakebuf_r>
 8004fc0:	89a0      	ldrh	r0, [r4, #12]
 8004fc2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fc6:	f010 0301 	ands.w	r3, r0, #1
 8004fca:	d00a      	beq.n	8004fe2 <__swsetup_r+0x9e>
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60a3      	str	r3, [r4, #8]
 8004fd0:	6963      	ldr	r3, [r4, #20]
 8004fd2:	425b      	negs	r3, r3
 8004fd4:	61a3      	str	r3, [r4, #24]
 8004fd6:	6923      	ldr	r3, [r4, #16]
 8004fd8:	b943      	cbnz	r3, 8004fec <__swsetup_r+0xa8>
 8004fda:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004fde:	d1c4      	bne.n	8004f6a <__swsetup_r+0x26>
 8004fe0:	bd38      	pop	{r3, r4, r5, pc}
 8004fe2:	0781      	lsls	r1, r0, #30
 8004fe4:	bf58      	it	pl
 8004fe6:	6963      	ldrpl	r3, [r4, #20]
 8004fe8:	60a3      	str	r3, [r4, #8]
 8004fea:	e7f4      	b.n	8004fd6 <__swsetup_r+0x92>
 8004fec:	2000      	movs	r0, #0
 8004fee:	e7f7      	b.n	8004fe0 <__swsetup_r+0x9c>
 8004ff0:	20000060 	.word	0x20000060

08004ff4 <_sbrk_r>:
 8004ff4:	b538      	push	{r3, r4, r5, lr}
 8004ff6:	4d06      	ldr	r5, [pc, #24]	; (8005010 <_sbrk_r+0x1c>)
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	4604      	mov	r4, r0
 8004ffc:	4608      	mov	r0, r1
 8004ffe:	602b      	str	r3, [r5, #0]
 8005000:	f7fd fae4 	bl	80025cc <_sbrk>
 8005004:	1c43      	adds	r3, r0, #1
 8005006:	d102      	bne.n	800500e <_sbrk_r+0x1a>
 8005008:	682b      	ldr	r3, [r5, #0]
 800500a:	b103      	cbz	r3, 800500e <_sbrk_r+0x1a>
 800500c:	6023      	str	r3, [r4, #0]
 800500e:	bd38      	pop	{r3, r4, r5, pc}
 8005010:	20000330 	.word	0x20000330

08005014 <memcpy>:
 8005014:	440a      	add	r2, r1
 8005016:	4291      	cmp	r1, r2
 8005018:	f100 33ff 	add.w	r3, r0, #4294967295
 800501c:	d100      	bne.n	8005020 <memcpy+0xc>
 800501e:	4770      	bx	lr
 8005020:	b510      	push	{r4, lr}
 8005022:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005026:	f803 4f01 	strb.w	r4, [r3, #1]!
 800502a:	4291      	cmp	r1, r2
 800502c:	d1f9      	bne.n	8005022 <memcpy+0xe>
 800502e:	bd10      	pop	{r4, pc}

08005030 <__assert_func>:
 8005030:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005032:	4614      	mov	r4, r2
 8005034:	461a      	mov	r2, r3
 8005036:	4b09      	ldr	r3, [pc, #36]	; (800505c <__assert_func+0x2c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4605      	mov	r5, r0
 800503c:	68d8      	ldr	r0, [r3, #12]
 800503e:	b14c      	cbz	r4, 8005054 <__assert_func+0x24>
 8005040:	4b07      	ldr	r3, [pc, #28]	; (8005060 <__assert_func+0x30>)
 8005042:	9100      	str	r1, [sp, #0]
 8005044:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005048:	4906      	ldr	r1, [pc, #24]	; (8005064 <__assert_func+0x34>)
 800504a:	462b      	mov	r3, r5
 800504c:	f000 f844 	bl	80050d8 <fiprintf>
 8005050:	f000 f8d8 	bl	8005204 <abort>
 8005054:	4b04      	ldr	r3, [pc, #16]	; (8005068 <__assert_func+0x38>)
 8005056:	461c      	mov	r4, r3
 8005058:	e7f3      	b.n	8005042 <__assert_func+0x12>
 800505a:	bf00      	nop
 800505c:	20000060 	.word	0x20000060
 8005060:	08005577 	.word	0x08005577
 8005064:	08005584 	.word	0x08005584
 8005068:	080055b2 	.word	0x080055b2

0800506c <_calloc_r>:
 800506c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800506e:	fba1 2402 	umull	r2, r4, r1, r2
 8005072:	b94c      	cbnz	r4, 8005088 <_calloc_r+0x1c>
 8005074:	4611      	mov	r1, r2
 8005076:	9201      	str	r2, [sp, #4]
 8005078:	f7ff f92c 	bl	80042d4 <_malloc_r>
 800507c:	9a01      	ldr	r2, [sp, #4]
 800507e:	4605      	mov	r5, r0
 8005080:	b930      	cbnz	r0, 8005090 <_calloc_r+0x24>
 8005082:	4628      	mov	r0, r5
 8005084:	b003      	add	sp, #12
 8005086:	bd30      	pop	{r4, r5, pc}
 8005088:	220c      	movs	r2, #12
 800508a:	6002      	str	r2, [r0, #0]
 800508c:	2500      	movs	r5, #0
 800508e:	e7f8      	b.n	8005082 <_calloc_r+0x16>
 8005090:	4621      	mov	r1, r4
 8005092:	f7fe f9b0 	bl	80033f6 <memset>
 8005096:	e7f4      	b.n	8005082 <_calloc_r+0x16>

08005098 <__ascii_mbtowc>:
 8005098:	b082      	sub	sp, #8
 800509a:	b901      	cbnz	r1, 800509e <__ascii_mbtowc+0x6>
 800509c:	a901      	add	r1, sp, #4
 800509e:	b142      	cbz	r2, 80050b2 <__ascii_mbtowc+0x1a>
 80050a0:	b14b      	cbz	r3, 80050b6 <__ascii_mbtowc+0x1e>
 80050a2:	7813      	ldrb	r3, [r2, #0]
 80050a4:	600b      	str	r3, [r1, #0]
 80050a6:	7812      	ldrb	r2, [r2, #0]
 80050a8:	1e10      	subs	r0, r2, #0
 80050aa:	bf18      	it	ne
 80050ac:	2001      	movne	r0, #1
 80050ae:	b002      	add	sp, #8
 80050b0:	4770      	bx	lr
 80050b2:	4610      	mov	r0, r2
 80050b4:	e7fb      	b.n	80050ae <__ascii_mbtowc+0x16>
 80050b6:	f06f 0001 	mvn.w	r0, #1
 80050ba:	e7f8      	b.n	80050ae <__ascii_mbtowc+0x16>

080050bc <__ascii_wctomb>:
 80050bc:	b149      	cbz	r1, 80050d2 <__ascii_wctomb+0x16>
 80050be:	2aff      	cmp	r2, #255	; 0xff
 80050c0:	bf85      	ittet	hi
 80050c2:	238a      	movhi	r3, #138	; 0x8a
 80050c4:	6003      	strhi	r3, [r0, #0]
 80050c6:	700a      	strbls	r2, [r1, #0]
 80050c8:	f04f 30ff 	movhi.w	r0, #4294967295
 80050cc:	bf98      	it	ls
 80050ce:	2001      	movls	r0, #1
 80050d0:	4770      	bx	lr
 80050d2:	4608      	mov	r0, r1
 80050d4:	4770      	bx	lr
	...

080050d8 <fiprintf>:
 80050d8:	b40e      	push	{r1, r2, r3}
 80050da:	b503      	push	{r0, r1, lr}
 80050dc:	4601      	mov	r1, r0
 80050de:	ab03      	add	r3, sp, #12
 80050e0:	4805      	ldr	r0, [pc, #20]	; (80050f8 <fiprintf+0x20>)
 80050e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80050e6:	6800      	ldr	r0, [r0, #0]
 80050e8:	9301      	str	r3, [sp, #4]
 80050ea:	f7ff fd25 	bl	8004b38 <_vfiprintf_r>
 80050ee:	b002      	add	sp, #8
 80050f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80050f4:	b003      	add	sp, #12
 80050f6:	4770      	bx	lr
 80050f8:	20000060 	.word	0x20000060

080050fc <__swhatbuf_r>:
 80050fc:	b570      	push	{r4, r5, r6, lr}
 80050fe:	460c      	mov	r4, r1
 8005100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005104:	2900      	cmp	r1, #0
 8005106:	b096      	sub	sp, #88	; 0x58
 8005108:	4615      	mov	r5, r2
 800510a:	461e      	mov	r6, r3
 800510c:	da0d      	bge.n	800512a <__swhatbuf_r+0x2e>
 800510e:	89a3      	ldrh	r3, [r4, #12]
 8005110:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005114:	f04f 0100 	mov.w	r1, #0
 8005118:	bf0c      	ite	eq
 800511a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800511e:	2340      	movne	r3, #64	; 0x40
 8005120:	2000      	movs	r0, #0
 8005122:	6031      	str	r1, [r6, #0]
 8005124:	602b      	str	r3, [r5, #0]
 8005126:	b016      	add	sp, #88	; 0x58
 8005128:	bd70      	pop	{r4, r5, r6, pc}
 800512a:	466a      	mov	r2, sp
 800512c:	f000 f848 	bl	80051c0 <_fstat_r>
 8005130:	2800      	cmp	r0, #0
 8005132:	dbec      	blt.n	800510e <__swhatbuf_r+0x12>
 8005134:	9901      	ldr	r1, [sp, #4]
 8005136:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800513a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800513e:	4259      	negs	r1, r3
 8005140:	4159      	adcs	r1, r3
 8005142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005146:	e7eb      	b.n	8005120 <__swhatbuf_r+0x24>

08005148 <__smakebuf_r>:
 8005148:	898b      	ldrh	r3, [r1, #12]
 800514a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800514c:	079d      	lsls	r5, r3, #30
 800514e:	4606      	mov	r6, r0
 8005150:	460c      	mov	r4, r1
 8005152:	d507      	bpl.n	8005164 <__smakebuf_r+0x1c>
 8005154:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	6123      	str	r3, [r4, #16]
 800515c:	2301      	movs	r3, #1
 800515e:	6163      	str	r3, [r4, #20]
 8005160:	b002      	add	sp, #8
 8005162:	bd70      	pop	{r4, r5, r6, pc}
 8005164:	ab01      	add	r3, sp, #4
 8005166:	466a      	mov	r2, sp
 8005168:	f7ff ffc8 	bl	80050fc <__swhatbuf_r>
 800516c:	9900      	ldr	r1, [sp, #0]
 800516e:	4605      	mov	r5, r0
 8005170:	4630      	mov	r0, r6
 8005172:	f7ff f8af 	bl	80042d4 <_malloc_r>
 8005176:	b948      	cbnz	r0, 800518c <__smakebuf_r+0x44>
 8005178:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800517c:	059a      	lsls	r2, r3, #22
 800517e:	d4ef      	bmi.n	8005160 <__smakebuf_r+0x18>
 8005180:	f023 0303 	bic.w	r3, r3, #3
 8005184:	f043 0302 	orr.w	r3, r3, #2
 8005188:	81a3      	strh	r3, [r4, #12]
 800518a:	e7e3      	b.n	8005154 <__smakebuf_r+0xc>
 800518c:	89a3      	ldrh	r3, [r4, #12]
 800518e:	6020      	str	r0, [r4, #0]
 8005190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005194:	81a3      	strh	r3, [r4, #12]
 8005196:	9b00      	ldr	r3, [sp, #0]
 8005198:	6163      	str	r3, [r4, #20]
 800519a:	9b01      	ldr	r3, [sp, #4]
 800519c:	6120      	str	r0, [r4, #16]
 800519e:	b15b      	cbz	r3, 80051b8 <__smakebuf_r+0x70>
 80051a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051a4:	4630      	mov	r0, r6
 80051a6:	f000 f81d 	bl	80051e4 <_isatty_r>
 80051aa:	b128      	cbz	r0, 80051b8 <__smakebuf_r+0x70>
 80051ac:	89a3      	ldrh	r3, [r4, #12]
 80051ae:	f023 0303 	bic.w	r3, r3, #3
 80051b2:	f043 0301 	orr.w	r3, r3, #1
 80051b6:	81a3      	strh	r3, [r4, #12]
 80051b8:	89a3      	ldrh	r3, [r4, #12]
 80051ba:	431d      	orrs	r5, r3
 80051bc:	81a5      	strh	r5, [r4, #12]
 80051be:	e7cf      	b.n	8005160 <__smakebuf_r+0x18>

080051c0 <_fstat_r>:
 80051c0:	b538      	push	{r3, r4, r5, lr}
 80051c2:	4d07      	ldr	r5, [pc, #28]	; (80051e0 <_fstat_r+0x20>)
 80051c4:	2300      	movs	r3, #0
 80051c6:	4604      	mov	r4, r0
 80051c8:	4608      	mov	r0, r1
 80051ca:	4611      	mov	r1, r2
 80051cc:	602b      	str	r3, [r5, #0]
 80051ce:	f7fd f9d4 	bl	800257a <_fstat>
 80051d2:	1c43      	adds	r3, r0, #1
 80051d4:	d102      	bne.n	80051dc <_fstat_r+0x1c>
 80051d6:	682b      	ldr	r3, [r5, #0]
 80051d8:	b103      	cbz	r3, 80051dc <_fstat_r+0x1c>
 80051da:	6023      	str	r3, [r4, #0]
 80051dc:	bd38      	pop	{r3, r4, r5, pc}
 80051de:	bf00      	nop
 80051e0:	20000330 	.word	0x20000330

080051e4 <_isatty_r>:
 80051e4:	b538      	push	{r3, r4, r5, lr}
 80051e6:	4d06      	ldr	r5, [pc, #24]	; (8005200 <_isatty_r+0x1c>)
 80051e8:	2300      	movs	r3, #0
 80051ea:	4604      	mov	r4, r0
 80051ec:	4608      	mov	r0, r1
 80051ee:	602b      	str	r3, [r5, #0]
 80051f0:	f7fd f9d3 	bl	800259a <_isatty>
 80051f4:	1c43      	adds	r3, r0, #1
 80051f6:	d102      	bne.n	80051fe <_isatty_r+0x1a>
 80051f8:	682b      	ldr	r3, [r5, #0]
 80051fa:	b103      	cbz	r3, 80051fe <_isatty_r+0x1a>
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	bd38      	pop	{r3, r4, r5, pc}
 8005200:	20000330 	.word	0x20000330

08005204 <abort>:
 8005204:	b508      	push	{r3, lr}
 8005206:	2006      	movs	r0, #6
 8005208:	f000 f82c 	bl	8005264 <raise>
 800520c:	2001      	movs	r0, #1
 800520e:	f7fd f965 	bl	80024dc <_exit>

08005212 <_raise_r>:
 8005212:	291f      	cmp	r1, #31
 8005214:	b538      	push	{r3, r4, r5, lr}
 8005216:	4604      	mov	r4, r0
 8005218:	460d      	mov	r5, r1
 800521a:	d904      	bls.n	8005226 <_raise_r+0x14>
 800521c:	2316      	movs	r3, #22
 800521e:	6003      	str	r3, [r0, #0]
 8005220:	f04f 30ff 	mov.w	r0, #4294967295
 8005224:	bd38      	pop	{r3, r4, r5, pc}
 8005226:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005228:	b112      	cbz	r2, 8005230 <_raise_r+0x1e>
 800522a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800522e:	b94b      	cbnz	r3, 8005244 <_raise_r+0x32>
 8005230:	4620      	mov	r0, r4
 8005232:	f000 f831 	bl	8005298 <_getpid_r>
 8005236:	462a      	mov	r2, r5
 8005238:	4601      	mov	r1, r0
 800523a:	4620      	mov	r0, r4
 800523c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005240:	f000 b818 	b.w	8005274 <_kill_r>
 8005244:	2b01      	cmp	r3, #1
 8005246:	d00a      	beq.n	800525e <_raise_r+0x4c>
 8005248:	1c59      	adds	r1, r3, #1
 800524a:	d103      	bne.n	8005254 <_raise_r+0x42>
 800524c:	2316      	movs	r3, #22
 800524e:	6003      	str	r3, [r0, #0]
 8005250:	2001      	movs	r0, #1
 8005252:	e7e7      	b.n	8005224 <_raise_r+0x12>
 8005254:	2400      	movs	r4, #0
 8005256:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800525a:	4628      	mov	r0, r5
 800525c:	4798      	blx	r3
 800525e:	2000      	movs	r0, #0
 8005260:	e7e0      	b.n	8005224 <_raise_r+0x12>
	...

08005264 <raise>:
 8005264:	4b02      	ldr	r3, [pc, #8]	; (8005270 <raise+0xc>)
 8005266:	4601      	mov	r1, r0
 8005268:	6818      	ldr	r0, [r3, #0]
 800526a:	f7ff bfd2 	b.w	8005212 <_raise_r>
 800526e:	bf00      	nop
 8005270:	20000060 	.word	0x20000060

08005274 <_kill_r>:
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	4d07      	ldr	r5, [pc, #28]	; (8005294 <_kill_r+0x20>)
 8005278:	2300      	movs	r3, #0
 800527a:	4604      	mov	r4, r0
 800527c:	4608      	mov	r0, r1
 800527e:	4611      	mov	r1, r2
 8005280:	602b      	str	r3, [r5, #0]
 8005282:	f7fd f91b 	bl	80024bc <_kill>
 8005286:	1c43      	adds	r3, r0, #1
 8005288:	d102      	bne.n	8005290 <_kill_r+0x1c>
 800528a:	682b      	ldr	r3, [r5, #0]
 800528c:	b103      	cbz	r3, 8005290 <_kill_r+0x1c>
 800528e:	6023      	str	r3, [r4, #0]
 8005290:	bd38      	pop	{r3, r4, r5, pc}
 8005292:	bf00      	nop
 8005294:	20000330 	.word	0x20000330

08005298 <_getpid_r>:
 8005298:	f7fd b908 	b.w	80024ac <_getpid>

0800529c <_init>:
 800529c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529e:	bf00      	nop
 80052a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052a2:	bc08      	pop	{r3}
 80052a4:	469e      	mov	lr, r3
 80052a6:	4770      	bx	lr

080052a8 <_fini>:
 80052a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052aa:	bf00      	nop
 80052ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ae:	bc08      	pop	{r3}
 80052b0:	469e      	mov	lr, r3
 80052b2:	4770      	bx	lr
