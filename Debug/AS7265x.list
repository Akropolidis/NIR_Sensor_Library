
AS7265x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000475c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08004900  08004900  00014900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cac  08004cac  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  08004cac  08004cac  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004cac  08004cac  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cac  08004cac  00014cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cb0  08004cb0  00014cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08004cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200001cc  08004e80  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08004e80  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002f43  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000be8  00000000  00000000  00023182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000420  00000000  00000000  00023d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002fe  00000000  00000000  00024190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fe8a  00000000  00000000  0002448e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003d17  00000000  00000000  00034318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000561ed  00000000  00000000  0003802f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001edc  00000000  00000000  0008e21c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000900f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001cc 	.word	0x200001cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080048e4 	.word	0x080048e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d0 	.word	0x200001d0
 80001dc:	080048e4 	.word	0x080048e4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <begin>:


//Initializes the sensor with basic settings
//Returns false if sensor is not detected
bool begin()
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
	SysTick_Init();
 8000bbe:	f001 f88b 	bl	8001cd8 <SysTick_Init>
	uart2_rxtx_init();
 8000bc2:	f001 f8e9 	bl	8001d98 <uart2_rxtx_init>
	I2C1_Init();
 8000bc6:	f000 fcef 	bl	80015a8 <I2C1_Init>
	fpu_enable();
 8000bca:	f000 f891 	bl	8000cf0 <fpu_enable>

	if (isConnected() == false)
 8000bce:	f000 f83f 	bl	8000c50 <isConnected>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	f083 0301 	eor.w	r3, r3, #1
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <begin+0x2a>
	{
		return false; //Check for sensor presence
 8000bde:	2300      	movs	r3, #0
 8000be0:	e031      	b.n	8000c46 <begin+0x8e>
	}

	uint8_t value = virtualReadRegister(AS7265X_DEV_SELECT_CONTROL);
 8000be2:	204f      	movs	r0, #79	; 0x4f
 8000be4:	f000 f904 	bl	8000df0 <virtualReadRegister>
 8000be8:	4603      	mov	r3, r0
 8000bea:	71fb      	strb	r3, [r7, #7]
	if ((value & 0b00110000) == 0) //Check for presence of first and second slave devices
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d101      	bne.n	8000bfa <begin+0x42>
	{
		return false;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e025      	b.n	8000c46 <begin+0x8e>
	}

	setLEDCurrent(AS7265X_LED_CURRENT_LIMIT_12_5MA, AS7265x_LED_WHITE);
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f000 fb17 	bl	8001230 <setLEDCurrent>
	setLEDCurrent(AS7265X_LED_CURRENT_LIMIT_12_5MA, AS7265x_LED_IR);
 8000c02:	2101      	movs	r1, #1
 8000c04:	2000      	movs	r0, #0
 8000c06:	f000 fb13 	bl	8001230 <setLEDCurrent>
	setLEDCurrent(AS7265X_LED_CURRENT_LIMIT_12_5MA, AS7265x_LED_UV);
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f000 fb0f 	bl	8001230 <setLEDCurrent>

	disableLED(AS7265x_LED_WHITE); //Turn off bulb to avoid heating sensor
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 fa72 	bl	80010fc <disableLED>
	disableLED(AS7265x_LED_IR);
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f000 fa6f 	bl	80010fc <disableLED>
	disableLED(AS7265x_LED_UV);
 8000c1e:	2002      	movs	r0, #2
 8000c20:	f000 fa6c 	bl	80010fc <disableLED>

	setIndicatorCurrent(AS7265X_INDICATOR_CURRENT_LIMIT_2MA);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f000 fb2e 	bl	8001286 <setIndicatorCurrent>
	enableIndicator();
 8000c2a:	f000 fa34 	bl	8001096 <enableIndicator>

	setIntegrationCycles(49); //(49 + 1) * 2.78ms = 139ms. 0 to 255 is valid.
 8000c2e:	2031      	movs	r0, #49	; 0x31
 8000c30:	f000 faca 	bl	80011c8 <setIntegrationCycles>
	//If you use Mode 2 or 3 (all the colors) then integration time is double. 139*2 = 278ms between readings.

	setGain(AS7265X_GAIN_64X);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 fa7c 	bl	8001132 <setGain>

	setMeasurementMode(AS7265X_MEASUREMENT_MODE_6CHAN_ONE_SHOT);
 8000c3a:	2003      	movs	r0, #3
 8000c3c:	f000 fa9d 	bl	800117a <setMeasurementMode>

	enableInterrupt();
 8000c40:	f000 fb48 	bl	80012d4 <enableInterrupt>

	return true;
 8000c44:	2301      	movs	r3, #1
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <isConnected>:

//Returns TRUE if the device sends an ACK indicating it is connected
bool isConnected()
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
	uint32_t timeout = 1000; //Timeout to connect set to 1000ms
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	60fb      	str	r3, [r7, #12]
	unsigned long startTime = getMillis();
 8000c5c:	f001 f86e 	bl	8001d3c <getMillis>
 8000c60:	60b8      	str	r0, [r7, #8]

	while ((getMillis() - startTime) < timeout)
 8000c62:	e035      	b.n	8000cd0 <isConnected+0x80>
	{
		volatile int tmp;

		/* Wait until bus not busy */
		while (I2C1->SR2 & (SR2_BUSY)){}
 8000c64:	bf00      	nop
 8000c66:	4b21      	ldr	r3, [pc, #132]	; (8000cec <isConnected+0x9c>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1f9      	bne.n	8000c66 <isConnected+0x16>

		/* Generate start condition */
		I2C1->CR1 |= CR1_START;
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <isConnected+0x9c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a1d      	ldr	r2, [pc, #116]	; (8000cec <isConnected+0x9c>)
 8000c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7c:	6013      	str	r3, [r2, #0]

		/* Wait until start condition flag is set */
		while (!(I2C1->SR1 & (SR1_SB))){}
 8000c7e:	bf00      	nop
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <isConnected+0x9c>)
 8000c82:	695b      	ldr	r3, [r3, #20]
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d0f9      	beq.n	8000c80 <isConnected+0x30>

		/* Transmit slave address + Write (0) */
		I2C1->DR = AS7265X_WRITE_ADDR;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <isConnected+0x9c>)
 8000c8e:	2292      	movs	r2, #146	; 0x92
 8000c90:	611a      	str	r2, [r3, #16]

		/* Wait until address flag is set */
		while (!(I2C1->SR1 & (SR1_ADDR))){}
 8000c92:	bf00      	nop
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <isConnected+0x9c>)
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0f9      	beq.n	8000c94 <isConnected+0x44>

		/* Clear address flag by reading SR2 register */
		tmp = I2C1->SR2;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <isConnected+0x9c>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	607b      	str	r3, [r7, #4]

		if (I2C1->SR1 & SR1_AF)
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <isConnected+0x9c>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d006      	beq.n	8000cc0 <isConnected+0x70>
		{
			//No ACK received, address not acknowledged
			I2C1->CR1 |= CR1_STOP;  // Send STOP condition
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <isConnected+0x9c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <isConnected+0x9c>)
 8000cb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cbc:	6013      	str	r3, [r2, #0]
			continue;
 8000cbe:	e007      	b.n	8000cd0 <isConnected+0x80>
		}

		//Address acknowledged, device is connected
		I2C1->CR1 |= CR1_STOP; // Send STOP condition
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <isConnected+0x9c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a09      	ldr	r2, [pc, #36]	; (8000cec <isConnected+0x9c>)
 8000cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cca:	6013      	str	r3, [r2, #0]
		return true;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e008      	b.n	8000ce2 <isConnected+0x92>
	while ((getMillis() - startTime) < timeout)
 8000cd0:	f001 f834 	bl	8001d3c <getMillis>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d8c1      	bhi.n	8000c64 <isConnected+0x14>
	}
	//Timeout to connect has expired, hence device is not connected
	return false;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40005400 	.word	0x40005400

08000cf0 <fpu_enable>:

void fpu_enable()
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
	/*Enable Floating Point Unit: Enable CP10 and CP11 full access*/
	SCB->CPACR |= (1U<<20);
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <fpu_enable+0x50>)
 8000cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfa:	4a11      	ldr	r2, [pc, #68]	; (8000d40 <fpu_enable+0x50>)
 8000cfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |= (1U<<21);
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <fpu_enable+0x50>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0a:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <fpu_enable+0x50>)
 8000d0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |= (1U<<22);
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <fpu_enable+0x50>)
 8000d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1a:	4a09      	ldr	r2, [pc, #36]	; (8000d40 <fpu_enable+0x50>)
 8000d1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |= (1U<<23);
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <fpu_enable+0x50>)
 8000d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <fpu_enable+0x50>)
 8000d2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <readRegister>:

//Reads from a given location from the AS726x
static uint8_t readRegister(uint8_t addr)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
	char data = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	73fb      	strb	r3, [r7, #15]
	I2C1_byteRead(AS7265X_ADDR, addr, &data);
 8000d52:	f107 020f 	add.w	r2, r7, #15
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	2049      	movs	r0, #73	; 0x49
 8000d5c:	f000 fcc8 	bl	80016f0 <I2C1_byteRead>
	return data;
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <writeRegister>:

//Write a value to a given location on the AS726x
static void writeRegister(uint8_t addr, uint8_t val)
{
 8000d6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	460a      	mov	r2, r1
 8000d76:	71fb      	strb	r3, [r7, #7]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	71bb      	strb	r3, [r7, #6]
 8000d7c:	466b      	mov	r3, sp
 8000d7e:	461e      	mov	r6, r3
	uint8_t bufferSize = 1;
 8000d80:	2301      	movs	r3, #1
 8000d82:	75fb      	strb	r3, [r7, #23]
	char data[bufferSize];
 8000d84:	7df9      	ldrb	r1, [r7, #23]
 8000d86:	460b      	mov	r3, r1
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	b2cb      	uxtb	r3, r1
 8000d8e:	2200      	movs	r2, #0
 8000d90:	4698      	mov	r8, r3
 8000d92:	4691      	mov	r9, r2
 8000d94:	f04f 0200 	mov.w	r2, #0
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000da0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000da4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000da8:	b2cb      	uxtb	r3, r1
 8000daa:	2200      	movs	r2, #0
 8000dac:	461c      	mov	r4, r3
 8000dae:	4615      	mov	r5, r2
 8000db0:	f04f 0200 	mov.w	r2, #0
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	00eb      	lsls	r3, r5, #3
 8000dba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000dbe:	00e2      	lsls	r2, r4, #3
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	3307      	adds	r3, #7
 8000dc4:	08db      	lsrs	r3, r3, #3
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	ebad 0d03 	sub.w	sp, sp, r3
 8000dcc:	466b      	mov	r3, sp
 8000dce:	3300      	adds	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]

	data[0] = val;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	79ba      	ldrb	r2, [r7, #6]
 8000dd6:	701a      	strb	r2, [r3, #0]
	I2C1_burstWrite(AS7265X_ADDR, addr, bufferSize, data);
 8000dd8:	7dfa      	ldrb	r2, [r7, #23]
 8000dda:	79f9      	ldrb	r1, [r7, #7]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2049      	movs	r0, #73	; 0x49
 8000de0:	f000 fd00 	bl	80017e4 <I2C1_burstWrite>
 8000de4:	46b5      	mov	sp, r6
}
 8000de6:	bf00      	nop
 8000de8:	371c      	adds	r7, #28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000df0 <virtualReadRegister>:

//Read from a virtual register on the AS7265x
static uint8_t virtualReadRegister(uint8_t virtualAddr)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
	volatile uint8_t status, data;

	//Do a preliminary check of the read register
	status = readRegister(AS7265X_STATUS_REG);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff ffa2 	bl	8000d44 <readRegister>
 8000e00:	4603      	mov	r3, r0
 8000e02:	72fb      	strb	r3, [r7, #11]
	if((status & AS7265X_RX_VALID) != 0) //Data byte available in READ register
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d002      	beq.n	8000e16 <virtualReadRegister+0x26>
	{
		readRegister(AS7265X_READ_REG); //Read the byte but do nothing
 8000e10:	2002      	movs	r0, #2
 8000e12:	f7ff ff97 	bl	8000d44 <readRegister>
	}

	//Wait for WRITE flag to clear
	unsigned long startTime = getMillis();
 8000e16:	f000 ff91 	bl	8001d3c <getMillis>
 8000e1a:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if((getMillis() - startTime) > maxWaitTime)
 8000e1c:	f000 ff8e 	bl	8001d3c <getMillis>
 8000e20:	4602      	mov	r2, r0
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	4a25      	ldr	r2, [pc, #148]	; (8000ebc <virtualReadRegister+0xcc>)
 8000e28:	8812      	ldrh	r2, [r2, #0]
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d904      	bls.n	8000e38 <virtualReadRegister+0x48>
		{
			printf("Sensor failed to respond \n\r");
 8000e2e:	4824      	ldr	r0, [pc, #144]	; (8000ec0 <virtualReadRegister+0xd0>)
 8000e30:	f001 fe72 	bl	8002b18 <iprintf>
			return 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	e03c      	b.n	8000eb2 <virtualReadRegister+0xc2>
		}
		//Read slave I2C status to see if the read register is ready
		status = readRegister(AS7265X_STATUS_REG);
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff ff83 	bl	8000d44 <readRegister>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	72fb      	strb	r3, [r7, #11]
		if((status & AS7265X_TX_VALID) == 0) //New data may be written to WRITE register
 8000e42:	7afb      	ldrb	r3, [r7, #11]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <virtualReadRegister+0x66>
		{
			break;
		}
		delayMillis(AS7265X_POLLING_DELAY); //Delay for 5 ms before checking for virtual register changes
 8000e4e:	2005      	movs	r0, #5
 8000e50:	f000 ff80 	bl	8001d54 <delayMillis>
		if((getMillis() - startTime) > maxWaitTime)
 8000e54:	e7e2      	b.n	8000e1c <virtualReadRegister+0x2c>
			break;
 8000e56:	bf00      	nop
	}

	//Send the virtual register address (disabling bit 7 to indicate a read).
	writeRegister(AS7265X_WRITE_REG, virtualAddr);
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f7ff ff84 	bl	8000d6a <writeRegister>

	//Wait for READ flag to be set
	startTime = getMillis();
 8000e62:	f000 ff6b 	bl	8001d3c <getMillis>
 8000e66:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if((getMillis() - startTime) > maxWaitTime)
 8000e68:	f000 ff68 	bl	8001d3c <getMillis>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <virtualReadRegister+0xcc>)
 8000e74:	8812      	ldrh	r2, [r2, #0]
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d904      	bls.n	8000e84 <virtualReadRegister+0x94>
		{
			printf("Sensor failed to respond2 \n\r");
 8000e7a:	4812      	ldr	r0, [pc, #72]	; (8000ec4 <virtualReadRegister+0xd4>)
 8000e7c:	f001 fe4c 	bl	8002b18 <iprintf>
			return 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	e016      	b.n	8000eb2 <virtualReadRegister+0xc2>
		}
		//Read slave I2C status to see if the read register is ready
		status = readRegister(AS7265X_STATUS_REG);
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff ff5d 	bl	8000d44 <readRegister>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	72fb      	strb	r3, [r7, #11]
		if((status & AS7265X_RX_VALID) != 0) //Data byte available in READ register
 8000e8e:	7afb      	ldrb	r3, [r7, #11]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d103      	bne.n	8000ea2 <virtualReadRegister+0xb2>
		{
			break;
		}
		delayMillis(AS7265X_POLLING_DELAY); //Delay for 5 ms before checking for virtual register changes
 8000e9a:	2005      	movs	r0, #5
 8000e9c:	f000 ff5a 	bl	8001d54 <delayMillis>
		if((getMillis() - startTime) > maxWaitTime)
 8000ea0:	e7e2      	b.n	8000e68 <virtualReadRegister+0x78>
			break;
 8000ea2:	bf00      	nop
	}

	data = readRegister(AS7265X_READ_REG);
 8000ea4:	2002      	movs	r0, #2
 8000ea6:	f7ff ff4d 	bl	8000d44 <readRegister>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	72bb      	strb	r3, [r7, #10]
	return data;
 8000eae:	7abb      	ldrb	r3, [r7, #10]
 8000eb0:	b2db      	uxtb	r3, r3
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	08004900 	.word	0x08004900
 8000ec4:	0800491c 	.word	0x0800491c

08000ec8 <virtualWriteRegister>:

//Write to a virtual register in the AS7265x
static void virtualWriteRegister(uint8_t virtualAddr, uint8_t dataToWrite)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	460a      	mov	r2, r1
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	71bb      	strb	r3, [r7, #6]
	volatile uint8_t status;

	//Wait for WRITE register to be empty
	unsigned long startTime = getMillis();
 8000ed8:	f000 ff30 	bl	8001d3c <getMillis>
 8000edc:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if((getMillis() - startTime) > maxWaitTime)
 8000ede:	f000 ff2d 	bl	8001d3c <getMillis>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	4a23      	ldr	r2, [pc, #140]	; (8000f78 <virtualWriteRegister+0xb0>)
 8000eea:	8812      	ldrh	r2, [r2, #0]
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d903      	bls.n	8000ef8 <virtualWriteRegister+0x30>
		{
			printf("Sensor failed to respond \n\r");
 8000ef0:	4822      	ldr	r0, [pc, #136]	; (8000f7c <virtualWriteRegister+0xb4>)
 8000ef2:	f001 fe11 	bl	8002b18 <iprintf>
			return;
 8000ef6:	e03c      	b.n	8000f72 <virtualWriteRegister+0xaa>
		}
		//Read slave I2C status to see if the write register is ready
		status = readRegister(AS7265X_STATUS_REG);
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f7ff ff23 	bl	8000d44 <readRegister>
 8000efe:	4603      	mov	r3, r0
 8000f00:	72fb      	strb	r3, [r7, #11]
		if((status & AS7265X_TX_VALID) == 0) //New data may be written to WRITE register
 8000f02:	7afb      	ldrb	r3, [r7, #11]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <virtualWriteRegister+0x4e>
		{
			break;
		}
		delayMillis(AS7265X_POLLING_DELAY); //Delay for 5 ms before checking for virtual register changes
 8000f0e:	2005      	movs	r0, #5
 8000f10:	f000 ff20 	bl	8001d54 <delayMillis>
		if((getMillis() - startTime) > maxWaitTime)
 8000f14:	e7e3      	b.n	8000ede <virtualWriteRegister+0x16>
			break;
 8000f16:	bf00      	nop
	}

	//Send the virtual register address (enabling bit 7 to indicate a write).
	writeRegister(AS7265X_WRITE_REG, (virtualAddr | 1 << 7));
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	4619      	mov	r1, r3
 8000f22:	2001      	movs	r0, #1
 8000f24:	f7ff ff21 	bl	8000d6a <writeRegister>

	//Wait for WRITE register to be empty
	startTime = getMillis();
 8000f28:	f000 ff08 	bl	8001d3c <getMillis>
 8000f2c:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if((getMillis() - startTime) > maxWaitTime)
 8000f2e:	f000 ff05 	bl	8001d3c <getMillis>
 8000f32:	4602      	mov	r2, r0
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	4a0f      	ldr	r2, [pc, #60]	; (8000f78 <virtualWriteRegister+0xb0>)
 8000f3a:	8812      	ldrh	r2, [r2, #0]
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d903      	bls.n	8000f48 <virtualWriteRegister+0x80>
		{
			printf("Sensor failed to respond \n\r");
 8000f40:	480e      	ldr	r0, [pc, #56]	; (8000f7c <virtualWriteRegister+0xb4>)
 8000f42:	f001 fde9 	bl	8002b18 <iprintf>
			return;
 8000f46:	e014      	b.n	8000f72 <virtualWriteRegister+0xaa>
		}
		//Read slave I2C status to see if the write register is ready
		status = readRegister(AS7265X_STATUS_REG);
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f7ff fefb 	bl	8000d44 <readRegister>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	72fb      	strb	r3, [r7, #11]
		if((status & AS7265X_TX_VALID) == 0) //New data may be written to WRITE register
 8000f52:	7afb      	ldrb	r3, [r7, #11]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	f003 0302 	and.w	r3, r3, #2
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <virtualWriteRegister+0x9e>
		{
			break;
		}
		delayMillis(AS7265X_POLLING_DELAY); //Delay for 5 ms before checking for virtual register changes
 8000f5e:	2005      	movs	r0, #5
 8000f60:	f000 fef8 	bl	8001d54 <delayMillis>
		if((getMillis() - startTime) > maxWaitTime)
 8000f64:	e7e3      	b.n	8000f2e <virtualWriteRegister+0x66>
			break;
 8000f66:	bf00      	nop
	}

	//Send the data to complete the operation
	writeRegister(AS7265X_WRITE_REG, dataToWrite);
 8000f68:	79bb      	ldrb	r3, [r7, #6]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f7ff fefc 	bl	8000d6a <writeRegister>
}
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	08004900 	.word	0x08004900

08000f80 <selectDevice>:

//As we read various registers we have to point at the master or first/second slave
static void selectDevice(uint8_t device)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
	virtualWriteRegister(AS7265X_DEV_SELECT_CONTROL, device);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	204f      	movs	r0, #79	; 0x4f
 8000f90:	f7ff ff9a 	bl	8000ec8 <virtualWriteRegister>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <convertBytesToFloat>:

//Given 4 bytes (size of float and uint32_t) and returns the floating point value
float convertBytesToFloat(uint32_t myLong)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
  float myFloat;
  memcpy(&myFloat, &myLong, 4); //Copy bytes into a float
 8000fa6:	60fb      	str	r3, [r7, #12]
  return myFloat;
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	ee07 3a90 	vmov	s15, r3
}
 8000fae:	eeb0 0a67 	vmov.f32	s0, s15
 8000fb2:	3714      	adds	r7, #20
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <getChannel>:

//Get the 16-bit raw values stored in the high and low registers of each channel
static uint16_t getChannel(uint8_t channelRegister, uint8_t device)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	460a      	mov	r2, r1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	71bb      	strb	r3, [r7, #6]
	selectDevice(device);
 8000fcc:	79bb      	ldrb	r3, [r7, #6]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f7ff ffd6 	bl	8000f80 <selectDevice>

	uint16_t colorData = virtualReadRegister(channelRegister) << 8; //XXXXXXXX-00000000 High uint8_t
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff0a 	bl	8000df0 <virtualReadRegister>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	021b      	lsls	r3, r3, #8
 8000fe2:	81fb      	strh	r3, [r7, #14]
	colorData |= virtualReadRegister(channelRegister + 1); //Low uint8_t
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ff00 	bl	8000df0 <virtualReadRegister>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	89fb      	ldrh	r3, [r7, #14]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	81fb      	strh	r3, [r7, #14]
	return colorData;
 8000ffa:	89fb      	ldrh	r3, [r7, #14]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3710      	adds	r7, #16
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <getCalibratedValue>:

//Given an address, read four consecutive bytes and return the floating point calibrated value
static float getCalibratedValue(uint8_t calAddress, uint8_t device)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	460a      	mov	r2, r1
 800100e:	71fb      	strb	r3, [r7, #7]
 8001010:	4613      	mov	r3, r2
 8001012:	71bb      	strb	r3, [r7, #6]
	selectDevice(device);
 8001014:	79bb      	ldrb	r3, [r7, #6]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff ffb2 	bl	8000f80 <selectDevice>

	uint8_t chan0, chan1, chan2, chan3;
	chan0 = virtualReadRegister(calAddress + 0);
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fee6 	bl	8000df0 <virtualReadRegister>
 8001024:	4603      	mov	r3, r0
 8001026:	73fb      	strb	r3, [r7, #15]
	chan1 = virtualReadRegister(calAddress + 1);
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	3301      	adds	r3, #1
 800102c:	b2db      	uxtb	r3, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fede 	bl	8000df0 <virtualReadRegister>
 8001034:	4603      	mov	r3, r0
 8001036:	73bb      	strb	r3, [r7, #14]
	chan2 = virtualReadRegister(calAddress + 2);
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	3302      	adds	r3, #2
 800103c:	b2db      	uxtb	r3, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fed6 	bl	8000df0 <virtualReadRegister>
 8001044:	4603      	mov	r3, r0
 8001046:	737b      	strb	r3, [r7, #13]
	chan3 = virtualReadRegister(calAddress + 3);
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	3303      	adds	r3, #3
 800104c:	b2db      	uxtb	r3, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fece 	bl	8000df0 <virtualReadRegister>
 8001054:	4603      	mov	r3, r0
 8001056:	733b      	strb	r3, [r7, #12]

	//Channel calibrated values are stored big-endian
	uint32_t calBytes = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
	calBytes |= ((uint32_t)chan0 << (8 * 3)); //bits 24-31
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	061b      	lsls	r3, r3, #24
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	4313      	orrs	r3, r2
 8001064:	60bb      	str	r3, [r7, #8]
	calBytes |= ((uint32_t)chan1 << (8 * 2)); //bits 16-23
 8001066:	7bbb      	ldrb	r3, [r7, #14]
 8001068:	041b      	lsls	r3, r3, #16
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	4313      	orrs	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
	calBytes |= ((uint32_t)chan2 << (8 * 1)); //bits 8-15
 8001070:	7b7b      	ldrb	r3, [r7, #13]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	68ba      	ldr	r2, [r7, #8]
 8001076:	4313      	orrs	r3, r2
 8001078:	60bb      	str	r3, [r7, #8]
	calBytes |= ((uint32_t)chan3 << (8 * 0)); //bits 0-7
 800107a:	7b3b      	ldrb	r3, [r7, #12]
 800107c:	68ba      	ldr	r2, [r7, #8]
 800107e:	4313      	orrs	r3, r2
 8001080:	60bb      	str	r3, [r7, #8]

	return convertBytesToFloat(calBytes);
 8001082:	68b8      	ldr	r0, [r7, #8]
 8001084:	f7ff ff8a 	bl	8000f9c <convertBytesToFloat>
 8001088:	eef0 7a40 	vmov.f32	s15, s0

4. 00000000 00000000 00000000 ZZZZZZZZ
a. 00000000 00000000 00000000 ZZZZZZZZ
b. calBytes = WWWWWWWW XXXXXXXX YYYYYYYY ZZZZZZZZ
*/
}
 800108c:	eeb0 0a67 	vmov.f32	s0, s15
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <enableIndicator>:
	return average;
}

//Enable the on-board indicator LED on the NIR master device, Blue status LED
void enableIndicator()
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
	selectDevice(AS72651_NIR);
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff ff6f 	bl	8000f80 <selectDevice>

	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read existing state
 80010a2:	2007      	movs	r0, #7
 80010a4:	f7ff fea4 	bl	8000df0 <virtualReadRegister>
 80010a8:	4603      	mov	r3, r0
 80010aa:	71fb      	strb	r3, [r7, #7]
	value |= (1U << 0); //Set ENABLE LED_INT bit (bit 0)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f043 0301 	orr.w	r3, r3, #1
 80010b2:	71fb      	strb	r3, [r7, #7]
	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to enable the LED indicator
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	4619      	mov	r1, r3
 80010b8:	2007      	movs	r0, #7
 80010ba:	f7ff ff05 	bl	8000ec8 <virtualWriteRegister>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <enableLED>:
	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to disable the LED indicator
}

//Enable the LED or bulb on a given device
void enableLED(uint8_t device)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b084      	sub	sp, #16
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	4603      	mov	r3, r0
 80010ce:	71fb      	strb	r3, [r7, #7]
	selectDevice(device);
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff54 	bl	8000f80 <selectDevice>

	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read existing state
 80010d8:	2007      	movs	r0, #7
 80010da:	f7ff fe89 	bl	8000df0 <virtualReadRegister>
 80010de:	4603      	mov	r3, r0
 80010e0:	73fb      	strb	r3, [r7, #15]
	value |= (1U << 3); //Set ENABLE LED_DRV bit (bit 3)
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	f043 0308 	orr.w	r3, r3, #8
 80010e8:	73fb      	strb	r3, [r7, #15]
	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to enable the LED driver
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	4619      	mov	r1, r3
 80010ee:	2007      	movs	r0, #7
 80010f0:	f7ff feea 	bl	8000ec8 <virtualWriteRegister>
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <disableLED>:

//Disable the LED or bulb on a given device
void disableLED(uint8_t device)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
	selectDevice(device);
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff39 	bl	8000f80 <selectDevice>

	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read existing state
 800110e:	2007      	movs	r0, #7
 8001110:	f7ff fe6e 	bl	8000df0 <virtualReadRegister>
 8001114:	4603      	mov	r3, r0
 8001116:	73fb      	strb	r3, [r7, #15]
	value &= ~(1U << 3); //Reset ENABLE LED_DRV bit (bit 3)
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	f023 0308 	bic.w	r3, r3, #8
 800111e:	73fb      	strb	r3, [r7, #15]
	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to disable the LED driver
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	4619      	mov	r1, r3
 8001124:	2007      	movs	r0, #7
 8001126:	f7ff fecf 	bl	8000ec8 <virtualWriteRegister>
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <setGain>:
//Gain 0: 1x
//Gain 1: 3.7x (Default)
//Gain 2: 16x
//Gain 3: 64x
void setGain(uint8_t gain)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b084      	sub	sp, #16
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	71fb      	strb	r3, [r7, #7]
	if (gain > AS7265X_GAIN_64X)
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	2b03      	cmp	r3, #3
 8001140:	d901      	bls.n	8001146 <setGain+0x14>
	{
		gain = AS7265X_GAIN_64X;
 8001142:	2303      	movs	r3, #3
 8001144:	71fb      	strb	r3, [r7, #7]
	}
	uint8_t value = virtualReadRegister(AS7265X_CONFIG); //Read existing state
 8001146:	2004      	movs	r0, #4
 8001148:	f7ff fe52 	bl	8000df0 <virtualReadRegister>
 800114c:	4603      	mov	r3, r0
 800114e:	73fb      	strb	r3, [r7, #15]
	value &= 0b11001111; //Clear GAIN bits
 8001150:	7bfb      	ldrb	r3, [r7, #15]
 8001152:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001156:	73fb      	strb	r3, [r7, #15]
	value |= (gain << 4); //Set GAIN bits with user's choice
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	011b      	lsls	r3, r3, #4
 800115c:	b25a      	sxtb	r2, r3
 800115e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001162:	4313      	orrs	r3, r2
 8001164:	b25b      	sxtb	r3, r3
 8001166:	73fb      	strb	r3, [r7, #15]

	virtualWriteRegister(AS7265X_CONFIG, value); //Write value to config register
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	4619      	mov	r1, r3
 800116c:	2004      	movs	r0, #4
 800116e:	f7ff feab 	bl	8000ec8 <virtualWriteRegister>
}
 8001172:	bf00      	nop
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <setMeasurementMode>:
//Mode 0: 4 channels
//Mode 1: 4 channels
//Mode 2: All 6 channels (Default)
//Mode 3: One shot operation of mode 2
void setMeasurementMode(uint8_t mode)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b084      	sub	sp, #16
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
	if (mode > AS7265X_MEASUREMENT_MODE_6CHAN_ONE_SHOT)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	2b03      	cmp	r3, #3
 8001188:	d901      	bls.n	800118e <setMeasurementMode+0x14>
	{
		mode = AS7265X_MEASUREMENT_MODE_6CHAN_ONE_SHOT; //Limit mode to 2 bits
 800118a:	2303      	movs	r3, #3
 800118c:	71fb      	strb	r3, [r7, #7]
	}
	uint8_t value = virtualReadRegister(AS7265X_CONFIG); //Read existing state
 800118e:	2004      	movs	r0, #4
 8001190:	f7ff fe2e 	bl	8000df0 <virtualReadRegister>
 8001194:	4603      	mov	r3, r0
 8001196:	73fb      	strb	r3, [r7, #15]
	value &= 0b11110011; //Clear BANK bits
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f023 030c 	bic.w	r3, r3, #12
 800119e:	73fb      	strb	r3, [r7, #15]
	value |= (mode << 2); //Set BANK bits with user's choice
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	b25a      	sxtb	r2, r3
 80011a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	73fb      	strb	r3, [r7, #15]

	virtualWriteRegister(AS7265X_CONFIG, value); //Write value to config register
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
 80011b2:	4619      	mov	r1, r3
 80011b4:	2004      	movs	r0, #4
 80011b6:	f7ff fe87 	bl	8000ec8 <virtualWriteRegister>
}
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	0000      	movs	r0, r0
 80011c4:	0000      	movs	r0, r0
	...

080011c8 <setIntegrationCycles>:
//Set the Integration cycles with a byte from 0 - 255 to set the sensitivity
//Every 2.78ms of integration increases the resolution of the ADC by 2^10 = 1024 counts
//Longer integration time means a more accurate measurement
//16-bit ADC so full sensitivity scale is clamped at 2^16 = 65536
void setIntegrationCycles(uint8_t cycleValue)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	if (cycleValue > 255)
	{
		cycleValue = 255; //Limit cycleValue to a byte 2^8 (0-255)
	}
	maxWaitTime = (int)((cycleValue + 1) * 2.78 * 1.5); //Wait for integration time + 50%
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	3301      	adds	r3, #1
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff f9ac 	bl	8000534 <__aeabi_i2d>
 80011dc:	a312      	add	r3, pc, #72	; (adr r3, 8001228 <setIntegrationCycles+0x60>)
 80011de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e2:	f7ff fa11 	bl	8000608 <__aeabi_dmul>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <setIntegrationCycles+0x58>)
 80011f4:	f7ff fa08 	bl	8000608 <__aeabi_dmul>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	f7ff fcb2 	bl	8000b68 <__aeabi_d2iz>
 8001204:	4603      	mov	r3, r0
 8001206:	b29a      	uxth	r2, r3
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <setIntegrationCycles+0x5c>)
 800120a:	801a      	strh	r2, [r3, #0]

	virtualWriteRegister(AS7265X_INTEGRATION_TIME, cycleValue);
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	4619      	mov	r1, r3
 8001210:	2005      	movs	r0, #5
 8001212:	f7ff fe59 	bl	8000ec8 <virtualWriteRegister>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	3ff80000 	.word	0x3ff80000
 8001224:	20000000 	.word	0x20000000
 8001228:	a3d70a3d 	.word	0xa3d70a3d
 800122c:	40063d70 	.word	0x40063d70

08001230 <setLEDCurrent>:
//Current 0: 12.5mA (Default)
//Current 1: 25mA
//Current 2: 50mA
//Current 3: 100mA
void setLEDCurrent(uint8_t current, uint8_t device)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	460a      	mov	r2, r1
 800123a:	71fb      	strb	r3, [r7, #7]
 800123c:	4613      	mov	r3, r2
 800123e:	71bb      	strb	r3, [r7, #6]
	selectDevice(device);
 8001240:	79bb      	ldrb	r3, [r7, #6]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fe9c 	bl	8000f80 <selectDevice>

	if (current > AS7265X_LED_CURRENT_LIMIT_100MA)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	2b03      	cmp	r3, #3
 800124c:	d901      	bls.n	8001252 <setLEDCurrent+0x22>
	{
		current = AS7265X_LED_CURRENT_LIMIT_100MA;
 800124e:	2303      	movs	r3, #3
 8001250:	71fb      	strb	r3, [r7, #7]
	}
	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read existing state
 8001252:	2007      	movs	r0, #7
 8001254:	f7ff fdcc 	bl	8000df0 <virtualReadRegister>
 8001258:	4603      	mov	r3, r0
 800125a:	73fb      	strb	r3, [r7, #15]
	value &= 0b11001111; //Bitwise ANDing to reset LED current limit bits (bit5:4)
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001262:	73fb      	strb	r3, [r7, #15]
	value |= (current << 4); //Set LED current limit
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	011b      	lsls	r3, r3, #4
 8001268:	b25a      	sxtb	r2, r3
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4313      	orrs	r3, r2
 8001270:	b25b      	sxtb	r3, r3
 8001272:	73fb      	strb	r3, [r7, #15]

	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to set the LED current limit
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	4619      	mov	r1, r3
 8001278:	2007      	movs	r0, #7
 800127a:	f7ff fe25 	bl	8000ec8 <virtualWriteRegister>
}
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <setIndicatorCurrent>:
//Current 0: 1mA
//Current 1: 2mA (Default)
//Current 2: 4mA
//Current 3: 8mA
void setIndicatorCurrent(uint8_t current)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b084      	sub	sp, #16
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	71fb      	strb	r3, [r7, #7]
	selectDevice(AS72651_NIR);
 8001290:	2000      	movs	r0, #0
 8001292:	f7ff fe75 	bl	8000f80 <selectDevice>

	if (current > AS7265X_INDICATOR_CURRENT_LIMIT_8MA)
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b03      	cmp	r3, #3
 800129a:	d901      	bls.n	80012a0 <setIndicatorCurrent+0x1a>
	{
		current = AS7265X_INDICATOR_CURRENT_LIMIT_8MA;
 800129c:	2303      	movs	r3, #3
 800129e:	71fb      	strb	r3, [r7, #7]
	}
	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read existing state
 80012a0:	2007      	movs	r0, #7
 80012a2:	f7ff fda5 	bl	8000df0 <virtualReadRegister>
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]
	value &= 0b11111001; //Bitwise ANDing to reset indicator current limit bits (bit2:1)
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	f023 0306 	bic.w	r3, r3, #6
 80012b0:	73fb      	strb	r3, [r7, #15]
	value |= (current << 1); //Set indicator current limit
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	b25a      	sxtb	r2, r3
 80012b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012bc:	4313      	orrs	r3, r2
 80012be:	b25b      	sxtb	r3, r3
 80012c0:	73fb      	strb	r3, [r7, #15]

	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to set the LED indicator current limit
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	4619      	mov	r1, r3
 80012c6:	2007      	movs	r0, #7
 80012c8:	f7ff fdfe 	bl	8000ec8 <virtualWriteRegister>
}
 80012cc:	bf00      	nop
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <enableInterrupt>:

//Enable interrupt pin
void enableInterrupt()
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0

	uint8_t value = virtualReadRegister(AS7265X_CONFIG); //Read existing state
 80012da:	2004      	movs	r0, #4
 80012dc:	f7ff fd88 	bl	8000df0 <virtualReadRegister>
 80012e0:	4603      	mov	r3, r0
 80012e2:	71fb      	strb	r3, [r7, #7]
	value |= (1U << 6); //Set INT bit (bit 6)
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012ea:	71fb      	strb	r3, [r7, #7]
	virtualWriteRegister(AS7265X_CONFIG, value); //Write value to config register to enable the interrupt pin
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	4619      	mov	r1, r3
 80012f0:	2004      	movs	r0, #4
 80012f2:	f7ff fde9 	bl	8000ec8 <virtualWriteRegister>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <getRawA>:


/* Obtaining various raw light readings */
//UV Readings
uint16_t getRawA()
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_R_G_A, AS72653_UV));
 8001302:	2102      	movs	r1, #2
 8001304:	2008      	movs	r0, #8
 8001306:	f7ff fe59 	bl	8000fbc <getChannel>
 800130a:	4603      	mov	r3, r0
}
 800130c:	4618      	mov	r0, r3
 800130e:	bd80      	pop	{r7, pc}

08001310 <getRawB>:
uint16_t getRawB()
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_S_H_B, AS72653_UV));
 8001314:	2102      	movs	r1, #2
 8001316:	200a      	movs	r0, #10
 8001318:	f7ff fe50 	bl	8000fbc <getChannel>
 800131c:	4603      	mov	r3, r0
}
 800131e:	4618      	mov	r0, r3
 8001320:	bd80      	pop	{r7, pc}

08001322 <getRawC>:
uint16_t getRawC()
{
 8001322:	b580      	push	{r7, lr}
 8001324:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_T_I_C, AS72653_UV));
 8001326:	2102      	movs	r1, #2
 8001328:	200c      	movs	r0, #12
 800132a:	f7ff fe47 	bl	8000fbc <getChannel>
 800132e:	4603      	mov	r3, r0
}
 8001330:	4618      	mov	r0, r3
 8001332:	bd80      	pop	{r7, pc}

08001334 <getRawD>:
uint16_t getRawD()
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_U_J_D, AS72653_UV));
 8001338:	2102      	movs	r1, #2
 800133a:	200e      	movs	r0, #14
 800133c:	f7ff fe3e 	bl	8000fbc <getChannel>
 8001340:	4603      	mov	r3, r0
}
 8001342:	4618      	mov	r0, r3
 8001344:	bd80      	pop	{r7, pc}

08001346 <getRawE>:
uint16_t getRawE()
{
 8001346:	b580      	push	{r7, lr}
 8001348:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_V_K_E, AS72653_UV));
 800134a:	2102      	movs	r1, #2
 800134c:	2010      	movs	r0, #16
 800134e:	f7ff fe35 	bl	8000fbc <getChannel>
 8001352:	4603      	mov	r3, r0
}
 8001354:	4618      	mov	r0, r3
 8001356:	bd80      	pop	{r7, pc}

08001358 <getRawF>:
uint16_t getRawF()
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_W_L_F, AS72653_UV));
 800135c:	2102      	movs	r1, #2
 800135e:	2012      	movs	r0, #18
 8001360:	f7ff fe2c 	bl	8000fbc <getChannel>
 8001364:	4603      	mov	r3, r0
}
 8001366:	4618      	mov	r0, r3
 8001368:	bd80      	pop	{r7, pc}

0800136a <getRawG>:

//VISIBLE Readings
uint16_t getRawG()
{
 800136a:	b580      	push	{r7, lr}
 800136c:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_R_G_A, AS72652_VISIBLE));
 800136e:	2101      	movs	r1, #1
 8001370:	2008      	movs	r0, #8
 8001372:	f7ff fe23 	bl	8000fbc <getChannel>
 8001376:	4603      	mov	r3, r0
}
 8001378:	4618      	mov	r0, r3
 800137a:	bd80      	pop	{r7, pc}

0800137c <getRawH>:
uint16_t getRawH()
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_S_H_B, AS72652_VISIBLE));
 8001380:	2101      	movs	r1, #1
 8001382:	200a      	movs	r0, #10
 8001384:	f7ff fe1a 	bl	8000fbc <getChannel>
 8001388:	4603      	mov	r3, r0
}
 800138a:	4618      	mov	r0, r3
 800138c:	bd80      	pop	{r7, pc}

0800138e <getRawI>:
uint16_t getRawI()
{
 800138e:	b580      	push	{r7, lr}
 8001390:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_T_I_C, AS72652_VISIBLE));
 8001392:	2101      	movs	r1, #1
 8001394:	200c      	movs	r0, #12
 8001396:	f7ff fe11 	bl	8000fbc <getChannel>
 800139a:	4603      	mov	r3, r0
}
 800139c:	4618      	mov	r0, r3
 800139e:	bd80      	pop	{r7, pc}

080013a0 <getRawJ>:
uint16_t getRawJ()
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_U_J_D, AS72652_VISIBLE));
 80013a4:	2101      	movs	r1, #1
 80013a6:	200e      	movs	r0, #14
 80013a8:	f7ff fe08 	bl	8000fbc <getChannel>
 80013ac:	4603      	mov	r3, r0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <getRawL>:
uint16_t getRawK()
{
	return (getChannel(AS7265X_RAW_V_K_E, AS72652_VISIBLE));
}
uint16_t getRawL()
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_W_L_F, AS72652_VISIBLE));
 80013b6:	2101      	movs	r1, #1
 80013b8:	2012      	movs	r0, #18
 80013ba:	f7ff fdff 	bl	8000fbc <getChannel>
 80013be:	4603      	mov	r3, r0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <getRawR>:

//NIR Readings
uint16_t getRawR()
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_R_G_A, AS72651_NIR));
 80013c8:	2100      	movs	r1, #0
 80013ca:	2008      	movs	r0, #8
 80013cc:	f7ff fdf6 	bl	8000fbc <getChannel>
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <getRawS>:
uint16_t getRawS()
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_S_H_B, AS72651_NIR));
 80013da:	2100      	movs	r1, #0
 80013dc:	200a      	movs	r0, #10
 80013de:	f7ff fded 	bl	8000fbc <getChannel>
 80013e2:	4603      	mov	r3, r0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <getRawT>:
uint16_t getRawT()
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_T_I_C, AS72651_NIR));
 80013ec:	2100      	movs	r1, #0
 80013ee:	200c      	movs	r0, #12
 80013f0:	f7ff fde4 	bl	8000fbc <getChannel>
 80013f4:	4603      	mov	r3, r0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	bd80      	pop	{r7, pc}

080013fa <getRawU>:
uint16_t getRawU()
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_U_J_D, AS72651_NIR));
 80013fe:	2100      	movs	r1, #0
 8001400:	200e      	movs	r0, #14
 8001402:	f7ff fddb 	bl	8000fbc <getChannel>
 8001406:	4603      	mov	r3, r0
}
 8001408:	4618      	mov	r0, r3
 800140a:	bd80      	pop	{r7, pc}

0800140c <getRawV>:
uint16_t getRawV()
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_V_K_E, AS72651_NIR));
 8001410:	2100      	movs	r1, #0
 8001412:	2010      	movs	r0, #16
 8001414:	f7ff fdd2 	bl	8000fbc <getChannel>
 8001418:	4603      	mov	r3, r0
}
 800141a:	4618      	mov	r0, r3
 800141c:	bd80      	pop	{r7, pc}

0800141e <getRawW>:
uint16_t getRawW()
{
 800141e:	b580      	push	{r7, lr}
 8001420:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_W_L_F, AS72651_NIR));
 8001422:	2100      	movs	r1, #0
 8001424:	2012      	movs	r0, #18
 8001426:	f7ff fdc9 	bl	8000fbc <getChannel>
 800142a:	4603      	mov	r3, r0
}
 800142c:	4618      	mov	r0, r3
 800142e:	bd80      	pop	{r7, pc}

08001430 <getCalibratedA>:

/* Obtaining the various calibrated light readings */
//UV Readings
float getCalibratedA()
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_R_G_A, AS72653_UV));
 8001434:	2102      	movs	r1, #2
 8001436:	2014      	movs	r0, #20
 8001438:	f7ff fde4 	bl	8001004 <getCalibratedValue>
 800143c:	eef0 7a40 	vmov.f32	s15, s0
}
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	bd80      	pop	{r7, pc}

08001446 <getCalibratedB>:
float getCalibratedB()
{
 8001446:	b580      	push	{r7, lr}
 8001448:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_S_H_B, AS72653_UV));
 800144a:	2102      	movs	r1, #2
 800144c:	2018      	movs	r0, #24
 800144e:	f7ff fdd9 	bl	8001004 <getCalibratedValue>
 8001452:	eef0 7a40 	vmov.f32	s15, s0
}
 8001456:	eeb0 0a67 	vmov.f32	s0, s15
 800145a:	bd80      	pop	{r7, pc}

0800145c <getCalibratedC>:
float getCalibratedC()
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_T_I_C, AS72653_UV));
 8001460:	2102      	movs	r1, #2
 8001462:	201c      	movs	r0, #28
 8001464:	f7ff fdce 	bl	8001004 <getCalibratedValue>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
}
 800146c:	eeb0 0a67 	vmov.f32	s0, s15
 8001470:	bd80      	pop	{r7, pc}

08001472 <getCalibratedD>:
float getCalibratedD()
{
 8001472:	b580      	push	{r7, lr}
 8001474:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_U_J_D, AS72653_UV));
 8001476:	2102      	movs	r1, #2
 8001478:	2020      	movs	r0, #32
 800147a:	f7ff fdc3 	bl	8001004 <getCalibratedValue>
 800147e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001482:	eeb0 0a67 	vmov.f32	s0, s15
 8001486:	bd80      	pop	{r7, pc}

08001488 <getCalibratedE>:
float getCalibratedE()
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_V_K_E, AS72653_UV));
 800148c:	2102      	movs	r1, #2
 800148e:	2024      	movs	r0, #36	; 0x24
 8001490:	f7ff fdb8 	bl	8001004 <getCalibratedValue>
 8001494:	eef0 7a40 	vmov.f32	s15, s0
}
 8001498:	eeb0 0a67 	vmov.f32	s0, s15
 800149c:	bd80      	pop	{r7, pc}

0800149e <getCalibratedF>:
float getCalibratedF()
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_W_L_F, AS72653_UV));
 80014a2:	2102      	movs	r1, #2
 80014a4:	2028      	movs	r0, #40	; 0x28
 80014a6:	f7ff fdad 	bl	8001004 <getCalibratedValue>
 80014aa:	eef0 7a40 	vmov.f32	s15, s0
}
 80014ae:	eeb0 0a67 	vmov.f32	s0, s15
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <getCalibratedG>:

//VISIBLE Readings
float getCalibratedG()
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_R_G_A, AS72652_VISIBLE));
 80014b8:	2101      	movs	r1, #1
 80014ba:	2014      	movs	r0, #20
 80014bc:	f7ff fda2 	bl	8001004 <getCalibratedValue>
 80014c0:	eef0 7a40 	vmov.f32	s15, s0
}
 80014c4:	eeb0 0a67 	vmov.f32	s0, s15
 80014c8:	bd80      	pop	{r7, pc}

080014ca <getCalibratedH>:
float getCalibratedH()
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_S_H_B, AS72652_VISIBLE));
 80014ce:	2101      	movs	r1, #1
 80014d0:	2018      	movs	r0, #24
 80014d2:	f7ff fd97 	bl	8001004 <getCalibratedValue>
 80014d6:	eef0 7a40 	vmov.f32	s15, s0
}
 80014da:	eeb0 0a67 	vmov.f32	s0, s15
 80014de:	bd80      	pop	{r7, pc}

080014e0 <getCalibratedI>:
float getCalibratedI()
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_T_I_C, AS72652_VISIBLE));
 80014e4:	2101      	movs	r1, #1
 80014e6:	201c      	movs	r0, #28
 80014e8:	f7ff fd8c 	bl	8001004 <getCalibratedValue>
 80014ec:	eef0 7a40 	vmov.f32	s15, s0
}
 80014f0:	eeb0 0a67 	vmov.f32	s0, s15
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <getCalibratedJ>:
float getCalibratedJ()
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_U_J_D, AS72652_VISIBLE));
 80014fa:	2101      	movs	r1, #1
 80014fc:	2020      	movs	r0, #32
 80014fe:	f7ff fd81 	bl	8001004 <getCalibratedValue>
 8001502:	eef0 7a40 	vmov.f32	s15, s0
}
 8001506:	eeb0 0a67 	vmov.f32	s0, s15
 800150a:	bd80      	pop	{r7, pc}

0800150c <getCalibratedL>:
float getCalibratedK()
{
	return (getCalibratedValue(AS7265X_CAL_V_K_E, AS72652_VISIBLE));
}
float getCalibratedL()
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_W_L_F, AS72652_VISIBLE));
 8001510:	2101      	movs	r1, #1
 8001512:	2028      	movs	r0, #40	; 0x28
 8001514:	f7ff fd76 	bl	8001004 <getCalibratedValue>
 8001518:	eef0 7a40 	vmov.f32	s15, s0
}
 800151c:	eeb0 0a67 	vmov.f32	s0, s15
 8001520:	bd80      	pop	{r7, pc}

08001522 <getCalibratedR>:

//NIR Readings
float getCalibratedR()
{
 8001522:	b580      	push	{r7, lr}
 8001524:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_R_G_A, AS72651_NIR));
 8001526:	2100      	movs	r1, #0
 8001528:	2014      	movs	r0, #20
 800152a:	f7ff fd6b 	bl	8001004 <getCalibratedValue>
 800152e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001532:	eeb0 0a67 	vmov.f32	s0, s15
 8001536:	bd80      	pop	{r7, pc}

08001538 <getCalibratedS>:
float getCalibratedS()
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_S_H_B, AS72651_NIR));
 800153c:	2100      	movs	r1, #0
 800153e:	2018      	movs	r0, #24
 8001540:	f7ff fd60 	bl	8001004 <getCalibratedValue>
 8001544:	eef0 7a40 	vmov.f32	s15, s0
}
 8001548:	eeb0 0a67 	vmov.f32	s0, s15
 800154c:	bd80      	pop	{r7, pc}

0800154e <getCalibratedT>:
float getCalibratedT()
{
 800154e:	b580      	push	{r7, lr}
 8001550:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_T_I_C, AS72651_NIR));
 8001552:	2100      	movs	r1, #0
 8001554:	201c      	movs	r0, #28
 8001556:	f7ff fd55 	bl	8001004 <getCalibratedValue>
 800155a:	eef0 7a40 	vmov.f32	s15, s0
}
 800155e:	eeb0 0a67 	vmov.f32	s0, s15
 8001562:	bd80      	pop	{r7, pc}

08001564 <getCalibratedU>:
float getCalibratedU()
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_U_J_D, AS72651_NIR));
 8001568:	2100      	movs	r1, #0
 800156a:	2020      	movs	r0, #32
 800156c:	f7ff fd4a 	bl	8001004 <getCalibratedValue>
 8001570:	eef0 7a40 	vmov.f32	s15, s0
}
 8001574:	eeb0 0a67 	vmov.f32	s0, s15
 8001578:	bd80      	pop	{r7, pc}

0800157a <getCalibratedV>:
float getCalibratedV()
{
 800157a:	b580      	push	{r7, lr}
 800157c:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_V_K_E, AS72651_NIR));
 800157e:	2100      	movs	r1, #0
 8001580:	2024      	movs	r0, #36	; 0x24
 8001582:	f7ff fd3f 	bl	8001004 <getCalibratedValue>
 8001586:	eef0 7a40 	vmov.f32	s15, s0
}
 800158a:	eeb0 0a67 	vmov.f32	s0, s15
 800158e:	bd80      	pop	{r7, pc}

08001590 <getCalibratedW>:
float getCalibratedW()
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_W_L_F, AS72651_NIR));
 8001594:	2100      	movs	r1, #0
 8001596:	2028      	movs	r0, #40	; 0x28
 8001598:	f7ff fd34 	bl	8001004 <getCalibratedValue>
 800159c:	eef0 7a40 	vmov.f32	s15, s0
}
 80015a0:	eeb0 0a67 	vmov.f32	s0, s15
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <I2C1_Init>:
//#define	SR1_BTF					(1U<<2)
//#define SR1_AF					(1U<<10)


void I2C1_Init(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOB*/
	RCC->AHB1ENR |= GPIOBEN;
 80015ac:	4b4d      	ldr	r3, [pc, #308]	; (80016e4 <I2C1_Init+0x13c>)
 80015ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b0:	4a4c      	ldr	r2, [pc, #304]	; (80016e4 <I2C1_Init+0x13c>)
 80015b2:	f043 0302 	orr.w	r3, r3, #2
 80015b6:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PB6 and PB7 mode to alternate function*/
	GPIOB->MODER &= ~(1U<<12);
 80015b8:	4b4b      	ldr	r3, [pc, #300]	; (80016e8 <I2C1_Init+0x140>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a4a      	ldr	r2, [pc, #296]	; (80016e8 <I2C1_Init+0x140>)
 80015be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015c2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<13);
 80015c4:	4b48      	ldr	r3, [pc, #288]	; (80016e8 <I2C1_Init+0x140>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a47      	ldr	r2, [pc, #284]	; (80016e8 <I2C1_Init+0x140>)
 80015ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015ce:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~(1U<<14);
 80015d0:	4b45      	ldr	r3, [pc, #276]	; (80016e8 <I2C1_Init+0x140>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a44      	ldr	r2, [pc, #272]	; (80016e8 <I2C1_Init+0x140>)
 80015d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015da:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<15);
 80015dc:	4b42      	ldr	r3, [pc, #264]	; (80016e8 <I2C1_Init+0x140>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a41      	ldr	r2, [pc, #260]	; (80016e8 <I2C1_Init+0x140>)
 80015e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015e6:	6013      	str	r3, [r2, #0]

	/*Set PB6 and PB7 output type to  open drain*/
	GPIOB->OTYPER |= (1U<<6);
 80015e8:	4b3f      	ldr	r3, [pc, #252]	; (80016e8 <I2C1_Init+0x140>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	4a3e      	ldr	r2, [pc, #248]	; (80016e8 <I2C1_Init+0x140>)
 80015ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015f2:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (1U<<7);
 80015f4:	4b3c      	ldr	r3, [pc, #240]	; (80016e8 <I2C1_Init+0x140>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	4a3b      	ldr	r2, [pc, #236]	; (80016e8 <I2C1_Init+0x140>)
 80015fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015fe:	6053      	str	r3, [r2, #4]

	/*Enable Pull-up for PB6 and PB7*/
	GPIOB->PUPDR |= (1U<<12);
 8001600:	4b39      	ldr	r3, [pc, #228]	; (80016e8 <I2C1_Init+0x140>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	4a38      	ldr	r2, [pc, #224]	; (80016e8 <I2C1_Init+0x140>)
 8001606:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800160a:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<13);
 800160c:	4b36      	ldr	r3, [pc, #216]	; (80016e8 <I2C1_Init+0x140>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	4a35      	ldr	r2, [pc, #212]	; (80016e8 <I2C1_Init+0x140>)
 8001612:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001616:	60d3      	str	r3, [r2, #12]

	GPIOB->PUPDR |= (1U<<14);
 8001618:	4b33      	ldr	r3, [pc, #204]	; (80016e8 <I2C1_Init+0x140>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	4a32      	ldr	r2, [pc, #200]	; (80016e8 <I2C1_Init+0x140>)
 800161e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001622:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<15);
 8001624:	4b30      	ldr	r3, [pc, #192]	; (80016e8 <I2C1_Init+0x140>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	4a2f      	ldr	r2, [pc, #188]	; (80016e8 <I2C1_Init+0x140>)
 800162a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800162e:	60d3      	str	r3, [r2, #12]

	/*Set PB6 and PB7 alternate function type to I2C (AF4)
	 * PB6 --> SCL
	 * PB7 --> SDA*/
	GPIOB->AFR[0] &= ~(1U<<24);
 8001630:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <I2C1_Init+0x140>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	4a2c      	ldr	r2, [pc, #176]	; (80016e8 <I2C1_Init+0x140>)
 8001636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800163a:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<25);
 800163c:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <I2C1_Init+0x140>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4a29      	ldr	r2, [pc, #164]	; (80016e8 <I2C1_Init+0x140>)
 8001642:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001646:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1U<<26);
 8001648:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <I2C1_Init+0x140>)
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	4a26      	ldr	r2, [pc, #152]	; (80016e8 <I2C1_Init+0x140>)
 800164e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001652:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<27);
 8001654:	4b24      	ldr	r3, [pc, #144]	; (80016e8 <I2C1_Init+0x140>)
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	4a23      	ldr	r2, [pc, #140]	; (80016e8 <I2C1_Init+0x140>)
 800165a:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800165e:	6213      	str	r3, [r2, #32]

	GPIOB->AFR[0] &= ~(1U<<28);
 8001660:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <I2C1_Init+0x140>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	4a20      	ldr	r2, [pc, #128]	; (80016e8 <I2C1_Init+0x140>)
 8001666:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800166a:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<29);
 800166c:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <I2C1_Init+0x140>)
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	4a1d      	ldr	r2, [pc, #116]	; (80016e8 <I2C1_Init+0x140>)
 8001672:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001676:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1U<<30);
 8001678:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <I2C1_Init+0x140>)
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	4a1a      	ldr	r2, [pc, #104]	; (80016e8 <I2C1_Init+0x140>)
 800167e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001682:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<31);
 8001684:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <I2C1_Init+0x140>)
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	4a17      	ldr	r2, [pc, #92]	; (80016e8 <I2C1_Init+0x140>)
 800168a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800168e:	6213      	str	r3, [r2, #32]

	/***Configuring I2C1***/

	/*Enable clock access to I2C1*/
	RCC->APB1ENR |= I2C1EN;
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <I2C1_Init+0x13c>)
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	4a13      	ldr	r2, [pc, #76]	; (80016e4 <I2C1_Init+0x13c>)
 8001696:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800169a:	6413      	str	r3, [r2, #64]	; 0x40

	/*Enter reset mode  */
	I2C1->CR1 |= (1U<<15);
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <I2C1_Init+0x144>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a12      	ldr	r2, [pc, #72]	; (80016ec <I2C1_Init+0x144>)
 80016a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016a6:	6013      	str	r3, [r2, #0]

	/*Come out of reset mode  */
	I2C1->CR1 &= ~(1U<<15);
 80016a8:	4b10      	ldr	r3, [pc, #64]	; (80016ec <I2C1_Init+0x144>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0f      	ldr	r2, [pc, #60]	; (80016ec <I2C1_Init+0x144>)
 80016ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80016b2:	6013      	str	r3, [r2, #0]

	/*Set Peripheral clock frequency*/
	I2C1->CR2 = (1U<<4);   //16 Mhz
 80016b4:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <I2C1_Init+0x144>)
 80016b6:	2210      	movs	r2, #16
 80016b8:	605a      	str	r2, [r3, #4]
//
//	/*Set rise time */
//	I2C1->TRISE = SD_MODE_MAX_RISE_TIME; //(1000ns/(1/16MHz)+1 = 17

	/*Set I2C to fast mode, 400kHz clock */
	I2C1->CCR = 1; //Refer to ST reference manual for derivation
 80016ba:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <I2C1_Init+0x144>)
 80016bc:	2201      	movs	r2, #1
 80016be:	61da      	str	r2, [r3, #28]
	I2C1->CCR = I2C_FAST_DUTY; //Set to Fast mode and duty cycle of 16/9
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <I2C1_Init+0x144>)
 80016c2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80016c6:	61da      	str	r2, [r3, #28]

	/*Set rise time */
	I2C1->TRISE = 6;//FS_MODE_MAX_RISE_TIME; //(300ns/(1/16MHz)+1 = 5.8
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <I2C1_Init+0x144>)
 80016ca:	2206      	movs	r2, #6
 80016cc:	621a      	str	r2, [r3, #32]

	/*Enable I2C1 module */
	I2C1->CR1 |= CR1_PE;
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <I2C1_Init+0x144>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a06      	ldr	r2, [pc, #24]	; (80016ec <I2C1_Init+0x144>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6013      	str	r3, [r2, #0]
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020400 	.word	0x40020400
 80016ec:	40005400 	.word	0x40005400

080016f0 <I2C1_byteRead>:

void I2C1_byteRead(char saddr, char maddr, char* data) {
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	603a      	str	r2, [r7, #0]
 80016fa:	71fb      	strb	r3, [r7, #7]
 80016fc:	460b      	mov	r3, r1
 80016fe:	71bb      	strb	r3, [r7, #6]

	  volatile int tmp;

	  /* Wait until bus not busy */
	  while (I2C1->SR2 & (SR2_BUSY)){}
 8001700:	bf00      	nop
 8001702:	4b37      	ldr	r3, [pc, #220]	; (80017e0 <I2C1_byteRead+0xf0>)
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1f9      	bne.n	8001702 <I2C1_byteRead+0x12>

	  /* Generate start condition */
	  I2C1->CR1 |= CR1_START;
 800170e:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <I2C1_byteRead+0xf0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a33      	ldr	r2, [pc, #204]	; (80017e0 <I2C1_byteRead+0xf0>)
 8001714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001718:	6013      	str	r3, [r2, #0]

	  /* Wait until start condition flag is set, note the negation */
	  /* Stay in loop if start flag is not set */
	  while (!(I2C1->SR1 & (SR1_SB))){}
 800171a:	bf00      	nop
 800171c:	4b30      	ldr	r3, [pc, #192]	; (80017e0 <I2C1_byteRead+0xf0>)
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f9      	beq.n	800171c <I2C1_byteRead+0x2c>

	  /* Transmit slave address + Write (0) */
	  /* This slave address is sent to each slave device along with an indication to establish either read or write communication */
	  /* Yo device A, I want to write to one of your memory registers */
	  I2C1->DR = saddr << 1; // shifting the address left makes room for the R/W bit, which is 0 for write
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	005a      	lsls	r2, r3, #1
 800172c:	4b2c      	ldr	r3, [pc, #176]	; (80017e0 <I2C1_byteRead+0xf0>)
 800172e:	611a      	str	r2, [r3, #16]

	  /* Wait until address flag is set */
	  /* Each slave device compares the address from master to its own address and sends an ACK if matched */
	  /* I'm device A and of course you can write to one of my registers */
	  while (!(I2C1->SR1 & (SR1_ADDR))){}
 8001730:	bf00      	nop
 8001732:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <I2C1_byteRead+0xf0>)
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f9      	beq.n	8001732 <I2C1_byteRead+0x42>

	  /* Clear address flag by reading SR2 register */
	  tmp = I2C1->SR2;
 800173e:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <I2C1_byteRead+0xf0>)
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	60fb      	str	r3, [r7, #12]

	  /*Wait until transmitter empty */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 8001744:	bf00      	nop
 8001746:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <I2C1_byteRead+0xf0>)
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f9      	beq.n	8001746 <I2C1_byteRead+0x56>

	  /* Send register address */
	  /* Aight, here is the location I writing to read from */
	  I2C1->DR = maddr;
 8001752:	4a23      	ldr	r2, [pc, #140]	; (80017e0 <I2C1_byteRead+0xf0>)
 8001754:	79bb      	ldrb	r3, [r7, #6]
 8001756:	6113      	str	r3, [r2, #16]

	  /*Wait until transmitter empty */
	  /* No probs */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 8001758:	bf00      	nop
 800175a:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <I2C1_byteRead+0xf0>)
 800175c:	695b      	ldr	r3, [r3, #20]
 800175e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001762:	2b00      	cmp	r3, #0
 8001764:	d0f9      	beq.n	800175a <I2C1_byteRead+0x6a>

	 /* Begin actual reading process once slave device and register of interest are understood between master and slave*/
	 /*Generate restart */
	 I2C1->CR1 |= CR1_START;
 8001766:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <I2C1_byteRead+0xf0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a1d      	ldr	r2, [pc, #116]	; (80017e0 <I2C1_byteRead+0xf0>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001770:	6013      	str	r3, [r2, #0]

	 /* Wait until start flag is set */
	 while (!(I2C1->SR1 & SR1_SB)){}
 8001772:	bf00      	nop
 8001774:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <I2C1_byteRead+0xf0>)
 8001776:	695b      	ldr	r3, [r3, #20]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0f9      	beq.n	8001774 <I2C1_byteRead+0x84>

	 /* Transmit slave address + Read */
	 I2C1->DR = saddr << 1 | 1;
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	f043 0201 	orr.w	r2, r3, #1
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <I2C1_byteRead+0xf0>)
 800178a:	611a      	str	r2, [r3, #16]

	 /* Wait until addr flag is set */
	 while (!(I2C1->SR1 & (SR1_ADDR))){}
 800178c:	bf00      	nop
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <I2C1_byteRead+0xf0>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f9      	beq.n	800178e <I2C1_byteRead+0x9e>

	 /* Clear addr flag */
	 tmp = I2C1->SR2;
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <I2C1_byteRead+0xf0>)
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	60fb      	str	r3, [r7, #12]

	 /* Disable Acknowledge */
	 I2C1->CR1 &= ~CR1_ACK;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <I2C1_byteRead+0xf0>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <I2C1_byteRead+0xf0>)
 80017a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017aa:	6013      	str	r3, [r2, #0]

	 /* Generate stop after data received */
	 I2C1->CR1 |= CR1_STOP;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <I2C1_byteRead+0xf0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0b      	ldr	r2, [pc, #44]	; (80017e0 <I2C1_byteRead+0xf0>)
 80017b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017b6:	6013      	str	r3, [r2, #0]

	 /* Wait until RXNE flag is set */
	 while (!(I2C1->SR1 & SR1_RXNE)){}
 80017b8:	bf00      	nop
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <I2C1_byteRead+0xf0>)
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f9      	beq.n	80017ba <I2C1_byteRead+0xca>

	 /* Read data from DR */
	 *data++ = I2C1->DR;
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <I2C1_byteRead+0xf0>)
 80017c8:	6919      	ldr	r1, [r3, #16]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	603a      	str	r2, [r7, #0]
 80017d0:	b2ca      	uxtb	r2, r1
 80017d2:	701a      	strb	r2, [r3, #0]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	40005400 	.word	0x40005400

080017e4 <I2C1_burstWrite>:
		 }
	 }

}

void I2C1_burstWrite(char saddr, char maddr, int n, char* data) {
 80017e4:	b480      	push	{r7}
 80017e6:	b087      	sub	sp, #28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60ba      	str	r2, [r7, #8]
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	4603      	mov	r3, r0
 80017f0:	73fb      	strb	r3, [r7, #15]
 80017f2:	460b      	mov	r3, r1
 80017f4:	73bb      	strb	r3, [r7, #14]

	/* Temporary variable to read SR2*/
	volatile int tmp;

	/* Wait until bus not busy */
	while (I2C1->SR2 & (SR2_BUSY)){}
 80017f6:	bf00      	nop
 80017f8:	4b2a      	ldr	r3, [pc, #168]	; (80018a4 <I2C1_burstWrite+0xc0>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1f9      	bne.n	80017f8 <I2C1_burstWrite+0x14>

	/* Generate start condition */
	I2C1->CR1 |= CR1_START;
 8001804:	4b27      	ldr	r3, [pc, #156]	; (80018a4 <I2C1_burstWrite+0xc0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a26      	ldr	r2, [pc, #152]	; (80018a4 <I2C1_burstWrite+0xc0>)
 800180a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180e:	6013      	str	r3, [r2, #0]

	/* Wait until start condition flag is set, note the negation */
	/* Stay in loop if start flag is not set*/
	while (!(I2C1->SR1 & (SR1_SB))){}
 8001810:	bf00      	nop
 8001812:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <I2C1_burstWrite+0xc0>)
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f9      	beq.n	8001812 <I2C1_burstWrite+0x2e>

	/* Transmit slave address + Write (0) */
	/* This slave address is sent to each slave device along with an indication to establish either read or write communication*/
	/* Yo device A, I want to write to one of your memory registers */
	I2C1->DR = saddr << 1; // shifting the address left makes room for the R/W bit, which is 0 for write
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	005a      	lsls	r2, r3, #1
 8001822:	4b20      	ldr	r3, [pc, #128]	; (80018a4 <I2C1_burstWrite+0xc0>)
 8001824:	611a      	str	r2, [r3, #16]

	/* Wait until address flag is set */
	/* Each slave device compares the address from master to its own adress and sends an ACK if mathced*/
	/* I'm device A and of course you can write to one of my registers */
	while (!(I2C1->SR1 & (SR1_ADDR))){}
 8001826:	bf00      	nop
 8001828:	4b1e      	ldr	r3, [pc, #120]	; (80018a4 <I2C1_burstWrite+0xc0>)
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f9      	beq.n	8001828 <I2C1_burstWrite+0x44>

	/* Clear address flag by reading SR2 register */
	tmp = I2C1->SR2;
 8001834:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <I2C1_burstWrite+0xc0>)
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	613b      	str	r3, [r7, #16]

	/*Wait until data register empty */
	while (!(I2C1->SR1 & SR1_TXE)){}
 800183a:	bf00      	nop
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <I2C1_burstWrite+0xc0>)
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0f9      	beq.n	800183c <I2C1_burstWrite+0x58>

	/* Send register address */
	/* aight here is the register I'm writing to write to and the value I want written */
	I2C1->DR = maddr;
 8001848:	4a16      	ldr	r2, [pc, #88]	; (80018a4 <I2C1_burstWrite+0xc0>)
 800184a:	7bbb      	ldrb	r3, [r7, #14]
 800184c:	6113      	str	r3, [r2, #16]

	for (int i = 0; i < n; i++) {
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	e00f      	b.n	8001874 <I2C1_burstWrite+0x90>

		/*Wait until data register empty */
		while (!(I2C1->SR1 & SR1_TXE)){}
 8001854:	bf00      	nop
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <I2C1_burstWrite+0xc0>)
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f9      	beq.n	8001856 <I2C1_burstWrite+0x72>

		/* Transmit memory address */
		I2C1->DR = *data++;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	781a      	ldrb	r2, [r3, #0]
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <I2C1_burstWrite+0xc0>)
 800186c:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < n; i++) {
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3301      	adds	r3, #1
 8001872:	617b      	str	r3, [r7, #20]
 8001874:	697a      	ldr	r2, [r7, #20]
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	429a      	cmp	r2, r3
 800187a:	dbeb      	blt.n	8001854 <I2C1_burstWrite+0x70>
	}
	/* Wait until transfer finished */
	while (!(I2C1->SR1 & (SR1_BTF))){}
 800187c:	bf00      	nop
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <I2C1_burstWrite+0xc0>)
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f9      	beq.n	800187e <I2C1_burstWrite+0x9a>

	/* Generate stop */
	I2C1->CR1 |= CR1_STOP;
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <I2C1_burstWrite+0xc0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a05      	ldr	r2, [pc, #20]	; (80018a4 <I2C1_burstWrite+0xc0>)
 8001890:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001894:	6013      	str	r3, [r2, #0]
}
 8001896:	bf00      	nop
 8001898:	371c      	adds	r7, #28
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40005400 	.word	0x40005400

080018a8 <main>:

void log_data_to_csv(const char* filename, uint32_t* data, int num_channels);


int main(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b09c      	sub	sp, #112	; 0x70
 80018ac:	af00      	add	r7, sp, #0
//		printf("errno: %d, message: %s\n", errno, strerror(errno));
//	}



	bool works = begin();
 80018ae:	f7ff f983 	bl	8000bb8 <begin>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	while(1)
	{
		enableLED(AS7265x_LED_UV);
 80018b8:	2002      	movs	r0, #2
 80018ba:	f7ff fc04 	bl	80010c6 <enableLED>
		delayMillis(3000);
 80018be:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80018c2:	f000 fa47 	bl	8001d54 <delayMillis>
		channel_data[0] = getRawA();
 80018c6:	f7ff fd1a 	bl	80012fe <getRawA>
 80018ca:	4603      	mov	r3, r0
 80018cc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		channel_data[1] = getRawB();
 80018d0:	f7ff fd1e 	bl	8001310 <getRawB>
 80018d4:	4603      	mov	r3, r0
 80018d6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		channel_data[2] = getRawC();
 80018da:	f7ff fd22 	bl	8001322 <getRawC>
 80018de:	4603      	mov	r3, r0
 80018e0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		channel_data[3] = getRawD();
 80018e4:	f7ff fd26 	bl	8001334 <getRawD>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		channel_data[4] = getRawE();
 80018ee:	f7ff fd2a 	bl	8001346 <getRawE>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		channel_data[5] = getRawF();
 80018f8:	f7ff fd2e 	bl	8001358 <getRawF>
 80018fc:	4603      	mov	r3, r0
 80018fe:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		disableLED(AS7265x_LED_UV);
 8001902:	2002      	movs	r0, #2
 8001904:	f7ff fbfa 	bl	80010fc <disableLED>
		delayMillis(3000);
 8001908:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800190c:	f000 fa22 	bl	8001d54 <delayMillis>

		enableLED(AS7265x_LED_WHITE);
 8001910:	2000      	movs	r0, #0
 8001912:	f7ff fbd8 	bl	80010c6 <enableLED>
		delayMillis(3000);
 8001916:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800191a:	f000 fa1b 	bl	8001d54 <delayMillis>
		channel_data[6] = getRawG();
 800191e:	f7ff fd24 	bl	800136a <getRawG>
 8001922:	4603      	mov	r3, r0
 8001924:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		channel_data[7] = getRawH();
 8001928:	f7ff fd28 	bl	800137c <getRawH>
 800192c:	4603      	mov	r3, r0
 800192e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		channel_data[9] = getRawI();
 8001932:	f7ff fd2c 	bl	800138e <getRawI>
 8001936:	4603      	mov	r3, r0
 8001938:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		channel_data[11] = getRawJ();
 800193c:	f7ff fd30 	bl	80013a0 <getRawJ>
 8001940:	4603      	mov	r3, r0
 8001942:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		channel_data[16] = getRawL();
 8001946:	f7ff fd34 	bl	80013b2 <getRawL>
 800194a:	4603      	mov	r3, r0
 800194c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
		channel_data[17] = getRawL();
 8001950:	f7ff fd2f 	bl	80013b2 <getRawL>
 8001954:	4603      	mov	r3, r0
 8001956:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
		disableLED(AS7265x_LED_WHITE);
 800195a:	2000      	movs	r0, #0
 800195c:	f7ff fbce 	bl	80010fc <disableLED>
		delayMillis(3000);
 8001960:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001964:	f000 f9f6 	bl	8001d54 <delayMillis>

		enableLED(AS7265x_LED_IR);
 8001968:	2001      	movs	r0, #1
 800196a:	f7ff fbac 	bl	80010c6 <enableLED>
		delayMillis(3000);
 800196e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001972:	f000 f9ef 	bl	8001d54 <delayMillis>
		channel_data[8] = getRawR();
 8001976:	f7ff fd25 	bl	80013c4 <getRawR>
 800197a:	4603      	mov	r3, r0
 800197c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
		channel_data[10] = getRawS();
 8001980:	f7ff fd29 	bl	80013d6 <getRawS>
 8001984:	4603      	mov	r3, r0
 8001986:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
		channel_data[12] = getRawT();
 800198a:	f7ff fd2d 	bl	80013e8 <getRawT>
 800198e:	4603      	mov	r3, r0
 8001990:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
		channel_data[13] = getRawU();
 8001994:	f7ff fd31 	bl	80013fa <getRawU>
 8001998:	4603      	mov	r3, r0
 800199a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		channel_data[14] = getRawV();
 800199e:	f7ff fd35 	bl	800140c <getRawV>
 80019a2:	4603      	mov	r3, r0
 80019a4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		channel_data[15] = getRawW();
 80019a8:	f7ff fd39 	bl	800141e <getRawW>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
		disableLED(AS7265x_LED_IR);
 80019b2:	2001      	movs	r0, #1
 80019b4:	f7ff fba2 	bl	80010fc <disableLED>
		delayMillis(3000);
 80019b8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019bc:	f000 f9ca 	bl	8001d54 <delayMillis>

		// Calibrated Channels
		enableLED(AS7265x_LED_UV);
 80019c0:	2002      	movs	r0, #2
 80019c2:	f7ff fb80 	bl	80010c6 <enableLED>
		delayMillis(3000);
 80019c6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019ca:	f000 f9c3 	bl	8001d54 <delayMillis>
		channel_data_cal[0] = getCalibratedA();
 80019ce:	f7ff fd2f 	bl	8001430 <getCalibratedA>
 80019d2:	eef0 7a40 	vmov.f32	s15, s0
 80019d6:	edc7 7a00 	vstr	s15, [r7]
		channel_data_cal[1] = getCalibratedB();
 80019da:	f7ff fd34 	bl	8001446 <getCalibratedB>
 80019de:	eef0 7a40 	vmov.f32	s15, s0
 80019e2:	edc7 7a01 	vstr	s15, [r7, #4]
		channel_data_cal[2] = getCalibratedC();
 80019e6:	f7ff fd39 	bl	800145c <getCalibratedC>
 80019ea:	eef0 7a40 	vmov.f32	s15, s0
 80019ee:	edc7 7a02 	vstr	s15, [r7, #8]
		channel_data_cal[3] = getCalibratedD();
 80019f2:	f7ff fd3e 	bl	8001472 <getCalibratedD>
 80019f6:	eef0 7a40 	vmov.f32	s15, s0
 80019fa:	edc7 7a03 	vstr	s15, [r7, #12]
		channel_data_cal[4] = getCalibratedE();
 80019fe:	f7ff fd43 	bl	8001488 <getCalibratedE>
 8001a02:	eef0 7a40 	vmov.f32	s15, s0
 8001a06:	edc7 7a04 	vstr	s15, [r7, #16]
		channel_data_cal[5] = getCalibratedF();
 8001a0a:	f7ff fd48 	bl	800149e <getCalibratedF>
 8001a0e:	eef0 7a40 	vmov.f32	s15, s0
 8001a12:	edc7 7a05 	vstr	s15, [r7, #20]
		disableLED(AS7265x_LED_UV);
 8001a16:	2002      	movs	r0, #2
 8001a18:	f7ff fb70 	bl	80010fc <disableLED>
		delayMillis(3000);
 8001a1c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a20:	f000 f998 	bl	8001d54 <delayMillis>

		enableLED(AS7265x_LED_WHITE);
 8001a24:	2000      	movs	r0, #0
 8001a26:	f7ff fb4e 	bl	80010c6 <enableLED>
		delayMillis(3000);
 8001a2a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a2e:	f000 f991 	bl	8001d54 <delayMillis>
		channel_data_cal[6] = getCalibratedG();
 8001a32:	f7ff fd3f 	bl	80014b4 <getCalibratedG>
 8001a36:	eef0 7a40 	vmov.f32	s15, s0
 8001a3a:	edc7 7a06 	vstr	s15, [r7, #24]
		channel_data_cal[7] = getCalibratedH();
 8001a3e:	f7ff fd44 	bl	80014ca <getCalibratedH>
 8001a42:	eef0 7a40 	vmov.f32	s15, s0
 8001a46:	edc7 7a07 	vstr	s15, [r7, #28]
		channel_data_cal[9] = getCalibratedI();
 8001a4a:	f7ff fd49 	bl	80014e0 <getCalibratedI>
 8001a4e:	eef0 7a40 	vmov.f32	s15, s0
 8001a52:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		channel_data_cal[11] = getCalibratedJ();
 8001a56:	f7ff fd4e 	bl	80014f6 <getCalibratedJ>
 8001a5a:	eef0 7a40 	vmov.f32	s15, s0
 8001a5e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		channel_data_cal[16] = getCalibratedL();
 8001a62:	f7ff fd53 	bl	800150c <getCalibratedL>
 8001a66:	eef0 7a40 	vmov.f32	s15, s0
 8001a6a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		channel_data_cal[17] = getCalibratedL();
 8001a6e:	f7ff fd4d 	bl	800150c <getCalibratedL>
 8001a72:	eef0 7a40 	vmov.f32	s15, s0
 8001a76:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		disableLED(AS7265x_LED_WHITE);
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f7ff fb3e 	bl	80010fc <disableLED>
		delayMillis(3000);
 8001a80:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a84:	f000 f966 	bl	8001d54 <delayMillis>

		enableLED(AS7265x_LED_IR);
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f7ff fb1c 	bl	80010c6 <enableLED>
		delayMillis(3000);
 8001a8e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a92:	f000 f95f 	bl	8001d54 <delayMillis>
		channel_data_cal[8] = getCalibratedR();
 8001a96:	f7ff fd44 	bl	8001522 <getCalibratedR>
 8001a9a:	eef0 7a40 	vmov.f32	s15, s0
 8001a9e:	edc7 7a08 	vstr	s15, [r7, #32]
		channel_data_cal[10] = getCalibratedS();
 8001aa2:	f7ff fd49 	bl	8001538 <getCalibratedS>
 8001aa6:	eef0 7a40 	vmov.f32	s15, s0
 8001aaa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		channel_data_cal[12] = getCalibratedT();
 8001aae:	f7ff fd4e 	bl	800154e <getCalibratedT>
 8001ab2:	eef0 7a40 	vmov.f32	s15, s0
 8001ab6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		channel_data_cal[13] = getCalibratedU();
 8001aba:	f7ff fd53 	bl	8001564 <getCalibratedU>
 8001abe:	eef0 7a40 	vmov.f32	s15, s0
 8001ac2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		channel_data_cal[14] = getCalibratedV();
 8001ac6:	f7ff fd58 	bl	800157a <getCalibratedV>
 8001aca:	eef0 7a40 	vmov.f32	s15, s0
 8001ace:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		channel_data_cal[15] = getCalibratedW();
 8001ad2:	f7ff fd5d 	bl	8001590 <getCalibratedW>
 8001ad6:	eef0 7a40 	vmov.f32	s15, s0
 8001ada:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		disableLED(AS7265x_LED_IR);
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f7ff fb0c 	bl	80010fc <disableLED>
		delayMillis(3000);
 8001ae4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001ae8:	f000 f934 	bl	8001d54 <delayMillis>

		break;
 8001aec:	bf00      	nop

//		// Log the data to CSV
//		log_data_to_csv(filename, channel_data, NUM_CHANNELS);

	}
	return 0;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3770      	adds	r7, #112	; 0x70
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return 1;
 8001afc:	2301      	movs	r3, #1
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <_kill>:

int _kill(int pid, int sig)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b12:	f001 f93d 	bl	8002d90 <__errno>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2216      	movs	r2, #22
 8001b1a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <_exit>:

void _exit (int status)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b30:	f04f 31ff 	mov.w	r1, #4294967295
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ffe7 	bl	8001b08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b3a:	e7fe      	b.n	8001b3a <_exit+0x12>

08001b3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
 8001b4c:	e00a      	b.n	8001b64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b4e:	f3af 8000 	nop.w
 8001b52:	4601      	mov	r1, r0
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	60ba      	str	r2, [r7, #8]
 8001b5a:	b2ca      	uxtb	r2, r1
 8001b5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3301      	adds	r3, #1
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	dbf0      	blt.n	8001b4e <_read+0x12>
  }

  return len;
 8001b6c:	687b      	ldr	r3, [r7, #4]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	60f8      	str	r0, [r7, #12]
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	e009      	b.n	8001b9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	60ba      	str	r2, [r7, #8]
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 f8f4 	bl	8001d7e <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	dbf1      	blt.n	8001b88 <_write+0x12>
  }
  return len;
 8001ba4:	687b      	ldr	r3, [r7, #4]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <_close>:

int _close(int file)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b083      	sub	sp, #12
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bd6:	605a      	str	r2, [r3, #4]
  return 0;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <_isatty>:

int _isatty(int file)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bee:	2301      	movs	r3, #1
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3714      	adds	r7, #20
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c20:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <_sbrk+0x5c>)
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <_sbrk+0x60>)
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d102      	bne.n	8001c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <_sbrk+0x64>)
 8001c36:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <_sbrk+0x68>)
 8001c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <_sbrk+0x64>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d207      	bcs.n	8001c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c48:	f001 f8a2 	bl	8002d90 <__errno>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	220c      	movs	r2, #12
 8001c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295
 8001c56:	e009      	b.n	8001c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c58:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	4a05      	ldr	r2, [pc, #20]	; (8001c7c <_sbrk+0x64>)
 8001c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20018000 	.word	0x20018000
 8001c78:	00000400 	.word	0x00000400
 8001c7c:	200001e8 	.word	0x200001e8
 8001c80:	20000340 	.word	0x20000340

08001c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	db0a      	blt.n	8001cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	490c      	ldr	r1, [pc, #48]	; (8001cd0 <__NVIC_SetPriority+0x4c>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	0112      	lsls	r2, r2, #4
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cac:	e00a      	b.n	8001cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4908      	ldr	r1, [pc, #32]	; (8001cd4 <__NVIC_SetPriority+0x50>)
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	3b04      	subs	r3, #4
 8001cbc:	0112      	lsls	r2, r2, #4
 8001cbe:	b2d2      	uxtb	r2, r2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	761a      	strb	r2, [r3, #24]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	e000e100 	.word	0xe000e100
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <SysTick_Init>:
#define CTRL_COUNTFLAG			(1U<<16)

volatile uint32_t msTicks = 0;

void SysTick_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
    // Reload with the number of clocks per millisecond
    SysTick->LOAD = SYSTICK_LOAD_VAL - 1;  // Set reload register (off by one)
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <SysTick_Init+0x44>)
 8001cde:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001ce2:	605a      	str	r2, [r3, #4]

    // Set the priority of the SysTick interrupt
    NVIC_SetPriority(SysTick_IRQn, (1 << __NVIC_PRIO_BITS) - 1);  // Set lowest priority
 8001ce4:	210f      	movs	r1, #15
 8001ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8001cea:	f7ff ffcb 	bl	8001c84 <__NVIC_SetPriority>

    // Reset the SysTick counter value
    SysTick->VAL = 0;
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <SysTick_Init+0x44>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]

    // Select processor clock as SysTick clock source
    SysTick->CTRL |= CTRL_CLKSRC;
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <SysTick_Init+0x44>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a08      	ldr	r2, [pc, #32]	; (8001d1c <SysTick_Init+0x44>)
 8001cfa:	f043 0304 	orr.w	r3, r3, #4
 8001cfe:	6013      	str	r3, [r2, #0]

    // Enable SysTick interrupt
    SysTick->CTRL |= CTRL_TICKINT;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <SysTick_Init+0x44>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a05      	ldr	r2, [pc, #20]	; (8001d1c <SysTick_Init+0x44>)
 8001d06:	f043 0302 	orr.w	r3, r3, #2
 8001d0a:	6013      	str	r3, [r2, #0]

    // Enable SysTick timer
    SysTick->CTRL |= CTRL_ENABLE;
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <SysTick_Init+0x44>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a02      	ldr	r2, [pc, #8]	; (8001d1c <SysTick_Init+0x44>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	6013      	str	r3, [r2, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	e000e010 	.word	0xe000e010

08001d20 <SysTick_Handler>:

// SysTick Handler - Called every 1ms
void SysTick_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
	msTicks++;
 8001d24:	4b04      	ldr	r3, [pc, #16]	; (8001d38 <SysTick_Handler+0x18>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	4a03      	ldr	r2, [pc, #12]	; (8001d38 <SysTick_Handler+0x18>)
 8001d2c:	6013      	str	r3, [r2, #0]
}
 8001d2e:	bf00      	nop
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	200001ec 	.word	0x200001ec

08001d3c <getMillis>:

// Function to get the current time in milliseconds
uint32_t getMillis(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
	return msTicks;
 8001d40:	4b03      	ldr	r3, [pc, #12]	; (8001d50 <getMillis+0x14>)
 8001d42:	681b      	ldr	r3, [r3, #0]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	200001ec 	.word	0x200001ec

08001d54 <delayMillis>:

void delayMillis(uint32_t delay)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
	uint32_t startTick = getMillis();
 8001d5c:	f7ff ffee 	bl	8001d3c <getMillis>
 8001d60:	60f8      	str	r0, [r7, #12]
	while ((getMillis() - startTick) < delay){}
 8001d62:	bf00      	nop
 8001d64:	f7ff ffea 	bl	8001d3c <getMillis>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d8f7      	bhi.n	8001d64 <delayMillis+0x10>
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <__io_putchar>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);

int __io_putchar(int ch)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f876 	bl	8001e78 <uart2_write>
	return ch;
 8001d8c:	687b      	ldr	r3, [r7, #4]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <uart2_rxtx_init>:

void uart2_rxtx_init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
	/****************Configure uart  pin using gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 8001d9c:	4b32      	ldr	r3, [pc, #200]	; (8001e68 <uart2_rxtx_init+0xd0>)
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	4a31      	ldr	r2, [pc, #196]	; (8001e68 <uart2_rxtx_init+0xd0>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6313      	str	r3, [r2, #48]	; 0x30


	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~ (1U<<4);
 8001da8:	4b30      	ldr	r3, [pc, #192]	; (8001e6c <uart2_rxtx_init+0xd4>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a2f      	ldr	r2, [pc, #188]	; (8001e6c <uart2_rxtx_init+0xd4>)
 8001dae:	f023 0310 	bic.w	r3, r3, #16
 8001db2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8001db4:	4b2d      	ldr	r3, [pc, #180]	; (8001e6c <uart2_rxtx_init+0xd4>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a2c      	ldr	r2, [pc, #176]	; (8001e6c <uart2_rxtx_init+0xd4>)
 8001dba:	f043 0320 	orr.w	r3, r3, #32
 8001dbe:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0]|= (1U<<8);
 8001dc0:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <uart2_rxtx_init+0xd4>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	4a29      	ldr	r2, [pc, #164]	; (8001e6c <uart2_rxtx_init+0xd4>)
 8001dc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dca:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<9);
 8001dcc:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <uart2_rxtx_init+0xd4>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	4a26      	ldr	r2, [pc, #152]	; (8001e6c <uart2_rxtx_init+0xd4>)
 8001dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dd6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<10);
 8001dd8:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <uart2_rxtx_init+0xd4>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4a23      	ldr	r2, [pc, #140]	; (8001e6c <uart2_rxtx_init+0xd4>)
 8001dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001de2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<11);
 8001de4:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <uart2_rxtx_init+0xd4>)
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	4a20      	ldr	r2, [pc, #128]	; (8001e6c <uart2_rxtx_init+0xd4>)
 8001dea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001dee:	6213      	str	r3, [r2, #32]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~ (1U<<6);
 8001df0:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <uart2_rxtx_init+0xd4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a1d      	ldr	r2, [pc, #116]	; (8001e6c <uart2_rxtx_init+0xd4>)
 8001df6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001dfa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <uart2_rxtx_init+0xd4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a1a      	ldr	r2, [pc, #104]	; (8001e6c <uart2_rxtx_init+0xd4>)
 8001e02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e06:	6013      	str	r3, [r2, #0]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0]|= (1U<<12);
 8001e08:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <uart2_rxtx_init+0xd4>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <uart2_rxtx_init+0xd4>)
 8001e0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e12:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<13);
 8001e14:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <uart2_rxtx_init+0xd4>)
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <uart2_rxtx_init+0xd4>)
 8001e1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e1e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<14);
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <uart2_rxtx_init+0xd4>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	4a11      	ldr	r2, [pc, #68]	; (8001e6c <uart2_rxtx_init+0xd4>)
 8001e26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e2a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<15);
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <uart2_rxtx_init+0xd4>)
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	4a0e      	ldr	r2, [pc, #56]	; (8001e6c <uart2_rxtx_init+0xd4>)
 8001e32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001e36:	6213      	str	r3, [r2, #32]



	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= USART2EN;
 8001e38:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <uart2_rxtx_init+0xd0>)
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	4a0a      	ldr	r2, [pc, #40]	; (8001e68 <uart2_rxtx_init+0xd0>)
 8001e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e42:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8001e44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e48:	4909      	ldr	r1, [pc, #36]	; (8001e70 <uart2_rxtx_init+0xd8>)
 8001e4a:	480a      	ldr	r0, [pc, #40]	; (8001e74 <uart2_rxtx_init+0xdc>)
 8001e4c:	f000 f82c 	bl	8001ea8 <uart_set_baudrate>

	/*Configure the transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8001e50:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <uart2_rxtx_init+0xdc>)
 8001e52:	220c      	movs	r2, #12
 8001e54:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	USART2->CR1 |= CR1_UE;
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <uart2_rxtx_init+0xdc>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	4a06      	ldr	r2, [pc, #24]	; (8001e74 <uart2_rxtx_init+0xdc>)
 8001e5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e60:	60d3      	str	r3, [r2, #12]

}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40020000 	.word	0x40020000
 8001e70:	00f42400 	.word	0x00f42400
 8001e74:	40004400 	.word	0x40004400

08001e78 <uart2_write>:
	return USART2->DR;

}

void uart2_write(int ch)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){} // Program stays here until condition in while loop no longer holds
 8001e80:	bf00      	nop
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <uart2_write+0x2c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0f9      	beq.n	8001e82 <uart2_write+0xa>

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <uart2_write+0x2c>)
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	6053      	str	r3, [r2, #4]
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40004400 	.word	0x40004400

08001ea8 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	68b8      	ldr	r0, [r7, #8]
 8001eb8:	f000 f808 	bl	8001ecc <compute_uart_bd>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	609a      	str	r2, [r3, #8]
}
 8001ec4:	bf00      	nop
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	085a      	lsrs	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	441a      	add	r2, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee4:	b29b      	uxth	r3, r3
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ef4:	480d      	ldr	r0, [pc, #52]	; (8001f2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ef6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ef8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001efc:	480c      	ldr	r0, [pc, #48]	; (8001f30 <LoopForever+0x6>)
  ldr r1, =_edata
 8001efe:	490d      	ldr	r1, [pc, #52]	; (8001f34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f00:	4a0d      	ldr	r2, [pc, #52]	; (8001f38 <LoopForever+0xe>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f04:	e002      	b.n	8001f0c <LoopCopyDataInit>

08001f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0a:	3304      	adds	r3, #4

08001f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f10:	d3f9      	bcc.n	8001f06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f12:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f14:	4c0a      	ldr	r4, [pc, #40]	; (8001f40 <LoopForever+0x16>)
  movs r3, #0
 8001f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f18:	e001      	b.n	8001f1e <LoopFillZerobss>

08001f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f1c:	3204      	adds	r2, #4

08001f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f20:	d3fb      	bcc.n	8001f1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f22:	f000 ff3b 	bl	8002d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f26:	f7ff fcbf 	bl	80018a8 <main>

08001f2a <LoopForever>:

LoopForever:
  b LoopForever
 8001f2a:	e7fe      	b.n	8001f2a <LoopForever>
  ldr   r0, =_estack
 8001f2c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f34:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001f38:	08004cb4 	.word	0x08004cb4
  ldr r2, =_sbss
 8001f3c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001f40:	2000033c 	.word	0x2000033c

08001f44 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f44:	e7fe      	b.n	8001f44 <ADC_IRQHandler>

08001f46 <__cvt>:
 8001f46:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001f4a:	ec55 4b10 	vmov	r4, r5, d0
 8001f4e:	2d00      	cmp	r5, #0
 8001f50:	460e      	mov	r6, r1
 8001f52:	4619      	mov	r1, r3
 8001f54:	462b      	mov	r3, r5
 8001f56:	bfbb      	ittet	lt
 8001f58:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8001f5c:	461d      	movlt	r5, r3
 8001f5e:	2300      	movge	r3, #0
 8001f60:	232d      	movlt	r3, #45	; 0x2d
 8001f62:	700b      	strb	r3, [r1, #0]
 8001f64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001f66:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8001f6a:	4691      	mov	r9, r2
 8001f6c:	f023 0820 	bic.w	r8, r3, #32
 8001f70:	bfbc      	itt	lt
 8001f72:	4622      	movlt	r2, r4
 8001f74:	4614      	movlt	r4, r2
 8001f76:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8001f7a:	d005      	beq.n	8001f88 <__cvt+0x42>
 8001f7c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8001f80:	d100      	bne.n	8001f84 <__cvt+0x3e>
 8001f82:	3601      	adds	r6, #1
 8001f84:	2102      	movs	r1, #2
 8001f86:	e000      	b.n	8001f8a <__cvt+0x44>
 8001f88:	2103      	movs	r1, #3
 8001f8a:	ab03      	add	r3, sp, #12
 8001f8c:	9301      	str	r3, [sp, #4]
 8001f8e:	ab02      	add	r3, sp, #8
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	ec45 4b10 	vmov	d0, r4, r5
 8001f96:	4653      	mov	r3, sl
 8001f98:	4632      	mov	r2, r6
 8001f9a:	f000 ffb1 	bl	8002f00 <_dtoa_r>
 8001f9e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8001fa2:	4607      	mov	r7, r0
 8001fa4:	d102      	bne.n	8001fac <__cvt+0x66>
 8001fa6:	f019 0f01 	tst.w	r9, #1
 8001faa:	d022      	beq.n	8001ff2 <__cvt+0xac>
 8001fac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8001fb0:	eb07 0906 	add.w	r9, r7, r6
 8001fb4:	d110      	bne.n	8001fd8 <__cvt+0x92>
 8001fb6:	783b      	ldrb	r3, [r7, #0]
 8001fb8:	2b30      	cmp	r3, #48	; 0x30
 8001fba:	d10a      	bne.n	8001fd2 <__cvt+0x8c>
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	4629      	mov	r1, r5
 8001fc4:	f7fe fd88 	bl	8000ad8 <__aeabi_dcmpeq>
 8001fc8:	b918      	cbnz	r0, 8001fd2 <__cvt+0x8c>
 8001fca:	f1c6 0601 	rsb	r6, r6, #1
 8001fce:	f8ca 6000 	str.w	r6, [sl]
 8001fd2:	f8da 3000 	ldr.w	r3, [sl]
 8001fd6:	4499      	add	r9, r3
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2300      	movs	r3, #0
 8001fdc:	4620      	mov	r0, r4
 8001fde:	4629      	mov	r1, r5
 8001fe0:	f7fe fd7a 	bl	8000ad8 <__aeabi_dcmpeq>
 8001fe4:	b108      	cbz	r0, 8001fea <__cvt+0xa4>
 8001fe6:	f8cd 900c 	str.w	r9, [sp, #12]
 8001fea:	2230      	movs	r2, #48	; 0x30
 8001fec:	9b03      	ldr	r3, [sp, #12]
 8001fee:	454b      	cmp	r3, r9
 8001ff0:	d307      	bcc.n	8002002 <__cvt+0xbc>
 8001ff2:	9b03      	ldr	r3, [sp, #12]
 8001ff4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001ff6:	1bdb      	subs	r3, r3, r7
 8001ff8:	4638      	mov	r0, r7
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	b004      	add	sp, #16
 8001ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002002:	1c59      	adds	r1, r3, #1
 8002004:	9103      	str	r1, [sp, #12]
 8002006:	701a      	strb	r2, [r3, #0]
 8002008:	e7f0      	b.n	8001fec <__cvt+0xa6>

0800200a <__exponent>:
 800200a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800200c:	4603      	mov	r3, r0
 800200e:	2900      	cmp	r1, #0
 8002010:	bfb8      	it	lt
 8002012:	4249      	neglt	r1, r1
 8002014:	f803 2b02 	strb.w	r2, [r3], #2
 8002018:	bfb4      	ite	lt
 800201a:	222d      	movlt	r2, #45	; 0x2d
 800201c:	222b      	movge	r2, #43	; 0x2b
 800201e:	2909      	cmp	r1, #9
 8002020:	7042      	strb	r2, [r0, #1]
 8002022:	dd2a      	ble.n	800207a <__exponent+0x70>
 8002024:	f10d 0207 	add.w	r2, sp, #7
 8002028:	4617      	mov	r7, r2
 800202a:	260a      	movs	r6, #10
 800202c:	4694      	mov	ip, r2
 800202e:	fb91 f5f6 	sdiv	r5, r1, r6
 8002032:	fb06 1415 	mls	r4, r6, r5, r1
 8002036:	3430      	adds	r4, #48	; 0x30
 8002038:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800203c:	460c      	mov	r4, r1
 800203e:	2c63      	cmp	r4, #99	; 0x63
 8002040:	f102 32ff 	add.w	r2, r2, #4294967295
 8002044:	4629      	mov	r1, r5
 8002046:	dcf1      	bgt.n	800202c <__exponent+0x22>
 8002048:	3130      	adds	r1, #48	; 0x30
 800204a:	f1ac 0402 	sub.w	r4, ip, #2
 800204e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002052:	1c41      	adds	r1, r0, #1
 8002054:	4622      	mov	r2, r4
 8002056:	42ba      	cmp	r2, r7
 8002058:	d30a      	bcc.n	8002070 <__exponent+0x66>
 800205a:	f10d 0209 	add.w	r2, sp, #9
 800205e:	eba2 020c 	sub.w	r2, r2, ip
 8002062:	42bc      	cmp	r4, r7
 8002064:	bf88      	it	hi
 8002066:	2200      	movhi	r2, #0
 8002068:	4413      	add	r3, r2
 800206a:	1a18      	subs	r0, r3, r0
 800206c:	b003      	add	sp, #12
 800206e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002070:	f812 5b01 	ldrb.w	r5, [r2], #1
 8002074:	f801 5f01 	strb.w	r5, [r1, #1]!
 8002078:	e7ed      	b.n	8002056 <__exponent+0x4c>
 800207a:	2330      	movs	r3, #48	; 0x30
 800207c:	3130      	adds	r1, #48	; 0x30
 800207e:	7083      	strb	r3, [r0, #2]
 8002080:	70c1      	strb	r1, [r0, #3]
 8002082:	1d03      	adds	r3, r0, #4
 8002084:	e7f1      	b.n	800206a <__exponent+0x60>
	...

08002088 <_printf_float>:
 8002088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800208c:	ed2d 8b02 	vpush	{d8}
 8002090:	b08d      	sub	sp, #52	; 0x34
 8002092:	460c      	mov	r4, r1
 8002094:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002098:	4616      	mov	r6, r2
 800209a:	461f      	mov	r7, r3
 800209c:	4605      	mov	r5, r0
 800209e:	f000 fe2d 	bl	8002cfc <_localeconv_r>
 80020a2:	f8d0 a000 	ldr.w	sl, [r0]
 80020a6:	4650      	mov	r0, sl
 80020a8:	f7fe f8ea 	bl	8000280 <strlen>
 80020ac:	2300      	movs	r3, #0
 80020ae:	930a      	str	r3, [sp, #40]	; 0x28
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	9305      	str	r3, [sp, #20]
 80020b4:	f8d8 3000 	ldr.w	r3, [r8]
 80020b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80020bc:	3307      	adds	r3, #7
 80020be:	f023 0307 	bic.w	r3, r3, #7
 80020c2:	f103 0208 	add.w	r2, r3, #8
 80020c6:	f8c8 2000 	str.w	r2, [r8]
 80020ca:	e9d3 8900 	ldrd	r8, r9, [r3]
 80020ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80020d2:	9307      	str	r3, [sp, #28]
 80020d4:	f8cd 8018 	str.w	r8, [sp, #24]
 80020d8:	ee08 0a10 	vmov	s16, r0
 80020dc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80020e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80020e4:	4b9e      	ldr	r3, [pc, #632]	; (8002360 <_printf_float+0x2d8>)
 80020e6:	f04f 32ff 	mov.w	r2, #4294967295
 80020ea:	f7fe fd27 	bl	8000b3c <__aeabi_dcmpun>
 80020ee:	bb88      	cbnz	r0, 8002154 <_printf_float+0xcc>
 80020f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80020f4:	4b9a      	ldr	r3, [pc, #616]	; (8002360 <_printf_float+0x2d8>)
 80020f6:	f04f 32ff 	mov.w	r2, #4294967295
 80020fa:	f7fe fd01 	bl	8000b00 <__aeabi_dcmple>
 80020fe:	bb48      	cbnz	r0, 8002154 <_printf_float+0xcc>
 8002100:	2200      	movs	r2, #0
 8002102:	2300      	movs	r3, #0
 8002104:	4640      	mov	r0, r8
 8002106:	4649      	mov	r1, r9
 8002108:	f7fe fcf0 	bl	8000aec <__aeabi_dcmplt>
 800210c:	b110      	cbz	r0, 8002114 <_printf_float+0x8c>
 800210e:	232d      	movs	r3, #45	; 0x2d
 8002110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002114:	4a93      	ldr	r2, [pc, #588]	; (8002364 <_printf_float+0x2dc>)
 8002116:	4b94      	ldr	r3, [pc, #592]	; (8002368 <_printf_float+0x2e0>)
 8002118:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800211c:	bf94      	ite	ls
 800211e:	4690      	movls	r8, r2
 8002120:	4698      	movhi	r8, r3
 8002122:	2303      	movs	r3, #3
 8002124:	6123      	str	r3, [r4, #16]
 8002126:	9b05      	ldr	r3, [sp, #20]
 8002128:	f023 0304 	bic.w	r3, r3, #4
 800212c:	6023      	str	r3, [r4, #0]
 800212e:	f04f 0900 	mov.w	r9, #0
 8002132:	9700      	str	r7, [sp, #0]
 8002134:	4633      	mov	r3, r6
 8002136:	aa0b      	add	r2, sp, #44	; 0x2c
 8002138:	4621      	mov	r1, r4
 800213a:	4628      	mov	r0, r5
 800213c:	f000 f9da 	bl	80024f4 <_printf_common>
 8002140:	3001      	adds	r0, #1
 8002142:	f040 8090 	bne.w	8002266 <_printf_float+0x1de>
 8002146:	f04f 30ff 	mov.w	r0, #4294967295
 800214a:	b00d      	add	sp, #52	; 0x34
 800214c:	ecbd 8b02 	vpop	{d8}
 8002150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002154:	4642      	mov	r2, r8
 8002156:	464b      	mov	r3, r9
 8002158:	4640      	mov	r0, r8
 800215a:	4649      	mov	r1, r9
 800215c:	f7fe fcee 	bl	8000b3c <__aeabi_dcmpun>
 8002160:	b140      	cbz	r0, 8002174 <_printf_float+0xec>
 8002162:	464b      	mov	r3, r9
 8002164:	2b00      	cmp	r3, #0
 8002166:	bfbc      	itt	lt
 8002168:	232d      	movlt	r3, #45	; 0x2d
 800216a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800216e:	4a7f      	ldr	r2, [pc, #508]	; (800236c <_printf_float+0x2e4>)
 8002170:	4b7f      	ldr	r3, [pc, #508]	; (8002370 <_printf_float+0x2e8>)
 8002172:	e7d1      	b.n	8002118 <_printf_float+0x90>
 8002174:	6863      	ldr	r3, [r4, #4]
 8002176:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800217a:	9206      	str	r2, [sp, #24]
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	d13f      	bne.n	8002200 <_printf_float+0x178>
 8002180:	2306      	movs	r3, #6
 8002182:	6063      	str	r3, [r4, #4]
 8002184:	9b05      	ldr	r3, [sp, #20]
 8002186:	6861      	ldr	r1, [r4, #4]
 8002188:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800218c:	2300      	movs	r3, #0
 800218e:	9303      	str	r3, [sp, #12]
 8002190:	ab0a      	add	r3, sp, #40	; 0x28
 8002192:	e9cd b301 	strd	fp, r3, [sp, #4]
 8002196:	ab09      	add	r3, sp, #36	; 0x24
 8002198:	ec49 8b10 	vmov	d0, r8, r9
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	6022      	str	r2, [r4, #0]
 80021a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80021a4:	4628      	mov	r0, r5
 80021a6:	f7ff fece 	bl	8001f46 <__cvt>
 80021aa:	9b06      	ldr	r3, [sp, #24]
 80021ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80021ae:	2b47      	cmp	r3, #71	; 0x47
 80021b0:	4680      	mov	r8, r0
 80021b2:	d108      	bne.n	80021c6 <_printf_float+0x13e>
 80021b4:	1cc8      	adds	r0, r1, #3
 80021b6:	db02      	blt.n	80021be <_printf_float+0x136>
 80021b8:	6863      	ldr	r3, [r4, #4]
 80021ba:	4299      	cmp	r1, r3
 80021bc:	dd41      	ble.n	8002242 <_printf_float+0x1ba>
 80021be:	f1ab 0302 	sub.w	r3, fp, #2
 80021c2:	fa5f fb83 	uxtb.w	fp, r3
 80021c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80021ca:	d820      	bhi.n	800220e <_printf_float+0x186>
 80021cc:	3901      	subs	r1, #1
 80021ce:	465a      	mov	r2, fp
 80021d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80021d4:	9109      	str	r1, [sp, #36]	; 0x24
 80021d6:	f7ff ff18 	bl	800200a <__exponent>
 80021da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80021dc:	1813      	adds	r3, r2, r0
 80021de:	2a01      	cmp	r2, #1
 80021e0:	4681      	mov	r9, r0
 80021e2:	6123      	str	r3, [r4, #16]
 80021e4:	dc02      	bgt.n	80021ec <_printf_float+0x164>
 80021e6:	6822      	ldr	r2, [r4, #0]
 80021e8:	07d2      	lsls	r2, r2, #31
 80021ea:	d501      	bpl.n	80021f0 <_printf_float+0x168>
 80021ec:	3301      	adds	r3, #1
 80021ee:	6123      	str	r3, [r4, #16]
 80021f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d09c      	beq.n	8002132 <_printf_float+0xaa>
 80021f8:	232d      	movs	r3, #45	; 0x2d
 80021fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021fe:	e798      	b.n	8002132 <_printf_float+0xaa>
 8002200:	9a06      	ldr	r2, [sp, #24]
 8002202:	2a47      	cmp	r2, #71	; 0x47
 8002204:	d1be      	bne.n	8002184 <_printf_float+0xfc>
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1bc      	bne.n	8002184 <_printf_float+0xfc>
 800220a:	2301      	movs	r3, #1
 800220c:	e7b9      	b.n	8002182 <_printf_float+0xfa>
 800220e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8002212:	d118      	bne.n	8002246 <_printf_float+0x1be>
 8002214:	2900      	cmp	r1, #0
 8002216:	6863      	ldr	r3, [r4, #4]
 8002218:	dd0b      	ble.n	8002232 <_printf_float+0x1aa>
 800221a:	6121      	str	r1, [r4, #16]
 800221c:	b913      	cbnz	r3, 8002224 <_printf_float+0x19c>
 800221e:	6822      	ldr	r2, [r4, #0]
 8002220:	07d0      	lsls	r0, r2, #31
 8002222:	d502      	bpl.n	800222a <_printf_float+0x1a2>
 8002224:	3301      	adds	r3, #1
 8002226:	440b      	add	r3, r1
 8002228:	6123      	str	r3, [r4, #16]
 800222a:	65a1      	str	r1, [r4, #88]	; 0x58
 800222c:	f04f 0900 	mov.w	r9, #0
 8002230:	e7de      	b.n	80021f0 <_printf_float+0x168>
 8002232:	b913      	cbnz	r3, 800223a <_printf_float+0x1b2>
 8002234:	6822      	ldr	r2, [r4, #0]
 8002236:	07d2      	lsls	r2, r2, #31
 8002238:	d501      	bpl.n	800223e <_printf_float+0x1b6>
 800223a:	3302      	adds	r3, #2
 800223c:	e7f4      	b.n	8002228 <_printf_float+0x1a0>
 800223e:	2301      	movs	r3, #1
 8002240:	e7f2      	b.n	8002228 <_printf_float+0x1a0>
 8002242:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002248:	4299      	cmp	r1, r3
 800224a:	db05      	blt.n	8002258 <_printf_float+0x1d0>
 800224c:	6823      	ldr	r3, [r4, #0]
 800224e:	6121      	str	r1, [r4, #16]
 8002250:	07d8      	lsls	r0, r3, #31
 8002252:	d5ea      	bpl.n	800222a <_printf_float+0x1a2>
 8002254:	1c4b      	adds	r3, r1, #1
 8002256:	e7e7      	b.n	8002228 <_printf_float+0x1a0>
 8002258:	2900      	cmp	r1, #0
 800225a:	bfd4      	ite	le
 800225c:	f1c1 0202 	rsble	r2, r1, #2
 8002260:	2201      	movgt	r2, #1
 8002262:	4413      	add	r3, r2
 8002264:	e7e0      	b.n	8002228 <_printf_float+0x1a0>
 8002266:	6823      	ldr	r3, [r4, #0]
 8002268:	055a      	lsls	r2, r3, #21
 800226a:	d407      	bmi.n	800227c <_printf_float+0x1f4>
 800226c:	6923      	ldr	r3, [r4, #16]
 800226e:	4642      	mov	r2, r8
 8002270:	4631      	mov	r1, r6
 8002272:	4628      	mov	r0, r5
 8002274:	47b8      	blx	r7
 8002276:	3001      	adds	r0, #1
 8002278:	d12c      	bne.n	80022d4 <_printf_float+0x24c>
 800227a:	e764      	b.n	8002146 <_printf_float+0xbe>
 800227c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002280:	f240 80e0 	bls.w	8002444 <_printf_float+0x3bc>
 8002284:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002288:	2200      	movs	r2, #0
 800228a:	2300      	movs	r3, #0
 800228c:	f7fe fc24 	bl	8000ad8 <__aeabi_dcmpeq>
 8002290:	2800      	cmp	r0, #0
 8002292:	d034      	beq.n	80022fe <_printf_float+0x276>
 8002294:	4a37      	ldr	r2, [pc, #220]	; (8002374 <_printf_float+0x2ec>)
 8002296:	2301      	movs	r3, #1
 8002298:	4631      	mov	r1, r6
 800229a:	4628      	mov	r0, r5
 800229c:	47b8      	blx	r7
 800229e:	3001      	adds	r0, #1
 80022a0:	f43f af51 	beq.w	8002146 <_printf_float+0xbe>
 80022a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80022a8:	429a      	cmp	r2, r3
 80022aa:	db02      	blt.n	80022b2 <_printf_float+0x22a>
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	07d8      	lsls	r0, r3, #31
 80022b0:	d510      	bpl.n	80022d4 <_printf_float+0x24c>
 80022b2:	ee18 3a10 	vmov	r3, s16
 80022b6:	4652      	mov	r2, sl
 80022b8:	4631      	mov	r1, r6
 80022ba:	4628      	mov	r0, r5
 80022bc:	47b8      	blx	r7
 80022be:	3001      	adds	r0, #1
 80022c0:	f43f af41 	beq.w	8002146 <_printf_float+0xbe>
 80022c4:	f04f 0800 	mov.w	r8, #0
 80022c8:	f104 091a 	add.w	r9, r4, #26
 80022cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80022ce:	3b01      	subs	r3, #1
 80022d0:	4543      	cmp	r3, r8
 80022d2:	dc09      	bgt.n	80022e8 <_printf_float+0x260>
 80022d4:	6823      	ldr	r3, [r4, #0]
 80022d6:	079b      	lsls	r3, r3, #30
 80022d8:	f100 8107 	bmi.w	80024ea <_printf_float+0x462>
 80022dc:	68e0      	ldr	r0, [r4, #12]
 80022de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80022e0:	4298      	cmp	r0, r3
 80022e2:	bfb8      	it	lt
 80022e4:	4618      	movlt	r0, r3
 80022e6:	e730      	b.n	800214a <_printf_float+0xc2>
 80022e8:	2301      	movs	r3, #1
 80022ea:	464a      	mov	r2, r9
 80022ec:	4631      	mov	r1, r6
 80022ee:	4628      	mov	r0, r5
 80022f0:	47b8      	blx	r7
 80022f2:	3001      	adds	r0, #1
 80022f4:	f43f af27 	beq.w	8002146 <_printf_float+0xbe>
 80022f8:	f108 0801 	add.w	r8, r8, #1
 80022fc:	e7e6      	b.n	80022cc <_printf_float+0x244>
 80022fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002300:	2b00      	cmp	r3, #0
 8002302:	dc39      	bgt.n	8002378 <_printf_float+0x2f0>
 8002304:	4a1b      	ldr	r2, [pc, #108]	; (8002374 <_printf_float+0x2ec>)
 8002306:	2301      	movs	r3, #1
 8002308:	4631      	mov	r1, r6
 800230a:	4628      	mov	r0, r5
 800230c:	47b8      	blx	r7
 800230e:	3001      	adds	r0, #1
 8002310:	f43f af19 	beq.w	8002146 <_printf_float+0xbe>
 8002314:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002318:	4313      	orrs	r3, r2
 800231a:	d102      	bne.n	8002322 <_printf_float+0x29a>
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	07d9      	lsls	r1, r3, #31
 8002320:	d5d8      	bpl.n	80022d4 <_printf_float+0x24c>
 8002322:	ee18 3a10 	vmov	r3, s16
 8002326:	4652      	mov	r2, sl
 8002328:	4631      	mov	r1, r6
 800232a:	4628      	mov	r0, r5
 800232c:	47b8      	blx	r7
 800232e:	3001      	adds	r0, #1
 8002330:	f43f af09 	beq.w	8002146 <_printf_float+0xbe>
 8002334:	f04f 0900 	mov.w	r9, #0
 8002338:	f104 0a1a 	add.w	sl, r4, #26
 800233c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800233e:	425b      	negs	r3, r3
 8002340:	454b      	cmp	r3, r9
 8002342:	dc01      	bgt.n	8002348 <_printf_float+0x2c0>
 8002344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002346:	e792      	b.n	800226e <_printf_float+0x1e6>
 8002348:	2301      	movs	r3, #1
 800234a:	4652      	mov	r2, sl
 800234c:	4631      	mov	r1, r6
 800234e:	4628      	mov	r0, r5
 8002350:	47b8      	blx	r7
 8002352:	3001      	adds	r0, #1
 8002354:	f43f aef7 	beq.w	8002146 <_printf_float+0xbe>
 8002358:	f109 0901 	add.w	r9, r9, #1
 800235c:	e7ee      	b.n	800233c <_printf_float+0x2b4>
 800235e:	bf00      	nop
 8002360:	7fefffff 	.word	0x7fefffff
 8002364:	08004939 	.word	0x08004939
 8002368:	0800493d 	.word	0x0800493d
 800236c:	08004941 	.word	0x08004941
 8002370:	08004945 	.word	0x08004945
 8002374:	08004949 	.word	0x08004949
 8002378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800237a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800237c:	429a      	cmp	r2, r3
 800237e:	bfa8      	it	ge
 8002380:	461a      	movge	r2, r3
 8002382:	2a00      	cmp	r2, #0
 8002384:	4691      	mov	r9, r2
 8002386:	dc37      	bgt.n	80023f8 <_printf_float+0x370>
 8002388:	f04f 0b00 	mov.w	fp, #0
 800238c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002390:	f104 021a 	add.w	r2, r4, #26
 8002394:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002396:	9305      	str	r3, [sp, #20]
 8002398:	eba3 0309 	sub.w	r3, r3, r9
 800239c:	455b      	cmp	r3, fp
 800239e:	dc33      	bgt.n	8002408 <_printf_float+0x380>
 80023a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80023a4:	429a      	cmp	r2, r3
 80023a6:	db3b      	blt.n	8002420 <_printf_float+0x398>
 80023a8:	6823      	ldr	r3, [r4, #0]
 80023aa:	07da      	lsls	r2, r3, #31
 80023ac:	d438      	bmi.n	8002420 <_printf_float+0x398>
 80023ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80023b2:	eba2 0903 	sub.w	r9, r2, r3
 80023b6:	9b05      	ldr	r3, [sp, #20]
 80023b8:	1ad2      	subs	r2, r2, r3
 80023ba:	4591      	cmp	r9, r2
 80023bc:	bfa8      	it	ge
 80023be:	4691      	movge	r9, r2
 80023c0:	f1b9 0f00 	cmp.w	r9, #0
 80023c4:	dc35      	bgt.n	8002432 <_printf_float+0x3aa>
 80023c6:	f04f 0800 	mov.w	r8, #0
 80023ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80023ce:	f104 0a1a 	add.w	sl, r4, #26
 80023d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80023d6:	1a9b      	subs	r3, r3, r2
 80023d8:	eba3 0309 	sub.w	r3, r3, r9
 80023dc:	4543      	cmp	r3, r8
 80023de:	f77f af79 	ble.w	80022d4 <_printf_float+0x24c>
 80023e2:	2301      	movs	r3, #1
 80023e4:	4652      	mov	r2, sl
 80023e6:	4631      	mov	r1, r6
 80023e8:	4628      	mov	r0, r5
 80023ea:	47b8      	blx	r7
 80023ec:	3001      	adds	r0, #1
 80023ee:	f43f aeaa 	beq.w	8002146 <_printf_float+0xbe>
 80023f2:	f108 0801 	add.w	r8, r8, #1
 80023f6:	e7ec      	b.n	80023d2 <_printf_float+0x34a>
 80023f8:	4613      	mov	r3, r2
 80023fa:	4631      	mov	r1, r6
 80023fc:	4642      	mov	r2, r8
 80023fe:	4628      	mov	r0, r5
 8002400:	47b8      	blx	r7
 8002402:	3001      	adds	r0, #1
 8002404:	d1c0      	bne.n	8002388 <_printf_float+0x300>
 8002406:	e69e      	b.n	8002146 <_printf_float+0xbe>
 8002408:	2301      	movs	r3, #1
 800240a:	4631      	mov	r1, r6
 800240c:	4628      	mov	r0, r5
 800240e:	9205      	str	r2, [sp, #20]
 8002410:	47b8      	blx	r7
 8002412:	3001      	adds	r0, #1
 8002414:	f43f ae97 	beq.w	8002146 <_printf_float+0xbe>
 8002418:	9a05      	ldr	r2, [sp, #20]
 800241a:	f10b 0b01 	add.w	fp, fp, #1
 800241e:	e7b9      	b.n	8002394 <_printf_float+0x30c>
 8002420:	ee18 3a10 	vmov	r3, s16
 8002424:	4652      	mov	r2, sl
 8002426:	4631      	mov	r1, r6
 8002428:	4628      	mov	r0, r5
 800242a:	47b8      	blx	r7
 800242c:	3001      	adds	r0, #1
 800242e:	d1be      	bne.n	80023ae <_printf_float+0x326>
 8002430:	e689      	b.n	8002146 <_printf_float+0xbe>
 8002432:	9a05      	ldr	r2, [sp, #20]
 8002434:	464b      	mov	r3, r9
 8002436:	4442      	add	r2, r8
 8002438:	4631      	mov	r1, r6
 800243a:	4628      	mov	r0, r5
 800243c:	47b8      	blx	r7
 800243e:	3001      	adds	r0, #1
 8002440:	d1c1      	bne.n	80023c6 <_printf_float+0x33e>
 8002442:	e680      	b.n	8002146 <_printf_float+0xbe>
 8002444:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002446:	2a01      	cmp	r2, #1
 8002448:	dc01      	bgt.n	800244e <_printf_float+0x3c6>
 800244a:	07db      	lsls	r3, r3, #31
 800244c:	d53a      	bpl.n	80024c4 <_printf_float+0x43c>
 800244e:	2301      	movs	r3, #1
 8002450:	4642      	mov	r2, r8
 8002452:	4631      	mov	r1, r6
 8002454:	4628      	mov	r0, r5
 8002456:	47b8      	blx	r7
 8002458:	3001      	adds	r0, #1
 800245a:	f43f ae74 	beq.w	8002146 <_printf_float+0xbe>
 800245e:	ee18 3a10 	vmov	r3, s16
 8002462:	4652      	mov	r2, sl
 8002464:	4631      	mov	r1, r6
 8002466:	4628      	mov	r0, r5
 8002468:	47b8      	blx	r7
 800246a:	3001      	adds	r0, #1
 800246c:	f43f ae6b 	beq.w	8002146 <_printf_float+0xbe>
 8002470:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002474:	2200      	movs	r2, #0
 8002476:	2300      	movs	r3, #0
 8002478:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800247c:	f7fe fb2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8002480:	b9d8      	cbnz	r0, 80024ba <_printf_float+0x432>
 8002482:	f10a 33ff 	add.w	r3, sl, #4294967295
 8002486:	f108 0201 	add.w	r2, r8, #1
 800248a:	4631      	mov	r1, r6
 800248c:	4628      	mov	r0, r5
 800248e:	47b8      	blx	r7
 8002490:	3001      	adds	r0, #1
 8002492:	d10e      	bne.n	80024b2 <_printf_float+0x42a>
 8002494:	e657      	b.n	8002146 <_printf_float+0xbe>
 8002496:	2301      	movs	r3, #1
 8002498:	4652      	mov	r2, sl
 800249a:	4631      	mov	r1, r6
 800249c:	4628      	mov	r0, r5
 800249e:	47b8      	blx	r7
 80024a0:	3001      	adds	r0, #1
 80024a2:	f43f ae50 	beq.w	8002146 <_printf_float+0xbe>
 80024a6:	f108 0801 	add.w	r8, r8, #1
 80024aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80024ac:	3b01      	subs	r3, #1
 80024ae:	4543      	cmp	r3, r8
 80024b0:	dcf1      	bgt.n	8002496 <_printf_float+0x40e>
 80024b2:	464b      	mov	r3, r9
 80024b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80024b8:	e6da      	b.n	8002270 <_printf_float+0x1e8>
 80024ba:	f04f 0800 	mov.w	r8, #0
 80024be:	f104 0a1a 	add.w	sl, r4, #26
 80024c2:	e7f2      	b.n	80024aa <_printf_float+0x422>
 80024c4:	2301      	movs	r3, #1
 80024c6:	4642      	mov	r2, r8
 80024c8:	e7df      	b.n	800248a <_printf_float+0x402>
 80024ca:	2301      	movs	r3, #1
 80024cc:	464a      	mov	r2, r9
 80024ce:	4631      	mov	r1, r6
 80024d0:	4628      	mov	r0, r5
 80024d2:	47b8      	blx	r7
 80024d4:	3001      	adds	r0, #1
 80024d6:	f43f ae36 	beq.w	8002146 <_printf_float+0xbe>
 80024da:	f108 0801 	add.w	r8, r8, #1
 80024de:	68e3      	ldr	r3, [r4, #12]
 80024e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80024e2:	1a5b      	subs	r3, r3, r1
 80024e4:	4543      	cmp	r3, r8
 80024e6:	dcf0      	bgt.n	80024ca <_printf_float+0x442>
 80024e8:	e6f8      	b.n	80022dc <_printf_float+0x254>
 80024ea:	f04f 0800 	mov.w	r8, #0
 80024ee:	f104 0919 	add.w	r9, r4, #25
 80024f2:	e7f4      	b.n	80024de <_printf_float+0x456>

080024f4 <_printf_common>:
 80024f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024f8:	4616      	mov	r6, r2
 80024fa:	4699      	mov	r9, r3
 80024fc:	688a      	ldr	r2, [r1, #8]
 80024fe:	690b      	ldr	r3, [r1, #16]
 8002500:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002504:	4293      	cmp	r3, r2
 8002506:	bfb8      	it	lt
 8002508:	4613      	movlt	r3, r2
 800250a:	6033      	str	r3, [r6, #0]
 800250c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002510:	4607      	mov	r7, r0
 8002512:	460c      	mov	r4, r1
 8002514:	b10a      	cbz	r2, 800251a <_printf_common+0x26>
 8002516:	3301      	adds	r3, #1
 8002518:	6033      	str	r3, [r6, #0]
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	0699      	lsls	r1, r3, #26
 800251e:	bf42      	ittt	mi
 8002520:	6833      	ldrmi	r3, [r6, #0]
 8002522:	3302      	addmi	r3, #2
 8002524:	6033      	strmi	r3, [r6, #0]
 8002526:	6825      	ldr	r5, [r4, #0]
 8002528:	f015 0506 	ands.w	r5, r5, #6
 800252c:	d106      	bne.n	800253c <_printf_common+0x48>
 800252e:	f104 0a19 	add.w	sl, r4, #25
 8002532:	68e3      	ldr	r3, [r4, #12]
 8002534:	6832      	ldr	r2, [r6, #0]
 8002536:	1a9b      	subs	r3, r3, r2
 8002538:	42ab      	cmp	r3, r5
 800253a:	dc26      	bgt.n	800258a <_printf_common+0x96>
 800253c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002540:	1e13      	subs	r3, r2, #0
 8002542:	6822      	ldr	r2, [r4, #0]
 8002544:	bf18      	it	ne
 8002546:	2301      	movne	r3, #1
 8002548:	0692      	lsls	r2, r2, #26
 800254a:	d42b      	bmi.n	80025a4 <_printf_common+0xb0>
 800254c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002550:	4649      	mov	r1, r9
 8002552:	4638      	mov	r0, r7
 8002554:	47c0      	blx	r8
 8002556:	3001      	adds	r0, #1
 8002558:	d01e      	beq.n	8002598 <_printf_common+0xa4>
 800255a:	6823      	ldr	r3, [r4, #0]
 800255c:	6922      	ldr	r2, [r4, #16]
 800255e:	f003 0306 	and.w	r3, r3, #6
 8002562:	2b04      	cmp	r3, #4
 8002564:	bf02      	ittt	eq
 8002566:	68e5      	ldreq	r5, [r4, #12]
 8002568:	6833      	ldreq	r3, [r6, #0]
 800256a:	1aed      	subeq	r5, r5, r3
 800256c:	68a3      	ldr	r3, [r4, #8]
 800256e:	bf0c      	ite	eq
 8002570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002574:	2500      	movne	r5, #0
 8002576:	4293      	cmp	r3, r2
 8002578:	bfc4      	itt	gt
 800257a:	1a9b      	subgt	r3, r3, r2
 800257c:	18ed      	addgt	r5, r5, r3
 800257e:	2600      	movs	r6, #0
 8002580:	341a      	adds	r4, #26
 8002582:	42b5      	cmp	r5, r6
 8002584:	d11a      	bne.n	80025bc <_printf_common+0xc8>
 8002586:	2000      	movs	r0, #0
 8002588:	e008      	b.n	800259c <_printf_common+0xa8>
 800258a:	2301      	movs	r3, #1
 800258c:	4652      	mov	r2, sl
 800258e:	4649      	mov	r1, r9
 8002590:	4638      	mov	r0, r7
 8002592:	47c0      	blx	r8
 8002594:	3001      	adds	r0, #1
 8002596:	d103      	bne.n	80025a0 <_printf_common+0xac>
 8002598:	f04f 30ff 	mov.w	r0, #4294967295
 800259c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80025a0:	3501      	adds	r5, #1
 80025a2:	e7c6      	b.n	8002532 <_printf_common+0x3e>
 80025a4:	18e1      	adds	r1, r4, r3
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	2030      	movs	r0, #48	; 0x30
 80025aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80025ae:	4422      	add	r2, r4
 80025b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80025b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80025b8:	3302      	adds	r3, #2
 80025ba:	e7c7      	b.n	800254c <_printf_common+0x58>
 80025bc:	2301      	movs	r3, #1
 80025be:	4622      	mov	r2, r4
 80025c0:	4649      	mov	r1, r9
 80025c2:	4638      	mov	r0, r7
 80025c4:	47c0      	blx	r8
 80025c6:	3001      	adds	r0, #1
 80025c8:	d0e6      	beq.n	8002598 <_printf_common+0xa4>
 80025ca:	3601      	adds	r6, #1
 80025cc:	e7d9      	b.n	8002582 <_printf_common+0x8e>
	...

080025d0 <_printf_i>:
 80025d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80025d4:	7e0f      	ldrb	r7, [r1, #24]
 80025d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80025d8:	2f78      	cmp	r7, #120	; 0x78
 80025da:	4691      	mov	r9, r2
 80025dc:	4680      	mov	r8, r0
 80025de:	460c      	mov	r4, r1
 80025e0:	469a      	mov	sl, r3
 80025e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80025e6:	d807      	bhi.n	80025f8 <_printf_i+0x28>
 80025e8:	2f62      	cmp	r7, #98	; 0x62
 80025ea:	d80a      	bhi.n	8002602 <_printf_i+0x32>
 80025ec:	2f00      	cmp	r7, #0
 80025ee:	f000 80d4 	beq.w	800279a <_printf_i+0x1ca>
 80025f2:	2f58      	cmp	r7, #88	; 0x58
 80025f4:	f000 80c0 	beq.w	8002778 <_printf_i+0x1a8>
 80025f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80025fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002600:	e03a      	b.n	8002678 <_printf_i+0xa8>
 8002602:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002606:	2b15      	cmp	r3, #21
 8002608:	d8f6      	bhi.n	80025f8 <_printf_i+0x28>
 800260a:	a101      	add	r1, pc, #4	; (adr r1, 8002610 <_printf_i+0x40>)
 800260c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002610:	08002669 	.word	0x08002669
 8002614:	0800267d 	.word	0x0800267d
 8002618:	080025f9 	.word	0x080025f9
 800261c:	080025f9 	.word	0x080025f9
 8002620:	080025f9 	.word	0x080025f9
 8002624:	080025f9 	.word	0x080025f9
 8002628:	0800267d 	.word	0x0800267d
 800262c:	080025f9 	.word	0x080025f9
 8002630:	080025f9 	.word	0x080025f9
 8002634:	080025f9 	.word	0x080025f9
 8002638:	080025f9 	.word	0x080025f9
 800263c:	08002781 	.word	0x08002781
 8002640:	080026a9 	.word	0x080026a9
 8002644:	0800273b 	.word	0x0800273b
 8002648:	080025f9 	.word	0x080025f9
 800264c:	080025f9 	.word	0x080025f9
 8002650:	080027a3 	.word	0x080027a3
 8002654:	080025f9 	.word	0x080025f9
 8002658:	080026a9 	.word	0x080026a9
 800265c:	080025f9 	.word	0x080025f9
 8002660:	080025f9 	.word	0x080025f9
 8002664:	08002743 	.word	0x08002743
 8002668:	682b      	ldr	r3, [r5, #0]
 800266a:	1d1a      	adds	r2, r3, #4
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	602a      	str	r2, [r5, #0]
 8002670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002674:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002678:	2301      	movs	r3, #1
 800267a:	e09f      	b.n	80027bc <_printf_i+0x1ec>
 800267c:	6820      	ldr	r0, [r4, #0]
 800267e:	682b      	ldr	r3, [r5, #0]
 8002680:	0607      	lsls	r7, r0, #24
 8002682:	f103 0104 	add.w	r1, r3, #4
 8002686:	6029      	str	r1, [r5, #0]
 8002688:	d501      	bpl.n	800268e <_printf_i+0xbe>
 800268a:	681e      	ldr	r6, [r3, #0]
 800268c:	e003      	b.n	8002696 <_printf_i+0xc6>
 800268e:	0646      	lsls	r6, r0, #25
 8002690:	d5fb      	bpl.n	800268a <_printf_i+0xba>
 8002692:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002696:	2e00      	cmp	r6, #0
 8002698:	da03      	bge.n	80026a2 <_printf_i+0xd2>
 800269a:	232d      	movs	r3, #45	; 0x2d
 800269c:	4276      	negs	r6, r6
 800269e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026a2:	485a      	ldr	r0, [pc, #360]	; (800280c <_printf_i+0x23c>)
 80026a4:	230a      	movs	r3, #10
 80026a6:	e012      	b.n	80026ce <_printf_i+0xfe>
 80026a8:	682b      	ldr	r3, [r5, #0]
 80026aa:	6820      	ldr	r0, [r4, #0]
 80026ac:	1d19      	adds	r1, r3, #4
 80026ae:	6029      	str	r1, [r5, #0]
 80026b0:	0605      	lsls	r5, r0, #24
 80026b2:	d501      	bpl.n	80026b8 <_printf_i+0xe8>
 80026b4:	681e      	ldr	r6, [r3, #0]
 80026b6:	e002      	b.n	80026be <_printf_i+0xee>
 80026b8:	0641      	lsls	r1, r0, #25
 80026ba:	d5fb      	bpl.n	80026b4 <_printf_i+0xe4>
 80026bc:	881e      	ldrh	r6, [r3, #0]
 80026be:	4853      	ldr	r0, [pc, #332]	; (800280c <_printf_i+0x23c>)
 80026c0:	2f6f      	cmp	r7, #111	; 0x6f
 80026c2:	bf0c      	ite	eq
 80026c4:	2308      	moveq	r3, #8
 80026c6:	230a      	movne	r3, #10
 80026c8:	2100      	movs	r1, #0
 80026ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80026ce:	6865      	ldr	r5, [r4, #4]
 80026d0:	60a5      	str	r5, [r4, #8]
 80026d2:	2d00      	cmp	r5, #0
 80026d4:	bfa2      	ittt	ge
 80026d6:	6821      	ldrge	r1, [r4, #0]
 80026d8:	f021 0104 	bicge.w	r1, r1, #4
 80026dc:	6021      	strge	r1, [r4, #0]
 80026de:	b90e      	cbnz	r6, 80026e4 <_printf_i+0x114>
 80026e0:	2d00      	cmp	r5, #0
 80026e2:	d04b      	beq.n	800277c <_printf_i+0x1ac>
 80026e4:	4615      	mov	r5, r2
 80026e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80026ea:	fb03 6711 	mls	r7, r3, r1, r6
 80026ee:	5dc7      	ldrb	r7, [r0, r7]
 80026f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80026f4:	4637      	mov	r7, r6
 80026f6:	42bb      	cmp	r3, r7
 80026f8:	460e      	mov	r6, r1
 80026fa:	d9f4      	bls.n	80026e6 <_printf_i+0x116>
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d10b      	bne.n	8002718 <_printf_i+0x148>
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	07de      	lsls	r6, r3, #31
 8002704:	d508      	bpl.n	8002718 <_printf_i+0x148>
 8002706:	6923      	ldr	r3, [r4, #16]
 8002708:	6861      	ldr	r1, [r4, #4]
 800270a:	4299      	cmp	r1, r3
 800270c:	bfde      	ittt	le
 800270e:	2330      	movle	r3, #48	; 0x30
 8002710:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002714:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002718:	1b52      	subs	r2, r2, r5
 800271a:	6122      	str	r2, [r4, #16]
 800271c:	f8cd a000 	str.w	sl, [sp]
 8002720:	464b      	mov	r3, r9
 8002722:	aa03      	add	r2, sp, #12
 8002724:	4621      	mov	r1, r4
 8002726:	4640      	mov	r0, r8
 8002728:	f7ff fee4 	bl	80024f4 <_printf_common>
 800272c:	3001      	adds	r0, #1
 800272e:	d14a      	bne.n	80027c6 <_printf_i+0x1f6>
 8002730:	f04f 30ff 	mov.w	r0, #4294967295
 8002734:	b004      	add	sp, #16
 8002736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	f043 0320 	orr.w	r3, r3, #32
 8002740:	6023      	str	r3, [r4, #0]
 8002742:	4833      	ldr	r0, [pc, #204]	; (8002810 <_printf_i+0x240>)
 8002744:	2778      	movs	r7, #120	; 0x78
 8002746:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800274a:	6823      	ldr	r3, [r4, #0]
 800274c:	6829      	ldr	r1, [r5, #0]
 800274e:	061f      	lsls	r7, r3, #24
 8002750:	f851 6b04 	ldr.w	r6, [r1], #4
 8002754:	d402      	bmi.n	800275c <_printf_i+0x18c>
 8002756:	065f      	lsls	r7, r3, #25
 8002758:	bf48      	it	mi
 800275a:	b2b6      	uxthmi	r6, r6
 800275c:	07df      	lsls	r7, r3, #31
 800275e:	bf48      	it	mi
 8002760:	f043 0320 	orrmi.w	r3, r3, #32
 8002764:	6029      	str	r1, [r5, #0]
 8002766:	bf48      	it	mi
 8002768:	6023      	strmi	r3, [r4, #0]
 800276a:	b91e      	cbnz	r6, 8002774 <_printf_i+0x1a4>
 800276c:	6823      	ldr	r3, [r4, #0]
 800276e:	f023 0320 	bic.w	r3, r3, #32
 8002772:	6023      	str	r3, [r4, #0]
 8002774:	2310      	movs	r3, #16
 8002776:	e7a7      	b.n	80026c8 <_printf_i+0xf8>
 8002778:	4824      	ldr	r0, [pc, #144]	; (800280c <_printf_i+0x23c>)
 800277a:	e7e4      	b.n	8002746 <_printf_i+0x176>
 800277c:	4615      	mov	r5, r2
 800277e:	e7bd      	b.n	80026fc <_printf_i+0x12c>
 8002780:	682b      	ldr	r3, [r5, #0]
 8002782:	6826      	ldr	r6, [r4, #0]
 8002784:	6961      	ldr	r1, [r4, #20]
 8002786:	1d18      	adds	r0, r3, #4
 8002788:	6028      	str	r0, [r5, #0]
 800278a:	0635      	lsls	r5, r6, #24
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	d501      	bpl.n	8002794 <_printf_i+0x1c4>
 8002790:	6019      	str	r1, [r3, #0]
 8002792:	e002      	b.n	800279a <_printf_i+0x1ca>
 8002794:	0670      	lsls	r0, r6, #25
 8002796:	d5fb      	bpl.n	8002790 <_printf_i+0x1c0>
 8002798:	8019      	strh	r1, [r3, #0]
 800279a:	2300      	movs	r3, #0
 800279c:	6123      	str	r3, [r4, #16]
 800279e:	4615      	mov	r5, r2
 80027a0:	e7bc      	b.n	800271c <_printf_i+0x14c>
 80027a2:	682b      	ldr	r3, [r5, #0]
 80027a4:	1d1a      	adds	r2, r3, #4
 80027a6:	602a      	str	r2, [r5, #0]
 80027a8:	681d      	ldr	r5, [r3, #0]
 80027aa:	6862      	ldr	r2, [r4, #4]
 80027ac:	2100      	movs	r1, #0
 80027ae:	4628      	mov	r0, r5
 80027b0:	f7fd fd16 	bl	80001e0 <memchr>
 80027b4:	b108      	cbz	r0, 80027ba <_printf_i+0x1ea>
 80027b6:	1b40      	subs	r0, r0, r5
 80027b8:	6060      	str	r0, [r4, #4]
 80027ba:	6863      	ldr	r3, [r4, #4]
 80027bc:	6123      	str	r3, [r4, #16]
 80027be:	2300      	movs	r3, #0
 80027c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027c4:	e7aa      	b.n	800271c <_printf_i+0x14c>
 80027c6:	6923      	ldr	r3, [r4, #16]
 80027c8:	462a      	mov	r2, r5
 80027ca:	4649      	mov	r1, r9
 80027cc:	4640      	mov	r0, r8
 80027ce:	47d0      	blx	sl
 80027d0:	3001      	adds	r0, #1
 80027d2:	d0ad      	beq.n	8002730 <_printf_i+0x160>
 80027d4:	6823      	ldr	r3, [r4, #0]
 80027d6:	079b      	lsls	r3, r3, #30
 80027d8:	d413      	bmi.n	8002802 <_printf_i+0x232>
 80027da:	68e0      	ldr	r0, [r4, #12]
 80027dc:	9b03      	ldr	r3, [sp, #12]
 80027de:	4298      	cmp	r0, r3
 80027e0:	bfb8      	it	lt
 80027e2:	4618      	movlt	r0, r3
 80027e4:	e7a6      	b.n	8002734 <_printf_i+0x164>
 80027e6:	2301      	movs	r3, #1
 80027e8:	4632      	mov	r2, r6
 80027ea:	4649      	mov	r1, r9
 80027ec:	4640      	mov	r0, r8
 80027ee:	47d0      	blx	sl
 80027f0:	3001      	adds	r0, #1
 80027f2:	d09d      	beq.n	8002730 <_printf_i+0x160>
 80027f4:	3501      	adds	r5, #1
 80027f6:	68e3      	ldr	r3, [r4, #12]
 80027f8:	9903      	ldr	r1, [sp, #12]
 80027fa:	1a5b      	subs	r3, r3, r1
 80027fc:	42ab      	cmp	r3, r5
 80027fe:	dcf2      	bgt.n	80027e6 <_printf_i+0x216>
 8002800:	e7eb      	b.n	80027da <_printf_i+0x20a>
 8002802:	2500      	movs	r5, #0
 8002804:	f104 0619 	add.w	r6, r4, #25
 8002808:	e7f5      	b.n	80027f6 <_printf_i+0x226>
 800280a:	bf00      	nop
 800280c:	0800494b 	.word	0x0800494b
 8002810:	0800495c 	.word	0x0800495c

08002814 <__sflush_r>:
 8002814:	898a      	ldrh	r2, [r1, #12]
 8002816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800281a:	4605      	mov	r5, r0
 800281c:	0710      	lsls	r0, r2, #28
 800281e:	460c      	mov	r4, r1
 8002820:	d458      	bmi.n	80028d4 <__sflush_r+0xc0>
 8002822:	684b      	ldr	r3, [r1, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	dc05      	bgt.n	8002834 <__sflush_r+0x20>
 8002828:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800282a:	2b00      	cmp	r3, #0
 800282c:	dc02      	bgt.n	8002834 <__sflush_r+0x20>
 800282e:	2000      	movs	r0, #0
 8002830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002834:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002836:	2e00      	cmp	r6, #0
 8002838:	d0f9      	beq.n	800282e <__sflush_r+0x1a>
 800283a:	2300      	movs	r3, #0
 800283c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002840:	682f      	ldr	r7, [r5, #0]
 8002842:	6a21      	ldr	r1, [r4, #32]
 8002844:	602b      	str	r3, [r5, #0]
 8002846:	d032      	beq.n	80028ae <__sflush_r+0x9a>
 8002848:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800284a:	89a3      	ldrh	r3, [r4, #12]
 800284c:	075a      	lsls	r2, r3, #29
 800284e:	d505      	bpl.n	800285c <__sflush_r+0x48>
 8002850:	6863      	ldr	r3, [r4, #4]
 8002852:	1ac0      	subs	r0, r0, r3
 8002854:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002856:	b10b      	cbz	r3, 800285c <__sflush_r+0x48>
 8002858:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800285a:	1ac0      	subs	r0, r0, r3
 800285c:	2300      	movs	r3, #0
 800285e:	4602      	mov	r2, r0
 8002860:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002862:	6a21      	ldr	r1, [r4, #32]
 8002864:	4628      	mov	r0, r5
 8002866:	47b0      	blx	r6
 8002868:	1c43      	adds	r3, r0, #1
 800286a:	89a3      	ldrh	r3, [r4, #12]
 800286c:	d106      	bne.n	800287c <__sflush_r+0x68>
 800286e:	6829      	ldr	r1, [r5, #0]
 8002870:	291d      	cmp	r1, #29
 8002872:	d82b      	bhi.n	80028cc <__sflush_r+0xb8>
 8002874:	4a29      	ldr	r2, [pc, #164]	; (800291c <__sflush_r+0x108>)
 8002876:	410a      	asrs	r2, r1
 8002878:	07d6      	lsls	r6, r2, #31
 800287a:	d427      	bmi.n	80028cc <__sflush_r+0xb8>
 800287c:	2200      	movs	r2, #0
 800287e:	6062      	str	r2, [r4, #4]
 8002880:	04d9      	lsls	r1, r3, #19
 8002882:	6922      	ldr	r2, [r4, #16]
 8002884:	6022      	str	r2, [r4, #0]
 8002886:	d504      	bpl.n	8002892 <__sflush_r+0x7e>
 8002888:	1c42      	adds	r2, r0, #1
 800288a:	d101      	bne.n	8002890 <__sflush_r+0x7c>
 800288c:	682b      	ldr	r3, [r5, #0]
 800288e:	b903      	cbnz	r3, 8002892 <__sflush_r+0x7e>
 8002890:	6560      	str	r0, [r4, #84]	; 0x54
 8002892:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002894:	602f      	str	r7, [r5, #0]
 8002896:	2900      	cmp	r1, #0
 8002898:	d0c9      	beq.n	800282e <__sflush_r+0x1a>
 800289a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800289e:	4299      	cmp	r1, r3
 80028a0:	d002      	beq.n	80028a8 <__sflush_r+0x94>
 80028a2:	4628      	mov	r0, r5
 80028a4:	f001 f91e 	bl	8003ae4 <_free_r>
 80028a8:	2000      	movs	r0, #0
 80028aa:	6360      	str	r0, [r4, #52]	; 0x34
 80028ac:	e7c0      	b.n	8002830 <__sflush_r+0x1c>
 80028ae:	2301      	movs	r3, #1
 80028b0:	4628      	mov	r0, r5
 80028b2:	47b0      	blx	r6
 80028b4:	1c41      	adds	r1, r0, #1
 80028b6:	d1c8      	bne.n	800284a <__sflush_r+0x36>
 80028b8:	682b      	ldr	r3, [r5, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0c5      	beq.n	800284a <__sflush_r+0x36>
 80028be:	2b1d      	cmp	r3, #29
 80028c0:	d001      	beq.n	80028c6 <__sflush_r+0xb2>
 80028c2:	2b16      	cmp	r3, #22
 80028c4:	d101      	bne.n	80028ca <__sflush_r+0xb6>
 80028c6:	602f      	str	r7, [r5, #0]
 80028c8:	e7b1      	b.n	800282e <__sflush_r+0x1a>
 80028ca:	89a3      	ldrh	r3, [r4, #12]
 80028cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028d0:	81a3      	strh	r3, [r4, #12]
 80028d2:	e7ad      	b.n	8002830 <__sflush_r+0x1c>
 80028d4:	690f      	ldr	r7, [r1, #16]
 80028d6:	2f00      	cmp	r7, #0
 80028d8:	d0a9      	beq.n	800282e <__sflush_r+0x1a>
 80028da:	0793      	lsls	r3, r2, #30
 80028dc:	680e      	ldr	r6, [r1, #0]
 80028de:	bf08      	it	eq
 80028e0:	694b      	ldreq	r3, [r1, #20]
 80028e2:	600f      	str	r7, [r1, #0]
 80028e4:	bf18      	it	ne
 80028e6:	2300      	movne	r3, #0
 80028e8:	eba6 0807 	sub.w	r8, r6, r7
 80028ec:	608b      	str	r3, [r1, #8]
 80028ee:	f1b8 0f00 	cmp.w	r8, #0
 80028f2:	dd9c      	ble.n	800282e <__sflush_r+0x1a>
 80028f4:	6a21      	ldr	r1, [r4, #32]
 80028f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80028f8:	4643      	mov	r3, r8
 80028fa:	463a      	mov	r2, r7
 80028fc:	4628      	mov	r0, r5
 80028fe:	47b0      	blx	r6
 8002900:	2800      	cmp	r0, #0
 8002902:	dc06      	bgt.n	8002912 <__sflush_r+0xfe>
 8002904:	89a3      	ldrh	r3, [r4, #12]
 8002906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800290a:	81a3      	strh	r3, [r4, #12]
 800290c:	f04f 30ff 	mov.w	r0, #4294967295
 8002910:	e78e      	b.n	8002830 <__sflush_r+0x1c>
 8002912:	4407      	add	r7, r0
 8002914:	eba8 0800 	sub.w	r8, r8, r0
 8002918:	e7e9      	b.n	80028ee <__sflush_r+0xda>
 800291a:	bf00      	nop
 800291c:	dfbffffe 	.word	0xdfbffffe

08002920 <_fflush_r>:
 8002920:	b538      	push	{r3, r4, r5, lr}
 8002922:	690b      	ldr	r3, [r1, #16]
 8002924:	4605      	mov	r5, r0
 8002926:	460c      	mov	r4, r1
 8002928:	b913      	cbnz	r3, 8002930 <_fflush_r+0x10>
 800292a:	2500      	movs	r5, #0
 800292c:	4628      	mov	r0, r5
 800292e:	bd38      	pop	{r3, r4, r5, pc}
 8002930:	b118      	cbz	r0, 800293a <_fflush_r+0x1a>
 8002932:	6a03      	ldr	r3, [r0, #32]
 8002934:	b90b      	cbnz	r3, 800293a <_fflush_r+0x1a>
 8002936:	f000 f8a7 	bl	8002a88 <__sinit>
 800293a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0f3      	beq.n	800292a <_fflush_r+0xa>
 8002942:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002944:	07d0      	lsls	r0, r2, #31
 8002946:	d404      	bmi.n	8002952 <_fflush_r+0x32>
 8002948:	0599      	lsls	r1, r3, #22
 800294a:	d402      	bmi.n	8002952 <_fflush_r+0x32>
 800294c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800294e:	f000 fa4a 	bl	8002de6 <__retarget_lock_acquire_recursive>
 8002952:	4628      	mov	r0, r5
 8002954:	4621      	mov	r1, r4
 8002956:	f7ff ff5d 	bl	8002814 <__sflush_r>
 800295a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800295c:	07da      	lsls	r2, r3, #31
 800295e:	4605      	mov	r5, r0
 8002960:	d4e4      	bmi.n	800292c <_fflush_r+0xc>
 8002962:	89a3      	ldrh	r3, [r4, #12]
 8002964:	059b      	lsls	r3, r3, #22
 8002966:	d4e1      	bmi.n	800292c <_fflush_r+0xc>
 8002968:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800296a:	f000 fa3d 	bl	8002de8 <__retarget_lock_release_recursive>
 800296e:	e7dd      	b.n	800292c <_fflush_r+0xc>

08002970 <std>:
 8002970:	2300      	movs	r3, #0
 8002972:	b510      	push	{r4, lr}
 8002974:	4604      	mov	r4, r0
 8002976:	e9c0 3300 	strd	r3, r3, [r0]
 800297a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800297e:	6083      	str	r3, [r0, #8]
 8002980:	8181      	strh	r1, [r0, #12]
 8002982:	6643      	str	r3, [r0, #100]	; 0x64
 8002984:	81c2      	strh	r2, [r0, #14]
 8002986:	6183      	str	r3, [r0, #24]
 8002988:	4619      	mov	r1, r3
 800298a:	2208      	movs	r2, #8
 800298c:	305c      	adds	r0, #92	; 0x5c
 800298e:	f000 f9ad 	bl	8002cec <memset>
 8002992:	4b0d      	ldr	r3, [pc, #52]	; (80029c8 <std+0x58>)
 8002994:	6263      	str	r3, [r4, #36]	; 0x24
 8002996:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <std+0x5c>)
 8002998:	62a3      	str	r3, [r4, #40]	; 0x28
 800299a:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <std+0x60>)
 800299c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800299e:	4b0d      	ldr	r3, [pc, #52]	; (80029d4 <std+0x64>)
 80029a0:	6323      	str	r3, [r4, #48]	; 0x30
 80029a2:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <std+0x68>)
 80029a4:	6224      	str	r4, [r4, #32]
 80029a6:	429c      	cmp	r4, r3
 80029a8:	d006      	beq.n	80029b8 <std+0x48>
 80029aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80029ae:	4294      	cmp	r4, r2
 80029b0:	d002      	beq.n	80029b8 <std+0x48>
 80029b2:	33d0      	adds	r3, #208	; 0xd0
 80029b4:	429c      	cmp	r4, r3
 80029b6:	d105      	bne.n	80029c4 <std+0x54>
 80029b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80029bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029c0:	f000 ba10 	b.w	8002de4 <__retarget_lock_init_recursive>
 80029c4:	bd10      	pop	{r4, pc}
 80029c6:	bf00      	nop
 80029c8:	08002b3d 	.word	0x08002b3d
 80029cc:	08002b5f 	.word	0x08002b5f
 80029d0:	08002b97 	.word	0x08002b97
 80029d4:	08002bbb 	.word	0x08002bbb
 80029d8:	200001f0 	.word	0x200001f0

080029dc <stdio_exit_handler>:
 80029dc:	4a02      	ldr	r2, [pc, #8]	; (80029e8 <stdio_exit_handler+0xc>)
 80029de:	4903      	ldr	r1, [pc, #12]	; (80029ec <stdio_exit_handler+0x10>)
 80029e0:	4803      	ldr	r0, [pc, #12]	; (80029f0 <stdio_exit_handler+0x14>)
 80029e2:	f000 b87b 	b.w	8002adc <_fwalk_sglue>
 80029e6:	bf00      	nop
 80029e8:	20000004 	.word	0x20000004
 80029ec:	08002921 	.word	0x08002921
 80029f0:	20000010 	.word	0x20000010

080029f4 <cleanup_stdio>:
 80029f4:	6841      	ldr	r1, [r0, #4]
 80029f6:	4b0c      	ldr	r3, [pc, #48]	; (8002a28 <cleanup_stdio+0x34>)
 80029f8:	4299      	cmp	r1, r3
 80029fa:	b510      	push	{r4, lr}
 80029fc:	4604      	mov	r4, r0
 80029fe:	d001      	beq.n	8002a04 <cleanup_stdio+0x10>
 8002a00:	f7ff ff8e 	bl	8002920 <_fflush_r>
 8002a04:	68a1      	ldr	r1, [r4, #8]
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <cleanup_stdio+0x38>)
 8002a08:	4299      	cmp	r1, r3
 8002a0a:	d002      	beq.n	8002a12 <cleanup_stdio+0x1e>
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f7ff ff87 	bl	8002920 <_fflush_r>
 8002a12:	68e1      	ldr	r1, [r4, #12]
 8002a14:	4b06      	ldr	r3, [pc, #24]	; (8002a30 <cleanup_stdio+0x3c>)
 8002a16:	4299      	cmp	r1, r3
 8002a18:	d004      	beq.n	8002a24 <cleanup_stdio+0x30>
 8002a1a:	4620      	mov	r0, r4
 8002a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a20:	f7ff bf7e 	b.w	8002920 <_fflush_r>
 8002a24:	bd10      	pop	{r4, pc}
 8002a26:	bf00      	nop
 8002a28:	200001f0 	.word	0x200001f0
 8002a2c:	20000258 	.word	0x20000258
 8002a30:	200002c0 	.word	0x200002c0

08002a34 <global_stdio_init.part.0>:
 8002a34:	b510      	push	{r4, lr}
 8002a36:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <global_stdio_init.part.0+0x30>)
 8002a38:	4c0b      	ldr	r4, [pc, #44]	; (8002a68 <global_stdio_init.part.0+0x34>)
 8002a3a:	4a0c      	ldr	r2, [pc, #48]	; (8002a6c <global_stdio_init.part.0+0x38>)
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	4620      	mov	r0, r4
 8002a40:	2200      	movs	r2, #0
 8002a42:	2104      	movs	r1, #4
 8002a44:	f7ff ff94 	bl	8002970 <std>
 8002a48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	2109      	movs	r1, #9
 8002a50:	f7ff ff8e 	bl	8002970 <std>
 8002a54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002a58:	2202      	movs	r2, #2
 8002a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a5e:	2112      	movs	r1, #18
 8002a60:	f7ff bf86 	b.w	8002970 <std>
 8002a64:	20000328 	.word	0x20000328
 8002a68:	200001f0 	.word	0x200001f0
 8002a6c:	080029dd 	.word	0x080029dd

08002a70 <__sfp_lock_acquire>:
 8002a70:	4801      	ldr	r0, [pc, #4]	; (8002a78 <__sfp_lock_acquire+0x8>)
 8002a72:	f000 b9b8 	b.w	8002de6 <__retarget_lock_acquire_recursive>
 8002a76:	bf00      	nop
 8002a78:	20000331 	.word	0x20000331

08002a7c <__sfp_lock_release>:
 8002a7c:	4801      	ldr	r0, [pc, #4]	; (8002a84 <__sfp_lock_release+0x8>)
 8002a7e:	f000 b9b3 	b.w	8002de8 <__retarget_lock_release_recursive>
 8002a82:	bf00      	nop
 8002a84:	20000331 	.word	0x20000331

08002a88 <__sinit>:
 8002a88:	b510      	push	{r4, lr}
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	f7ff fff0 	bl	8002a70 <__sfp_lock_acquire>
 8002a90:	6a23      	ldr	r3, [r4, #32]
 8002a92:	b11b      	cbz	r3, 8002a9c <__sinit+0x14>
 8002a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a98:	f7ff bff0 	b.w	8002a7c <__sfp_lock_release>
 8002a9c:	4b04      	ldr	r3, [pc, #16]	; (8002ab0 <__sinit+0x28>)
 8002a9e:	6223      	str	r3, [r4, #32]
 8002aa0:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <__sinit+0x2c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f5      	bne.n	8002a94 <__sinit+0xc>
 8002aa8:	f7ff ffc4 	bl	8002a34 <global_stdio_init.part.0>
 8002aac:	e7f2      	b.n	8002a94 <__sinit+0xc>
 8002aae:	bf00      	nop
 8002ab0:	080029f5 	.word	0x080029f5
 8002ab4:	20000328 	.word	0x20000328

08002ab8 <fiprintf>:
 8002ab8:	b40e      	push	{r1, r2, r3}
 8002aba:	b503      	push	{r0, r1, lr}
 8002abc:	4601      	mov	r1, r0
 8002abe:	ab03      	add	r3, sp, #12
 8002ac0:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <fiprintf+0x20>)
 8002ac2:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ac6:	6800      	ldr	r0, [r0, #0]
 8002ac8:	9301      	str	r3, [sp, #4]
 8002aca:	f001 fcb1 	bl	8004430 <_vfiprintf_r>
 8002ace:	b002      	add	sp, #8
 8002ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ad4:	b003      	add	sp, #12
 8002ad6:	4770      	bx	lr
 8002ad8:	2000005c 	.word	0x2000005c

08002adc <_fwalk_sglue>:
 8002adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ae0:	4607      	mov	r7, r0
 8002ae2:	4688      	mov	r8, r1
 8002ae4:	4614      	mov	r4, r2
 8002ae6:	2600      	movs	r6, #0
 8002ae8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002aec:	f1b9 0901 	subs.w	r9, r9, #1
 8002af0:	d505      	bpl.n	8002afe <_fwalk_sglue+0x22>
 8002af2:	6824      	ldr	r4, [r4, #0]
 8002af4:	2c00      	cmp	r4, #0
 8002af6:	d1f7      	bne.n	8002ae8 <_fwalk_sglue+0xc>
 8002af8:	4630      	mov	r0, r6
 8002afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002afe:	89ab      	ldrh	r3, [r5, #12]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d907      	bls.n	8002b14 <_fwalk_sglue+0x38>
 8002b04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	d003      	beq.n	8002b14 <_fwalk_sglue+0x38>
 8002b0c:	4629      	mov	r1, r5
 8002b0e:	4638      	mov	r0, r7
 8002b10:	47c0      	blx	r8
 8002b12:	4306      	orrs	r6, r0
 8002b14:	3568      	adds	r5, #104	; 0x68
 8002b16:	e7e9      	b.n	8002aec <_fwalk_sglue+0x10>

08002b18 <iprintf>:
 8002b18:	b40f      	push	{r0, r1, r2, r3}
 8002b1a:	b507      	push	{r0, r1, r2, lr}
 8002b1c:	4906      	ldr	r1, [pc, #24]	; (8002b38 <iprintf+0x20>)
 8002b1e:	ab04      	add	r3, sp, #16
 8002b20:	6808      	ldr	r0, [r1, #0]
 8002b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b26:	6881      	ldr	r1, [r0, #8]
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	f001 fc81 	bl	8004430 <_vfiprintf_r>
 8002b2e:	b003      	add	sp, #12
 8002b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b34:	b004      	add	sp, #16
 8002b36:	4770      	bx	lr
 8002b38:	2000005c 	.word	0x2000005c

08002b3c <__sread>:
 8002b3c:	b510      	push	{r4, lr}
 8002b3e:	460c      	mov	r4, r1
 8002b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b44:	f000 f900 	bl	8002d48 <_read_r>
 8002b48:	2800      	cmp	r0, #0
 8002b4a:	bfab      	itete	ge
 8002b4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002b4e:	89a3      	ldrhlt	r3, [r4, #12]
 8002b50:	181b      	addge	r3, r3, r0
 8002b52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002b56:	bfac      	ite	ge
 8002b58:	6563      	strge	r3, [r4, #84]	; 0x54
 8002b5a:	81a3      	strhlt	r3, [r4, #12]
 8002b5c:	bd10      	pop	{r4, pc}

08002b5e <__swrite>:
 8002b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b62:	461f      	mov	r7, r3
 8002b64:	898b      	ldrh	r3, [r1, #12]
 8002b66:	05db      	lsls	r3, r3, #23
 8002b68:	4605      	mov	r5, r0
 8002b6a:	460c      	mov	r4, r1
 8002b6c:	4616      	mov	r6, r2
 8002b6e:	d505      	bpl.n	8002b7c <__swrite+0x1e>
 8002b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b74:	2302      	movs	r3, #2
 8002b76:	2200      	movs	r2, #0
 8002b78:	f000 f8d4 	bl	8002d24 <_lseek_r>
 8002b7c:	89a3      	ldrh	r3, [r4, #12]
 8002b7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b86:	81a3      	strh	r3, [r4, #12]
 8002b88:	4632      	mov	r2, r6
 8002b8a:	463b      	mov	r3, r7
 8002b8c:	4628      	mov	r0, r5
 8002b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b92:	f000 b8eb 	b.w	8002d6c <_write_r>

08002b96 <__sseek>:
 8002b96:	b510      	push	{r4, lr}
 8002b98:	460c      	mov	r4, r1
 8002b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b9e:	f000 f8c1 	bl	8002d24 <_lseek_r>
 8002ba2:	1c43      	adds	r3, r0, #1
 8002ba4:	89a3      	ldrh	r3, [r4, #12]
 8002ba6:	bf15      	itete	ne
 8002ba8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002baa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002bae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002bb2:	81a3      	strheq	r3, [r4, #12]
 8002bb4:	bf18      	it	ne
 8002bb6:	81a3      	strhne	r3, [r4, #12]
 8002bb8:	bd10      	pop	{r4, pc}

08002bba <__sclose>:
 8002bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bbe:	f000 b8a1 	b.w	8002d04 <_close_r>

08002bc2 <__swbuf_r>:
 8002bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc4:	460e      	mov	r6, r1
 8002bc6:	4614      	mov	r4, r2
 8002bc8:	4605      	mov	r5, r0
 8002bca:	b118      	cbz	r0, 8002bd4 <__swbuf_r+0x12>
 8002bcc:	6a03      	ldr	r3, [r0, #32]
 8002bce:	b90b      	cbnz	r3, 8002bd4 <__swbuf_r+0x12>
 8002bd0:	f7ff ff5a 	bl	8002a88 <__sinit>
 8002bd4:	69a3      	ldr	r3, [r4, #24]
 8002bd6:	60a3      	str	r3, [r4, #8]
 8002bd8:	89a3      	ldrh	r3, [r4, #12]
 8002bda:	071a      	lsls	r2, r3, #28
 8002bdc:	d525      	bpl.n	8002c2a <__swbuf_r+0x68>
 8002bde:	6923      	ldr	r3, [r4, #16]
 8002be0:	b31b      	cbz	r3, 8002c2a <__swbuf_r+0x68>
 8002be2:	6823      	ldr	r3, [r4, #0]
 8002be4:	6922      	ldr	r2, [r4, #16]
 8002be6:	1a98      	subs	r0, r3, r2
 8002be8:	6963      	ldr	r3, [r4, #20]
 8002bea:	b2f6      	uxtb	r6, r6
 8002bec:	4283      	cmp	r3, r0
 8002bee:	4637      	mov	r7, r6
 8002bf0:	dc04      	bgt.n	8002bfc <__swbuf_r+0x3a>
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	4628      	mov	r0, r5
 8002bf6:	f7ff fe93 	bl	8002920 <_fflush_r>
 8002bfa:	b9e0      	cbnz	r0, 8002c36 <__swbuf_r+0x74>
 8002bfc:	68a3      	ldr	r3, [r4, #8]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	60a3      	str	r3, [r4, #8]
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	6022      	str	r2, [r4, #0]
 8002c08:	701e      	strb	r6, [r3, #0]
 8002c0a:	6962      	ldr	r2, [r4, #20]
 8002c0c:	1c43      	adds	r3, r0, #1
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d004      	beq.n	8002c1c <__swbuf_r+0x5a>
 8002c12:	89a3      	ldrh	r3, [r4, #12]
 8002c14:	07db      	lsls	r3, r3, #31
 8002c16:	d506      	bpl.n	8002c26 <__swbuf_r+0x64>
 8002c18:	2e0a      	cmp	r6, #10
 8002c1a:	d104      	bne.n	8002c26 <__swbuf_r+0x64>
 8002c1c:	4621      	mov	r1, r4
 8002c1e:	4628      	mov	r0, r5
 8002c20:	f7ff fe7e 	bl	8002920 <_fflush_r>
 8002c24:	b938      	cbnz	r0, 8002c36 <__swbuf_r+0x74>
 8002c26:	4638      	mov	r0, r7
 8002c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	f000 f805 	bl	8002c3c <__swsetup_r>
 8002c32:	2800      	cmp	r0, #0
 8002c34:	d0d5      	beq.n	8002be2 <__swbuf_r+0x20>
 8002c36:	f04f 37ff 	mov.w	r7, #4294967295
 8002c3a:	e7f4      	b.n	8002c26 <__swbuf_r+0x64>

08002c3c <__swsetup_r>:
 8002c3c:	b538      	push	{r3, r4, r5, lr}
 8002c3e:	4b2a      	ldr	r3, [pc, #168]	; (8002ce8 <__swsetup_r+0xac>)
 8002c40:	4605      	mov	r5, r0
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	460c      	mov	r4, r1
 8002c46:	b118      	cbz	r0, 8002c50 <__swsetup_r+0x14>
 8002c48:	6a03      	ldr	r3, [r0, #32]
 8002c4a:	b90b      	cbnz	r3, 8002c50 <__swsetup_r+0x14>
 8002c4c:	f7ff ff1c 	bl	8002a88 <__sinit>
 8002c50:	89a3      	ldrh	r3, [r4, #12]
 8002c52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c56:	0718      	lsls	r0, r3, #28
 8002c58:	d422      	bmi.n	8002ca0 <__swsetup_r+0x64>
 8002c5a:	06d9      	lsls	r1, r3, #27
 8002c5c:	d407      	bmi.n	8002c6e <__swsetup_r+0x32>
 8002c5e:	2309      	movs	r3, #9
 8002c60:	602b      	str	r3, [r5, #0]
 8002c62:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002c66:	81a3      	strh	r3, [r4, #12]
 8002c68:	f04f 30ff 	mov.w	r0, #4294967295
 8002c6c:	e034      	b.n	8002cd8 <__swsetup_r+0x9c>
 8002c6e:	0758      	lsls	r0, r3, #29
 8002c70:	d512      	bpl.n	8002c98 <__swsetup_r+0x5c>
 8002c72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c74:	b141      	cbz	r1, 8002c88 <__swsetup_r+0x4c>
 8002c76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c7a:	4299      	cmp	r1, r3
 8002c7c:	d002      	beq.n	8002c84 <__swsetup_r+0x48>
 8002c7e:	4628      	mov	r0, r5
 8002c80:	f000 ff30 	bl	8003ae4 <_free_r>
 8002c84:	2300      	movs	r3, #0
 8002c86:	6363      	str	r3, [r4, #52]	; 0x34
 8002c88:	89a3      	ldrh	r3, [r4, #12]
 8002c8a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002c8e:	81a3      	strh	r3, [r4, #12]
 8002c90:	2300      	movs	r3, #0
 8002c92:	6063      	str	r3, [r4, #4]
 8002c94:	6923      	ldr	r3, [r4, #16]
 8002c96:	6023      	str	r3, [r4, #0]
 8002c98:	89a3      	ldrh	r3, [r4, #12]
 8002c9a:	f043 0308 	orr.w	r3, r3, #8
 8002c9e:	81a3      	strh	r3, [r4, #12]
 8002ca0:	6923      	ldr	r3, [r4, #16]
 8002ca2:	b94b      	cbnz	r3, 8002cb8 <__swsetup_r+0x7c>
 8002ca4:	89a3      	ldrh	r3, [r4, #12]
 8002ca6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cae:	d003      	beq.n	8002cb8 <__swsetup_r+0x7c>
 8002cb0:	4621      	mov	r1, r4
 8002cb2:	4628      	mov	r0, r5
 8002cb4:	f001 fcfc 	bl	80046b0 <__smakebuf_r>
 8002cb8:	89a0      	ldrh	r0, [r4, #12]
 8002cba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002cbe:	f010 0301 	ands.w	r3, r0, #1
 8002cc2:	d00a      	beq.n	8002cda <__swsetup_r+0x9e>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60a3      	str	r3, [r4, #8]
 8002cc8:	6963      	ldr	r3, [r4, #20]
 8002cca:	425b      	negs	r3, r3
 8002ccc:	61a3      	str	r3, [r4, #24]
 8002cce:	6923      	ldr	r3, [r4, #16]
 8002cd0:	b943      	cbnz	r3, 8002ce4 <__swsetup_r+0xa8>
 8002cd2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002cd6:	d1c4      	bne.n	8002c62 <__swsetup_r+0x26>
 8002cd8:	bd38      	pop	{r3, r4, r5, pc}
 8002cda:	0781      	lsls	r1, r0, #30
 8002cdc:	bf58      	it	pl
 8002cde:	6963      	ldrpl	r3, [r4, #20]
 8002ce0:	60a3      	str	r3, [r4, #8]
 8002ce2:	e7f4      	b.n	8002cce <__swsetup_r+0x92>
 8002ce4:	2000      	movs	r0, #0
 8002ce6:	e7f7      	b.n	8002cd8 <__swsetup_r+0x9c>
 8002ce8:	2000005c 	.word	0x2000005c

08002cec <memset>:
 8002cec:	4402      	add	r2, r0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d100      	bne.n	8002cf6 <memset+0xa>
 8002cf4:	4770      	bx	lr
 8002cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8002cfa:	e7f9      	b.n	8002cf0 <memset+0x4>

08002cfc <_localeconv_r>:
 8002cfc:	4800      	ldr	r0, [pc, #0]	; (8002d00 <_localeconv_r+0x4>)
 8002cfe:	4770      	bx	lr
 8002d00:	20000150 	.word	0x20000150

08002d04 <_close_r>:
 8002d04:	b538      	push	{r3, r4, r5, lr}
 8002d06:	4d06      	ldr	r5, [pc, #24]	; (8002d20 <_close_r+0x1c>)
 8002d08:	2300      	movs	r3, #0
 8002d0a:	4604      	mov	r4, r0
 8002d0c:	4608      	mov	r0, r1
 8002d0e:	602b      	str	r3, [r5, #0]
 8002d10:	f7fe ff4d 	bl	8001bae <_close>
 8002d14:	1c43      	adds	r3, r0, #1
 8002d16:	d102      	bne.n	8002d1e <_close_r+0x1a>
 8002d18:	682b      	ldr	r3, [r5, #0]
 8002d1a:	b103      	cbz	r3, 8002d1e <_close_r+0x1a>
 8002d1c:	6023      	str	r3, [r4, #0]
 8002d1e:	bd38      	pop	{r3, r4, r5, pc}
 8002d20:	2000032c 	.word	0x2000032c

08002d24 <_lseek_r>:
 8002d24:	b538      	push	{r3, r4, r5, lr}
 8002d26:	4d07      	ldr	r5, [pc, #28]	; (8002d44 <_lseek_r+0x20>)
 8002d28:	4604      	mov	r4, r0
 8002d2a:	4608      	mov	r0, r1
 8002d2c:	4611      	mov	r1, r2
 8002d2e:	2200      	movs	r2, #0
 8002d30:	602a      	str	r2, [r5, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	f7fe ff62 	bl	8001bfc <_lseek>
 8002d38:	1c43      	adds	r3, r0, #1
 8002d3a:	d102      	bne.n	8002d42 <_lseek_r+0x1e>
 8002d3c:	682b      	ldr	r3, [r5, #0]
 8002d3e:	b103      	cbz	r3, 8002d42 <_lseek_r+0x1e>
 8002d40:	6023      	str	r3, [r4, #0]
 8002d42:	bd38      	pop	{r3, r4, r5, pc}
 8002d44:	2000032c 	.word	0x2000032c

08002d48 <_read_r>:
 8002d48:	b538      	push	{r3, r4, r5, lr}
 8002d4a:	4d07      	ldr	r5, [pc, #28]	; (8002d68 <_read_r+0x20>)
 8002d4c:	4604      	mov	r4, r0
 8002d4e:	4608      	mov	r0, r1
 8002d50:	4611      	mov	r1, r2
 8002d52:	2200      	movs	r2, #0
 8002d54:	602a      	str	r2, [r5, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	f7fe fef0 	bl	8001b3c <_read>
 8002d5c:	1c43      	adds	r3, r0, #1
 8002d5e:	d102      	bne.n	8002d66 <_read_r+0x1e>
 8002d60:	682b      	ldr	r3, [r5, #0]
 8002d62:	b103      	cbz	r3, 8002d66 <_read_r+0x1e>
 8002d64:	6023      	str	r3, [r4, #0]
 8002d66:	bd38      	pop	{r3, r4, r5, pc}
 8002d68:	2000032c 	.word	0x2000032c

08002d6c <_write_r>:
 8002d6c:	b538      	push	{r3, r4, r5, lr}
 8002d6e:	4d07      	ldr	r5, [pc, #28]	; (8002d8c <_write_r+0x20>)
 8002d70:	4604      	mov	r4, r0
 8002d72:	4608      	mov	r0, r1
 8002d74:	4611      	mov	r1, r2
 8002d76:	2200      	movs	r2, #0
 8002d78:	602a      	str	r2, [r5, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	f7fe fefb 	bl	8001b76 <_write>
 8002d80:	1c43      	adds	r3, r0, #1
 8002d82:	d102      	bne.n	8002d8a <_write_r+0x1e>
 8002d84:	682b      	ldr	r3, [r5, #0]
 8002d86:	b103      	cbz	r3, 8002d8a <_write_r+0x1e>
 8002d88:	6023      	str	r3, [r4, #0]
 8002d8a:	bd38      	pop	{r3, r4, r5, pc}
 8002d8c:	2000032c 	.word	0x2000032c

08002d90 <__errno>:
 8002d90:	4b01      	ldr	r3, [pc, #4]	; (8002d98 <__errno+0x8>)
 8002d92:	6818      	ldr	r0, [r3, #0]
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	2000005c 	.word	0x2000005c

08002d9c <__libc_init_array>:
 8002d9c:	b570      	push	{r4, r5, r6, lr}
 8002d9e:	4d0d      	ldr	r5, [pc, #52]	; (8002dd4 <__libc_init_array+0x38>)
 8002da0:	4c0d      	ldr	r4, [pc, #52]	; (8002dd8 <__libc_init_array+0x3c>)
 8002da2:	1b64      	subs	r4, r4, r5
 8002da4:	10a4      	asrs	r4, r4, #2
 8002da6:	2600      	movs	r6, #0
 8002da8:	42a6      	cmp	r6, r4
 8002daa:	d109      	bne.n	8002dc0 <__libc_init_array+0x24>
 8002dac:	4d0b      	ldr	r5, [pc, #44]	; (8002ddc <__libc_init_array+0x40>)
 8002dae:	4c0c      	ldr	r4, [pc, #48]	; (8002de0 <__libc_init_array+0x44>)
 8002db0:	f001 fd98 	bl	80048e4 <_init>
 8002db4:	1b64      	subs	r4, r4, r5
 8002db6:	10a4      	asrs	r4, r4, #2
 8002db8:	2600      	movs	r6, #0
 8002dba:	42a6      	cmp	r6, r4
 8002dbc:	d105      	bne.n	8002dca <__libc_init_array+0x2e>
 8002dbe:	bd70      	pop	{r4, r5, r6, pc}
 8002dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dc4:	4798      	blx	r3
 8002dc6:	3601      	adds	r6, #1
 8002dc8:	e7ee      	b.n	8002da8 <__libc_init_array+0xc>
 8002dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dce:	4798      	blx	r3
 8002dd0:	3601      	adds	r6, #1
 8002dd2:	e7f2      	b.n	8002dba <__libc_init_array+0x1e>
 8002dd4:	08004cac 	.word	0x08004cac
 8002dd8:	08004cac 	.word	0x08004cac
 8002ddc:	08004cac 	.word	0x08004cac
 8002de0:	08004cb0 	.word	0x08004cb0

08002de4 <__retarget_lock_init_recursive>:
 8002de4:	4770      	bx	lr

08002de6 <__retarget_lock_acquire_recursive>:
 8002de6:	4770      	bx	lr

08002de8 <__retarget_lock_release_recursive>:
 8002de8:	4770      	bx	lr

08002dea <quorem>:
 8002dea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dee:	6903      	ldr	r3, [r0, #16]
 8002df0:	690c      	ldr	r4, [r1, #16]
 8002df2:	42a3      	cmp	r3, r4
 8002df4:	4607      	mov	r7, r0
 8002df6:	db7e      	blt.n	8002ef6 <quorem+0x10c>
 8002df8:	3c01      	subs	r4, #1
 8002dfa:	f101 0814 	add.w	r8, r1, #20
 8002dfe:	f100 0514 	add.w	r5, r0, #20
 8002e02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002e06:	9301      	str	r3, [sp, #4]
 8002e08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002e0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002e10:	3301      	adds	r3, #1
 8002e12:	429a      	cmp	r2, r3
 8002e14:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002e18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002e1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8002e20:	d331      	bcc.n	8002e86 <quorem+0x9c>
 8002e22:	f04f 0e00 	mov.w	lr, #0
 8002e26:	4640      	mov	r0, r8
 8002e28:	46ac      	mov	ip, r5
 8002e2a:	46f2      	mov	sl, lr
 8002e2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8002e30:	b293      	uxth	r3, r2
 8002e32:	fb06 e303 	mla	r3, r6, r3, lr
 8002e36:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002e3a:	0c1a      	lsrs	r2, r3, #16
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	ebaa 0303 	sub.w	r3, sl, r3
 8002e42:	f8dc a000 	ldr.w	sl, [ip]
 8002e46:	fa13 f38a 	uxtah	r3, r3, sl
 8002e4a:	fb06 220e 	mla	r2, r6, lr, r2
 8002e4e:	9300      	str	r3, [sp, #0]
 8002e50:	9b00      	ldr	r3, [sp, #0]
 8002e52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002e56:	b292      	uxth	r2, r2
 8002e58:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002e5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002e60:	f8bd 3000 	ldrh.w	r3, [sp]
 8002e64:	4581      	cmp	r9, r0
 8002e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e6a:	f84c 3b04 	str.w	r3, [ip], #4
 8002e6e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002e72:	d2db      	bcs.n	8002e2c <quorem+0x42>
 8002e74:	f855 300b 	ldr.w	r3, [r5, fp]
 8002e78:	b92b      	cbnz	r3, 8002e86 <quorem+0x9c>
 8002e7a:	9b01      	ldr	r3, [sp, #4]
 8002e7c:	3b04      	subs	r3, #4
 8002e7e:	429d      	cmp	r5, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	d32c      	bcc.n	8002ede <quorem+0xf4>
 8002e84:	613c      	str	r4, [r7, #16]
 8002e86:	4638      	mov	r0, r7
 8002e88:	f001 f9a8 	bl	80041dc <__mcmp>
 8002e8c:	2800      	cmp	r0, #0
 8002e8e:	db22      	blt.n	8002ed6 <quorem+0xec>
 8002e90:	3601      	adds	r6, #1
 8002e92:	4629      	mov	r1, r5
 8002e94:	2000      	movs	r0, #0
 8002e96:	f858 2b04 	ldr.w	r2, [r8], #4
 8002e9a:	f8d1 c000 	ldr.w	ip, [r1]
 8002e9e:	b293      	uxth	r3, r2
 8002ea0:	1ac3      	subs	r3, r0, r3
 8002ea2:	0c12      	lsrs	r2, r2, #16
 8002ea4:	fa13 f38c 	uxtah	r3, r3, ip
 8002ea8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8002eac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002eb6:	45c1      	cmp	r9, r8
 8002eb8:	f841 3b04 	str.w	r3, [r1], #4
 8002ebc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8002ec0:	d2e9      	bcs.n	8002e96 <quorem+0xac>
 8002ec2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002ec6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002eca:	b922      	cbnz	r2, 8002ed6 <quorem+0xec>
 8002ecc:	3b04      	subs	r3, #4
 8002ece:	429d      	cmp	r5, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	d30a      	bcc.n	8002eea <quorem+0x100>
 8002ed4:	613c      	str	r4, [r7, #16]
 8002ed6:	4630      	mov	r0, r6
 8002ed8:	b003      	add	sp, #12
 8002eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	3b04      	subs	r3, #4
 8002ee2:	2a00      	cmp	r2, #0
 8002ee4:	d1ce      	bne.n	8002e84 <quorem+0x9a>
 8002ee6:	3c01      	subs	r4, #1
 8002ee8:	e7c9      	b.n	8002e7e <quorem+0x94>
 8002eea:	6812      	ldr	r2, [r2, #0]
 8002eec:	3b04      	subs	r3, #4
 8002eee:	2a00      	cmp	r2, #0
 8002ef0:	d1f0      	bne.n	8002ed4 <quorem+0xea>
 8002ef2:	3c01      	subs	r4, #1
 8002ef4:	e7eb      	b.n	8002ece <quorem+0xe4>
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	e7ee      	b.n	8002ed8 <quorem+0xee>
 8002efa:	0000      	movs	r0, r0
 8002efc:	0000      	movs	r0, r0
	...

08002f00 <_dtoa_r>:
 8002f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f04:	ed2d 8b04 	vpush	{d8-d9}
 8002f08:	69c5      	ldr	r5, [r0, #28]
 8002f0a:	b093      	sub	sp, #76	; 0x4c
 8002f0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002f10:	ec57 6b10 	vmov	r6, r7, d0
 8002f14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8002f18:	9107      	str	r1, [sp, #28]
 8002f1a:	4604      	mov	r4, r0
 8002f1c:	920a      	str	r2, [sp, #40]	; 0x28
 8002f1e:	930d      	str	r3, [sp, #52]	; 0x34
 8002f20:	b975      	cbnz	r5, 8002f40 <_dtoa_r+0x40>
 8002f22:	2010      	movs	r0, #16
 8002f24:	f000 fe2a 	bl	8003b7c <malloc>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	61e0      	str	r0, [r4, #28]
 8002f2c:	b920      	cbnz	r0, 8002f38 <_dtoa_r+0x38>
 8002f2e:	4bae      	ldr	r3, [pc, #696]	; (80031e8 <_dtoa_r+0x2e8>)
 8002f30:	21ef      	movs	r1, #239	; 0xef
 8002f32:	48ae      	ldr	r0, [pc, #696]	; (80031ec <_dtoa_r+0x2ec>)
 8002f34:	f001 fc38 	bl	80047a8 <__assert_func>
 8002f38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002f3c:	6005      	str	r5, [r0, #0]
 8002f3e:	60c5      	str	r5, [r0, #12]
 8002f40:	69e3      	ldr	r3, [r4, #28]
 8002f42:	6819      	ldr	r1, [r3, #0]
 8002f44:	b151      	cbz	r1, 8002f5c <_dtoa_r+0x5c>
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	604a      	str	r2, [r1, #4]
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	4093      	lsls	r3, r2
 8002f4e:	608b      	str	r3, [r1, #8]
 8002f50:	4620      	mov	r0, r4
 8002f52:	f000 ff07 	bl	8003d64 <_Bfree>
 8002f56:	69e3      	ldr	r3, [r4, #28]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	1e3b      	subs	r3, r7, #0
 8002f5e:	bfbb      	ittet	lt
 8002f60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002f64:	9303      	strlt	r3, [sp, #12]
 8002f66:	2300      	movge	r3, #0
 8002f68:	2201      	movlt	r2, #1
 8002f6a:	bfac      	ite	ge
 8002f6c:	f8c8 3000 	strge.w	r3, [r8]
 8002f70:	f8c8 2000 	strlt.w	r2, [r8]
 8002f74:	4b9e      	ldr	r3, [pc, #632]	; (80031f0 <_dtoa_r+0x2f0>)
 8002f76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002f7a:	ea33 0308 	bics.w	r3, r3, r8
 8002f7e:	d11b      	bne.n	8002fb8 <_dtoa_r+0xb8>
 8002f80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002f82:	f242 730f 	movw	r3, #9999	; 0x270f
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8002f8c:	4333      	orrs	r3, r6
 8002f8e:	f000 8593 	beq.w	8003ab8 <_dtoa_r+0xbb8>
 8002f92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002f94:	b963      	cbnz	r3, 8002fb0 <_dtoa_r+0xb0>
 8002f96:	4b97      	ldr	r3, [pc, #604]	; (80031f4 <_dtoa_r+0x2f4>)
 8002f98:	e027      	b.n	8002fea <_dtoa_r+0xea>
 8002f9a:	4b97      	ldr	r3, [pc, #604]	; (80031f8 <_dtoa_r+0x2f8>)
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	3308      	adds	r3, #8
 8002fa0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	9800      	ldr	r0, [sp, #0]
 8002fa6:	b013      	add	sp, #76	; 0x4c
 8002fa8:	ecbd 8b04 	vpop	{d8-d9}
 8002fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fb0:	4b90      	ldr	r3, [pc, #576]	; (80031f4 <_dtoa_r+0x2f4>)
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	3303      	adds	r3, #3
 8002fb6:	e7f3      	b.n	8002fa0 <_dtoa_r+0xa0>
 8002fb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	ec51 0b17 	vmov	r0, r1, d7
 8002fc2:	eeb0 8a47 	vmov.f32	s16, s14
 8002fc6:	eef0 8a67 	vmov.f32	s17, s15
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f7fd fd84 	bl	8000ad8 <__aeabi_dcmpeq>
 8002fd0:	4681      	mov	r9, r0
 8002fd2:	b160      	cbz	r0, 8002fee <_dtoa_r+0xee>
 8002fd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 8568 	beq.w	8003ab2 <_dtoa_r+0xbb2>
 8002fe2:	4b86      	ldr	r3, [pc, #536]	; (80031fc <_dtoa_r+0x2fc>)
 8002fe4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	e7da      	b.n	8002fa4 <_dtoa_r+0xa4>
 8002fee:	aa10      	add	r2, sp, #64	; 0x40
 8002ff0:	a911      	add	r1, sp, #68	; 0x44
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	eeb0 0a48 	vmov.f32	s0, s16
 8002ff8:	eef0 0a68 	vmov.f32	s1, s17
 8002ffc:	f001 f994 	bl	8004328 <__d2b>
 8003000:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003004:	4682      	mov	sl, r0
 8003006:	2d00      	cmp	r5, #0
 8003008:	d07f      	beq.n	800310a <_dtoa_r+0x20a>
 800300a:	ee18 3a90 	vmov	r3, s17
 800300e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003012:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003016:	ec51 0b18 	vmov	r0, r1, d8
 800301a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800301e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003022:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8003026:	4619      	mov	r1, r3
 8003028:	2200      	movs	r2, #0
 800302a:	4b75      	ldr	r3, [pc, #468]	; (8003200 <_dtoa_r+0x300>)
 800302c:	f7fd f934 	bl	8000298 <__aeabi_dsub>
 8003030:	a367      	add	r3, pc, #412	; (adr r3, 80031d0 <_dtoa_r+0x2d0>)
 8003032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003036:	f7fd fae7 	bl	8000608 <__aeabi_dmul>
 800303a:	a367      	add	r3, pc, #412	; (adr r3, 80031d8 <_dtoa_r+0x2d8>)
 800303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003040:	f7fd f92c 	bl	800029c <__adddf3>
 8003044:	4606      	mov	r6, r0
 8003046:	4628      	mov	r0, r5
 8003048:	460f      	mov	r7, r1
 800304a:	f7fd fa73 	bl	8000534 <__aeabi_i2d>
 800304e:	a364      	add	r3, pc, #400	; (adr r3, 80031e0 <_dtoa_r+0x2e0>)
 8003050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003054:	f7fd fad8 	bl	8000608 <__aeabi_dmul>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4630      	mov	r0, r6
 800305e:	4639      	mov	r1, r7
 8003060:	f7fd f91c 	bl	800029c <__adddf3>
 8003064:	4606      	mov	r6, r0
 8003066:	460f      	mov	r7, r1
 8003068:	f7fd fd7e 	bl	8000b68 <__aeabi_d2iz>
 800306c:	2200      	movs	r2, #0
 800306e:	4683      	mov	fp, r0
 8003070:	2300      	movs	r3, #0
 8003072:	4630      	mov	r0, r6
 8003074:	4639      	mov	r1, r7
 8003076:	f7fd fd39 	bl	8000aec <__aeabi_dcmplt>
 800307a:	b148      	cbz	r0, 8003090 <_dtoa_r+0x190>
 800307c:	4658      	mov	r0, fp
 800307e:	f7fd fa59 	bl	8000534 <__aeabi_i2d>
 8003082:	4632      	mov	r2, r6
 8003084:	463b      	mov	r3, r7
 8003086:	f7fd fd27 	bl	8000ad8 <__aeabi_dcmpeq>
 800308a:	b908      	cbnz	r0, 8003090 <_dtoa_r+0x190>
 800308c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003090:	f1bb 0f16 	cmp.w	fp, #22
 8003094:	d857      	bhi.n	8003146 <_dtoa_r+0x246>
 8003096:	4b5b      	ldr	r3, [pc, #364]	; (8003204 <_dtoa_r+0x304>)
 8003098:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a0:	ec51 0b18 	vmov	r0, r1, d8
 80030a4:	f7fd fd22 	bl	8000aec <__aeabi_dcmplt>
 80030a8:	2800      	cmp	r0, #0
 80030aa:	d04e      	beq.n	800314a <_dtoa_r+0x24a>
 80030ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80030b0:	2300      	movs	r3, #0
 80030b2:	930c      	str	r3, [sp, #48]	; 0x30
 80030b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80030b6:	1b5b      	subs	r3, r3, r5
 80030b8:	1e5a      	subs	r2, r3, #1
 80030ba:	bf45      	ittet	mi
 80030bc:	f1c3 0301 	rsbmi	r3, r3, #1
 80030c0:	9305      	strmi	r3, [sp, #20]
 80030c2:	2300      	movpl	r3, #0
 80030c4:	2300      	movmi	r3, #0
 80030c6:	9206      	str	r2, [sp, #24]
 80030c8:	bf54      	ite	pl
 80030ca:	9305      	strpl	r3, [sp, #20]
 80030cc:	9306      	strmi	r3, [sp, #24]
 80030ce:	f1bb 0f00 	cmp.w	fp, #0
 80030d2:	db3c      	blt.n	800314e <_dtoa_r+0x24e>
 80030d4:	9b06      	ldr	r3, [sp, #24]
 80030d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80030da:	445b      	add	r3, fp
 80030dc:	9306      	str	r3, [sp, #24]
 80030de:	2300      	movs	r3, #0
 80030e0:	9308      	str	r3, [sp, #32]
 80030e2:	9b07      	ldr	r3, [sp, #28]
 80030e4:	2b09      	cmp	r3, #9
 80030e6:	d868      	bhi.n	80031ba <_dtoa_r+0x2ba>
 80030e8:	2b05      	cmp	r3, #5
 80030ea:	bfc4      	itt	gt
 80030ec:	3b04      	subgt	r3, #4
 80030ee:	9307      	strgt	r3, [sp, #28]
 80030f0:	9b07      	ldr	r3, [sp, #28]
 80030f2:	f1a3 0302 	sub.w	r3, r3, #2
 80030f6:	bfcc      	ite	gt
 80030f8:	2500      	movgt	r5, #0
 80030fa:	2501      	movle	r5, #1
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	f200 8085 	bhi.w	800320c <_dtoa_r+0x30c>
 8003102:	e8df f003 	tbb	[pc, r3]
 8003106:	3b2e      	.short	0x3b2e
 8003108:	5839      	.short	0x5839
 800310a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800310e:	441d      	add	r5, r3
 8003110:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003114:	2b20      	cmp	r3, #32
 8003116:	bfc1      	itttt	gt
 8003118:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800311c:	fa08 f803 	lslgt.w	r8, r8, r3
 8003120:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8003124:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003128:	bfd6      	itet	le
 800312a:	f1c3 0320 	rsble	r3, r3, #32
 800312e:	ea48 0003 	orrgt.w	r0, r8, r3
 8003132:	fa06 f003 	lslle.w	r0, r6, r3
 8003136:	f7fd f9ed 	bl	8000514 <__aeabi_ui2d>
 800313a:	2201      	movs	r2, #1
 800313c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8003140:	3d01      	subs	r5, #1
 8003142:	920e      	str	r2, [sp, #56]	; 0x38
 8003144:	e76f      	b.n	8003026 <_dtoa_r+0x126>
 8003146:	2301      	movs	r3, #1
 8003148:	e7b3      	b.n	80030b2 <_dtoa_r+0x1b2>
 800314a:	900c      	str	r0, [sp, #48]	; 0x30
 800314c:	e7b2      	b.n	80030b4 <_dtoa_r+0x1b4>
 800314e:	9b05      	ldr	r3, [sp, #20]
 8003150:	eba3 030b 	sub.w	r3, r3, fp
 8003154:	9305      	str	r3, [sp, #20]
 8003156:	f1cb 0300 	rsb	r3, fp, #0
 800315a:	9308      	str	r3, [sp, #32]
 800315c:	2300      	movs	r3, #0
 800315e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003160:	e7bf      	b.n	80030e2 <_dtoa_r+0x1e2>
 8003162:	2300      	movs	r3, #0
 8003164:	9309      	str	r3, [sp, #36]	; 0x24
 8003166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003168:	2b00      	cmp	r3, #0
 800316a:	dc52      	bgt.n	8003212 <_dtoa_r+0x312>
 800316c:	2301      	movs	r3, #1
 800316e:	9301      	str	r3, [sp, #4]
 8003170:	9304      	str	r3, [sp, #16]
 8003172:	461a      	mov	r2, r3
 8003174:	920a      	str	r2, [sp, #40]	; 0x28
 8003176:	e00b      	b.n	8003190 <_dtoa_r+0x290>
 8003178:	2301      	movs	r3, #1
 800317a:	e7f3      	b.n	8003164 <_dtoa_r+0x264>
 800317c:	2300      	movs	r3, #0
 800317e:	9309      	str	r3, [sp, #36]	; 0x24
 8003180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003182:	445b      	add	r3, fp
 8003184:	9301      	str	r3, [sp, #4]
 8003186:	3301      	adds	r3, #1
 8003188:	2b01      	cmp	r3, #1
 800318a:	9304      	str	r3, [sp, #16]
 800318c:	bfb8      	it	lt
 800318e:	2301      	movlt	r3, #1
 8003190:	69e0      	ldr	r0, [r4, #28]
 8003192:	2100      	movs	r1, #0
 8003194:	2204      	movs	r2, #4
 8003196:	f102 0614 	add.w	r6, r2, #20
 800319a:	429e      	cmp	r6, r3
 800319c:	d93d      	bls.n	800321a <_dtoa_r+0x31a>
 800319e:	6041      	str	r1, [r0, #4]
 80031a0:	4620      	mov	r0, r4
 80031a2:	f000 fd9f 	bl	8003ce4 <_Balloc>
 80031a6:	9000      	str	r0, [sp, #0]
 80031a8:	2800      	cmp	r0, #0
 80031aa:	d139      	bne.n	8003220 <_dtoa_r+0x320>
 80031ac:	4b16      	ldr	r3, [pc, #88]	; (8003208 <_dtoa_r+0x308>)
 80031ae:	4602      	mov	r2, r0
 80031b0:	f240 11af 	movw	r1, #431	; 0x1af
 80031b4:	e6bd      	b.n	8002f32 <_dtoa_r+0x32>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e7e1      	b.n	800317e <_dtoa_r+0x27e>
 80031ba:	2501      	movs	r5, #1
 80031bc:	2300      	movs	r3, #0
 80031be:	9307      	str	r3, [sp, #28]
 80031c0:	9509      	str	r5, [sp, #36]	; 0x24
 80031c2:	f04f 33ff 	mov.w	r3, #4294967295
 80031c6:	9301      	str	r3, [sp, #4]
 80031c8:	9304      	str	r3, [sp, #16]
 80031ca:	2200      	movs	r2, #0
 80031cc:	2312      	movs	r3, #18
 80031ce:	e7d1      	b.n	8003174 <_dtoa_r+0x274>
 80031d0:	636f4361 	.word	0x636f4361
 80031d4:	3fd287a7 	.word	0x3fd287a7
 80031d8:	8b60c8b3 	.word	0x8b60c8b3
 80031dc:	3fc68a28 	.word	0x3fc68a28
 80031e0:	509f79fb 	.word	0x509f79fb
 80031e4:	3fd34413 	.word	0x3fd34413
 80031e8:	0800497a 	.word	0x0800497a
 80031ec:	08004991 	.word	0x08004991
 80031f0:	7ff00000 	.word	0x7ff00000
 80031f4:	08004976 	.word	0x08004976
 80031f8:	0800496d 	.word	0x0800496d
 80031fc:	0800494a 	.word	0x0800494a
 8003200:	3ff80000 	.word	0x3ff80000
 8003204:	08004a80 	.word	0x08004a80
 8003208:	080049e9 	.word	0x080049e9
 800320c:	2301      	movs	r3, #1
 800320e:	9309      	str	r3, [sp, #36]	; 0x24
 8003210:	e7d7      	b.n	80031c2 <_dtoa_r+0x2c2>
 8003212:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003214:	9301      	str	r3, [sp, #4]
 8003216:	9304      	str	r3, [sp, #16]
 8003218:	e7ba      	b.n	8003190 <_dtoa_r+0x290>
 800321a:	3101      	adds	r1, #1
 800321c:	0052      	lsls	r2, r2, #1
 800321e:	e7ba      	b.n	8003196 <_dtoa_r+0x296>
 8003220:	69e3      	ldr	r3, [r4, #28]
 8003222:	9a00      	ldr	r2, [sp, #0]
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	9b04      	ldr	r3, [sp, #16]
 8003228:	2b0e      	cmp	r3, #14
 800322a:	f200 80a8 	bhi.w	800337e <_dtoa_r+0x47e>
 800322e:	2d00      	cmp	r5, #0
 8003230:	f000 80a5 	beq.w	800337e <_dtoa_r+0x47e>
 8003234:	f1bb 0f00 	cmp.w	fp, #0
 8003238:	dd38      	ble.n	80032ac <_dtoa_r+0x3ac>
 800323a:	4bc0      	ldr	r3, [pc, #768]	; (800353c <_dtoa_r+0x63c>)
 800323c:	f00b 020f 	and.w	r2, fp, #15
 8003240:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003244:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8003248:	e9d3 6700 	ldrd	r6, r7, [r3]
 800324c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8003250:	d019      	beq.n	8003286 <_dtoa_r+0x386>
 8003252:	4bbb      	ldr	r3, [pc, #748]	; (8003540 <_dtoa_r+0x640>)
 8003254:	ec51 0b18 	vmov	r0, r1, d8
 8003258:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800325c:	f7fd fafe 	bl	800085c <__aeabi_ddiv>
 8003260:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003264:	f008 080f 	and.w	r8, r8, #15
 8003268:	2503      	movs	r5, #3
 800326a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8003540 <_dtoa_r+0x640>
 800326e:	f1b8 0f00 	cmp.w	r8, #0
 8003272:	d10a      	bne.n	800328a <_dtoa_r+0x38a>
 8003274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003278:	4632      	mov	r2, r6
 800327a:	463b      	mov	r3, r7
 800327c:	f7fd faee 	bl	800085c <__aeabi_ddiv>
 8003280:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003284:	e02b      	b.n	80032de <_dtoa_r+0x3de>
 8003286:	2502      	movs	r5, #2
 8003288:	e7ef      	b.n	800326a <_dtoa_r+0x36a>
 800328a:	f018 0f01 	tst.w	r8, #1
 800328e:	d008      	beq.n	80032a2 <_dtoa_r+0x3a2>
 8003290:	4630      	mov	r0, r6
 8003292:	4639      	mov	r1, r7
 8003294:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003298:	f7fd f9b6 	bl	8000608 <__aeabi_dmul>
 800329c:	3501      	adds	r5, #1
 800329e:	4606      	mov	r6, r0
 80032a0:	460f      	mov	r7, r1
 80032a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80032a6:	f109 0908 	add.w	r9, r9, #8
 80032aa:	e7e0      	b.n	800326e <_dtoa_r+0x36e>
 80032ac:	f000 809f 	beq.w	80033ee <_dtoa_r+0x4ee>
 80032b0:	f1cb 0600 	rsb	r6, fp, #0
 80032b4:	4ba1      	ldr	r3, [pc, #644]	; (800353c <_dtoa_r+0x63c>)
 80032b6:	4fa2      	ldr	r7, [pc, #648]	; (8003540 <_dtoa_r+0x640>)
 80032b8:	f006 020f 	and.w	r2, r6, #15
 80032bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80032c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c4:	ec51 0b18 	vmov	r0, r1, d8
 80032c8:	f7fd f99e 	bl	8000608 <__aeabi_dmul>
 80032cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80032d0:	1136      	asrs	r6, r6, #4
 80032d2:	2300      	movs	r3, #0
 80032d4:	2502      	movs	r5, #2
 80032d6:	2e00      	cmp	r6, #0
 80032d8:	d17e      	bne.n	80033d8 <_dtoa_r+0x4d8>
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1d0      	bne.n	8003280 <_dtoa_r+0x380>
 80032de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80032e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 8084 	beq.w	80033f2 <_dtoa_r+0x4f2>
 80032ea:	4b96      	ldr	r3, [pc, #600]	; (8003544 <_dtoa_r+0x644>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	4640      	mov	r0, r8
 80032f0:	4649      	mov	r1, r9
 80032f2:	f7fd fbfb 	bl	8000aec <__aeabi_dcmplt>
 80032f6:	2800      	cmp	r0, #0
 80032f8:	d07b      	beq.n	80033f2 <_dtoa_r+0x4f2>
 80032fa:	9b04      	ldr	r3, [sp, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d078      	beq.n	80033f2 <_dtoa_r+0x4f2>
 8003300:	9b01      	ldr	r3, [sp, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	dd39      	ble.n	800337a <_dtoa_r+0x47a>
 8003306:	4b90      	ldr	r3, [pc, #576]	; (8003548 <_dtoa_r+0x648>)
 8003308:	2200      	movs	r2, #0
 800330a:	4640      	mov	r0, r8
 800330c:	4649      	mov	r1, r9
 800330e:	f7fd f97b 	bl	8000608 <__aeabi_dmul>
 8003312:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003316:	9e01      	ldr	r6, [sp, #4]
 8003318:	f10b 37ff 	add.w	r7, fp, #4294967295
 800331c:	3501      	adds	r5, #1
 800331e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003322:	4628      	mov	r0, r5
 8003324:	f7fd f906 	bl	8000534 <__aeabi_i2d>
 8003328:	4642      	mov	r2, r8
 800332a:	464b      	mov	r3, r9
 800332c:	f7fd f96c 	bl	8000608 <__aeabi_dmul>
 8003330:	4b86      	ldr	r3, [pc, #536]	; (800354c <_dtoa_r+0x64c>)
 8003332:	2200      	movs	r2, #0
 8003334:	f7fc ffb2 	bl	800029c <__adddf3>
 8003338:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800333c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003340:	9303      	str	r3, [sp, #12]
 8003342:	2e00      	cmp	r6, #0
 8003344:	d158      	bne.n	80033f8 <_dtoa_r+0x4f8>
 8003346:	4b82      	ldr	r3, [pc, #520]	; (8003550 <_dtoa_r+0x650>)
 8003348:	2200      	movs	r2, #0
 800334a:	4640      	mov	r0, r8
 800334c:	4649      	mov	r1, r9
 800334e:	f7fc ffa3 	bl	8000298 <__aeabi_dsub>
 8003352:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003356:	4680      	mov	r8, r0
 8003358:	4689      	mov	r9, r1
 800335a:	f7fd fbe5 	bl	8000b28 <__aeabi_dcmpgt>
 800335e:	2800      	cmp	r0, #0
 8003360:	f040 8296 	bne.w	8003890 <_dtoa_r+0x990>
 8003364:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8003368:	4640      	mov	r0, r8
 800336a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800336e:	4649      	mov	r1, r9
 8003370:	f7fd fbbc 	bl	8000aec <__aeabi_dcmplt>
 8003374:	2800      	cmp	r0, #0
 8003376:	f040 8289 	bne.w	800388c <_dtoa_r+0x98c>
 800337a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800337e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003380:	2b00      	cmp	r3, #0
 8003382:	f2c0 814e 	blt.w	8003622 <_dtoa_r+0x722>
 8003386:	f1bb 0f0e 	cmp.w	fp, #14
 800338a:	f300 814a 	bgt.w	8003622 <_dtoa_r+0x722>
 800338e:	4b6b      	ldr	r3, [pc, #428]	; (800353c <_dtoa_r+0x63c>)
 8003390:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003394:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003398:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800339a:	2b00      	cmp	r3, #0
 800339c:	f280 80dc 	bge.w	8003558 <_dtoa_r+0x658>
 80033a0:	9b04      	ldr	r3, [sp, #16]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f300 80d8 	bgt.w	8003558 <_dtoa_r+0x658>
 80033a8:	f040 826f 	bne.w	800388a <_dtoa_r+0x98a>
 80033ac:	4b68      	ldr	r3, [pc, #416]	; (8003550 <_dtoa_r+0x650>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	4640      	mov	r0, r8
 80033b2:	4649      	mov	r1, r9
 80033b4:	f7fd f928 	bl	8000608 <__aeabi_dmul>
 80033b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80033bc:	f7fd fbaa 	bl	8000b14 <__aeabi_dcmpge>
 80033c0:	9e04      	ldr	r6, [sp, #16]
 80033c2:	4637      	mov	r7, r6
 80033c4:	2800      	cmp	r0, #0
 80033c6:	f040 8245 	bne.w	8003854 <_dtoa_r+0x954>
 80033ca:	9d00      	ldr	r5, [sp, #0]
 80033cc:	2331      	movs	r3, #49	; 0x31
 80033ce:	f805 3b01 	strb.w	r3, [r5], #1
 80033d2:	f10b 0b01 	add.w	fp, fp, #1
 80033d6:	e241      	b.n	800385c <_dtoa_r+0x95c>
 80033d8:	07f2      	lsls	r2, r6, #31
 80033da:	d505      	bpl.n	80033e8 <_dtoa_r+0x4e8>
 80033dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033e0:	f7fd f912 	bl	8000608 <__aeabi_dmul>
 80033e4:	3501      	adds	r5, #1
 80033e6:	2301      	movs	r3, #1
 80033e8:	1076      	asrs	r6, r6, #1
 80033ea:	3708      	adds	r7, #8
 80033ec:	e773      	b.n	80032d6 <_dtoa_r+0x3d6>
 80033ee:	2502      	movs	r5, #2
 80033f0:	e775      	b.n	80032de <_dtoa_r+0x3de>
 80033f2:	9e04      	ldr	r6, [sp, #16]
 80033f4:	465f      	mov	r7, fp
 80033f6:	e792      	b.n	800331e <_dtoa_r+0x41e>
 80033f8:	9900      	ldr	r1, [sp, #0]
 80033fa:	4b50      	ldr	r3, [pc, #320]	; (800353c <_dtoa_r+0x63c>)
 80033fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003400:	4431      	add	r1, r6
 8003402:	9102      	str	r1, [sp, #8]
 8003404:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003406:	eeb0 9a47 	vmov.f32	s18, s14
 800340a:	eef0 9a67 	vmov.f32	s19, s15
 800340e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003412:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003416:	2900      	cmp	r1, #0
 8003418:	d044      	beq.n	80034a4 <_dtoa_r+0x5a4>
 800341a:	494e      	ldr	r1, [pc, #312]	; (8003554 <_dtoa_r+0x654>)
 800341c:	2000      	movs	r0, #0
 800341e:	f7fd fa1d 	bl	800085c <__aeabi_ddiv>
 8003422:	ec53 2b19 	vmov	r2, r3, d9
 8003426:	f7fc ff37 	bl	8000298 <__aeabi_dsub>
 800342a:	9d00      	ldr	r5, [sp, #0]
 800342c:	ec41 0b19 	vmov	d9, r0, r1
 8003430:	4649      	mov	r1, r9
 8003432:	4640      	mov	r0, r8
 8003434:	f7fd fb98 	bl	8000b68 <__aeabi_d2iz>
 8003438:	4606      	mov	r6, r0
 800343a:	f7fd f87b 	bl	8000534 <__aeabi_i2d>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4640      	mov	r0, r8
 8003444:	4649      	mov	r1, r9
 8003446:	f7fc ff27 	bl	8000298 <__aeabi_dsub>
 800344a:	3630      	adds	r6, #48	; 0x30
 800344c:	f805 6b01 	strb.w	r6, [r5], #1
 8003450:	ec53 2b19 	vmov	r2, r3, d9
 8003454:	4680      	mov	r8, r0
 8003456:	4689      	mov	r9, r1
 8003458:	f7fd fb48 	bl	8000aec <__aeabi_dcmplt>
 800345c:	2800      	cmp	r0, #0
 800345e:	d164      	bne.n	800352a <_dtoa_r+0x62a>
 8003460:	4642      	mov	r2, r8
 8003462:	464b      	mov	r3, r9
 8003464:	4937      	ldr	r1, [pc, #220]	; (8003544 <_dtoa_r+0x644>)
 8003466:	2000      	movs	r0, #0
 8003468:	f7fc ff16 	bl	8000298 <__aeabi_dsub>
 800346c:	ec53 2b19 	vmov	r2, r3, d9
 8003470:	f7fd fb3c 	bl	8000aec <__aeabi_dcmplt>
 8003474:	2800      	cmp	r0, #0
 8003476:	f040 80b6 	bne.w	80035e6 <_dtoa_r+0x6e6>
 800347a:	9b02      	ldr	r3, [sp, #8]
 800347c:	429d      	cmp	r5, r3
 800347e:	f43f af7c 	beq.w	800337a <_dtoa_r+0x47a>
 8003482:	4b31      	ldr	r3, [pc, #196]	; (8003548 <_dtoa_r+0x648>)
 8003484:	ec51 0b19 	vmov	r0, r1, d9
 8003488:	2200      	movs	r2, #0
 800348a:	f7fd f8bd 	bl	8000608 <__aeabi_dmul>
 800348e:	4b2e      	ldr	r3, [pc, #184]	; (8003548 <_dtoa_r+0x648>)
 8003490:	ec41 0b19 	vmov	d9, r0, r1
 8003494:	2200      	movs	r2, #0
 8003496:	4640      	mov	r0, r8
 8003498:	4649      	mov	r1, r9
 800349a:	f7fd f8b5 	bl	8000608 <__aeabi_dmul>
 800349e:	4680      	mov	r8, r0
 80034a0:	4689      	mov	r9, r1
 80034a2:	e7c5      	b.n	8003430 <_dtoa_r+0x530>
 80034a4:	ec51 0b17 	vmov	r0, r1, d7
 80034a8:	f7fd f8ae 	bl	8000608 <__aeabi_dmul>
 80034ac:	9b02      	ldr	r3, [sp, #8]
 80034ae:	9d00      	ldr	r5, [sp, #0]
 80034b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80034b2:	ec41 0b19 	vmov	d9, r0, r1
 80034b6:	4649      	mov	r1, r9
 80034b8:	4640      	mov	r0, r8
 80034ba:	f7fd fb55 	bl	8000b68 <__aeabi_d2iz>
 80034be:	4606      	mov	r6, r0
 80034c0:	f7fd f838 	bl	8000534 <__aeabi_i2d>
 80034c4:	3630      	adds	r6, #48	; 0x30
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4640      	mov	r0, r8
 80034cc:	4649      	mov	r1, r9
 80034ce:	f7fc fee3 	bl	8000298 <__aeabi_dsub>
 80034d2:	f805 6b01 	strb.w	r6, [r5], #1
 80034d6:	9b02      	ldr	r3, [sp, #8]
 80034d8:	429d      	cmp	r5, r3
 80034da:	4680      	mov	r8, r0
 80034dc:	4689      	mov	r9, r1
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	d124      	bne.n	800352e <_dtoa_r+0x62e>
 80034e4:	4b1b      	ldr	r3, [pc, #108]	; (8003554 <_dtoa_r+0x654>)
 80034e6:	ec51 0b19 	vmov	r0, r1, d9
 80034ea:	f7fc fed7 	bl	800029c <__adddf3>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4640      	mov	r0, r8
 80034f4:	4649      	mov	r1, r9
 80034f6:	f7fd fb17 	bl	8000b28 <__aeabi_dcmpgt>
 80034fa:	2800      	cmp	r0, #0
 80034fc:	d173      	bne.n	80035e6 <_dtoa_r+0x6e6>
 80034fe:	ec53 2b19 	vmov	r2, r3, d9
 8003502:	4914      	ldr	r1, [pc, #80]	; (8003554 <_dtoa_r+0x654>)
 8003504:	2000      	movs	r0, #0
 8003506:	f7fc fec7 	bl	8000298 <__aeabi_dsub>
 800350a:	4602      	mov	r2, r0
 800350c:	460b      	mov	r3, r1
 800350e:	4640      	mov	r0, r8
 8003510:	4649      	mov	r1, r9
 8003512:	f7fd faeb 	bl	8000aec <__aeabi_dcmplt>
 8003516:	2800      	cmp	r0, #0
 8003518:	f43f af2f 	beq.w	800337a <_dtoa_r+0x47a>
 800351c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800351e:	1e6b      	subs	r3, r5, #1
 8003520:	930f      	str	r3, [sp, #60]	; 0x3c
 8003522:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003526:	2b30      	cmp	r3, #48	; 0x30
 8003528:	d0f8      	beq.n	800351c <_dtoa_r+0x61c>
 800352a:	46bb      	mov	fp, r7
 800352c:	e04a      	b.n	80035c4 <_dtoa_r+0x6c4>
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <_dtoa_r+0x648>)
 8003530:	f7fd f86a 	bl	8000608 <__aeabi_dmul>
 8003534:	4680      	mov	r8, r0
 8003536:	4689      	mov	r9, r1
 8003538:	e7bd      	b.n	80034b6 <_dtoa_r+0x5b6>
 800353a:	bf00      	nop
 800353c:	08004a80 	.word	0x08004a80
 8003540:	08004a58 	.word	0x08004a58
 8003544:	3ff00000 	.word	0x3ff00000
 8003548:	40240000 	.word	0x40240000
 800354c:	401c0000 	.word	0x401c0000
 8003550:	40140000 	.word	0x40140000
 8003554:	3fe00000 	.word	0x3fe00000
 8003558:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800355c:	9d00      	ldr	r5, [sp, #0]
 800355e:	4642      	mov	r2, r8
 8003560:	464b      	mov	r3, r9
 8003562:	4630      	mov	r0, r6
 8003564:	4639      	mov	r1, r7
 8003566:	f7fd f979 	bl	800085c <__aeabi_ddiv>
 800356a:	f7fd fafd 	bl	8000b68 <__aeabi_d2iz>
 800356e:	9001      	str	r0, [sp, #4]
 8003570:	f7fc ffe0 	bl	8000534 <__aeabi_i2d>
 8003574:	4642      	mov	r2, r8
 8003576:	464b      	mov	r3, r9
 8003578:	f7fd f846 	bl	8000608 <__aeabi_dmul>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4630      	mov	r0, r6
 8003582:	4639      	mov	r1, r7
 8003584:	f7fc fe88 	bl	8000298 <__aeabi_dsub>
 8003588:	9e01      	ldr	r6, [sp, #4]
 800358a:	9f04      	ldr	r7, [sp, #16]
 800358c:	3630      	adds	r6, #48	; 0x30
 800358e:	f805 6b01 	strb.w	r6, [r5], #1
 8003592:	9e00      	ldr	r6, [sp, #0]
 8003594:	1bae      	subs	r6, r5, r6
 8003596:	42b7      	cmp	r7, r6
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	d134      	bne.n	8003608 <_dtoa_r+0x708>
 800359e:	f7fc fe7d 	bl	800029c <__adddf3>
 80035a2:	4642      	mov	r2, r8
 80035a4:	464b      	mov	r3, r9
 80035a6:	4606      	mov	r6, r0
 80035a8:	460f      	mov	r7, r1
 80035aa:	f7fd fabd 	bl	8000b28 <__aeabi_dcmpgt>
 80035ae:	b9c8      	cbnz	r0, 80035e4 <_dtoa_r+0x6e4>
 80035b0:	4642      	mov	r2, r8
 80035b2:	464b      	mov	r3, r9
 80035b4:	4630      	mov	r0, r6
 80035b6:	4639      	mov	r1, r7
 80035b8:	f7fd fa8e 	bl	8000ad8 <__aeabi_dcmpeq>
 80035bc:	b110      	cbz	r0, 80035c4 <_dtoa_r+0x6c4>
 80035be:	9b01      	ldr	r3, [sp, #4]
 80035c0:	07db      	lsls	r3, r3, #31
 80035c2:	d40f      	bmi.n	80035e4 <_dtoa_r+0x6e4>
 80035c4:	4651      	mov	r1, sl
 80035c6:	4620      	mov	r0, r4
 80035c8:	f000 fbcc 	bl	8003d64 <_Bfree>
 80035cc:	2300      	movs	r3, #0
 80035ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80035d0:	702b      	strb	r3, [r5, #0]
 80035d2:	f10b 0301 	add.w	r3, fp, #1
 80035d6:	6013      	str	r3, [r2, #0]
 80035d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f43f ace2 	beq.w	8002fa4 <_dtoa_r+0xa4>
 80035e0:	601d      	str	r5, [r3, #0]
 80035e2:	e4df      	b.n	8002fa4 <_dtoa_r+0xa4>
 80035e4:	465f      	mov	r7, fp
 80035e6:	462b      	mov	r3, r5
 80035e8:	461d      	mov	r5, r3
 80035ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80035ee:	2a39      	cmp	r2, #57	; 0x39
 80035f0:	d106      	bne.n	8003600 <_dtoa_r+0x700>
 80035f2:	9a00      	ldr	r2, [sp, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d1f7      	bne.n	80035e8 <_dtoa_r+0x6e8>
 80035f8:	9900      	ldr	r1, [sp, #0]
 80035fa:	2230      	movs	r2, #48	; 0x30
 80035fc:	3701      	adds	r7, #1
 80035fe:	700a      	strb	r2, [r1, #0]
 8003600:	781a      	ldrb	r2, [r3, #0]
 8003602:	3201      	adds	r2, #1
 8003604:	701a      	strb	r2, [r3, #0]
 8003606:	e790      	b.n	800352a <_dtoa_r+0x62a>
 8003608:	4ba3      	ldr	r3, [pc, #652]	; (8003898 <_dtoa_r+0x998>)
 800360a:	2200      	movs	r2, #0
 800360c:	f7fc fffc 	bl	8000608 <__aeabi_dmul>
 8003610:	2200      	movs	r2, #0
 8003612:	2300      	movs	r3, #0
 8003614:	4606      	mov	r6, r0
 8003616:	460f      	mov	r7, r1
 8003618:	f7fd fa5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800361c:	2800      	cmp	r0, #0
 800361e:	d09e      	beq.n	800355e <_dtoa_r+0x65e>
 8003620:	e7d0      	b.n	80035c4 <_dtoa_r+0x6c4>
 8003622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003624:	2a00      	cmp	r2, #0
 8003626:	f000 80ca 	beq.w	80037be <_dtoa_r+0x8be>
 800362a:	9a07      	ldr	r2, [sp, #28]
 800362c:	2a01      	cmp	r2, #1
 800362e:	f300 80ad 	bgt.w	800378c <_dtoa_r+0x88c>
 8003632:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003634:	2a00      	cmp	r2, #0
 8003636:	f000 80a5 	beq.w	8003784 <_dtoa_r+0x884>
 800363a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800363e:	9e08      	ldr	r6, [sp, #32]
 8003640:	9d05      	ldr	r5, [sp, #20]
 8003642:	9a05      	ldr	r2, [sp, #20]
 8003644:	441a      	add	r2, r3
 8003646:	9205      	str	r2, [sp, #20]
 8003648:	9a06      	ldr	r2, [sp, #24]
 800364a:	2101      	movs	r1, #1
 800364c:	441a      	add	r2, r3
 800364e:	4620      	mov	r0, r4
 8003650:	9206      	str	r2, [sp, #24]
 8003652:	f000 fc3d 	bl	8003ed0 <__i2b>
 8003656:	4607      	mov	r7, r0
 8003658:	b165      	cbz	r5, 8003674 <_dtoa_r+0x774>
 800365a:	9b06      	ldr	r3, [sp, #24]
 800365c:	2b00      	cmp	r3, #0
 800365e:	dd09      	ble.n	8003674 <_dtoa_r+0x774>
 8003660:	42ab      	cmp	r3, r5
 8003662:	9a05      	ldr	r2, [sp, #20]
 8003664:	bfa8      	it	ge
 8003666:	462b      	movge	r3, r5
 8003668:	1ad2      	subs	r2, r2, r3
 800366a:	9205      	str	r2, [sp, #20]
 800366c:	9a06      	ldr	r2, [sp, #24]
 800366e:	1aed      	subs	r5, r5, r3
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	9306      	str	r3, [sp, #24]
 8003674:	9b08      	ldr	r3, [sp, #32]
 8003676:	b1f3      	cbz	r3, 80036b6 <_dtoa_r+0x7b6>
 8003678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 80a3 	beq.w	80037c6 <_dtoa_r+0x8c6>
 8003680:	2e00      	cmp	r6, #0
 8003682:	dd10      	ble.n	80036a6 <_dtoa_r+0x7a6>
 8003684:	4639      	mov	r1, r7
 8003686:	4632      	mov	r2, r6
 8003688:	4620      	mov	r0, r4
 800368a:	f000 fce1 	bl	8004050 <__pow5mult>
 800368e:	4652      	mov	r2, sl
 8003690:	4601      	mov	r1, r0
 8003692:	4607      	mov	r7, r0
 8003694:	4620      	mov	r0, r4
 8003696:	f000 fc31 	bl	8003efc <__multiply>
 800369a:	4651      	mov	r1, sl
 800369c:	4680      	mov	r8, r0
 800369e:	4620      	mov	r0, r4
 80036a0:	f000 fb60 	bl	8003d64 <_Bfree>
 80036a4:	46c2      	mov	sl, r8
 80036a6:	9b08      	ldr	r3, [sp, #32]
 80036a8:	1b9a      	subs	r2, r3, r6
 80036aa:	d004      	beq.n	80036b6 <_dtoa_r+0x7b6>
 80036ac:	4651      	mov	r1, sl
 80036ae:	4620      	mov	r0, r4
 80036b0:	f000 fcce 	bl	8004050 <__pow5mult>
 80036b4:	4682      	mov	sl, r0
 80036b6:	2101      	movs	r1, #1
 80036b8:	4620      	mov	r0, r4
 80036ba:	f000 fc09 	bl	8003ed0 <__i2b>
 80036be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	4606      	mov	r6, r0
 80036c4:	f340 8081 	ble.w	80037ca <_dtoa_r+0x8ca>
 80036c8:	461a      	mov	r2, r3
 80036ca:	4601      	mov	r1, r0
 80036cc:	4620      	mov	r0, r4
 80036ce:	f000 fcbf 	bl	8004050 <__pow5mult>
 80036d2:	9b07      	ldr	r3, [sp, #28]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	4606      	mov	r6, r0
 80036d8:	dd7a      	ble.n	80037d0 <_dtoa_r+0x8d0>
 80036da:	f04f 0800 	mov.w	r8, #0
 80036de:	6933      	ldr	r3, [r6, #16]
 80036e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80036e4:	6918      	ldr	r0, [r3, #16]
 80036e6:	f000 fba5 	bl	8003e34 <__hi0bits>
 80036ea:	f1c0 0020 	rsb	r0, r0, #32
 80036ee:	9b06      	ldr	r3, [sp, #24]
 80036f0:	4418      	add	r0, r3
 80036f2:	f010 001f 	ands.w	r0, r0, #31
 80036f6:	f000 8094 	beq.w	8003822 <_dtoa_r+0x922>
 80036fa:	f1c0 0320 	rsb	r3, r0, #32
 80036fe:	2b04      	cmp	r3, #4
 8003700:	f340 8085 	ble.w	800380e <_dtoa_r+0x90e>
 8003704:	9b05      	ldr	r3, [sp, #20]
 8003706:	f1c0 001c 	rsb	r0, r0, #28
 800370a:	4403      	add	r3, r0
 800370c:	9305      	str	r3, [sp, #20]
 800370e:	9b06      	ldr	r3, [sp, #24]
 8003710:	4403      	add	r3, r0
 8003712:	4405      	add	r5, r0
 8003714:	9306      	str	r3, [sp, #24]
 8003716:	9b05      	ldr	r3, [sp, #20]
 8003718:	2b00      	cmp	r3, #0
 800371a:	dd05      	ble.n	8003728 <_dtoa_r+0x828>
 800371c:	4651      	mov	r1, sl
 800371e:	461a      	mov	r2, r3
 8003720:	4620      	mov	r0, r4
 8003722:	f000 fcef 	bl	8004104 <__lshift>
 8003726:	4682      	mov	sl, r0
 8003728:	9b06      	ldr	r3, [sp, #24]
 800372a:	2b00      	cmp	r3, #0
 800372c:	dd05      	ble.n	800373a <_dtoa_r+0x83a>
 800372e:	4631      	mov	r1, r6
 8003730:	461a      	mov	r2, r3
 8003732:	4620      	mov	r0, r4
 8003734:	f000 fce6 	bl	8004104 <__lshift>
 8003738:	4606      	mov	r6, r0
 800373a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800373c:	2b00      	cmp	r3, #0
 800373e:	d072      	beq.n	8003826 <_dtoa_r+0x926>
 8003740:	4631      	mov	r1, r6
 8003742:	4650      	mov	r0, sl
 8003744:	f000 fd4a 	bl	80041dc <__mcmp>
 8003748:	2800      	cmp	r0, #0
 800374a:	da6c      	bge.n	8003826 <_dtoa_r+0x926>
 800374c:	2300      	movs	r3, #0
 800374e:	4651      	mov	r1, sl
 8003750:	220a      	movs	r2, #10
 8003752:	4620      	mov	r0, r4
 8003754:	f000 fb28 	bl	8003da8 <__multadd>
 8003758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800375a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800375e:	4682      	mov	sl, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 81b0 	beq.w	8003ac6 <_dtoa_r+0xbc6>
 8003766:	2300      	movs	r3, #0
 8003768:	4639      	mov	r1, r7
 800376a:	220a      	movs	r2, #10
 800376c:	4620      	mov	r0, r4
 800376e:	f000 fb1b 	bl	8003da8 <__multadd>
 8003772:	9b01      	ldr	r3, [sp, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	4607      	mov	r7, r0
 8003778:	f300 8096 	bgt.w	80038a8 <_dtoa_r+0x9a8>
 800377c:	9b07      	ldr	r3, [sp, #28]
 800377e:	2b02      	cmp	r3, #2
 8003780:	dc59      	bgt.n	8003836 <_dtoa_r+0x936>
 8003782:	e091      	b.n	80038a8 <_dtoa_r+0x9a8>
 8003784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003786:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800378a:	e758      	b.n	800363e <_dtoa_r+0x73e>
 800378c:	9b04      	ldr	r3, [sp, #16]
 800378e:	1e5e      	subs	r6, r3, #1
 8003790:	9b08      	ldr	r3, [sp, #32]
 8003792:	42b3      	cmp	r3, r6
 8003794:	bfbf      	itttt	lt
 8003796:	9b08      	ldrlt	r3, [sp, #32]
 8003798:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800379a:	9608      	strlt	r6, [sp, #32]
 800379c:	1af3      	sublt	r3, r6, r3
 800379e:	bfb4      	ite	lt
 80037a0:	18d2      	addlt	r2, r2, r3
 80037a2:	1b9e      	subge	r6, r3, r6
 80037a4:	9b04      	ldr	r3, [sp, #16]
 80037a6:	bfbc      	itt	lt
 80037a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80037aa:	2600      	movlt	r6, #0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	bfb7      	itett	lt
 80037b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80037b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80037b8:	1a9d      	sublt	r5, r3, r2
 80037ba:	2300      	movlt	r3, #0
 80037bc:	e741      	b.n	8003642 <_dtoa_r+0x742>
 80037be:	9e08      	ldr	r6, [sp, #32]
 80037c0:	9d05      	ldr	r5, [sp, #20]
 80037c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80037c4:	e748      	b.n	8003658 <_dtoa_r+0x758>
 80037c6:	9a08      	ldr	r2, [sp, #32]
 80037c8:	e770      	b.n	80036ac <_dtoa_r+0x7ac>
 80037ca:	9b07      	ldr	r3, [sp, #28]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	dc19      	bgt.n	8003804 <_dtoa_r+0x904>
 80037d0:	9b02      	ldr	r3, [sp, #8]
 80037d2:	b9bb      	cbnz	r3, 8003804 <_dtoa_r+0x904>
 80037d4:	9b03      	ldr	r3, [sp, #12]
 80037d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037da:	b99b      	cbnz	r3, 8003804 <_dtoa_r+0x904>
 80037dc:	9b03      	ldr	r3, [sp, #12]
 80037de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037e2:	0d1b      	lsrs	r3, r3, #20
 80037e4:	051b      	lsls	r3, r3, #20
 80037e6:	b183      	cbz	r3, 800380a <_dtoa_r+0x90a>
 80037e8:	9b05      	ldr	r3, [sp, #20]
 80037ea:	3301      	adds	r3, #1
 80037ec:	9305      	str	r3, [sp, #20]
 80037ee:	9b06      	ldr	r3, [sp, #24]
 80037f0:	3301      	adds	r3, #1
 80037f2:	9306      	str	r3, [sp, #24]
 80037f4:	f04f 0801 	mov.w	r8, #1
 80037f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f47f af6f 	bne.w	80036de <_dtoa_r+0x7de>
 8003800:	2001      	movs	r0, #1
 8003802:	e774      	b.n	80036ee <_dtoa_r+0x7ee>
 8003804:	f04f 0800 	mov.w	r8, #0
 8003808:	e7f6      	b.n	80037f8 <_dtoa_r+0x8f8>
 800380a:	4698      	mov	r8, r3
 800380c:	e7f4      	b.n	80037f8 <_dtoa_r+0x8f8>
 800380e:	d082      	beq.n	8003716 <_dtoa_r+0x816>
 8003810:	9a05      	ldr	r2, [sp, #20]
 8003812:	331c      	adds	r3, #28
 8003814:	441a      	add	r2, r3
 8003816:	9205      	str	r2, [sp, #20]
 8003818:	9a06      	ldr	r2, [sp, #24]
 800381a:	441a      	add	r2, r3
 800381c:	441d      	add	r5, r3
 800381e:	9206      	str	r2, [sp, #24]
 8003820:	e779      	b.n	8003716 <_dtoa_r+0x816>
 8003822:	4603      	mov	r3, r0
 8003824:	e7f4      	b.n	8003810 <_dtoa_r+0x910>
 8003826:	9b04      	ldr	r3, [sp, #16]
 8003828:	2b00      	cmp	r3, #0
 800382a:	dc37      	bgt.n	800389c <_dtoa_r+0x99c>
 800382c:	9b07      	ldr	r3, [sp, #28]
 800382e:	2b02      	cmp	r3, #2
 8003830:	dd34      	ble.n	800389c <_dtoa_r+0x99c>
 8003832:	9b04      	ldr	r3, [sp, #16]
 8003834:	9301      	str	r3, [sp, #4]
 8003836:	9b01      	ldr	r3, [sp, #4]
 8003838:	b963      	cbnz	r3, 8003854 <_dtoa_r+0x954>
 800383a:	4631      	mov	r1, r6
 800383c:	2205      	movs	r2, #5
 800383e:	4620      	mov	r0, r4
 8003840:	f000 fab2 	bl	8003da8 <__multadd>
 8003844:	4601      	mov	r1, r0
 8003846:	4606      	mov	r6, r0
 8003848:	4650      	mov	r0, sl
 800384a:	f000 fcc7 	bl	80041dc <__mcmp>
 800384e:	2800      	cmp	r0, #0
 8003850:	f73f adbb 	bgt.w	80033ca <_dtoa_r+0x4ca>
 8003854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003856:	9d00      	ldr	r5, [sp, #0]
 8003858:	ea6f 0b03 	mvn.w	fp, r3
 800385c:	f04f 0800 	mov.w	r8, #0
 8003860:	4631      	mov	r1, r6
 8003862:	4620      	mov	r0, r4
 8003864:	f000 fa7e 	bl	8003d64 <_Bfree>
 8003868:	2f00      	cmp	r7, #0
 800386a:	f43f aeab 	beq.w	80035c4 <_dtoa_r+0x6c4>
 800386e:	f1b8 0f00 	cmp.w	r8, #0
 8003872:	d005      	beq.n	8003880 <_dtoa_r+0x980>
 8003874:	45b8      	cmp	r8, r7
 8003876:	d003      	beq.n	8003880 <_dtoa_r+0x980>
 8003878:	4641      	mov	r1, r8
 800387a:	4620      	mov	r0, r4
 800387c:	f000 fa72 	bl	8003d64 <_Bfree>
 8003880:	4639      	mov	r1, r7
 8003882:	4620      	mov	r0, r4
 8003884:	f000 fa6e 	bl	8003d64 <_Bfree>
 8003888:	e69c      	b.n	80035c4 <_dtoa_r+0x6c4>
 800388a:	2600      	movs	r6, #0
 800388c:	4637      	mov	r7, r6
 800388e:	e7e1      	b.n	8003854 <_dtoa_r+0x954>
 8003890:	46bb      	mov	fp, r7
 8003892:	4637      	mov	r7, r6
 8003894:	e599      	b.n	80033ca <_dtoa_r+0x4ca>
 8003896:	bf00      	nop
 8003898:	40240000 	.word	0x40240000
 800389c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 80c8 	beq.w	8003a34 <_dtoa_r+0xb34>
 80038a4:	9b04      	ldr	r3, [sp, #16]
 80038a6:	9301      	str	r3, [sp, #4]
 80038a8:	2d00      	cmp	r5, #0
 80038aa:	dd05      	ble.n	80038b8 <_dtoa_r+0x9b8>
 80038ac:	4639      	mov	r1, r7
 80038ae:	462a      	mov	r2, r5
 80038b0:	4620      	mov	r0, r4
 80038b2:	f000 fc27 	bl	8004104 <__lshift>
 80038b6:	4607      	mov	r7, r0
 80038b8:	f1b8 0f00 	cmp.w	r8, #0
 80038bc:	d05b      	beq.n	8003976 <_dtoa_r+0xa76>
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	4620      	mov	r0, r4
 80038c2:	f000 fa0f 	bl	8003ce4 <_Balloc>
 80038c6:	4605      	mov	r5, r0
 80038c8:	b928      	cbnz	r0, 80038d6 <_dtoa_r+0x9d6>
 80038ca:	4b83      	ldr	r3, [pc, #524]	; (8003ad8 <_dtoa_r+0xbd8>)
 80038cc:	4602      	mov	r2, r0
 80038ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 80038d2:	f7ff bb2e 	b.w	8002f32 <_dtoa_r+0x32>
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	3202      	adds	r2, #2
 80038da:	0092      	lsls	r2, r2, #2
 80038dc:	f107 010c 	add.w	r1, r7, #12
 80038e0:	300c      	adds	r0, #12
 80038e2:	f000 ff53 	bl	800478c <memcpy>
 80038e6:	2201      	movs	r2, #1
 80038e8:	4629      	mov	r1, r5
 80038ea:	4620      	mov	r0, r4
 80038ec:	f000 fc0a 	bl	8004104 <__lshift>
 80038f0:	9b00      	ldr	r3, [sp, #0]
 80038f2:	3301      	adds	r3, #1
 80038f4:	9304      	str	r3, [sp, #16]
 80038f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80038fa:	4413      	add	r3, r2
 80038fc:	9308      	str	r3, [sp, #32]
 80038fe:	9b02      	ldr	r3, [sp, #8]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	46b8      	mov	r8, r7
 8003906:	9306      	str	r3, [sp, #24]
 8003908:	4607      	mov	r7, r0
 800390a:	9b04      	ldr	r3, [sp, #16]
 800390c:	4631      	mov	r1, r6
 800390e:	3b01      	subs	r3, #1
 8003910:	4650      	mov	r0, sl
 8003912:	9301      	str	r3, [sp, #4]
 8003914:	f7ff fa69 	bl	8002dea <quorem>
 8003918:	4641      	mov	r1, r8
 800391a:	9002      	str	r0, [sp, #8]
 800391c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003920:	4650      	mov	r0, sl
 8003922:	f000 fc5b 	bl	80041dc <__mcmp>
 8003926:	463a      	mov	r2, r7
 8003928:	9005      	str	r0, [sp, #20]
 800392a:	4631      	mov	r1, r6
 800392c:	4620      	mov	r0, r4
 800392e:	f000 fc71 	bl	8004214 <__mdiff>
 8003932:	68c2      	ldr	r2, [r0, #12]
 8003934:	4605      	mov	r5, r0
 8003936:	bb02      	cbnz	r2, 800397a <_dtoa_r+0xa7a>
 8003938:	4601      	mov	r1, r0
 800393a:	4650      	mov	r0, sl
 800393c:	f000 fc4e 	bl	80041dc <__mcmp>
 8003940:	4602      	mov	r2, r0
 8003942:	4629      	mov	r1, r5
 8003944:	4620      	mov	r0, r4
 8003946:	9209      	str	r2, [sp, #36]	; 0x24
 8003948:	f000 fa0c 	bl	8003d64 <_Bfree>
 800394c:	9b07      	ldr	r3, [sp, #28]
 800394e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003950:	9d04      	ldr	r5, [sp, #16]
 8003952:	ea43 0102 	orr.w	r1, r3, r2
 8003956:	9b06      	ldr	r3, [sp, #24]
 8003958:	4319      	orrs	r1, r3
 800395a:	d110      	bne.n	800397e <_dtoa_r+0xa7e>
 800395c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003960:	d029      	beq.n	80039b6 <_dtoa_r+0xab6>
 8003962:	9b05      	ldr	r3, [sp, #20]
 8003964:	2b00      	cmp	r3, #0
 8003966:	dd02      	ble.n	800396e <_dtoa_r+0xa6e>
 8003968:	9b02      	ldr	r3, [sp, #8]
 800396a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800396e:	9b01      	ldr	r3, [sp, #4]
 8003970:	f883 9000 	strb.w	r9, [r3]
 8003974:	e774      	b.n	8003860 <_dtoa_r+0x960>
 8003976:	4638      	mov	r0, r7
 8003978:	e7ba      	b.n	80038f0 <_dtoa_r+0x9f0>
 800397a:	2201      	movs	r2, #1
 800397c:	e7e1      	b.n	8003942 <_dtoa_r+0xa42>
 800397e:	9b05      	ldr	r3, [sp, #20]
 8003980:	2b00      	cmp	r3, #0
 8003982:	db04      	blt.n	800398e <_dtoa_r+0xa8e>
 8003984:	9907      	ldr	r1, [sp, #28]
 8003986:	430b      	orrs	r3, r1
 8003988:	9906      	ldr	r1, [sp, #24]
 800398a:	430b      	orrs	r3, r1
 800398c:	d120      	bne.n	80039d0 <_dtoa_r+0xad0>
 800398e:	2a00      	cmp	r2, #0
 8003990:	dded      	ble.n	800396e <_dtoa_r+0xa6e>
 8003992:	4651      	mov	r1, sl
 8003994:	2201      	movs	r2, #1
 8003996:	4620      	mov	r0, r4
 8003998:	f000 fbb4 	bl	8004104 <__lshift>
 800399c:	4631      	mov	r1, r6
 800399e:	4682      	mov	sl, r0
 80039a0:	f000 fc1c 	bl	80041dc <__mcmp>
 80039a4:	2800      	cmp	r0, #0
 80039a6:	dc03      	bgt.n	80039b0 <_dtoa_r+0xab0>
 80039a8:	d1e1      	bne.n	800396e <_dtoa_r+0xa6e>
 80039aa:	f019 0f01 	tst.w	r9, #1
 80039ae:	d0de      	beq.n	800396e <_dtoa_r+0xa6e>
 80039b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80039b4:	d1d8      	bne.n	8003968 <_dtoa_r+0xa68>
 80039b6:	9a01      	ldr	r2, [sp, #4]
 80039b8:	2339      	movs	r3, #57	; 0x39
 80039ba:	7013      	strb	r3, [r2, #0]
 80039bc:	462b      	mov	r3, r5
 80039be:	461d      	mov	r5, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80039c6:	2a39      	cmp	r2, #57	; 0x39
 80039c8:	d06c      	beq.n	8003aa4 <_dtoa_r+0xba4>
 80039ca:	3201      	adds	r2, #1
 80039cc:	701a      	strb	r2, [r3, #0]
 80039ce:	e747      	b.n	8003860 <_dtoa_r+0x960>
 80039d0:	2a00      	cmp	r2, #0
 80039d2:	dd07      	ble.n	80039e4 <_dtoa_r+0xae4>
 80039d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80039d8:	d0ed      	beq.n	80039b6 <_dtoa_r+0xab6>
 80039da:	9a01      	ldr	r2, [sp, #4]
 80039dc:	f109 0301 	add.w	r3, r9, #1
 80039e0:	7013      	strb	r3, [r2, #0]
 80039e2:	e73d      	b.n	8003860 <_dtoa_r+0x960>
 80039e4:	9b04      	ldr	r3, [sp, #16]
 80039e6:	9a08      	ldr	r2, [sp, #32]
 80039e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d043      	beq.n	8003a78 <_dtoa_r+0xb78>
 80039f0:	4651      	mov	r1, sl
 80039f2:	2300      	movs	r3, #0
 80039f4:	220a      	movs	r2, #10
 80039f6:	4620      	mov	r0, r4
 80039f8:	f000 f9d6 	bl	8003da8 <__multadd>
 80039fc:	45b8      	cmp	r8, r7
 80039fe:	4682      	mov	sl, r0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	f04f 020a 	mov.w	r2, #10
 8003a08:	4641      	mov	r1, r8
 8003a0a:	4620      	mov	r0, r4
 8003a0c:	d107      	bne.n	8003a1e <_dtoa_r+0xb1e>
 8003a0e:	f000 f9cb 	bl	8003da8 <__multadd>
 8003a12:	4680      	mov	r8, r0
 8003a14:	4607      	mov	r7, r0
 8003a16:	9b04      	ldr	r3, [sp, #16]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	9304      	str	r3, [sp, #16]
 8003a1c:	e775      	b.n	800390a <_dtoa_r+0xa0a>
 8003a1e:	f000 f9c3 	bl	8003da8 <__multadd>
 8003a22:	4639      	mov	r1, r7
 8003a24:	4680      	mov	r8, r0
 8003a26:	2300      	movs	r3, #0
 8003a28:	220a      	movs	r2, #10
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	f000 f9bc 	bl	8003da8 <__multadd>
 8003a30:	4607      	mov	r7, r0
 8003a32:	e7f0      	b.n	8003a16 <_dtoa_r+0xb16>
 8003a34:	9b04      	ldr	r3, [sp, #16]
 8003a36:	9301      	str	r3, [sp, #4]
 8003a38:	9d00      	ldr	r5, [sp, #0]
 8003a3a:	4631      	mov	r1, r6
 8003a3c:	4650      	mov	r0, sl
 8003a3e:	f7ff f9d4 	bl	8002dea <quorem>
 8003a42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003a46:	9b00      	ldr	r3, [sp, #0]
 8003a48:	f805 9b01 	strb.w	r9, [r5], #1
 8003a4c:	1aea      	subs	r2, r5, r3
 8003a4e:	9b01      	ldr	r3, [sp, #4]
 8003a50:	4293      	cmp	r3, r2
 8003a52:	dd07      	ble.n	8003a64 <_dtoa_r+0xb64>
 8003a54:	4651      	mov	r1, sl
 8003a56:	2300      	movs	r3, #0
 8003a58:	220a      	movs	r2, #10
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	f000 f9a4 	bl	8003da8 <__multadd>
 8003a60:	4682      	mov	sl, r0
 8003a62:	e7ea      	b.n	8003a3a <_dtoa_r+0xb3a>
 8003a64:	9b01      	ldr	r3, [sp, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bfc8      	it	gt
 8003a6a:	461d      	movgt	r5, r3
 8003a6c:	9b00      	ldr	r3, [sp, #0]
 8003a6e:	bfd8      	it	le
 8003a70:	2501      	movle	r5, #1
 8003a72:	441d      	add	r5, r3
 8003a74:	f04f 0800 	mov.w	r8, #0
 8003a78:	4651      	mov	r1, sl
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	f000 fb41 	bl	8004104 <__lshift>
 8003a82:	4631      	mov	r1, r6
 8003a84:	4682      	mov	sl, r0
 8003a86:	f000 fba9 	bl	80041dc <__mcmp>
 8003a8a:	2800      	cmp	r0, #0
 8003a8c:	dc96      	bgt.n	80039bc <_dtoa_r+0xabc>
 8003a8e:	d102      	bne.n	8003a96 <_dtoa_r+0xb96>
 8003a90:	f019 0f01 	tst.w	r9, #1
 8003a94:	d192      	bne.n	80039bc <_dtoa_r+0xabc>
 8003a96:	462b      	mov	r3, r5
 8003a98:	461d      	mov	r5, r3
 8003a9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003a9e:	2a30      	cmp	r2, #48	; 0x30
 8003aa0:	d0fa      	beq.n	8003a98 <_dtoa_r+0xb98>
 8003aa2:	e6dd      	b.n	8003860 <_dtoa_r+0x960>
 8003aa4:	9a00      	ldr	r2, [sp, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d189      	bne.n	80039be <_dtoa_r+0xabe>
 8003aaa:	f10b 0b01 	add.w	fp, fp, #1
 8003aae:	2331      	movs	r3, #49	; 0x31
 8003ab0:	e796      	b.n	80039e0 <_dtoa_r+0xae0>
 8003ab2:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <_dtoa_r+0xbdc>)
 8003ab4:	f7ff ba99 	b.w	8002fea <_dtoa_r+0xea>
 8003ab8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f47f aa6d 	bne.w	8002f9a <_dtoa_r+0x9a>
 8003ac0:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <_dtoa_r+0xbe0>)
 8003ac2:	f7ff ba92 	b.w	8002fea <_dtoa_r+0xea>
 8003ac6:	9b01      	ldr	r3, [sp, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	dcb5      	bgt.n	8003a38 <_dtoa_r+0xb38>
 8003acc:	9b07      	ldr	r3, [sp, #28]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	f73f aeb1 	bgt.w	8003836 <_dtoa_r+0x936>
 8003ad4:	e7b0      	b.n	8003a38 <_dtoa_r+0xb38>
 8003ad6:	bf00      	nop
 8003ad8:	080049e9 	.word	0x080049e9
 8003adc:	08004949 	.word	0x08004949
 8003ae0:	0800496d 	.word	0x0800496d

08003ae4 <_free_r>:
 8003ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ae6:	2900      	cmp	r1, #0
 8003ae8:	d044      	beq.n	8003b74 <_free_r+0x90>
 8003aea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003aee:	9001      	str	r0, [sp, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f1a1 0404 	sub.w	r4, r1, #4
 8003af6:	bfb8      	it	lt
 8003af8:	18e4      	addlt	r4, r4, r3
 8003afa:	f000 f8e7 	bl	8003ccc <__malloc_lock>
 8003afe:	4a1e      	ldr	r2, [pc, #120]	; (8003b78 <_free_r+0x94>)
 8003b00:	9801      	ldr	r0, [sp, #4]
 8003b02:	6813      	ldr	r3, [r2, #0]
 8003b04:	b933      	cbnz	r3, 8003b14 <_free_r+0x30>
 8003b06:	6063      	str	r3, [r4, #4]
 8003b08:	6014      	str	r4, [r2, #0]
 8003b0a:	b003      	add	sp, #12
 8003b0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b10:	f000 b8e2 	b.w	8003cd8 <__malloc_unlock>
 8003b14:	42a3      	cmp	r3, r4
 8003b16:	d908      	bls.n	8003b2a <_free_r+0x46>
 8003b18:	6825      	ldr	r5, [r4, #0]
 8003b1a:	1961      	adds	r1, r4, r5
 8003b1c:	428b      	cmp	r3, r1
 8003b1e:	bf01      	itttt	eq
 8003b20:	6819      	ldreq	r1, [r3, #0]
 8003b22:	685b      	ldreq	r3, [r3, #4]
 8003b24:	1949      	addeq	r1, r1, r5
 8003b26:	6021      	streq	r1, [r4, #0]
 8003b28:	e7ed      	b.n	8003b06 <_free_r+0x22>
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	b10b      	cbz	r3, 8003b34 <_free_r+0x50>
 8003b30:	42a3      	cmp	r3, r4
 8003b32:	d9fa      	bls.n	8003b2a <_free_r+0x46>
 8003b34:	6811      	ldr	r1, [r2, #0]
 8003b36:	1855      	adds	r5, r2, r1
 8003b38:	42a5      	cmp	r5, r4
 8003b3a:	d10b      	bne.n	8003b54 <_free_r+0x70>
 8003b3c:	6824      	ldr	r4, [r4, #0]
 8003b3e:	4421      	add	r1, r4
 8003b40:	1854      	adds	r4, r2, r1
 8003b42:	42a3      	cmp	r3, r4
 8003b44:	6011      	str	r1, [r2, #0]
 8003b46:	d1e0      	bne.n	8003b0a <_free_r+0x26>
 8003b48:	681c      	ldr	r4, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	6053      	str	r3, [r2, #4]
 8003b4e:	440c      	add	r4, r1
 8003b50:	6014      	str	r4, [r2, #0]
 8003b52:	e7da      	b.n	8003b0a <_free_r+0x26>
 8003b54:	d902      	bls.n	8003b5c <_free_r+0x78>
 8003b56:	230c      	movs	r3, #12
 8003b58:	6003      	str	r3, [r0, #0]
 8003b5a:	e7d6      	b.n	8003b0a <_free_r+0x26>
 8003b5c:	6825      	ldr	r5, [r4, #0]
 8003b5e:	1961      	adds	r1, r4, r5
 8003b60:	428b      	cmp	r3, r1
 8003b62:	bf04      	itt	eq
 8003b64:	6819      	ldreq	r1, [r3, #0]
 8003b66:	685b      	ldreq	r3, [r3, #4]
 8003b68:	6063      	str	r3, [r4, #4]
 8003b6a:	bf04      	itt	eq
 8003b6c:	1949      	addeq	r1, r1, r5
 8003b6e:	6021      	streq	r1, [r4, #0]
 8003b70:	6054      	str	r4, [r2, #4]
 8003b72:	e7ca      	b.n	8003b0a <_free_r+0x26>
 8003b74:	b003      	add	sp, #12
 8003b76:	bd30      	pop	{r4, r5, pc}
 8003b78:	20000334 	.word	0x20000334

08003b7c <malloc>:
 8003b7c:	4b02      	ldr	r3, [pc, #8]	; (8003b88 <malloc+0xc>)
 8003b7e:	4601      	mov	r1, r0
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	f000 b823 	b.w	8003bcc <_malloc_r>
 8003b86:	bf00      	nop
 8003b88:	2000005c 	.word	0x2000005c

08003b8c <sbrk_aligned>:
 8003b8c:	b570      	push	{r4, r5, r6, lr}
 8003b8e:	4e0e      	ldr	r6, [pc, #56]	; (8003bc8 <sbrk_aligned+0x3c>)
 8003b90:	460c      	mov	r4, r1
 8003b92:	6831      	ldr	r1, [r6, #0]
 8003b94:	4605      	mov	r5, r0
 8003b96:	b911      	cbnz	r1, 8003b9e <sbrk_aligned+0x12>
 8003b98:	f000 fde8 	bl	800476c <_sbrk_r>
 8003b9c:	6030      	str	r0, [r6, #0]
 8003b9e:	4621      	mov	r1, r4
 8003ba0:	4628      	mov	r0, r5
 8003ba2:	f000 fde3 	bl	800476c <_sbrk_r>
 8003ba6:	1c43      	adds	r3, r0, #1
 8003ba8:	d00a      	beq.n	8003bc0 <sbrk_aligned+0x34>
 8003baa:	1cc4      	adds	r4, r0, #3
 8003bac:	f024 0403 	bic.w	r4, r4, #3
 8003bb0:	42a0      	cmp	r0, r4
 8003bb2:	d007      	beq.n	8003bc4 <sbrk_aligned+0x38>
 8003bb4:	1a21      	subs	r1, r4, r0
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	f000 fdd8 	bl	800476c <_sbrk_r>
 8003bbc:	3001      	adds	r0, #1
 8003bbe:	d101      	bne.n	8003bc4 <sbrk_aligned+0x38>
 8003bc0:	f04f 34ff 	mov.w	r4, #4294967295
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}
 8003bc8:	20000338 	.word	0x20000338

08003bcc <_malloc_r>:
 8003bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bd0:	1ccd      	adds	r5, r1, #3
 8003bd2:	f025 0503 	bic.w	r5, r5, #3
 8003bd6:	3508      	adds	r5, #8
 8003bd8:	2d0c      	cmp	r5, #12
 8003bda:	bf38      	it	cc
 8003bdc:	250c      	movcc	r5, #12
 8003bde:	2d00      	cmp	r5, #0
 8003be0:	4607      	mov	r7, r0
 8003be2:	db01      	blt.n	8003be8 <_malloc_r+0x1c>
 8003be4:	42a9      	cmp	r1, r5
 8003be6:	d905      	bls.n	8003bf4 <_malloc_r+0x28>
 8003be8:	230c      	movs	r3, #12
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	2600      	movs	r6, #0
 8003bee:	4630      	mov	r0, r6
 8003bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bf4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003cc8 <_malloc_r+0xfc>
 8003bf8:	f000 f868 	bl	8003ccc <__malloc_lock>
 8003bfc:	f8d8 3000 	ldr.w	r3, [r8]
 8003c00:	461c      	mov	r4, r3
 8003c02:	bb5c      	cbnz	r4, 8003c5c <_malloc_r+0x90>
 8003c04:	4629      	mov	r1, r5
 8003c06:	4638      	mov	r0, r7
 8003c08:	f7ff ffc0 	bl	8003b8c <sbrk_aligned>
 8003c0c:	1c43      	adds	r3, r0, #1
 8003c0e:	4604      	mov	r4, r0
 8003c10:	d155      	bne.n	8003cbe <_malloc_r+0xf2>
 8003c12:	f8d8 4000 	ldr.w	r4, [r8]
 8003c16:	4626      	mov	r6, r4
 8003c18:	2e00      	cmp	r6, #0
 8003c1a:	d145      	bne.n	8003ca8 <_malloc_r+0xdc>
 8003c1c:	2c00      	cmp	r4, #0
 8003c1e:	d048      	beq.n	8003cb2 <_malloc_r+0xe6>
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	4631      	mov	r1, r6
 8003c24:	4638      	mov	r0, r7
 8003c26:	eb04 0903 	add.w	r9, r4, r3
 8003c2a:	f000 fd9f 	bl	800476c <_sbrk_r>
 8003c2e:	4581      	cmp	r9, r0
 8003c30:	d13f      	bne.n	8003cb2 <_malloc_r+0xe6>
 8003c32:	6821      	ldr	r1, [r4, #0]
 8003c34:	1a6d      	subs	r5, r5, r1
 8003c36:	4629      	mov	r1, r5
 8003c38:	4638      	mov	r0, r7
 8003c3a:	f7ff ffa7 	bl	8003b8c <sbrk_aligned>
 8003c3e:	3001      	adds	r0, #1
 8003c40:	d037      	beq.n	8003cb2 <_malloc_r+0xe6>
 8003c42:	6823      	ldr	r3, [r4, #0]
 8003c44:	442b      	add	r3, r5
 8003c46:	6023      	str	r3, [r4, #0]
 8003c48:	f8d8 3000 	ldr.w	r3, [r8]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d038      	beq.n	8003cc2 <_malloc_r+0xf6>
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	42a2      	cmp	r2, r4
 8003c54:	d12b      	bne.n	8003cae <_malloc_r+0xe2>
 8003c56:	2200      	movs	r2, #0
 8003c58:	605a      	str	r2, [r3, #4]
 8003c5a:	e00f      	b.n	8003c7c <_malloc_r+0xb0>
 8003c5c:	6822      	ldr	r2, [r4, #0]
 8003c5e:	1b52      	subs	r2, r2, r5
 8003c60:	d41f      	bmi.n	8003ca2 <_malloc_r+0xd6>
 8003c62:	2a0b      	cmp	r2, #11
 8003c64:	d917      	bls.n	8003c96 <_malloc_r+0xca>
 8003c66:	1961      	adds	r1, r4, r5
 8003c68:	42a3      	cmp	r3, r4
 8003c6a:	6025      	str	r5, [r4, #0]
 8003c6c:	bf18      	it	ne
 8003c6e:	6059      	strne	r1, [r3, #4]
 8003c70:	6863      	ldr	r3, [r4, #4]
 8003c72:	bf08      	it	eq
 8003c74:	f8c8 1000 	streq.w	r1, [r8]
 8003c78:	5162      	str	r2, [r4, r5]
 8003c7a:	604b      	str	r3, [r1, #4]
 8003c7c:	4638      	mov	r0, r7
 8003c7e:	f104 060b 	add.w	r6, r4, #11
 8003c82:	f000 f829 	bl	8003cd8 <__malloc_unlock>
 8003c86:	f026 0607 	bic.w	r6, r6, #7
 8003c8a:	1d23      	adds	r3, r4, #4
 8003c8c:	1af2      	subs	r2, r6, r3
 8003c8e:	d0ae      	beq.n	8003bee <_malloc_r+0x22>
 8003c90:	1b9b      	subs	r3, r3, r6
 8003c92:	50a3      	str	r3, [r4, r2]
 8003c94:	e7ab      	b.n	8003bee <_malloc_r+0x22>
 8003c96:	42a3      	cmp	r3, r4
 8003c98:	6862      	ldr	r2, [r4, #4]
 8003c9a:	d1dd      	bne.n	8003c58 <_malloc_r+0x8c>
 8003c9c:	f8c8 2000 	str.w	r2, [r8]
 8003ca0:	e7ec      	b.n	8003c7c <_malloc_r+0xb0>
 8003ca2:	4623      	mov	r3, r4
 8003ca4:	6864      	ldr	r4, [r4, #4]
 8003ca6:	e7ac      	b.n	8003c02 <_malloc_r+0x36>
 8003ca8:	4634      	mov	r4, r6
 8003caa:	6876      	ldr	r6, [r6, #4]
 8003cac:	e7b4      	b.n	8003c18 <_malloc_r+0x4c>
 8003cae:	4613      	mov	r3, r2
 8003cb0:	e7cc      	b.n	8003c4c <_malloc_r+0x80>
 8003cb2:	230c      	movs	r3, #12
 8003cb4:	603b      	str	r3, [r7, #0]
 8003cb6:	4638      	mov	r0, r7
 8003cb8:	f000 f80e 	bl	8003cd8 <__malloc_unlock>
 8003cbc:	e797      	b.n	8003bee <_malloc_r+0x22>
 8003cbe:	6025      	str	r5, [r4, #0]
 8003cc0:	e7dc      	b.n	8003c7c <_malloc_r+0xb0>
 8003cc2:	605b      	str	r3, [r3, #4]
 8003cc4:	deff      	udf	#255	; 0xff
 8003cc6:	bf00      	nop
 8003cc8:	20000334 	.word	0x20000334

08003ccc <__malloc_lock>:
 8003ccc:	4801      	ldr	r0, [pc, #4]	; (8003cd4 <__malloc_lock+0x8>)
 8003cce:	f7ff b88a 	b.w	8002de6 <__retarget_lock_acquire_recursive>
 8003cd2:	bf00      	nop
 8003cd4:	20000330 	.word	0x20000330

08003cd8 <__malloc_unlock>:
 8003cd8:	4801      	ldr	r0, [pc, #4]	; (8003ce0 <__malloc_unlock+0x8>)
 8003cda:	f7ff b885 	b.w	8002de8 <__retarget_lock_release_recursive>
 8003cde:	bf00      	nop
 8003ce0:	20000330 	.word	0x20000330

08003ce4 <_Balloc>:
 8003ce4:	b570      	push	{r4, r5, r6, lr}
 8003ce6:	69c6      	ldr	r6, [r0, #28]
 8003ce8:	4604      	mov	r4, r0
 8003cea:	460d      	mov	r5, r1
 8003cec:	b976      	cbnz	r6, 8003d0c <_Balloc+0x28>
 8003cee:	2010      	movs	r0, #16
 8003cf0:	f7ff ff44 	bl	8003b7c <malloc>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	61e0      	str	r0, [r4, #28]
 8003cf8:	b920      	cbnz	r0, 8003d04 <_Balloc+0x20>
 8003cfa:	4b18      	ldr	r3, [pc, #96]	; (8003d5c <_Balloc+0x78>)
 8003cfc:	4818      	ldr	r0, [pc, #96]	; (8003d60 <_Balloc+0x7c>)
 8003cfe:	216b      	movs	r1, #107	; 0x6b
 8003d00:	f000 fd52 	bl	80047a8 <__assert_func>
 8003d04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003d08:	6006      	str	r6, [r0, #0]
 8003d0a:	60c6      	str	r6, [r0, #12]
 8003d0c:	69e6      	ldr	r6, [r4, #28]
 8003d0e:	68f3      	ldr	r3, [r6, #12]
 8003d10:	b183      	cbz	r3, 8003d34 <_Balloc+0x50>
 8003d12:	69e3      	ldr	r3, [r4, #28]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003d1a:	b9b8      	cbnz	r0, 8003d4c <_Balloc+0x68>
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	fa01 f605 	lsl.w	r6, r1, r5
 8003d22:	1d72      	adds	r2, r6, #5
 8003d24:	0092      	lsls	r2, r2, #2
 8003d26:	4620      	mov	r0, r4
 8003d28:	f000 fd5c 	bl	80047e4 <_calloc_r>
 8003d2c:	b160      	cbz	r0, 8003d48 <_Balloc+0x64>
 8003d2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003d32:	e00e      	b.n	8003d52 <_Balloc+0x6e>
 8003d34:	2221      	movs	r2, #33	; 0x21
 8003d36:	2104      	movs	r1, #4
 8003d38:	4620      	mov	r0, r4
 8003d3a:	f000 fd53 	bl	80047e4 <_calloc_r>
 8003d3e:	69e3      	ldr	r3, [r4, #28]
 8003d40:	60f0      	str	r0, [r6, #12]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1e4      	bne.n	8003d12 <_Balloc+0x2e>
 8003d48:	2000      	movs	r0, #0
 8003d4a:	bd70      	pop	{r4, r5, r6, pc}
 8003d4c:	6802      	ldr	r2, [r0, #0]
 8003d4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003d52:	2300      	movs	r3, #0
 8003d54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003d58:	e7f7      	b.n	8003d4a <_Balloc+0x66>
 8003d5a:	bf00      	nop
 8003d5c:	0800497a 	.word	0x0800497a
 8003d60:	080049fa 	.word	0x080049fa

08003d64 <_Bfree>:
 8003d64:	b570      	push	{r4, r5, r6, lr}
 8003d66:	69c6      	ldr	r6, [r0, #28]
 8003d68:	4605      	mov	r5, r0
 8003d6a:	460c      	mov	r4, r1
 8003d6c:	b976      	cbnz	r6, 8003d8c <_Bfree+0x28>
 8003d6e:	2010      	movs	r0, #16
 8003d70:	f7ff ff04 	bl	8003b7c <malloc>
 8003d74:	4602      	mov	r2, r0
 8003d76:	61e8      	str	r0, [r5, #28]
 8003d78:	b920      	cbnz	r0, 8003d84 <_Bfree+0x20>
 8003d7a:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <_Bfree+0x3c>)
 8003d7c:	4809      	ldr	r0, [pc, #36]	; (8003da4 <_Bfree+0x40>)
 8003d7e:	218f      	movs	r1, #143	; 0x8f
 8003d80:	f000 fd12 	bl	80047a8 <__assert_func>
 8003d84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003d88:	6006      	str	r6, [r0, #0]
 8003d8a:	60c6      	str	r6, [r0, #12]
 8003d8c:	b13c      	cbz	r4, 8003d9e <_Bfree+0x3a>
 8003d8e:	69eb      	ldr	r3, [r5, #28]
 8003d90:	6862      	ldr	r2, [r4, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d98:	6021      	str	r1, [r4, #0]
 8003d9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003d9e:	bd70      	pop	{r4, r5, r6, pc}
 8003da0:	0800497a 	.word	0x0800497a
 8003da4:	080049fa 	.word	0x080049fa

08003da8 <__multadd>:
 8003da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dac:	690d      	ldr	r5, [r1, #16]
 8003dae:	4607      	mov	r7, r0
 8003db0:	460c      	mov	r4, r1
 8003db2:	461e      	mov	r6, r3
 8003db4:	f101 0c14 	add.w	ip, r1, #20
 8003db8:	2000      	movs	r0, #0
 8003dba:	f8dc 3000 	ldr.w	r3, [ip]
 8003dbe:	b299      	uxth	r1, r3
 8003dc0:	fb02 6101 	mla	r1, r2, r1, r6
 8003dc4:	0c1e      	lsrs	r6, r3, #16
 8003dc6:	0c0b      	lsrs	r3, r1, #16
 8003dc8:	fb02 3306 	mla	r3, r2, r6, r3
 8003dcc:	b289      	uxth	r1, r1
 8003dce:	3001      	adds	r0, #1
 8003dd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003dd4:	4285      	cmp	r5, r0
 8003dd6:	f84c 1b04 	str.w	r1, [ip], #4
 8003dda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003dde:	dcec      	bgt.n	8003dba <__multadd+0x12>
 8003de0:	b30e      	cbz	r6, 8003e26 <__multadd+0x7e>
 8003de2:	68a3      	ldr	r3, [r4, #8]
 8003de4:	42ab      	cmp	r3, r5
 8003de6:	dc19      	bgt.n	8003e1c <__multadd+0x74>
 8003de8:	6861      	ldr	r1, [r4, #4]
 8003dea:	4638      	mov	r0, r7
 8003dec:	3101      	adds	r1, #1
 8003dee:	f7ff ff79 	bl	8003ce4 <_Balloc>
 8003df2:	4680      	mov	r8, r0
 8003df4:	b928      	cbnz	r0, 8003e02 <__multadd+0x5a>
 8003df6:	4602      	mov	r2, r0
 8003df8:	4b0c      	ldr	r3, [pc, #48]	; (8003e2c <__multadd+0x84>)
 8003dfa:	480d      	ldr	r0, [pc, #52]	; (8003e30 <__multadd+0x88>)
 8003dfc:	21ba      	movs	r1, #186	; 0xba
 8003dfe:	f000 fcd3 	bl	80047a8 <__assert_func>
 8003e02:	6922      	ldr	r2, [r4, #16]
 8003e04:	3202      	adds	r2, #2
 8003e06:	f104 010c 	add.w	r1, r4, #12
 8003e0a:	0092      	lsls	r2, r2, #2
 8003e0c:	300c      	adds	r0, #12
 8003e0e:	f000 fcbd 	bl	800478c <memcpy>
 8003e12:	4621      	mov	r1, r4
 8003e14:	4638      	mov	r0, r7
 8003e16:	f7ff ffa5 	bl	8003d64 <_Bfree>
 8003e1a:	4644      	mov	r4, r8
 8003e1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003e20:	3501      	adds	r5, #1
 8003e22:	615e      	str	r6, [r3, #20]
 8003e24:	6125      	str	r5, [r4, #16]
 8003e26:	4620      	mov	r0, r4
 8003e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e2c:	080049e9 	.word	0x080049e9
 8003e30:	080049fa 	.word	0x080049fa

08003e34 <__hi0bits>:
 8003e34:	0c03      	lsrs	r3, r0, #16
 8003e36:	041b      	lsls	r3, r3, #16
 8003e38:	b9d3      	cbnz	r3, 8003e70 <__hi0bits+0x3c>
 8003e3a:	0400      	lsls	r0, r0, #16
 8003e3c:	2310      	movs	r3, #16
 8003e3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003e42:	bf04      	itt	eq
 8003e44:	0200      	lsleq	r0, r0, #8
 8003e46:	3308      	addeq	r3, #8
 8003e48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003e4c:	bf04      	itt	eq
 8003e4e:	0100      	lsleq	r0, r0, #4
 8003e50:	3304      	addeq	r3, #4
 8003e52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8003e56:	bf04      	itt	eq
 8003e58:	0080      	lsleq	r0, r0, #2
 8003e5a:	3302      	addeq	r3, #2
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	db05      	blt.n	8003e6c <__hi0bits+0x38>
 8003e60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003e64:	f103 0301 	add.w	r3, r3, #1
 8003e68:	bf08      	it	eq
 8003e6a:	2320      	moveq	r3, #32
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	4770      	bx	lr
 8003e70:	2300      	movs	r3, #0
 8003e72:	e7e4      	b.n	8003e3e <__hi0bits+0xa>

08003e74 <__lo0bits>:
 8003e74:	6803      	ldr	r3, [r0, #0]
 8003e76:	f013 0207 	ands.w	r2, r3, #7
 8003e7a:	d00c      	beq.n	8003e96 <__lo0bits+0x22>
 8003e7c:	07d9      	lsls	r1, r3, #31
 8003e7e:	d422      	bmi.n	8003ec6 <__lo0bits+0x52>
 8003e80:	079a      	lsls	r2, r3, #30
 8003e82:	bf49      	itett	mi
 8003e84:	085b      	lsrmi	r3, r3, #1
 8003e86:	089b      	lsrpl	r3, r3, #2
 8003e88:	6003      	strmi	r3, [r0, #0]
 8003e8a:	2201      	movmi	r2, #1
 8003e8c:	bf5c      	itt	pl
 8003e8e:	6003      	strpl	r3, [r0, #0]
 8003e90:	2202      	movpl	r2, #2
 8003e92:	4610      	mov	r0, r2
 8003e94:	4770      	bx	lr
 8003e96:	b299      	uxth	r1, r3
 8003e98:	b909      	cbnz	r1, 8003e9e <__lo0bits+0x2a>
 8003e9a:	0c1b      	lsrs	r3, r3, #16
 8003e9c:	2210      	movs	r2, #16
 8003e9e:	b2d9      	uxtb	r1, r3
 8003ea0:	b909      	cbnz	r1, 8003ea6 <__lo0bits+0x32>
 8003ea2:	3208      	adds	r2, #8
 8003ea4:	0a1b      	lsrs	r3, r3, #8
 8003ea6:	0719      	lsls	r1, r3, #28
 8003ea8:	bf04      	itt	eq
 8003eaa:	091b      	lsreq	r3, r3, #4
 8003eac:	3204      	addeq	r2, #4
 8003eae:	0799      	lsls	r1, r3, #30
 8003eb0:	bf04      	itt	eq
 8003eb2:	089b      	lsreq	r3, r3, #2
 8003eb4:	3202      	addeq	r2, #2
 8003eb6:	07d9      	lsls	r1, r3, #31
 8003eb8:	d403      	bmi.n	8003ec2 <__lo0bits+0x4e>
 8003eba:	085b      	lsrs	r3, r3, #1
 8003ebc:	f102 0201 	add.w	r2, r2, #1
 8003ec0:	d003      	beq.n	8003eca <__lo0bits+0x56>
 8003ec2:	6003      	str	r3, [r0, #0]
 8003ec4:	e7e5      	b.n	8003e92 <__lo0bits+0x1e>
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	e7e3      	b.n	8003e92 <__lo0bits+0x1e>
 8003eca:	2220      	movs	r2, #32
 8003ecc:	e7e1      	b.n	8003e92 <__lo0bits+0x1e>
	...

08003ed0 <__i2b>:
 8003ed0:	b510      	push	{r4, lr}
 8003ed2:	460c      	mov	r4, r1
 8003ed4:	2101      	movs	r1, #1
 8003ed6:	f7ff ff05 	bl	8003ce4 <_Balloc>
 8003eda:	4602      	mov	r2, r0
 8003edc:	b928      	cbnz	r0, 8003eea <__i2b+0x1a>
 8003ede:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <__i2b+0x24>)
 8003ee0:	4805      	ldr	r0, [pc, #20]	; (8003ef8 <__i2b+0x28>)
 8003ee2:	f240 1145 	movw	r1, #325	; 0x145
 8003ee6:	f000 fc5f 	bl	80047a8 <__assert_func>
 8003eea:	2301      	movs	r3, #1
 8003eec:	6144      	str	r4, [r0, #20]
 8003eee:	6103      	str	r3, [r0, #16]
 8003ef0:	bd10      	pop	{r4, pc}
 8003ef2:	bf00      	nop
 8003ef4:	080049e9 	.word	0x080049e9
 8003ef8:	080049fa 	.word	0x080049fa

08003efc <__multiply>:
 8003efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f00:	4691      	mov	r9, r2
 8003f02:	690a      	ldr	r2, [r1, #16]
 8003f04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	bfb8      	it	lt
 8003f0c:	460b      	movlt	r3, r1
 8003f0e:	460c      	mov	r4, r1
 8003f10:	bfbc      	itt	lt
 8003f12:	464c      	movlt	r4, r9
 8003f14:	4699      	movlt	r9, r3
 8003f16:	6927      	ldr	r7, [r4, #16]
 8003f18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003f1c:	68a3      	ldr	r3, [r4, #8]
 8003f1e:	6861      	ldr	r1, [r4, #4]
 8003f20:	eb07 060a 	add.w	r6, r7, sl
 8003f24:	42b3      	cmp	r3, r6
 8003f26:	b085      	sub	sp, #20
 8003f28:	bfb8      	it	lt
 8003f2a:	3101      	addlt	r1, #1
 8003f2c:	f7ff feda 	bl	8003ce4 <_Balloc>
 8003f30:	b930      	cbnz	r0, 8003f40 <__multiply+0x44>
 8003f32:	4602      	mov	r2, r0
 8003f34:	4b44      	ldr	r3, [pc, #272]	; (8004048 <__multiply+0x14c>)
 8003f36:	4845      	ldr	r0, [pc, #276]	; (800404c <__multiply+0x150>)
 8003f38:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8003f3c:	f000 fc34 	bl	80047a8 <__assert_func>
 8003f40:	f100 0514 	add.w	r5, r0, #20
 8003f44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003f48:	462b      	mov	r3, r5
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	4543      	cmp	r3, r8
 8003f4e:	d321      	bcc.n	8003f94 <__multiply+0x98>
 8003f50:	f104 0314 	add.w	r3, r4, #20
 8003f54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003f58:	f109 0314 	add.w	r3, r9, #20
 8003f5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003f60:	9202      	str	r2, [sp, #8]
 8003f62:	1b3a      	subs	r2, r7, r4
 8003f64:	3a15      	subs	r2, #21
 8003f66:	f022 0203 	bic.w	r2, r2, #3
 8003f6a:	3204      	adds	r2, #4
 8003f6c:	f104 0115 	add.w	r1, r4, #21
 8003f70:	428f      	cmp	r7, r1
 8003f72:	bf38      	it	cc
 8003f74:	2204      	movcc	r2, #4
 8003f76:	9201      	str	r2, [sp, #4]
 8003f78:	9a02      	ldr	r2, [sp, #8]
 8003f7a:	9303      	str	r3, [sp, #12]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d80c      	bhi.n	8003f9a <__multiply+0x9e>
 8003f80:	2e00      	cmp	r6, #0
 8003f82:	dd03      	ble.n	8003f8c <__multiply+0x90>
 8003f84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d05b      	beq.n	8004044 <__multiply+0x148>
 8003f8c:	6106      	str	r6, [r0, #16]
 8003f8e:	b005      	add	sp, #20
 8003f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f94:	f843 2b04 	str.w	r2, [r3], #4
 8003f98:	e7d8      	b.n	8003f4c <__multiply+0x50>
 8003f9a:	f8b3 a000 	ldrh.w	sl, [r3]
 8003f9e:	f1ba 0f00 	cmp.w	sl, #0
 8003fa2:	d024      	beq.n	8003fee <__multiply+0xf2>
 8003fa4:	f104 0e14 	add.w	lr, r4, #20
 8003fa8:	46a9      	mov	r9, r5
 8003faa:	f04f 0c00 	mov.w	ip, #0
 8003fae:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003fb2:	f8d9 1000 	ldr.w	r1, [r9]
 8003fb6:	fa1f fb82 	uxth.w	fp, r2
 8003fba:	b289      	uxth	r1, r1
 8003fbc:	fb0a 110b 	mla	r1, sl, fp, r1
 8003fc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8003fc4:	f8d9 2000 	ldr.w	r2, [r9]
 8003fc8:	4461      	add	r1, ip
 8003fca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003fce:	fb0a c20b 	mla	r2, sl, fp, ip
 8003fd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003fd6:	b289      	uxth	r1, r1
 8003fd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003fdc:	4577      	cmp	r7, lr
 8003fde:	f849 1b04 	str.w	r1, [r9], #4
 8003fe2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003fe6:	d8e2      	bhi.n	8003fae <__multiply+0xb2>
 8003fe8:	9a01      	ldr	r2, [sp, #4]
 8003fea:	f845 c002 	str.w	ip, [r5, r2]
 8003fee:	9a03      	ldr	r2, [sp, #12]
 8003ff0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	f1b9 0f00 	cmp.w	r9, #0
 8003ffa:	d021      	beq.n	8004040 <__multiply+0x144>
 8003ffc:	6829      	ldr	r1, [r5, #0]
 8003ffe:	f104 0c14 	add.w	ip, r4, #20
 8004002:	46ae      	mov	lr, r5
 8004004:	f04f 0a00 	mov.w	sl, #0
 8004008:	f8bc b000 	ldrh.w	fp, [ip]
 800400c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004010:	fb09 220b 	mla	r2, r9, fp, r2
 8004014:	4452      	add	r2, sl
 8004016:	b289      	uxth	r1, r1
 8004018:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800401c:	f84e 1b04 	str.w	r1, [lr], #4
 8004020:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004024:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004028:	f8be 1000 	ldrh.w	r1, [lr]
 800402c:	fb09 110a 	mla	r1, r9, sl, r1
 8004030:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004034:	4567      	cmp	r7, ip
 8004036:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800403a:	d8e5      	bhi.n	8004008 <__multiply+0x10c>
 800403c:	9a01      	ldr	r2, [sp, #4]
 800403e:	50a9      	str	r1, [r5, r2]
 8004040:	3504      	adds	r5, #4
 8004042:	e799      	b.n	8003f78 <__multiply+0x7c>
 8004044:	3e01      	subs	r6, #1
 8004046:	e79b      	b.n	8003f80 <__multiply+0x84>
 8004048:	080049e9 	.word	0x080049e9
 800404c:	080049fa 	.word	0x080049fa

08004050 <__pow5mult>:
 8004050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004054:	4615      	mov	r5, r2
 8004056:	f012 0203 	ands.w	r2, r2, #3
 800405a:	4606      	mov	r6, r0
 800405c:	460f      	mov	r7, r1
 800405e:	d007      	beq.n	8004070 <__pow5mult+0x20>
 8004060:	4c25      	ldr	r4, [pc, #148]	; (80040f8 <__pow5mult+0xa8>)
 8004062:	3a01      	subs	r2, #1
 8004064:	2300      	movs	r3, #0
 8004066:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800406a:	f7ff fe9d 	bl	8003da8 <__multadd>
 800406e:	4607      	mov	r7, r0
 8004070:	10ad      	asrs	r5, r5, #2
 8004072:	d03d      	beq.n	80040f0 <__pow5mult+0xa0>
 8004074:	69f4      	ldr	r4, [r6, #28]
 8004076:	b97c      	cbnz	r4, 8004098 <__pow5mult+0x48>
 8004078:	2010      	movs	r0, #16
 800407a:	f7ff fd7f 	bl	8003b7c <malloc>
 800407e:	4602      	mov	r2, r0
 8004080:	61f0      	str	r0, [r6, #28]
 8004082:	b928      	cbnz	r0, 8004090 <__pow5mult+0x40>
 8004084:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <__pow5mult+0xac>)
 8004086:	481e      	ldr	r0, [pc, #120]	; (8004100 <__pow5mult+0xb0>)
 8004088:	f240 11b3 	movw	r1, #435	; 0x1b3
 800408c:	f000 fb8c 	bl	80047a8 <__assert_func>
 8004090:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004094:	6004      	str	r4, [r0, #0]
 8004096:	60c4      	str	r4, [r0, #12]
 8004098:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800409c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80040a0:	b94c      	cbnz	r4, 80040b6 <__pow5mult+0x66>
 80040a2:	f240 2171 	movw	r1, #625	; 0x271
 80040a6:	4630      	mov	r0, r6
 80040a8:	f7ff ff12 	bl	8003ed0 <__i2b>
 80040ac:	2300      	movs	r3, #0
 80040ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80040b2:	4604      	mov	r4, r0
 80040b4:	6003      	str	r3, [r0, #0]
 80040b6:	f04f 0900 	mov.w	r9, #0
 80040ba:	07eb      	lsls	r3, r5, #31
 80040bc:	d50a      	bpl.n	80040d4 <__pow5mult+0x84>
 80040be:	4639      	mov	r1, r7
 80040c0:	4622      	mov	r2, r4
 80040c2:	4630      	mov	r0, r6
 80040c4:	f7ff ff1a 	bl	8003efc <__multiply>
 80040c8:	4639      	mov	r1, r7
 80040ca:	4680      	mov	r8, r0
 80040cc:	4630      	mov	r0, r6
 80040ce:	f7ff fe49 	bl	8003d64 <_Bfree>
 80040d2:	4647      	mov	r7, r8
 80040d4:	106d      	asrs	r5, r5, #1
 80040d6:	d00b      	beq.n	80040f0 <__pow5mult+0xa0>
 80040d8:	6820      	ldr	r0, [r4, #0]
 80040da:	b938      	cbnz	r0, 80040ec <__pow5mult+0x9c>
 80040dc:	4622      	mov	r2, r4
 80040de:	4621      	mov	r1, r4
 80040e0:	4630      	mov	r0, r6
 80040e2:	f7ff ff0b 	bl	8003efc <__multiply>
 80040e6:	6020      	str	r0, [r4, #0]
 80040e8:	f8c0 9000 	str.w	r9, [r0]
 80040ec:	4604      	mov	r4, r0
 80040ee:	e7e4      	b.n	80040ba <__pow5mult+0x6a>
 80040f0:	4638      	mov	r0, r7
 80040f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040f6:	bf00      	nop
 80040f8:	08004b48 	.word	0x08004b48
 80040fc:	0800497a 	.word	0x0800497a
 8004100:	080049fa 	.word	0x080049fa

08004104 <__lshift>:
 8004104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004108:	460c      	mov	r4, r1
 800410a:	6849      	ldr	r1, [r1, #4]
 800410c:	6923      	ldr	r3, [r4, #16]
 800410e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004112:	68a3      	ldr	r3, [r4, #8]
 8004114:	4607      	mov	r7, r0
 8004116:	4691      	mov	r9, r2
 8004118:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800411c:	f108 0601 	add.w	r6, r8, #1
 8004120:	42b3      	cmp	r3, r6
 8004122:	db0b      	blt.n	800413c <__lshift+0x38>
 8004124:	4638      	mov	r0, r7
 8004126:	f7ff fddd 	bl	8003ce4 <_Balloc>
 800412a:	4605      	mov	r5, r0
 800412c:	b948      	cbnz	r0, 8004142 <__lshift+0x3e>
 800412e:	4602      	mov	r2, r0
 8004130:	4b28      	ldr	r3, [pc, #160]	; (80041d4 <__lshift+0xd0>)
 8004132:	4829      	ldr	r0, [pc, #164]	; (80041d8 <__lshift+0xd4>)
 8004134:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8004138:	f000 fb36 	bl	80047a8 <__assert_func>
 800413c:	3101      	adds	r1, #1
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	e7ee      	b.n	8004120 <__lshift+0x1c>
 8004142:	2300      	movs	r3, #0
 8004144:	f100 0114 	add.w	r1, r0, #20
 8004148:	f100 0210 	add.w	r2, r0, #16
 800414c:	4618      	mov	r0, r3
 800414e:	4553      	cmp	r3, sl
 8004150:	db33      	blt.n	80041ba <__lshift+0xb6>
 8004152:	6920      	ldr	r0, [r4, #16]
 8004154:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004158:	f104 0314 	add.w	r3, r4, #20
 800415c:	f019 091f 	ands.w	r9, r9, #31
 8004160:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004164:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004168:	d02b      	beq.n	80041c2 <__lshift+0xbe>
 800416a:	f1c9 0e20 	rsb	lr, r9, #32
 800416e:	468a      	mov	sl, r1
 8004170:	2200      	movs	r2, #0
 8004172:	6818      	ldr	r0, [r3, #0]
 8004174:	fa00 f009 	lsl.w	r0, r0, r9
 8004178:	4310      	orrs	r0, r2
 800417a:	f84a 0b04 	str.w	r0, [sl], #4
 800417e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004182:	459c      	cmp	ip, r3
 8004184:	fa22 f20e 	lsr.w	r2, r2, lr
 8004188:	d8f3      	bhi.n	8004172 <__lshift+0x6e>
 800418a:	ebac 0304 	sub.w	r3, ip, r4
 800418e:	3b15      	subs	r3, #21
 8004190:	f023 0303 	bic.w	r3, r3, #3
 8004194:	3304      	adds	r3, #4
 8004196:	f104 0015 	add.w	r0, r4, #21
 800419a:	4584      	cmp	ip, r0
 800419c:	bf38      	it	cc
 800419e:	2304      	movcc	r3, #4
 80041a0:	50ca      	str	r2, [r1, r3]
 80041a2:	b10a      	cbz	r2, 80041a8 <__lshift+0xa4>
 80041a4:	f108 0602 	add.w	r6, r8, #2
 80041a8:	3e01      	subs	r6, #1
 80041aa:	4638      	mov	r0, r7
 80041ac:	612e      	str	r6, [r5, #16]
 80041ae:	4621      	mov	r1, r4
 80041b0:	f7ff fdd8 	bl	8003d64 <_Bfree>
 80041b4:	4628      	mov	r0, r5
 80041b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80041be:	3301      	adds	r3, #1
 80041c0:	e7c5      	b.n	800414e <__lshift+0x4a>
 80041c2:	3904      	subs	r1, #4
 80041c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80041c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80041cc:	459c      	cmp	ip, r3
 80041ce:	d8f9      	bhi.n	80041c4 <__lshift+0xc0>
 80041d0:	e7ea      	b.n	80041a8 <__lshift+0xa4>
 80041d2:	bf00      	nop
 80041d4:	080049e9 	.word	0x080049e9
 80041d8:	080049fa 	.word	0x080049fa

080041dc <__mcmp>:
 80041dc:	b530      	push	{r4, r5, lr}
 80041de:	6902      	ldr	r2, [r0, #16]
 80041e0:	690c      	ldr	r4, [r1, #16]
 80041e2:	1b12      	subs	r2, r2, r4
 80041e4:	d10e      	bne.n	8004204 <__mcmp+0x28>
 80041e6:	f100 0314 	add.w	r3, r0, #20
 80041ea:	3114      	adds	r1, #20
 80041ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80041f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80041f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80041f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80041fc:	42a5      	cmp	r5, r4
 80041fe:	d003      	beq.n	8004208 <__mcmp+0x2c>
 8004200:	d305      	bcc.n	800420e <__mcmp+0x32>
 8004202:	2201      	movs	r2, #1
 8004204:	4610      	mov	r0, r2
 8004206:	bd30      	pop	{r4, r5, pc}
 8004208:	4283      	cmp	r3, r0
 800420a:	d3f3      	bcc.n	80041f4 <__mcmp+0x18>
 800420c:	e7fa      	b.n	8004204 <__mcmp+0x28>
 800420e:	f04f 32ff 	mov.w	r2, #4294967295
 8004212:	e7f7      	b.n	8004204 <__mcmp+0x28>

08004214 <__mdiff>:
 8004214:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004218:	460c      	mov	r4, r1
 800421a:	4606      	mov	r6, r0
 800421c:	4611      	mov	r1, r2
 800421e:	4620      	mov	r0, r4
 8004220:	4690      	mov	r8, r2
 8004222:	f7ff ffdb 	bl	80041dc <__mcmp>
 8004226:	1e05      	subs	r5, r0, #0
 8004228:	d110      	bne.n	800424c <__mdiff+0x38>
 800422a:	4629      	mov	r1, r5
 800422c:	4630      	mov	r0, r6
 800422e:	f7ff fd59 	bl	8003ce4 <_Balloc>
 8004232:	b930      	cbnz	r0, 8004242 <__mdiff+0x2e>
 8004234:	4b3a      	ldr	r3, [pc, #232]	; (8004320 <__mdiff+0x10c>)
 8004236:	4602      	mov	r2, r0
 8004238:	f240 2137 	movw	r1, #567	; 0x237
 800423c:	4839      	ldr	r0, [pc, #228]	; (8004324 <__mdiff+0x110>)
 800423e:	f000 fab3 	bl	80047a8 <__assert_func>
 8004242:	2301      	movs	r3, #1
 8004244:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004248:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800424c:	bfa4      	itt	ge
 800424e:	4643      	movge	r3, r8
 8004250:	46a0      	movge	r8, r4
 8004252:	4630      	mov	r0, r6
 8004254:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004258:	bfa6      	itte	ge
 800425a:	461c      	movge	r4, r3
 800425c:	2500      	movge	r5, #0
 800425e:	2501      	movlt	r5, #1
 8004260:	f7ff fd40 	bl	8003ce4 <_Balloc>
 8004264:	b920      	cbnz	r0, 8004270 <__mdiff+0x5c>
 8004266:	4b2e      	ldr	r3, [pc, #184]	; (8004320 <__mdiff+0x10c>)
 8004268:	4602      	mov	r2, r0
 800426a:	f240 2145 	movw	r1, #581	; 0x245
 800426e:	e7e5      	b.n	800423c <__mdiff+0x28>
 8004270:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004274:	6926      	ldr	r6, [r4, #16]
 8004276:	60c5      	str	r5, [r0, #12]
 8004278:	f104 0914 	add.w	r9, r4, #20
 800427c:	f108 0514 	add.w	r5, r8, #20
 8004280:	f100 0e14 	add.w	lr, r0, #20
 8004284:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004288:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800428c:	f108 0210 	add.w	r2, r8, #16
 8004290:	46f2      	mov	sl, lr
 8004292:	2100      	movs	r1, #0
 8004294:	f859 3b04 	ldr.w	r3, [r9], #4
 8004298:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800429c:	fa11 f88b 	uxtah	r8, r1, fp
 80042a0:	b299      	uxth	r1, r3
 80042a2:	0c1b      	lsrs	r3, r3, #16
 80042a4:	eba8 0801 	sub.w	r8, r8, r1
 80042a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80042ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80042b0:	fa1f f888 	uxth.w	r8, r8
 80042b4:	1419      	asrs	r1, r3, #16
 80042b6:	454e      	cmp	r6, r9
 80042b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80042bc:	f84a 3b04 	str.w	r3, [sl], #4
 80042c0:	d8e8      	bhi.n	8004294 <__mdiff+0x80>
 80042c2:	1b33      	subs	r3, r6, r4
 80042c4:	3b15      	subs	r3, #21
 80042c6:	f023 0303 	bic.w	r3, r3, #3
 80042ca:	3304      	adds	r3, #4
 80042cc:	3415      	adds	r4, #21
 80042ce:	42a6      	cmp	r6, r4
 80042d0:	bf38      	it	cc
 80042d2:	2304      	movcc	r3, #4
 80042d4:	441d      	add	r5, r3
 80042d6:	4473      	add	r3, lr
 80042d8:	469e      	mov	lr, r3
 80042da:	462e      	mov	r6, r5
 80042dc:	4566      	cmp	r6, ip
 80042de:	d30e      	bcc.n	80042fe <__mdiff+0xea>
 80042e0:	f10c 0203 	add.w	r2, ip, #3
 80042e4:	1b52      	subs	r2, r2, r5
 80042e6:	f022 0203 	bic.w	r2, r2, #3
 80042ea:	3d03      	subs	r5, #3
 80042ec:	45ac      	cmp	ip, r5
 80042ee:	bf38      	it	cc
 80042f0:	2200      	movcc	r2, #0
 80042f2:	4413      	add	r3, r2
 80042f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80042f8:	b17a      	cbz	r2, 800431a <__mdiff+0x106>
 80042fa:	6107      	str	r7, [r0, #16]
 80042fc:	e7a4      	b.n	8004248 <__mdiff+0x34>
 80042fe:	f856 8b04 	ldr.w	r8, [r6], #4
 8004302:	fa11 f288 	uxtah	r2, r1, r8
 8004306:	1414      	asrs	r4, r2, #16
 8004308:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800430c:	b292      	uxth	r2, r2
 800430e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8004312:	f84e 2b04 	str.w	r2, [lr], #4
 8004316:	1421      	asrs	r1, r4, #16
 8004318:	e7e0      	b.n	80042dc <__mdiff+0xc8>
 800431a:	3f01      	subs	r7, #1
 800431c:	e7ea      	b.n	80042f4 <__mdiff+0xe0>
 800431e:	bf00      	nop
 8004320:	080049e9 	.word	0x080049e9
 8004324:	080049fa 	.word	0x080049fa

08004328 <__d2b>:
 8004328:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800432c:	460f      	mov	r7, r1
 800432e:	2101      	movs	r1, #1
 8004330:	ec59 8b10 	vmov	r8, r9, d0
 8004334:	4616      	mov	r6, r2
 8004336:	f7ff fcd5 	bl	8003ce4 <_Balloc>
 800433a:	4604      	mov	r4, r0
 800433c:	b930      	cbnz	r0, 800434c <__d2b+0x24>
 800433e:	4602      	mov	r2, r0
 8004340:	4b24      	ldr	r3, [pc, #144]	; (80043d4 <__d2b+0xac>)
 8004342:	4825      	ldr	r0, [pc, #148]	; (80043d8 <__d2b+0xb0>)
 8004344:	f240 310f 	movw	r1, #783	; 0x30f
 8004348:	f000 fa2e 	bl	80047a8 <__assert_func>
 800434c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004350:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004354:	bb2d      	cbnz	r5, 80043a2 <__d2b+0x7a>
 8004356:	9301      	str	r3, [sp, #4]
 8004358:	f1b8 0300 	subs.w	r3, r8, #0
 800435c:	d026      	beq.n	80043ac <__d2b+0x84>
 800435e:	4668      	mov	r0, sp
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	f7ff fd87 	bl	8003e74 <__lo0bits>
 8004366:	e9dd 1200 	ldrd	r1, r2, [sp]
 800436a:	b1e8      	cbz	r0, 80043a8 <__d2b+0x80>
 800436c:	f1c0 0320 	rsb	r3, r0, #32
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	430b      	orrs	r3, r1
 8004376:	40c2      	lsrs	r2, r0
 8004378:	6163      	str	r3, [r4, #20]
 800437a:	9201      	str	r2, [sp, #4]
 800437c:	9b01      	ldr	r3, [sp, #4]
 800437e:	61a3      	str	r3, [r4, #24]
 8004380:	2b00      	cmp	r3, #0
 8004382:	bf14      	ite	ne
 8004384:	2202      	movne	r2, #2
 8004386:	2201      	moveq	r2, #1
 8004388:	6122      	str	r2, [r4, #16]
 800438a:	b1bd      	cbz	r5, 80043bc <__d2b+0x94>
 800438c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004390:	4405      	add	r5, r0
 8004392:	603d      	str	r5, [r7, #0]
 8004394:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004398:	6030      	str	r0, [r6, #0]
 800439a:	4620      	mov	r0, r4
 800439c:	b003      	add	sp, #12
 800439e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80043a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043a6:	e7d6      	b.n	8004356 <__d2b+0x2e>
 80043a8:	6161      	str	r1, [r4, #20]
 80043aa:	e7e7      	b.n	800437c <__d2b+0x54>
 80043ac:	a801      	add	r0, sp, #4
 80043ae:	f7ff fd61 	bl	8003e74 <__lo0bits>
 80043b2:	9b01      	ldr	r3, [sp, #4]
 80043b4:	6163      	str	r3, [r4, #20]
 80043b6:	3020      	adds	r0, #32
 80043b8:	2201      	movs	r2, #1
 80043ba:	e7e5      	b.n	8004388 <__d2b+0x60>
 80043bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80043c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80043c4:	6038      	str	r0, [r7, #0]
 80043c6:	6918      	ldr	r0, [r3, #16]
 80043c8:	f7ff fd34 	bl	8003e34 <__hi0bits>
 80043cc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80043d0:	e7e2      	b.n	8004398 <__d2b+0x70>
 80043d2:	bf00      	nop
 80043d4:	080049e9 	.word	0x080049e9
 80043d8:	080049fa 	.word	0x080049fa

080043dc <__sfputc_r>:
 80043dc:	6893      	ldr	r3, [r2, #8]
 80043de:	3b01      	subs	r3, #1
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	b410      	push	{r4}
 80043e4:	6093      	str	r3, [r2, #8]
 80043e6:	da08      	bge.n	80043fa <__sfputc_r+0x1e>
 80043e8:	6994      	ldr	r4, [r2, #24]
 80043ea:	42a3      	cmp	r3, r4
 80043ec:	db01      	blt.n	80043f2 <__sfputc_r+0x16>
 80043ee:	290a      	cmp	r1, #10
 80043f0:	d103      	bne.n	80043fa <__sfputc_r+0x1e>
 80043f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80043f6:	f7fe bbe4 	b.w	8002bc2 <__swbuf_r>
 80043fa:	6813      	ldr	r3, [r2, #0]
 80043fc:	1c58      	adds	r0, r3, #1
 80043fe:	6010      	str	r0, [r2, #0]
 8004400:	7019      	strb	r1, [r3, #0]
 8004402:	4608      	mov	r0, r1
 8004404:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004408:	4770      	bx	lr

0800440a <__sfputs_r>:
 800440a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440c:	4606      	mov	r6, r0
 800440e:	460f      	mov	r7, r1
 8004410:	4614      	mov	r4, r2
 8004412:	18d5      	adds	r5, r2, r3
 8004414:	42ac      	cmp	r4, r5
 8004416:	d101      	bne.n	800441c <__sfputs_r+0x12>
 8004418:	2000      	movs	r0, #0
 800441a:	e007      	b.n	800442c <__sfputs_r+0x22>
 800441c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004420:	463a      	mov	r2, r7
 8004422:	4630      	mov	r0, r6
 8004424:	f7ff ffda 	bl	80043dc <__sfputc_r>
 8004428:	1c43      	adds	r3, r0, #1
 800442a:	d1f3      	bne.n	8004414 <__sfputs_r+0xa>
 800442c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004430 <_vfiprintf_r>:
 8004430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004434:	460d      	mov	r5, r1
 8004436:	b09d      	sub	sp, #116	; 0x74
 8004438:	4614      	mov	r4, r2
 800443a:	4698      	mov	r8, r3
 800443c:	4606      	mov	r6, r0
 800443e:	b118      	cbz	r0, 8004448 <_vfiprintf_r+0x18>
 8004440:	6a03      	ldr	r3, [r0, #32]
 8004442:	b90b      	cbnz	r3, 8004448 <_vfiprintf_r+0x18>
 8004444:	f7fe fb20 	bl	8002a88 <__sinit>
 8004448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800444a:	07d9      	lsls	r1, r3, #31
 800444c:	d405      	bmi.n	800445a <_vfiprintf_r+0x2a>
 800444e:	89ab      	ldrh	r3, [r5, #12]
 8004450:	059a      	lsls	r2, r3, #22
 8004452:	d402      	bmi.n	800445a <_vfiprintf_r+0x2a>
 8004454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004456:	f7fe fcc6 	bl	8002de6 <__retarget_lock_acquire_recursive>
 800445a:	89ab      	ldrh	r3, [r5, #12]
 800445c:	071b      	lsls	r3, r3, #28
 800445e:	d501      	bpl.n	8004464 <_vfiprintf_r+0x34>
 8004460:	692b      	ldr	r3, [r5, #16]
 8004462:	b99b      	cbnz	r3, 800448c <_vfiprintf_r+0x5c>
 8004464:	4629      	mov	r1, r5
 8004466:	4630      	mov	r0, r6
 8004468:	f7fe fbe8 	bl	8002c3c <__swsetup_r>
 800446c:	b170      	cbz	r0, 800448c <_vfiprintf_r+0x5c>
 800446e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004470:	07dc      	lsls	r4, r3, #31
 8004472:	d504      	bpl.n	800447e <_vfiprintf_r+0x4e>
 8004474:	f04f 30ff 	mov.w	r0, #4294967295
 8004478:	b01d      	add	sp, #116	; 0x74
 800447a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800447e:	89ab      	ldrh	r3, [r5, #12]
 8004480:	0598      	lsls	r0, r3, #22
 8004482:	d4f7      	bmi.n	8004474 <_vfiprintf_r+0x44>
 8004484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004486:	f7fe fcaf 	bl	8002de8 <__retarget_lock_release_recursive>
 800448a:	e7f3      	b.n	8004474 <_vfiprintf_r+0x44>
 800448c:	2300      	movs	r3, #0
 800448e:	9309      	str	r3, [sp, #36]	; 0x24
 8004490:	2320      	movs	r3, #32
 8004492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004496:	f8cd 800c 	str.w	r8, [sp, #12]
 800449a:	2330      	movs	r3, #48	; 0x30
 800449c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004650 <_vfiprintf_r+0x220>
 80044a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044a4:	f04f 0901 	mov.w	r9, #1
 80044a8:	4623      	mov	r3, r4
 80044aa:	469a      	mov	sl, r3
 80044ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044b0:	b10a      	cbz	r2, 80044b6 <_vfiprintf_r+0x86>
 80044b2:	2a25      	cmp	r2, #37	; 0x25
 80044b4:	d1f9      	bne.n	80044aa <_vfiprintf_r+0x7a>
 80044b6:	ebba 0b04 	subs.w	fp, sl, r4
 80044ba:	d00b      	beq.n	80044d4 <_vfiprintf_r+0xa4>
 80044bc:	465b      	mov	r3, fp
 80044be:	4622      	mov	r2, r4
 80044c0:	4629      	mov	r1, r5
 80044c2:	4630      	mov	r0, r6
 80044c4:	f7ff ffa1 	bl	800440a <__sfputs_r>
 80044c8:	3001      	adds	r0, #1
 80044ca:	f000 80a9 	beq.w	8004620 <_vfiprintf_r+0x1f0>
 80044ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044d0:	445a      	add	r2, fp
 80044d2:	9209      	str	r2, [sp, #36]	; 0x24
 80044d4:	f89a 3000 	ldrb.w	r3, [sl]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80a1 	beq.w	8004620 <_vfiprintf_r+0x1f0>
 80044de:	2300      	movs	r3, #0
 80044e0:	f04f 32ff 	mov.w	r2, #4294967295
 80044e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80044e8:	f10a 0a01 	add.w	sl, sl, #1
 80044ec:	9304      	str	r3, [sp, #16]
 80044ee:	9307      	str	r3, [sp, #28]
 80044f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80044f4:	931a      	str	r3, [sp, #104]	; 0x68
 80044f6:	4654      	mov	r4, sl
 80044f8:	2205      	movs	r2, #5
 80044fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044fe:	4854      	ldr	r0, [pc, #336]	; (8004650 <_vfiprintf_r+0x220>)
 8004500:	f7fb fe6e 	bl	80001e0 <memchr>
 8004504:	9a04      	ldr	r2, [sp, #16]
 8004506:	b9d8      	cbnz	r0, 8004540 <_vfiprintf_r+0x110>
 8004508:	06d1      	lsls	r1, r2, #27
 800450a:	bf44      	itt	mi
 800450c:	2320      	movmi	r3, #32
 800450e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004512:	0713      	lsls	r3, r2, #28
 8004514:	bf44      	itt	mi
 8004516:	232b      	movmi	r3, #43	; 0x2b
 8004518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800451c:	f89a 3000 	ldrb.w	r3, [sl]
 8004520:	2b2a      	cmp	r3, #42	; 0x2a
 8004522:	d015      	beq.n	8004550 <_vfiprintf_r+0x120>
 8004524:	9a07      	ldr	r2, [sp, #28]
 8004526:	4654      	mov	r4, sl
 8004528:	2000      	movs	r0, #0
 800452a:	f04f 0c0a 	mov.w	ip, #10
 800452e:	4621      	mov	r1, r4
 8004530:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004534:	3b30      	subs	r3, #48	; 0x30
 8004536:	2b09      	cmp	r3, #9
 8004538:	d94d      	bls.n	80045d6 <_vfiprintf_r+0x1a6>
 800453a:	b1b0      	cbz	r0, 800456a <_vfiprintf_r+0x13a>
 800453c:	9207      	str	r2, [sp, #28]
 800453e:	e014      	b.n	800456a <_vfiprintf_r+0x13a>
 8004540:	eba0 0308 	sub.w	r3, r0, r8
 8004544:	fa09 f303 	lsl.w	r3, r9, r3
 8004548:	4313      	orrs	r3, r2
 800454a:	9304      	str	r3, [sp, #16]
 800454c:	46a2      	mov	sl, r4
 800454e:	e7d2      	b.n	80044f6 <_vfiprintf_r+0xc6>
 8004550:	9b03      	ldr	r3, [sp, #12]
 8004552:	1d19      	adds	r1, r3, #4
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	9103      	str	r1, [sp, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	bfbb      	ittet	lt
 800455c:	425b      	neglt	r3, r3
 800455e:	f042 0202 	orrlt.w	r2, r2, #2
 8004562:	9307      	strge	r3, [sp, #28]
 8004564:	9307      	strlt	r3, [sp, #28]
 8004566:	bfb8      	it	lt
 8004568:	9204      	strlt	r2, [sp, #16]
 800456a:	7823      	ldrb	r3, [r4, #0]
 800456c:	2b2e      	cmp	r3, #46	; 0x2e
 800456e:	d10c      	bne.n	800458a <_vfiprintf_r+0x15a>
 8004570:	7863      	ldrb	r3, [r4, #1]
 8004572:	2b2a      	cmp	r3, #42	; 0x2a
 8004574:	d134      	bne.n	80045e0 <_vfiprintf_r+0x1b0>
 8004576:	9b03      	ldr	r3, [sp, #12]
 8004578:	1d1a      	adds	r2, r3, #4
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	9203      	str	r2, [sp, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	bfb8      	it	lt
 8004582:	f04f 33ff 	movlt.w	r3, #4294967295
 8004586:	3402      	adds	r4, #2
 8004588:	9305      	str	r3, [sp, #20]
 800458a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004660 <_vfiprintf_r+0x230>
 800458e:	7821      	ldrb	r1, [r4, #0]
 8004590:	2203      	movs	r2, #3
 8004592:	4650      	mov	r0, sl
 8004594:	f7fb fe24 	bl	80001e0 <memchr>
 8004598:	b138      	cbz	r0, 80045aa <_vfiprintf_r+0x17a>
 800459a:	9b04      	ldr	r3, [sp, #16]
 800459c:	eba0 000a 	sub.w	r0, r0, sl
 80045a0:	2240      	movs	r2, #64	; 0x40
 80045a2:	4082      	lsls	r2, r0
 80045a4:	4313      	orrs	r3, r2
 80045a6:	3401      	adds	r4, #1
 80045a8:	9304      	str	r3, [sp, #16]
 80045aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045ae:	4829      	ldr	r0, [pc, #164]	; (8004654 <_vfiprintf_r+0x224>)
 80045b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045b4:	2206      	movs	r2, #6
 80045b6:	f7fb fe13 	bl	80001e0 <memchr>
 80045ba:	2800      	cmp	r0, #0
 80045bc:	d03f      	beq.n	800463e <_vfiprintf_r+0x20e>
 80045be:	4b26      	ldr	r3, [pc, #152]	; (8004658 <_vfiprintf_r+0x228>)
 80045c0:	bb1b      	cbnz	r3, 800460a <_vfiprintf_r+0x1da>
 80045c2:	9b03      	ldr	r3, [sp, #12]
 80045c4:	3307      	adds	r3, #7
 80045c6:	f023 0307 	bic.w	r3, r3, #7
 80045ca:	3308      	adds	r3, #8
 80045cc:	9303      	str	r3, [sp, #12]
 80045ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045d0:	443b      	add	r3, r7
 80045d2:	9309      	str	r3, [sp, #36]	; 0x24
 80045d4:	e768      	b.n	80044a8 <_vfiprintf_r+0x78>
 80045d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80045da:	460c      	mov	r4, r1
 80045dc:	2001      	movs	r0, #1
 80045de:	e7a6      	b.n	800452e <_vfiprintf_r+0xfe>
 80045e0:	2300      	movs	r3, #0
 80045e2:	3401      	adds	r4, #1
 80045e4:	9305      	str	r3, [sp, #20]
 80045e6:	4619      	mov	r1, r3
 80045e8:	f04f 0c0a 	mov.w	ip, #10
 80045ec:	4620      	mov	r0, r4
 80045ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80045f2:	3a30      	subs	r2, #48	; 0x30
 80045f4:	2a09      	cmp	r2, #9
 80045f6:	d903      	bls.n	8004600 <_vfiprintf_r+0x1d0>
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0c6      	beq.n	800458a <_vfiprintf_r+0x15a>
 80045fc:	9105      	str	r1, [sp, #20]
 80045fe:	e7c4      	b.n	800458a <_vfiprintf_r+0x15a>
 8004600:	fb0c 2101 	mla	r1, ip, r1, r2
 8004604:	4604      	mov	r4, r0
 8004606:	2301      	movs	r3, #1
 8004608:	e7f0      	b.n	80045ec <_vfiprintf_r+0x1bc>
 800460a:	ab03      	add	r3, sp, #12
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	462a      	mov	r2, r5
 8004610:	4b12      	ldr	r3, [pc, #72]	; (800465c <_vfiprintf_r+0x22c>)
 8004612:	a904      	add	r1, sp, #16
 8004614:	4630      	mov	r0, r6
 8004616:	f7fd fd37 	bl	8002088 <_printf_float>
 800461a:	4607      	mov	r7, r0
 800461c:	1c78      	adds	r0, r7, #1
 800461e:	d1d6      	bne.n	80045ce <_vfiprintf_r+0x19e>
 8004620:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004622:	07d9      	lsls	r1, r3, #31
 8004624:	d405      	bmi.n	8004632 <_vfiprintf_r+0x202>
 8004626:	89ab      	ldrh	r3, [r5, #12]
 8004628:	059a      	lsls	r2, r3, #22
 800462a:	d402      	bmi.n	8004632 <_vfiprintf_r+0x202>
 800462c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800462e:	f7fe fbdb 	bl	8002de8 <__retarget_lock_release_recursive>
 8004632:	89ab      	ldrh	r3, [r5, #12]
 8004634:	065b      	lsls	r3, r3, #25
 8004636:	f53f af1d 	bmi.w	8004474 <_vfiprintf_r+0x44>
 800463a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800463c:	e71c      	b.n	8004478 <_vfiprintf_r+0x48>
 800463e:	ab03      	add	r3, sp, #12
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	462a      	mov	r2, r5
 8004644:	4b05      	ldr	r3, [pc, #20]	; (800465c <_vfiprintf_r+0x22c>)
 8004646:	a904      	add	r1, sp, #16
 8004648:	4630      	mov	r0, r6
 800464a:	f7fd ffc1 	bl	80025d0 <_printf_i>
 800464e:	e7e4      	b.n	800461a <_vfiprintf_r+0x1ea>
 8004650:	08004b54 	.word	0x08004b54
 8004654:	08004b5e 	.word	0x08004b5e
 8004658:	08002089 	.word	0x08002089
 800465c:	0800440b 	.word	0x0800440b
 8004660:	08004b5a 	.word	0x08004b5a

08004664 <__swhatbuf_r>:
 8004664:	b570      	push	{r4, r5, r6, lr}
 8004666:	460c      	mov	r4, r1
 8004668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800466c:	2900      	cmp	r1, #0
 800466e:	b096      	sub	sp, #88	; 0x58
 8004670:	4615      	mov	r5, r2
 8004672:	461e      	mov	r6, r3
 8004674:	da0d      	bge.n	8004692 <__swhatbuf_r+0x2e>
 8004676:	89a3      	ldrh	r3, [r4, #12]
 8004678:	f013 0f80 	tst.w	r3, #128	; 0x80
 800467c:	f04f 0100 	mov.w	r1, #0
 8004680:	bf0c      	ite	eq
 8004682:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004686:	2340      	movne	r3, #64	; 0x40
 8004688:	2000      	movs	r0, #0
 800468a:	6031      	str	r1, [r6, #0]
 800468c:	602b      	str	r3, [r5, #0]
 800468e:	b016      	add	sp, #88	; 0x58
 8004690:	bd70      	pop	{r4, r5, r6, pc}
 8004692:	466a      	mov	r2, sp
 8004694:	f000 f848 	bl	8004728 <_fstat_r>
 8004698:	2800      	cmp	r0, #0
 800469a:	dbec      	blt.n	8004676 <__swhatbuf_r+0x12>
 800469c:	9901      	ldr	r1, [sp, #4]
 800469e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80046a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80046a6:	4259      	negs	r1, r3
 80046a8:	4159      	adcs	r1, r3
 80046aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046ae:	e7eb      	b.n	8004688 <__swhatbuf_r+0x24>

080046b0 <__smakebuf_r>:
 80046b0:	898b      	ldrh	r3, [r1, #12]
 80046b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046b4:	079d      	lsls	r5, r3, #30
 80046b6:	4606      	mov	r6, r0
 80046b8:	460c      	mov	r4, r1
 80046ba:	d507      	bpl.n	80046cc <__smakebuf_r+0x1c>
 80046bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046c0:	6023      	str	r3, [r4, #0]
 80046c2:	6123      	str	r3, [r4, #16]
 80046c4:	2301      	movs	r3, #1
 80046c6:	6163      	str	r3, [r4, #20]
 80046c8:	b002      	add	sp, #8
 80046ca:	bd70      	pop	{r4, r5, r6, pc}
 80046cc:	ab01      	add	r3, sp, #4
 80046ce:	466a      	mov	r2, sp
 80046d0:	f7ff ffc8 	bl	8004664 <__swhatbuf_r>
 80046d4:	9900      	ldr	r1, [sp, #0]
 80046d6:	4605      	mov	r5, r0
 80046d8:	4630      	mov	r0, r6
 80046da:	f7ff fa77 	bl	8003bcc <_malloc_r>
 80046de:	b948      	cbnz	r0, 80046f4 <__smakebuf_r+0x44>
 80046e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046e4:	059a      	lsls	r2, r3, #22
 80046e6:	d4ef      	bmi.n	80046c8 <__smakebuf_r+0x18>
 80046e8:	f023 0303 	bic.w	r3, r3, #3
 80046ec:	f043 0302 	orr.w	r3, r3, #2
 80046f0:	81a3      	strh	r3, [r4, #12]
 80046f2:	e7e3      	b.n	80046bc <__smakebuf_r+0xc>
 80046f4:	89a3      	ldrh	r3, [r4, #12]
 80046f6:	6020      	str	r0, [r4, #0]
 80046f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046fc:	81a3      	strh	r3, [r4, #12]
 80046fe:	9b00      	ldr	r3, [sp, #0]
 8004700:	6163      	str	r3, [r4, #20]
 8004702:	9b01      	ldr	r3, [sp, #4]
 8004704:	6120      	str	r0, [r4, #16]
 8004706:	b15b      	cbz	r3, 8004720 <__smakebuf_r+0x70>
 8004708:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800470c:	4630      	mov	r0, r6
 800470e:	f000 f81d 	bl	800474c <_isatty_r>
 8004712:	b128      	cbz	r0, 8004720 <__smakebuf_r+0x70>
 8004714:	89a3      	ldrh	r3, [r4, #12]
 8004716:	f023 0303 	bic.w	r3, r3, #3
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	81a3      	strh	r3, [r4, #12]
 8004720:	89a3      	ldrh	r3, [r4, #12]
 8004722:	431d      	orrs	r5, r3
 8004724:	81a5      	strh	r5, [r4, #12]
 8004726:	e7cf      	b.n	80046c8 <__smakebuf_r+0x18>

08004728 <_fstat_r>:
 8004728:	b538      	push	{r3, r4, r5, lr}
 800472a:	4d07      	ldr	r5, [pc, #28]	; (8004748 <_fstat_r+0x20>)
 800472c:	2300      	movs	r3, #0
 800472e:	4604      	mov	r4, r0
 8004730:	4608      	mov	r0, r1
 8004732:	4611      	mov	r1, r2
 8004734:	602b      	str	r3, [r5, #0]
 8004736:	f7fd fa46 	bl	8001bc6 <_fstat>
 800473a:	1c43      	adds	r3, r0, #1
 800473c:	d102      	bne.n	8004744 <_fstat_r+0x1c>
 800473e:	682b      	ldr	r3, [r5, #0]
 8004740:	b103      	cbz	r3, 8004744 <_fstat_r+0x1c>
 8004742:	6023      	str	r3, [r4, #0]
 8004744:	bd38      	pop	{r3, r4, r5, pc}
 8004746:	bf00      	nop
 8004748:	2000032c 	.word	0x2000032c

0800474c <_isatty_r>:
 800474c:	b538      	push	{r3, r4, r5, lr}
 800474e:	4d06      	ldr	r5, [pc, #24]	; (8004768 <_isatty_r+0x1c>)
 8004750:	2300      	movs	r3, #0
 8004752:	4604      	mov	r4, r0
 8004754:	4608      	mov	r0, r1
 8004756:	602b      	str	r3, [r5, #0]
 8004758:	f7fd fa45 	bl	8001be6 <_isatty>
 800475c:	1c43      	adds	r3, r0, #1
 800475e:	d102      	bne.n	8004766 <_isatty_r+0x1a>
 8004760:	682b      	ldr	r3, [r5, #0]
 8004762:	b103      	cbz	r3, 8004766 <_isatty_r+0x1a>
 8004764:	6023      	str	r3, [r4, #0]
 8004766:	bd38      	pop	{r3, r4, r5, pc}
 8004768:	2000032c 	.word	0x2000032c

0800476c <_sbrk_r>:
 800476c:	b538      	push	{r3, r4, r5, lr}
 800476e:	4d06      	ldr	r5, [pc, #24]	; (8004788 <_sbrk_r+0x1c>)
 8004770:	2300      	movs	r3, #0
 8004772:	4604      	mov	r4, r0
 8004774:	4608      	mov	r0, r1
 8004776:	602b      	str	r3, [r5, #0]
 8004778:	f7fd fa4e 	bl	8001c18 <_sbrk>
 800477c:	1c43      	adds	r3, r0, #1
 800477e:	d102      	bne.n	8004786 <_sbrk_r+0x1a>
 8004780:	682b      	ldr	r3, [r5, #0]
 8004782:	b103      	cbz	r3, 8004786 <_sbrk_r+0x1a>
 8004784:	6023      	str	r3, [r4, #0]
 8004786:	bd38      	pop	{r3, r4, r5, pc}
 8004788:	2000032c 	.word	0x2000032c

0800478c <memcpy>:
 800478c:	440a      	add	r2, r1
 800478e:	4291      	cmp	r1, r2
 8004790:	f100 33ff 	add.w	r3, r0, #4294967295
 8004794:	d100      	bne.n	8004798 <memcpy+0xc>
 8004796:	4770      	bx	lr
 8004798:	b510      	push	{r4, lr}
 800479a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800479e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047a2:	4291      	cmp	r1, r2
 80047a4:	d1f9      	bne.n	800479a <memcpy+0xe>
 80047a6:	bd10      	pop	{r4, pc}

080047a8 <__assert_func>:
 80047a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80047aa:	4614      	mov	r4, r2
 80047ac:	461a      	mov	r2, r3
 80047ae:	4b09      	ldr	r3, [pc, #36]	; (80047d4 <__assert_func+0x2c>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4605      	mov	r5, r0
 80047b4:	68d8      	ldr	r0, [r3, #12]
 80047b6:	b14c      	cbz	r4, 80047cc <__assert_func+0x24>
 80047b8:	4b07      	ldr	r3, [pc, #28]	; (80047d8 <__assert_func+0x30>)
 80047ba:	9100      	str	r1, [sp, #0]
 80047bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80047c0:	4906      	ldr	r1, [pc, #24]	; (80047dc <__assert_func+0x34>)
 80047c2:	462b      	mov	r3, r5
 80047c4:	f7fe f978 	bl	8002ab8 <fiprintf>
 80047c8:	f000 f841 	bl	800484e <abort>
 80047cc:	4b04      	ldr	r3, [pc, #16]	; (80047e0 <__assert_func+0x38>)
 80047ce:	461c      	mov	r4, r3
 80047d0:	e7f3      	b.n	80047ba <__assert_func+0x12>
 80047d2:	bf00      	nop
 80047d4:	2000005c 	.word	0x2000005c
 80047d8:	08004b6f 	.word	0x08004b6f
 80047dc:	08004b7c 	.word	0x08004b7c
 80047e0:	08004baa 	.word	0x08004baa

080047e4 <_calloc_r>:
 80047e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047e6:	fba1 2402 	umull	r2, r4, r1, r2
 80047ea:	b94c      	cbnz	r4, 8004800 <_calloc_r+0x1c>
 80047ec:	4611      	mov	r1, r2
 80047ee:	9201      	str	r2, [sp, #4]
 80047f0:	f7ff f9ec 	bl	8003bcc <_malloc_r>
 80047f4:	9a01      	ldr	r2, [sp, #4]
 80047f6:	4605      	mov	r5, r0
 80047f8:	b930      	cbnz	r0, 8004808 <_calloc_r+0x24>
 80047fa:	4628      	mov	r0, r5
 80047fc:	b003      	add	sp, #12
 80047fe:	bd30      	pop	{r4, r5, pc}
 8004800:	220c      	movs	r2, #12
 8004802:	6002      	str	r2, [r0, #0]
 8004804:	2500      	movs	r5, #0
 8004806:	e7f8      	b.n	80047fa <_calloc_r+0x16>
 8004808:	4621      	mov	r1, r4
 800480a:	f7fe fa6f 	bl	8002cec <memset>
 800480e:	e7f4      	b.n	80047fa <_calloc_r+0x16>

08004810 <__ascii_mbtowc>:
 8004810:	b082      	sub	sp, #8
 8004812:	b901      	cbnz	r1, 8004816 <__ascii_mbtowc+0x6>
 8004814:	a901      	add	r1, sp, #4
 8004816:	b142      	cbz	r2, 800482a <__ascii_mbtowc+0x1a>
 8004818:	b14b      	cbz	r3, 800482e <__ascii_mbtowc+0x1e>
 800481a:	7813      	ldrb	r3, [r2, #0]
 800481c:	600b      	str	r3, [r1, #0]
 800481e:	7812      	ldrb	r2, [r2, #0]
 8004820:	1e10      	subs	r0, r2, #0
 8004822:	bf18      	it	ne
 8004824:	2001      	movne	r0, #1
 8004826:	b002      	add	sp, #8
 8004828:	4770      	bx	lr
 800482a:	4610      	mov	r0, r2
 800482c:	e7fb      	b.n	8004826 <__ascii_mbtowc+0x16>
 800482e:	f06f 0001 	mvn.w	r0, #1
 8004832:	e7f8      	b.n	8004826 <__ascii_mbtowc+0x16>

08004834 <__ascii_wctomb>:
 8004834:	b149      	cbz	r1, 800484a <__ascii_wctomb+0x16>
 8004836:	2aff      	cmp	r2, #255	; 0xff
 8004838:	bf85      	ittet	hi
 800483a:	238a      	movhi	r3, #138	; 0x8a
 800483c:	6003      	strhi	r3, [r0, #0]
 800483e:	700a      	strbls	r2, [r1, #0]
 8004840:	f04f 30ff 	movhi.w	r0, #4294967295
 8004844:	bf98      	it	ls
 8004846:	2001      	movls	r0, #1
 8004848:	4770      	bx	lr
 800484a:	4608      	mov	r0, r1
 800484c:	4770      	bx	lr

0800484e <abort>:
 800484e:	b508      	push	{r3, lr}
 8004850:	2006      	movs	r0, #6
 8004852:	f000 f82b 	bl	80048ac <raise>
 8004856:	2001      	movs	r0, #1
 8004858:	f7fd f966 	bl	8001b28 <_exit>

0800485c <_raise_r>:
 800485c:	291f      	cmp	r1, #31
 800485e:	b538      	push	{r3, r4, r5, lr}
 8004860:	4604      	mov	r4, r0
 8004862:	460d      	mov	r5, r1
 8004864:	d904      	bls.n	8004870 <_raise_r+0x14>
 8004866:	2316      	movs	r3, #22
 8004868:	6003      	str	r3, [r0, #0]
 800486a:	f04f 30ff 	mov.w	r0, #4294967295
 800486e:	bd38      	pop	{r3, r4, r5, pc}
 8004870:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004872:	b112      	cbz	r2, 800487a <_raise_r+0x1e>
 8004874:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004878:	b94b      	cbnz	r3, 800488e <_raise_r+0x32>
 800487a:	4620      	mov	r0, r4
 800487c:	f000 f830 	bl	80048e0 <_getpid_r>
 8004880:	462a      	mov	r2, r5
 8004882:	4601      	mov	r1, r0
 8004884:	4620      	mov	r0, r4
 8004886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800488a:	f000 b817 	b.w	80048bc <_kill_r>
 800488e:	2b01      	cmp	r3, #1
 8004890:	d00a      	beq.n	80048a8 <_raise_r+0x4c>
 8004892:	1c59      	adds	r1, r3, #1
 8004894:	d103      	bne.n	800489e <_raise_r+0x42>
 8004896:	2316      	movs	r3, #22
 8004898:	6003      	str	r3, [r0, #0]
 800489a:	2001      	movs	r0, #1
 800489c:	e7e7      	b.n	800486e <_raise_r+0x12>
 800489e:	2400      	movs	r4, #0
 80048a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80048a4:	4628      	mov	r0, r5
 80048a6:	4798      	blx	r3
 80048a8:	2000      	movs	r0, #0
 80048aa:	e7e0      	b.n	800486e <_raise_r+0x12>

080048ac <raise>:
 80048ac:	4b02      	ldr	r3, [pc, #8]	; (80048b8 <raise+0xc>)
 80048ae:	4601      	mov	r1, r0
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	f7ff bfd3 	b.w	800485c <_raise_r>
 80048b6:	bf00      	nop
 80048b8:	2000005c 	.word	0x2000005c

080048bc <_kill_r>:
 80048bc:	b538      	push	{r3, r4, r5, lr}
 80048be:	4d07      	ldr	r5, [pc, #28]	; (80048dc <_kill_r+0x20>)
 80048c0:	2300      	movs	r3, #0
 80048c2:	4604      	mov	r4, r0
 80048c4:	4608      	mov	r0, r1
 80048c6:	4611      	mov	r1, r2
 80048c8:	602b      	str	r3, [r5, #0]
 80048ca:	f7fd f91d 	bl	8001b08 <_kill>
 80048ce:	1c43      	adds	r3, r0, #1
 80048d0:	d102      	bne.n	80048d8 <_kill_r+0x1c>
 80048d2:	682b      	ldr	r3, [r5, #0]
 80048d4:	b103      	cbz	r3, 80048d8 <_kill_r+0x1c>
 80048d6:	6023      	str	r3, [r4, #0]
 80048d8:	bd38      	pop	{r3, r4, r5, pc}
 80048da:	bf00      	nop
 80048dc:	2000032c 	.word	0x2000032c

080048e0 <_getpid_r>:
 80048e0:	f7fd b90a 	b.w	8001af8 <_getpid>

080048e4 <_init>:
 80048e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e6:	bf00      	nop
 80048e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ea:	bc08      	pop	{r3}
 80048ec:	469e      	mov	lr, r3
 80048ee:	4770      	bx	lr

080048f0 <_fini>:
 80048f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f2:	bf00      	nop
 80048f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048f6:	bc08      	pop	{r3}
 80048f8:	469e      	mov	lr, r3
 80048fa:	4770      	bx	lr
