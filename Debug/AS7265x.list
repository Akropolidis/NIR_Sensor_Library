
AS7265x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004544  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  080046e8  080046e8  000146e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a9c  08004a9c  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  08004a9c  08004a9c  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a9c  08004a9c  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a9c  08004a9c  00014a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004aa0  08004aa0  00014aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08004aa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200001cc  08004c70  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08004c70  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000273f  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ae4  00000000  00000000  0002297e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000418  00000000  00000000  00023468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002f7  00000000  00000000  00023880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fe96  00000000  00000000  00023b77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003c7a  00000000  00000000  00033a0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00055f44  00000000  00000000  00037687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001eb8  00000000  00000000  0008d5cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  0008f484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001cc 	.word	0x200001cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080046cc 	.word	0x080046cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d0 	.word	0x200001d0
 80001dc:	080046cc 	.word	0x080046cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <initialize>:


//Initializes the sensor with basic settings
//Returns false if sensor is not detected
bool initialize()
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
	SysTick_Init();
 8000bbe:	f000 ff7b 	bl	8001ab8 <SysTick_Init>
	uart2_rxtx_init();
 8000bc2:	f000 ffd9 	bl	8001b78 <uart2_rxtx_init>
	I2C1_Init();
 8000bc6:	f000 fc45 	bl	8001454 <I2C1_Init>
	fpu_enable();
 8000bca:	f000 f891 	bl	8000cf0 <fpu_enable>

	if (isConnected() == false)
 8000bce:	f000 f83f 	bl	8000c50 <isConnected>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	f083 0301 	eor.w	r3, r3, #1
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <initialize+0x2a>
	{
		return false; //Check for sensor presence
 8000bde:	2300      	movs	r3, #0
 8000be0:	e031      	b.n	8000c46 <initialize+0x8e>
	}

	uint8_t value = virtualReadRegister(AS7265X_DEV_SELECT_CONTROL);
 8000be2:	204f      	movs	r0, #79	; 0x4f
 8000be4:	f000 f904 	bl	8000df0 <virtualReadRegister>
 8000be8:	4603      	mov	r3, r0
 8000bea:	71fb      	strb	r3, [r7, #7]
	if ((value & 0b00110000) == 0) //Check for presence of first and second slave devices
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d101      	bne.n	8000bfa <initialize+0x42>
	{
		return false;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e025      	b.n	8000c46 <initialize+0x8e>
	}

	setLEDCurrent(AS7265X_LED_CURRENT_LIMIT_12_5MA, AS7265x_LED_WHITE);
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f000 fafb 	bl	80011f8 <setLEDCurrent>
	setLEDCurrent(AS7265X_LED_CURRENT_LIMIT_12_5MA, AS7265x_LED_IR);
 8000c02:	2101      	movs	r1, #1
 8000c04:	2000      	movs	r0, #0
 8000c06:	f000 faf7 	bl	80011f8 <setLEDCurrent>
	setLEDCurrent(AS7265X_LED_CURRENT_LIMIT_12_5MA, AS7265x_LED_UV);
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f000 faf3 	bl	80011f8 <setLEDCurrent>

	disableLED(AS7265x_LED_WHITE); //Turn off bulb to avoid heating sensor
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 fa57 	bl	80010c6 <disableLED>
	disableLED(AS7265x_LED_IR);
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f000 fa54 	bl	80010c6 <disableLED>
	disableLED(AS7265x_LED_UV);
 8000c1e:	2002      	movs	r0, #2
 8000c20:	f000 fa51 	bl	80010c6 <disableLED>

	setIndicatorCurrent(AS7265X_INDICATOR_CURRENT_LIMIT_2MA);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f000 fb12 	bl	800124e <setIndicatorCurrent>
	enableIndicator();
 8000c2a:	f000 fa19 	bl	8001060 <enableIndicator>

	setIntegrationCycles(59); //(59 + 1) * 2.78ms = 166.8ms. 0 to 255 is valid.
 8000c2e:	203b      	movs	r0, #59	; 0x3b
 8000c30:	f000 faae 	bl	8001190 <setIntegrationCycles>
	//If you use Mode 2 or 3 (all the colors) then integration time is double. 166.8*2 = 333.6ms between readings.

	setGain(AS7265X_GAIN_64X);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 fa61 	bl	80010fc <setGain>

	setMeasurementMode(AS7265X_MEASUREMENT_MODE_6CHAN_CONTINUOUS);
 8000c3a:	2002      	movs	r0, #2
 8000c3c:	f000 fa82 	bl	8001144 <setMeasurementMode>

	enableInterrupt();
 8000c40:	f000 fb2c 	bl	800129c <enableInterrupt>

	return true;
 8000c44:	2301      	movs	r3, #1
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <isConnected>:

//Returns TRUE if the device sends an ACK indicating it is connected
bool isConnected()
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
	uint32_t timeout = 1000; //Timeout to connect set to 1000ms
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	60fb      	str	r3, [r7, #12]
	unsigned long startTime = getMillis();
 8000c5c:	f000 ff5e 	bl	8001b1c <getMillis>
 8000c60:	60b8      	str	r0, [r7, #8]

	while ((getMillis() - startTime) < timeout)
 8000c62:	e035      	b.n	8000cd0 <isConnected+0x80>
	{
		volatile int tmp;

		/* Wait until bus not busy */
		while (I2C1->SR2 & (SR2_BUSY)){}
 8000c64:	bf00      	nop
 8000c66:	4b21      	ldr	r3, [pc, #132]	; (8000cec <isConnected+0x9c>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1f9      	bne.n	8000c66 <isConnected+0x16>

		/* Generate start condition */
		I2C1->CR1 |= CR1_START;
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <isConnected+0x9c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a1d      	ldr	r2, [pc, #116]	; (8000cec <isConnected+0x9c>)
 8000c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7c:	6013      	str	r3, [r2, #0]

		/* Wait until start condition flag is set */
		while (!(I2C1->SR1 & (SR1_SB))){}
 8000c7e:	bf00      	nop
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <isConnected+0x9c>)
 8000c82:	695b      	ldr	r3, [r3, #20]
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d0f9      	beq.n	8000c80 <isConnected+0x30>

		/* Transmit slave address + Write (0) */
		I2C1->DR = AS7265X_WRITE_ADDR;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <isConnected+0x9c>)
 8000c8e:	2292      	movs	r2, #146	; 0x92
 8000c90:	611a      	str	r2, [r3, #16]

		/* Wait until address flag is set */
		while (!(I2C1->SR1 & (SR1_ADDR))){}
 8000c92:	bf00      	nop
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <isConnected+0x9c>)
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0f9      	beq.n	8000c94 <isConnected+0x44>

		/* Clear address flag by reading SR2 register */
		tmp = I2C1->SR2;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <isConnected+0x9c>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	607b      	str	r3, [r7, #4]

		if (I2C1->SR1 & SR1_AF)
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <isConnected+0x9c>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d006      	beq.n	8000cc0 <isConnected+0x70>
		{
			//No ACK received, address not acknowledged
			I2C1->CR1 |= CR1_STOP;  // Send STOP condition
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <isConnected+0x9c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <isConnected+0x9c>)
 8000cb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cbc:	6013      	str	r3, [r2, #0]
			continue;
 8000cbe:	e007      	b.n	8000cd0 <isConnected+0x80>
		}

		//Address acknowledged, device is connected
		I2C1->CR1 |= CR1_STOP; // Send STOP condition
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <isConnected+0x9c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a09      	ldr	r2, [pc, #36]	; (8000cec <isConnected+0x9c>)
 8000cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cca:	6013      	str	r3, [r2, #0]
		return true;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e008      	b.n	8000ce2 <isConnected+0x92>
	while ((getMillis() - startTime) < timeout)
 8000cd0:	f000 ff24 	bl	8001b1c <getMillis>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d8c1      	bhi.n	8000c64 <isConnected+0x14>
	}
	//Timeout to connect has expired, hence device is not connected
	return false;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40005400 	.word	0x40005400

08000cf0 <fpu_enable>:

void fpu_enable()
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
	/*Enable Floating Point Unit: Enable CP10 and CP11 full access*/
	SCB->CPACR |= (1U<<20);
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <fpu_enable+0x50>)
 8000cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfa:	4a11      	ldr	r2, [pc, #68]	; (8000d40 <fpu_enable+0x50>)
 8000cfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |= (1U<<21);
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <fpu_enable+0x50>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0a:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <fpu_enable+0x50>)
 8000d0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |= (1U<<22);
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <fpu_enable+0x50>)
 8000d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1a:	4a09      	ldr	r2, [pc, #36]	; (8000d40 <fpu_enable+0x50>)
 8000d1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |= (1U<<23);
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <fpu_enable+0x50>)
 8000d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <fpu_enable+0x50>)
 8000d2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <readRegister>:

//Reads from a given location from the AS726x
static uint8_t readRegister(uint8_t addr)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
	char data = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	73fb      	strb	r3, [r7, #15]
	I2C1_byteRead(AS7265X_ADDR, addr, &data);
 8000d52:	f107 020f 	add.w	r2, r7, #15
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	2049      	movs	r0, #73	; 0x49
 8000d5c:	f000 fc1e 	bl	800159c <I2C1_byteRead>
	return data;
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <writeRegister>:

//Write a value to a given location on the AS726x
static void writeRegister(uint8_t addr, uint8_t val)
{
 8000d6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	460a      	mov	r2, r1
 8000d76:	71fb      	strb	r3, [r7, #7]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	71bb      	strb	r3, [r7, #6]
 8000d7c:	466b      	mov	r3, sp
 8000d7e:	461e      	mov	r6, r3
	uint8_t bufferSize = 1;
 8000d80:	2301      	movs	r3, #1
 8000d82:	75fb      	strb	r3, [r7, #23]
	char data[bufferSize];
 8000d84:	7df9      	ldrb	r1, [r7, #23]
 8000d86:	460b      	mov	r3, r1
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	b2cb      	uxtb	r3, r1
 8000d8e:	2200      	movs	r2, #0
 8000d90:	4698      	mov	r8, r3
 8000d92:	4691      	mov	r9, r2
 8000d94:	f04f 0200 	mov.w	r2, #0
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000da0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000da4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000da8:	b2cb      	uxtb	r3, r1
 8000daa:	2200      	movs	r2, #0
 8000dac:	461c      	mov	r4, r3
 8000dae:	4615      	mov	r5, r2
 8000db0:	f04f 0200 	mov.w	r2, #0
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	00eb      	lsls	r3, r5, #3
 8000dba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000dbe:	00e2      	lsls	r2, r4, #3
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	3307      	adds	r3, #7
 8000dc4:	08db      	lsrs	r3, r3, #3
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	ebad 0d03 	sub.w	sp, sp, r3
 8000dcc:	466b      	mov	r3, sp
 8000dce:	3300      	adds	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]

	data[0] = val;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	79ba      	ldrb	r2, [r7, #6]
 8000dd6:	701a      	strb	r2, [r3, #0]
	I2C1_burstWrite(AS7265X_ADDR, addr, bufferSize, data);
 8000dd8:	7dfa      	ldrb	r2, [r7, #23]
 8000dda:	79f9      	ldrb	r1, [r7, #7]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2049      	movs	r0, #73	; 0x49
 8000de0:	f000 fc56 	bl	8001690 <I2C1_burstWrite>
 8000de4:	46b5      	mov	sp, r6
}
 8000de6:	bf00      	nop
 8000de8:	371c      	adds	r7, #28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000df0 <virtualReadRegister>:

//Read from a virtual register on the AS7265x
static uint8_t virtualReadRegister(uint8_t virtualAddr)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
	volatile uint8_t status, data;

	//Do a preliminary check of the read register
	status = readRegister(AS7265X_STATUS_REG);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff ffa2 	bl	8000d44 <readRegister>
 8000e00:	4603      	mov	r3, r0
 8000e02:	72fb      	strb	r3, [r7, #11]
	if((status & AS7265X_RX_VALID) != 0) //Data byte available in READ register
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d002      	beq.n	8000e16 <virtualReadRegister+0x26>
	{
		readRegister(AS7265X_READ_REG); //Read the byte but do nothing
 8000e10:	2002      	movs	r0, #2
 8000e12:	f7ff ff97 	bl	8000d44 <readRegister>
	}

	//Wait for WRITE flag to clear
	unsigned long startTime = getMillis();
 8000e16:	f000 fe81 	bl	8001b1c <getMillis>
 8000e1a:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if((getMillis() - startTime) > maxWaitTime)
 8000e1c:	f000 fe7e 	bl	8001b1c <getMillis>
 8000e20:	4602      	mov	r2, r0
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	4a25      	ldr	r2, [pc, #148]	; (8000ebc <virtualReadRegister+0xcc>)
 8000e28:	8812      	ldrh	r2, [r2, #0]
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d904      	bls.n	8000e38 <virtualReadRegister+0x48>
		{
			printf("Sensor failed to respond \n\r");
 8000e2e:	4824      	ldr	r0, [pc, #144]	; (8000ec0 <virtualReadRegister+0xd0>)
 8000e30:	f001 fca2 	bl	8002778 <iprintf>
			return 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	e03c      	b.n	8000eb2 <virtualReadRegister+0xc2>
		}
		//Read slave I2C status to see if the read register is ready
		status = readRegister(AS7265X_STATUS_REG);
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff ff83 	bl	8000d44 <readRegister>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	72fb      	strb	r3, [r7, #11]
		if((status & AS7265X_TX_VALID) == 0) //New data may be written to WRITE register
 8000e42:	7afb      	ldrb	r3, [r7, #11]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <virtualReadRegister+0x66>
		{
			break;
		}
		delayMillis(AS7265X_POLLING_DELAY); //Delay for 5 ms before checking for virtual register changes
 8000e4e:	2005      	movs	r0, #5
 8000e50:	f000 fe70 	bl	8001b34 <delayMillis>
		if((getMillis() - startTime) > maxWaitTime)
 8000e54:	e7e2      	b.n	8000e1c <virtualReadRegister+0x2c>
			break;
 8000e56:	bf00      	nop
	}

	//Send the virtual register address (disabling bit 7 to indicate a read).
	writeRegister(AS7265X_WRITE_REG, virtualAddr);
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f7ff ff84 	bl	8000d6a <writeRegister>

	//Wait for READ flag to be set
	startTime = getMillis();
 8000e62:	f000 fe5b 	bl	8001b1c <getMillis>
 8000e66:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if((getMillis() - startTime) > maxWaitTime)
 8000e68:	f000 fe58 	bl	8001b1c <getMillis>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <virtualReadRegister+0xcc>)
 8000e74:	8812      	ldrh	r2, [r2, #0]
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d904      	bls.n	8000e84 <virtualReadRegister+0x94>
		{
			printf("Sensor failed to respond \n\r");
 8000e7a:	4811      	ldr	r0, [pc, #68]	; (8000ec0 <virtualReadRegister+0xd0>)
 8000e7c:	f001 fc7c 	bl	8002778 <iprintf>
			return 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	e016      	b.n	8000eb2 <virtualReadRegister+0xc2>
		}
		//Read slave I2C status to see if the read register is ready
		status = readRegister(AS7265X_STATUS_REG);
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff ff5d 	bl	8000d44 <readRegister>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	72fb      	strb	r3, [r7, #11]
		if((status & AS7265X_RX_VALID) != 0) //Data byte available in READ register
 8000e8e:	7afb      	ldrb	r3, [r7, #11]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d103      	bne.n	8000ea2 <virtualReadRegister+0xb2>
		{
			break;
		}
		delayMillis(AS7265X_POLLING_DELAY); //Delay for 5 ms before checking for virtual register changes
 8000e9a:	2005      	movs	r0, #5
 8000e9c:	f000 fe4a 	bl	8001b34 <delayMillis>
		if((getMillis() - startTime) > maxWaitTime)
 8000ea0:	e7e2      	b.n	8000e68 <virtualReadRegister+0x78>
			break;
 8000ea2:	bf00      	nop
	}

	data = readRegister(AS7265X_READ_REG);
 8000ea4:	2002      	movs	r0, #2
 8000ea6:	f7ff ff4d 	bl	8000d44 <readRegister>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	72bb      	strb	r3, [r7, #10]
	return data;
 8000eae:	7abb      	ldrb	r3, [r7, #10]
 8000eb0:	b2db      	uxtb	r3, r3
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	080046e8 	.word	0x080046e8

08000ec4 <virtualWriteRegister>:

//Write to a virtual register in the AS7265x
static void virtualWriteRegister(uint8_t virtualAddr, uint8_t dataToWrite)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	460a      	mov	r2, r1
 8000ece:	71fb      	strb	r3, [r7, #7]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	71bb      	strb	r3, [r7, #6]
	volatile uint8_t status;

	//Wait for WRITE register to be empty
	unsigned long startTime = getMillis();
 8000ed4:	f000 fe22 	bl	8001b1c <getMillis>
 8000ed8:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if((getMillis() - startTime) > maxWaitTime)
 8000eda:	f000 fe1f 	bl	8001b1c <getMillis>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	4a23      	ldr	r2, [pc, #140]	; (8000f74 <virtualWriteRegister+0xb0>)
 8000ee6:	8812      	ldrh	r2, [r2, #0]
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d903      	bls.n	8000ef4 <virtualWriteRegister+0x30>
		{
			printf("Sensor failed to respond \n\r");
 8000eec:	4822      	ldr	r0, [pc, #136]	; (8000f78 <virtualWriteRegister+0xb4>)
 8000eee:	f001 fc43 	bl	8002778 <iprintf>
			return;
 8000ef2:	e03c      	b.n	8000f6e <virtualWriteRegister+0xaa>
		}
		//Read slave I2C status to see if the write register is ready
		status = readRegister(AS7265X_STATUS_REG);
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f7ff ff25 	bl	8000d44 <readRegister>
 8000efa:	4603      	mov	r3, r0
 8000efc:	72fb      	strb	r3, [r7, #11]
		if((status & AS7265X_TX_VALID) == 0) //New data may be written to WRITE register
 8000efe:	7afb      	ldrb	r3, [r7, #11]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <virtualWriteRegister+0x4e>
		{
			break;
		}
		delayMillis(AS7265X_POLLING_DELAY); //Delay for 5 ms before checking for virtual register changes
 8000f0a:	2005      	movs	r0, #5
 8000f0c:	f000 fe12 	bl	8001b34 <delayMillis>
		if((getMillis() - startTime) > maxWaitTime)
 8000f10:	e7e3      	b.n	8000eda <virtualWriteRegister+0x16>
			break;
 8000f12:	bf00      	nop
	}

	//Send the virtual register address (enabling bit 7 to indicate a write).
	writeRegister(AS7265X_WRITE_REG, (virtualAddr | 1 << 7));
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f7ff ff23 	bl	8000d6a <writeRegister>

	//Wait for WRITE register to be empty
	startTime = getMillis();
 8000f24:	f000 fdfa 	bl	8001b1c <getMillis>
 8000f28:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if((getMillis() - startTime) > maxWaitTime)
 8000f2a:	f000 fdf7 	bl	8001b1c <getMillis>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <virtualWriteRegister+0xb0>)
 8000f36:	8812      	ldrh	r2, [r2, #0]
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d903      	bls.n	8000f44 <virtualWriteRegister+0x80>
		{
			printf("Sensor failed to respond \n\r");
 8000f3c:	480e      	ldr	r0, [pc, #56]	; (8000f78 <virtualWriteRegister+0xb4>)
 8000f3e:	f001 fc1b 	bl	8002778 <iprintf>
			return;
 8000f42:	e014      	b.n	8000f6e <virtualWriteRegister+0xaa>
		}
		//Read slave I2C status to see if the write register is ready
		status = readRegister(AS7265X_STATUS_REG);
 8000f44:	2000      	movs	r0, #0
 8000f46:	f7ff fefd 	bl	8000d44 <readRegister>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	72fb      	strb	r3, [r7, #11]
		if((status & AS7265X_TX_VALID) == 0) //New data may be written to WRITE register
 8000f4e:	7afb      	ldrb	r3, [r7, #11]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <virtualWriteRegister+0x9e>
		{
			break;
		}
		delayMillis(AS7265X_POLLING_DELAY); //Delay for 5 ms before checking for virtual register changes
 8000f5a:	2005      	movs	r0, #5
 8000f5c:	f000 fdea 	bl	8001b34 <delayMillis>
		if((getMillis() - startTime) > maxWaitTime)
 8000f60:	e7e3      	b.n	8000f2a <virtualWriteRegister+0x66>
			break;
 8000f62:	bf00      	nop
	}

	//Send the data to complete the operation
	writeRegister(AS7265X_WRITE_REG, dataToWrite);
 8000f64:	79bb      	ldrb	r3, [r7, #6]
 8000f66:	4619      	mov	r1, r3
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f7ff fefe 	bl	8000d6a <writeRegister>
}
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000000 	.word	0x20000000
 8000f78:	080046e8 	.word	0x080046e8

08000f7c <selectDevice>:

//As we read various registers we have to point at the master or first/second slave
static void selectDevice(uint8_t device)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
	virtualWriteRegister(AS7265X_DEV_SELECT_CONTROL, device);
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	204f      	movs	r0, #79	; 0x4f
 8000f8c:	f7ff ff9a 	bl	8000ec4 <virtualWriteRegister>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <convertBytesToFloat>:

//Given 4 bytes (size of float and uint32_t) and returns the floating point value
float convertBytesToFloat(uint32_t myLong)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  float myFloat;
  memcpy(&myFloat, &myLong, 4); //Copy bytes into a float
 8000fa2:	60fb      	str	r3, [r7, #12]
  return myFloat;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	ee07 3a90 	vmov	s15, r3
}
 8000faa:	eeb0 0a67 	vmov.f32	s0, s15
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <getCalibratedValue>:
	return colorData;
}

//Given an address, read four consecutive bytes and return the floating point calibrated value
static float getCalibratedValue(uint8_t calAddress, uint8_t device)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	460a      	mov	r2, r1
 8000fc2:	71fb      	strb	r3, [r7, #7]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	71bb      	strb	r3, [r7, #6]
	selectDevice(device);
 8000fc8:	79bb      	ldrb	r3, [r7, #6]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ffd6 	bl	8000f7c <selectDevice>

	uint8_t chan0, chan1, chan2, chan3;
	chan0 = virtualReadRegister(calAddress + 0);
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff0c 	bl	8000df0 <virtualReadRegister>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	75fb      	strb	r3, [r7, #23]
	chan1 = virtualReadRegister(calAddress + 1);
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff04 	bl	8000df0 <virtualReadRegister>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	75bb      	strb	r3, [r7, #22]
	chan2 = virtualReadRegister(calAddress + 2);
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	3302      	adds	r3, #2
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fefc 	bl	8000df0 <virtualReadRegister>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	757b      	strb	r3, [r7, #21]
	chan3 = virtualReadRegister(calAddress + 3);
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	3303      	adds	r3, #3
 8001000:	b2db      	uxtb	r3, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff fef4 	bl	8000df0 <virtualReadRegister>
 8001008:	4603      	mov	r3, r0
 800100a:	753b      	strb	r3, [r7, #20]

	//Channel calibrated values are stored big-endian
	uint32_t calBytes = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
	calBytes |= ((uint32_t)chan0 << (8 * 3)); //bits 24-31
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	061b      	lsls	r3, r3, #24
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	4313      	orrs	r3, r2
 8001018:	613b      	str	r3, [r7, #16]
	calBytes |= ((uint32_t)chan1 << (8 * 2)); //bits 16-23
 800101a:	7dbb      	ldrb	r3, [r7, #22]
 800101c:	041b      	lsls	r3, r3, #16
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
	calBytes |= ((uint32_t)chan2 << (8 * 1)); //bits 8-15
 8001024:	7d7b      	ldrb	r3, [r7, #21]
 8001026:	021b      	lsls	r3, r3, #8
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
	calBytes |= ((uint32_t)chan3 << (8 * 0)); //bits 0-7
 800102e:	7d3b      	ldrb	r3, [r7, #20]
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]

	float irradiance = convertBytesToFloat(calBytes) / IRRADIANCE_FACTOR;
 8001036:	6938      	ldr	r0, [r7, #16]
 8001038:	f7ff ffae 	bl	8000f98 <convertBytesToFloat>
 800103c:	eeb0 7a40 	vmov.f32	s14, s0
 8001040:	eddf 6a06 	vldr	s13, [pc, #24]	; 800105c <getCalibratedValue+0xa4>
 8001044:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001048:	edc7 7a03 	vstr	s15, [r7, #12]
	return irradiance;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	ee07 3a90 	vmov	s15, r3

4. 00000000 00000000 00000000 ZZZZZZZZ
a. 00000000 00000000 00000000 ZZZZZZZZ
b. calBytes = WWWWWWWW XXXXXXXX YYYYYYYY ZZZZZZZZ
*/
}
 8001052:	eeb0 0a67 	vmov.f32	s0, s15
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	430c0000 	.word	0x430c0000

08001060 <enableIndicator>:
	return average;
}

//Enable the on-board indicator LED on the NIR master device, Blue status LED
void enableIndicator()
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
	selectDevice(AS72651_NIR);
 8001066:	2000      	movs	r0, #0
 8001068:	f7ff ff88 	bl	8000f7c <selectDevice>

	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read existing state
 800106c:	2007      	movs	r0, #7
 800106e:	f7ff febf 	bl	8000df0 <virtualReadRegister>
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
	value |= (1U << 0); //Set ENABLE LED_INT bit (bit 0)
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	71fb      	strb	r3, [r7, #7]
	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to enable the LED indicator
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	4619      	mov	r1, r3
 8001082:	2007      	movs	r0, #7
 8001084:	f7ff ff1e 	bl	8000ec4 <virtualWriteRegister>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <enableLED>:
	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to disable the LED indicator
}

//Enable the LED or bulb on a given device
void enableLED(uint8_t device)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
	selectDevice(device);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff6d 	bl	8000f7c <selectDevice>

	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read existing state
 80010a2:	2007      	movs	r0, #7
 80010a4:	f7ff fea4 	bl	8000df0 <virtualReadRegister>
 80010a8:	4603      	mov	r3, r0
 80010aa:	73fb      	strb	r3, [r7, #15]
	value |= (1U << 3); //Set ENABLE LED_DRV bit (bit 3)
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	f043 0308 	orr.w	r3, r3, #8
 80010b2:	73fb      	strb	r3, [r7, #15]
	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to enable the LED driver
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	4619      	mov	r1, r3
 80010b8:	2007      	movs	r0, #7
 80010ba:	f7ff ff03 	bl	8000ec4 <virtualWriteRegister>
}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <disableLED>:

//Disable the LED or bulb on a given device
void disableLED(uint8_t device)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b084      	sub	sp, #16
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	4603      	mov	r3, r0
 80010ce:	71fb      	strb	r3, [r7, #7]
	selectDevice(device);
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ff52 	bl	8000f7c <selectDevice>

	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read existing state
 80010d8:	2007      	movs	r0, #7
 80010da:	f7ff fe89 	bl	8000df0 <virtualReadRegister>
 80010de:	4603      	mov	r3, r0
 80010e0:	73fb      	strb	r3, [r7, #15]
	value &= ~(1U << 3); //Reset ENABLE LED_DRV bit (bit 3)
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
 80010e4:	f023 0308 	bic.w	r3, r3, #8
 80010e8:	73fb      	strb	r3, [r7, #15]
	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to disable the LED driver
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	4619      	mov	r1, r3
 80010ee:	2007      	movs	r0, #7
 80010f0:	f7ff fee8 	bl	8000ec4 <virtualWriteRegister>
}
 80010f4:	bf00      	nop
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <setGain>:
//Gain 0: 1x
//Gain 1: 3.7x (Default)
//Gain 2: 16x
//Gain 3: 64x
void setGain(uint8_t gain)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
	if (gain > AS7265X_GAIN_64X)
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	2b03      	cmp	r3, #3
 800110a:	d901      	bls.n	8001110 <setGain+0x14>
	{
		gain = AS7265X_GAIN_64X;
 800110c:	2303      	movs	r3, #3
 800110e:	71fb      	strb	r3, [r7, #7]
	}
	uint8_t value = virtualReadRegister(AS7265X_CONFIG); //Read existing state
 8001110:	2004      	movs	r0, #4
 8001112:	f7ff fe6d 	bl	8000df0 <virtualReadRegister>
 8001116:	4603      	mov	r3, r0
 8001118:	73fb      	strb	r3, [r7, #15]
	value &= 0b11001111; //Clear GAIN bits
 800111a:	7bfb      	ldrb	r3, [r7, #15]
 800111c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001120:	73fb      	strb	r3, [r7, #15]
	value |= (gain << 4); //Set GAIN bits with user's choice
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	b25a      	sxtb	r2, r3
 8001128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112c:	4313      	orrs	r3, r2
 800112e:	b25b      	sxtb	r3, r3
 8001130:	73fb      	strb	r3, [r7, #15]

	virtualWriteRegister(AS7265X_CONFIG, value); //Write value to config register
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	4619      	mov	r1, r3
 8001136:	2004      	movs	r0, #4
 8001138:	f7ff fec4 	bl	8000ec4 <virtualWriteRegister>
}
 800113c:	bf00      	nop
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <setMeasurementMode>:
//Mode 0: 4 channels
//Mode 1: 4 channels
//Mode 2: All 6 channels (Default)
//Mode 3: One shot operation of mode 2
void setMeasurementMode(uint8_t mode)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	if (mode > AS7265X_MEASUREMENT_MODE_6CHAN_ONE_SHOT)
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b03      	cmp	r3, #3
 8001152:	d901      	bls.n	8001158 <setMeasurementMode+0x14>
	{
		mode = AS7265X_MEASUREMENT_MODE_6CHAN_ONE_SHOT; //Limit mode to 2 bits
 8001154:	2303      	movs	r3, #3
 8001156:	71fb      	strb	r3, [r7, #7]
	}
	uint8_t value = virtualReadRegister(AS7265X_CONFIG); //Read existing state
 8001158:	2004      	movs	r0, #4
 800115a:	f7ff fe49 	bl	8000df0 <virtualReadRegister>
 800115e:	4603      	mov	r3, r0
 8001160:	73fb      	strb	r3, [r7, #15]
	value &= 0b11110011; //Clear BANK bits
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	f023 030c 	bic.w	r3, r3, #12
 8001168:	73fb      	strb	r3, [r7, #15]
	value |= (mode << 2); //Set BANK bits with user's choice
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	b25a      	sxtb	r2, r3
 8001170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001174:	4313      	orrs	r3, r2
 8001176:	b25b      	sxtb	r3, r3
 8001178:	73fb      	strb	r3, [r7, #15]

	virtualWriteRegister(AS7265X_CONFIG, value); //Write value to config register
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	4619      	mov	r1, r3
 800117e:	2004      	movs	r0, #4
 8001180:	f7ff fea0 	bl	8000ec4 <virtualWriteRegister>
}
 8001184:	bf00      	nop
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	0000      	movs	r0, r0
	...

08001190 <setIntegrationCycles>:
//Set the Integration cycles with a byte from 0 - 255 to set the sensitivity
//Every 2.78ms of integration increases the resolution of the ADC by 2^10 = 1024 counts
//Longer integration time means a more accurate measurement
//16-bit ADC so full sensitivity scale is clamped at 2^16 = 65536
void setIntegrationCycles(uint8_t cycleValue)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
	if (cycleValue > 255)
	{
		cycleValue = 255; //Limit cycleValue to a byte 2^8 (0-255)
	}
	maxWaitTime = (int)((cycleValue + 1) * 2.78 * 1.5); //Wait for integration time + 50%
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	3301      	adds	r3, #1
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f9c8 	bl	8000534 <__aeabi_i2d>
 80011a4:	a312      	add	r3, pc, #72	; (adr r3, 80011f0 <setIntegrationCycles+0x60>)
 80011a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011aa:	f7ff fa2d 	bl	8000608 <__aeabi_dmul>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <setIntegrationCycles+0x58>)
 80011bc:	f7ff fa24 	bl	8000608 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	f7ff fcce 	bl	8000b68 <__aeabi_d2iz>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <setIntegrationCycles+0x5c>)
 80011d2:	801a      	strh	r2, [r3, #0]

	virtualWriteRegister(AS7265X_INTEGRATION_TIME, cycleValue);
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	4619      	mov	r1, r3
 80011d8:	2005      	movs	r0, #5
 80011da:	f7ff fe73 	bl	8000ec4 <virtualWriteRegister>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	3ff80000 	.word	0x3ff80000
 80011ec:	20000000 	.word	0x20000000
 80011f0:	a3d70a3d 	.word	0xa3d70a3d
 80011f4:	40063d70 	.word	0x40063d70

080011f8 <setLEDCurrent>:
//Current 0: 12.5mA (Default)
//Current 1: 25mA
//Current 2: 50mA
//Current 3: 100mA
void setLEDCurrent(uint8_t current, uint8_t device)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	460a      	mov	r2, r1
 8001202:	71fb      	strb	r3, [r7, #7]
 8001204:	4613      	mov	r3, r2
 8001206:	71bb      	strb	r3, [r7, #6]
	selectDevice(device);
 8001208:	79bb      	ldrb	r3, [r7, #6]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff feb6 	bl	8000f7c <selectDevice>

	if (current > AS7265X_LED_CURRENT_LIMIT_100MA)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	2b03      	cmp	r3, #3
 8001214:	d901      	bls.n	800121a <setLEDCurrent+0x22>
	{
		current = AS7265X_LED_CURRENT_LIMIT_100MA;
 8001216:	2303      	movs	r3, #3
 8001218:	71fb      	strb	r3, [r7, #7]
	}
	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read existing state
 800121a:	2007      	movs	r0, #7
 800121c:	f7ff fde8 	bl	8000df0 <virtualReadRegister>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]
	value &= 0b11001111; //Bitwise ANDing to reset LED current limit bits (bit5:4)
 8001224:	7bfb      	ldrb	r3, [r7, #15]
 8001226:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800122a:	73fb      	strb	r3, [r7, #15]
	value |= (current << 4); //Set LED current limit
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	011b      	lsls	r3, r3, #4
 8001230:	b25a      	sxtb	r2, r3
 8001232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001236:	4313      	orrs	r3, r2
 8001238:	b25b      	sxtb	r3, r3
 800123a:	73fb      	strb	r3, [r7, #15]

	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to set the LED current limit
 800123c:	7bfb      	ldrb	r3, [r7, #15]
 800123e:	4619      	mov	r1, r3
 8001240:	2007      	movs	r0, #7
 8001242:	f7ff fe3f 	bl	8000ec4 <virtualWriteRegister>
}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <setIndicatorCurrent>:
//Current 0: 1mA
//Current 1: 2mA (Default)
//Current 2: 4mA
//Current 3: 8mA
void setIndicatorCurrent(uint8_t current)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b084      	sub	sp, #16
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	71fb      	strb	r3, [r7, #7]
	selectDevice(AS72651_NIR);
 8001258:	2000      	movs	r0, #0
 800125a:	f7ff fe8f 	bl	8000f7c <selectDevice>

	if (current > AS7265X_INDICATOR_CURRENT_LIMIT_8MA)
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	2b03      	cmp	r3, #3
 8001262:	d901      	bls.n	8001268 <setIndicatorCurrent+0x1a>
	{
		current = AS7265X_INDICATOR_CURRENT_LIMIT_8MA;
 8001264:	2303      	movs	r3, #3
 8001266:	71fb      	strb	r3, [r7, #7]
	}
	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read existing state
 8001268:	2007      	movs	r0, #7
 800126a:	f7ff fdc1 	bl	8000df0 <virtualReadRegister>
 800126e:	4603      	mov	r3, r0
 8001270:	73fb      	strb	r3, [r7, #15]
	value &= 0b11111001; //Bitwise ANDing to reset indicator current limit bits (bit2:1)
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	f023 0306 	bic.w	r3, r3, #6
 8001278:	73fb      	strb	r3, [r7, #15]
	value |= (current << 1); //Set indicator current limit
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	b25a      	sxtb	r2, r3
 8001280:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001284:	4313      	orrs	r3, r2
 8001286:	b25b      	sxtb	r3, r3
 8001288:	73fb      	strb	r3, [r7, #15]

	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to set the LED indicator current limit
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	4619      	mov	r1, r3
 800128e:	2007      	movs	r0, #7
 8001290:	f7ff fe18 	bl	8000ec4 <virtualWriteRegister>
}
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <enableInterrupt>:

//Enable interrupt pin
void enableInterrupt()
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0

	uint8_t value = virtualReadRegister(AS7265X_CONFIG); //Read existing state
 80012a2:	2004      	movs	r0, #4
 80012a4:	f7ff fda4 	bl	8000df0 <virtualReadRegister>
 80012a8:	4603      	mov	r3, r0
 80012aa:	71fb      	strb	r3, [r7, #7]
	value |= (1U << 6); //Set INT bit (bit 6)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012b2:	71fb      	strb	r3, [r7, #7]
	virtualWriteRegister(AS7265X_CONFIG, value); //Write value to config register to enable the interrupt pin
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	4619      	mov	r1, r3
 80012b8:	2004      	movs	r0, #4
 80012ba:	f7ff fe03 	bl	8000ec4 <virtualWriteRegister>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <getCalibratedA>:
}

/* Obtaining the various calibrated light readings */
//UV Readings
float getCalibratedA()
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_R_G_A, AS72653_UV));
 80012ca:	2102      	movs	r1, #2
 80012cc:	2014      	movs	r0, #20
 80012ce:	f7ff fe73 	bl	8000fb8 <getCalibratedValue>
 80012d2:	eef0 7a40 	vmov.f32	s15, s0
}
 80012d6:	eeb0 0a67 	vmov.f32	s0, s15
 80012da:	bd80      	pop	{r7, pc}

080012dc <getCalibratedB>:
float getCalibratedB()
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_S_H_B, AS72653_UV));
 80012e0:	2102      	movs	r1, #2
 80012e2:	2018      	movs	r0, #24
 80012e4:	f7ff fe68 	bl	8000fb8 <getCalibratedValue>
 80012e8:	eef0 7a40 	vmov.f32	s15, s0
}
 80012ec:	eeb0 0a67 	vmov.f32	s0, s15
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <getCalibratedC>:
float getCalibratedC()
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_T_I_C, AS72653_UV));
 80012f6:	2102      	movs	r1, #2
 80012f8:	201c      	movs	r0, #28
 80012fa:	f7ff fe5d 	bl	8000fb8 <getCalibratedValue>
 80012fe:	eef0 7a40 	vmov.f32	s15, s0
}
 8001302:	eeb0 0a67 	vmov.f32	s0, s15
 8001306:	bd80      	pop	{r7, pc}

08001308 <getCalibratedD>:
float getCalibratedD()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_U_J_D, AS72653_UV));
 800130c:	2102      	movs	r1, #2
 800130e:	2020      	movs	r0, #32
 8001310:	f7ff fe52 	bl	8000fb8 <getCalibratedValue>
 8001314:	eef0 7a40 	vmov.f32	s15, s0
}
 8001318:	eeb0 0a67 	vmov.f32	s0, s15
 800131c:	bd80      	pop	{r7, pc}

0800131e <getCalibratedE>:
float getCalibratedE()
{
 800131e:	b580      	push	{r7, lr}
 8001320:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_V_K_E, AS72653_UV));
 8001322:	2102      	movs	r1, #2
 8001324:	2024      	movs	r0, #36	; 0x24
 8001326:	f7ff fe47 	bl	8000fb8 <getCalibratedValue>
 800132a:	eef0 7a40 	vmov.f32	s15, s0
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	bd80      	pop	{r7, pc}

08001334 <getCalibratedF>:
float getCalibratedF()
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_W_L_F, AS72653_UV));
 8001338:	2102      	movs	r1, #2
 800133a:	2028      	movs	r0, #40	; 0x28
 800133c:	f7ff fe3c 	bl	8000fb8 <getCalibratedValue>
 8001340:	eef0 7a40 	vmov.f32	s15, s0
}
 8001344:	eeb0 0a67 	vmov.f32	s0, s15
 8001348:	bd80      	pop	{r7, pc}

0800134a <getCalibratedG>:

//VISIBLE Readings
float getCalibratedG()
{
 800134a:	b580      	push	{r7, lr}
 800134c:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_R_G_A, AS72652_VISIBLE));
 800134e:	2101      	movs	r1, #1
 8001350:	2014      	movs	r0, #20
 8001352:	f7ff fe31 	bl	8000fb8 <getCalibratedValue>
 8001356:	eef0 7a40 	vmov.f32	s15, s0
}
 800135a:	eeb0 0a67 	vmov.f32	s0, s15
 800135e:	bd80      	pop	{r7, pc}

08001360 <getCalibratedH>:
float getCalibratedH()
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_S_H_B, AS72652_VISIBLE));
 8001364:	2101      	movs	r1, #1
 8001366:	2018      	movs	r0, #24
 8001368:	f7ff fe26 	bl	8000fb8 <getCalibratedValue>
 800136c:	eef0 7a40 	vmov.f32	s15, s0
}
 8001370:	eeb0 0a67 	vmov.f32	s0, s15
 8001374:	bd80      	pop	{r7, pc}

08001376 <getCalibratedI>:
float getCalibratedI()
{
 8001376:	b580      	push	{r7, lr}
 8001378:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_T_I_C, AS72652_VISIBLE));
 800137a:	2101      	movs	r1, #1
 800137c:	201c      	movs	r0, #28
 800137e:	f7ff fe1b 	bl	8000fb8 <getCalibratedValue>
 8001382:	eef0 7a40 	vmov.f32	s15, s0
}
 8001386:	eeb0 0a67 	vmov.f32	s0, s15
 800138a:	bd80      	pop	{r7, pc}

0800138c <getCalibratedJ>:
float getCalibratedJ()
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_U_J_D, AS72652_VISIBLE));
 8001390:	2101      	movs	r1, #1
 8001392:	2020      	movs	r0, #32
 8001394:	f7ff fe10 	bl	8000fb8 <getCalibratedValue>
 8001398:	eef0 7a40 	vmov.f32	s15, s0
}
 800139c:	eeb0 0a67 	vmov.f32	s0, s15
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <getCalibratedK>:
float getCalibratedK()
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_V_K_E, AS72652_VISIBLE));
 80013a6:	2101      	movs	r1, #1
 80013a8:	2024      	movs	r0, #36	; 0x24
 80013aa:	f7ff fe05 	bl	8000fb8 <getCalibratedValue>
 80013ae:	eef0 7a40 	vmov.f32	s15, s0
}
 80013b2:	eeb0 0a67 	vmov.f32	s0, s15
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <getCalibratedL>:
float getCalibratedL()
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_W_L_F, AS72652_VISIBLE));
 80013bc:	2101      	movs	r1, #1
 80013be:	2028      	movs	r0, #40	; 0x28
 80013c0:	f7ff fdfa 	bl	8000fb8 <getCalibratedValue>
 80013c4:	eef0 7a40 	vmov.f32	s15, s0
}
 80013c8:	eeb0 0a67 	vmov.f32	s0, s15
 80013cc:	bd80      	pop	{r7, pc}

080013ce <getCalibratedR>:

//NIR Readings
float getCalibratedR()
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_R_G_A, AS72651_NIR));
 80013d2:	2100      	movs	r1, #0
 80013d4:	2014      	movs	r0, #20
 80013d6:	f7ff fdef 	bl	8000fb8 <getCalibratedValue>
 80013da:	eef0 7a40 	vmov.f32	s15, s0
}
 80013de:	eeb0 0a67 	vmov.f32	s0, s15
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <getCalibratedS>:
float getCalibratedS()
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_S_H_B, AS72651_NIR));
 80013e8:	2100      	movs	r1, #0
 80013ea:	2018      	movs	r0, #24
 80013ec:	f7ff fde4 	bl	8000fb8 <getCalibratedValue>
 80013f0:	eef0 7a40 	vmov.f32	s15, s0
}
 80013f4:	eeb0 0a67 	vmov.f32	s0, s15
 80013f8:	bd80      	pop	{r7, pc}

080013fa <getCalibratedT>:
float getCalibratedT()
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_T_I_C, AS72651_NIR));
 80013fe:	2100      	movs	r1, #0
 8001400:	201c      	movs	r0, #28
 8001402:	f7ff fdd9 	bl	8000fb8 <getCalibratedValue>
 8001406:	eef0 7a40 	vmov.f32	s15, s0
}
 800140a:	eeb0 0a67 	vmov.f32	s0, s15
 800140e:	bd80      	pop	{r7, pc}

08001410 <getCalibratedU>:
float getCalibratedU()
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_U_J_D, AS72651_NIR));
 8001414:	2100      	movs	r1, #0
 8001416:	2020      	movs	r0, #32
 8001418:	f7ff fdce 	bl	8000fb8 <getCalibratedValue>
 800141c:	eef0 7a40 	vmov.f32	s15, s0
}
 8001420:	eeb0 0a67 	vmov.f32	s0, s15
 8001424:	bd80      	pop	{r7, pc}

08001426 <getCalibratedV>:
float getCalibratedV()
{
 8001426:	b580      	push	{r7, lr}
 8001428:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_V_K_E, AS72651_NIR));
 800142a:	2100      	movs	r1, #0
 800142c:	2024      	movs	r0, #36	; 0x24
 800142e:	f7ff fdc3 	bl	8000fb8 <getCalibratedValue>
 8001432:	eef0 7a40 	vmov.f32	s15, s0
}
 8001436:	eeb0 0a67 	vmov.f32	s0, s15
 800143a:	bd80      	pop	{r7, pc}

0800143c <getCalibratedW>:
float getCalibratedW()
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_W_L_F, AS72651_NIR));
 8001440:	2100      	movs	r1, #0
 8001442:	2028      	movs	r0, #40	; 0x28
 8001444:	f7ff fdb8 	bl	8000fb8 <getCalibratedValue>
 8001448:	eef0 7a40 	vmov.f32	s15, s0
}
 800144c:	eeb0 0a67 	vmov.f32	s0, s15
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <I2C1_Init>:
//#define	SR1_BTF					(1U<<2)
//#define SR1_AF					(1U<<10)


void I2C1_Init(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOB*/
	RCC->AHB1ENR |= GPIOBEN;
 8001458:	4b4d      	ldr	r3, [pc, #308]	; (8001590 <I2C1_Init+0x13c>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	4a4c      	ldr	r2, [pc, #304]	; (8001590 <I2C1_Init+0x13c>)
 800145e:	f043 0302 	orr.w	r3, r3, #2
 8001462:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PB6 and PB7 mode to alternate function*/
	GPIOB->MODER &= ~(1U<<12);
 8001464:	4b4b      	ldr	r3, [pc, #300]	; (8001594 <I2C1_Init+0x140>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a4a      	ldr	r2, [pc, #296]	; (8001594 <I2C1_Init+0x140>)
 800146a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800146e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<13);
 8001470:	4b48      	ldr	r3, [pc, #288]	; (8001594 <I2C1_Init+0x140>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a47      	ldr	r2, [pc, #284]	; (8001594 <I2C1_Init+0x140>)
 8001476:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800147a:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~(1U<<14);
 800147c:	4b45      	ldr	r3, [pc, #276]	; (8001594 <I2C1_Init+0x140>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a44      	ldr	r2, [pc, #272]	; (8001594 <I2C1_Init+0x140>)
 8001482:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001486:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<15);
 8001488:	4b42      	ldr	r3, [pc, #264]	; (8001594 <I2C1_Init+0x140>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a41      	ldr	r2, [pc, #260]	; (8001594 <I2C1_Init+0x140>)
 800148e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001492:	6013      	str	r3, [r2, #0]

	/*Set PB6 and PB7 output type to  open drain*/
	GPIOB->OTYPER |= (1U<<6);
 8001494:	4b3f      	ldr	r3, [pc, #252]	; (8001594 <I2C1_Init+0x140>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	4a3e      	ldr	r2, [pc, #248]	; (8001594 <I2C1_Init+0x140>)
 800149a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800149e:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (1U<<7);
 80014a0:	4b3c      	ldr	r3, [pc, #240]	; (8001594 <I2C1_Init+0x140>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	4a3b      	ldr	r2, [pc, #236]	; (8001594 <I2C1_Init+0x140>)
 80014a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014aa:	6053      	str	r3, [r2, #4]

	/*Enable Pull-up for PB6 and PB7*/
	GPIOB->PUPDR |= (1U<<12);
 80014ac:	4b39      	ldr	r3, [pc, #228]	; (8001594 <I2C1_Init+0x140>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	4a38      	ldr	r2, [pc, #224]	; (8001594 <I2C1_Init+0x140>)
 80014b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014b6:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<13);
 80014b8:	4b36      	ldr	r3, [pc, #216]	; (8001594 <I2C1_Init+0x140>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	4a35      	ldr	r2, [pc, #212]	; (8001594 <I2C1_Init+0x140>)
 80014be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014c2:	60d3      	str	r3, [r2, #12]

	GPIOB->PUPDR |= (1U<<14);
 80014c4:	4b33      	ldr	r3, [pc, #204]	; (8001594 <I2C1_Init+0x140>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	4a32      	ldr	r2, [pc, #200]	; (8001594 <I2C1_Init+0x140>)
 80014ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ce:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<15);
 80014d0:	4b30      	ldr	r3, [pc, #192]	; (8001594 <I2C1_Init+0x140>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4a2f      	ldr	r2, [pc, #188]	; (8001594 <I2C1_Init+0x140>)
 80014d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80014da:	60d3      	str	r3, [r2, #12]

	/*Set PB6 and PB7 alternate function type to I2C (AF4)
	 * PB6 --> SCL
	 * PB7 --> SDA*/
	GPIOB->AFR[0] &= ~(1U<<24);
 80014dc:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <I2C1_Init+0x140>)
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	4a2c      	ldr	r2, [pc, #176]	; (8001594 <I2C1_Init+0x140>)
 80014e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014e6:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<25);
 80014e8:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <I2C1_Init+0x140>)
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	4a29      	ldr	r2, [pc, #164]	; (8001594 <I2C1_Init+0x140>)
 80014ee:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80014f2:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1U<<26);
 80014f4:	4b27      	ldr	r3, [pc, #156]	; (8001594 <I2C1_Init+0x140>)
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	4a26      	ldr	r2, [pc, #152]	; (8001594 <I2C1_Init+0x140>)
 80014fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014fe:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<27);
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <I2C1_Init+0x140>)
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	4a23      	ldr	r2, [pc, #140]	; (8001594 <I2C1_Init+0x140>)
 8001506:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800150a:	6213      	str	r3, [r2, #32]

	GPIOB->AFR[0] &= ~(1U<<28);
 800150c:	4b21      	ldr	r3, [pc, #132]	; (8001594 <I2C1_Init+0x140>)
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	4a20      	ldr	r2, [pc, #128]	; (8001594 <I2C1_Init+0x140>)
 8001512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001516:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<29);
 8001518:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <I2C1_Init+0x140>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	4a1d      	ldr	r2, [pc, #116]	; (8001594 <I2C1_Init+0x140>)
 800151e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001522:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1U<<30);
 8001524:	4b1b      	ldr	r3, [pc, #108]	; (8001594 <I2C1_Init+0x140>)
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	4a1a      	ldr	r2, [pc, #104]	; (8001594 <I2C1_Init+0x140>)
 800152a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800152e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<31);
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <I2C1_Init+0x140>)
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	4a17      	ldr	r2, [pc, #92]	; (8001594 <I2C1_Init+0x140>)
 8001536:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800153a:	6213      	str	r3, [r2, #32]

	/***Configuring I2C1***/

	/*Enable clock access to I2C1*/
	RCC->APB1ENR |= I2C1EN;
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <I2C1_Init+0x13c>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	4a13      	ldr	r2, [pc, #76]	; (8001590 <I2C1_Init+0x13c>)
 8001542:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001546:	6413      	str	r3, [r2, #64]	; 0x40

	/*Enter reset mode  */
	I2C1->CR1 |= (1U<<15);
 8001548:	4b13      	ldr	r3, [pc, #76]	; (8001598 <I2C1_Init+0x144>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a12      	ldr	r2, [pc, #72]	; (8001598 <I2C1_Init+0x144>)
 800154e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001552:	6013      	str	r3, [r2, #0]

	/*Come out of reset mode  */
	I2C1->CR1 &= ~(1U<<15);
 8001554:	4b10      	ldr	r3, [pc, #64]	; (8001598 <I2C1_Init+0x144>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0f      	ldr	r2, [pc, #60]	; (8001598 <I2C1_Init+0x144>)
 800155a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800155e:	6013      	str	r3, [r2, #0]

	/*Set Peripheral clock frequency*/
	I2C1->CR2 = (1U<<4);   //16 Mhz
 8001560:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <I2C1_Init+0x144>)
 8001562:	2210      	movs	r2, #16
 8001564:	605a      	str	r2, [r3, #4]
//
//	/*Set rise time */
//	I2C1->TRISE = SD_MODE_MAX_RISE_TIME; //(1000ns/(1/16MHz)+1 = 17

	/*Set I2C to fast mode, 400kHz clock */
	I2C1->CCR = 1; //Refer to ST reference manual for derivation
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <I2C1_Init+0x144>)
 8001568:	2201      	movs	r2, #1
 800156a:	61da      	str	r2, [r3, #28]
	I2C1->CCR = I2C_FAST_DUTY; //Set to Fast mode and duty cycle of 16/9
 800156c:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <I2C1_Init+0x144>)
 800156e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001572:	61da      	str	r2, [r3, #28]

	/*Set rise time */
	I2C1->TRISE = 6;//FS_MODE_MAX_RISE_TIME; //(300ns/(1/16MHz)+1 = 5.8
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <I2C1_Init+0x144>)
 8001576:	2206      	movs	r2, #6
 8001578:	621a      	str	r2, [r3, #32]

	/*Enable I2C1 module */
	I2C1->CR1 |= CR1_PE;
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <I2C1_Init+0x144>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a06      	ldr	r2, [pc, #24]	; (8001598 <I2C1_Init+0x144>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6013      	str	r3, [r2, #0]
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	40023800 	.word	0x40023800
 8001594:	40020400 	.word	0x40020400
 8001598:	40005400 	.word	0x40005400

0800159c <I2C1_byteRead>:

void I2C1_byteRead(char saddr, char maddr, char* data) {
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	603a      	str	r2, [r7, #0]
 80015a6:	71fb      	strb	r3, [r7, #7]
 80015a8:	460b      	mov	r3, r1
 80015aa:	71bb      	strb	r3, [r7, #6]

	  volatile int tmp;

	  /* Wait until bus not busy */
	  while (I2C1->SR2 & (SR2_BUSY)){}
 80015ac:	bf00      	nop
 80015ae:	4b37      	ldr	r3, [pc, #220]	; (800168c <I2C1_byteRead+0xf0>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f9      	bne.n	80015ae <I2C1_byteRead+0x12>

	  /* Generate start condition */
	  I2C1->CR1 |= CR1_START;
 80015ba:	4b34      	ldr	r3, [pc, #208]	; (800168c <I2C1_byteRead+0xf0>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a33      	ldr	r2, [pc, #204]	; (800168c <I2C1_byteRead+0xf0>)
 80015c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015c4:	6013      	str	r3, [r2, #0]

	  /* Wait until start condition flag is set, note the negation */
	  /* Stay in loop if start flag is not set */
	  while (!(I2C1->SR1 & (SR1_SB))){}
 80015c6:	bf00      	nop
 80015c8:	4b30      	ldr	r3, [pc, #192]	; (800168c <I2C1_byteRead+0xf0>)
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0f9      	beq.n	80015c8 <I2C1_byteRead+0x2c>

	  /* Transmit slave address + Write (0) */
	  /* This slave address is sent to each slave device along with an indication to establish either read or write communication */
	  /* Yo device A, I want to write to one of your memory registers */
	  I2C1->DR = saddr << 1; // shifting the address left makes room for the R/W bit, which is 0 for write
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	005a      	lsls	r2, r3, #1
 80015d8:	4b2c      	ldr	r3, [pc, #176]	; (800168c <I2C1_byteRead+0xf0>)
 80015da:	611a      	str	r2, [r3, #16]

	  /* Wait until address flag is set */
	  /* Each slave device compares the address from master to its own address and sends an ACK if matched */
	  /* I'm device A and of course you can write to one of my registers */
	  while (!(I2C1->SR1 & (SR1_ADDR))){}
 80015dc:	bf00      	nop
 80015de:	4b2b      	ldr	r3, [pc, #172]	; (800168c <I2C1_byteRead+0xf0>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f9      	beq.n	80015de <I2C1_byteRead+0x42>

	  /* Clear address flag by reading SR2 register */
	  tmp = I2C1->SR2;
 80015ea:	4b28      	ldr	r3, [pc, #160]	; (800168c <I2C1_byteRead+0xf0>)
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	60fb      	str	r3, [r7, #12]

	  /*Wait until transmitter empty */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 80015f0:	bf00      	nop
 80015f2:	4b26      	ldr	r3, [pc, #152]	; (800168c <I2C1_byteRead+0xf0>)
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f9      	beq.n	80015f2 <I2C1_byteRead+0x56>

	  /* Send register address */
	  /* Aight, here is the location I writing to read from */
	  I2C1->DR = maddr;
 80015fe:	4a23      	ldr	r2, [pc, #140]	; (800168c <I2C1_byteRead+0xf0>)
 8001600:	79bb      	ldrb	r3, [r7, #6]
 8001602:	6113      	str	r3, [r2, #16]

	  /*Wait until transmitter empty */
	  /* No probs */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 8001604:	bf00      	nop
 8001606:	4b21      	ldr	r3, [pc, #132]	; (800168c <I2C1_byteRead+0xf0>)
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f9      	beq.n	8001606 <I2C1_byteRead+0x6a>

	 /* Begin actual reading process once slave device and register of interest are understood between master and slave*/
	 /*Generate restart */
	 I2C1->CR1 |= CR1_START;
 8001612:	4b1e      	ldr	r3, [pc, #120]	; (800168c <I2C1_byteRead+0xf0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a1d      	ldr	r2, [pc, #116]	; (800168c <I2C1_byteRead+0xf0>)
 8001618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800161c:	6013      	str	r3, [r2, #0]

	 /* Wait until start flag is set */
	 while (!(I2C1->SR1 & SR1_SB)){}
 800161e:	bf00      	nop
 8001620:	4b1a      	ldr	r3, [pc, #104]	; (800168c <I2C1_byteRead+0xf0>)
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f9      	beq.n	8001620 <I2C1_byteRead+0x84>

	 /* Transmit slave address + Read */
	 I2C1->DR = saddr << 1 | 1;
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	f043 0201 	orr.w	r2, r3, #1
 8001634:	4b15      	ldr	r3, [pc, #84]	; (800168c <I2C1_byteRead+0xf0>)
 8001636:	611a      	str	r2, [r3, #16]

	 /* Wait until addr flag is set */
	 while (!(I2C1->SR1 & (SR1_ADDR))){}
 8001638:	bf00      	nop
 800163a:	4b14      	ldr	r3, [pc, #80]	; (800168c <I2C1_byteRead+0xf0>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f9      	beq.n	800163a <I2C1_byteRead+0x9e>

	 /* Clear addr flag */
	 tmp = I2C1->SR2;
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <I2C1_byteRead+0xf0>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	60fb      	str	r3, [r7, #12]

	 /* Disable Acknowledge */
	 I2C1->CR1 &= ~CR1_ACK;
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <I2C1_byteRead+0xf0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0e      	ldr	r2, [pc, #56]	; (800168c <I2C1_byteRead+0xf0>)
 8001652:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001656:	6013      	str	r3, [r2, #0]

	 /* Generate stop after data received */
	 I2C1->CR1 |= CR1_STOP;
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <I2C1_byteRead+0xf0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0b      	ldr	r2, [pc, #44]	; (800168c <I2C1_byteRead+0xf0>)
 800165e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001662:	6013      	str	r3, [r2, #0]

	 /* Wait until RXNE flag is set */
	 while (!(I2C1->SR1 & SR1_RXNE)){}
 8001664:	bf00      	nop
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <I2C1_byteRead+0xf0>)
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f9      	beq.n	8001666 <I2C1_byteRead+0xca>

	 /* Read data from DR */
	 *data++ = I2C1->DR;
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <I2C1_byteRead+0xf0>)
 8001674:	6919      	ldr	r1, [r3, #16]
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	1c5a      	adds	r2, r3, #1
 800167a:	603a      	str	r2, [r7, #0]
 800167c:	b2ca      	uxtb	r2, r1
 800167e:	701a      	strb	r2, [r3, #0]
}
 8001680:	bf00      	nop
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	40005400 	.word	0x40005400

08001690 <I2C1_burstWrite>:
		 }
	 }

}

void I2C1_burstWrite(char saddr, char maddr, int n, char* data) {
 8001690:	b480      	push	{r7}
 8001692:	b087      	sub	sp, #28
 8001694:	af00      	add	r7, sp, #0
 8001696:	60ba      	str	r2, [r7, #8]
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	4603      	mov	r3, r0
 800169c:	73fb      	strb	r3, [r7, #15]
 800169e:	460b      	mov	r3, r1
 80016a0:	73bb      	strb	r3, [r7, #14]

	/* Temporary variable to read SR2*/
	volatile int tmp;

	/* Wait until bus not busy */
	while (I2C1->SR2 & (SR2_BUSY)){}
 80016a2:	bf00      	nop
 80016a4:	4b2a      	ldr	r3, [pc, #168]	; (8001750 <I2C1_burstWrite+0xc0>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f9      	bne.n	80016a4 <I2C1_burstWrite+0x14>

	/* Generate start condition */
	I2C1->CR1 |= CR1_START;
 80016b0:	4b27      	ldr	r3, [pc, #156]	; (8001750 <I2C1_burstWrite+0xc0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a26      	ldr	r2, [pc, #152]	; (8001750 <I2C1_burstWrite+0xc0>)
 80016b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ba:	6013      	str	r3, [r2, #0]

	/* Wait until start condition flag is set, note the negation */
	/* Stay in loop if start flag is not set*/
	while (!(I2C1->SR1 & (SR1_SB))){}
 80016bc:	bf00      	nop
 80016be:	4b24      	ldr	r3, [pc, #144]	; (8001750 <I2C1_burstWrite+0xc0>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f9      	beq.n	80016be <I2C1_burstWrite+0x2e>

	/* Transmit slave address + Write (0) */
	/* This slave address is sent to each slave device along with an indication to establish either read or write communication*/
	/* Yo device A, I want to write to one of your memory registers */
	I2C1->DR = saddr << 1; // shifting the address left makes room for the R/W bit, which is 0 for write
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	005a      	lsls	r2, r3, #1
 80016ce:	4b20      	ldr	r3, [pc, #128]	; (8001750 <I2C1_burstWrite+0xc0>)
 80016d0:	611a      	str	r2, [r3, #16]

	/* Wait until address flag is set */
	/* Each slave device compares the address from master to its own adress and sends an ACK if mathced*/
	/* I'm device A and of course you can write to one of my registers */
	while (!(I2C1->SR1 & (SR1_ADDR))){}
 80016d2:	bf00      	nop
 80016d4:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <I2C1_burstWrite+0xc0>)
 80016d6:	695b      	ldr	r3, [r3, #20]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0f9      	beq.n	80016d4 <I2C1_burstWrite+0x44>

	/* Clear address flag by reading SR2 register */
	tmp = I2C1->SR2;
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <I2C1_burstWrite+0xc0>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	613b      	str	r3, [r7, #16]

	/*Wait until data register empty */
	while (!(I2C1->SR1 & SR1_TXE)){}
 80016e6:	bf00      	nop
 80016e8:	4b19      	ldr	r3, [pc, #100]	; (8001750 <I2C1_burstWrite+0xc0>)
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f9      	beq.n	80016e8 <I2C1_burstWrite+0x58>

	/* Send register address */
	/* aight here is the register I'm writing to write to and the value I want written */
	I2C1->DR = maddr;
 80016f4:	4a16      	ldr	r2, [pc, #88]	; (8001750 <I2C1_burstWrite+0xc0>)
 80016f6:	7bbb      	ldrb	r3, [r7, #14]
 80016f8:	6113      	str	r3, [r2, #16]

	for (int i = 0; i < n; i++) {
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	e00f      	b.n	8001720 <I2C1_burstWrite+0x90>

		/*Wait until data register empty */
		while (!(I2C1->SR1 & SR1_TXE)){}
 8001700:	bf00      	nop
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <I2C1_burstWrite+0xc0>)
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f9      	beq.n	8001702 <I2C1_burstWrite+0x72>

		/* Transmit memory address */
		I2C1->DR = *data++;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	1c5a      	adds	r2, r3, #1
 8001712:	607a      	str	r2, [r7, #4]
 8001714:	781a      	ldrb	r2, [r3, #0]
 8001716:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <I2C1_burstWrite+0xc0>)
 8001718:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < n; i++) {
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	3301      	adds	r3, #1
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	429a      	cmp	r2, r3
 8001726:	dbeb      	blt.n	8001700 <I2C1_burstWrite+0x70>
	}
	/* Wait until transfer finished */
	while (!(I2C1->SR1 & (SR1_BTF))){}
 8001728:	bf00      	nop
 800172a:	4b09      	ldr	r3, [pc, #36]	; (8001750 <I2C1_burstWrite+0xc0>)
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f9      	beq.n	800172a <I2C1_burstWrite+0x9a>

	/* Generate stop */
	I2C1->CR1 |= CR1_STOP;
 8001736:	4b06      	ldr	r3, [pc, #24]	; (8001750 <I2C1_burstWrite+0xc0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <I2C1_burstWrite+0xc0>)
 800173c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001740:	6013      	str	r3, [r2, #0]
}
 8001742:	bf00      	nop
 8001744:	371c      	adds	r7, #28
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40005400 	.word	0x40005400

08001754 <main>:

#define NUM_CHANNELS	18


int main(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b09e      	sub	sp, #120	; 0x78
 8001758:	af00      	add	r7, sp, #0

	uint16_t channel_data[NUM_CHANNELS];
	float channel_data_cal[NUM_CHANNELS];

	bool works = initialize();
 800175a:	f7ff fa2d 	bl	8000bb8 <initialize>
 800175e:	4603      	mov	r3, r0
 8001760:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

	while(1)
	{
		// Calibrated Channels
		enableLED(AS7265x_LED_UV);
 8001764:	2002      	movs	r0, #2
 8001766:	f7ff fc93 	bl	8001090 <enableLED>
		delayMillis(3000);
 800176a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800176e:	f000 f9e1 	bl	8001b34 <delayMillis>
		channel_data_cal[0] = getCalibratedA();
 8001772:	f7ff fda8 	bl	80012c6 <getCalibratedA>
 8001776:	eef0 7a40 	vmov.f32	s15, s0
 800177a:	edc7 7a01 	vstr	s15, [r7, #4]
		channel_data_cal[1] = getCalibratedB();
 800177e:	f7ff fdad 	bl	80012dc <getCalibratedB>
 8001782:	eef0 7a40 	vmov.f32	s15, s0
 8001786:	edc7 7a02 	vstr	s15, [r7, #8]
		channel_data_cal[2] = getCalibratedC();
 800178a:	f7ff fdb2 	bl	80012f2 <getCalibratedC>
 800178e:	eef0 7a40 	vmov.f32	s15, s0
 8001792:	edc7 7a03 	vstr	s15, [r7, #12]
		channel_data_cal[3] = getCalibratedD();
 8001796:	f7ff fdb7 	bl	8001308 <getCalibratedD>
 800179a:	eef0 7a40 	vmov.f32	s15, s0
 800179e:	edc7 7a04 	vstr	s15, [r7, #16]
		channel_data_cal[4] = getCalibratedE();
 80017a2:	f7ff fdbc 	bl	800131e <getCalibratedE>
 80017a6:	eef0 7a40 	vmov.f32	s15, s0
 80017aa:	edc7 7a05 	vstr	s15, [r7, #20]
		channel_data_cal[5] = getCalibratedF();
 80017ae:	f7ff fdc1 	bl	8001334 <getCalibratedF>
 80017b2:	eef0 7a40 	vmov.f32	s15, s0
 80017b6:	edc7 7a06 	vstr	s15, [r7, #24]
		disableLED(AS7265x_LED_UV);
 80017ba:	2002      	movs	r0, #2
 80017bc:	f7ff fc83 	bl	80010c6 <disableLED>
		delayMillis(3000);
 80017c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80017c4:	f000 f9b6 	bl	8001b34 <delayMillis>

		enableLED(AS7265x_LED_WHITE);
 80017c8:	2000      	movs	r0, #0
 80017ca:	f7ff fc61 	bl	8001090 <enableLED>
		delayMillis(3000);
 80017ce:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80017d2:	f000 f9af 	bl	8001b34 <delayMillis>
		channel_data_cal[6] = getCalibratedG();
 80017d6:	f7ff fdb8 	bl	800134a <getCalibratedG>
 80017da:	eef0 7a40 	vmov.f32	s15, s0
 80017de:	edc7 7a07 	vstr	s15, [r7, #28]
		channel_data_cal[7] = getCalibratedH();
 80017e2:	f7ff fdbd 	bl	8001360 <getCalibratedH>
 80017e6:	eef0 7a40 	vmov.f32	s15, s0
 80017ea:	edc7 7a08 	vstr	s15, [r7, #32]
		channel_data_cal[9] = getCalibratedI();
 80017ee:	f7ff fdc2 	bl	8001376 <getCalibratedI>
 80017f2:	eef0 7a40 	vmov.f32	s15, s0
 80017f6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		channel_data_cal[11] = getCalibratedJ();
 80017fa:	f7ff fdc7 	bl	800138c <getCalibratedJ>
 80017fe:	eef0 7a40 	vmov.f32	s15, s0
 8001802:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		channel_data_cal[16] = getCalibratedK();
 8001806:	f7ff fdcc 	bl	80013a2 <getCalibratedK>
 800180a:	eef0 7a40 	vmov.f32	s15, s0
 800180e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		channel_data_cal[17] = getCalibratedL();
 8001812:	f7ff fdd1 	bl	80013b8 <getCalibratedL>
 8001816:	eef0 7a40 	vmov.f32	s15, s0
 800181a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		disableLED(AS7265x_LED_WHITE);
 800181e:	2000      	movs	r0, #0
 8001820:	f7ff fc51 	bl	80010c6 <disableLED>
		delayMillis(3000);
 8001824:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001828:	f000 f984 	bl	8001b34 <delayMillis>

		enableLED(AS7265x_LED_IR);
 800182c:	2001      	movs	r0, #1
 800182e:	f7ff fc2f 	bl	8001090 <enableLED>
		delayMillis(3000);
 8001832:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001836:	f000 f97d 	bl	8001b34 <delayMillis>
		channel_data_cal[8] = getCalibratedR();
 800183a:	f7ff fdc8 	bl	80013ce <getCalibratedR>
 800183e:	eef0 7a40 	vmov.f32	s15, s0
 8001842:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		channel_data_cal[10] = getCalibratedS();
 8001846:	f7ff fdcd 	bl	80013e4 <getCalibratedS>
 800184a:	eef0 7a40 	vmov.f32	s15, s0
 800184e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		channel_data_cal[12] = getCalibratedT();
 8001852:	f7ff fdd2 	bl	80013fa <getCalibratedT>
 8001856:	eef0 7a40 	vmov.f32	s15, s0
 800185a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		channel_data_cal[13] = getCalibratedU();
 800185e:	f7ff fdd7 	bl	8001410 <getCalibratedU>
 8001862:	eef0 7a40 	vmov.f32	s15, s0
 8001866:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		channel_data_cal[14] = getCalibratedV();
 800186a:	f7ff fddc 	bl	8001426 <getCalibratedV>
 800186e:	eef0 7a40 	vmov.f32	s15, s0
 8001872:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		channel_data_cal[15] = getCalibratedW();
 8001876:	f7ff fde1 	bl	800143c <getCalibratedW>
 800187a:	eef0 7a40 	vmov.f32	s15, s0
 800187e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		disableLED(AS7265x_LED_IR);
 8001882:	2001      	movs	r0, #1
 8001884:	f7ff fc1f 	bl	80010c6 <disableLED>
		delayMillis(3000);
 8001888:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800188c:	f000 f952 	bl	8001b34 <delayMillis>

		printf("\nCalibrated Data Channels \n\r");
 8001890:	480f      	ldr	r0, [pc, #60]	; (80018d0 <main+0x17c>)
 8001892:	f000 ff71 	bl	8002778 <iprintf>
		for (int i = 0; i < NUM_CHANNELS; i++)
 8001896:	2300      	movs	r3, #0
 8001898:	677b      	str	r3, [r7, #116]	; 0x74
 800189a:	e010      	b.n	80018be <main+0x16a>
		{
//			printf("Channel %i: %f\n\r", i+1, channel_data_cal[i]);
			printf("%f\n\r", channel_data_cal[i]);
 800189c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	3378      	adds	r3, #120	; 0x78
 80018a2:	443b      	add	r3, r7
 80018a4:	3b74      	subs	r3, #116	; 0x74
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe55 	bl	8000558 <__aeabi_f2d>
 80018ae:	4602      	mov	r2, r0
 80018b0:	460b      	mov	r3, r1
 80018b2:	4808      	ldr	r0, [pc, #32]	; (80018d4 <main+0x180>)
 80018b4:	f000 ff60 	bl	8002778 <iprintf>
		for (int i = 0; i < NUM_CHANNELS; i++)
 80018b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018ba:	3301      	adds	r3, #1
 80018bc:	677b      	str	r3, [r7, #116]	; 0x74
 80018be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018c0:	2b11      	cmp	r3, #17
 80018c2:	ddeb      	ble.n	800189c <main+0x148>
		}

		break;
 80018c4:	bf00      	nop

	}
	return 0;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3778      	adds	r7, #120	; 0x78
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	08004704 	.word	0x08004704
 80018d4:	08004724 	.word	0x08004724

080018d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return 1;
 80018dc:	2301      	movs	r3, #1
}
 80018de:	4618      	mov	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <_kill>:

int _kill(int pid, int sig)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018f2:	f000 ffe9 	bl	80028c8 <__errno>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2216      	movs	r2, #22
 80018fa:	601a      	str	r2, [r3, #0]
  return -1;
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_exit>:

void _exit (int status)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ffe7 	bl	80018e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800191a:	e7fe      	b.n	800191a <_exit+0x12>

0800191c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	e00a      	b.n	8001944 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800192e:	f3af 8000 	nop.w
 8001932:	4601      	mov	r1, r0
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	1c5a      	adds	r2, r3, #1
 8001938:	60ba      	str	r2, [r7, #8]
 800193a:	b2ca      	uxtb	r2, r1
 800193c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	3301      	adds	r3, #1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	429a      	cmp	r2, r3
 800194a:	dbf0      	blt.n	800192e <_read+0x12>
  }

  return len;
 800194c:	687b      	ldr	r3, [r7, #4]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	e009      	b.n	800197c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	60ba      	str	r2, [r7, #8]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f000 f8f4 	bl	8001b5e <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3301      	adds	r3, #1
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	429a      	cmp	r2, r3
 8001982:	dbf1      	blt.n	8001968 <_write+0x12>
  }
  return len;
 8001984:	687b      	ldr	r3, [r7, #4]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <_close>:

int _close(int file)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001996:	f04f 33ff 	mov.w	r3, #4294967295
}
 800199a:	4618      	mov	r0, r3
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019b6:	605a      	str	r2, [r3, #4]
  return 0;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <_isatty>:

int _isatty(int file)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019ce:	2301      	movs	r3, #1
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	370c      	adds	r7, #12
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a00:	4a14      	ldr	r2, [pc, #80]	; (8001a54 <_sbrk+0x5c>)
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <_sbrk+0x60>)
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a0c:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <_sbrk+0x64>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d102      	bne.n	8001a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a14:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <_sbrk+0x64>)
 8001a16:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <_sbrk+0x68>)
 8001a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <_sbrk+0x64>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d207      	bcs.n	8001a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a28:	f000 ff4e 	bl	80028c8 <__errno>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	220c      	movs	r2, #12
 8001a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a32:	f04f 33ff 	mov.w	r3, #4294967295
 8001a36:	e009      	b.n	8001a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <_sbrk+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <_sbrk+0x64>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	4a05      	ldr	r2, [pc, #20]	; (8001a5c <_sbrk+0x64>)
 8001a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20018000 	.word	0x20018000
 8001a58:	00000400 	.word	0x00000400
 8001a5c:	200001e8 	.word	0x200001e8
 8001a60:	20000340 	.word	0x20000340

08001a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	db0a      	blt.n	8001a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	490c      	ldr	r1, [pc, #48]	; (8001ab0 <__NVIC_SetPriority+0x4c>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	440b      	add	r3, r1
 8001a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a8c:	e00a      	b.n	8001aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4908      	ldr	r1, [pc, #32]	; (8001ab4 <__NVIC_SetPriority+0x50>)
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	3b04      	subs	r3, #4
 8001a9c:	0112      	lsls	r2, r2, #4
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	761a      	strb	r2, [r3, #24]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000e100 	.word	0xe000e100
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <SysTick_Init>:
#define CTRL_COUNTFLAG			(1U<<16)

volatile uint32_t msTicks = 0;

void SysTick_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
    // Reload with the number of clocks per millisecond
    SysTick->LOAD = SYSTICK_LOAD_VAL - 1;  // Set reload register (off by one)
 8001abc:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <SysTick_Init+0x44>)
 8001abe:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001ac2:	605a      	str	r2, [r3, #4]

    // Set the priority of the SysTick interrupt
    NVIC_SetPriority(SysTick_IRQn, (1 << __NVIC_PRIO_BITS) - 1);  // Set lowest priority
 8001ac4:	210f      	movs	r1, #15
 8001ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8001aca:	f7ff ffcb 	bl	8001a64 <__NVIC_SetPriority>

    // Reset the SysTick counter value
    SysTick->VAL = 0;
 8001ace:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <SysTick_Init+0x44>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]

    // Select processor clock as SysTick clock source
    SysTick->CTRL |= CTRL_CLKSRC;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <SysTick_Init+0x44>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a08      	ldr	r2, [pc, #32]	; (8001afc <SysTick_Init+0x44>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	6013      	str	r3, [r2, #0]

    // Enable SysTick interrupt
    SysTick->CTRL |= CTRL_TICKINT;
 8001ae0:	4b06      	ldr	r3, [pc, #24]	; (8001afc <SysTick_Init+0x44>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a05      	ldr	r2, [pc, #20]	; (8001afc <SysTick_Init+0x44>)
 8001ae6:	f043 0302 	orr.w	r3, r3, #2
 8001aea:	6013      	str	r3, [r2, #0]

    // Enable SysTick timer
    SysTick->CTRL |= CTRL_ENABLE;
 8001aec:	4b03      	ldr	r3, [pc, #12]	; (8001afc <SysTick_Init+0x44>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a02      	ldr	r2, [pc, #8]	; (8001afc <SysTick_Init+0x44>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6013      	str	r3, [r2, #0]
}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	e000e010 	.word	0xe000e010

08001b00 <SysTick_Handler>:

// SysTick Handler - Called every 1ms
void SysTick_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
	msTicks++;
 8001b04:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <SysTick_Handler+0x18>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	4a03      	ldr	r2, [pc, #12]	; (8001b18 <SysTick_Handler+0x18>)
 8001b0c:	6013      	str	r3, [r2, #0]
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	200001ec 	.word	0x200001ec

08001b1c <getMillis>:

// Function to get the current time in milliseconds
uint32_t getMillis(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
	return msTicks;
 8001b20:	4b03      	ldr	r3, [pc, #12]	; (8001b30 <getMillis+0x14>)
 8001b22:	681b      	ldr	r3, [r3, #0]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	200001ec 	.word	0x200001ec

08001b34 <delayMillis>:

void delayMillis(uint32_t delay)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	uint32_t startTick = getMillis();
 8001b3c:	f7ff ffee 	bl	8001b1c <getMillis>
 8001b40:	60f8      	str	r0, [r7, #12]
	while ((getMillis() - startTick) < delay){}
 8001b42:	bf00      	nop
 8001b44:	f7ff ffea 	bl	8001b1c <getMillis>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d8f7      	bhi.n	8001b44 <delayMillis+0x10>
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <__io_putchar>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);

int __io_putchar(int ch)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f876 	bl	8001c58 <uart2_write>
	return ch;
 8001b6c:	687b      	ldr	r3, [r7, #4]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <uart2_rxtx_init>:

void uart2_rxtx_init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
	/****************Configure uart  pin using gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 8001b7c:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <uart2_rxtx_init+0xd0>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	4a31      	ldr	r2, [pc, #196]	; (8001c48 <uart2_rxtx_init+0xd0>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6313      	str	r3, [r2, #48]	; 0x30


	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~ (1U<<4);
 8001b88:	4b30      	ldr	r3, [pc, #192]	; (8001c4c <uart2_rxtx_init+0xd4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a2f      	ldr	r2, [pc, #188]	; (8001c4c <uart2_rxtx_init+0xd4>)
 8001b8e:	f023 0310 	bic.w	r3, r3, #16
 8001b92:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8001b94:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <uart2_rxtx_init+0xd4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a2c      	ldr	r2, [pc, #176]	; (8001c4c <uart2_rxtx_init+0xd4>)
 8001b9a:	f043 0320 	orr.w	r3, r3, #32
 8001b9e:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0]|= (1U<<8);
 8001ba0:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <uart2_rxtx_init+0xd4>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4a29      	ldr	r2, [pc, #164]	; (8001c4c <uart2_rxtx_init+0xd4>)
 8001ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001baa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<9);
 8001bac:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <uart2_rxtx_init+0xd4>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	4a26      	ldr	r2, [pc, #152]	; (8001c4c <uart2_rxtx_init+0xd4>)
 8001bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<10);
 8001bb8:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <uart2_rxtx_init+0xd4>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4a23      	ldr	r2, [pc, #140]	; (8001c4c <uart2_rxtx_init+0xd4>)
 8001bbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bc2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<11);
 8001bc4:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <uart2_rxtx_init+0xd4>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	4a20      	ldr	r2, [pc, #128]	; (8001c4c <uart2_rxtx_init+0xd4>)
 8001bca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001bce:	6213      	str	r3, [r2, #32]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~ (1U<<6);
 8001bd0:	4b1e      	ldr	r3, [pc, #120]	; (8001c4c <uart2_rxtx_init+0xd4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1d      	ldr	r2, [pc, #116]	; (8001c4c <uart2_rxtx_init+0xd4>)
 8001bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bda:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8001bdc:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <uart2_rxtx_init+0xd4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1a      	ldr	r2, [pc, #104]	; (8001c4c <uart2_rxtx_init+0xd4>)
 8001be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be6:	6013      	str	r3, [r2, #0]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0]|= (1U<<12);
 8001be8:	4b18      	ldr	r3, [pc, #96]	; (8001c4c <uart2_rxtx_init+0xd4>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	4a17      	ldr	r2, [pc, #92]	; (8001c4c <uart2_rxtx_init+0xd4>)
 8001bee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001bf2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<13);
 8001bf4:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <uart2_rxtx_init+0xd4>)
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <uart2_rxtx_init+0xd4>)
 8001bfa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bfe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<14);
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <uart2_rxtx_init+0xd4>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4a11      	ldr	r2, [pc, #68]	; (8001c4c <uart2_rxtx_init+0xd4>)
 8001c06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<15);
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <uart2_rxtx_init+0xd4>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	4a0e      	ldr	r2, [pc, #56]	; (8001c4c <uart2_rxtx_init+0xd4>)
 8001c12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001c16:	6213      	str	r3, [r2, #32]



	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= USART2EN;
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <uart2_rxtx_init+0xd0>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <uart2_rxtx_init+0xd0>)
 8001c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c22:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8001c24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c28:	4909      	ldr	r1, [pc, #36]	; (8001c50 <uart2_rxtx_init+0xd8>)
 8001c2a:	480a      	ldr	r0, [pc, #40]	; (8001c54 <uart2_rxtx_init+0xdc>)
 8001c2c:	f000 f82c 	bl	8001c88 <uart_set_baudrate>

	/*Configure the transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <uart2_rxtx_init+0xdc>)
 8001c32:	220c      	movs	r2, #12
 8001c34:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	USART2->CR1 |= CR1_UE;
 8001c36:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <uart2_rxtx_init+0xdc>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	4a06      	ldr	r2, [pc, #24]	; (8001c54 <uart2_rxtx_init+0xdc>)
 8001c3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c40:	60d3      	str	r3, [r2, #12]

}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40020000 	.word	0x40020000
 8001c50:	00f42400 	.word	0x00f42400
 8001c54:	40004400 	.word	0x40004400

08001c58 <uart2_write>:
	return USART2->DR;

}

void uart2_write(int ch)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){} // Program stays here until condition in while loop no longer holds
 8001c60:	bf00      	nop
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <uart2_write+0x2c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0f9      	beq.n	8001c62 <uart2_write+0xa>

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a04      	ldr	r2, [pc, #16]	; (8001c84 <uart2_write+0x2c>)
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	6053      	str	r3, [r2, #4]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	40004400 	.word	0x40004400

08001c88 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	68b8      	ldr	r0, [r7, #8]
 8001c98:	f000 f808 	bl	8001cac <compute_uart_bd>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	609a      	str	r2, [r3, #8]
}
 8001ca4:	bf00      	nop
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	085a      	lsrs	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	441a      	add	r2, r3
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc4:	b29b      	uxth	r3, r3
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cd4:	480d      	ldr	r0, [pc, #52]	; (8001d0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cd6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cd8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cdc:	480c      	ldr	r0, [pc, #48]	; (8001d10 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cde:	490d      	ldr	r1, [pc, #52]	; (8001d14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	; (8001d18 <LoopForever+0xe>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce4:	e002      	b.n	8001cec <LoopCopyDataInit>

08001ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cea:	3304      	adds	r3, #4

08001cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf0:	d3f9      	bcc.n	8001ce6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cf4:	4c0a      	ldr	r4, [pc, #40]	; (8001d20 <LoopForever+0x16>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf8:	e001      	b.n	8001cfe <LoopFillZerobss>

08001cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cfc:	3204      	adds	r2, #4

08001cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d00:	d3fb      	bcc.n	8001cfa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d02:	f000 fde7 	bl	80028d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d06:	f7ff fd25 	bl	8001754 <main>

08001d0a <LoopForever>:

LoopForever:
  b LoopForever
 8001d0a:	e7fe      	b.n	8001d0a <LoopForever>
  ldr   r0, =_estack
 8001d0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d14:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001d18:	08004aa4 	.word	0x08004aa4
  ldr r2, =_sbss
 8001d1c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001d20:	2000033c 	.word	0x2000033c

08001d24 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d24:	e7fe      	b.n	8001d24 <ADC_IRQHandler>

08001d26 <__cvt>:
 8001d26:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d2a:	ec55 4b10 	vmov	r4, r5, d0
 8001d2e:	2d00      	cmp	r5, #0
 8001d30:	460e      	mov	r6, r1
 8001d32:	4619      	mov	r1, r3
 8001d34:	462b      	mov	r3, r5
 8001d36:	bfbb      	ittet	lt
 8001d38:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8001d3c:	461d      	movlt	r5, r3
 8001d3e:	2300      	movge	r3, #0
 8001d40:	232d      	movlt	r3, #45	; 0x2d
 8001d42:	700b      	strb	r3, [r1, #0]
 8001d44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001d46:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8001d4a:	4691      	mov	r9, r2
 8001d4c:	f023 0820 	bic.w	r8, r3, #32
 8001d50:	bfbc      	itt	lt
 8001d52:	4622      	movlt	r2, r4
 8001d54:	4614      	movlt	r4, r2
 8001d56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8001d5a:	d005      	beq.n	8001d68 <__cvt+0x42>
 8001d5c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8001d60:	d100      	bne.n	8001d64 <__cvt+0x3e>
 8001d62:	3601      	adds	r6, #1
 8001d64:	2102      	movs	r1, #2
 8001d66:	e000      	b.n	8001d6a <__cvt+0x44>
 8001d68:	2103      	movs	r1, #3
 8001d6a:	ab03      	add	r3, sp, #12
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	ab02      	add	r3, sp, #8
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	ec45 4b10 	vmov	d0, r4, r5
 8001d76:	4653      	mov	r3, sl
 8001d78:	4632      	mov	r2, r6
 8001d7a:	f000 fe5d 	bl	8002a38 <_dtoa_r>
 8001d7e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8001d82:	4607      	mov	r7, r0
 8001d84:	d102      	bne.n	8001d8c <__cvt+0x66>
 8001d86:	f019 0f01 	tst.w	r9, #1
 8001d8a:	d022      	beq.n	8001dd2 <__cvt+0xac>
 8001d8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8001d90:	eb07 0906 	add.w	r9, r7, r6
 8001d94:	d110      	bne.n	8001db8 <__cvt+0x92>
 8001d96:	783b      	ldrb	r3, [r7, #0]
 8001d98:	2b30      	cmp	r3, #48	; 0x30
 8001d9a:	d10a      	bne.n	8001db2 <__cvt+0x8c>
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2300      	movs	r3, #0
 8001da0:	4620      	mov	r0, r4
 8001da2:	4629      	mov	r1, r5
 8001da4:	f7fe fe98 	bl	8000ad8 <__aeabi_dcmpeq>
 8001da8:	b918      	cbnz	r0, 8001db2 <__cvt+0x8c>
 8001daa:	f1c6 0601 	rsb	r6, r6, #1
 8001dae:	f8ca 6000 	str.w	r6, [sl]
 8001db2:	f8da 3000 	ldr.w	r3, [sl]
 8001db6:	4499      	add	r9, r3
 8001db8:	2200      	movs	r2, #0
 8001dba:	2300      	movs	r3, #0
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	4629      	mov	r1, r5
 8001dc0:	f7fe fe8a 	bl	8000ad8 <__aeabi_dcmpeq>
 8001dc4:	b108      	cbz	r0, 8001dca <__cvt+0xa4>
 8001dc6:	f8cd 900c 	str.w	r9, [sp, #12]
 8001dca:	2230      	movs	r2, #48	; 0x30
 8001dcc:	9b03      	ldr	r3, [sp, #12]
 8001dce:	454b      	cmp	r3, r9
 8001dd0:	d307      	bcc.n	8001de2 <__cvt+0xbc>
 8001dd2:	9b03      	ldr	r3, [sp, #12]
 8001dd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001dd6:	1bdb      	subs	r3, r3, r7
 8001dd8:	4638      	mov	r0, r7
 8001dda:	6013      	str	r3, [r2, #0]
 8001ddc:	b004      	add	sp, #16
 8001dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001de2:	1c59      	adds	r1, r3, #1
 8001de4:	9103      	str	r1, [sp, #12]
 8001de6:	701a      	strb	r2, [r3, #0]
 8001de8:	e7f0      	b.n	8001dcc <__cvt+0xa6>

08001dea <__exponent>:
 8001dea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001dec:	4603      	mov	r3, r0
 8001dee:	2900      	cmp	r1, #0
 8001df0:	bfb8      	it	lt
 8001df2:	4249      	neglt	r1, r1
 8001df4:	f803 2b02 	strb.w	r2, [r3], #2
 8001df8:	bfb4      	ite	lt
 8001dfa:	222d      	movlt	r2, #45	; 0x2d
 8001dfc:	222b      	movge	r2, #43	; 0x2b
 8001dfe:	2909      	cmp	r1, #9
 8001e00:	7042      	strb	r2, [r0, #1]
 8001e02:	dd2a      	ble.n	8001e5a <__exponent+0x70>
 8001e04:	f10d 0207 	add.w	r2, sp, #7
 8001e08:	4617      	mov	r7, r2
 8001e0a:	260a      	movs	r6, #10
 8001e0c:	4694      	mov	ip, r2
 8001e0e:	fb91 f5f6 	sdiv	r5, r1, r6
 8001e12:	fb06 1415 	mls	r4, r6, r5, r1
 8001e16:	3430      	adds	r4, #48	; 0x30
 8001e18:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8001e1c:	460c      	mov	r4, r1
 8001e1e:	2c63      	cmp	r4, #99	; 0x63
 8001e20:	f102 32ff 	add.w	r2, r2, #4294967295
 8001e24:	4629      	mov	r1, r5
 8001e26:	dcf1      	bgt.n	8001e0c <__exponent+0x22>
 8001e28:	3130      	adds	r1, #48	; 0x30
 8001e2a:	f1ac 0402 	sub.w	r4, ip, #2
 8001e2e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8001e32:	1c41      	adds	r1, r0, #1
 8001e34:	4622      	mov	r2, r4
 8001e36:	42ba      	cmp	r2, r7
 8001e38:	d30a      	bcc.n	8001e50 <__exponent+0x66>
 8001e3a:	f10d 0209 	add.w	r2, sp, #9
 8001e3e:	eba2 020c 	sub.w	r2, r2, ip
 8001e42:	42bc      	cmp	r4, r7
 8001e44:	bf88      	it	hi
 8001e46:	2200      	movhi	r2, #0
 8001e48:	4413      	add	r3, r2
 8001e4a:	1a18      	subs	r0, r3, r0
 8001e4c:	b003      	add	sp, #12
 8001e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e50:	f812 5b01 	ldrb.w	r5, [r2], #1
 8001e54:	f801 5f01 	strb.w	r5, [r1, #1]!
 8001e58:	e7ed      	b.n	8001e36 <__exponent+0x4c>
 8001e5a:	2330      	movs	r3, #48	; 0x30
 8001e5c:	3130      	adds	r1, #48	; 0x30
 8001e5e:	7083      	strb	r3, [r0, #2]
 8001e60:	70c1      	strb	r1, [r0, #3]
 8001e62:	1d03      	adds	r3, r0, #4
 8001e64:	e7f1      	b.n	8001e4a <__exponent+0x60>
	...

08001e68 <_printf_float>:
 8001e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e6c:	ed2d 8b02 	vpush	{d8}
 8001e70:	b08d      	sub	sp, #52	; 0x34
 8001e72:	460c      	mov	r4, r1
 8001e74:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8001e78:	4616      	mov	r6, r2
 8001e7a:	461f      	mov	r7, r3
 8001e7c:	4605      	mov	r5, r0
 8001e7e:	f000 fcd9 	bl	8002834 <_localeconv_r>
 8001e82:	f8d0 a000 	ldr.w	sl, [r0]
 8001e86:	4650      	mov	r0, sl
 8001e88:	f7fe f9fa 	bl	8000280 <strlen>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	930a      	str	r3, [sp, #40]	; 0x28
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	9305      	str	r3, [sp, #20]
 8001e94:	f8d8 3000 	ldr.w	r3, [r8]
 8001e98:	f894 b018 	ldrb.w	fp, [r4, #24]
 8001e9c:	3307      	adds	r3, #7
 8001e9e:	f023 0307 	bic.w	r3, r3, #7
 8001ea2:	f103 0208 	add.w	r2, r3, #8
 8001ea6:	f8c8 2000 	str.w	r2, [r8]
 8001eaa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001eae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8001eb2:	9307      	str	r3, [sp, #28]
 8001eb4:	f8cd 8018 	str.w	r8, [sp, #24]
 8001eb8:	ee08 0a10 	vmov	s16, r0
 8001ebc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8001ec0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001ec4:	4b9e      	ldr	r3, [pc, #632]	; (8002140 <_printf_float+0x2d8>)
 8001ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eca:	f7fe fe37 	bl	8000b3c <__aeabi_dcmpun>
 8001ece:	bb88      	cbnz	r0, 8001f34 <_printf_float+0xcc>
 8001ed0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001ed4:	4b9a      	ldr	r3, [pc, #616]	; (8002140 <_printf_float+0x2d8>)
 8001ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eda:	f7fe fe11 	bl	8000b00 <__aeabi_dcmple>
 8001ede:	bb48      	cbnz	r0, 8001f34 <_printf_float+0xcc>
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	4640      	mov	r0, r8
 8001ee6:	4649      	mov	r1, r9
 8001ee8:	f7fe fe00 	bl	8000aec <__aeabi_dcmplt>
 8001eec:	b110      	cbz	r0, 8001ef4 <_printf_float+0x8c>
 8001eee:	232d      	movs	r3, #45	; 0x2d
 8001ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ef4:	4a93      	ldr	r2, [pc, #588]	; (8002144 <_printf_float+0x2dc>)
 8001ef6:	4b94      	ldr	r3, [pc, #592]	; (8002148 <_printf_float+0x2e0>)
 8001ef8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8001efc:	bf94      	ite	ls
 8001efe:	4690      	movls	r8, r2
 8001f00:	4698      	movhi	r8, r3
 8001f02:	2303      	movs	r3, #3
 8001f04:	6123      	str	r3, [r4, #16]
 8001f06:	9b05      	ldr	r3, [sp, #20]
 8001f08:	f023 0304 	bic.w	r3, r3, #4
 8001f0c:	6023      	str	r3, [r4, #0]
 8001f0e:	f04f 0900 	mov.w	r9, #0
 8001f12:	9700      	str	r7, [sp, #0]
 8001f14:	4633      	mov	r3, r6
 8001f16:	aa0b      	add	r2, sp, #44	; 0x2c
 8001f18:	4621      	mov	r1, r4
 8001f1a:	4628      	mov	r0, r5
 8001f1c:	f000 f9da 	bl	80022d4 <_printf_common>
 8001f20:	3001      	adds	r0, #1
 8001f22:	f040 8090 	bne.w	8002046 <_printf_float+0x1de>
 8001f26:	f04f 30ff 	mov.w	r0, #4294967295
 8001f2a:	b00d      	add	sp, #52	; 0x34
 8001f2c:	ecbd 8b02 	vpop	{d8}
 8001f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f34:	4642      	mov	r2, r8
 8001f36:	464b      	mov	r3, r9
 8001f38:	4640      	mov	r0, r8
 8001f3a:	4649      	mov	r1, r9
 8001f3c:	f7fe fdfe 	bl	8000b3c <__aeabi_dcmpun>
 8001f40:	b140      	cbz	r0, 8001f54 <_printf_float+0xec>
 8001f42:	464b      	mov	r3, r9
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	bfbc      	itt	lt
 8001f48:	232d      	movlt	r3, #45	; 0x2d
 8001f4a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8001f4e:	4a7f      	ldr	r2, [pc, #508]	; (800214c <_printf_float+0x2e4>)
 8001f50:	4b7f      	ldr	r3, [pc, #508]	; (8002150 <_printf_float+0x2e8>)
 8001f52:	e7d1      	b.n	8001ef8 <_printf_float+0x90>
 8001f54:	6863      	ldr	r3, [r4, #4]
 8001f56:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8001f5a:	9206      	str	r2, [sp, #24]
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	d13f      	bne.n	8001fe0 <_printf_float+0x178>
 8001f60:	2306      	movs	r3, #6
 8001f62:	6063      	str	r3, [r4, #4]
 8001f64:	9b05      	ldr	r3, [sp, #20]
 8001f66:	6861      	ldr	r1, [r4, #4]
 8001f68:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	9303      	str	r3, [sp, #12]
 8001f70:	ab0a      	add	r3, sp, #40	; 0x28
 8001f72:	e9cd b301 	strd	fp, r3, [sp, #4]
 8001f76:	ab09      	add	r3, sp, #36	; 0x24
 8001f78:	ec49 8b10 	vmov	d0, r8, r9
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	6022      	str	r2, [r4, #0]
 8001f80:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8001f84:	4628      	mov	r0, r5
 8001f86:	f7ff fece 	bl	8001d26 <__cvt>
 8001f8a:	9b06      	ldr	r3, [sp, #24]
 8001f8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8001f8e:	2b47      	cmp	r3, #71	; 0x47
 8001f90:	4680      	mov	r8, r0
 8001f92:	d108      	bne.n	8001fa6 <_printf_float+0x13e>
 8001f94:	1cc8      	adds	r0, r1, #3
 8001f96:	db02      	blt.n	8001f9e <_printf_float+0x136>
 8001f98:	6863      	ldr	r3, [r4, #4]
 8001f9a:	4299      	cmp	r1, r3
 8001f9c:	dd41      	ble.n	8002022 <_printf_float+0x1ba>
 8001f9e:	f1ab 0302 	sub.w	r3, fp, #2
 8001fa2:	fa5f fb83 	uxtb.w	fp, r3
 8001fa6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8001faa:	d820      	bhi.n	8001fee <_printf_float+0x186>
 8001fac:	3901      	subs	r1, #1
 8001fae:	465a      	mov	r2, fp
 8001fb0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8001fb4:	9109      	str	r1, [sp, #36]	; 0x24
 8001fb6:	f7ff ff18 	bl	8001dea <__exponent>
 8001fba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001fbc:	1813      	adds	r3, r2, r0
 8001fbe:	2a01      	cmp	r2, #1
 8001fc0:	4681      	mov	r9, r0
 8001fc2:	6123      	str	r3, [r4, #16]
 8001fc4:	dc02      	bgt.n	8001fcc <_printf_float+0x164>
 8001fc6:	6822      	ldr	r2, [r4, #0]
 8001fc8:	07d2      	lsls	r2, r2, #31
 8001fca:	d501      	bpl.n	8001fd0 <_printf_float+0x168>
 8001fcc:	3301      	adds	r3, #1
 8001fce:	6123      	str	r3, [r4, #16]
 8001fd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d09c      	beq.n	8001f12 <_printf_float+0xaa>
 8001fd8:	232d      	movs	r3, #45	; 0x2d
 8001fda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001fde:	e798      	b.n	8001f12 <_printf_float+0xaa>
 8001fe0:	9a06      	ldr	r2, [sp, #24]
 8001fe2:	2a47      	cmp	r2, #71	; 0x47
 8001fe4:	d1be      	bne.n	8001f64 <_printf_float+0xfc>
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1bc      	bne.n	8001f64 <_printf_float+0xfc>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e7b9      	b.n	8001f62 <_printf_float+0xfa>
 8001fee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8001ff2:	d118      	bne.n	8002026 <_printf_float+0x1be>
 8001ff4:	2900      	cmp	r1, #0
 8001ff6:	6863      	ldr	r3, [r4, #4]
 8001ff8:	dd0b      	ble.n	8002012 <_printf_float+0x1aa>
 8001ffa:	6121      	str	r1, [r4, #16]
 8001ffc:	b913      	cbnz	r3, 8002004 <_printf_float+0x19c>
 8001ffe:	6822      	ldr	r2, [r4, #0]
 8002000:	07d0      	lsls	r0, r2, #31
 8002002:	d502      	bpl.n	800200a <_printf_float+0x1a2>
 8002004:	3301      	adds	r3, #1
 8002006:	440b      	add	r3, r1
 8002008:	6123      	str	r3, [r4, #16]
 800200a:	65a1      	str	r1, [r4, #88]	; 0x58
 800200c:	f04f 0900 	mov.w	r9, #0
 8002010:	e7de      	b.n	8001fd0 <_printf_float+0x168>
 8002012:	b913      	cbnz	r3, 800201a <_printf_float+0x1b2>
 8002014:	6822      	ldr	r2, [r4, #0]
 8002016:	07d2      	lsls	r2, r2, #31
 8002018:	d501      	bpl.n	800201e <_printf_float+0x1b6>
 800201a:	3302      	adds	r3, #2
 800201c:	e7f4      	b.n	8002008 <_printf_float+0x1a0>
 800201e:	2301      	movs	r3, #1
 8002020:	e7f2      	b.n	8002008 <_printf_float+0x1a0>
 8002022:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002028:	4299      	cmp	r1, r3
 800202a:	db05      	blt.n	8002038 <_printf_float+0x1d0>
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	6121      	str	r1, [r4, #16]
 8002030:	07d8      	lsls	r0, r3, #31
 8002032:	d5ea      	bpl.n	800200a <_printf_float+0x1a2>
 8002034:	1c4b      	adds	r3, r1, #1
 8002036:	e7e7      	b.n	8002008 <_printf_float+0x1a0>
 8002038:	2900      	cmp	r1, #0
 800203a:	bfd4      	ite	le
 800203c:	f1c1 0202 	rsble	r2, r1, #2
 8002040:	2201      	movgt	r2, #1
 8002042:	4413      	add	r3, r2
 8002044:	e7e0      	b.n	8002008 <_printf_float+0x1a0>
 8002046:	6823      	ldr	r3, [r4, #0]
 8002048:	055a      	lsls	r2, r3, #21
 800204a:	d407      	bmi.n	800205c <_printf_float+0x1f4>
 800204c:	6923      	ldr	r3, [r4, #16]
 800204e:	4642      	mov	r2, r8
 8002050:	4631      	mov	r1, r6
 8002052:	4628      	mov	r0, r5
 8002054:	47b8      	blx	r7
 8002056:	3001      	adds	r0, #1
 8002058:	d12c      	bne.n	80020b4 <_printf_float+0x24c>
 800205a:	e764      	b.n	8001f26 <_printf_float+0xbe>
 800205c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002060:	f240 80e0 	bls.w	8002224 <_printf_float+0x3bc>
 8002064:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002068:	2200      	movs	r2, #0
 800206a:	2300      	movs	r3, #0
 800206c:	f7fe fd34 	bl	8000ad8 <__aeabi_dcmpeq>
 8002070:	2800      	cmp	r0, #0
 8002072:	d034      	beq.n	80020de <_printf_float+0x276>
 8002074:	4a37      	ldr	r2, [pc, #220]	; (8002154 <_printf_float+0x2ec>)
 8002076:	2301      	movs	r3, #1
 8002078:	4631      	mov	r1, r6
 800207a:	4628      	mov	r0, r5
 800207c:	47b8      	blx	r7
 800207e:	3001      	adds	r0, #1
 8002080:	f43f af51 	beq.w	8001f26 <_printf_float+0xbe>
 8002084:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002088:	429a      	cmp	r2, r3
 800208a:	db02      	blt.n	8002092 <_printf_float+0x22a>
 800208c:	6823      	ldr	r3, [r4, #0]
 800208e:	07d8      	lsls	r0, r3, #31
 8002090:	d510      	bpl.n	80020b4 <_printf_float+0x24c>
 8002092:	ee18 3a10 	vmov	r3, s16
 8002096:	4652      	mov	r2, sl
 8002098:	4631      	mov	r1, r6
 800209a:	4628      	mov	r0, r5
 800209c:	47b8      	blx	r7
 800209e:	3001      	adds	r0, #1
 80020a0:	f43f af41 	beq.w	8001f26 <_printf_float+0xbe>
 80020a4:	f04f 0800 	mov.w	r8, #0
 80020a8:	f104 091a 	add.w	r9, r4, #26
 80020ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80020ae:	3b01      	subs	r3, #1
 80020b0:	4543      	cmp	r3, r8
 80020b2:	dc09      	bgt.n	80020c8 <_printf_float+0x260>
 80020b4:	6823      	ldr	r3, [r4, #0]
 80020b6:	079b      	lsls	r3, r3, #30
 80020b8:	f100 8107 	bmi.w	80022ca <_printf_float+0x462>
 80020bc:	68e0      	ldr	r0, [r4, #12]
 80020be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80020c0:	4298      	cmp	r0, r3
 80020c2:	bfb8      	it	lt
 80020c4:	4618      	movlt	r0, r3
 80020c6:	e730      	b.n	8001f2a <_printf_float+0xc2>
 80020c8:	2301      	movs	r3, #1
 80020ca:	464a      	mov	r2, r9
 80020cc:	4631      	mov	r1, r6
 80020ce:	4628      	mov	r0, r5
 80020d0:	47b8      	blx	r7
 80020d2:	3001      	adds	r0, #1
 80020d4:	f43f af27 	beq.w	8001f26 <_printf_float+0xbe>
 80020d8:	f108 0801 	add.w	r8, r8, #1
 80020dc:	e7e6      	b.n	80020ac <_printf_float+0x244>
 80020de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	dc39      	bgt.n	8002158 <_printf_float+0x2f0>
 80020e4:	4a1b      	ldr	r2, [pc, #108]	; (8002154 <_printf_float+0x2ec>)
 80020e6:	2301      	movs	r3, #1
 80020e8:	4631      	mov	r1, r6
 80020ea:	4628      	mov	r0, r5
 80020ec:	47b8      	blx	r7
 80020ee:	3001      	adds	r0, #1
 80020f0:	f43f af19 	beq.w	8001f26 <_printf_float+0xbe>
 80020f4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80020f8:	4313      	orrs	r3, r2
 80020fa:	d102      	bne.n	8002102 <_printf_float+0x29a>
 80020fc:	6823      	ldr	r3, [r4, #0]
 80020fe:	07d9      	lsls	r1, r3, #31
 8002100:	d5d8      	bpl.n	80020b4 <_printf_float+0x24c>
 8002102:	ee18 3a10 	vmov	r3, s16
 8002106:	4652      	mov	r2, sl
 8002108:	4631      	mov	r1, r6
 800210a:	4628      	mov	r0, r5
 800210c:	47b8      	blx	r7
 800210e:	3001      	adds	r0, #1
 8002110:	f43f af09 	beq.w	8001f26 <_printf_float+0xbe>
 8002114:	f04f 0900 	mov.w	r9, #0
 8002118:	f104 0a1a 	add.w	sl, r4, #26
 800211c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800211e:	425b      	negs	r3, r3
 8002120:	454b      	cmp	r3, r9
 8002122:	dc01      	bgt.n	8002128 <_printf_float+0x2c0>
 8002124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002126:	e792      	b.n	800204e <_printf_float+0x1e6>
 8002128:	2301      	movs	r3, #1
 800212a:	4652      	mov	r2, sl
 800212c:	4631      	mov	r1, r6
 800212e:	4628      	mov	r0, r5
 8002130:	47b8      	blx	r7
 8002132:	3001      	adds	r0, #1
 8002134:	f43f aef7 	beq.w	8001f26 <_printf_float+0xbe>
 8002138:	f109 0901 	add.w	r9, r9, #1
 800213c:	e7ee      	b.n	800211c <_printf_float+0x2b4>
 800213e:	bf00      	nop
 8002140:	7fefffff 	.word	0x7fefffff
 8002144:	08004729 	.word	0x08004729
 8002148:	0800472d 	.word	0x0800472d
 800214c:	08004731 	.word	0x08004731
 8002150:	08004735 	.word	0x08004735
 8002154:	08004739 	.word	0x08004739
 8002158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800215a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800215c:	429a      	cmp	r2, r3
 800215e:	bfa8      	it	ge
 8002160:	461a      	movge	r2, r3
 8002162:	2a00      	cmp	r2, #0
 8002164:	4691      	mov	r9, r2
 8002166:	dc37      	bgt.n	80021d8 <_printf_float+0x370>
 8002168:	f04f 0b00 	mov.w	fp, #0
 800216c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002170:	f104 021a 	add.w	r2, r4, #26
 8002174:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002176:	9305      	str	r3, [sp, #20]
 8002178:	eba3 0309 	sub.w	r3, r3, r9
 800217c:	455b      	cmp	r3, fp
 800217e:	dc33      	bgt.n	80021e8 <_printf_float+0x380>
 8002180:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002184:	429a      	cmp	r2, r3
 8002186:	db3b      	blt.n	8002200 <_printf_float+0x398>
 8002188:	6823      	ldr	r3, [r4, #0]
 800218a:	07da      	lsls	r2, r3, #31
 800218c:	d438      	bmi.n	8002200 <_printf_float+0x398>
 800218e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002192:	eba2 0903 	sub.w	r9, r2, r3
 8002196:	9b05      	ldr	r3, [sp, #20]
 8002198:	1ad2      	subs	r2, r2, r3
 800219a:	4591      	cmp	r9, r2
 800219c:	bfa8      	it	ge
 800219e:	4691      	movge	r9, r2
 80021a0:	f1b9 0f00 	cmp.w	r9, #0
 80021a4:	dc35      	bgt.n	8002212 <_printf_float+0x3aa>
 80021a6:	f04f 0800 	mov.w	r8, #0
 80021aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80021ae:	f104 0a1a 	add.w	sl, r4, #26
 80021b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80021b6:	1a9b      	subs	r3, r3, r2
 80021b8:	eba3 0309 	sub.w	r3, r3, r9
 80021bc:	4543      	cmp	r3, r8
 80021be:	f77f af79 	ble.w	80020b4 <_printf_float+0x24c>
 80021c2:	2301      	movs	r3, #1
 80021c4:	4652      	mov	r2, sl
 80021c6:	4631      	mov	r1, r6
 80021c8:	4628      	mov	r0, r5
 80021ca:	47b8      	blx	r7
 80021cc:	3001      	adds	r0, #1
 80021ce:	f43f aeaa 	beq.w	8001f26 <_printf_float+0xbe>
 80021d2:	f108 0801 	add.w	r8, r8, #1
 80021d6:	e7ec      	b.n	80021b2 <_printf_float+0x34a>
 80021d8:	4613      	mov	r3, r2
 80021da:	4631      	mov	r1, r6
 80021dc:	4642      	mov	r2, r8
 80021de:	4628      	mov	r0, r5
 80021e0:	47b8      	blx	r7
 80021e2:	3001      	adds	r0, #1
 80021e4:	d1c0      	bne.n	8002168 <_printf_float+0x300>
 80021e6:	e69e      	b.n	8001f26 <_printf_float+0xbe>
 80021e8:	2301      	movs	r3, #1
 80021ea:	4631      	mov	r1, r6
 80021ec:	4628      	mov	r0, r5
 80021ee:	9205      	str	r2, [sp, #20]
 80021f0:	47b8      	blx	r7
 80021f2:	3001      	adds	r0, #1
 80021f4:	f43f ae97 	beq.w	8001f26 <_printf_float+0xbe>
 80021f8:	9a05      	ldr	r2, [sp, #20]
 80021fa:	f10b 0b01 	add.w	fp, fp, #1
 80021fe:	e7b9      	b.n	8002174 <_printf_float+0x30c>
 8002200:	ee18 3a10 	vmov	r3, s16
 8002204:	4652      	mov	r2, sl
 8002206:	4631      	mov	r1, r6
 8002208:	4628      	mov	r0, r5
 800220a:	47b8      	blx	r7
 800220c:	3001      	adds	r0, #1
 800220e:	d1be      	bne.n	800218e <_printf_float+0x326>
 8002210:	e689      	b.n	8001f26 <_printf_float+0xbe>
 8002212:	9a05      	ldr	r2, [sp, #20]
 8002214:	464b      	mov	r3, r9
 8002216:	4442      	add	r2, r8
 8002218:	4631      	mov	r1, r6
 800221a:	4628      	mov	r0, r5
 800221c:	47b8      	blx	r7
 800221e:	3001      	adds	r0, #1
 8002220:	d1c1      	bne.n	80021a6 <_printf_float+0x33e>
 8002222:	e680      	b.n	8001f26 <_printf_float+0xbe>
 8002224:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002226:	2a01      	cmp	r2, #1
 8002228:	dc01      	bgt.n	800222e <_printf_float+0x3c6>
 800222a:	07db      	lsls	r3, r3, #31
 800222c:	d53a      	bpl.n	80022a4 <_printf_float+0x43c>
 800222e:	2301      	movs	r3, #1
 8002230:	4642      	mov	r2, r8
 8002232:	4631      	mov	r1, r6
 8002234:	4628      	mov	r0, r5
 8002236:	47b8      	blx	r7
 8002238:	3001      	adds	r0, #1
 800223a:	f43f ae74 	beq.w	8001f26 <_printf_float+0xbe>
 800223e:	ee18 3a10 	vmov	r3, s16
 8002242:	4652      	mov	r2, sl
 8002244:	4631      	mov	r1, r6
 8002246:	4628      	mov	r0, r5
 8002248:	47b8      	blx	r7
 800224a:	3001      	adds	r0, #1
 800224c:	f43f ae6b 	beq.w	8001f26 <_printf_float+0xbe>
 8002250:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002254:	2200      	movs	r2, #0
 8002256:	2300      	movs	r3, #0
 8002258:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800225c:	f7fe fc3c 	bl	8000ad8 <__aeabi_dcmpeq>
 8002260:	b9d8      	cbnz	r0, 800229a <_printf_float+0x432>
 8002262:	f10a 33ff 	add.w	r3, sl, #4294967295
 8002266:	f108 0201 	add.w	r2, r8, #1
 800226a:	4631      	mov	r1, r6
 800226c:	4628      	mov	r0, r5
 800226e:	47b8      	blx	r7
 8002270:	3001      	adds	r0, #1
 8002272:	d10e      	bne.n	8002292 <_printf_float+0x42a>
 8002274:	e657      	b.n	8001f26 <_printf_float+0xbe>
 8002276:	2301      	movs	r3, #1
 8002278:	4652      	mov	r2, sl
 800227a:	4631      	mov	r1, r6
 800227c:	4628      	mov	r0, r5
 800227e:	47b8      	blx	r7
 8002280:	3001      	adds	r0, #1
 8002282:	f43f ae50 	beq.w	8001f26 <_printf_float+0xbe>
 8002286:	f108 0801 	add.w	r8, r8, #1
 800228a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800228c:	3b01      	subs	r3, #1
 800228e:	4543      	cmp	r3, r8
 8002290:	dcf1      	bgt.n	8002276 <_printf_float+0x40e>
 8002292:	464b      	mov	r3, r9
 8002294:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002298:	e6da      	b.n	8002050 <_printf_float+0x1e8>
 800229a:	f04f 0800 	mov.w	r8, #0
 800229e:	f104 0a1a 	add.w	sl, r4, #26
 80022a2:	e7f2      	b.n	800228a <_printf_float+0x422>
 80022a4:	2301      	movs	r3, #1
 80022a6:	4642      	mov	r2, r8
 80022a8:	e7df      	b.n	800226a <_printf_float+0x402>
 80022aa:	2301      	movs	r3, #1
 80022ac:	464a      	mov	r2, r9
 80022ae:	4631      	mov	r1, r6
 80022b0:	4628      	mov	r0, r5
 80022b2:	47b8      	blx	r7
 80022b4:	3001      	adds	r0, #1
 80022b6:	f43f ae36 	beq.w	8001f26 <_printf_float+0xbe>
 80022ba:	f108 0801 	add.w	r8, r8, #1
 80022be:	68e3      	ldr	r3, [r4, #12]
 80022c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80022c2:	1a5b      	subs	r3, r3, r1
 80022c4:	4543      	cmp	r3, r8
 80022c6:	dcf0      	bgt.n	80022aa <_printf_float+0x442>
 80022c8:	e6f8      	b.n	80020bc <_printf_float+0x254>
 80022ca:	f04f 0800 	mov.w	r8, #0
 80022ce:	f104 0919 	add.w	r9, r4, #25
 80022d2:	e7f4      	b.n	80022be <_printf_float+0x456>

080022d4 <_printf_common>:
 80022d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022d8:	4616      	mov	r6, r2
 80022da:	4699      	mov	r9, r3
 80022dc:	688a      	ldr	r2, [r1, #8]
 80022de:	690b      	ldr	r3, [r1, #16]
 80022e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80022e4:	4293      	cmp	r3, r2
 80022e6:	bfb8      	it	lt
 80022e8:	4613      	movlt	r3, r2
 80022ea:	6033      	str	r3, [r6, #0]
 80022ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80022f0:	4607      	mov	r7, r0
 80022f2:	460c      	mov	r4, r1
 80022f4:	b10a      	cbz	r2, 80022fa <_printf_common+0x26>
 80022f6:	3301      	adds	r3, #1
 80022f8:	6033      	str	r3, [r6, #0]
 80022fa:	6823      	ldr	r3, [r4, #0]
 80022fc:	0699      	lsls	r1, r3, #26
 80022fe:	bf42      	ittt	mi
 8002300:	6833      	ldrmi	r3, [r6, #0]
 8002302:	3302      	addmi	r3, #2
 8002304:	6033      	strmi	r3, [r6, #0]
 8002306:	6825      	ldr	r5, [r4, #0]
 8002308:	f015 0506 	ands.w	r5, r5, #6
 800230c:	d106      	bne.n	800231c <_printf_common+0x48>
 800230e:	f104 0a19 	add.w	sl, r4, #25
 8002312:	68e3      	ldr	r3, [r4, #12]
 8002314:	6832      	ldr	r2, [r6, #0]
 8002316:	1a9b      	subs	r3, r3, r2
 8002318:	42ab      	cmp	r3, r5
 800231a:	dc26      	bgt.n	800236a <_printf_common+0x96>
 800231c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002320:	1e13      	subs	r3, r2, #0
 8002322:	6822      	ldr	r2, [r4, #0]
 8002324:	bf18      	it	ne
 8002326:	2301      	movne	r3, #1
 8002328:	0692      	lsls	r2, r2, #26
 800232a:	d42b      	bmi.n	8002384 <_printf_common+0xb0>
 800232c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002330:	4649      	mov	r1, r9
 8002332:	4638      	mov	r0, r7
 8002334:	47c0      	blx	r8
 8002336:	3001      	adds	r0, #1
 8002338:	d01e      	beq.n	8002378 <_printf_common+0xa4>
 800233a:	6823      	ldr	r3, [r4, #0]
 800233c:	6922      	ldr	r2, [r4, #16]
 800233e:	f003 0306 	and.w	r3, r3, #6
 8002342:	2b04      	cmp	r3, #4
 8002344:	bf02      	ittt	eq
 8002346:	68e5      	ldreq	r5, [r4, #12]
 8002348:	6833      	ldreq	r3, [r6, #0]
 800234a:	1aed      	subeq	r5, r5, r3
 800234c:	68a3      	ldr	r3, [r4, #8]
 800234e:	bf0c      	ite	eq
 8002350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002354:	2500      	movne	r5, #0
 8002356:	4293      	cmp	r3, r2
 8002358:	bfc4      	itt	gt
 800235a:	1a9b      	subgt	r3, r3, r2
 800235c:	18ed      	addgt	r5, r5, r3
 800235e:	2600      	movs	r6, #0
 8002360:	341a      	adds	r4, #26
 8002362:	42b5      	cmp	r5, r6
 8002364:	d11a      	bne.n	800239c <_printf_common+0xc8>
 8002366:	2000      	movs	r0, #0
 8002368:	e008      	b.n	800237c <_printf_common+0xa8>
 800236a:	2301      	movs	r3, #1
 800236c:	4652      	mov	r2, sl
 800236e:	4649      	mov	r1, r9
 8002370:	4638      	mov	r0, r7
 8002372:	47c0      	blx	r8
 8002374:	3001      	adds	r0, #1
 8002376:	d103      	bne.n	8002380 <_printf_common+0xac>
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002380:	3501      	adds	r5, #1
 8002382:	e7c6      	b.n	8002312 <_printf_common+0x3e>
 8002384:	18e1      	adds	r1, r4, r3
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	2030      	movs	r0, #48	; 0x30
 800238a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800238e:	4422      	add	r2, r4
 8002390:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002394:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002398:	3302      	adds	r3, #2
 800239a:	e7c7      	b.n	800232c <_printf_common+0x58>
 800239c:	2301      	movs	r3, #1
 800239e:	4622      	mov	r2, r4
 80023a0:	4649      	mov	r1, r9
 80023a2:	4638      	mov	r0, r7
 80023a4:	47c0      	blx	r8
 80023a6:	3001      	adds	r0, #1
 80023a8:	d0e6      	beq.n	8002378 <_printf_common+0xa4>
 80023aa:	3601      	adds	r6, #1
 80023ac:	e7d9      	b.n	8002362 <_printf_common+0x8e>
	...

080023b0 <_printf_i>:
 80023b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80023b4:	7e0f      	ldrb	r7, [r1, #24]
 80023b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80023b8:	2f78      	cmp	r7, #120	; 0x78
 80023ba:	4691      	mov	r9, r2
 80023bc:	4680      	mov	r8, r0
 80023be:	460c      	mov	r4, r1
 80023c0:	469a      	mov	sl, r3
 80023c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80023c6:	d807      	bhi.n	80023d8 <_printf_i+0x28>
 80023c8:	2f62      	cmp	r7, #98	; 0x62
 80023ca:	d80a      	bhi.n	80023e2 <_printf_i+0x32>
 80023cc:	2f00      	cmp	r7, #0
 80023ce:	f000 80d4 	beq.w	800257a <_printf_i+0x1ca>
 80023d2:	2f58      	cmp	r7, #88	; 0x58
 80023d4:	f000 80c0 	beq.w	8002558 <_printf_i+0x1a8>
 80023d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80023e0:	e03a      	b.n	8002458 <_printf_i+0xa8>
 80023e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80023e6:	2b15      	cmp	r3, #21
 80023e8:	d8f6      	bhi.n	80023d8 <_printf_i+0x28>
 80023ea:	a101      	add	r1, pc, #4	; (adr r1, 80023f0 <_printf_i+0x40>)
 80023ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80023f0:	08002449 	.word	0x08002449
 80023f4:	0800245d 	.word	0x0800245d
 80023f8:	080023d9 	.word	0x080023d9
 80023fc:	080023d9 	.word	0x080023d9
 8002400:	080023d9 	.word	0x080023d9
 8002404:	080023d9 	.word	0x080023d9
 8002408:	0800245d 	.word	0x0800245d
 800240c:	080023d9 	.word	0x080023d9
 8002410:	080023d9 	.word	0x080023d9
 8002414:	080023d9 	.word	0x080023d9
 8002418:	080023d9 	.word	0x080023d9
 800241c:	08002561 	.word	0x08002561
 8002420:	08002489 	.word	0x08002489
 8002424:	0800251b 	.word	0x0800251b
 8002428:	080023d9 	.word	0x080023d9
 800242c:	080023d9 	.word	0x080023d9
 8002430:	08002583 	.word	0x08002583
 8002434:	080023d9 	.word	0x080023d9
 8002438:	08002489 	.word	0x08002489
 800243c:	080023d9 	.word	0x080023d9
 8002440:	080023d9 	.word	0x080023d9
 8002444:	08002523 	.word	0x08002523
 8002448:	682b      	ldr	r3, [r5, #0]
 800244a:	1d1a      	adds	r2, r3, #4
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	602a      	str	r2, [r5, #0]
 8002450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002454:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002458:	2301      	movs	r3, #1
 800245a:	e09f      	b.n	800259c <_printf_i+0x1ec>
 800245c:	6820      	ldr	r0, [r4, #0]
 800245e:	682b      	ldr	r3, [r5, #0]
 8002460:	0607      	lsls	r7, r0, #24
 8002462:	f103 0104 	add.w	r1, r3, #4
 8002466:	6029      	str	r1, [r5, #0]
 8002468:	d501      	bpl.n	800246e <_printf_i+0xbe>
 800246a:	681e      	ldr	r6, [r3, #0]
 800246c:	e003      	b.n	8002476 <_printf_i+0xc6>
 800246e:	0646      	lsls	r6, r0, #25
 8002470:	d5fb      	bpl.n	800246a <_printf_i+0xba>
 8002472:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002476:	2e00      	cmp	r6, #0
 8002478:	da03      	bge.n	8002482 <_printf_i+0xd2>
 800247a:	232d      	movs	r3, #45	; 0x2d
 800247c:	4276      	negs	r6, r6
 800247e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002482:	485a      	ldr	r0, [pc, #360]	; (80025ec <_printf_i+0x23c>)
 8002484:	230a      	movs	r3, #10
 8002486:	e012      	b.n	80024ae <_printf_i+0xfe>
 8002488:	682b      	ldr	r3, [r5, #0]
 800248a:	6820      	ldr	r0, [r4, #0]
 800248c:	1d19      	adds	r1, r3, #4
 800248e:	6029      	str	r1, [r5, #0]
 8002490:	0605      	lsls	r5, r0, #24
 8002492:	d501      	bpl.n	8002498 <_printf_i+0xe8>
 8002494:	681e      	ldr	r6, [r3, #0]
 8002496:	e002      	b.n	800249e <_printf_i+0xee>
 8002498:	0641      	lsls	r1, r0, #25
 800249a:	d5fb      	bpl.n	8002494 <_printf_i+0xe4>
 800249c:	881e      	ldrh	r6, [r3, #0]
 800249e:	4853      	ldr	r0, [pc, #332]	; (80025ec <_printf_i+0x23c>)
 80024a0:	2f6f      	cmp	r7, #111	; 0x6f
 80024a2:	bf0c      	ite	eq
 80024a4:	2308      	moveq	r3, #8
 80024a6:	230a      	movne	r3, #10
 80024a8:	2100      	movs	r1, #0
 80024aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80024ae:	6865      	ldr	r5, [r4, #4]
 80024b0:	60a5      	str	r5, [r4, #8]
 80024b2:	2d00      	cmp	r5, #0
 80024b4:	bfa2      	ittt	ge
 80024b6:	6821      	ldrge	r1, [r4, #0]
 80024b8:	f021 0104 	bicge.w	r1, r1, #4
 80024bc:	6021      	strge	r1, [r4, #0]
 80024be:	b90e      	cbnz	r6, 80024c4 <_printf_i+0x114>
 80024c0:	2d00      	cmp	r5, #0
 80024c2:	d04b      	beq.n	800255c <_printf_i+0x1ac>
 80024c4:	4615      	mov	r5, r2
 80024c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80024ca:	fb03 6711 	mls	r7, r3, r1, r6
 80024ce:	5dc7      	ldrb	r7, [r0, r7]
 80024d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80024d4:	4637      	mov	r7, r6
 80024d6:	42bb      	cmp	r3, r7
 80024d8:	460e      	mov	r6, r1
 80024da:	d9f4      	bls.n	80024c6 <_printf_i+0x116>
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d10b      	bne.n	80024f8 <_printf_i+0x148>
 80024e0:	6823      	ldr	r3, [r4, #0]
 80024e2:	07de      	lsls	r6, r3, #31
 80024e4:	d508      	bpl.n	80024f8 <_printf_i+0x148>
 80024e6:	6923      	ldr	r3, [r4, #16]
 80024e8:	6861      	ldr	r1, [r4, #4]
 80024ea:	4299      	cmp	r1, r3
 80024ec:	bfde      	ittt	le
 80024ee:	2330      	movle	r3, #48	; 0x30
 80024f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80024f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80024f8:	1b52      	subs	r2, r2, r5
 80024fa:	6122      	str	r2, [r4, #16]
 80024fc:	f8cd a000 	str.w	sl, [sp]
 8002500:	464b      	mov	r3, r9
 8002502:	aa03      	add	r2, sp, #12
 8002504:	4621      	mov	r1, r4
 8002506:	4640      	mov	r0, r8
 8002508:	f7ff fee4 	bl	80022d4 <_printf_common>
 800250c:	3001      	adds	r0, #1
 800250e:	d14a      	bne.n	80025a6 <_printf_i+0x1f6>
 8002510:	f04f 30ff 	mov.w	r0, #4294967295
 8002514:	b004      	add	sp, #16
 8002516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	f043 0320 	orr.w	r3, r3, #32
 8002520:	6023      	str	r3, [r4, #0]
 8002522:	4833      	ldr	r0, [pc, #204]	; (80025f0 <_printf_i+0x240>)
 8002524:	2778      	movs	r7, #120	; 0x78
 8002526:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800252a:	6823      	ldr	r3, [r4, #0]
 800252c:	6829      	ldr	r1, [r5, #0]
 800252e:	061f      	lsls	r7, r3, #24
 8002530:	f851 6b04 	ldr.w	r6, [r1], #4
 8002534:	d402      	bmi.n	800253c <_printf_i+0x18c>
 8002536:	065f      	lsls	r7, r3, #25
 8002538:	bf48      	it	mi
 800253a:	b2b6      	uxthmi	r6, r6
 800253c:	07df      	lsls	r7, r3, #31
 800253e:	bf48      	it	mi
 8002540:	f043 0320 	orrmi.w	r3, r3, #32
 8002544:	6029      	str	r1, [r5, #0]
 8002546:	bf48      	it	mi
 8002548:	6023      	strmi	r3, [r4, #0]
 800254a:	b91e      	cbnz	r6, 8002554 <_printf_i+0x1a4>
 800254c:	6823      	ldr	r3, [r4, #0]
 800254e:	f023 0320 	bic.w	r3, r3, #32
 8002552:	6023      	str	r3, [r4, #0]
 8002554:	2310      	movs	r3, #16
 8002556:	e7a7      	b.n	80024a8 <_printf_i+0xf8>
 8002558:	4824      	ldr	r0, [pc, #144]	; (80025ec <_printf_i+0x23c>)
 800255a:	e7e4      	b.n	8002526 <_printf_i+0x176>
 800255c:	4615      	mov	r5, r2
 800255e:	e7bd      	b.n	80024dc <_printf_i+0x12c>
 8002560:	682b      	ldr	r3, [r5, #0]
 8002562:	6826      	ldr	r6, [r4, #0]
 8002564:	6961      	ldr	r1, [r4, #20]
 8002566:	1d18      	adds	r0, r3, #4
 8002568:	6028      	str	r0, [r5, #0]
 800256a:	0635      	lsls	r5, r6, #24
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	d501      	bpl.n	8002574 <_printf_i+0x1c4>
 8002570:	6019      	str	r1, [r3, #0]
 8002572:	e002      	b.n	800257a <_printf_i+0x1ca>
 8002574:	0670      	lsls	r0, r6, #25
 8002576:	d5fb      	bpl.n	8002570 <_printf_i+0x1c0>
 8002578:	8019      	strh	r1, [r3, #0]
 800257a:	2300      	movs	r3, #0
 800257c:	6123      	str	r3, [r4, #16]
 800257e:	4615      	mov	r5, r2
 8002580:	e7bc      	b.n	80024fc <_printf_i+0x14c>
 8002582:	682b      	ldr	r3, [r5, #0]
 8002584:	1d1a      	adds	r2, r3, #4
 8002586:	602a      	str	r2, [r5, #0]
 8002588:	681d      	ldr	r5, [r3, #0]
 800258a:	6862      	ldr	r2, [r4, #4]
 800258c:	2100      	movs	r1, #0
 800258e:	4628      	mov	r0, r5
 8002590:	f7fd fe26 	bl	80001e0 <memchr>
 8002594:	b108      	cbz	r0, 800259a <_printf_i+0x1ea>
 8002596:	1b40      	subs	r0, r0, r5
 8002598:	6060      	str	r0, [r4, #4]
 800259a:	6863      	ldr	r3, [r4, #4]
 800259c:	6123      	str	r3, [r4, #16]
 800259e:	2300      	movs	r3, #0
 80025a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025a4:	e7aa      	b.n	80024fc <_printf_i+0x14c>
 80025a6:	6923      	ldr	r3, [r4, #16]
 80025a8:	462a      	mov	r2, r5
 80025aa:	4649      	mov	r1, r9
 80025ac:	4640      	mov	r0, r8
 80025ae:	47d0      	blx	sl
 80025b0:	3001      	adds	r0, #1
 80025b2:	d0ad      	beq.n	8002510 <_printf_i+0x160>
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	079b      	lsls	r3, r3, #30
 80025b8:	d413      	bmi.n	80025e2 <_printf_i+0x232>
 80025ba:	68e0      	ldr	r0, [r4, #12]
 80025bc:	9b03      	ldr	r3, [sp, #12]
 80025be:	4298      	cmp	r0, r3
 80025c0:	bfb8      	it	lt
 80025c2:	4618      	movlt	r0, r3
 80025c4:	e7a6      	b.n	8002514 <_printf_i+0x164>
 80025c6:	2301      	movs	r3, #1
 80025c8:	4632      	mov	r2, r6
 80025ca:	4649      	mov	r1, r9
 80025cc:	4640      	mov	r0, r8
 80025ce:	47d0      	blx	sl
 80025d0:	3001      	adds	r0, #1
 80025d2:	d09d      	beq.n	8002510 <_printf_i+0x160>
 80025d4:	3501      	adds	r5, #1
 80025d6:	68e3      	ldr	r3, [r4, #12]
 80025d8:	9903      	ldr	r1, [sp, #12]
 80025da:	1a5b      	subs	r3, r3, r1
 80025dc:	42ab      	cmp	r3, r5
 80025de:	dcf2      	bgt.n	80025c6 <_printf_i+0x216>
 80025e0:	e7eb      	b.n	80025ba <_printf_i+0x20a>
 80025e2:	2500      	movs	r5, #0
 80025e4:	f104 0619 	add.w	r6, r4, #25
 80025e8:	e7f5      	b.n	80025d6 <_printf_i+0x226>
 80025ea:	bf00      	nop
 80025ec:	0800473b 	.word	0x0800473b
 80025f0:	0800474c 	.word	0x0800474c

080025f4 <std>:
 80025f4:	2300      	movs	r3, #0
 80025f6:	b510      	push	{r4, lr}
 80025f8:	4604      	mov	r4, r0
 80025fa:	e9c0 3300 	strd	r3, r3, [r0]
 80025fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002602:	6083      	str	r3, [r0, #8]
 8002604:	8181      	strh	r1, [r0, #12]
 8002606:	6643      	str	r3, [r0, #100]	; 0x64
 8002608:	81c2      	strh	r2, [r0, #14]
 800260a:	6183      	str	r3, [r0, #24]
 800260c:	4619      	mov	r1, r3
 800260e:	2208      	movs	r2, #8
 8002610:	305c      	adds	r0, #92	; 0x5c
 8002612:	f000 f906 	bl	8002822 <memset>
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <std+0x58>)
 8002618:	6263      	str	r3, [r4, #36]	; 0x24
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <std+0x5c>)
 800261c:	62a3      	str	r3, [r4, #40]	; 0x28
 800261e:	4b0d      	ldr	r3, [pc, #52]	; (8002654 <std+0x60>)
 8002620:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002622:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <std+0x64>)
 8002624:	6323      	str	r3, [r4, #48]	; 0x30
 8002626:	4b0d      	ldr	r3, [pc, #52]	; (800265c <std+0x68>)
 8002628:	6224      	str	r4, [r4, #32]
 800262a:	429c      	cmp	r4, r3
 800262c:	d006      	beq.n	800263c <std+0x48>
 800262e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002632:	4294      	cmp	r4, r2
 8002634:	d002      	beq.n	800263c <std+0x48>
 8002636:	33d0      	adds	r3, #208	; 0xd0
 8002638:	429c      	cmp	r4, r3
 800263a:	d105      	bne.n	8002648 <std+0x54>
 800263c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002644:	f000 b96a 	b.w	800291c <__retarget_lock_init_recursive>
 8002648:	bd10      	pop	{r4, pc}
 800264a:	bf00      	nop
 800264c:	0800279d 	.word	0x0800279d
 8002650:	080027bf 	.word	0x080027bf
 8002654:	080027f7 	.word	0x080027f7
 8002658:	0800281b 	.word	0x0800281b
 800265c:	200001f0 	.word	0x200001f0

08002660 <stdio_exit_handler>:
 8002660:	4a02      	ldr	r2, [pc, #8]	; (800266c <stdio_exit_handler+0xc>)
 8002662:	4903      	ldr	r1, [pc, #12]	; (8002670 <stdio_exit_handler+0x10>)
 8002664:	4803      	ldr	r0, [pc, #12]	; (8002674 <stdio_exit_handler+0x14>)
 8002666:	f000 b869 	b.w	800273c <_fwalk_sglue>
 800266a:	bf00      	nop
 800266c:	20000004 	.word	0x20000004
 8002670:	080042a9 	.word	0x080042a9
 8002674:	20000010 	.word	0x20000010

08002678 <cleanup_stdio>:
 8002678:	6841      	ldr	r1, [r0, #4]
 800267a:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <cleanup_stdio+0x34>)
 800267c:	4299      	cmp	r1, r3
 800267e:	b510      	push	{r4, lr}
 8002680:	4604      	mov	r4, r0
 8002682:	d001      	beq.n	8002688 <cleanup_stdio+0x10>
 8002684:	f001 fe10 	bl	80042a8 <_fflush_r>
 8002688:	68a1      	ldr	r1, [r4, #8]
 800268a:	4b09      	ldr	r3, [pc, #36]	; (80026b0 <cleanup_stdio+0x38>)
 800268c:	4299      	cmp	r1, r3
 800268e:	d002      	beq.n	8002696 <cleanup_stdio+0x1e>
 8002690:	4620      	mov	r0, r4
 8002692:	f001 fe09 	bl	80042a8 <_fflush_r>
 8002696:	68e1      	ldr	r1, [r4, #12]
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <cleanup_stdio+0x3c>)
 800269a:	4299      	cmp	r1, r3
 800269c:	d004      	beq.n	80026a8 <cleanup_stdio+0x30>
 800269e:	4620      	mov	r0, r4
 80026a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026a4:	f001 be00 	b.w	80042a8 <_fflush_r>
 80026a8:	bd10      	pop	{r4, pc}
 80026aa:	bf00      	nop
 80026ac:	200001f0 	.word	0x200001f0
 80026b0:	20000258 	.word	0x20000258
 80026b4:	200002c0 	.word	0x200002c0

080026b8 <global_stdio_init.part.0>:
 80026b8:	b510      	push	{r4, lr}
 80026ba:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <global_stdio_init.part.0+0x30>)
 80026bc:	4c0b      	ldr	r4, [pc, #44]	; (80026ec <global_stdio_init.part.0+0x34>)
 80026be:	4a0c      	ldr	r2, [pc, #48]	; (80026f0 <global_stdio_init.part.0+0x38>)
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	4620      	mov	r0, r4
 80026c4:	2200      	movs	r2, #0
 80026c6:	2104      	movs	r1, #4
 80026c8:	f7ff ff94 	bl	80025f4 <std>
 80026cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80026d0:	2201      	movs	r2, #1
 80026d2:	2109      	movs	r1, #9
 80026d4:	f7ff ff8e 	bl	80025f4 <std>
 80026d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80026dc:	2202      	movs	r2, #2
 80026de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026e2:	2112      	movs	r1, #18
 80026e4:	f7ff bf86 	b.w	80025f4 <std>
 80026e8:	20000328 	.word	0x20000328
 80026ec:	200001f0 	.word	0x200001f0
 80026f0:	08002661 	.word	0x08002661

080026f4 <__sfp_lock_acquire>:
 80026f4:	4801      	ldr	r0, [pc, #4]	; (80026fc <__sfp_lock_acquire+0x8>)
 80026f6:	f000 b912 	b.w	800291e <__retarget_lock_acquire_recursive>
 80026fa:	bf00      	nop
 80026fc:	20000331 	.word	0x20000331

08002700 <__sfp_lock_release>:
 8002700:	4801      	ldr	r0, [pc, #4]	; (8002708 <__sfp_lock_release+0x8>)
 8002702:	f000 b90d 	b.w	8002920 <__retarget_lock_release_recursive>
 8002706:	bf00      	nop
 8002708:	20000331 	.word	0x20000331

0800270c <__sinit>:
 800270c:	b510      	push	{r4, lr}
 800270e:	4604      	mov	r4, r0
 8002710:	f7ff fff0 	bl	80026f4 <__sfp_lock_acquire>
 8002714:	6a23      	ldr	r3, [r4, #32]
 8002716:	b11b      	cbz	r3, 8002720 <__sinit+0x14>
 8002718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800271c:	f7ff bff0 	b.w	8002700 <__sfp_lock_release>
 8002720:	4b04      	ldr	r3, [pc, #16]	; (8002734 <__sinit+0x28>)
 8002722:	6223      	str	r3, [r4, #32]
 8002724:	4b04      	ldr	r3, [pc, #16]	; (8002738 <__sinit+0x2c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1f5      	bne.n	8002718 <__sinit+0xc>
 800272c:	f7ff ffc4 	bl	80026b8 <global_stdio_init.part.0>
 8002730:	e7f2      	b.n	8002718 <__sinit+0xc>
 8002732:	bf00      	nop
 8002734:	08002679 	.word	0x08002679
 8002738:	20000328 	.word	0x20000328

0800273c <_fwalk_sglue>:
 800273c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002740:	4607      	mov	r7, r0
 8002742:	4688      	mov	r8, r1
 8002744:	4614      	mov	r4, r2
 8002746:	2600      	movs	r6, #0
 8002748:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800274c:	f1b9 0901 	subs.w	r9, r9, #1
 8002750:	d505      	bpl.n	800275e <_fwalk_sglue+0x22>
 8002752:	6824      	ldr	r4, [r4, #0]
 8002754:	2c00      	cmp	r4, #0
 8002756:	d1f7      	bne.n	8002748 <_fwalk_sglue+0xc>
 8002758:	4630      	mov	r0, r6
 800275a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800275e:	89ab      	ldrh	r3, [r5, #12]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d907      	bls.n	8002774 <_fwalk_sglue+0x38>
 8002764:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002768:	3301      	adds	r3, #1
 800276a:	d003      	beq.n	8002774 <_fwalk_sglue+0x38>
 800276c:	4629      	mov	r1, r5
 800276e:	4638      	mov	r0, r7
 8002770:	47c0      	blx	r8
 8002772:	4306      	orrs	r6, r0
 8002774:	3568      	adds	r5, #104	; 0x68
 8002776:	e7e9      	b.n	800274c <_fwalk_sglue+0x10>

08002778 <iprintf>:
 8002778:	b40f      	push	{r0, r1, r2, r3}
 800277a:	b507      	push	{r0, r1, r2, lr}
 800277c:	4906      	ldr	r1, [pc, #24]	; (8002798 <iprintf+0x20>)
 800277e:	ab04      	add	r3, sp, #16
 8002780:	6808      	ldr	r0, [r1, #0]
 8002782:	f853 2b04 	ldr.w	r2, [r3], #4
 8002786:	6881      	ldr	r1, [r0, #8]
 8002788:	9301      	str	r3, [sp, #4]
 800278a:	f001 fbed 	bl	8003f68 <_vfiprintf_r>
 800278e:	b003      	add	sp, #12
 8002790:	f85d eb04 	ldr.w	lr, [sp], #4
 8002794:	b004      	add	sp, #16
 8002796:	4770      	bx	lr
 8002798:	2000005c 	.word	0x2000005c

0800279c <__sread>:
 800279c:	b510      	push	{r4, lr}
 800279e:	460c      	mov	r4, r1
 80027a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027a4:	f000 f86c 	bl	8002880 <_read_r>
 80027a8:	2800      	cmp	r0, #0
 80027aa:	bfab      	itete	ge
 80027ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80027ae:	89a3      	ldrhlt	r3, [r4, #12]
 80027b0:	181b      	addge	r3, r3, r0
 80027b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80027b6:	bfac      	ite	ge
 80027b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80027ba:	81a3      	strhlt	r3, [r4, #12]
 80027bc:	bd10      	pop	{r4, pc}

080027be <__swrite>:
 80027be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027c2:	461f      	mov	r7, r3
 80027c4:	898b      	ldrh	r3, [r1, #12]
 80027c6:	05db      	lsls	r3, r3, #23
 80027c8:	4605      	mov	r5, r0
 80027ca:	460c      	mov	r4, r1
 80027cc:	4616      	mov	r6, r2
 80027ce:	d505      	bpl.n	80027dc <__swrite+0x1e>
 80027d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027d4:	2302      	movs	r3, #2
 80027d6:	2200      	movs	r2, #0
 80027d8:	f000 f840 	bl	800285c <_lseek_r>
 80027dc:	89a3      	ldrh	r3, [r4, #12]
 80027de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027e6:	81a3      	strh	r3, [r4, #12]
 80027e8:	4632      	mov	r2, r6
 80027ea:	463b      	mov	r3, r7
 80027ec:	4628      	mov	r0, r5
 80027ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80027f2:	f000 b857 	b.w	80028a4 <_write_r>

080027f6 <__sseek>:
 80027f6:	b510      	push	{r4, lr}
 80027f8:	460c      	mov	r4, r1
 80027fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027fe:	f000 f82d 	bl	800285c <_lseek_r>
 8002802:	1c43      	adds	r3, r0, #1
 8002804:	89a3      	ldrh	r3, [r4, #12]
 8002806:	bf15      	itete	ne
 8002808:	6560      	strne	r0, [r4, #84]	; 0x54
 800280a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800280e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002812:	81a3      	strheq	r3, [r4, #12]
 8002814:	bf18      	it	ne
 8002816:	81a3      	strhne	r3, [r4, #12]
 8002818:	bd10      	pop	{r4, pc}

0800281a <__sclose>:
 800281a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800281e:	f000 b80d 	b.w	800283c <_close_r>

08002822 <memset>:
 8002822:	4402      	add	r2, r0
 8002824:	4603      	mov	r3, r0
 8002826:	4293      	cmp	r3, r2
 8002828:	d100      	bne.n	800282c <memset+0xa>
 800282a:	4770      	bx	lr
 800282c:	f803 1b01 	strb.w	r1, [r3], #1
 8002830:	e7f9      	b.n	8002826 <memset+0x4>
	...

08002834 <_localeconv_r>:
 8002834:	4800      	ldr	r0, [pc, #0]	; (8002838 <_localeconv_r+0x4>)
 8002836:	4770      	bx	lr
 8002838:	20000150 	.word	0x20000150

0800283c <_close_r>:
 800283c:	b538      	push	{r3, r4, r5, lr}
 800283e:	4d06      	ldr	r5, [pc, #24]	; (8002858 <_close_r+0x1c>)
 8002840:	2300      	movs	r3, #0
 8002842:	4604      	mov	r4, r0
 8002844:	4608      	mov	r0, r1
 8002846:	602b      	str	r3, [r5, #0]
 8002848:	f7ff f8a1 	bl	800198e <_close>
 800284c:	1c43      	adds	r3, r0, #1
 800284e:	d102      	bne.n	8002856 <_close_r+0x1a>
 8002850:	682b      	ldr	r3, [r5, #0]
 8002852:	b103      	cbz	r3, 8002856 <_close_r+0x1a>
 8002854:	6023      	str	r3, [r4, #0]
 8002856:	bd38      	pop	{r3, r4, r5, pc}
 8002858:	2000032c 	.word	0x2000032c

0800285c <_lseek_r>:
 800285c:	b538      	push	{r3, r4, r5, lr}
 800285e:	4d07      	ldr	r5, [pc, #28]	; (800287c <_lseek_r+0x20>)
 8002860:	4604      	mov	r4, r0
 8002862:	4608      	mov	r0, r1
 8002864:	4611      	mov	r1, r2
 8002866:	2200      	movs	r2, #0
 8002868:	602a      	str	r2, [r5, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	f7ff f8b6 	bl	80019dc <_lseek>
 8002870:	1c43      	adds	r3, r0, #1
 8002872:	d102      	bne.n	800287a <_lseek_r+0x1e>
 8002874:	682b      	ldr	r3, [r5, #0]
 8002876:	b103      	cbz	r3, 800287a <_lseek_r+0x1e>
 8002878:	6023      	str	r3, [r4, #0]
 800287a:	bd38      	pop	{r3, r4, r5, pc}
 800287c:	2000032c 	.word	0x2000032c

08002880 <_read_r>:
 8002880:	b538      	push	{r3, r4, r5, lr}
 8002882:	4d07      	ldr	r5, [pc, #28]	; (80028a0 <_read_r+0x20>)
 8002884:	4604      	mov	r4, r0
 8002886:	4608      	mov	r0, r1
 8002888:	4611      	mov	r1, r2
 800288a:	2200      	movs	r2, #0
 800288c:	602a      	str	r2, [r5, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	f7ff f844 	bl	800191c <_read>
 8002894:	1c43      	adds	r3, r0, #1
 8002896:	d102      	bne.n	800289e <_read_r+0x1e>
 8002898:	682b      	ldr	r3, [r5, #0]
 800289a:	b103      	cbz	r3, 800289e <_read_r+0x1e>
 800289c:	6023      	str	r3, [r4, #0]
 800289e:	bd38      	pop	{r3, r4, r5, pc}
 80028a0:	2000032c 	.word	0x2000032c

080028a4 <_write_r>:
 80028a4:	b538      	push	{r3, r4, r5, lr}
 80028a6:	4d07      	ldr	r5, [pc, #28]	; (80028c4 <_write_r+0x20>)
 80028a8:	4604      	mov	r4, r0
 80028aa:	4608      	mov	r0, r1
 80028ac:	4611      	mov	r1, r2
 80028ae:	2200      	movs	r2, #0
 80028b0:	602a      	str	r2, [r5, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	f7ff f84f 	bl	8001956 <_write>
 80028b8:	1c43      	adds	r3, r0, #1
 80028ba:	d102      	bne.n	80028c2 <_write_r+0x1e>
 80028bc:	682b      	ldr	r3, [r5, #0]
 80028be:	b103      	cbz	r3, 80028c2 <_write_r+0x1e>
 80028c0:	6023      	str	r3, [r4, #0]
 80028c2:	bd38      	pop	{r3, r4, r5, pc}
 80028c4:	2000032c 	.word	0x2000032c

080028c8 <__errno>:
 80028c8:	4b01      	ldr	r3, [pc, #4]	; (80028d0 <__errno+0x8>)
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	2000005c 	.word	0x2000005c

080028d4 <__libc_init_array>:
 80028d4:	b570      	push	{r4, r5, r6, lr}
 80028d6:	4d0d      	ldr	r5, [pc, #52]	; (800290c <__libc_init_array+0x38>)
 80028d8:	4c0d      	ldr	r4, [pc, #52]	; (8002910 <__libc_init_array+0x3c>)
 80028da:	1b64      	subs	r4, r4, r5
 80028dc:	10a4      	asrs	r4, r4, #2
 80028de:	2600      	movs	r6, #0
 80028e0:	42a6      	cmp	r6, r4
 80028e2:	d109      	bne.n	80028f8 <__libc_init_array+0x24>
 80028e4:	4d0b      	ldr	r5, [pc, #44]	; (8002914 <__libc_init_array+0x40>)
 80028e6:	4c0c      	ldr	r4, [pc, #48]	; (8002918 <__libc_init_array+0x44>)
 80028e8:	f001 fef0 	bl	80046cc <_init>
 80028ec:	1b64      	subs	r4, r4, r5
 80028ee:	10a4      	asrs	r4, r4, #2
 80028f0:	2600      	movs	r6, #0
 80028f2:	42a6      	cmp	r6, r4
 80028f4:	d105      	bne.n	8002902 <__libc_init_array+0x2e>
 80028f6:	bd70      	pop	{r4, r5, r6, pc}
 80028f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80028fc:	4798      	blx	r3
 80028fe:	3601      	adds	r6, #1
 8002900:	e7ee      	b.n	80028e0 <__libc_init_array+0xc>
 8002902:	f855 3b04 	ldr.w	r3, [r5], #4
 8002906:	4798      	blx	r3
 8002908:	3601      	adds	r6, #1
 800290a:	e7f2      	b.n	80028f2 <__libc_init_array+0x1e>
 800290c:	08004a9c 	.word	0x08004a9c
 8002910:	08004a9c 	.word	0x08004a9c
 8002914:	08004a9c 	.word	0x08004a9c
 8002918:	08004aa0 	.word	0x08004aa0

0800291c <__retarget_lock_init_recursive>:
 800291c:	4770      	bx	lr

0800291e <__retarget_lock_acquire_recursive>:
 800291e:	4770      	bx	lr

08002920 <__retarget_lock_release_recursive>:
 8002920:	4770      	bx	lr

08002922 <quorem>:
 8002922:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002926:	6903      	ldr	r3, [r0, #16]
 8002928:	690c      	ldr	r4, [r1, #16]
 800292a:	42a3      	cmp	r3, r4
 800292c:	4607      	mov	r7, r0
 800292e:	db7e      	blt.n	8002a2e <quorem+0x10c>
 8002930:	3c01      	subs	r4, #1
 8002932:	f101 0814 	add.w	r8, r1, #20
 8002936:	f100 0514 	add.w	r5, r0, #20
 800293a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800293e:	9301      	str	r3, [sp, #4]
 8002940:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002944:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002948:	3301      	adds	r3, #1
 800294a:	429a      	cmp	r2, r3
 800294c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002950:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002954:	fbb2 f6f3 	udiv	r6, r2, r3
 8002958:	d331      	bcc.n	80029be <quorem+0x9c>
 800295a:	f04f 0e00 	mov.w	lr, #0
 800295e:	4640      	mov	r0, r8
 8002960:	46ac      	mov	ip, r5
 8002962:	46f2      	mov	sl, lr
 8002964:	f850 2b04 	ldr.w	r2, [r0], #4
 8002968:	b293      	uxth	r3, r2
 800296a:	fb06 e303 	mla	r3, r6, r3, lr
 800296e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002972:	0c1a      	lsrs	r2, r3, #16
 8002974:	b29b      	uxth	r3, r3
 8002976:	ebaa 0303 	sub.w	r3, sl, r3
 800297a:	f8dc a000 	ldr.w	sl, [ip]
 800297e:	fa13 f38a 	uxtah	r3, r3, sl
 8002982:	fb06 220e 	mla	r2, r6, lr, r2
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	9b00      	ldr	r3, [sp, #0]
 800298a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800298e:	b292      	uxth	r2, r2
 8002990:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002994:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002998:	f8bd 3000 	ldrh.w	r3, [sp]
 800299c:	4581      	cmp	r9, r0
 800299e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80029a2:	f84c 3b04 	str.w	r3, [ip], #4
 80029a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80029aa:	d2db      	bcs.n	8002964 <quorem+0x42>
 80029ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80029b0:	b92b      	cbnz	r3, 80029be <quorem+0x9c>
 80029b2:	9b01      	ldr	r3, [sp, #4]
 80029b4:	3b04      	subs	r3, #4
 80029b6:	429d      	cmp	r5, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	d32c      	bcc.n	8002a16 <quorem+0xf4>
 80029bc:	613c      	str	r4, [r7, #16]
 80029be:	4638      	mov	r0, r7
 80029c0:	f001 f9a8 	bl	8003d14 <__mcmp>
 80029c4:	2800      	cmp	r0, #0
 80029c6:	db22      	blt.n	8002a0e <quorem+0xec>
 80029c8:	3601      	adds	r6, #1
 80029ca:	4629      	mov	r1, r5
 80029cc:	2000      	movs	r0, #0
 80029ce:	f858 2b04 	ldr.w	r2, [r8], #4
 80029d2:	f8d1 c000 	ldr.w	ip, [r1]
 80029d6:	b293      	uxth	r3, r2
 80029d8:	1ac3      	subs	r3, r0, r3
 80029da:	0c12      	lsrs	r2, r2, #16
 80029dc:	fa13 f38c 	uxtah	r3, r3, ip
 80029e0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80029e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80029ee:	45c1      	cmp	r9, r8
 80029f0:	f841 3b04 	str.w	r3, [r1], #4
 80029f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80029f8:	d2e9      	bcs.n	80029ce <quorem+0xac>
 80029fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80029fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002a02:	b922      	cbnz	r2, 8002a0e <quorem+0xec>
 8002a04:	3b04      	subs	r3, #4
 8002a06:	429d      	cmp	r5, r3
 8002a08:	461a      	mov	r2, r3
 8002a0a:	d30a      	bcc.n	8002a22 <quorem+0x100>
 8002a0c:	613c      	str	r4, [r7, #16]
 8002a0e:	4630      	mov	r0, r6
 8002a10:	b003      	add	sp, #12
 8002a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a16:	6812      	ldr	r2, [r2, #0]
 8002a18:	3b04      	subs	r3, #4
 8002a1a:	2a00      	cmp	r2, #0
 8002a1c:	d1ce      	bne.n	80029bc <quorem+0x9a>
 8002a1e:	3c01      	subs	r4, #1
 8002a20:	e7c9      	b.n	80029b6 <quorem+0x94>
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	3b04      	subs	r3, #4
 8002a26:	2a00      	cmp	r2, #0
 8002a28:	d1f0      	bne.n	8002a0c <quorem+0xea>
 8002a2a:	3c01      	subs	r4, #1
 8002a2c:	e7eb      	b.n	8002a06 <quorem+0xe4>
 8002a2e:	2000      	movs	r0, #0
 8002a30:	e7ee      	b.n	8002a10 <quorem+0xee>
 8002a32:	0000      	movs	r0, r0
 8002a34:	0000      	movs	r0, r0
	...

08002a38 <_dtoa_r>:
 8002a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a3c:	ed2d 8b04 	vpush	{d8-d9}
 8002a40:	69c5      	ldr	r5, [r0, #28]
 8002a42:	b093      	sub	sp, #76	; 0x4c
 8002a44:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002a48:	ec57 6b10 	vmov	r6, r7, d0
 8002a4c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8002a50:	9107      	str	r1, [sp, #28]
 8002a52:	4604      	mov	r4, r0
 8002a54:	920a      	str	r2, [sp, #40]	; 0x28
 8002a56:	930d      	str	r3, [sp, #52]	; 0x34
 8002a58:	b975      	cbnz	r5, 8002a78 <_dtoa_r+0x40>
 8002a5a:	2010      	movs	r0, #16
 8002a5c:	f000 fe2a 	bl	80036b4 <malloc>
 8002a60:	4602      	mov	r2, r0
 8002a62:	61e0      	str	r0, [r4, #28]
 8002a64:	b920      	cbnz	r0, 8002a70 <_dtoa_r+0x38>
 8002a66:	4bae      	ldr	r3, [pc, #696]	; (8002d20 <_dtoa_r+0x2e8>)
 8002a68:	21ef      	movs	r1, #239	; 0xef
 8002a6a:	48ae      	ldr	r0, [pc, #696]	; (8002d24 <_dtoa_r+0x2ec>)
 8002a6c:	f001 fcf8 	bl	8004460 <__assert_func>
 8002a70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002a74:	6005      	str	r5, [r0, #0]
 8002a76:	60c5      	str	r5, [r0, #12]
 8002a78:	69e3      	ldr	r3, [r4, #28]
 8002a7a:	6819      	ldr	r1, [r3, #0]
 8002a7c:	b151      	cbz	r1, 8002a94 <_dtoa_r+0x5c>
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	604a      	str	r2, [r1, #4]
 8002a82:	2301      	movs	r3, #1
 8002a84:	4093      	lsls	r3, r2
 8002a86:	608b      	str	r3, [r1, #8]
 8002a88:	4620      	mov	r0, r4
 8002a8a:	f000 ff07 	bl	800389c <_Bfree>
 8002a8e:	69e3      	ldr	r3, [r4, #28]
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	1e3b      	subs	r3, r7, #0
 8002a96:	bfbb      	ittet	lt
 8002a98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002a9c:	9303      	strlt	r3, [sp, #12]
 8002a9e:	2300      	movge	r3, #0
 8002aa0:	2201      	movlt	r2, #1
 8002aa2:	bfac      	ite	ge
 8002aa4:	f8c8 3000 	strge.w	r3, [r8]
 8002aa8:	f8c8 2000 	strlt.w	r2, [r8]
 8002aac:	4b9e      	ldr	r3, [pc, #632]	; (8002d28 <_dtoa_r+0x2f0>)
 8002aae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002ab2:	ea33 0308 	bics.w	r3, r3, r8
 8002ab6:	d11b      	bne.n	8002af0 <_dtoa_r+0xb8>
 8002ab8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002aba:	f242 730f 	movw	r3, #9999	; 0x270f
 8002abe:	6013      	str	r3, [r2, #0]
 8002ac0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8002ac4:	4333      	orrs	r3, r6
 8002ac6:	f000 8593 	beq.w	80035f0 <_dtoa_r+0xbb8>
 8002aca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002acc:	b963      	cbnz	r3, 8002ae8 <_dtoa_r+0xb0>
 8002ace:	4b97      	ldr	r3, [pc, #604]	; (8002d2c <_dtoa_r+0x2f4>)
 8002ad0:	e027      	b.n	8002b22 <_dtoa_r+0xea>
 8002ad2:	4b97      	ldr	r3, [pc, #604]	; (8002d30 <_dtoa_r+0x2f8>)
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	3308      	adds	r3, #8
 8002ad8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	9800      	ldr	r0, [sp, #0]
 8002ade:	b013      	add	sp, #76	; 0x4c
 8002ae0:	ecbd 8b04 	vpop	{d8-d9}
 8002ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ae8:	4b90      	ldr	r3, [pc, #576]	; (8002d2c <_dtoa_r+0x2f4>)
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	3303      	adds	r3, #3
 8002aee:	e7f3      	b.n	8002ad8 <_dtoa_r+0xa0>
 8002af0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002af4:	2200      	movs	r2, #0
 8002af6:	ec51 0b17 	vmov	r0, r1, d7
 8002afa:	eeb0 8a47 	vmov.f32	s16, s14
 8002afe:	eef0 8a67 	vmov.f32	s17, s15
 8002b02:	2300      	movs	r3, #0
 8002b04:	f7fd ffe8 	bl	8000ad8 <__aeabi_dcmpeq>
 8002b08:	4681      	mov	r9, r0
 8002b0a:	b160      	cbz	r0, 8002b26 <_dtoa_r+0xee>
 8002b0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002b0e:	2301      	movs	r3, #1
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 8568 	beq.w	80035ea <_dtoa_r+0xbb2>
 8002b1a:	4b86      	ldr	r3, [pc, #536]	; (8002d34 <_dtoa_r+0x2fc>)
 8002b1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	3b01      	subs	r3, #1
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	e7da      	b.n	8002adc <_dtoa_r+0xa4>
 8002b26:	aa10      	add	r2, sp, #64	; 0x40
 8002b28:	a911      	add	r1, sp, #68	; 0x44
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	eeb0 0a48 	vmov.f32	s0, s16
 8002b30:	eef0 0a68 	vmov.f32	s1, s17
 8002b34:	f001 f994 	bl	8003e60 <__d2b>
 8002b38:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8002b3c:	4682      	mov	sl, r0
 8002b3e:	2d00      	cmp	r5, #0
 8002b40:	d07f      	beq.n	8002c42 <_dtoa_r+0x20a>
 8002b42:	ee18 3a90 	vmov	r3, s17
 8002b46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b4a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8002b4e:	ec51 0b18 	vmov	r0, r1, d8
 8002b52:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002b56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002b5a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8002b5e:	4619      	mov	r1, r3
 8002b60:	2200      	movs	r2, #0
 8002b62:	4b75      	ldr	r3, [pc, #468]	; (8002d38 <_dtoa_r+0x300>)
 8002b64:	f7fd fb98 	bl	8000298 <__aeabi_dsub>
 8002b68:	a367      	add	r3, pc, #412	; (adr r3, 8002d08 <_dtoa_r+0x2d0>)
 8002b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6e:	f7fd fd4b 	bl	8000608 <__aeabi_dmul>
 8002b72:	a367      	add	r3, pc, #412	; (adr r3, 8002d10 <_dtoa_r+0x2d8>)
 8002b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b78:	f7fd fb90 	bl	800029c <__adddf3>
 8002b7c:	4606      	mov	r6, r0
 8002b7e:	4628      	mov	r0, r5
 8002b80:	460f      	mov	r7, r1
 8002b82:	f7fd fcd7 	bl	8000534 <__aeabi_i2d>
 8002b86:	a364      	add	r3, pc, #400	; (adr r3, 8002d18 <_dtoa_r+0x2e0>)
 8002b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8c:	f7fd fd3c 	bl	8000608 <__aeabi_dmul>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4630      	mov	r0, r6
 8002b96:	4639      	mov	r1, r7
 8002b98:	f7fd fb80 	bl	800029c <__adddf3>
 8002b9c:	4606      	mov	r6, r0
 8002b9e:	460f      	mov	r7, r1
 8002ba0:	f7fd ffe2 	bl	8000b68 <__aeabi_d2iz>
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	4683      	mov	fp, r0
 8002ba8:	2300      	movs	r3, #0
 8002baa:	4630      	mov	r0, r6
 8002bac:	4639      	mov	r1, r7
 8002bae:	f7fd ff9d 	bl	8000aec <__aeabi_dcmplt>
 8002bb2:	b148      	cbz	r0, 8002bc8 <_dtoa_r+0x190>
 8002bb4:	4658      	mov	r0, fp
 8002bb6:	f7fd fcbd 	bl	8000534 <__aeabi_i2d>
 8002bba:	4632      	mov	r2, r6
 8002bbc:	463b      	mov	r3, r7
 8002bbe:	f7fd ff8b 	bl	8000ad8 <__aeabi_dcmpeq>
 8002bc2:	b908      	cbnz	r0, 8002bc8 <_dtoa_r+0x190>
 8002bc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002bc8:	f1bb 0f16 	cmp.w	fp, #22
 8002bcc:	d857      	bhi.n	8002c7e <_dtoa_r+0x246>
 8002bce:	4b5b      	ldr	r3, [pc, #364]	; (8002d3c <_dtoa_r+0x304>)
 8002bd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd8:	ec51 0b18 	vmov	r0, r1, d8
 8002bdc:	f7fd ff86 	bl	8000aec <__aeabi_dcmplt>
 8002be0:	2800      	cmp	r0, #0
 8002be2:	d04e      	beq.n	8002c82 <_dtoa_r+0x24a>
 8002be4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002be8:	2300      	movs	r3, #0
 8002bea:	930c      	str	r3, [sp, #48]	; 0x30
 8002bec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002bee:	1b5b      	subs	r3, r3, r5
 8002bf0:	1e5a      	subs	r2, r3, #1
 8002bf2:	bf45      	ittet	mi
 8002bf4:	f1c3 0301 	rsbmi	r3, r3, #1
 8002bf8:	9305      	strmi	r3, [sp, #20]
 8002bfa:	2300      	movpl	r3, #0
 8002bfc:	2300      	movmi	r3, #0
 8002bfe:	9206      	str	r2, [sp, #24]
 8002c00:	bf54      	ite	pl
 8002c02:	9305      	strpl	r3, [sp, #20]
 8002c04:	9306      	strmi	r3, [sp, #24]
 8002c06:	f1bb 0f00 	cmp.w	fp, #0
 8002c0a:	db3c      	blt.n	8002c86 <_dtoa_r+0x24e>
 8002c0c:	9b06      	ldr	r3, [sp, #24]
 8002c0e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8002c12:	445b      	add	r3, fp
 8002c14:	9306      	str	r3, [sp, #24]
 8002c16:	2300      	movs	r3, #0
 8002c18:	9308      	str	r3, [sp, #32]
 8002c1a:	9b07      	ldr	r3, [sp, #28]
 8002c1c:	2b09      	cmp	r3, #9
 8002c1e:	d868      	bhi.n	8002cf2 <_dtoa_r+0x2ba>
 8002c20:	2b05      	cmp	r3, #5
 8002c22:	bfc4      	itt	gt
 8002c24:	3b04      	subgt	r3, #4
 8002c26:	9307      	strgt	r3, [sp, #28]
 8002c28:	9b07      	ldr	r3, [sp, #28]
 8002c2a:	f1a3 0302 	sub.w	r3, r3, #2
 8002c2e:	bfcc      	ite	gt
 8002c30:	2500      	movgt	r5, #0
 8002c32:	2501      	movle	r5, #1
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	f200 8085 	bhi.w	8002d44 <_dtoa_r+0x30c>
 8002c3a:	e8df f003 	tbb	[pc, r3]
 8002c3e:	3b2e      	.short	0x3b2e
 8002c40:	5839      	.short	0x5839
 8002c42:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8002c46:	441d      	add	r5, r3
 8002c48:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8002c4c:	2b20      	cmp	r3, #32
 8002c4e:	bfc1      	itttt	gt
 8002c50:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8002c54:	fa08 f803 	lslgt.w	r8, r8, r3
 8002c58:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8002c5c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8002c60:	bfd6      	itet	le
 8002c62:	f1c3 0320 	rsble	r3, r3, #32
 8002c66:	ea48 0003 	orrgt.w	r0, r8, r3
 8002c6a:	fa06 f003 	lslle.w	r0, r6, r3
 8002c6e:	f7fd fc51 	bl	8000514 <__aeabi_ui2d>
 8002c72:	2201      	movs	r2, #1
 8002c74:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8002c78:	3d01      	subs	r5, #1
 8002c7a:	920e      	str	r2, [sp, #56]	; 0x38
 8002c7c:	e76f      	b.n	8002b5e <_dtoa_r+0x126>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e7b3      	b.n	8002bea <_dtoa_r+0x1b2>
 8002c82:	900c      	str	r0, [sp, #48]	; 0x30
 8002c84:	e7b2      	b.n	8002bec <_dtoa_r+0x1b4>
 8002c86:	9b05      	ldr	r3, [sp, #20]
 8002c88:	eba3 030b 	sub.w	r3, r3, fp
 8002c8c:	9305      	str	r3, [sp, #20]
 8002c8e:	f1cb 0300 	rsb	r3, fp, #0
 8002c92:	9308      	str	r3, [sp, #32]
 8002c94:	2300      	movs	r3, #0
 8002c96:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c98:	e7bf      	b.n	8002c1a <_dtoa_r+0x1e2>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8002c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	dc52      	bgt.n	8002d4a <_dtoa_r+0x312>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	9304      	str	r3, [sp, #16]
 8002caa:	461a      	mov	r2, r3
 8002cac:	920a      	str	r2, [sp, #40]	; 0x28
 8002cae:	e00b      	b.n	8002cc8 <_dtoa_r+0x290>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e7f3      	b.n	8002c9c <_dtoa_r+0x264>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8002cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002cba:	445b      	add	r3, fp
 8002cbc:	9301      	str	r3, [sp, #4]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	9304      	str	r3, [sp, #16]
 8002cc4:	bfb8      	it	lt
 8002cc6:	2301      	movlt	r3, #1
 8002cc8:	69e0      	ldr	r0, [r4, #28]
 8002cca:	2100      	movs	r1, #0
 8002ccc:	2204      	movs	r2, #4
 8002cce:	f102 0614 	add.w	r6, r2, #20
 8002cd2:	429e      	cmp	r6, r3
 8002cd4:	d93d      	bls.n	8002d52 <_dtoa_r+0x31a>
 8002cd6:	6041      	str	r1, [r0, #4]
 8002cd8:	4620      	mov	r0, r4
 8002cda:	f000 fd9f 	bl	800381c <_Balloc>
 8002cde:	9000      	str	r0, [sp, #0]
 8002ce0:	2800      	cmp	r0, #0
 8002ce2:	d139      	bne.n	8002d58 <_dtoa_r+0x320>
 8002ce4:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <_dtoa_r+0x308>)
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	f240 11af 	movw	r1, #431	; 0x1af
 8002cec:	e6bd      	b.n	8002a6a <_dtoa_r+0x32>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e7e1      	b.n	8002cb6 <_dtoa_r+0x27e>
 8002cf2:	2501      	movs	r5, #1
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	9307      	str	r3, [sp, #28]
 8002cf8:	9509      	str	r5, [sp, #36]	; 0x24
 8002cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	9304      	str	r3, [sp, #16]
 8002d02:	2200      	movs	r2, #0
 8002d04:	2312      	movs	r3, #18
 8002d06:	e7d1      	b.n	8002cac <_dtoa_r+0x274>
 8002d08:	636f4361 	.word	0x636f4361
 8002d0c:	3fd287a7 	.word	0x3fd287a7
 8002d10:	8b60c8b3 	.word	0x8b60c8b3
 8002d14:	3fc68a28 	.word	0x3fc68a28
 8002d18:	509f79fb 	.word	0x509f79fb
 8002d1c:	3fd34413 	.word	0x3fd34413
 8002d20:	0800476a 	.word	0x0800476a
 8002d24:	08004781 	.word	0x08004781
 8002d28:	7ff00000 	.word	0x7ff00000
 8002d2c:	08004766 	.word	0x08004766
 8002d30:	0800475d 	.word	0x0800475d
 8002d34:	0800473a 	.word	0x0800473a
 8002d38:	3ff80000 	.word	0x3ff80000
 8002d3c:	08004870 	.word	0x08004870
 8002d40:	080047d9 	.word	0x080047d9
 8002d44:	2301      	movs	r3, #1
 8002d46:	9309      	str	r3, [sp, #36]	; 0x24
 8002d48:	e7d7      	b.n	8002cfa <_dtoa_r+0x2c2>
 8002d4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d4c:	9301      	str	r3, [sp, #4]
 8002d4e:	9304      	str	r3, [sp, #16]
 8002d50:	e7ba      	b.n	8002cc8 <_dtoa_r+0x290>
 8002d52:	3101      	adds	r1, #1
 8002d54:	0052      	lsls	r2, r2, #1
 8002d56:	e7ba      	b.n	8002cce <_dtoa_r+0x296>
 8002d58:	69e3      	ldr	r3, [r4, #28]
 8002d5a:	9a00      	ldr	r2, [sp, #0]
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	9b04      	ldr	r3, [sp, #16]
 8002d60:	2b0e      	cmp	r3, #14
 8002d62:	f200 80a8 	bhi.w	8002eb6 <_dtoa_r+0x47e>
 8002d66:	2d00      	cmp	r5, #0
 8002d68:	f000 80a5 	beq.w	8002eb6 <_dtoa_r+0x47e>
 8002d6c:	f1bb 0f00 	cmp.w	fp, #0
 8002d70:	dd38      	ble.n	8002de4 <_dtoa_r+0x3ac>
 8002d72:	4bc0      	ldr	r3, [pc, #768]	; (8003074 <_dtoa_r+0x63c>)
 8002d74:	f00b 020f 	and.w	r2, fp, #15
 8002d78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d7c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8002d80:	e9d3 6700 	ldrd	r6, r7, [r3]
 8002d84:	ea4f 182b 	mov.w	r8, fp, asr #4
 8002d88:	d019      	beq.n	8002dbe <_dtoa_r+0x386>
 8002d8a:	4bbb      	ldr	r3, [pc, #748]	; (8003078 <_dtoa_r+0x640>)
 8002d8c:	ec51 0b18 	vmov	r0, r1, d8
 8002d90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002d94:	f7fd fd62 	bl	800085c <__aeabi_ddiv>
 8002d98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d9c:	f008 080f 	and.w	r8, r8, #15
 8002da0:	2503      	movs	r5, #3
 8002da2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8003078 <_dtoa_r+0x640>
 8002da6:	f1b8 0f00 	cmp.w	r8, #0
 8002daa:	d10a      	bne.n	8002dc2 <_dtoa_r+0x38a>
 8002dac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002db0:	4632      	mov	r2, r6
 8002db2:	463b      	mov	r3, r7
 8002db4:	f7fd fd52 	bl	800085c <__aeabi_ddiv>
 8002db8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002dbc:	e02b      	b.n	8002e16 <_dtoa_r+0x3de>
 8002dbe:	2502      	movs	r5, #2
 8002dc0:	e7ef      	b.n	8002da2 <_dtoa_r+0x36a>
 8002dc2:	f018 0f01 	tst.w	r8, #1
 8002dc6:	d008      	beq.n	8002dda <_dtoa_r+0x3a2>
 8002dc8:	4630      	mov	r0, r6
 8002dca:	4639      	mov	r1, r7
 8002dcc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8002dd0:	f7fd fc1a 	bl	8000608 <__aeabi_dmul>
 8002dd4:	3501      	adds	r5, #1
 8002dd6:	4606      	mov	r6, r0
 8002dd8:	460f      	mov	r7, r1
 8002dda:	ea4f 0868 	mov.w	r8, r8, asr #1
 8002dde:	f109 0908 	add.w	r9, r9, #8
 8002de2:	e7e0      	b.n	8002da6 <_dtoa_r+0x36e>
 8002de4:	f000 809f 	beq.w	8002f26 <_dtoa_r+0x4ee>
 8002de8:	f1cb 0600 	rsb	r6, fp, #0
 8002dec:	4ba1      	ldr	r3, [pc, #644]	; (8003074 <_dtoa_r+0x63c>)
 8002dee:	4fa2      	ldr	r7, [pc, #648]	; (8003078 <_dtoa_r+0x640>)
 8002df0:	f006 020f 	and.w	r2, r6, #15
 8002df4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfc:	ec51 0b18 	vmov	r0, r1, d8
 8002e00:	f7fd fc02 	bl	8000608 <__aeabi_dmul>
 8002e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e08:	1136      	asrs	r6, r6, #4
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	2502      	movs	r5, #2
 8002e0e:	2e00      	cmp	r6, #0
 8002e10:	d17e      	bne.n	8002f10 <_dtoa_r+0x4d8>
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1d0      	bne.n	8002db8 <_dtoa_r+0x380>
 8002e16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e18:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8084 	beq.w	8002f2a <_dtoa_r+0x4f2>
 8002e22:	4b96      	ldr	r3, [pc, #600]	; (800307c <_dtoa_r+0x644>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	4640      	mov	r0, r8
 8002e28:	4649      	mov	r1, r9
 8002e2a:	f7fd fe5f 	bl	8000aec <__aeabi_dcmplt>
 8002e2e:	2800      	cmp	r0, #0
 8002e30:	d07b      	beq.n	8002f2a <_dtoa_r+0x4f2>
 8002e32:	9b04      	ldr	r3, [sp, #16]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d078      	beq.n	8002f2a <_dtoa_r+0x4f2>
 8002e38:	9b01      	ldr	r3, [sp, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	dd39      	ble.n	8002eb2 <_dtoa_r+0x47a>
 8002e3e:	4b90      	ldr	r3, [pc, #576]	; (8003080 <_dtoa_r+0x648>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	4640      	mov	r0, r8
 8002e44:	4649      	mov	r1, r9
 8002e46:	f7fd fbdf 	bl	8000608 <__aeabi_dmul>
 8002e4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e4e:	9e01      	ldr	r6, [sp, #4]
 8002e50:	f10b 37ff 	add.w	r7, fp, #4294967295
 8002e54:	3501      	adds	r5, #1
 8002e56:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	f7fd fb6a 	bl	8000534 <__aeabi_i2d>
 8002e60:	4642      	mov	r2, r8
 8002e62:	464b      	mov	r3, r9
 8002e64:	f7fd fbd0 	bl	8000608 <__aeabi_dmul>
 8002e68:	4b86      	ldr	r3, [pc, #536]	; (8003084 <_dtoa_r+0x64c>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f7fd fa16 	bl	800029c <__adddf3>
 8002e70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8002e74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e78:	9303      	str	r3, [sp, #12]
 8002e7a:	2e00      	cmp	r6, #0
 8002e7c:	d158      	bne.n	8002f30 <_dtoa_r+0x4f8>
 8002e7e:	4b82      	ldr	r3, [pc, #520]	; (8003088 <_dtoa_r+0x650>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	4640      	mov	r0, r8
 8002e84:	4649      	mov	r1, r9
 8002e86:	f7fd fa07 	bl	8000298 <__aeabi_dsub>
 8002e8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002e8e:	4680      	mov	r8, r0
 8002e90:	4689      	mov	r9, r1
 8002e92:	f7fd fe49 	bl	8000b28 <__aeabi_dcmpgt>
 8002e96:	2800      	cmp	r0, #0
 8002e98:	f040 8296 	bne.w	80033c8 <_dtoa_r+0x990>
 8002e9c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8002ea0:	4640      	mov	r0, r8
 8002ea2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002ea6:	4649      	mov	r1, r9
 8002ea8:	f7fd fe20 	bl	8000aec <__aeabi_dcmplt>
 8002eac:	2800      	cmp	r0, #0
 8002eae:	f040 8289 	bne.w	80033c4 <_dtoa_r+0x98c>
 8002eb2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8002eb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f2c0 814e 	blt.w	800315a <_dtoa_r+0x722>
 8002ebe:	f1bb 0f0e 	cmp.w	fp, #14
 8002ec2:	f300 814a 	bgt.w	800315a <_dtoa_r+0x722>
 8002ec6:	4b6b      	ldr	r3, [pc, #428]	; (8003074 <_dtoa_r+0x63c>)
 8002ec8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002ecc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f280 80dc 	bge.w	8003090 <_dtoa_r+0x658>
 8002ed8:	9b04      	ldr	r3, [sp, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f300 80d8 	bgt.w	8003090 <_dtoa_r+0x658>
 8002ee0:	f040 826f 	bne.w	80033c2 <_dtoa_r+0x98a>
 8002ee4:	4b68      	ldr	r3, [pc, #416]	; (8003088 <_dtoa_r+0x650>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	4640      	mov	r0, r8
 8002eea:	4649      	mov	r1, r9
 8002eec:	f7fd fb8c 	bl	8000608 <__aeabi_dmul>
 8002ef0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002ef4:	f7fd fe0e 	bl	8000b14 <__aeabi_dcmpge>
 8002ef8:	9e04      	ldr	r6, [sp, #16]
 8002efa:	4637      	mov	r7, r6
 8002efc:	2800      	cmp	r0, #0
 8002efe:	f040 8245 	bne.w	800338c <_dtoa_r+0x954>
 8002f02:	9d00      	ldr	r5, [sp, #0]
 8002f04:	2331      	movs	r3, #49	; 0x31
 8002f06:	f805 3b01 	strb.w	r3, [r5], #1
 8002f0a:	f10b 0b01 	add.w	fp, fp, #1
 8002f0e:	e241      	b.n	8003394 <_dtoa_r+0x95c>
 8002f10:	07f2      	lsls	r2, r6, #31
 8002f12:	d505      	bpl.n	8002f20 <_dtoa_r+0x4e8>
 8002f14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f18:	f7fd fb76 	bl	8000608 <__aeabi_dmul>
 8002f1c:	3501      	adds	r5, #1
 8002f1e:	2301      	movs	r3, #1
 8002f20:	1076      	asrs	r6, r6, #1
 8002f22:	3708      	adds	r7, #8
 8002f24:	e773      	b.n	8002e0e <_dtoa_r+0x3d6>
 8002f26:	2502      	movs	r5, #2
 8002f28:	e775      	b.n	8002e16 <_dtoa_r+0x3de>
 8002f2a:	9e04      	ldr	r6, [sp, #16]
 8002f2c:	465f      	mov	r7, fp
 8002f2e:	e792      	b.n	8002e56 <_dtoa_r+0x41e>
 8002f30:	9900      	ldr	r1, [sp, #0]
 8002f32:	4b50      	ldr	r3, [pc, #320]	; (8003074 <_dtoa_r+0x63c>)
 8002f34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002f38:	4431      	add	r1, r6
 8002f3a:	9102      	str	r1, [sp, #8]
 8002f3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002f3e:	eeb0 9a47 	vmov.f32	s18, s14
 8002f42:	eef0 9a67 	vmov.f32	s19, s15
 8002f46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002f4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002f4e:	2900      	cmp	r1, #0
 8002f50:	d044      	beq.n	8002fdc <_dtoa_r+0x5a4>
 8002f52:	494e      	ldr	r1, [pc, #312]	; (800308c <_dtoa_r+0x654>)
 8002f54:	2000      	movs	r0, #0
 8002f56:	f7fd fc81 	bl	800085c <__aeabi_ddiv>
 8002f5a:	ec53 2b19 	vmov	r2, r3, d9
 8002f5e:	f7fd f99b 	bl	8000298 <__aeabi_dsub>
 8002f62:	9d00      	ldr	r5, [sp, #0]
 8002f64:	ec41 0b19 	vmov	d9, r0, r1
 8002f68:	4649      	mov	r1, r9
 8002f6a:	4640      	mov	r0, r8
 8002f6c:	f7fd fdfc 	bl	8000b68 <__aeabi_d2iz>
 8002f70:	4606      	mov	r6, r0
 8002f72:	f7fd fadf 	bl	8000534 <__aeabi_i2d>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4640      	mov	r0, r8
 8002f7c:	4649      	mov	r1, r9
 8002f7e:	f7fd f98b 	bl	8000298 <__aeabi_dsub>
 8002f82:	3630      	adds	r6, #48	; 0x30
 8002f84:	f805 6b01 	strb.w	r6, [r5], #1
 8002f88:	ec53 2b19 	vmov	r2, r3, d9
 8002f8c:	4680      	mov	r8, r0
 8002f8e:	4689      	mov	r9, r1
 8002f90:	f7fd fdac 	bl	8000aec <__aeabi_dcmplt>
 8002f94:	2800      	cmp	r0, #0
 8002f96:	d164      	bne.n	8003062 <_dtoa_r+0x62a>
 8002f98:	4642      	mov	r2, r8
 8002f9a:	464b      	mov	r3, r9
 8002f9c:	4937      	ldr	r1, [pc, #220]	; (800307c <_dtoa_r+0x644>)
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	f7fd f97a 	bl	8000298 <__aeabi_dsub>
 8002fa4:	ec53 2b19 	vmov	r2, r3, d9
 8002fa8:	f7fd fda0 	bl	8000aec <__aeabi_dcmplt>
 8002fac:	2800      	cmp	r0, #0
 8002fae:	f040 80b6 	bne.w	800311e <_dtoa_r+0x6e6>
 8002fb2:	9b02      	ldr	r3, [sp, #8]
 8002fb4:	429d      	cmp	r5, r3
 8002fb6:	f43f af7c 	beq.w	8002eb2 <_dtoa_r+0x47a>
 8002fba:	4b31      	ldr	r3, [pc, #196]	; (8003080 <_dtoa_r+0x648>)
 8002fbc:	ec51 0b19 	vmov	r0, r1, d9
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f7fd fb21 	bl	8000608 <__aeabi_dmul>
 8002fc6:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <_dtoa_r+0x648>)
 8002fc8:	ec41 0b19 	vmov	d9, r0, r1
 8002fcc:	2200      	movs	r2, #0
 8002fce:	4640      	mov	r0, r8
 8002fd0:	4649      	mov	r1, r9
 8002fd2:	f7fd fb19 	bl	8000608 <__aeabi_dmul>
 8002fd6:	4680      	mov	r8, r0
 8002fd8:	4689      	mov	r9, r1
 8002fda:	e7c5      	b.n	8002f68 <_dtoa_r+0x530>
 8002fdc:	ec51 0b17 	vmov	r0, r1, d7
 8002fe0:	f7fd fb12 	bl	8000608 <__aeabi_dmul>
 8002fe4:	9b02      	ldr	r3, [sp, #8]
 8002fe6:	9d00      	ldr	r5, [sp, #0]
 8002fe8:	930f      	str	r3, [sp, #60]	; 0x3c
 8002fea:	ec41 0b19 	vmov	d9, r0, r1
 8002fee:	4649      	mov	r1, r9
 8002ff0:	4640      	mov	r0, r8
 8002ff2:	f7fd fdb9 	bl	8000b68 <__aeabi_d2iz>
 8002ff6:	4606      	mov	r6, r0
 8002ff8:	f7fd fa9c 	bl	8000534 <__aeabi_i2d>
 8002ffc:	3630      	adds	r6, #48	; 0x30
 8002ffe:	4602      	mov	r2, r0
 8003000:	460b      	mov	r3, r1
 8003002:	4640      	mov	r0, r8
 8003004:	4649      	mov	r1, r9
 8003006:	f7fd f947 	bl	8000298 <__aeabi_dsub>
 800300a:	f805 6b01 	strb.w	r6, [r5], #1
 800300e:	9b02      	ldr	r3, [sp, #8]
 8003010:	429d      	cmp	r5, r3
 8003012:	4680      	mov	r8, r0
 8003014:	4689      	mov	r9, r1
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	d124      	bne.n	8003066 <_dtoa_r+0x62e>
 800301c:	4b1b      	ldr	r3, [pc, #108]	; (800308c <_dtoa_r+0x654>)
 800301e:	ec51 0b19 	vmov	r0, r1, d9
 8003022:	f7fd f93b 	bl	800029c <__adddf3>
 8003026:	4602      	mov	r2, r0
 8003028:	460b      	mov	r3, r1
 800302a:	4640      	mov	r0, r8
 800302c:	4649      	mov	r1, r9
 800302e:	f7fd fd7b 	bl	8000b28 <__aeabi_dcmpgt>
 8003032:	2800      	cmp	r0, #0
 8003034:	d173      	bne.n	800311e <_dtoa_r+0x6e6>
 8003036:	ec53 2b19 	vmov	r2, r3, d9
 800303a:	4914      	ldr	r1, [pc, #80]	; (800308c <_dtoa_r+0x654>)
 800303c:	2000      	movs	r0, #0
 800303e:	f7fd f92b 	bl	8000298 <__aeabi_dsub>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	4640      	mov	r0, r8
 8003048:	4649      	mov	r1, r9
 800304a:	f7fd fd4f 	bl	8000aec <__aeabi_dcmplt>
 800304e:	2800      	cmp	r0, #0
 8003050:	f43f af2f 	beq.w	8002eb2 <_dtoa_r+0x47a>
 8003054:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003056:	1e6b      	subs	r3, r5, #1
 8003058:	930f      	str	r3, [sp, #60]	; 0x3c
 800305a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800305e:	2b30      	cmp	r3, #48	; 0x30
 8003060:	d0f8      	beq.n	8003054 <_dtoa_r+0x61c>
 8003062:	46bb      	mov	fp, r7
 8003064:	e04a      	b.n	80030fc <_dtoa_r+0x6c4>
 8003066:	4b06      	ldr	r3, [pc, #24]	; (8003080 <_dtoa_r+0x648>)
 8003068:	f7fd face 	bl	8000608 <__aeabi_dmul>
 800306c:	4680      	mov	r8, r0
 800306e:	4689      	mov	r9, r1
 8003070:	e7bd      	b.n	8002fee <_dtoa_r+0x5b6>
 8003072:	bf00      	nop
 8003074:	08004870 	.word	0x08004870
 8003078:	08004848 	.word	0x08004848
 800307c:	3ff00000 	.word	0x3ff00000
 8003080:	40240000 	.word	0x40240000
 8003084:	401c0000 	.word	0x401c0000
 8003088:	40140000 	.word	0x40140000
 800308c:	3fe00000 	.word	0x3fe00000
 8003090:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003094:	9d00      	ldr	r5, [sp, #0]
 8003096:	4642      	mov	r2, r8
 8003098:	464b      	mov	r3, r9
 800309a:	4630      	mov	r0, r6
 800309c:	4639      	mov	r1, r7
 800309e:	f7fd fbdd 	bl	800085c <__aeabi_ddiv>
 80030a2:	f7fd fd61 	bl	8000b68 <__aeabi_d2iz>
 80030a6:	9001      	str	r0, [sp, #4]
 80030a8:	f7fd fa44 	bl	8000534 <__aeabi_i2d>
 80030ac:	4642      	mov	r2, r8
 80030ae:	464b      	mov	r3, r9
 80030b0:	f7fd faaa 	bl	8000608 <__aeabi_dmul>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	4630      	mov	r0, r6
 80030ba:	4639      	mov	r1, r7
 80030bc:	f7fd f8ec 	bl	8000298 <__aeabi_dsub>
 80030c0:	9e01      	ldr	r6, [sp, #4]
 80030c2:	9f04      	ldr	r7, [sp, #16]
 80030c4:	3630      	adds	r6, #48	; 0x30
 80030c6:	f805 6b01 	strb.w	r6, [r5], #1
 80030ca:	9e00      	ldr	r6, [sp, #0]
 80030cc:	1bae      	subs	r6, r5, r6
 80030ce:	42b7      	cmp	r7, r6
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	d134      	bne.n	8003140 <_dtoa_r+0x708>
 80030d6:	f7fd f8e1 	bl	800029c <__adddf3>
 80030da:	4642      	mov	r2, r8
 80030dc:	464b      	mov	r3, r9
 80030de:	4606      	mov	r6, r0
 80030e0:	460f      	mov	r7, r1
 80030e2:	f7fd fd21 	bl	8000b28 <__aeabi_dcmpgt>
 80030e6:	b9c8      	cbnz	r0, 800311c <_dtoa_r+0x6e4>
 80030e8:	4642      	mov	r2, r8
 80030ea:	464b      	mov	r3, r9
 80030ec:	4630      	mov	r0, r6
 80030ee:	4639      	mov	r1, r7
 80030f0:	f7fd fcf2 	bl	8000ad8 <__aeabi_dcmpeq>
 80030f4:	b110      	cbz	r0, 80030fc <_dtoa_r+0x6c4>
 80030f6:	9b01      	ldr	r3, [sp, #4]
 80030f8:	07db      	lsls	r3, r3, #31
 80030fa:	d40f      	bmi.n	800311c <_dtoa_r+0x6e4>
 80030fc:	4651      	mov	r1, sl
 80030fe:	4620      	mov	r0, r4
 8003100:	f000 fbcc 	bl	800389c <_Bfree>
 8003104:	2300      	movs	r3, #0
 8003106:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003108:	702b      	strb	r3, [r5, #0]
 800310a:	f10b 0301 	add.w	r3, fp, #1
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003112:	2b00      	cmp	r3, #0
 8003114:	f43f ace2 	beq.w	8002adc <_dtoa_r+0xa4>
 8003118:	601d      	str	r5, [r3, #0]
 800311a:	e4df      	b.n	8002adc <_dtoa_r+0xa4>
 800311c:	465f      	mov	r7, fp
 800311e:	462b      	mov	r3, r5
 8003120:	461d      	mov	r5, r3
 8003122:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003126:	2a39      	cmp	r2, #57	; 0x39
 8003128:	d106      	bne.n	8003138 <_dtoa_r+0x700>
 800312a:	9a00      	ldr	r2, [sp, #0]
 800312c:	429a      	cmp	r2, r3
 800312e:	d1f7      	bne.n	8003120 <_dtoa_r+0x6e8>
 8003130:	9900      	ldr	r1, [sp, #0]
 8003132:	2230      	movs	r2, #48	; 0x30
 8003134:	3701      	adds	r7, #1
 8003136:	700a      	strb	r2, [r1, #0]
 8003138:	781a      	ldrb	r2, [r3, #0]
 800313a:	3201      	adds	r2, #1
 800313c:	701a      	strb	r2, [r3, #0]
 800313e:	e790      	b.n	8003062 <_dtoa_r+0x62a>
 8003140:	4ba3      	ldr	r3, [pc, #652]	; (80033d0 <_dtoa_r+0x998>)
 8003142:	2200      	movs	r2, #0
 8003144:	f7fd fa60 	bl	8000608 <__aeabi_dmul>
 8003148:	2200      	movs	r2, #0
 800314a:	2300      	movs	r3, #0
 800314c:	4606      	mov	r6, r0
 800314e:	460f      	mov	r7, r1
 8003150:	f7fd fcc2 	bl	8000ad8 <__aeabi_dcmpeq>
 8003154:	2800      	cmp	r0, #0
 8003156:	d09e      	beq.n	8003096 <_dtoa_r+0x65e>
 8003158:	e7d0      	b.n	80030fc <_dtoa_r+0x6c4>
 800315a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800315c:	2a00      	cmp	r2, #0
 800315e:	f000 80ca 	beq.w	80032f6 <_dtoa_r+0x8be>
 8003162:	9a07      	ldr	r2, [sp, #28]
 8003164:	2a01      	cmp	r2, #1
 8003166:	f300 80ad 	bgt.w	80032c4 <_dtoa_r+0x88c>
 800316a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800316c:	2a00      	cmp	r2, #0
 800316e:	f000 80a5 	beq.w	80032bc <_dtoa_r+0x884>
 8003172:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003176:	9e08      	ldr	r6, [sp, #32]
 8003178:	9d05      	ldr	r5, [sp, #20]
 800317a:	9a05      	ldr	r2, [sp, #20]
 800317c:	441a      	add	r2, r3
 800317e:	9205      	str	r2, [sp, #20]
 8003180:	9a06      	ldr	r2, [sp, #24]
 8003182:	2101      	movs	r1, #1
 8003184:	441a      	add	r2, r3
 8003186:	4620      	mov	r0, r4
 8003188:	9206      	str	r2, [sp, #24]
 800318a:	f000 fc3d 	bl	8003a08 <__i2b>
 800318e:	4607      	mov	r7, r0
 8003190:	b165      	cbz	r5, 80031ac <_dtoa_r+0x774>
 8003192:	9b06      	ldr	r3, [sp, #24]
 8003194:	2b00      	cmp	r3, #0
 8003196:	dd09      	ble.n	80031ac <_dtoa_r+0x774>
 8003198:	42ab      	cmp	r3, r5
 800319a:	9a05      	ldr	r2, [sp, #20]
 800319c:	bfa8      	it	ge
 800319e:	462b      	movge	r3, r5
 80031a0:	1ad2      	subs	r2, r2, r3
 80031a2:	9205      	str	r2, [sp, #20]
 80031a4:	9a06      	ldr	r2, [sp, #24]
 80031a6:	1aed      	subs	r5, r5, r3
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	9306      	str	r3, [sp, #24]
 80031ac:	9b08      	ldr	r3, [sp, #32]
 80031ae:	b1f3      	cbz	r3, 80031ee <_dtoa_r+0x7b6>
 80031b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 80a3 	beq.w	80032fe <_dtoa_r+0x8c6>
 80031b8:	2e00      	cmp	r6, #0
 80031ba:	dd10      	ble.n	80031de <_dtoa_r+0x7a6>
 80031bc:	4639      	mov	r1, r7
 80031be:	4632      	mov	r2, r6
 80031c0:	4620      	mov	r0, r4
 80031c2:	f000 fce1 	bl	8003b88 <__pow5mult>
 80031c6:	4652      	mov	r2, sl
 80031c8:	4601      	mov	r1, r0
 80031ca:	4607      	mov	r7, r0
 80031cc:	4620      	mov	r0, r4
 80031ce:	f000 fc31 	bl	8003a34 <__multiply>
 80031d2:	4651      	mov	r1, sl
 80031d4:	4680      	mov	r8, r0
 80031d6:	4620      	mov	r0, r4
 80031d8:	f000 fb60 	bl	800389c <_Bfree>
 80031dc:	46c2      	mov	sl, r8
 80031de:	9b08      	ldr	r3, [sp, #32]
 80031e0:	1b9a      	subs	r2, r3, r6
 80031e2:	d004      	beq.n	80031ee <_dtoa_r+0x7b6>
 80031e4:	4651      	mov	r1, sl
 80031e6:	4620      	mov	r0, r4
 80031e8:	f000 fcce 	bl	8003b88 <__pow5mult>
 80031ec:	4682      	mov	sl, r0
 80031ee:	2101      	movs	r1, #1
 80031f0:	4620      	mov	r0, r4
 80031f2:	f000 fc09 	bl	8003a08 <__i2b>
 80031f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	4606      	mov	r6, r0
 80031fc:	f340 8081 	ble.w	8003302 <_dtoa_r+0x8ca>
 8003200:	461a      	mov	r2, r3
 8003202:	4601      	mov	r1, r0
 8003204:	4620      	mov	r0, r4
 8003206:	f000 fcbf 	bl	8003b88 <__pow5mult>
 800320a:	9b07      	ldr	r3, [sp, #28]
 800320c:	2b01      	cmp	r3, #1
 800320e:	4606      	mov	r6, r0
 8003210:	dd7a      	ble.n	8003308 <_dtoa_r+0x8d0>
 8003212:	f04f 0800 	mov.w	r8, #0
 8003216:	6933      	ldr	r3, [r6, #16]
 8003218:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800321c:	6918      	ldr	r0, [r3, #16]
 800321e:	f000 fba5 	bl	800396c <__hi0bits>
 8003222:	f1c0 0020 	rsb	r0, r0, #32
 8003226:	9b06      	ldr	r3, [sp, #24]
 8003228:	4418      	add	r0, r3
 800322a:	f010 001f 	ands.w	r0, r0, #31
 800322e:	f000 8094 	beq.w	800335a <_dtoa_r+0x922>
 8003232:	f1c0 0320 	rsb	r3, r0, #32
 8003236:	2b04      	cmp	r3, #4
 8003238:	f340 8085 	ble.w	8003346 <_dtoa_r+0x90e>
 800323c:	9b05      	ldr	r3, [sp, #20]
 800323e:	f1c0 001c 	rsb	r0, r0, #28
 8003242:	4403      	add	r3, r0
 8003244:	9305      	str	r3, [sp, #20]
 8003246:	9b06      	ldr	r3, [sp, #24]
 8003248:	4403      	add	r3, r0
 800324a:	4405      	add	r5, r0
 800324c:	9306      	str	r3, [sp, #24]
 800324e:	9b05      	ldr	r3, [sp, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	dd05      	ble.n	8003260 <_dtoa_r+0x828>
 8003254:	4651      	mov	r1, sl
 8003256:	461a      	mov	r2, r3
 8003258:	4620      	mov	r0, r4
 800325a:	f000 fcef 	bl	8003c3c <__lshift>
 800325e:	4682      	mov	sl, r0
 8003260:	9b06      	ldr	r3, [sp, #24]
 8003262:	2b00      	cmp	r3, #0
 8003264:	dd05      	ble.n	8003272 <_dtoa_r+0x83a>
 8003266:	4631      	mov	r1, r6
 8003268:	461a      	mov	r2, r3
 800326a:	4620      	mov	r0, r4
 800326c:	f000 fce6 	bl	8003c3c <__lshift>
 8003270:	4606      	mov	r6, r0
 8003272:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003274:	2b00      	cmp	r3, #0
 8003276:	d072      	beq.n	800335e <_dtoa_r+0x926>
 8003278:	4631      	mov	r1, r6
 800327a:	4650      	mov	r0, sl
 800327c:	f000 fd4a 	bl	8003d14 <__mcmp>
 8003280:	2800      	cmp	r0, #0
 8003282:	da6c      	bge.n	800335e <_dtoa_r+0x926>
 8003284:	2300      	movs	r3, #0
 8003286:	4651      	mov	r1, sl
 8003288:	220a      	movs	r2, #10
 800328a:	4620      	mov	r0, r4
 800328c:	f000 fb28 	bl	80038e0 <__multadd>
 8003290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003292:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003296:	4682      	mov	sl, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 81b0 	beq.w	80035fe <_dtoa_r+0xbc6>
 800329e:	2300      	movs	r3, #0
 80032a0:	4639      	mov	r1, r7
 80032a2:	220a      	movs	r2, #10
 80032a4:	4620      	mov	r0, r4
 80032a6:	f000 fb1b 	bl	80038e0 <__multadd>
 80032aa:	9b01      	ldr	r3, [sp, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	4607      	mov	r7, r0
 80032b0:	f300 8096 	bgt.w	80033e0 <_dtoa_r+0x9a8>
 80032b4:	9b07      	ldr	r3, [sp, #28]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	dc59      	bgt.n	800336e <_dtoa_r+0x936>
 80032ba:	e091      	b.n	80033e0 <_dtoa_r+0x9a8>
 80032bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80032be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80032c2:	e758      	b.n	8003176 <_dtoa_r+0x73e>
 80032c4:	9b04      	ldr	r3, [sp, #16]
 80032c6:	1e5e      	subs	r6, r3, #1
 80032c8:	9b08      	ldr	r3, [sp, #32]
 80032ca:	42b3      	cmp	r3, r6
 80032cc:	bfbf      	itttt	lt
 80032ce:	9b08      	ldrlt	r3, [sp, #32]
 80032d0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80032d2:	9608      	strlt	r6, [sp, #32]
 80032d4:	1af3      	sublt	r3, r6, r3
 80032d6:	bfb4      	ite	lt
 80032d8:	18d2      	addlt	r2, r2, r3
 80032da:	1b9e      	subge	r6, r3, r6
 80032dc:	9b04      	ldr	r3, [sp, #16]
 80032de:	bfbc      	itt	lt
 80032e0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80032e2:	2600      	movlt	r6, #0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bfb7      	itett	lt
 80032e8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80032ec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80032f0:	1a9d      	sublt	r5, r3, r2
 80032f2:	2300      	movlt	r3, #0
 80032f4:	e741      	b.n	800317a <_dtoa_r+0x742>
 80032f6:	9e08      	ldr	r6, [sp, #32]
 80032f8:	9d05      	ldr	r5, [sp, #20]
 80032fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80032fc:	e748      	b.n	8003190 <_dtoa_r+0x758>
 80032fe:	9a08      	ldr	r2, [sp, #32]
 8003300:	e770      	b.n	80031e4 <_dtoa_r+0x7ac>
 8003302:	9b07      	ldr	r3, [sp, #28]
 8003304:	2b01      	cmp	r3, #1
 8003306:	dc19      	bgt.n	800333c <_dtoa_r+0x904>
 8003308:	9b02      	ldr	r3, [sp, #8]
 800330a:	b9bb      	cbnz	r3, 800333c <_dtoa_r+0x904>
 800330c:	9b03      	ldr	r3, [sp, #12]
 800330e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003312:	b99b      	cbnz	r3, 800333c <_dtoa_r+0x904>
 8003314:	9b03      	ldr	r3, [sp, #12]
 8003316:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800331a:	0d1b      	lsrs	r3, r3, #20
 800331c:	051b      	lsls	r3, r3, #20
 800331e:	b183      	cbz	r3, 8003342 <_dtoa_r+0x90a>
 8003320:	9b05      	ldr	r3, [sp, #20]
 8003322:	3301      	adds	r3, #1
 8003324:	9305      	str	r3, [sp, #20]
 8003326:	9b06      	ldr	r3, [sp, #24]
 8003328:	3301      	adds	r3, #1
 800332a:	9306      	str	r3, [sp, #24]
 800332c:	f04f 0801 	mov.w	r8, #1
 8003330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003332:	2b00      	cmp	r3, #0
 8003334:	f47f af6f 	bne.w	8003216 <_dtoa_r+0x7de>
 8003338:	2001      	movs	r0, #1
 800333a:	e774      	b.n	8003226 <_dtoa_r+0x7ee>
 800333c:	f04f 0800 	mov.w	r8, #0
 8003340:	e7f6      	b.n	8003330 <_dtoa_r+0x8f8>
 8003342:	4698      	mov	r8, r3
 8003344:	e7f4      	b.n	8003330 <_dtoa_r+0x8f8>
 8003346:	d082      	beq.n	800324e <_dtoa_r+0x816>
 8003348:	9a05      	ldr	r2, [sp, #20]
 800334a:	331c      	adds	r3, #28
 800334c:	441a      	add	r2, r3
 800334e:	9205      	str	r2, [sp, #20]
 8003350:	9a06      	ldr	r2, [sp, #24]
 8003352:	441a      	add	r2, r3
 8003354:	441d      	add	r5, r3
 8003356:	9206      	str	r2, [sp, #24]
 8003358:	e779      	b.n	800324e <_dtoa_r+0x816>
 800335a:	4603      	mov	r3, r0
 800335c:	e7f4      	b.n	8003348 <_dtoa_r+0x910>
 800335e:	9b04      	ldr	r3, [sp, #16]
 8003360:	2b00      	cmp	r3, #0
 8003362:	dc37      	bgt.n	80033d4 <_dtoa_r+0x99c>
 8003364:	9b07      	ldr	r3, [sp, #28]
 8003366:	2b02      	cmp	r3, #2
 8003368:	dd34      	ble.n	80033d4 <_dtoa_r+0x99c>
 800336a:	9b04      	ldr	r3, [sp, #16]
 800336c:	9301      	str	r3, [sp, #4]
 800336e:	9b01      	ldr	r3, [sp, #4]
 8003370:	b963      	cbnz	r3, 800338c <_dtoa_r+0x954>
 8003372:	4631      	mov	r1, r6
 8003374:	2205      	movs	r2, #5
 8003376:	4620      	mov	r0, r4
 8003378:	f000 fab2 	bl	80038e0 <__multadd>
 800337c:	4601      	mov	r1, r0
 800337e:	4606      	mov	r6, r0
 8003380:	4650      	mov	r0, sl
 8003382:	f000 fcc7 	bl	8003d14 <__mcmp>
 8003386:	2800      	cmp	r0, #0
 8003388:	f73f adbb 	bgt.w	8002f02 <_dtoa_r+0x4ca>
 800338c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800338e:	9d00      	ldr	r5, [sp, #0]
 8003390:	ea6f 0b03 	mvn.w	fp, r3
 8003394:	f04f 0800 	mov.w	r8, #0
 8003398:	4631      	mov	r1, r6
 800339a:	4620      	mov	r0, r4
 800339c:	f000 fa7e 	bl	800389c <_Bfree>
 80033a0:	2f00      	cmp	r7, #0
 80033a2:	f43f aeab 	beq.w	80030fc <_dtoa_r+0x6c4>
 80033a6:	f1b8 0f00 	cmp.w	r8, #0
 80033aa:	d005      	beq.n	80033b8 <_dtoa_r+0x980>
 80033ac:	45b8      	cmp	r8, r7
 80033ae:	d003      	beq.n	80033b8 <_dtoa_r+0x980>
 80033b0:	4641      	mov	r1, r8
 80033b2:	4620      	mov	r0, r4
 80033b4:	f000 fa72 	bl	800389c <_Bfree>
 80033b8:	4639      	mov	r1, r7
 80033ba:	4620      	mov	r0, r4
 80033bc:	f000 fa6e 	bl	800389c <_Bfree>
 80033c0:	e69c      	b.n	80030fc <_dtoa_r+0x6c4>
 80033c2:	2600      	movs	r6, #0
 80033c4:	4637      	mov	r7, r6
 80033c6:	e7e1      	b.n	800338c <_dtoa_r+0x954>
 80033c8:	46bb      	mov	fp, r7
 80033ca:	4637      	mov	r7, r6
 80033cc:	e599      	b.n	8002f02 <_dtoa_r+0x4ca>
 80033ce:	bf00      	nop
 80033d0:	40240000 	.word	0x40240000
 80033d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 80c8 	beq.w	800356c <_dtoa_r+0xb34>
 80033dc:	9b04      	ldr	r3, [sp, #16]
 80033de:	9301      	str	r3, [sp, #4]
 80033e0:	2d00      	cmp	r5, #0
 80033e2:	dd05      	ble.n	80033f0 <_dtoa_r+0x9b8>
 80033e4:	4639      	mov	r1, r7
 80033e6:	462a      	mov	r2, r5
 80033e8:	4620      	mov	r0, r4
 80033ea:	f000 fc27 	bl	8003c3c <__lshift>
 80033ee:	4607      	mov	r7, r0
 80033f0:	f1b8 0f00 	cmp.w	r8, #0
 80033f4:	d05b      	beq.n	80034ae <_dtoa_r+0xa76>
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4620      	mov	r0, r4
 80033fa:	f000 fa0f 	bl	800381c <_Balloc>
 80033fe:	4605      	mov	r5, r0
 8003400:	b928      	cbnz	r0, 800340e <_dtoa_r+0x9d6>
 8003402:	4b83      	ldr	r3, [pc, #524]	; (8003610 <_dtoa_r+0xbd8>)
 8003404:	4602      	mov	r2, r0
 8003406:	f240 21ef 	movw	r1, #751	; 0x2ef
 800340a:	f7ff bb2e 	b.w	8002a6a <_dtoa_r+0x32>
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	3202      	adds	r2, #2
 8003412:	0092      	lsls	r2, r2, #2
 8003414:	f107 010c 	add.w	r1, r7, #12
 8003418:	300c      	adds	r0, #12
 800341a:	f001 f813 	bl	8004444 <memcpy>
 800341e:	2201      	movs	r2, #1
 8003420:	4629      	mov	r1, r5
 8003422:	4620      	mov	r0, r4
 8003424:	f000 fc0a 	bl	8003c3c <__lshift>
 8003428:	9b00      	ldr	r3, [sp, #0]
 800342a:	3301      	adds	r3, #1
 800342c:	9304      	str	r3, [sp, #16]
 800342e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003432:	4413      	add	r3, r2
 8003434:	9308      	str	r3, [sp, #32]
 8003436:	9b02      	ldr	r3, [sp, #8]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	46b8      	mov	r8, r7
 800343e:	9306      	str	r3, [sp, #24]
 8003440:	4607      	mov	r7, r0
 8003442:	9b04      	ldr	r3, [sp, #16]
 8003444:	4631      	mov	r1, r6
 8003446:	3b01      	subs	r3, #1
 8003448:	4650      	mov	r0, sl
 800344a:	9301      	str	r3, [sp, #4]
 800344c:	f7ff fa69 	bl	8002922 <quorem>
 8003450:	4641      	mov	r1, r8
 8003452:	9002      	str	r0, [sp, #8]
 8003454:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003458:	4650      	mov	r0, sl
 800345a:	f000 fc5b 	bl	8003d14 <__mcmp>
 800345e:	463a      	mov	r2, r7
 8003460:	9005      	str	r0, [sp, #20]
 8003462:	4631      	mov	r1, r6
 8003464:	4620      	mov	r0, r4
 8003466:	f000 fc71 	bl	8003d4c <__mdiff>
 800346a:	68c2      	ldr	r2, [r0, #12]
 800346c:	4605      	mov	r5, r0
 800346e:	bb02      	cbnz	r2, 80034b2 <_dtoa_r+0xa7a>
 8003470:	4601      	mov	r1, r0
 8003472:	4650      	mov	r0, sl
 8003474:	f000 fc4e 	bl	8003d14 <__mcmp>
 8003478:	4602      	mov	r2, r0
 800347a:	4629      	mov	r1, r5
 800347c:	4620      	mov	r0, r4
 800347e:	9209      	str	r2, [sp, #36]	; 0x24
 8003480:	f000 fa0c 	bl	800389c <_Bfree>
 8003484:	9b07      	ldr	r3, [sp, #28]
 8003486:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003488:	9d04      	ldr	r5, [sp, #16]
 800348a:	ea43 0102 	orr.w	r1, r3, r2
 800348e:	9b06      	ldr	r3, [sp, #24]
 8003490:	4319      	orrs	r1, r3
 8003492:	d110      	bne.n	80034b6 <_dtoa_r+0xa7e>
 8003494:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003498:	d029      	beq.n	80034ee <_dtoa_r+0xab6>
 800349a:	9b05      	ldr	r3, [sp, #20]
 800349c:	2b00      	cmp	r3, #0
 800349e:	dd02      	ble.n	80034a6 <_dtoa_r+0xa6e>
 80034a0:	9b02      	ldr	r3, [sp, #8]
 80034a2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80034a6:	9b01      	ldr	r3, [sp, #4]
 80034a8:	f883 9000 	strb.w	r9, [r3]
 80034ac:	e774      	b.n	8003398 <_dtoa_r+0x960>
 80034ae:	4638      	mov	r0, r7
 80034b0:	e7ba      	b.n	8003428 <_dtoa_r+0x9f0>
 80034b2:	2201      	movs	r2, #1
 80034b4:	e7e1      	b.n	800347a <_dtoa_r+0xa42>
 80034b6:	9b05      	ldr	r3, [sp, #20]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	db04      	blt.n	80034c6 <_dtoa_r+0xa8e>
 80034bc:	9907      	ldr	r1, [sp, #28]
 80034be:	430b      	orrs	r3, r1
 80034c0:	9906      	ldr	r1, [sp, #24]
 80034c2:	430b      	orrs	r3, r1
 80034c4:	d120      	bne.n	8003508 <_dtoa_r+0xad0>
 80034c6:	2a00      	cmp	r2, #0
 80034c8:	dded      	ble.n	80034a6 <_dtoa_r+0xa6e>
 80034ca:	4651      	mov	r1, sl
 80034cc:	2201      	movs	r2, #1
 80034ce:	4620      	mov	r0, r4
 80034d0:	f000 fbb4 	bl	8003c3c <__lshift>
 80034d4:	4631      	mov	r1, r6
 80034d6:	4682      	mov	sl, r0
 80034d8:	f000 fc1c 	bl	8003d14 <__mcmp>
 80034dc:	2800      	cmp	r0, #0
 80034de:	dc03      	bgt.n	80034e8 <_dtoa_r+0xab0>
 80034e0:	d1e1      	bne.n	80034a6 <_dtoa_r+0xa6e>
 80034e2:	f019 0f01 	tst.w	r9, #1
 80034e6:	d0de      	beq.n	80034a6 <_dtoa_r+0xa6e>
 80034e8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80034ec:	d1d8      	bne.n	80034a0 <_dtoa_r+0xa68>
 80034ee:	9a01      	ldr	r2, [sp, #4]
 80034f0:	2339      	movs	r3, #57	; 0x39
 80034f2:	7013      	strb	r3, [r2, #0]
 80034f4:	462b      	mov	r3, r5
 80034f6:	461d      	mov	r5, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80034fe:	2a39      	cmp	r2, #57	; 0x39
 8003500:	d06c      	beq.n	80035dc <_dtoa_r+0xba4>
 8003502:	3201      	adds	r2, #1
 8003504:	701a      	strb	r2, [r3, #0]
 8003506:	e747      	b.n	8003398 <_dtoa_r+0x960>
 8003508:	2a00      	cmp	r2, #0
 800350a:	dd07      	ble.n	800351c <_dtoa_r+0xae4>
 800350c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003510:	d0ed      	beq.n	80034ee <_dtoa_r+0xab6>
 8003512:	9a01      	ldr	r2, [sp, #4]
 8003514:	f109 0301 	add.w	r3, r9, #1
 8003518:	7013      	strb	r3, [r2, #0]
 800351a:	e73d      	b.n	8003398 <_dtoa_r+0x960>
 800351c:	9b04      	ldr	r3, [sp, #16]
 800351e:	9a08      	ldr	r2, [sp, #32]
 8003520:	f803 9c01 	strb.w	r9, [r3, #-1]
 8003524:	4293      	cmp	r3, r2
 8003526:	d043      	beq.n	80035b0 <_dtoa_r+0xb78>
 8003528:	4651      	mov	r1, sl
 800352a:	2300      	movs	r3, #0
 800352c:	220a      	movs	r2, #10
 800352e:	4620      	mov	r0, r4
 8003530:	f000 f9d6 	bl	80038e0 <__multadd>
 8003534:	45b8      	cmp	r8, r7
 8003536:	4682      	mov	sl, r0
 8003538:	f04f 0300 	mov.w	r3, #0
 800353c:	f04f 020a 	mov.w	r2, #10
 8003540:	4641      	mov	r1, r8
 8003542:	4620      	mov	r0, r4
 8003544:	d107      	bne.n	8003556 <_dtoa_r+0xb1e>
 8003546:	f000 f9cb 	bl	80038e0 <__multadd>
 800354a:	4680      	mov	r8, r0
 800354c:	4607      	mov	r7, r0
 800354e:	9b04      	ldr	r3, [sp, #16]
 8003550:	3301      	adds	r3, #1
 8003552:	9304      	str	r3, [sp, #16]
 8003554:	e775      	b.n	8003442 <_dtoa_r+0xa0a>
 8003556:	f000 f9c3 	bl	80038e0 <__multadd>
 800355a:	4639      	mov	r1, r7
 800355c:	4680      	mov	r8, r0
 800355e:	2300      	movs	r3, #0
 8003560:	220a      	movs	r2, #10
 8003562:	4620      	mov	r0, r4
 8003564:	f000 f9bc 	bl	80038e0 <__multadd>
 8003568:	4607      	mov	r7, r0
 800356a:	e7f0      	b.n	800354e <_dtoa_r+0xb16>
 800356c:	9b04      	ldr	r3, [sp, #16]
 800356e:	9301      	str	r3, [sp, #4]
 8003570:	9d00      	ldr	r5, [sp, #0]
 8003572:	4631      	mov	r1, r6
 8003574:	4650      	mov	r0, sl
 8003576:	f7ff f9d4 	bl	8002922 <quorem>
 800357a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800357e:	9b00      	ldr	r3, [sp, #0]
 8003580:	f805 9b01 	strb.w	r9, [r5], #1
 8003584:	1aea      	subs	r2, r5, r3
 8003586:	9b01      	ldr	r3, [sp, #4]
 8003588:	4293      	cmp	r3, r2
 800358a:	dd07      	ble.n	800359c <_dtoa_r+0xb64>
 800358c:	4651      	mov	r1, sl
 800358e:	2300      	movs	r3, #0
 8003590:	220a      	movs	r2, #10
 8003592:	4620      	mov	r0, r4
 8003594:	f000 f9a4 	bl	80038e0 <__multadd>
 8003598:	4682      	mov	sl, r0
 800359a:	e7ea      	b.n	8003572 <_dtoa_r+0xb3a>
 800359c:	9b01      	ldr	r3, [sp, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	bfc8      	it	gt
 80035a2:	461d      	movgt	r5, r3
 80035a4:	9b00      	ldr	r3, [sp, #0]
 80035a6:	bfd8      	it	le
 80035a8:	2501      	movle	r5, #1
 80035aa:	441d      	add	r5, r3
 80035ac:	f04f 0800 	mov.w	r8, #0
 80035b0:	4651      	mov	r1, sl
 80035b2:	2201      	movs	r2, #1
 80035b4:	4620      	mov	r0, r4
 80035b6:	f000 fb41 	bl	8003c3c <__lshift>
 80035ba:	4631      	mov	r1, r6
 80035bc:	4682      	mov	sl, r0
 80035be:	f000 fba9 	bl	8003d14 <__mcmp>
 80035c2:	2800      	cmp	r0, #0
 80035c4:	dc96      	bgt.n	80034f4 <_dtoa_r+0xabc>
 80035c6:	d102      	bne.n	80035ce <_dtoa_r+0xb96>
 80035c8:	f019 0f01 	tst.w	r9, #1
 80035cc:	d192      	bne.n	80034f4 <_dtoa_r+0xabc>
 80035ce:	462b      	mov	r3, r5
 80035d0:	461d      	mov	r5, r3
 80035d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80035d6:	2a30      	cmp	r2, #48	; 0x30
 80035d8:	d0fa      	beq.n	80035d0 <_dtoa_r+0xb98>
 80035da:	e6dd      	b.n	8003398 <_dtoa_r+0x960>
 80035dc:	9a00      	ldr	r2, [sp, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d189      	bne.n	80034f6 <_dtoa_r+0xabe>
 80035e2:	f10b 0b01 	add.w	fp, fp, #1
 80035e6:	2331      	movs	r3, #49	; 0x31
 80035e8:	e796      	b.n	8003518 <_dtoa_r+0xae0>
 80035ea:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <_dtoa_r+0xbdc>)
 80035ec:	f7ff ba99 	b.w	8002b22 <_dtoa_r+0xea>
 80035f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f47f aa6d 	bne.w	8002ad2 <_dtoa_r+0x9a>
 80035f8:	4b07      	ldr	r3, [pc, #28]	; (8003618 <_dtoa_r+0xbe0>)
 80035fa:	f7ff ba92 	b.w	8002b22 <_dtoa_r+0xea>
 80035fe:	9b01      	ldr	r3, [sp, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	dcb5      	bgt.n	8003570 <_dtoa_r+0xb38>
 8003604:	9b07      	ldr	r3, [sp, #28]
 8003606:	2b02      	cmp	r3, #2
 8003608:	f73f aeb1 	bgt.w	800336e <_dtoa_r+0x936>
 800360c:	e7b0      	b.n	8003570 <_dtoa_r+0xb38>
 800360e:	bf00      	nop
 8003610:	080047d9 	.word	0x080047d9
 8003614:	08004739 	.word	0x08004739
 8003618:	0800475d 	.word	0x0800475d

0800361c <_free_r>:
 800361c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800361e:	2900      	cmp	r1, #0
 8003620:	d044      	beq.n	80036ac <_free_r+0x90>
 8003622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003626:	9001      	str	r0, [sp, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	f1a1 0404 	sub.w	r4, r1, #4
 800362e:	bfb8      	it	lt
 8003630:	18e4      	addlt	r4, r4, r3
 8003632:	f000 f8e7 	bl	8003804 <__malloc_lock>
 8003636:	4a1e      	ldr	r2, [pc, #120]	; (80036b0 <_free_r+0x94>)
 8003638:	9801      	ldr	r0, [sp, #4]
 800363a:	6813      	ldr	r3, [r2, #0]
 800363c:	b933      	cbnz	r3, 800364c <_free_r+0x30>
 800363e:	6063      	str	r3, [r4, #4]
 8003640:	6014      	str	r4, [r2, #0]
 8003642:	b003      	add	sp, #12
 8003644:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003648:	f000 b8e2 	b.w	8003810 <__malloc_unlock>
 800364c:	42a3      	cmp	r3, r4
 800364e:	d908      	bls.n	8003662 <_free_r+0x46>
 8003650:	6825      	ldr	r5, [r4, #0]
 8003652:	1961      	adds	r1, r4, r5
 8003654:	428b      	cmp	r3, r1
 8003656:	bf01      	itttt	eq
 8003658:	6819      	ldreq	r1, [r3, #0]
 800365a:	685b      	ldreq	r3, [r3, #4]
 800365c:	1949      	addeq	r1, r1, r5
 800365e:	6021      	streq	r1, [r4, #0]
 8003660:	e7ed      	b.n	800363e <_free_r+0x22>
 8003662:	461a      	mov	r2, r3
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	b10b      	cbz	r3, 800366c <_free_r+0x50>
 8003668:	42a3      	cmp	r3, r4
 800366a:	d9fa      	bls.n	8003662 <_free_r+0x46>
 800366c:	6811      	ldr	r1, [r2, #0]
 800366e:	1855      	adds	r5, r2, r1
 8003670:	42a5      	cmp	r5, r4
 8003672:	d10b      	bne.n	800368c <_free_r+0x70>
 8003674:	6824      	ldr	r4, [r4, #0]
 8003676:	4421      	add	r1, r4
 8003678:	1854      	adds	r4, r2, r1
 800367a:	42a3      	cmp	r3, r4
 800367c:	6011      	str	r1, [r2, #0]
 800367e:	d1e0      	bne.n	8003642 <_free_r+0x26>
 8003680:	681c      	ldr	r4, [r3, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	6053      	str	r3, [r2, #4]
 8003686:	440c      	add	r4, r1
 8003688:	6014      	str	r4, [r2, #0]
 800368a:	e7da      	b.n	8003642 <_free_r+0x26>
 800368c:	d902      	bls.n	8003694 <_free_r+0x78>
 800368e:	230c      	movs	r3, #12
 8003690:	6003      	str	r3, [r0, #0]
 8003692:	e7d6      	b.n	8003642 <_free_r+0x26>
 8003694:	6825      	ldr	r5, [r4, #0]
 8003696:	1961      	adds	r1, r4, r5
 8003698:	428b      	cmp	r3, r1
 800369a:	bf04      	itt	eq
 800369c:	6819      	ldreq	r1, [r3, #0]
 800369e:	685b      	ldreq	r3, [r3, #4]
 80036a0:	6063      	str	r3, [r4, #4]
 80036a2:	bf04      	itt	eq
 80036a4:	1949      	addeq	r1, r1, r5
 80036a6:	6021      	streq	r1, [r4, #0]
 80036a8:	6054      	str	r4, [r2, #4]
 80036aa:	e7ca      	b.n	8003642 <_free_r+0x26>
 80036ac:	b003      	add	sp, #12
 80036ae:	bd30      	pop	{r4, r5, pc}
 80036b0:	20000334 	.word	0x20000334

080036b4 <malloc>:
 80036b4:	4b02      	ldr	r3, [pc, #8]	; (80036c0 <malloc+0xc>)
 80036b6:	4601      	mov	r1, r0
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	f000 b823 	b.w	8003704 <_malloc_r>
 80036be:	bf00      	nop
 80036c0:	2000005c 	.word	0x2000005c

080036c4 <sbrk_aligned>:
 80036c4:	b570      	push	{r4, r5, r6, lr}
 80036c6:	4e0e      	ldr	r6, [pc, #56]	; (8003700 <sbrk_aligned+0x3c>)
 80036c8:	460c      	mov	r4, r1
 80036ca:	6831      	ldr	r1, [r6, #0]
 80036cc:	4605      	mov	r5, r0
 80036ce:	b911      	cbnz	r1, 80036d6 <sbrk_aligned+0x12>
 80036d0:	f000 fea8 	bl	8004424 <_sbrk_r>
 80036d4:	6030      	str	r0, [r6, #0]
 80036d6:	4621      	mov	r1, r4
 80036d8:	4628      	mov	r0, r5
 80036da:	f000 fea3 	bl	8004424 <_sbrk_r>
 80036de:	1c43      	adds	r3, r0, #1
 80036e0:	d00a      	beq.n	80036f8 <sbrk_aligned+0x34>
 80036e2:	1cc4      	adds	r4, r0, #3
 80036e4:	f024 0403 	bic.w	r4, r4, #3
 80036e8:	42a0      	cmp	r0, r4
 80036ea:	d007      	beq.n	80036fc <sbrk_aligned+0x38>
 80036ec:	1a21      	subs	r1, r4, r0
 80036ee:	4628      	mov	r0, r5
 80036f0:	f000 fe98 	bl	8004424 <_sbrk_r>
 80036f4:	3001      	adds	r0, #1
 80036f6:	d101      	bne.n	80036fc <sbrk_aligned+0x38>
 80036f8:	f04f 34ff 	mov.w	r4, #4294967295
 80036fc:	4620      	mov	r0, r4
 80036fe:	bd70      	pop	{r4, r5, r6, pc}
 8003700:	20000338 	.word	0x20000338

08003704 <_malloc_r>:
 8003704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003708:	1ccd      	adds	r5, r1, #3
 800370a:	f025 0503 	bic.w	r5, r5, #3
 800370e:	3508      	adds	r5, #8
 8003710:	2d0c      	cmp	r5, #12
 8003712:	bf38      	it	cc
 8003714:	250c      	movcc	r5, #12
 8003716:	2d00      	cmp	r5, #0
 8003718:	4607      	mov	r7, r0
 800371a:	db01      	blt.n	8003720 <_malloc_r+0x1c>
 800371c:	42a9      	cmp	r1, r5
 800371e:	d905      	bls.n	800372c <_malloc_r+0x28>
 8003720:	230c      	movs	r3, #12
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	2600      	movs	r6, #0
 8003726:	4630      	mov	r0, r6
 8003728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800372c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003800 <_malloc_r+0xfc>
 8003730:	f000 f868 	bl	8003804 <__malloc_lock>
 8003734:	f8d8 3000 	ldr.w	r3, [r8]
 8003738:	461c      	mov	r4, r3
 800373a:	bb5c      	cbnz	r4, 8003794 <_malloc_r+0x90>
 800373c:	4629      	mov	r1, r5
 800373e:	4638      	mov	r0, r7
 8003740:	f7ff ffc0 	bl	80036c4 <sbrk_aligned>
 8003744:	1c43      	adds	r3, r0, #1
 8003746:	4604      	mov	r4, r0
 8003748:	d155      	bne.n	80037f6 <_malloc_r+0xf2>
 800374a:	f8d8 4000 	ldr.w	r4, [r8]
 800374e:	4626      	mov	r6, r4
 8003750:	2e00      	cmp	r6, #0
 8003752:	d145      	bne.n	80037e0 <_malloc_r+0xdc>
 8003754:	2c00      	cmp	r4, #0
 8003756:	d048      	beq.n	80037ea <_malloc_r+0xe6>
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	4631      	mov	r1, r6
 800375c:	4638      	mov	r0, r7
 800375e:	eb04 0903 	add.w	r9, r4, r3
 8003762:	f000 fe5f 	bl	8004424 <_sbrk_r>
 8003766:	4581      	cmp	r9, r0
 8003768:	d13f      	bne.n	80037ea <_malloc_r+0xe6>
 800376a:	6821      	ldr	r1, [r4, #0]
 800376c:	1a6d      	subs	r5, r5, r1
 800376e:	4629      	mov	r1, r5
 8003770:	4638      	mov	r0, r7
 8003772:	f7ff ffa7 	bl	80036c4 <sbrk_aligned>
 8003776:	3001      	adds	r0, #1
 8003778:	d037      	beq.n	80037ea <_malloc_r+0xe6>
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	442b      	add	r3, r5
 800377e:	6023      	str	r3, [r4, #0]
 8003780:	f8d8 3000 	ldr.w	r3, [r8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d038      	beq.n	80037fa <_malloc_r+0xf6>
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	42a2      	cmp	r2, r4
 800378c:	d12b      	bne.n	80037e6 <_malloc_r+0xe2>
 800378e:	2200      	movs	r2, #0
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	e00f      	b.n	80037b4 <_malloc_r+0xb0>
 8003794:	6822      	ldr	r2, [r4, #0]
 8003796:	1b52      	subs	r2, r2, r5
 8003798:	d41f      	bmi.n	80037da <_malloc_r+0xd6>
 800379a:	2a0b      	cmp	r2, #11
 800379c:	d917      	bls.n	80037ce <_malloc_r+0xca>
 800379e:	1961      	adds	r1, r4, r5
 80037a0:	42a3      	cmp	r3, r4
 80037a2:	6025      	str	r5, [r4, #0]
 80037a4:	bf18      	it	ne
 80037a6:	6059      	strne	r1, [r3, #4]
 80037a8:	6863      	ldr	r3, [r4, #4]
 80037aa:	bf08      	it	eq
 80037ac:	f8c8 1000 	streq.w	r1, [r8]
 80037b0:	5162      	str	r2, [r4, r5]
 80037b2:	604b      	str	r3, [r1, #4]
 80037b4:	4638      	mov	r0, r7
 80037b6:	f104 060b 	add.w	r6, r4, #11
 80037ba:	f000 f829 	bl	8003810 <__malloc_unlock>
 80037be:	f026 0607 	bic.w	r6, r6, #7
 80037c2:	1d23      	adds	r3, r4, #4
 80037c4:	1af2      	subs	r2, r6, r3
 80037c6:	d0ae      	beq.n	8003726 <_malloc_r+0x22>
 80037c8:	1b9b      	subs	r3, r3, r6
 80037ca:	50a3      	str	r3, [r4, r2]
 80037cc:	e7ab      	b.n	8003726 <_malloc_r+0x22>
 80037ce:	42a3      	cmp	r3, r4
 80037d0:	6862      	ldr	r2, [r4, #4]
 80037d2:	d1dd      	bne.n	8003790 <_malloc_r+0x8c>
 80037d4:	f8c8 2000 	str.w	r2, [r8]
 80037d8:	e7ec      	b.n	80037b4 <_malloc_r+0xb0>
 80037da:	4623      	mov	r3, r4
 80037dc:	6864      	ldr	r4, [r4, #4]
 80037de:	e7ac      	b.n	800373a <_malloc_r+0x36>
 80037e0:	4634      	mov	r4, r6
 80037e2:	6876      	ldr	r6, [r6, #4]
 80037e4:	e7b4      	b.n	8003750 <_malloc_r+0x4c>
 80037e6:	4613      	mov	r3, r2
 80037e8:	e7cc      	b.n	8003784 <_malloc_r+0x80>
 80037ea:	230c      	movs	r3, #12
 80037ec:	603b      	str	r3, [r7, #0]
 80037ee:	4638      	mov	r0, r7
 80037f0:	f000 f80e 	bl	8003810 <__malloc_unlock>
 80037f4:	e797      	b.n	8003726 <_malloc_r+0x22>
 80037f6:	6025      	str	r5, [r4, #0]
 80037f8:	e7dc      	b.n	80037b4 <_malloc_r+0xb0>
 80037fa:	605b      	str	r3, [r3, #4]
 80037fc:	deff      	udf	#255	; 0xff
 80037fe:	bf00      	nop
 8003800:	20000334 	.word	0x20000334

08003804 <__malloc_lock>:
 8003804:	4801      	ldr	r0, [pc, #4]	; (800380c <__malloc_lock+0x8>)
 8003806:	f7ff b88a 	b.w	800291e <__retarget_lock_acquire_recursive>
 800380a:	bf00      	nop
 800380c:	20000330 	.word	0x20000330

08003810 <__malloc_unlock>:
 8003810:	4801      	ldr	r0, [pc, #4]	; (8003818 <__malloc_unlock+0x8>)
 8003812:	f7ff b885 	b.w	8002920 <__retarget_lock_release_recursive>
 8003816:	bf00      	nop
 8003818:	20000330 	.word	0x20000330

0800381c <_Balloc>:
 800381c:	b570      	push	{r4, r5, r6, lr}
 800381e:	69c6      	ldr	r6, [r0, #28]
 8003820:	4604      	mov	r4, r0
 8003822:	460d      	mov	r5, r1
 8003824:	b976      	cbnz	r6, 8003844 <_Balloc+0x28>
 8003826:	2010      	movs	r0, #16
 8003828:	f7ff ff44 	bl	80036b4 <malloc>
 800382c:	4602      	mov	r2, r0
 800382e:	61e0      	str	r0, [r4, #28]
 8003830:	b920      	cbnz	r0, 800383c <_Balloc+0x20>
 8003832:	4b18      	ldr	r3, [pc, #96]	; (8003894 <_Balloc+0x78>)
 8003834:	4818      	ldr	r0, [pc, #96]	; (8003898 <_Balloc+0x7c>)
 8003836:	216b      	movs	r1, #107	; 0x6b
 8003838:	f000 fe12 	bl	8004460 <__assert_func>
 800383c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003840:	6006      	str	r6, [r0, #0]
 8003842:	60c6      	str	r6, [r0, #12]
 8003844:	69e6      	ldr	r6, [r4, #28]
 8003846:	68f3      	ldr	r3, [r6, #12]
 8003848:	b183      	cbz	r3, 800386c <_Balloc+0x50>
 800384a:	69e3      	ldr	r3, [r4, #28]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003852:	b9b8      	cbnz	r0, 8003884 <_Balloc+0x68>
 8003854:	2101      	movs	r1, #1
 8003856:	fa01 f605 	lsl.w	r6, r1, r5
 800385a:	1d72      	adds	r2, r6, #5
 800385c:	0092      	lsls	r2, r2, #2
 800385e:	4620      	mov	r0, r4
 8003860:	f000 fe1c 	bl	800449c <_calloc_r>
 8003864:	b160      	cbz	r0, 8003880 <_Balloc+0x64>
 8003866:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800386a:	e00e      	b.n	800388a <_Balloc+0x6e>
 800386c:	2221      	movs	r2, #33	; 0x21
 800386e:	2104      	movs	r1, #4
 8003870:	4620      	mov	r0, r4
 8003872:	f000 fe13 	bl	800449c <_calloc_r>
 8003876:	69e3      	ldr	r3, [r4, #28]
 8003878:	60f0      	str	r0, [r6, #12]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1e4      	bne.n	800384a <_Balloc+0x2e>
 8003880:	2000      	movs	r0, #0
 8003882:	bd70      	pop	{r4, r5, r6, pc}
 8003884:	6802      	ldr	r2, [r0, #0]
 8003886:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800388a:	2300      	movs	r3, #0
 800388c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003890:	e7f7      	b.n	8003882 <_Balloc+0x66>
 8003892:	bf00      	nop
 8003894:	0800476a 	.word	0x0800476a
 8003898:	080047ea 	.word	0x080047ea

0800389c <_Bfree>:
 800389c:	b570      	push	{r4, r5, r6, lr}
 800389e:	69c6      	ldr	r6, [r0, #28]
 80038a0:	4605      	mov	r5, r0
 80038a2:	460c      	mov	r4, r1
 80038a4:	b976      	cbnz	r6, 80038c4 <_Bfree+0x28>
 80038a6:	2010      	movs	r0, #16
 80038a8:	f7ff ff04 	bl	80036b4 <malloc>
 80038ac:	4602      	mov	r2, r0
 80038ae:	61e8      	str	r0, [r5, #28]
 80038b0:	b920      	cbnz	r0, 80038bc <_Bfree+0x20>
 80038b2:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <_Bfree+0x3c>)
 80038b4:	4809      	ldr	r0, [pc, #36]	; (80038dc <_Bfree+0x40>)
 80038b6:	218f      	movs	r1, #143	; 0x8f
 80038b8:	f000 fdd2 	bl	8004460 <__assert_func>
 80038bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80038c0:	6006      	str	r6, [r0, #0]
 80038c2:	60c6      	str	r6, [r0, #12]
 80038c4:	b13c      	cbz	r4, 80038d6 <_Bfree+0x3a>
 80038c6:	69eb      	ldr	r3, [r5, #28]
 80038c8:	6862      	ldr	r2, [r4, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80038d0:	6021      	str	r1, [r4, #0]
 80038d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80038d6:	bd70      	pop	{r4, r5, r6, pc}
 80038d8:	0800476a 	.word	0x0800476a
 80038dc:	080047ea 	.word	0x080047ea

080038e0 <__multadd>:
 80038e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038e4:	690d      	ldr	r5, [r1, #16]
 80038e6:	4607      	mov	r7, r0
 80038e8:	460c      	mov	r4, r1
 80038ea:	461e      	mov	r6, r3
 80038ec:	f101 0c14 	add.w	ip, r1, #20
 80038f0:	2000      	movs	r0, #0
 80038f2:	f8dc 3000 	ldr.w	r3, [ip]
 80038f6:	b299      	uxth	r1, r3
 80038f8:	fb02 6101 	mla	r1, r2, r1, r6
 80038fc:	0c1e      	lsrs	r6, r3, #16
 80038fe:	0c0b      	lsrs	r3, r1, #16
 8003900:	fb02 3306 	mla	r3, r2, r6, r3
 8003904:	b289      	uxth	r1, r1
 8003906:	3001      	adds	r0, #1
 8003908:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800390c:	4285      	cmp	r5, r0
 800390e:	f84c 1b04 	str.w	r1, [ip], #4
 8003912:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003916:	dcec      	bgt.n	80038f2 <__multadd+0x12>
 8003918:	b30e      	cbz	r6, 800395e <__multadd+0x7e>
 800391a:	68a3      	ldr	r3, [r4, #8]
 800391c:	42ab      	cmp	r3, r5
 800391e:	dc19      	bgt.n	8003954 <__multadd+0x74>
 8003920:	6861      	ldr	r1, [r4, #4]
 8003922:	4638      	mov	r0, r7
 8003924:	3101      	adds	r1, #1
 8003926:	f7ff ff79 	bl	800381c <_Balloc>
 800392a:	4680      	mov	r8, r0
 800392c:	b928      	cbnz	r0, 800393a <__multadd+0x5a>
 800392e:	4602      	mov	r2, r0
 8003930:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <__multadd+0x84>)
 8003932:	480d      	ldr	r0, [pc, #52]	; (8003968 <__multadd+0x88>)
 8003934:	21ba      	movs	r1, #186	; 0xba
 8003936:	f000 fd93 	bl	8004460 <__assert_func>
 800393a:	6922      	ldr	r2, [r4, #16]
 800393c:	3202      	adds	r2, #2
 800393e:	f104 010c 	add.w	r1, r4, #12
 8003942:	0092      	lsls	r2, r2, #2
 8003944:	300c      	adds	r0, #12
 8003946:	f000 fd7d 	bl	8004444 <memcpy>
 800394a:	4621      	mov	r1, r4
 800394c:	4638      	mov	r0, r7
 800394e:	f7ff ffa5 	bl	800389c <_Bfree>
 8003952:	4644      	mov	r4, r8
 8003954:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003958:	3501      	adds	r5, #1
 800395a:	615e      	str	r6, [r3, #20]
 800395c:	6125      	str	r5, [r4, #16]
 800395e:	4620      	mov	r0, r4
 8003960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003964:	080047d9 	.word	0x080047d9
 8003968:	080047ea 	.word	0x080047ea

0800396c <__hi0bits>:
 800396c:	0c03      	lsrs	r3, r0, #16
 800396e:	041b      	lsls	r3, r3, #16
 8003970:	b9d3      	cbnz	r3, 80039a8 <__hi0bits+0x3c>
 8003972:	0400      	lsls	r0, r0, #16
 8003974:	2310      	movs	r3, #16
 8003976:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800397a:	bf04      	itt	eq
 800397c:	0200      	lsleq	r0, r0, #8
 800397e:	3308      	addeq	r3, #8
 8003980:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003984:	bf04      	itt	eq
 8003986:	0100      	lsleq	r0, r0, #4
 8003988:	3304      	addeq	r3, #4
 800398a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800398e:	bf04      	itt	eq
 8003990:	0080      	lsleq	r0, r0, #2
 8003992:	3302      	addeq	r3, #2
 8003994:	2800      	cmp	r0, #0
 8003996:	db05      	blt.n	80039a4 <__hi0bits+0x38>
 8003998:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800399c:	f103 0301 	add.w	r3, r3, #1
 80039a0:	bf08      	it	eq
 80039a2:	2320      	moveq	r3, #32
 80039a4:	4618      	mov	r0, r3
 80039a6:	4770      	bx	lr
 80039a8:	2300      	movs	r3, #0
 80039aa:	e7e4      	b.n	8003976 <__hi0bits+0xa>

080039ac <__lo0bits>:
 80039ac:	6803      	ldr	r3, [r0, #0]
 80039ae:	f013 0207 	ands.w	r2, r3, #7
 80039b2:	d00c      	beq.n	80039ce <__lo0bits+0x22>
 80039b4:	07d9      	lsls	r1, r3, #31
 80039b6:	d422      	bmi.n	80039fe <__lo0bits+0x52>
 80039b8:	079a      	lsls	r2, r3, #30
 80039ba:	bf49      	itett	mi
 80039bc:	085b      	lsrmi	r3, r3, #1
 80039be:	089b      	lsrpl	r3, r3, #2
 80039c0:	6003      	strmi	r3, [r0, #0]
 80039c2:	2201      	movmi	r2, #1
 80039c4:	bf5c      	itt	pl
 80039c6:	6003      	strpl	r3, [r0, #0]
 80039c8:	2202      	movpl	r2, #2
 80039ca:	4610      	mov	r0, r2
 80039cc:	4770      	bx	lr
 80039ce:	b299      	uxth	r1, r3
 80039d0:	b909      	cbnz	r1, 80039d6 <__lo0bits+0x2a>
 80039d2:	0c1b      	lsrs	r3, r3, #16
 80039d4:	2210      	movs	r2, #16
 80039d6:	b2d9      	uxtb	r1, r3
 80039d8:	b909      	cbnz	r1, 80039de <__lo0bits+0x32>
 80039da:	3208      	adds	r2, #8
 80039dc:	0a1b      	lsrs	r3, r3, #8
 80039de:	0719      	lsls	r1, r3, #28
 80039e0:	bf04      	itt	eq
 80039e2:	091b      	lsreq	r3, r3, #4
 80039e4:	3204      	addeq	r2, #4
 80039e6:	0799      	lsls	r1, r3, #30
 80039e8:	bf04      	itt	eq
 80039ea:	089b      	lsreq	r3, r3, #2
 80039ec:	3202      	addeq	r2, #2
 80039ee:	07d9      	lsls	r1, r3, #31
 80039f0:	d403      	bmi.n	80039fa <__lo0bits+0x4e>
 80039f2:	085b      	lsrs	r3, r3, #1
 80039f4:	f102 0201 	add.w	r2, r2, #1
 80039f8:	d003      	beq.n	8003a02 <__lo0bits+0x56>
 80039fa:	6003      	str	r3, [r0, #0]
 80039fc:	e7e5      	b.n	80039ca <__lo0bits+0x1e>
 80039fe:	2200      	movs	r2, #0
 8003a00:	e7e3      	b.n	80039ca <__lo0bits+0x1e>
 8003a02:	2220      	movs	r2, #32
 8003a04:	e7e1      	b.n	80039ca <__lo0bits+0x1e>
	...

08003a08 <__i2b>:
 8003a08:	b510      	push	{r4, lr}
 8003a0a:	460c      	mov	r4, r1
 8003a0c:	2101      	movs	r1, #1
 8003a0e:	f7ff ff05 	bl	800381c <_Balloc>
 8003a12:	4602      	mov	r2, r0
 8003a14:	b928      	cbnz	r0, 8003a22 <__i2b+0x1a>
 8003a16:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <__i2b+0x24>)
 8003a18:	4805      	ldr	r0, [pc, #20]	; (8003a30 <__i2b+0x28>)
 8003a1a:	f240 1145 	movw	r1, #325	; 0x145
 8003a1e:	f000 fd1f 	bl	8004460 <__assert_func>
 8003a22:	2301      	movs	r3, #1
 8003a24:	6144      	str	r4, [r0, #20]
 8003a26:	6103      	str	r3, [r0, #16]
 8003a28:	bd10      	pop	{r4, pc}
 8003a2a:	bf00      	nop
 8003a2c:	080047d9 	.word	0x080047d9
 8003a30:	080047ea 	.word	0x080047ea

08003a34 <__multiply>:
 8003a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a38:	4691      	mov	r9, r2
 8003a3a:	690a      	ldr	r2, [r1, #16]
 8003a3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	bfb8      	it	lt
 8003a44:	460b      	movlt	r3, r1
 8003a46:	460c      	mov	r4, r1
 8003a48:	bfbc      	itt	lt
 8003a4a:	464c      	movlt	r4, r9
 8003a4c:	4699      	movlt	r9, r3
 8003a4e:	6927      	ldr	r7, [r4, #16]
 8003a50:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003a54:	68a3      	ldr	r3, [r4, #8]
 8003a56:	6861      	ldr	r1, [r4, #4]
 8003a58:	eb07 060a 	add.w	r6, r7, sl
 8003a5c:	42b3      	cmp	r3, r6
 8003a5e:	b085      	sub	sp, #20
 8003a60:	bfb8      	it	lt
 8003a62:	3101      	addlt	r1, #1
 8003a64:	f7ff feda 	bl	800381c <_Balloc>
 8003a68:	b930      	cbnz	r0, 8003a78 <__multiply+0x44>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	4b44      	ldr	r3, [pc, #272]	; (8003b80 <__multiply+0x14c>)
 8003a6e:	4845      	ldr	r0, [pc, #276]	; (8003b84 <__multiply+0x150>)
 8003a70:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8003a74:	f000 fcf4 	bl	8004460 <__assert_func>
 8003a78:	f100 0514 	add.w	r5, r0, #20
 8003a7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003a80:	462b      	mov	r3, r5
 8003a82:	2200      	movs	r2, #0
 8003a84:	4543      	cmp	r3, r8
 8003a86:	d321      	bcc.n	8003acc <__multiply+0x98>
 8003a88:	f104 0314 	add.w	r3, r4, #20
 8003a8c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003a90:	f109 0314 	add.w	r3, r9, #20
 8003a94:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003a98:	9202      	str	r2, [sp, #8]
 8003a9a:	1b3a      	subs	r2, r7, r4
 8003a9c:	3a15      	subs	r2, #21
 8003a9e:	f022 0203 	bic.w	r2, r2, #3
 8003aa2:	3204      	adds	r2, #4
 8003aa4:	f104 0115 	add.w	r1, r4, #21
 8003aa8:	428f      	cmp	r7, r1
 8003aaa:	bf38      	it	cc
 8003aac:	2204      	movcc	r2, #4
 8003aae:	9201      	str	r2, [sp, #4]
 8003ab0:	9a02      	ldr	r2, [sp, #8]
 8003ab2:	9303      	str	r3, [sp, #12]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d80c      	bhi.n	8003ad2 <__multiply+0x9e>
 8003ab8:	2e00      	cmp	r6, #0
 8003aba:	dd03      	ble.n	8003ac4 <__multiply+0x90>
 8003abc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d05b      	beq.n	8003b7c <__multiply+0x148>
 8003ac4:	6106      	str	r6, [r0, #16]
 8003ac6:	b005      	add	sp, #20
 8003ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003acc:	f843 2b04 	str.w	r2, [r3], #4
 8003ad0:	e7d8      	b.n	8003a84 <__multiply+0x50>
 8003ad2:	f8b3 a000 	ldrh.w	sl, [r3]
 8003ad6:	f1ba 0f00 	cmp.w	sl, #0
 8003ada:	d024      	beq.n	8003b26 <__multiply+0xf2>
 8003adc:	f104 0e14 	add.w	lr, r4, #20
 8003ae0:	46a9      	mov	r9, r5
 8003ae2:	f04f 0c00 	mov.w	ip, #0
 8003ae6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003aea:	f8d9 1000 	ldr.w	r1, [r9]
 8003aee:	fa1f fb82 	uxth.w	fp, r2
 8003af2:	b289      	uxth	r1, r1
 8003af4:	fb0a 110b 	mla	r1, sl, fp, r1
 8003af8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8003afc:	f8d9 2000 	ldr.w	r2, [r9]
 8003b00:	4461      	add	r1, ip
 8003b02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003b06:	fb0a c20b 	mla	r2, sl, fp, ip
 8003b0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003b0e:	b289      	uxth	r1, r1
 8003b10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003b14:	4577      	cmp	r7, lr
 8003b16:	f849 1b04 	str.w	r1, [r9], #4
 8003b1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003b1e:	d8e2      	bhi.n	8003ae6 <__multiply+0xb2>
 8003b20:	9a01      	ldr	r2, [sp, #4]
 8003b22:	f845 c002 	str.w	ip, [r5, r2]
 8003b26:	9a03      	ldr	r2, [sp, #12]
 8003b28:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	f1b9 0f00 	cmp.w	r9, #0
 8003b32:	d021      	beq.n	8003b78 <__multiply+0x144>
 8003b34:	6829      	ldr	r1, [r5, #0]
 8003b36:	f104 0c14 	add.w	ip, r4, #20
 8003b3a:	46ae      	mov	lr, r5
 8003b3c:	f04f 0a00 	mov.w	sl, #0
 8003b40:	f8bc b000 	ldrh.w	fp, [ip]
 8003b44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8003b48:	fb09 220b 	mla	r2, r9, fp, r2
 8003b4c:	4452      	add	r2, sl
 8003b4e:	b289      	uxth	r1, r1
 8003b50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003b54:	f84e 1b04 	str.w	r1, [lr], #4
 8003b58:	f85c 1b04 	ldr.w	r1, [ip], #4
 8003b5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003b60:	f8be 1000 	ldrh.w	r1, [lr]
 8003b64:	fb09 110a 	mla	r1, r9, sl, r1
 8003b68:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8003b6c:	4567      	cmp	r7, ip
 8003b6e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003b72:	d8e5      	bhi.n	8003b40 <__multiply+0x10c>
 8003b74:	9a01      	ldr	r2, [sp, #4]
 8003b76:	50a9      	str	r1, [r5, r2]
 8003b78:	3504      	adds	r5, #4
 8003b7a:	e799      	b.n	8003ab0 <__multiply+0x7c>
 8003b7c:	3e01      	subs	r6, #1
 8003b7e:	e79b      	b.n	8003ab8 <__multiply+0x84>
 8003b80:	080047d9 	.word	0x080047d9
 8003b84:	080047ea 	.word	0x080047ea

08003b88 <__pow5mult>:
 8003b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b8c:	4615      	mov	r5, r2
 8003b8e:	f012 0203 	ands.w	r2, r2, #3
 8003b92:	4606      	mov	r6, r0
 8003b94:	460f      	mov	r7, r1
 8003b96:	d007      	beq.n	8003ba8 <__pow5mult+0x20>
 8003b98:	4c25      	ldr	r4, [pc, #148]	; (8003c30 <__pow5mult+0xa8>)
 8003b9a:	3a01      	subs	r2, #1
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003ba2:	f7ff fe9d 	bl	80038e0 <__multadd>
 8003ba6:	4607      	mov	r7, r0
 8003ba8:	10ad      	asrs	r5, r5, #2
 8003baa:	d03d      	beq.n	8003c28 <__pow5mult+0xa0>
 8003bac:	69f4      	ldr	r4, [r6, #28]
 8003bae:	b97c      	cbnz	r4, 8003bd0 <__pow5mult+0x48>
 8003bb0:	2010      	movs	r0, #16
 8003bb2:	f7ff fd7f 	bl	80036b4 <malloc>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	61f0      	str	r0, [r6, #28]
 8003bba:	b928      	cbnz	r0, 8003bc8 <__pow5mult+0x40>
 8003bbc:	4b1d      	ldr	r3, [pc, #116]	; (8003c34 <__pow5mult+0xac>)
 8003bbe:	481e      	ldr	r0, [pc, #120]	; (8003c38 <__pow5mult+0xb0>)
 8003bc0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8003bc4:	f000 fc4c 	bl	8004460 <__assert_func>
 8003bc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003bcc:	6004      	str	r4, [r0, #0]
 8003bce:	60c4      	str	r4, [r0, #12]
 8003bd0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8003bd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003bd8:	b94c      	cbnz	r4, 8003bee <__pow5mult+0x66>
 8003bda:	f240 2171 	movw	r1, #625	; 0x271
 8003bde:	4630      	mov	r0, r6
 8003be0:	f7ff ff12 	bl	8003a08 <__i2b>
 8003be4:	2300      	movs	r3, #0
 8003be6:	f8c8 0008 	str.w	r0, [r8, #8]
 8003bea:	4604      	mov	r4, r0
 8003bec:	6003      	str	r3, [r0, #0]
 8003bee:	f04f 0900 	mov.w	r9, #0
 8003bf2:	07eb      	lsls	r3, r5, #31
 8003bf4:	d50a      	bpl.n	8003c0c <__pow5mult+0x84>
 8003bf6:	4639      	mov	r1, r7
 8003bf8:	4622      	mov	r2, r4
 8003bfa:	4630      	mov	r0, r6
 8003bfc:	f7ff ff1a 	bl	8003a34 <__multiply>
 8003c00:	4639      	mov	r1, r7
 8003c02:	4680      	mov	r8, r0
 8003c04:	4630      	mov	r0, r6
 8003c06:	f7ff fe49 	bl	800389c <_Bfree>
 8003c0a:	4647      	mov	r7, r8
 8003c0c:	106d      	asrs	r5, r5, #1
 8003c0e:	d00b      	beq.n	8003c28 <__pow5mult+0xa0>
 8003c10:	6820      	ldr	r0, [r4, #0]
 8003c12:	b938      	cbnz	r0, 8003c24 <__pow5mult+0x9c>
 8003c14:	4622      	mov	r2, r4
 8003c16:	4621      	mov	r1, r4
 8003c18:	4630      	mov	r0, r6
 8003c1a:	f7ff ff0b 	bl	8003a34 <__multiply>
 8003c1e:	6020      	str	r0, [r4, #0]
 8003c20:	f8c0 9000 	str.w	r9, [r0]
 8003c24:	4604      	mov	r4, r0
 8003c26:	e7e4      	b.n	8003bf2 <__pow5mult+0x6a>
 8003c28:	4638      	mov	r0, r7
 8003c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c2e:	bf00      	nop
 8003c30:	08004938 	.word	0x08004938
 8003c34:	0800476a 	.word	0x0800476a
 8003c38:	080047ea 	.word	0x080047ea

08003c3c <__lshift>:
 8003c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c40:	460c      	mov	r4, r1
 8003c42:	6849      	ldr	r1, [r1, #4]
 8003c44:	6923      	ldr	r3, [r4, #16]
 8003c46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003c4a:	68a3      	ldr	r3, [r4, #8]
 8003c4c:	4607      	mov	r7, r0
 8003c4e:	4691      	mov	r9, r2
 8003c50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003c54:	f108 0601 	add.w	r6, r8, #1
 8003c58:	42b3      	cmp	r3, r6
 8003c5a:	db0b      	blt.n	8003c74 <__lshift+0x38>
 8003c5c:	4638      	mov	r0, r7
 8003c5e:	f7ff fddd 	bl	800381c <_Balloc>
 8003c62:	4605      	mov	r5, r0
 8003c64:	b948      	cbnz	r0, 8003c7a <__lshift+0x3e>
 8003c66:	4602      	mov	r2, r0
 8003c68:	4b28      	ldr	r3, [pc, #160]	; (8003d0c <__lshift+0xd0>)
 8003c6a:	4829      	ldr	r0, [pc, #164]	; (8003d10 <__lshift+0xd4>)
 8003c6c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8003c70:	f000 fbf6 	bl	8004460 <__assert_func>
 8003c74:	3101      	adds	r1, #1
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	e7ee      	b.n	8003c58 <__lshift+0x1c>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f100 0114 	add.w	r1, r0, #20
 8003c80:	f100 0210 	add.w	r2, r0, #16
 8003c84:	4618      	mov	r0, r3
 8003c86:	4553      	cmp	r3, sl
 8003c88:	db33      	blt.n	8003cf2 <__lshift+0xb6>
 8003c8a:	6920      	ldr	r0, [r4, #16]
 8003c8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003c90:	f104 0314 	add.w	r3, r4, #20
 8003c94:	f019 091f 	ands.w	r9, r9, #31
 8003c98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003c9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003ca0:	d02b      	beq.n	8003cfa <__lshift+0xbe>
 8003ca2:	f1c9 0e20 	rsb	lr, r9, #32
 8003ca6:	468a      	mov	sl, r1
 8003ca8:	2200      	movs	r2, #0
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	fa00 f009 	lsl.w	r0, r0, r9
 8003cb0:	4310      	orrs	r0, r2
 8003cb2:	f84a 0b04 	str.w	r0, [sl], #4
 8003cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cba:	459c      	cmp	ip, r3
 8003cbc:	fa22 f20e 	lsr.w	r2, r2, lr
 8003cc0:	d8f3      	bhi.n	8003caa <__lshift+0x6e>
 8003cc2:	ebac 0304 	sub.w	r3, ip, r4
 8003cc6:	3b15      	subs	r3, #21
 8003cc8:	f023 0303 	bic.w	r3, r3, #3
 8003ccc:	3304      	adds	r3, #4
 8003cce:	f104 0015 	add.w	r0, r4, #21
 8003cd2:	4584      	cmp	ip, r0
 8003cd4:	bf38      	it	cc
 8003cd6:	2304      	movcc	r3, #4
 8003cd8:	50ca      	str	r2, [r1, r3]
 8003cda:	b10a      	cbz	r2, 8003ce0 <__lshift+0xa4>
 8003cdc:	f108 0602 	add.w	r6, r8, #2
 8003ce0:	3e01      	subs	r6, #1
 8003ce2:	4638      	mov	r0, r7
 8003ce4:	612e      	str	r6, [r5, #16]
 8003ce6:	4621      	mov	r1, r4
 8003ce8:	f7ff fdd8 	bl	800389c <_Bfree>
 8003cec:	4628      	mov	r0, r5
 8003cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf2:	f842 0f04 	str.w	r0, [r2, #4]!
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	e7c5      	b.n	8003c86 <__lshift+0x4a>
 8003cfa:	3904      	subs	r1, #4
 8003cfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d00:	f841 2f04 	str.w	r2, [r1, #4]!
 8003d04:	459c      	cmp	ip, r3
 8003d06:	d8f9      	bhi.n	8003cfc <__lshift+0xc0>
 8003d08:	e7ea      	b.n	8003ce0 <__lshift+0xa4>
 8003d0a:	bf00      	nop
 8003d0c:	080047d9 	.word	0x080047d9
 8003d10:	080047ea 	.word	0x080047ea

08003d14 <__mcmp>:
 8003d14:	b530      	push	{r4, r5, lr}
 8003d16:	6902      	ldr	r2, [r0, #16]
 8003d18:	690c      	ldr	r4, [r1, #16]
 8003d1a:	1b12      	subs	r2, r2, r4
 8003d1c:	d10e      	bne.n	8003d3c <__mcmp+0x28>
 8003d1e:	f100 0314 	add.w	r3, r0, #20
 8003d22:	3114      	adds	r1, #20
 8003d24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8003d28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8003d2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8003d30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8003d34:	42a5      	cmp	r5, r4
 8003d36:	d003      	beq.n	8003d40 <__mcmp+0x2c>
 8003d38:	d305      	bcc.n	8003d46 <__mcmp+0x32>
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	bd30      	pop	{r4, r5, pc}
 8003d40:	4283      	cmp	r3, r0
 8003d42:	d3f3      	bcc.n	8003d2c <__mcmp+0x18>
 8003d44:	e7fa      	b.n	8003d3c <__mcmp+0x28>
 8003d46:	f04f 32ff 	mov.w	r2, #4294967295
 8003d4a:	e7f7      	b.n	8003d3c <__mcmp+0x28>

08003d4c <__mdiff>:
 8003d4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d50:	460c      	mov	r4, r1
 8003d52:	4606      	mov	r6, r0
 8003d54:	4611      	mov	r1, r2
 8003d56:	4620      	mov	r0, r4
 8003d58:	4690      	mov	r8, r2
 8003d5a:	f7ff ffdb 	bl	8003d14 <__mcmp>
 8003d5e:	1e05      	subs	r5, r0, #0
 8003d60:	d110      	bne.n	8003d84 <__mdiff+0x38>
 8003d62:	4629      	mov	r1, r5
 8003d64:	4630      	mov	r0, r6
 8003d66:	f7ff fd59 	bl	800381c <_Balloc>
 8003d6a:	b930      	cbnz	r0, 8003d7a <__mdiff+0x2e>
 8003d6c:	4b3a      	ldr	r3, [pc, #232]	; (8003e58 <__mdiff+0x10c>)
 8003d6e:	4602      	mov	r2, r0
 8003d70:	f240 2137 	movw	r1, #567	; 0x237
 8003d74:	4839      	ldr	r0, [pc, #228]	; (8003e5c <__mdiff+0x110>)
 8003d76:	f000 fb73 	bl	8004460 <__assert_func>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003d80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d84:	bfa4      	itt	ge
 8003d86:	4643      	movge	r3, r8
 8003d88:	46a0      	movge	r8, r4
 8003d8a:	4630      	mov	r0, r6
 8003d8c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003d90:	bfa6      	itte	ge
 8003d92:	461c      	movge	r4, r3
 8003d94:	2500      	movge	r5, #0
 8003d96:	2501      	movlt	r5, #1
 8003d98:	f7ff fd40 	bl	800381c <_Balloc>
 8003d9c:	b920      	cbnz	r0, 8003da8 <__mdiff+0x5c>
 8003d9e:	4b2e      	ldr	r3, [pc, #184]	; (8003e58 <__mdiff+0x10c>)
 8003da0:	4602      	mov	r2, r0
 8003da2:	f240 2145 	movw	r1, #581	; 0x245
 8003da6:	e7e5      	b.n	8003d74 <__mdiff+0x28>
 8003da8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003dac:	6926      	ldr	r6, [r4, #16]
 8003dae:	60c5      	str	r5, [r0, #12]
 8003db0:	f104 0914 	add.w	r9, r4, #20
 8003db4:	f108 0514 	add.w	r5, r8, #20
 8003db8:	f100 0e14 	add.w	lr, r0, #20
 8003dbc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8003dc0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8003dc4:	f108 0210 	add.w	r2, r8, #16
 8003dc8:	46f2      	mov	sl, lr
 8003dca:	2100      	movs	r1, #0
 8003dcc:	f859 3b04 	ldr.w	r3, [r9], #4
 8003dd0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8003dd4:	fa11 f88b 	uxtah	r8, r1, fp
 8003dd8:	b299      	uxth	r1, r3
 8003dda:	0c1b      	lsrs	r3, r3, #16
 8003ddc:	eba8 0801 	sub.w	r8, r8, r1
 8003de0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8003de4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8003de8:	fa1f f888 	uxth.w	r8, r8
 8003dec:	1419      	asrs	r1, r3, #16
 8003dee:	454e      	cmp	r6, r9
 8003df0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8003df4:	f84a 3b04 	str.w	r3, [sl], #4
 8003df8:	d8e8      	bhi.n	8003dcc <__mdiff+0x80>
 8003dfa:	1b33      	subs	r3, r6, r4
 8003dfc:	3b15      	subs	r3, #21
 8003dfe:	f023 0303 	bic.w	r3, r3, #3
 8003e02:	3304      	adds	r3, #4
 8003e04:	3415      	adds	r4, #21
 8003e06:	42a6      	cmp	r6, r4
 8003e08:	bf38      	it	cc
 8003e0a:	2304      	movcc	r3, #4
 8003e0c:	441d      	add	r5, r3
 8003e0e:	4473      	add	r3, lr
 8003e10:	469e      	mov	lr, r3
 8003e12:	462e      	mov	r6, r5
 8003e14:	4566      	cmp	r6, ip
 8003e16:	d30e      	bcc.n	8003e36 <__mdiff+0xea>
 8003e18:	f10c 0203 	add.w	r2, ip, #3
 8003e1c:	1b52      	subs	r2, r2, r5
 8003e1e:	f022 0203 	bic.w	r2, r2, #3
 8003e22:	3d03      	subs	r5, #3
 8003e24:	45ac      	cmp	ip, r5
 8003e26:	bf38      	it	cc
 8003e28:	2200      	movcc	r2, #0
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8003e30:	b17a      	cbz	r2, 8003e52 <__mdiff+0x106>
 8003e32:	6107      	str	r7, [r0, #16]
 8003e34:	e7a4      	b.n	8003d80 <__mdiff+0x34>
 8003e36:	f856 8b04 	ldr.w	r8, [r6], #4
 8003e3a:	fa11 f288 	uxtah	r2, r1, r8
 8003e3e:	1414      	asrs	r4, r2, #16
 8003e40:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8003e44:	b292      	uxth	r2, r2
 8003e46:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8003e4a:	f84e 2b04 	str.w	r2, [lr], #4
 8003e4e:	1421      	asrs	r1, r4, #16
 8003e50:	e7e0      	b.n	8003e14 <__mdiff+0xc8>
 8003e52:	3f01      	subs	r7, #1
 8003e54:	e7ea      	b.n	8003e2c <__mdiff+0xe0>
 8003e56:	bf00      	nop
 8003e58:	080047d9 	.word	0x080047d9
 8003e5c:	080047ea 	.word	0x080047ea

08003e60 <__d2b>:
 8003e60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003e64:	460f      	mov	r7, r1
 8003e66:	2101      	movs	r1, #1
 8003e68:	ec59 8b10 	vmov	r8, r9, d0
 8003e6c:	4616      	mov	r6, r2
 8003e6e:	f7ff fcd5 	bl	800381c <_Balloc>
 8003e72:	4604      	mov	r4, r0
 8003e74:	b930      	cbnz	r0, 8003e84 <__d2b+0x24>
 8003e76:	4602      	mov	r2, r0
 8003e78:	4b24      	ldr	r3, [pc, #144]	; (8003f0c <__d2b+0xac>)
 8003e7a:	4825      	ldr	r0, [pc, #148]	; (8003f10 <__d2b+0xb0>)
 8003e7c:	f240 310f 	movw	r1, #783	; 0x30f
 8003e80:	f000 faee 	bl	8004460 <__assert_func>
 8003e84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003e88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003e8c:	bb2d      	cbnz	r5, 8003eda <__d2b+0x7a>
 8003e8e:	9301      	str	r3, [sp, #4]
 8003e90:	f1b8 0300 	subs.w	r3, r8, #0
 8003e94:	d026      	beq.n	8003ee4 <__d2b+0x84>
 8003e96:	4668      	mov	r0, sp
 8003e98:	9300      	str	r3, [sp, #0]
 8003e9a:	f7ff fd87 	bl	80039ac <__lo0bits>
 8003e9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8003ea2:	b1e8      	cbz	r0, 8003ee0 <__d2b+0x80>
 8003ea4:	f1c0 0320 	rsb	r3, r0, #32
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	430b      	orrs	r3, r1
 8003eae:	40c2      	lsrs	r2, r0
 8003eb0:	6163      	str	r3, [r4, #20]
 8003eb2:	9201      	str	r2, [sp, #4]
 8003eb4:	9b01      	ldr	r3, [sp, #4]
 8003eb6:	61a3      	str	r3, [r4, #24]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	bf14      	ite	ne
 8003ebc:	2202      	movne	r2, #2
 8003ebe:	2201      	moveq	r2, #1
 8003ec0:	6122      	str	r2, [r4, #16]
 8003ec2:	b1bd      	cbz	r5, 8003ef4 <__d2b+0x94>
 8003ec4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8003ec8:	4405      	add	r5, r0
 8003eca:	603d      	str	r5, [r7, #0]
 8003ecc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003ed0:	6030      	str	r0, [r6, #0]
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	b003      	add	sp, #12
 8003ed6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003eda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ede:	e7d6      	b.n	8003e8e <__d2b+0x2e>
 8003ee0:	6161      	str	r1, [r4, #20]
 8003ee2:	e7e7      	b.n	8003eb4 <__d2b+0x54>
 8003ee4:	a801      	add	r0, sp, #4
 8003ee6:	f7ff fd61 	bl	80039ac <__lo0bits>
 8003eea:	9b01      	ldr	r3, [sp, #4]
 8003eec:	6163      	str	r3, [r4, #20]
 8003eee:	3020      	adds	r0, #32
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	e7e5      	b.n	8003ec0 <__d2b+0x60>
 8003ef4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8003ef8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003efc:	6038      	str	r0, [r7, #0]
 8003efe:	6918      	ldr	r0, [r3, #16]
 8003f00:	f7ff fd34 	bl	800396c <__hi0bits>
 8003f04:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8003f08:	e7e2      	b.n	8003ed0 <__d2b+0x70>
 8003f0a:	bf00      	nop
 8003f0c:	080047d9 	.word	0x080047d9
 8003f10:	080047ea 	.word	0x080047ea

08003f14 <__sfputc_r>:
 8003f14:	6893      	ldr	r3, [r2, #8]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	b410      	push	{r4}
 8003f1c:	6093      	str	r3, [r2, #8]
 8003f1e:	da08      	bge.n	8003f32 <__sfputc_r+0x1e>
 8003f20:	6994      	ldr	r4, [r2, #24]
 8003f22:	42a3      	cmp	r3, r4
 8003f24:	db01      	blt.n	8003f2a <__sfputc_r+0x16>
 8003f26:	290a      	cmp	r1, #10
 8003f28:	d103      	bne.n	8003f32 <__sfputc_r+0x1e>
 8003f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f2e:	f000 b9e3 	b.w	80042f8 <__swbuf_r>
 8003f32:	6813      	ldr	r3, [r2, #0]
 8003f34:	1c58      	adds	r0, r3, #1
 8003f36:	6010      	str	r0, [r2, #0]
 8003f38:	7019      	strb	r1, [r3, #0]
 8003f3a:	4608      	mov	r0, r1
 8003f3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <__sfputs_r>:
 8003f42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f44:	4606      	mov	r6, r0
 8003f46:	460f      	mov	r7, r1
 8003f48:	4614      	mov	r4, r2
 8003f4a:	18d5      	adds	r5, r2, r3
 8003f4c:	42ac      	cmp	r4, r5
 8003f4e:	d101      	bne.n	8003f54 <__sfputs_r+0x12>
 8003f50:	2000      	movs	r0, #0
 8003f52:	e007      	b.n	8003f64 <__sfputs_r+0x22>
 8003f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f58:	463a      	mov	r2, r7
 8003f5a:	4630      	mov	r0, r6
 8003f5c:	f7ff ffda 	bl	8003f14 <__sfputc_r>
 8003f60:	1c43      	adds	r3, r0, #1
 8003f62:	d1f3      	bne.n	8003f4c <__sfputs_r+0xa>
 8003f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f68 <_vfiprintf_r>:
 8003f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f6c:	460d      	mov	r5, r1
 8003f6e:	b09d      	sub	sp, #116	; 0x74
 8003f70:	4614      	mov	r4, r2
 8003f72:	4698      	mov	r8, r3
 8003f74:	4606      	mov	r6, r0
 8003f76:	b118      	cbz	r0, 8003f80 <_vfiprintf_r+0x18>
 8003f78:	6a03      	ldr	r3, [r0, #32]
 8003f7a:	b90b      	cbnz	r3, 8003f80 <_vfiprintf_r+0x18>
 8003f7c:	f7fe fbc6 	bl	800270c <__sinit>
 8003f80:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f82:	07d9      	lsls	r1, r3, #31
 8003f84:	d405      	bmi.n	8003f92 <_vfiprintf_r+0x2a>
 8003f86:	89ab      	ldrh	r3, [r5, #12]
 8003f88:	059a      	lsls	r2, r3, #22
 8003f8a:	d402      	bmi.n	8003f92 <_vfiprintf_r+0x2a>
 8003f8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f8e:	f7fe fcc6 	bl	800291e <__retarget_lock_acquire_recursive>
 8003f92:	89ab      	ldrh	r3, [r5, #12]
 8003f94:	071b      	lsls	r3, r3, #28
 8003f96:	d501      	bpl.n	8003f9c <_vfiprintf_r+0x34>
 8003f98:	692b      	ldr	r3, [r5, #16]
 8003f9a:	b99b      	cbnz	r3, 8003fc4 <_vfiprintf_r+0x5c>
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	4630      	mov	r0, r6
 8003fa0:	f000 f9e8 	bl	8004374 <__swsetup_r>
 8003fa4:	b170      	cbz	r0, 8003fc4 <_vfiprintf_r+0x5c>
 8003fa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fa8:	07dc      	lsls	r4, r3, #31
 8003faa:	d504      	bpl.n	8003fb6 <_vfiprintf_r+0x4e>
 8003fac:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb0:	b01d      	add	sp, #116	; 0x74
 8003fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fb6:	89ab      	ldrh	r3, [r5, #12]
 8003fb8:	0598      	lsls	r0, r3, #22
 8003fba:	d4f7      	bmi.n	8003fac <_vfiprintf_r+0x44>
 8003fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fbe:	f7fe fcaf 	bl	8002920 <__retarget_lock_release_recursive>
 8003fc2:	e7f3      	b.n	8003fac <_vfiprintf_r+0x44>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	9309      	str	r3, [sp, #36]	; 0x24
 8003fc8:	2320      	movs	r3, #32
 8003fca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fce:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fd2:	2330      	movs	r3, #48	; 0x30
 8003fd4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004188 <_vfiprintf_r+0x220>
 8003fd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fdc:	f04f 0901 	mov.w	r9, #1
 8003fe0:	4623      	mov	r3, r4
 8003fe2:	469a      	mov	sl, r3
 8003fe4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fe8:	b10a      	cbz	r2, 8003fee <_vfiprintf_r+0x86>
 8003fea:	2a25      	cmp	r2, #37	; 0x25
 8003fec:	d1f9      	bne.n	8003fe2 <_vfiprintf_r+0x7a>
 8003fee:	ebba 0b04 	subs.w	fp, sl, r4
 8003ff2:	d00b      	beq.n	800400c <_vfiprintf_r+0xa4>
 8003ff4:	465b      	mov	r3, fp
 8003ff6:	4622      	mov	r2, r4
 8003ff8:	4629      	mov	r1, r5
 8003ffa:	4630      	mov	r0, r6
 8003ffc:	f7ff ffa1 	bl	8003f42 <__sfputs_r>
 8004000:	3001      	adds	r0, #1
 8004002:	f000 80a9 	beq.w	8004158 <_vfiprintf_r+0x1f0>
 8004006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004008:	445a      	add	r2, fp
 800400a:	9209      	str	r2, [sp, #36]	; 0x24
 800400c:	f89a 3000 	ldrb.w	r3, [sl]
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 80a1 	beq.w	8004158 <_vfiprintf_r+0x1f0>
 8004016:	2300      	movs	r3, #0
 8004018:	f04f 32ff 	mov.w	r2, #4294967295
 800401c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004020:	f10a 0a01 	add.w	sl, sl, #1
 8004024:	9304      	str	r3, [sp, #16]
 8004026:	9307      	str	r3, [sp, #28]
 8004028:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800402c:	931a      	str	r3, [sp, #104]	; 0x68
 800402e:	4654      	mov	r4, sl
 8004030:	2205      	movs	r2, #5
 8004032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004036:	4854      	ldr	r0, [pc, #336]	; (8004188 <_vfiprintf_r+0x220>)
 8004038:	f7fc f8d2 	bl	80001e0 <memchr>
 800403c:	9a04      	ldr	r2, [sp, #16]
 800403e:	b9d8      	cbnz	r0, 8004078 <_vfiprintf_r+0x110>
 8004040:	06d1      	lsls	r1, r2, #27
 8004042:	bf44      	itt	mi
 8004044:	2320      	movmi	r3, #32
 8004046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800404a:	0713      	lsls	r3, r2, #28
 800404c:	bf44      	itt	mi
 800404e:	232b      	movmi	r3, #43	; 0x2b
 8004050:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004054:	f89a 3000 	ldrb.w	r3, [sl]
 8004058:	2b2a      	cmp	r3, #42	; 0x2a
 800405a:	d015      	beq.n	8004088 <_vfiprintf_r+0x120>
 800405c:	9a07      	ldr	r2, [sp, #28]
 800405e:	4654      	mov	r4, sl
 8004060:	2000      	movs	r0, #0
 8004062:	f04f 0c0a 	mov.w	ip, #10
 8004066:	4621      	mov	r1, r4
 8004068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800406c:	3b30      	subs	r3, #48	; 0x30
 800406e:	2b09      	cmp	r3, #9
 8004070:	d94d      	bls.n	800410e <_vfiprintf_r+0x1a6>
 8004072:	b1b0      	cbz	r0, 80040a2 <_vfiprintf_r+0x13a>
 8004074:	9207      	str	r2, [sp, #28]
 8004076:	e014      	b.n	80040a2 <_vfiprintf_r+0x13a>
 8004078:	eba0 0308 	sub.w	r3, r0, r8
 800407c:	fa09 f303 	lsl.w	r3, r9, r3
 8004080:	4313      	orrs	r3, r2
 8004082:	9304      	str	r3, [sp, #16]
 8004084:	46a2      	mov	sl, r4
 8004086:	e7d2      	b.n	800402e <_vfiprintf_r+0xc6>
 8004088:	9b03      	ldr	r3, [sp, #12]
 800408a:	1d19      	adds	r1, r3, #4
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	9103      	str	r1, [sp, #12]
 8004090:	2b00      	cmp	r3, #0
 8004092:	bfbb      	ittet	lt
 8004094:	425b      	neglt	r3, r3
 8004096:	f042 0202 	orrlt.w	r2, r2, #2
 800409a:	9307      	strge	r3, [sp, #28]
 800409c:	9307      	strlt	r3, [sp, #28]
 800409e:	bfb8      	it	lt
 80040a0:	9204      	strlt	r2, [sp, #16]
 80040a2:	7823      	ldrb	r3, [r4, #0]
 80040a4:	2b2e      	cmp	r3, #46	; 0x2e
 80040a6:	d10c      	bne.n	80040c2 <_vfiprintf_r+0x15a>
 80040a8:	7863      	ldrb	r3, [r4, #1]
 80040aa:	2b2a      	cmp	r3, #42	; 0x2a
 80040ac:	d134      	bne.n	8004118 <_vfiprintf_r+0x1b0>
 80040ae:	9b03      	ldr	r3, [sp, #12]
 80040b0:	1d1a      	adds	r2, r3, #4
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	9203      	str	r2, [sp, #12]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	bfb8      	it	lt
 80040ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80040be:	3402      	adds	r4, #2
 80040c0:	9305      	str	r3, [sp, #20]
 80040c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004198 <_vfiprintf_r+0x230>
 80040c6:	7821      	ldrb	r1, [r4, #0]
 80040c8:	2203      	movs	r2, #3
 80040ca:	4650      	mov	r0, sl
 80040cc:	f7fc f888 	bl	80001e0 <memchr>
 80040d0:	b138      	cbz	r0, 80040e2 <_vfiprintf_r+0x17a>
 80040d2:	9b04      	ldr	r3, [sp, #16]
 80040d4:	eba0 000a 	sub.w	r0, r0, sl
 80040d8:	2240      	movs	r2, #64	; 0x40
 80040da:	4082      	lsls	r2, r0
 80040dc:	4313      	orrs	r3, r2
 80040de:	3401      	adds	r4, #1
 80040e0:	9304      	str	r3, [sp, #16]
 80040e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040e6:	4829      	ldr	r0, [pc, #164]	; (800418c <_vfiprintf_r+0x224>)
 80040e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040ec:	2206      	movs	r2, #6
 80040ee:	f7fc f877 	bl	80001e0 <memchr>
 80040f2:	2800      	cmp	r0, #0
 80040f4:	d03f      	beq.n	8004176 <_vfiprintf_r+0x20e>
 80040f6:	4b26      	ldr	r3, [pc, #152]	; (8004190 <_vfiprintf_r+0x228>)
 80040f8:	bb1b      	cbnz	r3, 8004142 <_vfiprintf_r+0x1da>
 80040fa:	9b03      	ldr	r3, [sp, #12]
 80040fc:	3307      	adds	r3, #7
 80040fe:	f023 0307 	bic.w	r3, r3, #7
 8004102:	3308      	adds	r3, #8
 8004104:	9303      	str	r3, [sp, #12]
 8004106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004108:	443b      	add	r3, r7
 800410a:	9309      	str	r3, [sp, #36]	; 0x24
 800410c:	e768      	b.n	8003fe0 <_vfiprintf_r+0x78>
 800410e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004112:	460c      	mov	r4, r1
 8004114:	2001      	movs	r0, #1
 8004116:	e7a6      	b.n	8004066 <_vfiprintf_r+0xfe>
 8004118:	2300      	movs	r3, #0
 800411a:	3401      	adds	r4, #1
 800411c:	9305      	str	r3, [sp, #20]
 800411e:	4619      	mov	r1, r3
 8004120:	f04f 0c0a 	mov.w	ip, #10
 8004124:	4620      	mov	r0, r4
 8004126:	f810 2b01 	ldrb.w	r2, [r0], #1
 800412a:	3a30      	subs	r2, #48	; 0x30
 800412c:	2a09      	cmp	r2, #9
 800412e:	d903      	bls.n	8004138 <_vfiprintf_r+0x1d0>
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0c6      	beq.n	80040c2 <_vfiprintf_r+0x15a>
 8004134:	9105      	str	r1, [sp, #20]
 8004136:	e7c4      	b.n	80040c2 <_vfiprintf_r+0x15a>
 8004138:	fb0c 2101 	mla	r1, ip, r1, r2
 800413c:	4604      	mov	r4, r0
 800413e:	2301      	movs	r3, #1
 8004140:	e7f0      	b.n	8004124 <_vfiprintf_r+0x1bc>
 8004142:	ab03      	add	r3, sp, #12
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	462a      	mov	r2, r5
 8004148:	4b12      	ldr	r3, [pc, #72]	; (8004194 <_vfiprintf_r+0x22c>)
 800414a:	a904      	add	r1, sp, #16
 800414c:	4630      	mov	r0, r6
 800414e:	f7fd fe8b 	bl	8001e68 <_printf_float>
 8004152:	4607      	mov	r7, r0
 8004154:	1c78      	adds	r0, r7, #1
 8004156:	d1d6      	bne.n	8004106 <_vfiprintf_r+0x19e>
 8004158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800415a:	07d9      	lsls	r1, r3, #31
 800415c:	d405      	bmi.n	800416a <_vfiprintf_r+0x202>
 800415e:	89ab      	ldrh	r3, [r5, #12]
 8004160:	059a      	lsls	r2, r3, #22
 8004162:	d402      	bmi.n	800416a <_vfiprintf_r+0x202>
 8004164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004166:	f7fe fbdb 	bl	8002920 <__retarget_lock_release_recursive>
 800416a:	89ab      	ldrh	r3, [r5, #12]
 800416c:	065b      	lsls	r3, r3, #25
 800416e:	f53f af1d 	bmi.w	8003fac <_vfiprintf_r+0x44>
 8004172:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004174:	e71c      	b.n	8003fb0 <_vfiprintf_r+0x48>
 8004176:	ab03      	add	r3, sp, #12
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	462a      	mov	r2, r5
 800417c:	4b05      	ldr	r3, [pc, #20]	; (8004194 <_vfiprintf_r+0x22c>)
 800417e:	a904      	add	r1, sp, #16
 8004180:	4630      	mov	r0, r6
 8004182:	f7fe f915 	bl	80023b0 <_printf_i>
 8004186:	e7e4      	b.n	8004152 <_vfiprintf_r+0x1ea>
 8004188:	08004944 	.word	0x08004944
 800418c:	0800494e 	.word	0x0800494e
 8004190:	08001e69 	.word	0x08001e69
 8004194:	08003f43 	.word	0x08003f43
 8004198:	0800494a 	.word	0x0800494a

0800419c <__sflush_r>:
 800419c:	898a      	ldrh	r2, [r1, #12]
 800419e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041a2:	4605      	mov	r5, r0
 80041a4:	0710      	lsls	r0, r2, #28
 80041a6:	460c      	mov	r4, r1
 80041a8:	d458      	bmi.n	800425c <__sflush_r+0xc0>
 80041aa:	684b      	ldr	r3, [r1, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	dc05      	bgt.n	80041bc <__sflush_r+0x20>
 80041b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	dc02      	bgt.n	80041bc <__sflush_r+0x20>
 80041b6:	2000      	movs	r0, #0
 80041b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041be:	2e00      	cmp	r6, #0
 80041c0:	d0f9      	beq.n	80041b6 <__sflush_r+0x1a>
 80041c2:	2300      	movs	r3, #0
 80041c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80041c8:	682f      	ldr	r7, [r5, #0]
 80041ca:	6a21      	ldr	r1, [r4, #32]
 80041cc:	602b      	str	r3, [r5, #0]
 80041ce:	d032      	beq.n	8004236 <__sflush_r+0x9a>
 80041d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80041d2:	89a3      	ldrh	r3, [r4, #12]
 80041d4:	075a      	lsls	r2, r3, #29
 80041d6:	d505      	bpl.n	80041e4 <__sflush_r+0x48>
 80041d8:	6863      	ldr	r3, [r4, #4]
 80041da:	1ac0      	subs	r0, r0, r3
 80041dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041de:	b10b      	cbz	r3, 80041e4 <__sflush_r+0x48>
 80041e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041e2:	1ac0      	subs	r0, r0, r3
 80041e4:	2300      	movs	r3, #0
 80041e6:	4602      	mov	r2, r0
 80041e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041ea:	6a21      	ldr	r1, [r4, #32]
 80041ec:	4628      	mov	r0, r5
 80041ee:	47b0      	blx	r6
 80041f0:	1c43      	adds	r3, r0, #1
 80041f2:	89a3      	ldrh	r3, [r4, #12]
 80041f4:	d106      	bne.n	8004204 <__sflush_r+0x68>
 80041f6:	6829      	ldr	r1, [r5, #0]
 80041f8:	291d      	cmp	r1, #29
 80041fa:	d82b      	bhi.n	8004254 <__sflush_r+0xb8>
 80041fc:	4a29      	ldr	r2, [pc, #164]	; (80042a4 <__sflush_r+0x108>)
 80041fe:	410a      	asrs	r2, r1
 8004200:	07d6      	lsls	r6, r2, #31
 8004202:	d427      	bmi.n	8004254 <__sflush_r+0xb8>
 8004204:	2200      	movs	r2, #0
 8004206:	6062      	str	r2, [r4, #4]
 8004208:	04d9      	lsls	r1, r3, #19
 800420a:	6922      	ldr	r2, [r4, #16]
 800420c:	6022      	str	r2, [r4, #0]
 800420e:	d504      	bpl.n	800421a <__sflush_r+0x7e>
 8004210:	1c42      	adds	r2, r0, #1
 8004212:	d101      	bne.n	8004218 <__sflush_r+0x7c>
 8004214:	682b      	ldr	r3, [r5, #0]
 8004216:	b903      	cbnz	r3, 800421a <__sflush_r+0x7e>
 8004218:	6560      	str	r0, [r4, #84]	; 0x54
 800421a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800421c:	602f      	str	r7, [r5, #0]
 800421e:	2900      	cmp	r1, #0
 8004220:	d0c9      	beq.n	80041b6 <__sflush_r+0x1a>
 8004222:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004226:	4299      	cmp	r1, r3
 8004228:	d002      	beq.n	8004230 <__sflush_r+0x94>
 800422a:	4628      	mov	r0, r5
 800422c:	f7ff f9f6 	bl	800361c <_free_r>
 8004230:	2000      	movs	r0, #0
 8004232:	6360      	str	r0, [r4, #52]	; 0x34
 8004234:	e7c0      	b.n	80041b8 <__sflush_r+0x1c>
 8004236:	2301      	movs	r3, #1
 8004238:	4628      	mov	r0, r5
 800423a:	47b0      	blx	r6
 800423c:	1c41      	adds	r1, r0, #1
 800423e:	d1c8      	bne.n	80041d2 <__sflush_r+0x36>
 8004240:	682b      	ldr	r3, [r5, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0c5      	beq.n	80041d2 <__sflush_r+0x36>
 8004246:	2b1d      	cmp	r3, #29
 8004248:	d001      	beq.n	800424e <__sflush_r+0xb2>
 800424a:	2b16      	cmp	r3, #22
 800424c:	d101      	bne.n	8004252 <__sflush_r+0xb6>
 800424e:	602f      	str	r7, [r5, #0]
 8004250:	e7b1      	b.n	80041b6 <__sflush_r+0x1a>
 8004252:	89a3      	ldrh	r3, [r4, #12]
 8004254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004258:	81a3      	strh	r3, [r4, #12]
 800425a:	e7ad      	b.n	80041b8 <__sflush_r+0x1c>
 800425c:	690f      	ldr	r7, [r1, #16]
 800425e:	2f00      	cmp	r7, #0
 8004260:	d0a9      	beq.n	80041b6 <__sflush_r+0x1a>
 8004262:	0793      	lsls	r3, r2, #30
 8004264:	680e      	ldr	r6, [r1, #0]
 8004266:	bf08      	it	eq
 8004268:	694b      	ldreq	r3, [r1, #20]
 800426a:	600f      	str	r7, [r1, #0]
 800426c:	bf18      	it	ne
 800426e:	2300      	movne	r3, #0
 8004270:	eba6 0807 	sub.w	r8, r6, r7
 8004274:	608b      	str	r3, [r1, #8]
 8004276:	f1b8 0f00 	cmp.w	r8, #0
 800427a:	dd9c      	ble.n	80041b6 <__sflush_r+0x1a>
 800427c:	6a21      	ldr	r1, [r4, #32]
 800427e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004280:	4643      	mov	r3, r8
 8004282:	463a      	mov	r2, r7
 8004284:	4628      	mov	r0, r5
 8004286:	47b0      	blx	r6
 8004288:	2800      	cmp	r0, #0
 800428a:	dc06      	bgt.n	800429a <__sflush_r+0xfe>
 800428c:	89a3      	ldrh	r3, [r4, #12]
 800428e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004292:	81a3      	strh	r3, [r4, #12]
 8004294:	f04f 30ff 	mov.w	r0, #4294967295
 8004298:	e78e      	b.n	80041b8 <__sflush_r+0x1c>
 800429a:	4407      	add	r7, r0
 800429c:	eba8 0800 	sub.w	r8, r8, r0
 80042a0:	e7e9      	b.n	8004276 <__sflush_r+0xda>
 80042a2:	bf00      	nop
 80042a4:	dfbffffe 	.word	0xdfbffffe

080042a8 <_fflush_r>:
 80042a8:	b538      	push	{r3, r4, r5, lr}
 80042aa:	690b      	ldr	r3, [r1, #16]
 80042ac:	4605      	mov	r5, r0
 80042ae:	460c      	mov	r4, r1
 80042b0:	b913      	cbnz	r3, 80042b8 <_fflush_r+0x10>
 80042b2:	2500      	movs	r5, #0
 80042b4:	4628      	mov	r0, r5
 80042b6:	bd38      	pop	{r3, r4, r5, pc}
 80042b8:	b118      	cbz	r0, 80042c2 <_fflush_r+0x1a>
 80042ba:	6a03      	ldr	r3, [r0, #32]
 80042bc:	b90b      	cbnz	r3, 80042c2 <_fflush_r+0x1a>
 80042be:	f7fe fa25 	bl	800270c <__sinit>
 80042c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f3      	beq.n	80042b2 <_fflush_r+0xa>
 80042ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80042cc:	07d0      	lsls	r0, r2, #31
 80042ce:	d404      	bmi.n	80042da <_fflush_r+0x32>
 80042d0:	0599      	lsls	r1, r3, #22
 80042d2:	d402      	bmi.n	80042da <_fflush_r+0x32>
 80042d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042d6:	f7fe fb22 	bl	800291e <__retarget_lock_acquire_recursive>
 80042da:	4628      	mov	r0, r5
 80042dc:	4621      	mov	r1, r4
 80042de:	f7ff ff5d 	bl	800419c <__sflush_r>
 80042e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042e4:	07da      	lsls	r2, r3, #31
 80042e6:	4605      	mov	r5, r0
 80042e8:	d4e4      	bmi.n	80042b4 <_fflush_r+0xc>
 80042ea:	89a3      	ldrh	r3, [r4, #12]
 80042ec:	059b      	lsls	r3, r3, #22
 80042ee:	d4e1      	bmi.n	80042b4 <_fflush_r+0xc>
 80042f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042f2:	f7fe fb15 	bl	8002920 <__retarget_lock_release_recursive>
 80042f6:	e7dd      	b.n	80042b4 <_fflush_r+0xc>

080042f8 <__swbuf_r>:
 80042f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fa:	460e      	mov	r6, r1
 80042fc:	4614      	mov	r4, r2
 80042fe:	4605      	mov	r5, r0
 8004300:	b118      	cbz	r0, 800430a <__swbuf_r+0x12>
 8004302:	6a03      	ldr	r3, [r0, #32]
 8004304:	b90b      	cbnz	r3, 800430a <__swbuf_r+0x12>
 8004306:	f7fe fa01 	bl	800270c <__sinit>
 800430a:	69a3      	ldr	r3, [r4, #24]
 800430c:	60a3      	str	r3, [r4, #8]
 800430e:	89a3      	ldrh	r3, [r4, #12]
 8004310:	071a      	lsls	r2, r3, #28
 8004312:	d525      	bpl.n	8004360 <__swbuf_r+0x68>
 8004314:	6923      	ldr	r3, [r4, #16]
 8004316:	b31b      	cbz	r3, 8004360 <__swbuf_r+0x68>
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	6922      	ldr	r2, [r4, #16]
 800431c:	1a98      	subs	r0, r3, r2
 800431e:	6963      	ldr	r3, [r4, #20]
 8004320:	b2f6      	uxtb	r6, r6
 8004322:	4283      	cmp	r3, r0
 8004324:	4637      	mov	r7, r6
 8004326:	dc04      	bgt.n	8004332 <__swbuf_r+0x3a>
 8004328:	4621      	mov	r1, r4
 800432a:	4628      	mov	r0, r5
 800432c:	f7ff ffbc 	bl	80042a8 <_fflush_r>
 8004330:	b9e0      	cbnz	r0, 800436c <__swbuf_r+0x74>
 8004332:	68a3      	ldr	r3, [r4, #8]
 8004334:	3b01      	subs	r3, #1
 8004336:	60a3      	str	r3, [r4, #8]
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	6022      	str	r2, [r4, #0]
 800433e:	701e      	strb	r6, [r3, #0]
 8004340:	6962      	ldr	r2, [r4, #20]
 8004342:	1c43      	adds	r3, r0, #1
 8004344:	429a      	cmp	r2, r3
 8004346:	d004      	beq.n	8004352 <__swbuf_r+0x5a>
 8004348:	89a3      	ldrh	r3, [r4, #12]
 800434a:	07db      	lsls	r3, r3, #31
 800434c:	d506      	bpl.n	800435c <__swbuf_r+0x64>
 800434e:	2e0a      	cmp	r6, #10
 8004350:	d104      	bne.n	800435c <__swbuf_r+0x64>
 8004352:	4621      	mov	r1, r4
 8004354:	4628      	mov	r0, r5
 8004356:	f7ff ffa7 	bl	80042a8 <_fflush_r>
 800435a:	b938      	cbnz	r0, 800436c <__swbuf_r+0x74>
 800435c:	4638      	mov	r0, r7
 800435e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004360:	4621      	mov	r1, r4
 8004362:	4628      	mov	r0, r5
 8004364:	f000 f806 	bl	8004374 <__swsetup_r>
 8004368:	2800      	cmp	r0, #0
 800436a:	d0d5      	beq.n	8004318 <__swbuf_r+0x20>
 800436c:	f04f 37ff 	mov.w	r7, #4294967295
 8004370:	e7f4      	b.n	800435c <__swbuf_r+0x64>
	...

08004374 <__swsetup_r>:
 8004374:	b538      	push	{r3, r4, r5, lr}
 8004376:	4b2a      	ldr	r3, [pc, #168]	; (8004420 <__swsetup_r+0xac>)
 8004378:	4605      	mov	r5, r0
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	460c      	mov	r4, r1
 800437e:	b118      	cbz	r0, 8004388 <__swsetup_r+0x14>
 8004380:	6a03      	ldr	r3, [r0, #32]
 8004382:	b90b      	cbnz	r3, 8004388 <__swsetup_r+0x14>
 8004384:	f7fe f9c2 	bl	800270c <__sinit>
 8004388:	89a3      	ldrh	r3, [r4, #12]
 800438a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800438e:	0718      	lsls	r0, r3, #28
 8004390:	d422      	bmi.n	80043d8 <__swsetup_r+0x64>
 8004392:	06d9      	lsls	r1, r3, #27
 8004394:	d407      	bmi.n	80043a6 <__swsetup_r+0x32>
 8004396:	2309      	movs	r3, #9
 8004398:	602b      	str	r3, [r5, #0]
 800439a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800439e:	81a3      	strh	r3, [r4, #12]
 80043a0:	f04f 30ff 	mov.w	r0, #4294967295
 80043a4:	e034      	b.n	8004410 <__swsetup_r+0x9c>
 80043a6:	0758      	lsls	r0, r3, #29
 80043a8:	d512      	bpl.n	80043d0 <__swsetup_r+0x5c>
 80043aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043ac:	b141      	cbz	r1, 80043c0 <__swsetup_r+0x4c>
 80043ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043b2:	4299      	cmp	r1, r3
 80043b4:	d002      	beq.n	80043bc <__swsetup_r+0x48>
 80043b6:	4628      	mov	r0, r5
 80043b8:	f7ff f930 	bl	800361c <_free_r>
 80043bc:	2300      	movs	r3, #0
 80043be:	6363      	str	r3, [r4, #52]	; 0x34
 80043c0:	89a3      	ldrh	r3, [r4, #12]
 80043c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80043c6:	81a3      	strh	r3, [r4, #12]
 80043c8:	2300      	movs	r3, #0
 80043ca:	6063      	str	r3, [r4, #4]
 80043cc:	6923      	ldr	r3, [r4, #16]
 80043ce:	6023      	str	r3, [r4, #0]
 80043d0:	89a3      	ldrh	r3, [r4, #12]
 80043d2:	f043 0308 	orr.w	r3, r3, #8
 80043d6:	81a3      	strh	r3, [r4, #12]
 80043d8:	6923      	ldr	r3, [r4, #16]
 80043da:	b94b      	cbnz	r3, 80043f0 <__swsetup_r+0x7c>
 80043dc:	89a3      	ldrh	r3, [r4, #12]
 80043de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80043e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e6:	d003      	beq.n	80043f0 <__swsetup_r+0x7c>
 80043e8:	4621      	mov	r1, r4
 80043ea:	4628      	mov	r0, r5
 80043ec:	f000 f8c4 	bl	8004578 <__smakebuf_r>
 80043f0:	89a0      	ldrh	r0, [r4, #12]
 80043f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80043f6:	f010 0301 	ands.w	r3, r0, #1
 80043fa:	d00a      	beq.n	8004412 <__swsetup_r+0x9e>
 80043fc:	2300      	movs	r3, #0
 80043fe:	60a3      	str	r3, [r4, #8]
 8004400:	6963      	ldr	r3, [r4, #20]
 8004402:	425b      	negs	r3, r3
 8004404:	61a3      	str	r3, [r4, #24]
 8004406:	6923      	ldr	r3, [r4, #16]
 8004408:	b943      	cbnz	r3, 800441c <__swsetup_r+0xa8>
 800440a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800440e:	d1c4      	bne.n	800439a <__swsetup_r+0x26>
 8004410:	bd38      	pop	{r3, r4, r5, pc}
 8004412:	0781      	lsls	r1, r0, #30
 8004414:	bf58      	it	pl
 8004416:	6963      	ldrpl	r3, [r4, #20]
 8004418:	60a3      	str	r3, [r4, #8]
 800441a:	e7f4      	b.n	8004406 <__swsetup_r+0x92>
 800441c:	2000      	movs	r0, #0
 800441e:	e7f7      	b.n	8004410 <__swsetup_r+0x9c>
 8004420:	2000005c 	.word	0x2000005c

08004424 <_sbrk_r>:
 8004424:	b538      	push	{r3, r4, r5, lr}
 8004426:	4d06      	ldr	r5, [pc, #24]	; (8004440 <_sbrk_r+0x1c>)
 8004428:	2300      	movs	r3, #0
 800442a:	4604      	mov	r4, r0
 800442c:	4608      	mov	r0, r1
 800442e:	602b      	str	r3, [r5, #0]
 8004430:	f7fd fae2 	bl	80019f8 <_sbrk>
 8004434:	1c43      	adds	r3, r0, #1
 8004436:	d102      	bne.n	800443e <_sbrk_r+0x1a>
 8004438:	682b      	ldr	r3, [r5, #0]
 800443a:	b103      	cbz	r3, 800443e <_sbrk_r+0x1a>
 800443c:	6023      	str	r3, [r4, #0]
 800443e:	bd38      	pop	{r3, r4, r5, pc}
 8004440:	2000032c 	.word	0x2000032c

08004444 <memcpy>:
 8004444:	440a      	add	r2, r1
 8004446:	4291      	cmp	r1, r2
 8004448:	f100 33ff 	add.w	r3, r0, #4294967295
 800444c:	d100      	bne.n	8004450 <memcpy+0xc>
 800444e:	4770      	bx	lr
 8004450:	b510      	push	{r4, lr}
 8004452:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004456:	f803 4f01 	strb.w	r4, [r3, #1]!
 800445a:	4291      	cmp	r1, r2
 800445c:	d1f9      	bne.n	8004452 <memcpy+0xe>
 800445e:	bd10      	pop	{r4, pc}

08004460 <__assert_func>:
 8004460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004462:	4614      	mov	r4, r2
 8004464:	461a      	mov	r2, r3
 8004466:	4b09      	ldr	r3, [pc, #36]	; (800448c <__assert_func+0x2c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4605      	mov	r5, r0
 800446c:	68d8      	ldr	r0, [r3, #12]
 800446e:	b14c      	cbz	r4, 8004484 <__assert_func+0x24>
 8004470:	4b07      	ldr	r3, [pc, #28]	; (8004490 <__assert_func+0x30>)
 8004472:	9100      	str	r1, [sp, #0]
 8004474:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004478:	4906      	ldr	r1, [pc, #24]	; (8004494 <__assert_func+0x34>)
 800447a:	462b      	mov	r3, r5
 800447c:	f000 f844 	bl	8004508 <fiprintf>
 8004480:	f000 f8d8 	bl	8004634 <abort>
 8004484:	4b04      	ldr	r3, [pc, #16]	; (8004498 <__assert_func+0x38>)
 8004486:	461c      	mov	r4, r3
 8004488:	e7f3      	b.n	8004472 <__assert_func+0x12>
 800448a:	bf00      	nop
 800448c:	2000005c 	.word	0x2000005c
 8004490:	0800495f 	.word	0x0800495f
 8004494:	0800496c 	.word	0x0800496c
 8004498:	0800499a 	.word	0x0800499a

0800449c <_calloc_r>:
 800449c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800449e:	fba1 2402 	umull	r2, r4, r1, r2
 80044a2:	b94c      	cbnz	r4, 80044b8 <_calloc_r+0x1c>
 80044a4:	4611      	mov	r1, r2
 80044a6:	9201      	str	r2, [sp, #4]
 80044a8:	f7ff f92c 	bl	8003704 <_malloc_r>
 80044ac:	9a01      	ldr	r2, [sp, #4]
 80044ae:	4605      	mov	r5, r0
 80044b0:	b930      	cbnz	r0, 80044c0 <_calloc_r+0x24>
 80044b2:	4628      	mov	r0, r5
 80044b4:	b003      	add	sp, #12
 80044b6:	bd30      	pop	{r4, r5, pc}
 80044b8:	220c      	movs	r2, #12
 80044ba:	6002      	str	r2, [r0, #0]
 80044bc:	2500      	movs	r5, #0
 80044be:	e7f8      	b.n	80044b2 <_calloc_r+0x16>
 80044c0:	4621      	mov	r1, r4
 80044c2:	f7fe f9ae 	bl	8002822 <memset>
 80044c6:	e7f4      	b.n	80044b2 <_calloc_r+0x16>

080044c8 <__ascii_mbtowc>:
 80044c8:	b082      	sub	sp, #8
 80044ca:	b901      	cbnz	r1, 80044ce <__ascii_mbtowc+0x6>
 80044cc:	a901      	add	r1, sp, #4
 80044ce:	b142      	cbz	r2, 80044e2 <__ascii_mbtowc+0x1a>
 80044d0:	b14b      	cbz	r3, 80044e6 <__ascii_mbtowc+0x1e>
 80044d2:	7813      	ldrb	r3, [r2, #0]
 80044d4:	600b      	str	r3, [r1, #0]
 80044d6:	7812      	ldrb	r2, [r2, #0]
 80044d8:	1e10      	subs	r0, r2, #0
 80044da:	bf18      	it	ne
 80044dc:	2001      	movne	r0, #1
 80044de:	b002      	add	sp, #8
 80044e0:	4770      	bx	lr
 80044e2:	4610      	mov	r0, r2
 80044e4:	e7fb      	b.n	80044de <__ascii_mbtowc+0x16>
 80044e6:	f06f 0001 	mvn.w	r0, #1
 80044ea:	e7f8      	b.n	80044de <__ascii_mbtowc+0x16>

080044ec <__ascii_wctomb>:
 80044ec:	b149      	cbz	r1, 8004502 <__ascii_wctomb+0x16>
 80044ee:	2aff      	cmp	r2, #255	; 0xff
 80044f0:	bf85      	ittet	hi
 80044f2:	238a      	movhi	r3, #138	; 0x8a
 80044f4:	6003      	strhi	r3, [r0, #0]
 80044f6:	700a      	strbls	r2, [r1, #0]
 80044f8:	f04f 30ff 	movhi.w	r0, #4294967295
 80044fc:	bf98      	it	ls
 80044fe:	2001      	movls	r0, #1
 8004500:	4770      	bx	lr
 8004502:	4608      	mov	r0, r1
 8004504:	4770      	bx	lr
	...

08004508 <fiprintf>:
 8004508:	b40e      	push	{r1, r2, r3}
 800450a:	b503      	push	{r0, r1, lr}
 800450c:	4601      	mov	r1, r0
 800450e:	ab03      	add	r3, sp, #12
 8004510:	4805      	ldr	r0, [pc, #20]	; (8004528 <fiprintf+0x20>)
 8004512:	f853 2b04 	ldr.w	r2, [r3], #4
 8004516:	6800      	ldr	r0, [r0, #0]
 8004518:	9301      	str	r3, [sp, #4]
 800451a:	f7ff fd25 	bl	8003f68 <_vfiprintf_r>
 800451e:	b002      	add	sp, #8
 8004520:	f85d eb04 	ldr.w	lr, [sp], #4
 8004524:	b003      	add	sp, #12
 8004526:	4770      	bx	lr
 8004528:	2000005c 	.word	0x2000005c

0800452c <__swhatbuf_r>:
 800452c:	b570      	push	{r4, r5, r6, lr}
 800452e:	460c      	mov	r4, r1
 8004530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004534:	2900      	cmp	r1, #0
 8004536:	b096      	sub	sp, #88	; 0x58
 8004538:	4615      	mov	r5, r2
 800453a:	461e      	mov	r6, r3
 800453c:	da0d      	bge.n	800455a <__swhatbuf_r+0x2e>
 800453e:	89a3      	ldrh	r3, [r4, #12]
 8004540:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004544:	f04f 0100 	mov.w	r1, #0
 8004548:	bf0c      	ite	eq
 800454a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800454e:	2340      	movne	r3, #64	; 0x40
 8004550:	2000      	movs	r0, #0
 8004552:	6031      	str	r1, [r6, #0]
 8004554:	602b      	str	r3, [r5, #0]
 8004556:	b016      	add	sp, #88	; 0x58
 8004558:	bd70      	pop	{r4, r5, r6, pc}
 800455a:	466a      	mov	r2, sp
 800455c:	f000 f848 	bl	80045f0 <_fstat_r>
 8004560:	2800      	cmp	r0, #0
 8004562:	dbec      	blt.n	800453e <__swhatbuf_r+0x12>
 8004564:	9901      	ldr	r1, [sp, #4]
 8004566:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800456a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800456e:	4259      	negs	r1, r3
 8004570:	4159      	adcs	r1, r3
 8004572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004576:	e7eb      	b.n	8004550 <__swhatbuf_r+0x24>

08004578 <__smakebuf_r>:
 8004578:	898b      	ldrh	r3, [r1, #12]
 800457a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800457c:	079d      	lsls	r5, r3, #30
 800457e:	4606      	mov	r6, r0
 8004580:	460c      	mov	r4, r1
 8004582:	d507      	bpl.n	8004594 <__smakebuf_r+0x1c>
 8004584:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004588:	6023      	str	r3, [r4, #0]
 800458a:	6123      	str	r3, [r4, #16]
 800458c:	2301      	movs	r3, #1
 800458e:	6163      	str	r3, [r4, #20]
 8004590:	b002      	add	sp, #8
 8004592:	bd70      	pop	{r4, r5, r6, pc}
 8004594:	ab01      	add	r3, sp, #4
 8004596:	466a      	mov	r2, sp
 8004598:	f7ff ffc8 	bl	800452c <__swhatbuf_r>
 800459c:	9900      	ldr	r1, [sp, #0]
 800459e:	4605      	mov	r5, r0
 80045a0:	4630      	mov	r0, r6
 80045a2:	f7ff f8af 	bl	8003704 <_malloc_r>
 80045a6:	b948      	cbnz	r0, 80045bc <__smakebuf_r+0x44>
 80045a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045ac:	059a      	lsls	r2, r3, #22
 80045ae:	d4ef      	bmi.n	8004590 <__smakebuf_r+0x18>
 80045b0:	f023 0303 	bic.w	r3, r3, #3
 80045b4:	f043 0302 	orr.w	r3, r3, #2
 80045b8:	81a3      	strh	r3, [r4, #12]
 80045ba:	e7e3      	b.n	8004584 <__smakebuf_r+0xc>
 80045bc:	89a3      	ldrh	r3, [r4, #12]
 80045be:	6020      	str	r0, [r4, #0]
 80045c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c4:	81a3      	strh	r3, [r4, #12]
 80045c6:	9b00      	ldr	r3, [sp, #0]
 80045c8:	6163      	str	r3, [r4, #20]
 80045ca:	9b01      	ldr	r3, [sp, #4]
 80045cc:	6120      	str	r0, [r4, #16]
 80045ce:	b15b      	cbz	r3, 80045e8 <__smakebuf_r+0x70>
 80045d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045d4:	4630      	mov	r0, r6
 80045d6:	f000 f81d 	bl	8004614 <_isatty_r>
 80045da:	b128      	cbz	r0, 80045e8 <__smakebuf_r+0x70>
 80045dc:	89a3      	ldrh	r3, [r4, #12]
 80045de:	f023 0303 	bic.w	r3, r3, #3
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	81a3      	strh	r3, [r4, #12]
 80045e8:	89a3      	ldrh	r3, [r4, #12]
 80045ea:	431d      	orrs	r5, r3
 80045ec:	81a5      	strh	r5, [r4, #12]
 80045ee:	e7cf      	b.n	8004590 <__smakebuf_r+0x18>

080045f0 <_fstat_r>:
 80045f0:	b538      	push	{r3, r4, r5, lr}
 80045f2:	4d07      	ldr	r5, [pc, #28]	; (8004610 <_fstat_r+0x20>)
 80045f4:	2300      	movs	r3, #0
 80045f6:	4604      	mov	r4, r0
 80045f8:	4608      	mov	r0, r1
 80045fa:	4611      	mov	r1, r2
 80045fc:	602b      	str	r3, [r5, #0]
 80045fe:	f7fd f9d2 	bl	80019a6 <_fstat>
 8004602:	1c43      	adds	r3, r0, #1
 8004604:	d102      	bne.n	800460c <_fstat_r+0x1c>
 8004606:	682b      	ldr	r3, [r5, #0]
 8004608:	b103      	cbz	r3, 800460c <_fstat_r+0x1c>
 800460a:	6023      	str	r3, [r4, #0]
 800460c:	bd38      	pop	{r3, r4, r5, pc}
 800460e:	bf00      	nop
 8004610:	2000032c 	.word	0x2000032c

08004614 <_isatty_r>:
 8004614:	b538      	push	{r3, r4, r5, lr}
 8004616:	4d06      	ldr	r5, [pc, #24]	; (8004630 <_isatty_r+0x1c>)
 8004618:	2300      	movs	r3, #0
 800461a:	4604      	mov	r4, r0
 800461c:	4608      	mov	r0, r1
 800461e:	602b      	str	r3, [r5, #0]
 8004620:	f7fd f9d1 	bl	80019c6 <_isatty>
 8004624:	1c43      	adds	r3, r0, #1
 8004626:	d102      	bne.n	800462e <_isatty_r+0x1a>
 8004628:	682b      	ldr	r3, [r5, #0]
 800462a:	b103      	cbz	r3, 800462e <_isatty_r+0x1a>
 800462c:	6023      	str	r3, [r4, #0]
 800462e:	bd38      	pop	{r3, r4, r5, pc}
 8004630:	2000032c 	.word	0x2000032c

08004634 <abort>:
 8004634:	b508      	push	{r3, lr}
 8004636:	2006      	movs	r0, #6
 8004638:	f000 f82c 	bl	8004694 <raise>
 800463c:	2001      	movs	r0, #1
 800463e:	f7fd f963 	bl	8001908 <_exit>

08004642 <_raise_r>:
 8004642:	291f      	cmp	r1, #31
 8004644:	b538      	push	{r3, r4, r5, lr}
 8004646:	4604      	mov	r4, r0
 8004648:	460d      	mov	r5, r1
 800464a:	d904      	bls.n	8004656 <_raise_r+0x14>
 800464c:	2316      	movs	r3, #22
 800464e:	6003      	str	r3, [r0, #0]
 8004650:	f04f 30ff 	mov.w	r0, #4294967295
 8004654:	bd38      	pop	{r3, r4, r5, pc}
 8004656:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8004658:	b112      	cbz	r2, 8004660 <_raise_r+0x1e>
 800465a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800465e:	b94b      	cbnz	r3, 8004674 <_raise_r+0x32>
 8004660:	4620      	mov	r0, r4
 8004662:	f000 f831 	bl	80046c8 <_getpid_r>
 8004666:	462a      	mov	r2, r5
 8004668:	4601      	mov	r1, r0
 800466a:	4620      	mov	r0, r4
 800466c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004670:	f000 b818 	b.w	80046a4 <_kill_r>
 8004674:	2b01      	cmp	r3, #1
 8004676:	d00a      	beq.n	800468e <_raise_r+0x4c>
 8004678:	1c59      	adds	r1, r3, #1
 800467a:	d103      	bne.n	8004684 <_raise_r+0x42>
 800467c:	2316      	movs	r3, #22
 800467e:	6003      	str	r3, [r0, #0]
 8004680:	2001      	movs	r0, #1
 8004682:	e7e7      	b.n	8004654 <_raise_r+0x12>
 8004684:	2400      	movs	r4, #0
 8004686:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800468a:	4628      	mov	r0, r5
 800468c:	4798      	blx	r3
 800468e:	2000      	movs	r0, #0
 8004690:	e7e0      	b.n	8004654 <_raise_r+0x12>
	...

08004694 <raise>:
 8004694:	4b02      	ldr	r3, [pc, #8]	; (80046a0 <raise+0xc>)
 8004696:	4601      	mov	r1, r0
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	f7ff bfd2 	b.w	8004642 <_raise_r>
 800469e:	bf00      	nop
 80046a0:	2000005c 	.word	0x2000005c

080046a4 <_kill_r>:
 80046a4:	b538      	push	{r3, r4, r5, lr}
 80046a6:	4d07      	ldr	r5, [pc, #28]	; (80046c4 <_kill_r+0x20>)
 80046a8:	2300      	movs	r3, #0
 80046aa:	4604      	mov	r4, r0
 80046ac:	4608      	mov	r0, r1
 80046ae:	4611      	mov	r1, r2
 80046b0:	602b      	str	r3, [r5, #0]
 80046b2:	f7fd f919 	bl	80018e8 <_kill>
 80046b6:	1c43      	adds	r3, r0, #1
 80046b8:	d102      	bne.n	80046c0 <_kill_r+0x1c>
 80046ba:	682b      	ldr	r3, [r5, #0]
 80046bc:	b103      	cbz	r3, 80046c0 <_kill_r+0x1c>
 80046be:	6023      	str	r3, [r4, #0]
 80046c0:	bd38      	pop	{r3, r4, r5, pc}
 80046c2:	bf00      	nop
 80046c4:	2000032c 	.word	0x2000032c

080046c8 <_getpid_r>:
 80046c8:	f7fd b906 	b.w	80018d8 <_getpid>

080046cc <_init>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	bf00      	nop
 80046d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d2:	bc08      	pop	{r3}
 80046d4:	469e      	mov	lr, r3
 80046d6:	4770      	bx	lr

080046d8 <_fini>:
 80046d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046da:	bf00      	nop
 80046dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046de:	bc08      	pop	{r3}
 80046e0:	469e      	mov	lr, r3
 80046e2:	4770      	bx	lr
