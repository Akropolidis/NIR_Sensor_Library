
AS7265x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002618  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  080027b8  080027b8  000127b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002814  08002814  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08002814  08002814  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002814  08002814  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002814  08002814  00012814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002818  08002818  00012818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800281c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  20000060  0800287c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  0800287c  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000032f9  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d86  00000000  00000000  000233cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000530  00000000  00000000  00024158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003cf  00000000  00000000  00024688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010332  00000000  00000000  00024a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000492b  00000000  00000000  00034d89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000565f6  00000000  00000000  000396b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001b20  00000000  00000000  0008fcac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000917cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080027a0 	.word	0x080027a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	080027a0 	.word	0x080027a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <begin>:


//Initializes the sensor with basic settings
//Returns false if sensor is not detected
bool begin()
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
	SysTick_Init();
 8000a72:	f000 fe25 	bl	80016c0 <SysTick_Init>
	uart2_rxtx_init();
 8000a76:	f000 fe83 	bl	8001780 <uart2_rxtx_init>
	I2C1_Init();
 8000a7a:	f000 fb01 	bl	8001080 <I2C1_Init>

	if (isConnected() == false)
 8000a7e:	f000 f83f 	bl	8000b00 <isConnected>
 8000a82:	4603      	mov	r3, r0
 8000a84:	f083 0301 	eor.w	r3, r3, #1
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <begin+0x26>
	{
		return false; //Check for sensor presence
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e031      	b.n	8000af6 <begin+0x8a>
	}

	uint8_t value = virtualReadRegister(AS7265X_DEV_SELECT_CONTROL);
 8000a92:	204f      	movs	r0, #79	; 0x4f
 8000a94:	f000 f8da 	bl	8000c4c <virtualReadRegister>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	71fb      	strb	r3, [r7, #7]
	if ((value & 0b00110000) == 0) //Check for presence of first and second slave devices
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d101      	bne.n	8000aaa <begin+0x3e>
	{
		return false;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e025      	b.n	8000af6 <begin+0x8a>
	}

	setLEDCurrent(AS7265X_LED_CURRENT_LIMIT_12_5MA, AS7265x_LED_WHITE);
 8000aaa:	2100      	movs	r1, #0
 8000aac:	2000      	movs	r0, #0
 8000aae:	f000 fa77 	bl	8000fa0 <setLEDCurrent>
	setLEDCurrent(AS7265X_LED_CURRENT_LIMIT_12_5MA, AS7265x_LED_IR);
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f000 fa73 	bl	8000fa0 <setLEDCurrent>
	setLEDCurrent(AS7265X_LED_CURRENT_LIMIT_12_5MA, AS7265x_LED_UV);
 8000aba:	2102      	movs	r1, #2
 8000abc:	2000      	movs	r0, #0
 8000abe:	f000 fa6f 	bl	8000fa0 <setLEDCurrent>

	disableLED(AS7265x_LED_WHITE); //Turn off bulb to avoid heating sensor
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f000 f9d2 	bl	8000e6c <disableLED>
	disableLED(AS7265x_LED_IR);
 8000ac8:	2001      	movs	r0, #1
 8000aca:	f000 f9cf 	bl	8000e6c <disableLED>
	disableLED(AS7265x_LED_UV);
 8000ace:	2002      	movs	r0, #2
 8000ad0:	f000 f9cc 	bl	8000e6c <disableLED>

	setIndicatorCurrent(AS7265X_INDICATOR_CURRENT_LIMIT_2MA);
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f000 fa8e 	bl	8000ff6 <setIndicatorCurrent>
	enableIndicator();
 8000ada:	f000 f9af 	bl	8000e3c <enableIndicator>

	setIntegrationCycles(49); //50 * 2.78ms = 139ms. 0 to 255 is valid.
 8000ade:	2031      	movs	r0, #49	; 0x31
 8000ae0:	f000 fa2a 	bl	8000f38 <setIntegrationCycles>
	//If you use Mode 2 or 3 (all the colors) then integration time is double. 139*2 = 278ms between readings.

	setGain(AS7265X_GAIN_64X);
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	f000 f9dc 	bl	8000ea2 <setGain>

	setMeasurementMode(AS7265X_MEASUREMENT_MODE_6CHAN_CONTINUOUS);
 8000aea:	2002      	movs	r0, #2
 8000aec:	f000 f9fd 	bl	8000eea <setMeasurementMode>

	enableInterrupt();
 8000af0:	f000 faa8 	bl	8001044 <enableInterrupt>

	return true;
 8000af4:	2301      	movs	r3, #1
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
	...

08000b00 <isConnected>:

//Returns TRUE if the device sends an ACK indicating it is connected
bool isConnected()
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
	uint32_t timeout = 1000; //Timeout to connect set to 1000ms
 8000b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0a:	60fb      	str	r3, [r7, #12]
	unsigned long startTime = getMillis();
 8000b0c:	f000 fe0a 	bl	8001724 <getMillis>
 8000b10:	60b8      	str	r0, [r7, #8]

	while ((getMillis() - startTime) < timeout)
 8000b12:	e035      	b.n	8000b80 <isConnected+0x80>
	{
		volatile int tmp;

		/* Wait until bus not busy */
		while (I2C1->SR2 & (SR2_BUSY)){}
 8000b14:	bf00      	nop
 8000b16:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <isConnected+0x9c>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d1f9      	bne.n	8000b16 <isConnected+0x16>

		/* Generate start condition */
		I2C1->CR1 |= CR1_START;
 8000b22:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <isConnected+0x9c>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a1d      	ldr	r2, [pc, #116]	; (8000b9c <isConnected+0x9c>)
 8000b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2c:	6013      	str	r3, [r2, #0]

		/* Wait until start condition flag is set */
		while (!(I2C1->SR1 & (SR1_SB))){}
 8000b2e:	bf00      	nop
 8000b30:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <isConnected+0x9c>)
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	f003 0301 	and.w	r3, r3, #1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0f9      	beq.n	8000b30 <isConnected+0x30>

		/* Transmit slave address + Write (0) */
		I2C1->DR = AS7265X_WRITE_ADDR;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	; (8000b9c <isConnected+0x9c>)
 8000b3e:	2292      	movs	r2, #146	; 0x92
 8000b40:	611a      	str	r2, [r3, #16]

		/* Wait until address flag is set */
		while (!(I2C1->SR1 & (SR1_ADDR))){}
 8000b42:	bf00      	nop
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <isConnected+0x9c>)
 8000b46:	695b      	ldr	r3, [r3, #20]
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d0f9      	beq.n	8000b44 <isConnected+0x44>

		/* Clear address flag by reading SR2 register */
		tmp = I2C1->SR2;
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <isConnected+0x9c>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	607b      	str	r3, [r7, #4]

		if (I2C1->SR1 & SR1_AF)
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <isConnected+0x9c>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d006      	beq.n	8000b70 <isConnected+0x70>
		{
			//No ACK received, address not acknowledged
			I2C1->CR1 |= CR1_STOP;  // Send STOP condition
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <isConnected+0x9c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a0d      	ldr	r2, [pc, #52]	; (8000b9c <isConnected+0x9c>)
 8000b68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b6c:	6013      	str	r3, [r2, #0]
			continue;
 8000b6e:	e007      	b.n	8000b80 <isConnected+0x80>
		}

		//Address acknowledged, device is connected
		I2C1->CR1 |= CR1_STOP; // Send STOP condition
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <isConnected+0x9c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a09      	ldr	r2, [pc, #36]	; (8000b9c <isConnected+0x9c>)
 8000b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b7a:	6013      	str	r3, [r2, #0]
		return true;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	e008      	b.n	8000b92 <isConnected+0x92>
	while ((getMillis() - startTime) < timeout)
 8000b80:	f000 fdd0 	bl	8001724 <getMillis>
 8000b84:	4602      	mov	r2, r0
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d8c1      	bhi.n	8000b14 <isConnected+0x14>
	}
	//Timeout to connect has expired, hence device is not connected
	return false;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3710      	adds	r7, #16
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40005400 	.word	0x40005400

08000ba0 <readRegister>:

//Reads from a given location from the AS726x
static uint8_t readRegister(uint8_t addr)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
	char data = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	73fb      	strb	r3, [r7, #15]
	I2C1_byteRead(AS7265X_ADDR, addr, &data);
 8000bae:	f107 020f 	add.w	r2, r7, #15
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	2049      	movs	r0, #73	; 0x49
 8000bb8:	f000 fb06 	bl	80011c8 <I2C1_byteRead>
	return data;
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <writeRegister>:

//Write a value to a given location on the AS726x
static void writeRegister(uint8_t addr, uint8_t val)
{
 8000bc6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	460a      	mov	r2, r1
 8000bd2:	71fb      	strb	r3, [r7, #7]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	71bb      	strb	r3, [r7, #6]
 8000bd8:	466b      	mov	r3, sp
 8000bda:	461e      	mov	r6, r3
	uint8_t bufferSize = 1;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	75fb      	strb	r3, [r7, #23]
	char data[bufferSize];
 8000be0:	7df9      	ldrb	r1, [r7, #23]
 8000be2:	460b      	mov	r3, r1
 8000be4:	3b01      	subs	r3, #1
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	b2cb      	uxtb	r3, r1
 8000bea:	2200      	movs	r2, #0
 8000bec:	4698      	mov	r8, r3
 8000bee:	4691      	mov	r9, r2
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000bfc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c04:	b2cb      	uxtb	r3, r1
 8000c06:	2200      	movs	r2, #0
 8000c08:	461c      	mov	r4, r3
 8000c0a:	4615      	mov	r5, r2
 8000c0c:	f04f 0200 	mov.w	r2, #0
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	00eb      	lsls	r3, r5, #3
 8000c16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c1a:	00e2      	lsls	r2, r4, #3
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	3307      	adds	r3, #7
 8000c20:	08db      	lsrs	r3, r3, #3
 8000c22:	00db      	lsls	r3, r3, #3
 8000c24:	ebad 0d03 	sub.w	sp, sp, r3
 8000c28:	466b      	mov	r3, sp
 8000c2a:	3300      	adds	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]

	data[0] = val;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	79ba      	ldrb	r2, [r7, #6]
 8000c32:	701a      	strb	r2, [r3, #0]
	I2C1_burstWrite(AS7265X_ADDR, addr, bufferSize, data);
 8000c34:	7dfa      	ldrb	r2, [r7, #23]
 8000c36:	79f9      	ldrb	r1, [r7, #7]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	2049      	movs	r0, #73	; 0x49
 8000c3c:	f000 fb3e 	bl	80012bc <I2C1_burstWrite>
 8000c40:	46b5      	mov	sp, r6
}
 8000c42:	bf00      	nop
 8000c44:	371c      	adds	r7, #28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000c4c <virtualReadRegister>:

//Read from a virtual register on the AS7265x
static uint8_t virtualReadRegister(uint8_t virtualAddr)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
	volatile uint8_t status, data;

	//Do a preliminary check of the read register
	status = readRegister(AS7265X_STATUS_REG);
 8000c56:	2000      	movs	r0, #0
 8000c58:	f7ff ffa2 	bl	8000ba0 <readRegister>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	72fb      	strb	r3, [r7, #11]
	if((status & AS7265X_RX_VALID) != 0) //Data byte available in READ register
 8000c60:	7afb      	ldrb	r3, [r7, #11]
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d002      	beq.n	8000c72 <virtualReadRegister+0x26>
	{
		readRegister(AS7265X_READ_REG); //Read the byte but do nothing
 8000c6c:	2002      	movs	r0, #2
 8000c6e:	f7ff ff97 	bl	8000ba0 <readRegister>
	}

	//Wait for WRITE flag to clear
	unsigned long startTime = getMillis();
 8000c72:	f000 fd57 	bl	8001724 <getMillis>
 8000c76:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if((getMillis() - startTime) > maxWaitTime)
 8000c78:	f000 fd54 	bl	8001724 <getMillis>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	4a25      	ldr	r2, [pc, #148]	; (8000d18 <virtualReadRegister+0xcc>)
 8000c84:	8812      	ldrh	r2, [r2, #0]
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d904      	bls.n	8000c94 <virtualReadRegister+0x48>
		{
			printf("Sensor failed to respond \n\r");
 8000c8a:	4824      	ldr	r0, [pc, #144]	; (8000d1c <virtualReadRegister+0xd0>)
 8000c8c:	f000 ff12 	bl	8001ab4 <iprintf>
			return 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	e03c      	b.n	8000d0e <virtualReadRegister+0xc2>
		}
		//Read slave I2C status to see if the read register is ready
		status = readRegister(AS7265X_STATUS_REG);
 8000c94:	2000      	movs	r0, #0
 8000c96:	f7ff ff83 	bl	8000ba0 <readRegister>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	72fb      	strb	r3, [r7, #11]
		if((status & AS7265X_TX_VALID) == 0) //New data may be written to WRITE register
 8000c9e:	7afb      	ldrb	r3, [r7, #11]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <virtualReadRegister+0x66>
		{
			break;
		}
		delayMillis(AS7265X_POLLING_DELAY); //Delay for 5 ms before checking for virtual register changes
 8000caa:	2005      	movs	r0, #5
 8000cac:	f000 fd46 	bl	800173c <delayMillis>
		if((getMillis() - startTime) > maxWaitTime)
 8000cb0:	e7e2      	b.n	8000c78 <virtualReadRegister+0x2c>
			break;
 8000cb2:	bf00      	nop
	}

	//Send the virtual register address (disabling bit 7 to indicate a read).
	writeRegister(AS7265X_WRITE_REG, virtualAddr);
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f7ff ff84 	bl	8000bc6 <writeRegister>

	//Wait for READ flag to be set
	startTime = getMillis();
 8000cbe:	f000 fd31 	bl	8001724 <getMillis>
 8000cc2:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if((getMillis() - startTime) > maxWaitTime)
 8000cc4:	f000 fd2e 	bl	8001724 <getMillis>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <virtualReadRegister+0xcc>)
 8000cd0:	8812      	ldrh	r2, [r2, #0]
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d904      	bls.n	8000ce0 <virtualReadRegister+0x94>
		{
			printf("Sensor failed to respond \n\r");
 8000cd6:	4811      	ldr	r0, [pc, #68]	; (8000d1c <virtualReadRegister+0xd0>)
 8000cd8:	f000 feec 	bl	8001ab4 <iprintf>
			return 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	e016      	b.n	8000d0e <virtualReadRegister+0xc2>
		}
		//Read slave I2C status to see if the read register is ready
		status = readRegister(AS7265X_STATUS_REG);
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f7ff ff5d 	bl	8000ba0 <readRegister>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	72fb      	strb	r3, [r7, #11]
		if((status & AS7265X_RX_VALID) != 0) //Data byte available in READ register
 8000cea:	7afb      	ldrb	r3, [r7, #11]
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d103      	bne.n	8000cfe <virtualReadRegister+0xb2>
		{
			break;
		}
		delayMillis(AS7265X_POLLING_DELAY); //Delay for 5 ms before checking for virtual register changes
 8000cf6:	2005      	movs	r0, #5
 8000cf8:	f000 fd20 	bl	800173c <delayMillis>
		if((getMillis() - startTime) > maxWaitTime)
 8000cfc:	e7e2      	b.n	8000cc4 <virtualReadRegister+0x78>
			break;
 8000cfe:	bf00      	nop
	}

	data = readRegister(AS7265X_READ_REG);
 8000d00:	2002      	movs	r0, #2
 8000d02:	f7ff ff4d 	bl	8000ba0 <readRegister>
 8000d06:	4603      	mov	r3, r0
 8000d08:	72bb      	strb	r3, [r7, #10]
	return data;
 8000d0a:	7abb      	ldrb	r3, [r7, #10]
 8000d0c:	b2db      	uxtb	r3, r3
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	080027b8 	.word	0x080027b8

08000d20 <virtualWriteRegister>:

//Write to a virtual register in the AS7265x
static void virtualWriteRegister(uint8_t virtualAddr, uint8_t dataToWrite)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	460a      	mov	r2, r1
 8000d2a:	71fb      	strb	r3, [r7, #7]
 8000d2c:	4613      	mov	r3, r2
 8000d2e:	71bb      	strb	r3, [r7, #6]
	volatile uint8_t status;

	//Wait for WRITE register to be empty
	unsigned long startTime = getMillis();
 8000d30:	f000 fcf8 	bl	8001724 <getMillis>
 8000d34:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if((getMillis() - startTime) > maxWaitTime)
 8000d36:	f000 fcf5 	bl	8001724 <getMillis>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	4a23      	ldr	r2, [pc, #140]	; (8000dd0 <virtualWriteRegister+0xb0>)
 8000d42:	8812      	ldrh	r2, [r2, #0]
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d903      	bls.n	8000d50 <virtualWriteRegister+0x30>
		{
			printf("Sensor failed to respond \n\r");
 8000d48:	4822      	ldr	r0, [pc, #136]	; (8000dd4 <virtualWriteRegister+0xb4>)
 8000d4a:	f000 feb3 	bl	8001ab4 <iprintf>
			return;
 8000d4e:	e03c      	b.n	8000dca <virtualWriteRegister+0xaa>
		}
		//Read slave I2C status to see if the write register is ready
		status = readRegister(AS7265X_STATUS_REG);
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff ff25 	bl	8000ba0 <readRegister>
 8000d56:	4603      	mov	r3, r0
 8000d58:	72fb      	strb	r3, [r7, #11]
		if((status & AS7265X_TX_VALID) == 0) //New data may be written to WRITE register
 8000d5a:	7afb      	ldrb	r3, [r7, #11]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d003      	beq.n	8000d6e <virtualWriteRegister+0x4e>
		{
			break;
		}
		delayMillis(AS7265X_POLLING_DELAY); //Delay for 5 ms before checking for virtual register changes
 8000d66:	2005      	movs	r0, #5
 8000d68:	f000 fce8 	bl	800173c <delayMillis>
		if((getMillis() - startTime) > maxWaitTime)
 8000d6c:	e7e3      	b.n	8000d36 <virtualWriteRegister+0x16>
			break;
 8000d6e:	bf00      	nop
	}

	//Send the virtual register address (enabling bit 7 to indicate a write).
	writeRegister(AS7265X_WRITE_REG, (virtualAddr | 1 << 7));
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	4619      	mov	r1, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f7ff ff23 	bl	8000bc6 <writeRegister>

	//Wait for WRITE register to be empty
	startTime = getMillis();
 8000d80:	f000 fcd0 	bl	8001724 <getMillis>
 8000d84:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if((getMillis() - startTime) > maxWaitTime)
 8000d86:	f000 fccd 	bl	8001724 <getMillis>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <virtualWriteRegister+0xb0>)
 8000d92:	8812      	ldrh	r2, [r2, #0]
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d903      	bls.n	8000da0 <virtualWriteRegister+0x80>
		{
			printf("Sensor failed to respond \n\r");
 8000d98:	480e      	ldr	r0, [pc, #56]	; (8000dd4 <virtualWriteRegister+0xb4>)
 8000d9a:	f000 fe8b 	bl	8001ab4 <iprintf>
			return;
 8000d9e:	e014      	b.n	8000dca <virtualWriteRegister+0xaa>
		}
		//Read slave I2C status to see if the write register is ready
		status = readRegister(AS7265X_STATUS_REG);
 8000da0:	2000      	movs	r0, #0
 8000da2:	f7ff fefd 	bl	8000ba0 <readRegister>
 8000da6:	4603      	mov	r3, r0
 8000da8:	72fb      	strb	r3, [r7, #11]
		if((status & AS7265X_TX_VALID) == 0) //New data may be written to WRITE register
 8000daa:	7afb      	ldrb	r3, [r7, #11]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <virtualWriteRegister+0x9e>
		{
			break;
		}
		delayMillis(AS7265X_POLLING_DELAY); //Delay for 5 ms before checking for virtual register changes
 8000db6:	2005      	movs	r0, #5
 8000db8:	f000 fcc0 	bl	800173c <delayMillis>
		if((getMillis() - startTime) > maxWaitTime)
 8000dbc:	e7e3      	b.n	8000d86 <virtualWriteRegister+0x66>
			break;
 8000dbe:	bf00      	nop
	}

	//Send the data to complete the operation
	writeRegister(AS7265X_WRITE_REG, dataToWrite);
 8000dc0:	79bb      	ldrb	r3, [r7, #6]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f7ff fefe 	bl	8000bc6 <writeRegister>
}
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	080027b8 	.word	0x080027b8

08000dd8 <selectDevice>:

//As we read various registers we have to point at the master or first/second slave
static void selectDevice(uint8_t device)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
	virtualWriteRegister(AS7265X_DEV_SELECT_CONTROL, device);
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	4619      	mov	r1, r3
 8000de6:	204f      	movs	r0, #79	; 0x4f
 8000de8:	f7ff ff9a 	bl	8000d20 <virtualWriteRegister>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <getChannel>:
  return myFloat;
}

//Get the 16-bit raw values stored in the high and low registers of each channel
static uint16_t getChannel(uint8_t channelRegister, uint8_t device)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	460a      	mov	r2, r1
 8000dfe:	71fb      	strb	r3, [r7, #7]
 8000e00:	4613      	mov	r3, r2
 8000e02:	71bb      	strb	r3, [r7, #6]
	selectDevice(device);
 8000e04:	79bb      	ldrb	r3, [r7, #6]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ffe6 	bl	8000dd8 <selectDevice>

	uint16_t colorData = virtualReadRegister(channelRegister) << 8; //XXXXXXXX-00000000 High uint8_t
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff1c 	bl	8000c4c <virtualReadRegister>
 8000e14:	4603      	mov	r3, r0
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	81fb      	strh	r3, [r7, #14]
	colorData |= virtualReadRegister(channelRegister + 1); //Low uint8_t
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ff12 	bl	8000c4c <virtualReadRegister>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	89fb      	ldrh	r3, [r7, #14]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	81fb      	strh	r3, [r7, #14]
	return colorData;
 8000e32:	89fb      	ldrh	r3, [r7, #14]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <enableIndicator>:
	return average;
}

//Enable the on-board indicator LED on the NIR master device, Blue status LED
void enableIndicator()
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
	selectDevice(AS72651_NIR);
 8000e42:	2000      	movs	r0, #0
 8000e44:	f7ff ffc8 	bl	8000dd8 <selectDevice>

	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read existing state
 8000e48:	2007      	movs	r0, #7
 8000e4a:	f7ff feff 	bl	8000c4c <virtualReadRegister>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
	value |= (1U << 0); //Set ENABLE LED_INT bit (bit 0)
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	71fb      	strb	r3, [r7, #7]
	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to enable the LED indicator
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	2007      	movs	r0, #7
 8000e60:	f7ff ff5e 	bl	8000d20 <virtualWriteRegister>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <disableLED>:
	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to enable the LED driver
}

//Disable the LED or bulb on a given device
void disableLED(uint8_t device)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	71fb      	strb	r3, [r7, #7]
	selectDevice(device);
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ffad 	bl	8000dd8 <selectDevice>

	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read existing state
 8000e7e:	2007      	movs	r0, #7
 8000e80:	f7ff fee4 	bl	8000c4c <virtualReadRegister>
 8000e84:	4603      	mov	r3, r0
 8000e86:	73fb      	strb	r3, [r7, #15]
	value &= ~(1U << 3); //Reset ENABLE LED_DRV bit (bit 3)
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	f023 0308 	bic.w	r3, r3, #8
 8000e8e:	73fb      	strb	r3, [r7, #15]
	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to disable the LED driver
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	4619      	mov	r1, r3
 8000e94:	2007      	movs	r0, #7
 8000e96:	f7ff ff43 	bl	8000d20 <virtualWriteRegister>
}
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <setGain>:
//Gain 0: 1x
//Gain 1: 3.7x (Default)
//Gain 2: 16x
//Gain 3: 64x
void setGain(uint8_t gain)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b084      	sub	sp, #16
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	71fb      	strb	r3, [r7, #7]
	if (gain > AS7265X_GAIN_64X)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d901      	bls.n	8000eb6 <setGain+0x14>
	{
		gain = AS7265X_GAIN_64X;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	71fb      	strb	r3, [r7, #7]
	}
	uint8_t value = virtualReadRegister(AS7265X_CONFIG); //Read existing state
 8000eb6:	2004      	movs	r0, #4
 8000eb8:	f7ff fec8 	bl	8000c4c <virtualReadRegister>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	73fb      	strb	r3, [r7, #15]
	value &= 0b11001111; //Clear GAIN bits
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ec6:	73fb      	strb	r3, [r7, #15]
	value |= (gain << 4); //Set GAIN bits with user's choice
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	011b      	lsls	r3, r3, #4
 8000ecc:	b25a      	sxtb	r2, r3
 8000ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	b25b      	sxtb	r3, r3
 8000ed6:	73fb      	strb	r3, [r7, #15]

	virtualWriteRegister(AS7265X_CONFIG, value); //Write value to config register
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	4619      	mov	r1, r3
 8000edc:	2004      	movs	r0, #4
 8000ede:	f7ff ff1f 	bl	8000d20 <virtualWriteRegister>
}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <setMeasurementMode>:
//Mode 0: 4 channels
//Mode 1: 4 channels
//Mode 2: All 6 channels (Default)
//Mode 3: One shot operation of mode 2
void setMeasurementMode(uint8_t mode)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b084      	sub	sp, #16
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	71fb      	strb	r3, [r7, #7]
	if (mode > AS7265X_MEASUREMENT_MODE_6CHAN_ONE_SHOT)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d901      	bls.n	8000efe <setMeasurementMode+0x14>
	{
		mode = AS7265X_MEASUREMENT_MODE_6CHAN_ONE_SHOT; //Limit mode to 2 bits
 8000efa:	2303      	movs	r3, #3
 8000efc:	71fb      	strb	r3, [r7, #7]
	}
	uint8_t value = virtualReadRegister(AS7265X_CONFIG); //Read existing state
 8000efe:	2004      	movs	r0, #4
 8000f00:	f7ff fea4 	bl	8000c4c <virtualReadRegister>
 8000f04:	4603      	mov	r3, r0
 8000f06:	73fb      	strb	r3, [r7, #15]
	value &= 0b11110011; //Clear BANK bits
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
 8000f0a:	f023 030c 	bic.w	r3, r3, #12
 8000f0e:	73fb      	strb	r3, [r7, #15]
	value |= (mode << 2); //Set BANK bits with user's choice
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	b25a      	sxtb	r2, r3
 8000f16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	b25b      	sxtb	r3, r3
 8000f1e:	73fb      	strb	r3, [r7, #15]

	virtualWriteRegister(AS7265X_CONFIG, value); //Write value to config register
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	4619      	mov	r1, r3
 8000f24:	2004      	movs	r0, #4
 8000f26:	f7ff fefb 	bl	8000d20 <virtualWriteRegister>
}
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	0000      	movs	r0, r0
 8000f34:	0000      	movs	r0, r0
	...

08000f38 <setIntegrationCycles>:
//Set the Integration cycles with a byte from 0 - 255 to set the sensitivity
//Ever 2.78ms of integration increases the resolution of the ADC by 2^10 = 1024 counts
//Longer integration time means a more accurate measurement
//16-bit ADC so full sensitivity scale is clamped at 2^16 = 65536
void setIntegrationCycles(uint8_t cycleValue)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
	if (cycleValue > 255)
	{
		cycleValue = 255; //Limit cycleValue to a byte 2^8 (0-255)
	}
	maxWaitTime = (int)((cycleValue + 1) * 2.78 * 1.5); //Wait for integration time + 50%
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	3301      	adds	r3, #1
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff faec 	bl	8000524 <__aeabi_i2d>
 8000f4c:	a312      	add	r3, pc, #72	; (adr r3, 8000f98 <setIntegrationCycles+0x60>)
 8000f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f52:	f7ff fb51 	bl	80005f8 <__aeabi_dmul>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	4610      	mov	r0, r2
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <setIntegrationCycles+0x58>)
 8000f64:	f7ff fb48 	bl	80005f8 <__aeabi_dmul>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f7ff fd54 	bl	8000a1c <__aeabi_d2iz>
 8000f74:	4603      	mov	r3, r0
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <setIntegrationCycles+0x5c>)
 8000f7a:	801a      	strh	r2, [r3, #0]

	virtualWriteRegister(AS7265X_INTEGRATION_TIME, cycleValue);
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	4619      	mov	r1, r3
 8000f80:	2005      	movs	r0, #5
 8000f82:	f7ff fecd 	bl	8000d20 <virtualWriteRegister>
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	3ff80000 	.word	0x3ff80000
 8000f94:	20000000 	.word	0x20000000
 8000f98:	a3d70a3d 	.word	0xa3d70a3d
 8000f9c:	40063d70 	.word	0x40063d70

08000fa0 <setLEDCurrent>:
//Current 0: 12.5mA (Default)
//Current 1: 25mA
//Current 2: 50mA
//Current 3: 100mA
void setLEDCurrent(uint8_t current, uint8_t device)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	460a      	mov	r2, r1
 8000faa:	71fb      	strb	r3, [r7, #7]
 8000fac:	4613      	mov	r3, r2
 8000fae:	71bb      	strb	r3, [r7, #6]
	selectDevice(device);
 8000fb0:	79bb      	ldrb	r3, [r7, #6]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ff10 	bl	8000dd8 <selectDevice>

	if (current > AS7265X_LED_CURRENT_LIMIT_100MA)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d901      	bls.n	8000fc2 <setLEDCurrent+0x22>
	{
		current = AS7265X_LED_CURRENT_LIMIT_100MA;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	71fb      	strb	r3, [r7, #7]
	}
	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read existing state
 8000fc2:	2007      	movs	r0, #7
 8000fc4:	f7ff fe42 	bl	8000c4c <virtualReadRegister>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	73fb      	strb	r3, [r7, #15]
	value &= 0b11001111; //Bitwise ANDing to reset LED current limit bits (bit5:4)
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000fd2:	73fb      	strb	r3, [r7, #15]
	value |= (current << 4); //Set LED current limit
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	011b      	lsls	r3, r3, #4
 8000fd8:	b25a      	sxtb	r2, r3
 8000fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b25b      	sxtb	r3, r3
 8000fe2:	73fb      	strb	r3, [r7, #15]

	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to set the LED current limit
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	2007      	movs	r0, #7
 8000fea:	f7ff fe99 	bl	8000d20 <virtualWriteRegister>
}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <setIndicatorCurrent>:
//Current 0: 1mA
//Current 1: 2mA (Default)
//Current 2: 4mA
//Current 3: 8mA
void setIndicatorCurrent(uint8_t current)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	71fb      	strb	r3, [r7, #7]
	selectDevice(AS72651_NIR);
 8001000:	2000      	movs	r0, #0
 8001002:	f7ff fee9 	bl	8000dd8 <selectDevice>

	if (current > AS7265X_INDICATOR_CURRENT_LIMIT_8MA)
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2b03      	cmp	r3, #3
 800100a:	d901      	bls.n	8001010 <setIndicatorCurrent+0x1a>
	{
		current = AS7265X_INDICATOR_CURRENT_LIMIT_8MA;
 800100c:	2303      	movs	r3, #3
 800100e:	71fb      	strb	r3, [r7, #7]
	}
	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read existing state
 8001010:	2007      	movs	r0, #7
 8001012:	f7ff fe1b 	bl	8000c4c <virtualReadRegister>
 8001016:	4603      	mov	r3, r0
 8001018:	73fb      	strb	r3, [r7, #15]
	value &= 0b11111001; //Bitwise ANDing to reset indicator current limit bits (bit2:1)
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	f023 0306 	bic.w	r3, r3, #6
 8001020:	73fb      	strb	r3, [r7, #15]
	value |= (current << 1); //Set indicator current limit
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	b25a      	sxtb	r2, r3
 8001028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102c:	4313      	orrs	r3, r2
 800102e:	b25b      	sxtb	r3, r3
 8001030:	73fb      	strb	r3, [r7, #15]

	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to set the LED indicator current limit
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	4619      	mov	r1, r3
 8001036:	2007      	movs	r0, #7
 8001038:	f7ff fe72 	bl	8000d20 <virtualWriteRegister>
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <enableInterrupt>:

//Enable interrupt pin
void enableInterrupt()
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0

	uint8_t value = virtualReadRegister(AS7265X_CONFIG); //Read existing state
 800104a:	2004      	movs	r0, #4
 800104c:	f7ff fdfe 	bl	8000c4c <virtualReadRegister>
 8001050:	4603      	mov	r3, r0
 8001052:	71fb      	strb	r3, [r7, #7]
	value |= (1U << 6); //Set INT bit (bit 6)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800105a:	71fb      	strb	r3, [r7, #7]
	virtualWriteRegister(AS7265X_CONFIG, value); //Write value to config register to enable the interrupt pin
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	4619      	mov	r1, r3
 8001060:	2004      	movs	r0, #4
 8001062:	f7ff fe5d 	bl	8000d20 <virtualWriteRegister>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <getRawI>:
uint16_t getRawH()
{
	return (getChannel(AS7265X_RAW_S_H_B, AS72652_VISIBLE));
}
uint16_t getRawI()
{
 800106e:	b580      	push	{r7, lr}
 8001070:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_T_I_C, AS72652_VISIBLE));
 8001072:	2101      	movs	r1, #1
 8001074:	200c      	movs	r0, #12
 8001076:	f7ff febd 	bl	8000df4 <getChannel>
 800107a:	4603      	mov	r3, r0
}
 800107c:	4618      	mov	r0, r3
 800107e:	bd80      	pop	{r7, pc}

08001080 <I2C1_Init>:
//#define	SR1_BTF					(1U<<2)
//#define SR1_AF					(1U<<10)


void I2C1_Init(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOB*/
	RCC->AHB1ENR |= GPIOBEN;
 8001084:	4b4d      	ldr	r3, [pc, #308]	; (80011bc <I2C1_Init+0x13c>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001088:	4a4c      	ldr	r2, [pc, #304]	; (80011bc <I2C1_Init+0x13c>)
 800108a:	f043 0302 	orr.w	r3, r3, #2
 800108e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PB6 and PB7 mode to alternate function*/
	GPIOB->MODER &= ~(1U<<12);
 8001090:	4b4b      	ldr	r3, [pc, #300]	; (80011c0 <I2C1_Init+0x140>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a4a      	ldr	r2, [pc, #296]	; (80011c0 <I2C1_Init+0x140>)
 8001096:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800109a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<13);
 800109c:	4b48      	ldr	r3, [pc, #288]	; (80011c0 <I2C1_Init+0x140>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a47      	ldr	r2, [pc, #284]	; (80011c0 <I2C1_Init+0x140>)
 80010a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010a6:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~(1U<<14);
 80010a8:	4b45      	ldr	r3, [pc, #276]	; (80011c0 <I2C1_Init+0x140>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a44      	ldr	r2, [pc, #272]	; (80011c0 <I2C1_Init+0x140>)
 80010ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80010b2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<15);
 80010b4:	4b42      	ldr	r3, [pc, #264]	; (80011c0 <I2C1_Init+0x140>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a41      	ldr	r2, [pc, #260]	; (80011c0 <I2C1_Init+0x140>)
 80010ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010be:	6013      	str	r3, [r2, #0]

	/*Set PB6 and PB7 output type to  open drain*/
	GPIOB->OTYPER |= (1U<<6);
 80010c0:	4b3f      	ldr	r3, [pc, #252]	; (80011c0 <I2C1_Init+0x140>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	4a3e      	ldr	r2, [pc, #248]	; (80011c0 <I2C1_Init+0x140>)
 80010c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ca:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (1U<<7);
 80010cc:	4b3c      	ldr	r3, [pc, #240]	; (80011c0 <I2C1_Init+0x140>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	4a3b      	ldr	r2, [pc, #236]	; (80011c0 <I2C1_Init+0x140>)
 80010d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d6:	6053      	str	r3, [r2, #4]

	/*Enable Pull-up for PB6 and PB7*/
	GPIOB->PUPDR |= (1U<<12);
 80010d8:	4b39      	ldr	r3, [pc, #228]	; (80011c0 <I2C1_Init+0x140>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	4a38      	ldr	r2, [pc, #224]	; (80011c0 <I2C1_Init+0x140>)
 80010de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010e2:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<13);
 80010e4:	4b36      	ldr	r3, [pc, #216]	; (80011c0 <I2C1_Init+0x140>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	4a35      	ldr	r2, [pc, #212]	; (80011c0 <I2C1_Init+0x140>)
 80010ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80010ee:	60d3      	str	r3, [r2, #12]

	GPIOB->PUPDR |= (1U<<14);
 80010f0:	4b33      	ldr	r3, [pc, #204]	; (80011c0 <I2C1_Init+0x140>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	4a32      	ldr	r2, [pc, #200]	; (80011c0 <I2C1_Init+0x140>)
 80010f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fa:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<15);
 80010fc:	4b30      	ldr	r3, [pc, #192]	; (80011c0 <I2C1_Init+0x140>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	4a2f      	ldr	r2, [pc, #188]	; (80011c0 <I2C1_Init+0x140>)
 8001102:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001106:	60d3      	str	r3, [r2, #12]

	/*Set PB6 and PB7 alternate function type to I2C (AF4)
	 * PB6 --> SCL
	 * PB7 --> SDA*/
	GPIOB->AFR[0] &= ~(1U<<24);
 8001108:	4b2d      	ldr	r3, [pc, #180]	; (80011c0 <I2C1_Init+0x140>)
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	4a2c      	ldr	r2, [pc, #176]	; (80011c0 <I2C1_Init+0x140>)
 800110e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001112:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<25);
 8001114:	4b2a      	ldr	r3, [pc, #168]	; (80011c0 <I2C1_Init+0x140>)
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	4a29      	ldr	r2, [pc, #164]	; (80011c0 <I2C1_Init+0x140>)
 800111a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800111e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1U<<26);
 8001120:	4b27      	ldr	r3, [pc, #156]	; (80011c0 <I2C1_Init+0x140>)
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	4a26      	ldr	r2, [pc, #152]	; (80011c0 <I2C1_Init+0x140>)
 8001126:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800112a:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<27);
 800112c:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <I2C1_Init+0x140>)
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	4a23      	ldr	r2, [pc, #140]	; (80011c0 <I2C1_Init+0x140>)
 8001132:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001136:	6213      	str	r3, [r2, #32]

	GPIOB->AFR[0] &= ~(1U<<28);
 8001138:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <I2C1_Init+0x140>)
 800113a:	6a1b      	ldr	r3, [r3, #32]
 800113c:	4a20      	ldr	r2, [pc, #128]	; (80011c0 <I2C1_Init+0x140>)
 800113e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001142:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<29);
 8001144:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <I2C1_Init+0x140>)
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	4a1d      	ldr	r2, [pc, #116]	; (80011c0 <I2C1_Init+0x140>)
 800114a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800114e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1U<<30);
 8001150:	4b1b      	ldr	r3, [pc, #108]	; (80011c0 <I2C1_Init+0x140>)
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	4a1a      	ldr	r2, [pc, #104]	; (80011c0 <I2C1_Init+0x140>)
 8001156:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800115a:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<31);
 800115c:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <I2C1_Init+0x140>)
 800115e:	6a1b      	ldr	r3, [r3, #32]
 8001160:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <I2C1_Init+0x140>)
 8001162:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001166:	6213      	str	r3, [r2, #32]

	/***Configuring I2C1***/

	/*Enable clock access to I2C1*/
	RCC->APB1ENR |= I2C1EN;
 8001168:	4b14      	ldr	r3, [pc, #80]	; (80011bc <I2C1_Init+0x13c>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	4a13      	ldr	r2, [pc, #76]	; (80011bc <I2C1_Init+0x13c>)
 800116e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001172:	6413      	str	r3, [r2, #64]	; 0x40

	/*Enter reset mode  */
	I2C1->CR1 |= (1U<<15);
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <I2C1_Init+0x144>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <I2C1_Init+0x144>)
 800117a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800117e:	6013      	str	r3, [r2, #0]

	/*Come out of reset mode  */
	I2C1->CR1 &= ~(1U<<15);
 8001180:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <I2C1_Init+0x144>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0f      	ldr	r2, [pc, #60]	; (80011c4 <I2C1_Init+0x144>)
 8001186:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800118a:	6013      	str	r3, [r2, #0]

	/*Set Peripheral clock frequency*/
	I2C1->CR2 = (1U<<4);   //16 Mhz
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <I2C1_Init+0x144>)
 800118e:	2210      	movs	r2, #16
 8001190:	605a      	str	r2, [r3, #4]
//
//	/*Set rise time */
//	I2C1->TRISE = SD_MODE_MAX_RISE_TIME; //(1000ns/(1/16MHz)+1 = 17

	/*Set I2C to fast mode, 400kHz clock */
	I2C1->CCR = 1; //Refer to ST reference manual for derivation
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <I2C1_Init+0x144>)
 8001194:	2201      	movs	r2, #1
 8001196:	61da      	str	r2, [r3, #28]
	I2C1->CCR = I2C_FAST_DUTY; //Set to Fast mode and duty cycle of 16/9
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <I2C1_Init+0x144>)
 800119a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800119e:	61da      	str	r2, [r3, #28]

	/*Set rise time */
	I2C1->TRISE = 6;//FS_MODE_MAX_RISE_TIME; //(300ns/(1/16MHz)+1 = 5.8
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <I2C1_Init+0x144>)
 80011a2:	2206      	movs	r2, #6
 80011a4:	621a      	str	r2, [r3, #32]

	/*Enable I2C1 module */
	I2C1->CR1 |= CR1_PE;
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <I2C1_Init+0x144>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <I2C1_Init+0x144>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6013      	str	r3, [r2, #0]
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020400 	.word	0x40020400
 80011c4:	40005400 	.word	0x40005400

080011c8 <I2C1_byteRead>:

void I2C1_byteRead(char saddr, char maddr, char* data) {
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	603a      	str	r2, [r7, #0]
 80011d2:	71fb      	strb	r3, [r7, #7]
 80011d4:	460b      	mov	r3, r1
 80011d6:	71bb      	strb	r3, [r7, #6]

	  volatile int tmp;

	  /* Wait until bus not busy */
	  while (I2C1->SR2 & (SR2_BUSY)){}
 80011d8:	bf00      	nop
 80011da:	4b37      	ldr	r3, [pc, #220]	; (80012b8 <I2C1_byteRead+0xf0>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f9      	bne.n	80011da <I2C1_byteRead+0x12>

	  /* Generate start condition */
	  I2C1->CR1 |= CR1_START;
 80011e6:	4b34      	ldr	r3, [pc, #208]	; (80012b8 <I2C1_byteRead+0xf0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a33      	ldr	r2, [pc, #204]	; (80012b8 <I2C1_byteRead+0xf0>)
 80011ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f0:	6013      	str	r3, [r2, #0]

	  /* Wait until start condition flag is set, note the negation */
	  /* Stay in loop if start flag is not set */
	  while (!(I2C1->SR1 & (SR1_SB))){}
 80011f2:	bf00      	nop
 80011f4:	4b30      	ldr	r3, [pc, #192]	; (80012b8 <I2C1_byteRead+0xf0>)
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0f9      	beq.n	80011f4 <I2C1_byteRead+0x2c>

	  /* Transmit slave address + Write (0) */
	  /* This slave address is sent to each slave device along with an indication to establish either read or write communication */
	  /* Yo device A, I want to write to one of your memory registers */
	  I2C1->DR = saddr << 1; // shifting the address left makes room for the R/W bit, which is 0 for write
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	005a      	lsls	r2, r3, #1
 8001204:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <I2C1_byteRead+0xf0>)
 8001206:	611a      	str	r2, [r3, #16]

	  /* Wait until address flag is set */
	  /* Each slave device compares the address from master to its own address and sends an ACK if matched */
	  /* I'm device A and of course you can write to one of my registers */
	  while (!(I2C1->SR1 & (SR1_ADDR))){}
 8001208:	bf00      	nop
 800120a:	4b2b      	ldr	r3, [pc, #172]	; (80012b8 <I2C1_byteRead+0xf0>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0f9      	beq.n	800120a <I2C1_byteRead+0x42>

	  /* Clear address flag by reading SR2 register */
	  tmp = I2C1->SR2;
 8001216:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <I2C1_byteRead+0xf0>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	60fb      	str	r3, [r7, #12]

	  /*Wait until transmitter empty */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 800121c:	bf00      	nop
 800121e:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <I2C1_byteRead+0xf0>)
 8001220:	695b      	ldr	r3, [r3, #20]
 8001222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f9      	beq.n	800121e <I2C1_byteRead+0x56>

	  /* Send register address */
	  /* Aight, here is the location I writing to read from */
	  I2C1->DR = maddr;
 800122a:	4a23      	ldr	r2, [pc, #140]	; (80012b8 <I2C1_byteRead+0xf0>)
 800122c:	79bb      	ldrb	r3, [r7, #6]
 800122e:	6113      	str	r3, [r2, #16]

	  /*Wait until transmitter empty */
	  /* No probs */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 8001230:	bf00      	nop
 8001232:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <I2C1_byteRead+0xf0>)
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123a:	2b00      	cmp	r3, #0
 800123c:	d0f9      	beq.n	8001232 <I2C1_byteRead+0x6a>

	 /* Begin actual reading process once slave device and register of interest are understood between master and slave*/
	 /*Generate restart */
	 I2C1->CR1 |= CR1_START;
 800123e:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <I2C1_byteRead+0xf0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a1d      	ldr	r2, [pc, #116]	; (80012b8 <I2C1_byteRead+0xf0>)
 8001244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001248:	6013      	str	r3, [r2, #0]

	 /* Wait until start flag is set */
	 while (!(I2C1->SR1 & SR1_SB)){}
 800124a:	bf00      	nop
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <I2C1_byteRead+0xf0>)
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	f003 0301 	and.w	r3, r3, #1
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0f9      	beq.n	800124c <I2C1_byteRead+0x84>

	 /* Transmit slave address + Read */
	 I2C1->DR = saddr << 1 | 1;
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	f043 0201 	orr.w	r2, r3, #1
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <I2C1_byteRead+0xf0>)
 8001262:	611a      	str	r2, [r3, #16]

	 /* Wait until addr flag is set */
	 while (!(I2C1->SR1 & (SR1_ADDR))){}
 8001264:	bf00      	nop
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <I2C1_byteRead+0xf0>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d0f9      	beq.n	8001266 <I2C1_byteRead+0x9e>

	 /* Clear addr flag */
	 tmp = I2C1->SR2;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <I2C1_byteRead+0xf0>)
 8001274:	699b      	ldr	r3, [r3, #24]
 8001276:	60fb      	str	r3, [r7, #12]

	 /* Disable Acknowledge */
	 I2C1->CR1 &= ~CR1_ACK;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <I2C1_byteRead+0xf0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <I2C1_byteRead+0xf0>)
 800127e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001282:	6013      	str	r3, [r2, #0]

	 /* Generate stop after data received */
	 I2C1->CR1 |= CR1_STOP;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <I2C1_byteRead+0xf0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <I2C1_byteRead+0xf0>)
 800128a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800128e:	6013      	str	r3, [r2, #0]

	 /* Wait until RXNE flag is set */
	 while (!(I2C1->SR1 & SR1_RXNE)){}
 8001290:	bf00      	nop
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <I2C1_byteRead+0xf0>)
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0f9      	beq.n	8001292 <I2C1_byteRead+0xca>

	 /* Read data from DR */
	 *data++ = I2C1->DR;
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <I2C1_byteRead+0xf0>)
 80012a0:	6919      	ldr	r1, [r3, #16]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	603a      	str	r2, [r7, #0]
 80012a8:	b2ca      	uxtb	r2, r1
 80012aa:	701a      	strb	r2, [r3, #0]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	40005400 	.word	0x40005400

080012bc <I2C1_burstWrite>:
		 }
	 }

}

void I2C1_burstWrite(char saddr, char maddr, int n, char* data) {
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60ba      	str	r2, [r7, #8]
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4603      	mov	r3, r0
 80012c8:	73fb      	strb	r3, [r7, #15]
 80012ca:	460b      	mov	r3, r1
 80012cc:	73bb      	strb	r3, [r7, #14]

	/* Temporary variable to read SR2*/
	volatile int tmp;

	/* Wait until bus not busy */
	while (I2C1->SR2 & (SR2_BUSY)){}
 80012ce:	bf00      	nop
 80012d0:	4b2a      	ldr	r3, [pc, #168]	; (800137c <I2C1_burstWrite+0xc0>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f9      	bne.n	80012d0 <I2C1_burstWrite+0x14>

	/* Generate start condition */
	I2C1->CR1 |= CR1_START;
 80012dc:	4b27      	ldr	r3, [pc, #156]	; (800137c <I2C1_burstWrite+0xc0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a26      	ldr	r2, [pc, #152]	; (800137c <I2C1_burstWrite+0xc0>)
 80012e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e6:	6013      	str	r3, [r2, #0]

	/* Wait until start condition flag is set, note the negation */
	/* Stay in loop if start flag is not set*/
	while (!(I2C1->SR1 & (SR1_SB))){}
 80012e8:	bf00      	nop
 80012ea:	4b24      	ldr	r3, [pc, #144]	; (800137c <I2C1_burstWrite+0xc0>)
 80012ec:	695b      	ldr	r3, [r3, #20]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f9      	beq.n	80012ea <I2C1_burstWrite+0x2e>

	/* Transmit slave address + Write (0) */
	/* This slave address is sent to each slave device along with an indication to establish either read or write communication*/
	/* Yo device A, I want to write to one of your memory registers */
	I2C1->DR = saddr << 1; // shifting the address left makes room for the R/W bit, which is 0 for write
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	005a      	lsls	r2, r3, #1
 80012fa:	4b20      	ldr	r3, [pc, #128]	; (800137c <I2C1_burstWrite+0xc0>)
 80012fc:	611a      	str	r2, [r3, #16]

	/* Wait until address flag is set */
	/* Each slave device compares the address from master to its own adress and sends an ACK if mathced*/
	/* I'm device A and of course you can write to one of my registers */
	while (!(I2C1->SR1 & (SR1_ADDR))){}
 80012fe:	bf00      	nop
 8001300:	4b1e      	ldr	r3, [pc, #120]	; (800137c <I2C1_burstWrite+0xc0>)
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	2b00      	cmp	r3, #0
 800130a:	d0f9      	beq.n	8001300 <I2C1_burstWrite+0x44>

	/* Clear address flag by reading SR2 register */
	tmp = I2C1->SR2;
 800130c:	4b1b      	ldr	r3, [pc, #108]	; (800137c <I2C1_burstWrite+0xc0>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	613b      	str	r3, [r7, #16]

	/*Wait until data register empty */
	while (!(I2C1->SR1 & SR1_TXE)){}
 8001312:	bf00      	nop
 8001314:	4b19      	ldr	r3, [pc, #100]	; (800137c <I2C1_burstWrite+0xc0>)
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f9      	beq.n	8001314 <I2C1_burstWrite+0x58>

	/* Send register address */
	/* aight here is the register I'm writing to write to and the value I want written */
	I2C1->DR = maddr;
 8001320:	4a16      	ldr	r2, [pc, #88]	; (800137c <I2C1_burstWrite+0xc0>)
 8001322:	7bbb      	ldrb	r3, [r7, #14]
 8001324:	6113      	str	r3, [r2, #16]

	for (int i = 0; i < n; i++) {
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	e00f      	b.n	800134c <I2C1_burstWrite+0x90>

		/*Wait until data register empty */
		while (!(I2C1->SR1 & SR1_TXE)){}
 800132c:	bf00      	nop
 800132e:	4b13      	ldr	r3, [pc, #76]	; (800137c <I2C1_burstWrite+0xc0>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0f9      	beq.n	800132e <I2C1_burstWrite+0x72>

		/* Transmit memory address */
		I2C1->DR = *data++;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	1c5a      	adds	r2, r3, #1
 800133e:	607a      	str	r2, [r7, #4]
 8001340:	781a      	ldrb	r2, [r3, #0]
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <I2C1_burstWrite+0xc0>)
 8001344:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < n; i++) {
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	3301      	adds	r3, #1
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697a      	ldr	r2, [r7, #20]
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	429a      	cmp	r2, r3
 8001352:	dbeb      	blt.n	800132c <I2C1_burstWrite+0x70>
	}
	/* Wait until transfer finished */
	while (!(I2C1->SR1 & (SR1_BTF))){}
 8001354:	bf00      	nop
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <I2C1_burstWrite+0xc0>)
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f9      	beq.n	8001356 <I2C1_burstWrite+0x9a>

	/* Generate stop */
	I2C1->CR1 |= CR1_STOP;
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <I2C1_burstWrite+0xc0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a05      	ldr	r2, [pc, #20]	; (800137c <I2C1_burstWrite+0xc0>)
 8001368:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800136c:	6013      	str	r3, [r2, #0]
}
 800136e:	bf00      	nop
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	40005400 	.word	0x40005400

08001380 <main>:
#include "stm32f4xx.h"
#include "AS7265X.h"


int main(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
	bool works = begin();
 8001386:	f7ff fb71 	bl	8000a6c <begin>
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]

	disableLED(AS7265x_LED_WHITE);
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff fd6c 	bl	8000e6c <disableLED>
	while(1)
	{
		uint8_t red = getRawI();
 8001394:	f7ff fe6b 	bl	800106e <getRawI>
 8001398:	4603      	mov	r3, r0
 800139a:	71bb      	strb	r3, [r7, #6]
		printf("Red: %d\n\r", red);
 800139c:	79bb      	ldrb	r3, [r7, #6]
 800139e:	4619      	mov	r1, r3
 80013a0:	4801      	ldr	r0, [pc, #4]	; (80013a8 <main+0x28>)
 80013a2:	f000 fb87 	bl	8001ab4 <iprintf>
	{
 80013a6:	e7f5      	b.n	8001394 <main+0x14>
 80013a8:	080027d4 	.word	0x080027d4

080013ac <exti8_callback>:
	__enable_irq();

}

static void exti8_callback(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
	long int last_state_A = GPIOA->IDR & Encoder_A_Pin8;
 80013b2:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <exti8_callback+0x84>)
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ba:	607b      	str	r3, [r7, #4]
	if ((Encoder_A_Pin8_Last == GPIO_PIN_RESET) && (last_state_A == GPIO_PIN_SET))
 80013bc:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <exti8_callback+0x88>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d11c      	bne.n	80013fe <exti8_callback+0x52>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b20      	cmp	r3, #32
 80013c8:	d119      	bne.n	80013fe <exti8_callback+0x52>
	{
		long int val_A = GPIOA->IDR & Encoder_A_Pin9;
 80013ca:	4b19      	ldr	r3, [pc, #100]	; (8001430 <exti8_callback+0x84>)
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013d2:	603b      	str	r3, [r7, #0]
		if ((val_A == GPIO_PIN_RESET) && direction_A)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d107      	bne.n	80013ea <exti8_callback+0x3e>
 80013da:	4b17      	ldr	r3, [pc, #92]	; (8001438 <exti8_callback+0x8c>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <exti8_callback+0x3e>
		{
			direction_A = 0; // Reverse
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <exti8_callback+0x8c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
 80013e8:	e009      	b.n	80013fe <exti8_callback+0x52>
		}
		else if ((val_A == GPIO_PIN_SET) && (direction_A == 0))
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	2b20      	cmp	r3, #32
 80013ee:	d106      	bne.n	80013fe <exti8_callback+0x52>
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <exti8_callback+0x8c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <exti8_callback+0x52>
		{
			direction_A = 1; // Forward
 80013f8:	4b0f      	ldr	r3, [pc, #60]	; (8001438 <exti8_callback+0x8c>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	701a      	strb	r2, [r3, #0]
		}
	}
	Encoder_A_Pin8_Last = last_state_A;
 80013fe:	4a0d      	ldr	r2, [pc, #52]	; (8001434 <exti8_callback+0x88>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6013      	str	r3, [r2, #0]

	if (!direction_A)
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <exti8_callback+0x8c>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d105      	bne.n	8001418 <exti8_callback+0x6c>
		Encoder_A_counts++;
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <exti8_callback+0x90>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	3301      	adds	r3, #1
 8001412:	4a0a      	ldr	r2, [pc, #40]	; (800143c <exti8_callback+0x90>)
 8001414:	6013      	str	r3, [r2, #0]
	else
		Encoder_A_counts--;
}
 8001416:	e004      	b.n	8001422 <exti8_callback+0x76>
		Encoder_A_counts--;
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <exti8_callback+0x90>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	3b01      	subs	r3, #1
 800141e:	4a07      	ldr	r2, [pc, #28]	; (800143c <exti8_callback+0x90>)
 8001420:	6013      	str	r3, [r2, #0]
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40020000 	.word	0x40020000
 8001434:	2000007c 	.word	0x2000007c
 8001438:	2000008c 	.word	0x2000008c
 800143c:	20000080 	.word	0x20000080

08001440 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	if((EXTI->PR & Encoder_A_Pin8)!=0) //If Pending register on Line 8 is triggered
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <EXTI9_5_IRQHandler+0x24>)
 8001446:	695b      	ldr	r3, [r3, #20]
 8001448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144c:	2b00      	cmp	r3, #0
 800144e:	d007      	beq.n	8001460 <EXTI9_5_IRQHandler+0x20>
	{
		/*Clear PR flag*/
		EXTI->PR |= Encoder_A_Pin8;
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <EXTI9_5_IRQHandler+0x24>)
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	4a03      	ldr	r2, [pc, #12]	; (8001464 <EXTI9_5_IRQHandler+0x24>)
 8001456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800145a:	6153      	str	r3, [r2, #20]

		exti8_callback();
 800145c:	f7ff ffa6 	bl	80013ac <exti8_callback>
	}

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40013c00 	.word	0x40013c00

08001468 <exti10_callback>:
	__enable_irq();

}

static void exti10_callback(void)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
	long int last_state_B = GPIOA->IDR & Encoder_B_Pin10;
 800146e:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <exti10_callback+0x84>)
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001476:	607b      	str	r3, [r7, #4]
	if ((Encoder_B_Pin10_Last == GPIO_PIN_RESET) && (last_state_B == GPIO_PIN_SET))
 8001478:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <exti10_callback+0x88>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d11c      	bne.n	80014ba <exti10_callback+0x52>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b20      	cmp	r3, #32
 8001484:	d119      	bne.n	80014ba <exti10_callback+0x52>
	{
		long int val_B = GPIOA->IDR & Encoder_B_Pin11;
 8001486:	4b19      	ldr	r3, [pc, #100]	; (80014ec <exti10_callback+0x84>)
 8001488:	691b      	ldr	r3, [r3, #16]
 800148a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800148e:	603b      	str	r3, [r7, #0]
		if ((val_B == GPIO_PIN_RESET) && direction_B)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d107      	bne.n	80014a6 <exti10_callback+0x3e>
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <exti10_callback+0x8c>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <exti10_callback+0x3e>
		{
			direction_B = 0; // Reverse
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <exti10_callback+0x8c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
 80014a4:	e009      	b.n	80014ba <exti10_callback+0x52>
		}
		else if ((val_B == GPIO_PIN_SET) && (direction_B == 0))
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	2b20      	cmp	r3, #32
 80014aa:	d106      	bne.n	80014ba <exti10_callback+0x52>
 80014ac:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <exti10_callback+0x8c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d102      	bne.n	80014ba <exti10_callback+0x52>
		{
			direction_B = 1; // Forward
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <exti10_callback+0x8c>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
		}
	}
	Encoder_B_Pin10_Last = last_state_B;
 80014ba:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <exti10_callback+0x88>)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6013      	str	r3, [r2, #0]

	if (!direction_B)
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <exti10_callback+0x8c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d105      	bne.n	80014d4 <exti10_callback+0x6c>
		Encoder_B_counts++;
 80014c8:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <exti10_callback+0x90>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3301      	adds	r3, #1
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <exti10_callback+0x90>)
 80014d0:	6013      	str	r3, [r2, #0]
	else
		Encoder_B_counts--;
}
 80014d2:	e004      	b.n	80014de <exti10_callback+0x76>
		Encoder_B_counts--;
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <exti10_callback+0x90>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	3b01      	subs	r3, #1
 80014da:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <exti10_callback+0x90>)
 80014dc:	6013      	str	r3, [r2, #0]
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40020000 	.word	0x40020000
 80014f0:	20000084 	.word	0x20000084
 80014f4:	2000008d 	.word	0x2000008d
 80014f8:	20000088 	.word	0x20000088

080014fc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	if((EXTI->PR & Encoder_B_Pin10)!=0) //If Pending register on Line 10 is triggered
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <EXTI15_10_IRQHandler+0x24>)
 8001502:	695b      	ldr	r3, [r3, #20]
 8001504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001508:	2b00      	cmp	r3, #0
 800150a:	d007      	beq.n	800151c <EXTI15_10_IRQHandler+0x20>
	{
		/*Clear PR flag*/
		EXTI->PR |= Encoder_B_Pin10;
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <EXTI15_10_IRQHandler+0x24>)
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	4a03      	ldr	r2, [pc, #12]	; (8001520 <EXTI15_10_IRQHandler+0x24>)
 8001512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001516:	6153      	str	r3, [r2, #20]

		exti10_callback();
 8001518:	f7ff ffa6 	bl	8001468 <exti10_callback>
	}

}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40013c00 	.word	0x40013c00

08001524 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	e00a      	b.n	800154c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001536:	f3af 8000 	nop.w
 800153a:	4601      	mov	r1, r0
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	1c5a      	adds	r2, r3, #1
 8001540:	60ba      	str	r2, [r7, #8]
 8001542:	b2ca      	uxtb	r2, r1
 8001544:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	3301      	adds	r3, #1
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	429a      	cmp	r2, r3
 8001552:	dbf0      	blt.n	8001536 <_read+0x12>
  }

  return len;
 8001554:	687b      	ldr	r3, [r7, #4]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	e009      	b.n	8001584 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	60ba      	str	r2, [r7, #8]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f000 f8f4 	bl	8001766 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3301      	adds	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	429a      	cmp	r2, r3
 800158a:	dbf1      	blt.n	8001570 <_write+0x12>
  }
  return len;
 800158c:	687b      	ldr	r3, [r7, #4]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <_close>:

int _close(int file)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
 80015b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015be:	605a      	str	r2, [r3, #4]
  return 0;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <_isatty>:

int _isatty(int file)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001608:	4a14      	ldr	r2, [pc, #80]	; (800165c <_sbrk+0x5c>)
 800160a:	4b15      	ldr	r3, [pc, #84]	; (8001660 <_sbrk+0x60>)
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d102      	bne.n	8001622 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <_sbrk+0x64>)
 800161e:	4a12      	ldr	r2, [pc, #72]	; (8001668 <_sbrk+0x68>)
 8001620:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	429a      	cmp	r2, r3
 800162e:	d207      	bcs.n	8001640 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001630:	f000 fae4 	bl	8001bfc <__errno>
 8001634:	4603      	mov	r3, r0
 8001636:	220c      	movs	r2, #12
 8001638:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
 800163e:	e009      	b.n	8001654 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001646:	4b07      	ldr	r3, [pc, #28]	; (8001664 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	4a05      	ldr	r2, [pc, #20]	; (8001664 <_sbrk+0x64>)
 8001650:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001652:	68fb      	ldr	r3, [r7, #12]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20018000 	.word	0x20018000
 8001660:	00000400 	.word	0x00000400
 8001664:	20000090 	.word	0x20000090
 8001668:	200001e8 	.word	0x200001e8

0800166c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	2b00      	cmp	r3, #0
 800167e:	db0a      	blt.n	8001696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	490c      	ldr	r1, [pc, #48]	; (80016b8 <__NVIC_SetPriority+0x4c>)
 8001686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168a:	0112      	lsls	r2, r2, #4
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	440b      	add	r3, r1
 8001690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001694:	e00a      	b.n	80016ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4908      	ldr	r1, [pc, #32]	; (80016bc <__NVIC_SetPriority+0x50>)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	3b04      	subs	r3, #4
 80016a4:	0112      	lsls	r2, r2, #4
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	440b      	add	r3, r1
 80016aa:	761a      	strb	r2, [r3, #24]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000e100 	.word	0xe000e100
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <SysTick_Init>:
#define CTRL_COUNTFLAG			(1U<<16)

volatile uint32_t msTicks = 0;

void SysTick_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
    // Reload with the number of clocks per millisecond
    SysTick->LOAD = SYSTICK_LOAD_VAL - 1;  // Set reload register (off by one)
 80016c4:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <SysTick_Init+0x44>)
 80016c6:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80016ca:	605a      	str	r2, [r3, #4]

    // Set the priority of the SysTick interrupt
    NVIC_SetPriority(SysTick_IRQn, (1 << __NVIC_PRIO_BITS) - 1);  // Set lowest priority
 80016cc:	210f      	movs	r1, #15
 80016ce:	f04f 30ff 	mov.w	r0, #4294967295
 80016d2:	f7ff ffcb 	bl	800166c <__NVIC_SetPriority>

    // Reset the SysTick counter value
    SysTick->VAL = 0;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <SysTick_Init+0x44>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]

    // Select processor clock as SysTick clock source
    SysTick->CTRL |= CTRL_CLKSRC;
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <SysTick_Init+0x44>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a08      	ldr	r2, [pc, #32]	; (8001704 <SysTick_Init+0x44>)
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	6013      	str	r3, [r2, #0]

    // Enable SysTick interrupt
    SysTick->CTRL |= CTRL_TICKINT;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <SysTick_Init+0x44>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a05      	ldr	r2, [pc, #20]	; (8001704 <SysTick_Init+0x44>)
 80016ee:	f043 0302 	orr.w	r3, r3, #2
 80016f2:	6013      	str	r3, [r2, #0]

    // Enable SysTick timer
    SysTick->CTRL |= CTRL_ENABLE;
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <SysTick_Init+0x44>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a02      	ldr	r2, [pc, #8]	; (8001704 <SysTick_Init+0x44>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6013      	str	r3, [r2, #0]
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	e000e010 	.word	0xe000e010

08001708 <SysTick_Handler>:

// SysTick Handler - Called every 1ms
void SysTick_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
	msTicks++;
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <SysTick_Handler+0x18>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	3301      	adds	r3, #1
 8001712:	4a03      	ldr	r2, [pc, #12]	; (8001720 <SysTick_Handler+0x18>)
 8001714:	6013      	str	r3, [r2, #0]
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	20000094 	.word	0x20000094

08001724 <getMillis>:

// Function to get the current time in milliseconds
uint32_t getMillis(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
	return msTicks;
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <getMillis+0x14>)
 800172a:	681b      	ldr	r3, [r3, #0]
}
 800172c:	4618      	mov	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	20000094 	.word	0x20000094

0800173c <delayMillis>:

void delayMillis(uint32_t delay)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	uint32_t startTick = getMillis();
 8001744:	f7ff ffee 	bl	8001724 <getMillis>
 8001748:	60f8      	str	r0, [r7, #12]
	while ((getMillis() - startTick) < delay){}
 800174a:	bf00      	nop
 800174c:	f7ff ffea 	bl	8001724 <getMillis>
 8001750:	4602      	mov	r2, r0
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	429a      	cmp	r2, r3
 800175a:	d8f7      	bhi.n	800174c <delayMillis+0x10>
}
 800175c:	bf00      	nop
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <__io_putchar>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);

int __io_putchar(int ch)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f876 	bl	8001860 <uart2_write>
	return ch;
 8001774:	687b      	ldr	r3, [r7, #4]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <uart2_rxtx_init>:

void uart2_rxtx_init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	/****************Configure uart  pin using gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 8001784:	4b32      	ldr	r3, [pc, #200]	; (8001850 <uart2_rxtx_init+0xd0>)
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	4a31      	ldr	r2, [pc, #196]	; (8001850 <uart2_rxtx_init+0xd0>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6313      	str	r3, [r2, #48]	; 0x30


	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~ (1U<<4);
 8001790:	4b30      	ldr	r3, [pc, #192]	; (8001854 <uart2_rxtx_init+0xd4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a2f      	ldr	r2, [pc, #188]	; (8001854 <uart2_rxtx_init+0xd4>)
 8001796:	f023 0310 	bic.w	r3, r3, #16
 800179a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 800179c:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <uart2_rxtx_init+0xd4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a2c      	ldr	r2, [pc, #176]	; (8001854 <uart2_rxtx_init+0xd4>)
 80017a2:	f043 0320 	orr.w	r3, r3, #32
 80017a6:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0]|= (1U<<8);
 80017a8:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <uart2_rxtx_init+0xd4>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4a29      	ldr	r2, [pc, #164]	; (8001854 <uart2_rxtx_init+0xd4>)
 80017ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<9);
 80017b4:	4b27      	ldr	r3, [pc, #156]	; (8001854 <uart2_rxtx_init+0xd4>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	4a26      	ldr	r2, [pc, #152]	; (8001854 <uart2_rxtx_init+0xd4>)
 80017ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017be:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<10);
 80017c0:	4b24      	ldr	r3, [pc, #144]	; (8001854 <uart2_rxtx_init+0xd4>)
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	4a23      	ldr	r2, [pc, #140]	; (8001854 <uart2_rxtx_init+0xd4>)
 80017c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ca:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<11);
 80017cc:	4b21      	ldr	r3, [pc, #132]	; (8001854 <uart2_rxtx_init+0xd4>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	4a20      	ldr	r2, [pc, #128]	; (8001854 <uart2_rxtx_init+0xd4>)
 80017d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017d6:	6213      	str	r3, [r2, #32]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~ (1U<<6);
 80017d8:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <uart2_rxtx_init+0xd4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a1d      	ldr	r2, [pc, #116]	; (8001854 <uart2_rxtx_init+0xd4>)
 80017de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017e2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 80017e4:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <uart2_rxtx_init+0xd4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a1a      	ldr	r2, [pc, #104]	; (8001854 <uart2_rxtx_init+0xd4>)
 80017ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ee:	6013      	str	r3, [r2, #0]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0]|= (1U<<12);
 80017f0:	4b18      	ldr	r3, [pc, #96]	; (8001854 <uart2_rxtx_init+0xd4>)
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	4a17      	ldr	r2, [pc, #92]	; (8001854 <uart2_rxtx_init+0xd4>)
 80017f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<13);
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <uart2_rxtx_init+0xd4>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	4a14      	ldr	r2, [pc, #80]	; (8001854 <uart2_rxtx_init+0xd4>)
 8001802:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001806:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<14);
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <uart2_rxtx_init+0xd4>)
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4a11      	ldr	r2, [pc, #68]	; (8001854 <uart2_rxtx_init+0xd4>)
 800180e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001812:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<15);
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <uart2_rxtx_init+0xd4>)
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <uart2_rxtx_init+0xd4>)
 800181a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800181e:	6213      	str	r3, [r2, #32]



	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= USART2EN;
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <uart2_rxtx_init+0xd0>)
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	4a0a      	ldr	r2, [pc, #40]	; (8001850 <uart2_rxtx_init+0xd0>)
 8001826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800182a:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 800182c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001830:	4909      	ldr	r1, [pc, #36]	; (8001858 <uart2_rxtx_init+0xd8>)
 8001832:	480a      	ldr	r0, [pc, #40]	; (800185c <uart2_rxtx_init+0xdc>)
 8001834:	f000 f82c 	bl	8001890 <uart_set_baudrate>

	/*Configure the transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <uart2_rxtx_init+0xdc>)
 800183a:	220c      	movs	r2, #12
 800183c:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	USART2->CR1 |= CR1_UE;
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <uart2_rxtx_init+0xdc>)
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	4a06      	ldr	r2, [pc, #24]	; (800185c <uart2_rxtx_init+0xdc>)
 8001844:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001848:	60d3      	str	r3, [r2, #12]

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800
 8001854:	40020000 	.word	0x40020000
 8001858:	00f42400 	.word	0x00f42400
 800185c:	40004400 	.word	0x40004400

08001860 <uart2_write>:
	return USART2->DR;

}

void uart2_write(int ch)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){} // Program stays here until condition in while loop no longer holds
 8001868:	bf00      	nop
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <uart2_write+0x2c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f9      	beq.n	800186a <uart2_write+0xa>

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a04      	ldr	r2, [pc, #16]	; (800188c <uart2_write+0x2c>)
 800187a:	b2db      	uxtb	r3, r3
 800187c:	6053      	str	r3, [r2, #4]
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40004400 	.word	0x40004400

08001890 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	68b8      	ldr	r0, [r7, #8]
 80018a0:	f000 f808 	bl	80018b4 <compute_uart_bd>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	609a      	str	r2, [r3, #8]
}
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	085a      	lsrs	r2, r3, #1
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	441a      	add	r2, r3
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018cc:	b29b      	uxth	r3, r3
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018dc:	480d      	ldr	r0, [pc, #52]	; (8001914 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018e4:	480c      	ldr	r0, [pc, #48]	; (8001918 <LoopForever+0x6>)
  ldr r1, =_edata
 80018e6:	490d      	ldr	r1, [pc, #52]	; (800191c <LoopForever+0xa>)
  ldr r2, =_sidata
 80018e8:	4a0d      	ldr	r2, [pc, #52]	; (8001920 <LoopForever+0xe>)
  movs r3, #0
 80018ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018ec:	e002      	b.n	80018f4 <LoopCopyDataInit>

080018ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018f2:	3304      	adds	r3, #4

080018f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f8:	d3f9      	bcc.n	80018ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018fc:	4c0a      	ldr	r4, [pc, #40]	; (8001928 <LoopForever+0x16>)
  movs r3, #0
 80018fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001900:	e001      	b.n	8001906 <LoopFillZerobss>

08001902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001904:	3204      	adds	r2, #4

08001906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001908:	d3fb      	bcc.n	8001902 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800190a:	f000 f97d 	bl	8001c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800190e:	f7ff fd37 	bl	8001380 <main>

08001912 <LoopForever>:

LoopForever:
  b LoopForever
 8001912:	e7fe      	b.n	8001912 <LoopForever>
  ldr   r0, =_estack
 8001914:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800191c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001920:	0800281c 	.word	0x0800281c
  ldr r2, =_sbss
 8001924:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001928:	200001e4 	.word	0x200001e4

0800192c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800192c:	e7fe      	b.n	800192c <ADC_IRQHandler>
	...

08001930 <std>:
 8001930:	2300      	movs	r3, #0
 8001932:	b510      	push	{r4, lr}
 8001934:	4604      	mov	r4, r0
 8001936:	e9c0 3300 	strd	r3, r3, [r0]
 800193a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800193e:	6083      	str	r3, [r0, #8]
 8001940:	8181      	strh	r1, [r0, #12]
 8001942:	6643      	str	r3, [r0, #100]	; 0x64
 8001944:	81c2      	strh	r2, [r0, #14]
 8001946:	6183      	str	r3, [r0, #24]
 8001948:	4619      	mov	r1, r3
 800194a:	2208      	movs	r2, #8
 800194c:	305c      	adds	r0, #92	; 0x5c
 800194e:	f000 f906 	bl	8001b5e <memset>
 8001952:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <std+0x58>)
 8001954:	6263      	str	r3, [r4, #36]	; 0x24
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <std+0x5c>)
 8001958:	62a3      	str	r3, [r4, #40]	; 0x28
 800195a:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <std+0x60>)
 800195c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <std+0x64>)
 8001960:	6323      	str	r3, [r4, #48]	; 0x30
 8001962:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <std+0x68>)
 8001964:	6224      	str	r4, [r4, #32]
 8001966:	429c      	cmp	r4, r3
 8001968:	d006      	beq.n	8001978 <std+0x48>
 800196a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800196e:	4294      	cmp	r4, r2
 8001970:	d002      	beq.n	8001978 <std+0x48>
 8001972:	33d0      	adds	r3, #208	; 0xd0
 8001974:	429c      	cmp	r4, r3
 8001976:	d105      	bne.n	8001984 <std+0x54>
 8001978:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800197c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001980:	f000 b966 	b.w	8001c50 <__retarget_lock_init_recursive>
 8001984:	bd10      	pop	{r4, pc}
 8001986:	bf00      	nop
 8001988:	08001ad9 	.word	0x08001ad9
 800198c:	08001afb 	.word	0x08001afb
 8001990:	08001b33 	.word	0x08001b33
 8001994:	08001b57 	.word	0x08001b57
 8001998:	20000098 	.word	0x20000098

0800199c <stdio_exit_handler>:
 800199c:	4a02      	ldr	r2, [pc, #8]	; (80019a8 <stdio_exit_handler+0xc>)
 800199e:	4903      	ldr	r1, [pc, #12]	; (80019ac <stdio_exit_handler+0x10>)
 80019a0:	4803      	ldr	r0, [pc, #12]	; (80019b0 <stdio_exit_handler+0x14>)
 80019a2:	f000 b869 	b.w	8001a78 <_fwalk_sglue>
 80019a6:	bf00      	nop
 80019a8:	20000004 	.word	0x20000004
 80019ac:	080024fd 	.word	0x080024fd
 80019b0:	20000010 	.word	0x20000010

080019b4 <cleanup_stdio>:
 80019b4:	6841      	ldr	r1, [r0, #4]
 80019b6:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <cleanup_stdio+0x34>)
 80019b8:	4299      	cmp	r1, r3
 80019ba:	b510      	push	{r4, lr}
 80019bc:	4604      	mov	r4, r0
 80019be:	d001      	beq.n	80019c4 <cleanup_stdio+0x10>
 80019c0:	f000 fd9c 	bl	80024fc <_fflush_r>
 80019c4:	68a1      	ldr	r1, [r4, #8]
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <cleanup_stdio+0x38>)
 80019c8:	4299      	cmp	r1, r3
 80019ca:	d002      	beq.n	80019d2 <cleanup_stdio+0x1e>
 80019cc:	4620      	mov	r0, r4
 80019ce:	f000 fd95 	bl	80024fc <_fflush_r>
 80019d2:	68e1      	ldr	r1, [r4, #12]
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <cleanup_stdio+0x3c>)
 80019d6:	4299      	cmp	r1, r3
 80019d8:	d004      	beq.n	80019e4 <cleanup_stdio+0x30>
 80019da:	4620      	mov	r0, r4
 80019dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80019e0:	f000 bd8c 	b.w	80024fc <_fflush_r>
 80019e4:	bd10      	pop	{r4, pc}
 80019e6:	bf00      	nop
 80019e8:	20000098 	.word	0x20000098
 80019ec:	20000100 	.word	0x20000100
 80019f0:	20000168 	.word	0x20000168

080019f4 <global_stdio_init.part.0>:
 80019f4:	b510      	push	{r4, lr}
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <global_stdio_init.part.0+0x30>)
 80019f8:	4c0b      	ldr	r4, [pc, #44]	; (8001a28 <global_stdio_init.part.0+0x34>)
 80019fa:	4a0c      	ldr	r2, [pc, #48]	; (8001a2c <global_stdio_init.part.0+0x38>)
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	4620      	mov	r0, r4
 8001a00:	2200      	movs	r2, #0
 8001a02:	2104      	movs	r1, #4
 8001a04:	f7ff ff94 	bl	8001930 <std>
 8001a08:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	2109      	movs	r1, #9
 8001a10:	f7ff ff8e 	bl	8001930 <std>
 8001a14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001a18:	2202      	movs	r2, #2
 8001a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a1e:	2112      	movs	r1, #18
 8001a20:	f7ff bf86 	b.w	8001930 <std>
 8001a24:	200001d0 	.word	0x200001d0
 8001a28:	20000098 	.word	0x20000098
 8001a2c:	0800199d 	.word	0x0800199d

08001a30 <__sfp_lock_acquire>:
 8001a30:	4801      	ldr	r0, [pc, #4]	; (8001a38 <__sfp_lock_acquire+0x8>)
 8001a32:	f000 b90e 	b.w	8001c52 <__retarget_lock_acquire_recursive>
 8001a36:	bf00      	nop
 8001a38:	200001d9 	.word	0x200001d9

08001a3c <__sfp_lock_release>:
 8001a3c:	4801      	ldr	r0, [pc, #4]	; (8001a44 <__sfp_lock_release+0x8>)
 8001a3e:	f000 b909 	b.w	8001c54 <__retarget_lock_release_recursive>
 8001a42:	bf00      	nop
 8001a44:	200001d9 	.word	0x200001d9

08001a48 <__sinit>:
 8001a48:	b510      	push	{r4, lr}
 8001a4a:	4604      	mov	r4, r0
 8001a4c:	f7ff fff0 	bl	8001a30 <__sfp_lock_acquire>
 8001a50:	6a23      	ldr	r3, [r4, #32]
 8001a52:	b11b      	cbz	r3, 8001a5c <__sinit+0x14>
 8001a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001a58:	f7ff bff0 	b.w	8001a3c <__sfp_lock_release>
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <__sinit+0x28>)
 8001a5e:	6223      	str	r3, [r4, #32]
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <__sinit+0x2c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f5      	bne.n	8001a54 <__sinit+0xc>
 8001a68:	f7ff ffc4 	bl	80019f4 <global_stdio_init.part.0>
 8001a6c:	e7f2      	b.n	8001a54 <__sinit+0xc>
 8001a6e:	bf00      	nop
 8001a70:	080019b5 	.word	0x080019b5
 8001a74:	200001d0 	.word	0x200001d0

08001a78 <_fwalk_sglue>:
 8001a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a7c:	4607      	mov	r7, r0
 8001a7e:	4688      	mov	r8, r1
 8001a80:	4614      	mov	r4, r2
 8001a82:	2600      	movs	r6, #0
 8001a84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001a88:	f1b9 0901 	subs.w	r9, r9, #1
 8001a8c:	d505      	bpl.n	8001a9a <_fwalk_sglue+0x22>
 8001a8e:	6824      	ldr	r4, [r4, #0]
 8001a90:	2c00      	cmp	r4, #0
 8001a92:	d1f7      	bne.n	8001a84 <_fwalk_sglue+0xc>
 8001a94:	4630      	mov	r0, r6
 8001a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a9a:	89ab      	ldrh	r3, [r5, #12]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d907      	bls.n	8001ab0 <_fwalk_sglue+0x38>
 8001aa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	d003      	beq.n	8001ab0 <_fwalk_sglue+0x38>
 8001aa8:	4629      	mov	r1, r5
 8001aaa:	4638      	mov	r0, r7
 8001aac:	47c0      	blx	r8
 8001aae:	4306      	orrs	r6, r0
 8001ab0:	3568      	adds	r5, #104	; 0x68
 8001ab2:	e7e9      	b.n	8001a88 <_fwalk_sglue+0x10>

08001ab4 <iprintf>:
 8001ab4:	b40f      	push	{r0, r1, r2, r3}
 8001ab6:	b507      	push	{r0, r1, r2, lr}
 8001ab8:	4906      	ldr	r1, [pc, #24]	; (8001ad4 <iprintf+0x20>)
 8001aba:	ab04      	add	r3, sp, #16
 8001abc:	6808      	ldr	r0, [r1, #0]
 8001abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8001ac2:	6881      	ldr	r1, [r0, #8]
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	f000 f9e9 	bl	8001e9c <_vfiprintf_r>
 8001aca:	b003      	add	sp, #12
 8001acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001ad0:	b004      	add	sp, #16
 8001ad2:	4770      	bx	lr
 8001ad4:	2000005c 	.word	0x2000005c

08001ad8 <__sread>:
 8001ad8:	b510      	push	{r4, lr}
 8001ada:	460c      	mov	r4, r1
 8001adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ae0:	f000 f868 	bl	8001bb4 <_read_r>
 8001ae4:	2800      	cmp	r0, #0
 8001ae6:	bfab      	itete	ge
 8001ae8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001aea:	89a3      	ldrhlt	r3, [r4, #12]
 8001aec:	181b      	addge	r3, r3, r0
 8001aee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001af2:	bfac      	ite	ge
 8001af4:	6563      	strge	r3, [r4, #84]	; 0x54
 8001af6:	81a3      	strhlt	r3, [r4, #12]
 8001af8:	bd10      	pop	{r4, pc}

08001afa <__swrite>:
 8001afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001afe:	461f      	mov	r7, r3
 8001b00:	898b      	ldrh	r3, [r1, #12]
 8001b02:	05db      	lsls	r3, r3, #23
 8001b04:	4605      	mov	r5, r0
 8001b06:	460c      	mov	r4, r1
 8001b08:	4616      	mov	r6, r2
 8001b0a:	d505      	bpl.n	8001b18 <__swrite+0x1e>
 8001b0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b10:	2302      	movs	r3, #2
 8001b12:	2200      	movs	r2, #0
 8001b14:	f000 f83c 	bl	8001b90 <_lseek_r>
 8001b18:	89a3      	ldrh	r3, [r4, #12]
 8001b1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b22:	81a3      	strh	r3, [r4, #12]
 8001b24:	4632      	mov	r2, r6
 8001b26:	463b      	mov	r3, r7
 8001b28:	4628      	mov	r0, r5
 8001b2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b2e:	f000 b853 	b.w	8001bd8 <_write_r>

08001b32 <__sseek>:
 8001b32:	b510      	push	{r4, lr}
 8001b34:	460c      	mov	r4, r1
 8001b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b3a:	f000 f829 	bl	8001b90 <_lseek_r>
 8001b3e:	1c43      	adds	r3, r0, #1
 8001b40:	89a3      	ldrh	r3, [r4, #12]
 8001b42:	bf15      	itete	ne
 8001b44:	6560      	strne	r0, [r4, #84]	; 0x54
 8001b46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001b4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001b4e:	81a3      	strheq	r3, [r4, #12]
 8001b50:	bf18      	it	ne
 8001b52:	81a3      	strhne	r3, [r4, #12]
 8001b54:	bd10      	pop	{r4, pc}

08001b56 <__sclose>:
 8001b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b5a:	f000 b809 	b.w	8001b70 <_close_r>

08001b5e <memset>:
 8001b5e:	4402      	add	r2, r0
 8001b60:	4603      	mov	r3, r0
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d100      	bne.n	8001b68 <memset+0xa>
 8001b66:	4770      	bx	lr
 8001b68:	f803 1b01 	strb.w	r1, [r3], #1
 8001b6c:	e7f9      	b.n	8001b62 <memset+0x4>
	...

08001b70 <_close_r>:
 8001b70:	b538      	push	{r3, r4, r5, lr}
 8001b72:	4d06      	ldr	r5, [pc, #24]	; (8001b8c <_close_r+0x1c>)
 8001b74:	2300      	movs	r3, #0
 8001b76:	4604      	mov	r4, r0
 8001b78:	4608      	mov	r0, r1
 8001b7a:	602b      	str	r3, [r5, #0]
 8001b7c:	f7ff fd0b 	bl	8001596 <_close>
 8001b80:	1c43      	adds	r3, r0, #1
 8001b82:	d102      	bne.n	8001b8a <_close_r+0x1a>
 8001b84:	682b      	ldr	r3, [r5, #0]
 8001b86:	b103      	cbz	r3, 8001b8a <_close_r+0x1a>
 8001b88:	6023      	str	r3, [r4, #0]
 8001b8a:	bd38      	pop	{r3, r4, r5, pc}
 8001b8c:	200001d4 	.word	0x200001d4

08001b90 <_lseek_r>:
 8001b90:	b538      	push	{r3, r4, r5, lr}
 8001b92:	4d07      	ldr	r5, [pc, #28]	; (8001bb0 <_lseek_r+0x20>)
 8001b94:	4604      	mov	r4, r0
 8001b96:	4608      	mov	r0, r1
 8001b98:	4611      	mov	r1, r2
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	602a      	str	r2, [r5, #0]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	f7ff fd20 	bl	80015e4 <_lseek>
 8001ba4:	1c43      	adds	r3, r0, #1
 8001ba6:	d102      	bne.n	8001bae <_lseek_r+0x1e>
 8001ba8:	682b      	ldr	r3, [r5, #0]
 8001baa:	b103      	cbz	r3, 8001bae <_lseek_r+0x1e>
 8001bac:	6023      	str	r3, [r4, #0]
 8001bae:	bd38      	pop	{r3, r4, r5, pc}
 8001bb0:	200001d4 	.word	0x200001d4

08001bb4 <_read_r>:
 8001bb4:	b538      	push	{r3, r4, r5, lr}
 8001bb6:	4d07      	ldr	r5, [pc, #28]	; (8001bd4 <_read_r+0x20>)
 8001bb8:	4604      	mov	r4, r0
 8001bba:	4608      	mov	r0, r1
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	602a      	str	r2, [r5, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	f7ff fcae 	bl	8001524 <_read>
 8001bc8:	1c43      	adds	r3, r0, #1
 8001bca:	d102      	bne.n	8001bd2 <_read_r+0x1e>
 8001bcc:	682b      	ldr	r3, [r5, #0]
 8001bce:	b103      	cbz	r3, 8001bd2 <_read_r+0x1e>
 8001bd0:	6023      	str	r3, [r4, #0]
 8001bd2:	bd38      	pop	{r3, r4, r5, pc}
 8001bd4:	200001d4 	.word	0x200001d4

08001bd8 <_write_r>:
 8001bd8:	b538      	push	{r3, r4, r5, lr}
 8001bda:	4d07      	ldr	r5, [pc, #28]	; (8001bf8 <_write_r+0x20>)
 8001bdc:	4604      	mov	r4, r0
 8001bde:	4608      	mov	r0, r1
 8001be0:	4611      	mov	r1, r2
 8001be2:	2200      	movs	r2, #0
 8001be4:	602a      	str	r2, [r5, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	f7ff fcb9 	bl	800155e <_write>
 8001bec:	1c43      	adds	r3, r0, #1
 8001bee:	d102      	bne.n	8001bf6 <_write_r+0x1e>
 8001bf0:	682b      	ldr	r3, [r5, #0]
 8001bf2:	b103      	cbz	r3, 8001bf6 <_write_r+0x1e>
 8001bf4:	6023      	str	r3, [r4, #0]
 8001bf6:	bd38      	pop	{r3, r4, r5, pc}
 8001bf8:	200001d4 	.word	0x200001d4

08001bfc <__errno>:
 8001bfc:	4b01      	ldr	r3, [pc, #4]	; (8001c04 <__errno+0x8>)
 8001bfe:	6818      	ldr	r0, [r3, #0]
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	2000005c 	.word	0x2000005c

08001c08 <__libc_init_array>:
 8001c08:	b570      	push	{r4, r5, r6, lr}
 8001c0a:	4d0d      	ldr	r5, [pc, #52]	; (8001c40 <__libc_init_array+0x38>)
 8001c0c:	4c0d      	ldr	r4, [pc, #52]	; (8001c44 <__libc_init_array+0x3c>)
 8001c0e:	1b64      	subs	r4, r4, r5
 8001c10:	10a4      	asrs	r4, r4, #2
 8001c12:	2600      	movs	r6, #0
 8001c14:	42a6      	cmp	r6, r4
 8001c16:	d109      	bne.n	8001c2c <__libc_init_array+0x24>
 8001c18:	4d0b      	ldr	r5, [pc, #44]	; (8001c48 <__libc_init_array+0x40>)
 8001c1a:	4c0c      	ldr	r4, [pc, #48]	; (8001c4c <__libc_init_array+0x44>)
 8001c1c:	f000 fdc0 	bl	80027a0 <_init>
 8001c20:	1b64      	subs	r4, r4, r5
 8001c22:	10a4      	asrs	r4, r4, #2
 8001c24:	2600      	movs	r6, #0
 8001c26:	42a6      	cmp	r6, r4
 8001c28:	d105      	bne.n	8001c36 <__libc_init_array+0x2e>
 8001c2a:	bd70      	pop	{r4, r5, r6, pc}
 8001c2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c30:	4798      	blx	r3
 8001c32:	3601      	adds	r6, #1
 8001c34:	e7ee      	b.n	8001c14 <__libc_init_array+0xc>
 8001c36:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c3a:	4798      	blx	r3
 8001c3c:	3601      	adds	r6, #1
 8001c3e:	e7f2      	b.n	8001c26 <__libc_init_array+0x1e>
 8001c40:	08002814 	.word	0x08002814
 8001c44:	08002814 	.word	0x08002814
 8001c48:	08002814 	.word	0x08002814
 8001c4c:	08002818 	.word	0x08002818

08001c50 <__retarget_lock_init_recursive>:
 8001c50:	4770      	bx	lr

08001c52 <__retarget_lock_acquire_recursive>:
 8001c52:	4770      	bx	lr

08001c54 <__retarget_lock_release_recursive>:
 8001c54:	4770      	bx	lr
	...

08001c58 <_free_r>:
 8001c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001c5a:	2900      	cmp	r1, #0
 8001c5c:	d044      	beq.n	8001ce8 <_free_r+0x90>
 8001c5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c62:	9001      	str	r0, [sp, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f1a1 0404 	sub.w	r4, r1, #4
 8001c6a:	bfb8      	it	lt
 8001c6c:	18e4      	addlt	r4, r4, r3
 8001c6e:	f000 f8df 	bl	8001e30 <__malloc_lock>
 8001c72:	4a1e      	ldr	r2, [pc, #120]	; (8001cec <_free_r+0x94>)
 8001c74:	9801      	ldr	r0, [sp, #4]
 8001c76:	6813      	ldr	r3, [r2, #0]
 8001c78:	b933      	cbnz	r3, 8001c88 <_free_r+0x30>
 8001c7a:	6063      	str	r3, [r4, #4]
 8001c7c:	6014      	str	r4, [r2, #0]
 8001c7e:	b003      	add	sp, #12
 8001c80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001c84:	f000 b8da 	b.w	8001e3c <__malloc_unlock>
 8001c88:	42a3      	cmp	r3, r4
 8001c8a:	d908      	bls.n	8001c9e <_free_r+0x46>
 8001c8c:	6825      	ldr	r5, [r4, #0]
 8001c8e:	1961      	adds	r1, r4, r5
 8001c90:	428b      	cmp	r3, r1
 8001c92:	bf01      	itttt	eq
 8001c94:	6819      	ldreq	r1, [r3, #0]
 8001c96:	685b      	ldreq	r3, [r3, #4]
 8001c98:	1949      	addeq	r1, r1, r5
 8001c9a:	6021      	streq	r1, [r4, #0]
 8001c9c:	e7ed      	b.n	8001c7a <_free_r+0x22>
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	b10b      	cbz	r3, 8001ca8 <_free_r+0x50>
 8001ca4:	42a3      	cmp	r3, r4
 8001ca6:	d9fa      	bls.n	8001c9e <_free_r+0x46>
 8001ca8:	6811      	ldr	r1, [r2, #0]
 8001caa:	1855      	adds	r5, r2, r1
 8001cac:	42a5      	cmp	r5, r4
 8001cae:	d10b      	bne.n	8001cc8 <_free_r+0x70>
 8001cb0:	6824      	ldr	r4, [r4, #0]
 8001cb2:	4421      	add	r1, r4
 8001cb4:	1854      	adds	r4, r2, r1
 8001cb6:	42a3      	cmp	r3, r4
 8001cb8:	6011      	str	r1, [r2, #0]
 8001cba:	d1e0      	bne.n	8001c7e <_free_r+0x26>
 8001cbc:	681c      	ldr	r4, [r3, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	6053      	str	r3, [r2, #4]
 8001cc2:	440c      	add	r4, r1
 8001cc4:	6014      	str	r4, [r2, #0]
 8001cc6:	e7da      	b.n	8001c7e <_free_r+0x26>
 8001cc8:	d902      	bls.n	8001cd0 <_free_r+0x78>
 8001cca:	230c      	movs	r3, #12
 8001ccc:	6003      	str	r3, [r0, #0]
 8001cce:	e7d6      	b.n	8001c7e <_free_r+0x26>
 8001cd0:	6825      	ldr	r5, [r4, #0]
 8001cd2:	1961      	adds	r1, r4, r5
 8001cd4:	428b      	cmp	r3, r1
 8001cd6:	bf04      	itt	eq
 8001cd8:	6819      	ldreq	r1, [r3, #0]
 8001cda:	685b      	ldreq	r3, [r3, #4]
 8001cdc:	6063      	str	r3, [r4, #4]
 8001cde:	bf04      	itt	eq
 8001ce0:	1949      	addeq	r1, r1, r5
 8001ce2:	6021      	streq	r1, [r4, #0]
 8001ce4:	6054      	str	r4, [r2, #4]
 8001ce6:	e7ca      	b.n	8001c7e <_free_r+0x26>
 8001ce8:	b003      	add	sp, #12
 8001cea:	bd30      	pop	{r4, r5, pc}
 8001cec:	200001dc 	.word	0x200001dc

08001cf0 <sbrk_aligned>:
 8001cf0:	b570      	push	{r4, r5, r6, lr}
 8001cf2:	4e0e      	ldr	r6, [pc, #56]	; (8001d2c <sbrk_aligned+0x3c>)
 8001cf4:	460c      	mov	r4, r1
 8001cf6:	6831      	ldr	r1, [r6, #0]
 8001cf8:	4605      	mov	r5, r0
 8001cfa:	b911      	cbnz	r1, 8001d02 <sbrk_aligned+0x12>
 8001cfc:	f000 fcbc 	bl	8002678 <_sbrk_r>
 8001d00:	6030      	str	r0, [r6, #0]
 8001d02:	4621      	mov	r1, r4
 8001d04:	4628      	mov	r0, r5
 8001d06:	f000 fcb7 	bl	8002678 <_sbrk_r>
 8001d0a:	1c43      	adds	r3, r0, #1
 8001d0c:	d00a      	beq.n	8001d24 <sbrk_aligned+0x34>
 8001d0e:	1cc4      	adds	r4, r0, #3
 8001d10:	f024 0403 	bic.w	r4, r4, #3
 8001d14:	42a0      	cmp	r0, r4
 8001d16:	d007      	beq.n	8001d28 <sbrk_aligned+0x38>
 8001d18:	1a21      	subs	r1, r4, r0
 8001d1a:	4628      	mov	r0, r5
 8001d1c:	f000 fcac 	bl	8002678 <_sbrk_r>
 8001d20:	3001      	adds	r0, #1
 8001d22:	d101      	bne.n	8001d28 <sbrk_aligned+0x38>
 8001d24:	f04f 34ff 	mov.w	r4, #4294967295
 8001d28:	4620      	mov	r0, r4
 8001d2a:	bd70      	pop	{r4, r5, r6, pc}
 8001d2c:	200001e0 	.word	0x200001e0

08001d30 <_malloc_r>:
 8001d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d34:	1ccd      	adds	r5, r1, #3
 8001d36:	f025 0503 	bic.w	r5, r5, #3
 8001d3a:	3508      	adds	r5, #8
 8001d3c:	2d0c      	cmp	r5, #12
 8001d3e:	bf38      	it	cc
 8001d40:	250c      	movcc	r5, #12
 8001d42:	2d00      	cmp	r5, #0
 8001d44:	4607      	mov	r7, r0
 8001d46:	db01      	blt.n	8001d4c <_malloc_r+0x1c>
 8001d48:	42a9      	cmp	r1, r5
 8001d4a:	d905      	bls.n	8001d58 <_malloc_r+0x28>
 8001d4c:	230c      	movs	r3, #12
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	2600      	movs	r6, #0
 8001d52:	4630      	mov	r0, r6
 8001d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d58:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001e2c <_malloc_r+0xfc>
 8001d5c:	f000 f868 	bl	8001e30 <__malloc_lock>
 8001d60:	f8d8 3000 	ldr.w	r3, [r8]
 8001d64:	461c      	mov	r4, r3
 8001d66:	bb5c      	cbnz	r4, 8001dc0 <_malloc_r+0x90>
 8001d68:	4629      	mov	r1, r5
 8001d6a:	4638      	mov	r0, r7
 8001d6c:	f7ff ffc0 	bl	8001cf0 <sbrk_aligned>
 8001d70:	1c43      	adds	r3, r0, #1
 8001d72:	4604      	mov	r4, r0
 8001d74:	d155      	bne.n	8001e22 <_malloc_r+0xf2>
 8001d76:	f8d8 4000 	ldr.w	r4, [r8]
 8001d7a:	4626      	mov	r6, r4
 8001d7c:	2e00      	cmp	r6, #0
 8001d7e:	d145      	bne.n	8001e0c <_malloc_r+0xdc>
 8001d80:	2c00      	cmp	r4, #0
 8001d82:	d048      	beq.n	8001e16 <_malloc_r+0xe6>
 8001d84:	6823      	ldr	r3, [r4, #0]
 8001d86:	4631      	mov	r1, r6
 8001d88:	4638      	mov	r0, r7
 8001d8a:	eb04 0903 	add.w	r9, r4, r3
 8001d8e:	f000 fc73 	bl	8002678 <_sbrk_r>
 8001d92:	4581      	cmp	r9, r0
 8001d94:	d13f      	bne.n	8001e16 <_malloc_r+0xe6>
 8001d96:	6821      	ldr	r1, [r4, #0]
 8001d98:	1a6d      	subs	r5, r5, r1
 8001d9a:	4629      	mov	r1, r5
 8001d9c:	4638      	mov	r0, r7
 8001d9e:	f7ff ffa7 	bl	8001cf0 <sbrk_aligned>
 8001da2:	3001      	adds	r0, #1
 8001da4:	d037      	beq.n	8001e16 <_malloc_r+0xe6>
 8001da6:	6823      	ldr	r3, [r4, #0]
 8001da8:	442b      	add	r3, r5
 8001daa:	6023      	str	r3, [r4, #0]
 8001dac:	f8d8 3000 	ldr.w	r3, [r8]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d038      	beq.n	8001e26 <_malloc_r+0xf6>
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	42a2      	cmp	r2, r4
 8001db8:	d12b      	bne.n	8001e12 <_malloc_r+0xe2>
 8001dba:	2200      	movs	r2, #0
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	e00f      	b.n	8001de0 <_malloc_r+0xb0>
 8001dc0:	6822      	ldr	r2, [r4, #0]
 8001dc2:	1b52      	subs	r2, r2, r5
 8001dc4:	d41f      	bmi.n	8001e06 <_malloc_r+0xd6>
 8001dc6:	2a0b      	cmp	r2, #11
 8001dc8:	d917      	bls.n	8001dfa <_malloc_r+0xca>
 8001dca:	1961      	adds	r1, r4, r5
 8001dcc:	42a3      	cmp	r3, r4
 8001dce:	6025      	str	r5, [r4, #0]
 8001dd0:	bf18      	it	ne
 8001dd2:	6059      	strne	r1, [r3, #4]
 8001dd4:	6863      	ldr	r3, [r4, #4]
 8001dd6:	bf08      	it	eq
 8001dd8:	f8c8 1000 	streq.w	r1, [r8]
 8001ddc:	5162      	str	r2, [r4, r5]
 8001dde:	604b      	str	r3, [r1, #4]
 8001de0:	4638      	mov	r0, r7
 8001de2:	f104 060b 	add.w	r6, r4, #11
 8001de6:	f000 f829 	bl	8001e3c <__malloc_unlock>
 8001dea:	f026 0607 	bic.w	r6, r6, #7
 8001dee:	1d23      	adds	r3, r4, #4
 8001df0:	1af2      	subs	r2, r6, r3
 8001df2:	d0ae      	beq.n	8001d52 <_malloc_r+0x22>
 8001df4:	1b9b      	subs	r3, r3, r6
 8001df6:	50a3      	str	r3, [r4, r2]
 8001df8:	e7ab      	b.n	8001d52 <_malloc_r+0x22>
 8001dfa:	42a3      	cmp	r3, r4
 8001dfc:	6862      	ldr	r2, [r4, #4]
 8001dfe:	d1dd      	bne.n	8001dbc <_malloc_r+0x8c>
 8001e00:	f8c8 2000 	str.w	r2, [r8]
 8001e04:	e7ec      	b.n	8001de0 <_malloc_r+0xb0>
 8001e06:	4623      	mov	r3, r4
 8001e08:	6864      	ldr	r4, [r4, #4]
 8001e0a:	e7ac      	b.n	8001d66 <_malloc_r+0x36>
 8001e0c:	4634      	mov	r4, r6
 8001e0e:	6876      	ldr	r6, [r6, #4]
 8001e10:	e7b4      	b.n	8001d7c <_malloc_r+0x4c>
 8001e12:	4613      	mov	r3, r2
 8001e14:	e7cc      	b.n	8001db0 <_malloc_r+0x80>
 8001e16:	230c      	movs	r3, #12
 8001e18:	603b      	str	r3, [r7, #0]
 8001e1a:	4638      	mov	r0, r7
 8001e1c:	f000 f80e 	bl	8001e3c <__malloc_unlock>
 8001e20:	e797      	b.n	8001d52 <_malloc_r+0x22>
 8001e22:	6025      	str	r5, [r4, #0]
 8001e24:	e7dc      	b.n	8001de0 <_malloc_r+0xb0>
 8001e26:	605b      	str	r3, [r3, #4]
 8001e28:	deff      	udf	#255	; 0xff
 8001e2a:	bf00      	nop
 8001e2c:	200001dc 	.word	0x200001dc

08001e30 <__malloc_lock>:
 8001e30:	4801      	ldr	r0, [pc, #4]	; (8001e38 <__malloc_lock+0x8>)
 8001e32:	f7ff bf0e 	b.w	8001c52 <__retarget_lock_acquire_recursive>
 8001e36:	bf00      	nop
 8001e38:	200001d8 	.word	0x200001d8

08001e3c <__malloc_unlock>:
 8001e3c:	4801      	ldr	r0, [pc, #4]	; (8001e44 <__malloc_unlock+0x8>)
 8001e3e:	f7ff bf09 	b.w	8001c54 <__retarget_lock_release_recursive>
 8001e42:	bf00      	nop
 8001e44:	200001d8 	.word	0x200001d8

08001e48 <__sfputc_r>:
 8001e48:	6893      	ldr	r3, [r2, #8]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	b410      	push	{r4}
 8001e50:	6093      	str	r3, [r2, #8]
 8001e52:	da08      	bge.n	8001e66 <__sfputc_r+0x1e>
 8001e54:	6994      	ldr	r4, [r2, #24]
 8001e56:	42a3      	cmp	r3, r4
 8001e58:	db01      	blt.n	8001e5e <__sfputc_r+0x16>
 8001e5a:	290a      	cmp	r1, #10
 8001e5c:	d103      	bne.n	8001e66 <__sfputc_r+0x1e>
 8001e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e62:	f000 bb73 	b.w	800254c <__swbuf_r>
 8001e66:	6813      	ldr	r3, [r2, #0]
 8001e68:	1c58      	adds	r0, r3, #1
 8001e6a:	6010      	str	r0, [r2, #0]
 8001e6c:	7019      	strb	r1, [r3, #0]
 8001e6e:	4608      	mov	r0, r1
 8001e70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <__sfputs_r>:
 8001e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e78:	4606      	mov	r6, r0
 8001e7a:	460f      	mov	r7, r1
 8001e7c:	4614      	mov	r4, r2
 8001e7e:	18d5      	adds	r5, r2, r3
 8001e80:	42ac      	cmp	r4, r5
 8001e82:	d101      	bne.n	8001e88 <__sfputs_r+0x12>
 8001e84:	2000      	movs	r0, #0
 8001e86:	e007      	b.n	8001e98 <__sfputs_r+0x22>
 8001e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e8c:	463a      	mov	r2, r7
 8001e8e:	4630      	mov	r0, r6
 8001e90:	f7ff ffda 	bl	8001e48 <__sfputc_r>
 8001e94:	1c43      	adds	r3, r0, #1
 8001e96:	d1f3      	bne.n	8001e80 <__sfputs_r+0xa>
 8001e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001e9c <_vfiprintf_r>:
 8001e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ea0:	460d      	mov	r5, r1
 8001ea2:	b09d      	sub	sp, #116	; 0x74
 8001ea4:	4614      	mov	r4, r2
 8001ea6:	4698      	mov	r8, r3
 8001ea8:	4606      	mov	r6, r0
 8001eaa:	b118      	cbz	r0, 8001eb4 <_vfiprintf_r+0x18>
 8001eac:	6a03      	ldr	r3, [r0, #32]
 8001eae:	b90b      	cbnz	r3, 8001eb4 <_vfiprintf_r+0x18>
 8001eb0:	f7ff fdca 	bl	8001a48 <__sinit>
 8001eb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001eb6:	07d9      	lsls	r1, r3, #31
 8001eb8:	d405      	bmi.n	8001ec6 <_vfiprintf_r+0x2a>
 8001eba:	89ab      	ldrh	r3, [r5, #12]
 8001ebc:	059a      	lsls	r2, r3, #22
 8001ebe:	d402      	bmi.n	8001ec6 <_vfiprintf_r+0x2a>
 8001ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001ec2:	f7ff fec6 	bl	8001c52 <__retarget_lock_acquire_recursive>
 8001ec6:	89ab      	ldrh	r3, [r5, #12]
 8001ec8:	071b      	lsls	r3, r3, #28
 8001eca:	d501      	bpl.n	8001ed0 <_vfiprintf_r+0x34>
 8001ecc:	692b      	ldr	r3, [r5, #16]
 8001ece:	b99b      	cbnz	r3, 8001ef8 <_vfiprintf_r+0x5c>
 8001ed0:	4629      	mov	r1, r5
 8001ed2:	4630      	mov	r0, r6
 8001ed4:	f000 fb78 	bl	80025c8 <__swsetup_r>
 8001ed8:	b170      	cbz	r0, 8001ef8 <_vfiprintf_r+0x5c>
 8001eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001edc:	07dc      	lsls	r4, r3, #31
 8001ede:	d504      	bpl.n	8001eea <_vfiprintf_r+0x4e>
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee4:	b01d      	add	sp, #116	; 0x74
 8001ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001eea:	89ab      	ldrh	r3, [r5, #12]
 8001eec:	0598      	lsls	r0, r3, #22
 8001eee:	d4f7      	bmi.n	8001ee0 <_vfiprintf_r+0x44>
 8001ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001ef2:	f7ff feaf 	bl	8001c54 <__retarget_lock_release_recursive>
 8001ef6:	e7f3      	b.n	8001ee0 <_vfiprintf_r+0x44>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	9309      	str	r3, [sp, #36]	; 0x24
 8001efc:	2320      	movs	r3, #32
 8001efe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f02:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f06:	2330      	movs	r3, #48	; 0x30
 8001f08:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80020bc <_vfiprintf_r+0x220>
 8001f0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f10:	f04f 0901 	mov.w	r9, #1
 8001f14:	4623      	mov	r3, r4
 8001f16:	469a      	mov	sl, r3
 8001f18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f1c:	b10a      	cbz	r2, 8001f22 <_vfiprintf_r+0x86>
 8001f1e:	2a25      	cmp	r2, #37	; 0x25
 8001f20:	d1f9      	bne.n	8001f16 <_vfiprintf_r+0x7a>
 8001f22:	ebba 0b04 	subs.w	fp, sl, r4
 8001f26:	d00b      	beq.n	8001f40 <_vfiprintf_r+0xa4>
 8001f28:	465b      	mov	r3, fp
 8001f2a:	4622      	mov	r2, r4
 8001f2c:	4629      	mov	r1, r5
 8001f2e:	4630      	mov	r0, r6
 8001f30:	f7ff ffa1 	bl	8001e76 <__sfputs_r>
 8001f34:	3001      	adds	r0, #1
 8001f36:	f000 80a9 	beq.w	800208c <_vfiprintf_r+0x1f0>
 8001f3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f3c:	445a      	add	r2, fp
 8001f3e:	9209      	str	r2, [sp, #36]	; 0x24
 8001f40:	f89a 3000 	ldrb.w	r3, [sl]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 80a1 	beq.w	800208c <_vfiprintf_r+0x1f0>
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f54:	f10a 0a01 	add.w	sl, sl, #1
 8001f58:	9304      	str	r3, [sp, #16]
 8001f5a:	9307      	str	r3, [sp, #28]
 8001f5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f60:	931a      	str	r3, [sp, #104]	; 0x68
 8001f62:	4654      	mov	r4, sl
 8001f64:	2205      	movs	r2, #5
 8001f66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f6a:	4854      	ldr	r0, [pc, #336]	; (80020bc <_vfiprintf_r+0x220>)
 8001f6c:	f7fe f938 	bl	80001e0 <memchr>
 8001f70:	9a04      	ldr	r2, [sp, #16]
 8001f72:	b9d8      	cbnz	r0, 8001fac <_vfiprintf_r+0x110>
 8001f74:	06d1      	lsls	r1, r2, #27
 8001f76:	bf44      	itt	mi
 8001f78:	2320      	movmi	r3, #32
 8001f7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f7e:	0713      	lsls	r3, r2, #28
 8001f80:	bf44      	itt	mi
 8001f82:	232b      	movmi	r3, #43	; 0x2b
 8001f84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001f88:	f89a 3000 	ldrb.w	r3, [sl]
 8001f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8001f8e:	d015      	beq.n	8001fbc <_vfiprintf_r+0x120>
 8001f90:	9a07      	ldr	r2, [sp, #28]
 8001f92:	4654      	mov	r4, sl
 8001f94:	2000      	movs	r0, #0
 8001f96:	f04f 0c0a 	mov.w	ip, #10
 8001f9a:	4621      	mov	r1, r4
 8001f9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001fa0:	3b30      	subs	r3, #48	; 0x30
 8001fa2:	2b09      	cmp	r3, #9
 8001fa4:	d94d      	bls.n	8002042 <_vfiprintf_r+0x1a6>
 8001fa6:	b1b0      	cbz	r0, 8001fd6 <_vfiprintf_r+0x13a>
 8001fa8:	9207      	str	r2, [sp, #28]
 8001faa:	e014      	b.n	8001fd6 <_vfiprintf_r+0x13a>
 8001fac:	eba0 0308 	sub.w	r3, r0, r8
 8001fb0:	fa09 f303 	lsl.w	r3, r9, r3
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	9304      	str	r3, [sp, #16]
 8001fb8:	46a2      	mov	sl, r4
 8001fba:	e7d2      	b.n	8001f62 <_vfiprintf_r+0xc6>
 8001fbc:	9b03      	ldr	r3, [sp, #12]
 8001fbe:	1d19      	adds	r1, r3, #4
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	9103      	str	r1, [sp, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bfbb      	ittet	lt
 8001fc8:	425b      	neglt	r3, r3
 8001fca:	f042 0202 	orrlt.w	r2, r2, #2
 8001fce:	9307      	strge	r3, [sp, #28]
 8001fd0:	9307      	strlt	r3, [sp, #28]
 8001fd2:	bfb8      	it	lt
 8001fd4:	9204      	strlt	r2, [sp, #16]
 8001fd6:	7823      	ldrb	r3, [r4, #0]
 8001fd8:	2b2e      	cmp	r3, #46	; 0x2e
 8001fda:	d10c      	bne.n	8001ff6 <_vfiprintf_r+0x15a>
 8001fdc:	7863      	ldrb	r3, [r4, #1]
 8001fde:	2b2a      	cmp	r3, #42	; 0x2a
 8001fe0:	d134      	bne.n	800204c <_vfiprintf_r+0x1b0>
 8001fe2:	9b03      	ldr	r3, [sp, #12]
 8001fe4:	1d1a      	adds	r2, r3, #4
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	9203      	str	r2, [sp, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	bfb8      	it	lt
 8001fee:	f04f 33ff 	movlt.w	r3, #4294967295
 8001ff2:	3402      	adds	r4, #2
 8001ff4:	9305      	str	r3, [sp, #20]
 8001ff6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80020cc <_vfiprintf_r+0x230>
 8001ffa:	7821      	ldrb	r1, [r4, #0]
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	4650      	mov	r0, sl
 8002000:	f7fe f8ee 	bl	80001e0 <memchr>
 8002004:	b138      	cbz	r0, 8002016 <_vfiprintf_r+0x17a>
 8002006:	9b04      	ldr	r3, [sp, #16]
 8002008:	eba0 000a 	sub.w	r0, r0, sl
 800200c:	2240      	movs	r2, #64	; 0x40
 800200e:	4082      	lsls	r2, r0
 8002010:	4313      	orrs	r3, r2
 8002012:	3401      	adds	r4, #1
 8002014:	9304      	str	r3, [sp, #16]
 8002016:	f814 1b01 	ldrb.w	r1, [r4], #1
 800201a:	4829      	ldr	r0, [pc, #164]	; (80020c0 <_vfiprintf_r+0x224>)
 800201c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002020:	2206      	movs	r2, #6
 8002022:	f7fe f8dd 	bl	80001e0 <memchr>
 8002026:	2800      	cmp	r0, #0
 8002028:	d03f      	beq.n	80020aa <_vfiprintf_r+0x20e>
 800202a:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <_vfiprintf_r+0x228>)
 800202c:	bb1b      	cbnz	r3, 8002076 <_vfiprintf_r+0x1da>
 800202e:	9b03      	ldr	r3, [sp, #12]
 8002030:	3307      	adds	r3, #7
 8002032:	f023 0307 	bic.w	r3, r3, #7
 8002036:	3308      	adds	r3, #8
 8002038:	9303      	str	r3, [sp, #12]
 800203a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800203c:	443b      	add	r3, r7
 800203e:	9309      	str	r3, [sp, #36]	; 0x24
 8002040:	e768      	b.n	8001f14 <_vfiprintf_r+0x78>
 8002042:	fb0c 3202 	mla	r2, ip, r2, r3
 8002046:	460c      	mov	r4, r1
 8002048:	2001      	movs	r0, #1
 800204a:	e7a6      	b.n	8001f9a <_vfiprintf_r+0xfe>
 800204c:	2300      	movs	r3, #0
 800204e:	3401      	adds	r4, #1
 8002050:	9305      	str	r3, [sp, #20]
 8002052:	4619      	mov	r1, r3
 8002054:	f04f 0c0a 	mov.w	ip, #10
 8002058:	4620      	mov	r0, r4
 800205a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800205e:	3a30      	subs	r2, #48	; 0x30
 8002060:	2a09      	cmp	r2, #9
 8002062:	d903      	bls.n	800206c <_vfiprintf_r+0x1d0>
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0c6      	beq.n	8001ff6 <_vfiprintf_r+0x15a>
 8002068:	9105      	str	r1, [sp, #20]
 800206a:	e7c4      	b.n	8001ff6 <_vfiprintf_r+0x15a>
 800206c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002070:	4604      	mov	r4, r0
 8002072:	2301      	movs	r3, #1
 8002074:	e7f0      	b.n	8002058 <_vfiprintf_r+0x1bc>
 8002076:	ab03      	add	r3, sp, #12
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	462a      	mov	r2, r5
 800207c:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <_vfiprintf_r+0x22c>)
 800207e:	a904      	add	r1, sp, #16
 8002080:	4630      	mov	r0, r6
 8002082:	f3af 8000 	nop.w
 8002086:	4607      	mov	r7, r0
 8002088:	1c78      	adds	r0, r7, #1
 800208a:	d1d6      	bne.n	800203a <_vfiprintf_r+0x19e>
 800208c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800208e:	07d9      	lsls	r1, r3, #31
 8002090:	d405      	bmi.n	800209e <_vfiprintf_r+0x202>
 8002092:	89ab      	ldrh	r3, [r5, #12]
 8002094:	059a      	lsls	r2, r3, #22
 8002096:	d402      	bmi.n	800209e <_vfiprintf_r+0x202>
 8002098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800209a:	f7ff fddb 	bl	8001c54 <__retarget_lock_release_recursive>
 800209e:	89ab      	ldrh	r3, [r5, #12]
 80020a0:	065b      	lsls	r3, r3, #25
 80020a2:	f53f af1d 	bmi.w	8001ee0 <_vfiprintf_r+0x44>
 80020a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020a8:	e71c      	b.n	8001ee4 <_vfiprintf_r+0x48>
 80020aa:	ab03      	add	r3, sp, #12
 80020ac:	9300      	str	r3, [sp, #0]
 80020ae:	462a      	mov	r2, r5
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <_vfiprintf_r+0x22c>)
 80020b2:	a904      	add	r1, sp, #16
 80020b4:	4630      	mov	r0, r6
 80020b6:	f000 f879 	bl	80021ac <_printf_i>
 80020ba:	e7e4      	b.n	8002086 <_vfiprintf_r+0x1ea>
 80020bc:	080027de 	.word	0x080027de
 80020c0:	080027e8 	.word	0x080027e8
 80020c4:	00000000 	.word	0x00000000
 80020c8:	08001e77 	.word	0x08001e77
 80020cc:	080027e4 	.word	0x080027e4

080020d0 <_printf_common>:
 80020d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020d4:	4616      	mov	r6, r2
 80020d6:	4699      	mov	r9, r3
 80020d8:	688a      	ldr	r2, [r1, #8]
 80020da:	690b      	ldr	r3, [r1, #16]
 80020dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80020e0:	4293      	cmp	r3, r2
 80020e2:	bfb8      	it	lt
 80020e4:	4613      	movlt	r3, r2
 80020e6:	6033      	str	r3, [r6, #0]
 80020e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80020ec:	4607      	mov	r7, r0
 80020ee:	460c      	mov	r4, r1
 80020f0:	b10a      	cbz	r2, 80020f6 <_printf_common+0x26>
 80020f2:	3301      	adds	r3, #1
 80020f4:	6033      	str	r3, [r6, #0]
 80020f6:	6823      	ldr	r3, [r4, #0]
 80020f8:	0699      	lsls	r1, r3, #26
 80020fa:	bf42      	ittt	mi
 80020fc:	6833      	ldrmi	r3, [r6, #0]
 80020fe:	3302      	addmi	r3, #2
 8002100:	6033      	strmi	r3, [r6, #0]
 8002102:	6825      	ldr	r5, [r4, #0]
 8002104:	f015 0506 	ands.w	r5, r5, #6
 8002108:	d106      	bne.n	8002118 <_printf_common+0x48>
 800210a:	f104 0a19 	add.w	sl, r4, #25
 800210e:	68e3      	ldr	r3, [r4, #12]
 8002110:	6832      	ldr	r2, [r6, #0]
 8002112:	1a9b      	subs	r3, r3, r2
 8002114:	42ab      	cmp	r3, r5
 8002116:	dc26      	bgt.n	8002166 <_printf_common+0x96>
 8002118:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800211c:	1e13      	subs	r3, r2, #0
 800211e:	6822      	ldr	r2, [r4, #0]
 8002120:	bf18      	it	ne
 8002122:	2301      	movne	r3, #1
 8002124:	0692      	lsls	r2, r2, #26
 8002126:	d42b      	bmi.n	8002180 <_printf_common+0xb0>
 8002128:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800212c:	4649      	mov	r1, r9
 800212e:	4638      	mov	r0, r7
 8002130:	47c0      	blx	r8
 8002132:	3001      	adds	r0, #1
 8002134:	d01e      	beq.n	8002174 <_printf_common+0xa4>
 8002136:	6823      	ldr	r3, [r4, #0]
 8002138:	6922      	ldr	r2, [r4, #16]
 800213a:	f003 0306 	and.w	r3, r3, #6
 800213e:	2b04      	cmp	r3, #4
 8002140:	bf02      	ittt	eq
 8002142:	68e5      	ldreq	r5, [r4, #12]
 8002144:	6833      	ldreq	r3, [r6, #0]
 8002146:	1aed      	subeq	r5, r5, r3
 8002148:	68a3      	ldr	r3, [r4, #8]
 800214a:	bf0c      	ite	eq
 800214c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002150:	2500      	movne	r5, #0
 8002152:	4293      	cmp	r3, r2
 8002154:	bfc4      	itt	gt
 8002156:	1a9b      	subgt	r3, r3, r2
 8002158:	18ed      	addgt	r5, r5, r3
 800215a:	2600      	movs	r6, #0
 800215c:	341a      	adds	r4, #26
 800215e:	42b5      	cmp	r5, r6
 8002160:	d11a      	bne.n	8002198 <_printf_common+0xc8>
 8002162:	2000      	movs	r0, #0
 8002164:	e008      	b.n	8002178 <_printf_common+0xa8>
 8002166:	2301      	movs	r3, #1
 8002168:	4652      	mov	r2, sl
 800216a:	4649      	mov	r1, r9
 800216c:	4638      	mov	r0, r7
 800216e:	47c0      	blx	r8
 8002170:	3001      	adds	r0, #1
 8002172:	d103      	bne.n	800217c <_printf_common+0xac>
 8002174:	f04f 30ff 	mov.w	r0, #4294967295
 8002178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800217c:	3501      	adds	r5, #1
 800217e:	e7c6      	b.n	800210e <_printf_common+0x3e>
 8002180:	18e1      	adds	r1, r4, r3
 8002182:	1c5a      	adds	r2, r3, #1
 8002184:	2030      	movs	r0, #48	; 0x30
 8002186:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800218a:	4422      	add	r2, r4
 800218c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002190:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002194:	3302      	adds	r3, #2
 8002196:	e7c7      	b.n	8002128 <_printf_common+0x58>
 8002198:	2301      	movs	r3, #1
 800219a:	4622      	mov	r2, r4
 800219c:	4649      	mov	r1, r9
 800219e:	4638      	mov	r0, r7
 80021a0:	47c0      	blx	r8
 80021a2:	3001      	adds	r0, #1
 80021a4:	d0e6      	beq.n	8002174 <_printf_common+0xa4>
 80021a6:	3601      	adds	r6, #1
 80021a8:	e7d9      	b.n	800215e <_printf_common+0x8e>
	...

080021ac <_printf_i>:
 80021ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80021b0:	7e0f      	ldrb	r7, [r1, #24]
 80021b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80021b4:	2f78      	cmp	r7, #120	; 0x78
 80021b6:	4691      	mov	r9, r2
 80021b8:	4680      	mov	r8, r0
 80021ba:	460c      	mov	r4, r1
 80021bc:	469a      	mov	sl, r3
 80021be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80021c2:	d807      	bhi.n	80021d4 <_printf_i+0x28>
 80021c4:	2f62      	cmp	r7, #98	; 0x62
 80021c6:	d80a      	bhi.n	80021de <_printf_i+0x32>
 80021c8:	2f00      	cmp	r7, #0
 80021ca:	f000 80d4 	beq.w	8002376 <_printf_i+0x1ca>
 80021ce:	2f58      	cmp	r7, #88	; 0x58
 80021d0:	f000 80c0 	beq.w	8002354 <_printf_i+0x1a8>
 80021d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80021d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80021dc:	e03a      	b.n	8002254 <_printf_i+0xa8>
 80021de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80021e2:	2b15      	cmp	r3, #21
 80021e4:	d8f6      	bhi.n	80021d4 <_printf_i+0x28>
 80021e6:	a101      	add	r1, pc, #4	; (adr r1, 80021ec <_printf_i+0x40>)
 80021e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80021ec:	08002245 	.word	0x08002245
 80021f0:	08002259 	.word	0x08002259
 80021f4:	080021d5 	.word	0x080021d5
 80021f8:	080021d5 	.word	0x080021d5
 80021fc:	080021d5 	.word	0x080021d5
 8002200:	080021d5 	.word	0x080021d5
 8002204:	08002259 	.word	0x08002259
 8002208:	080021d5 	.word	0x080021d5
 800220c:	080021d5 	.word	0x080021d5
 8002210:	080021d5 	.word	0x080021d5
 8002214:	080021d5 	.word	0x080021d5
 8002218:	0800235d 	.word	0x0800235d
 800221c:	08002285 	.word	0x08002285
 8002220:	08002317 	.word	0x08002317
 8002224:	080021d5 	.word	0x080021d5
 8002228:	080021d5 	.word	0x080021d5
 800222c:	0800237f 	.word	0x0800237f
 8002230:	080021d5 	.word	0x080021d5
 8002234:	08002285 	.word	0x08002285
 8002238:	080021d5 	.word	0x080021d5
 800223c:	080021d5 	.word	0x080021d5
 8002240:	0800231f 	.word	0x0800231f
 8002244:	682b      	ldr	r3, [r5, #0]
 8002246:	1d1a      	adds	r2, r3, #4
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	602a      	str	r2, [r5, #0]
 800224c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002250:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002254:	2301      	movs	r3, #1
 8002256:	e09f      	b.n	8002398 <_printf_i+0x1ec>
 8002258:	6820      	ldr	r0, [r4, #0]
 800225a:	682b      	ldr	r3, [r5, #0]
 800225c:	0607      	lsls	r7, r0, #24
 800225e:	f103 0104 	add.w	r1, r3, #4
 8002262:	6029      	str	r1, [r5, #0]
 8002264:	d501      	bpl.n	800226a <_printf_i+0xbe>
 8002266:	681e      	ldr	r6, [r3, #0]
 8002268:	e003      	b.n	8002272 <_printf_i+0xc6>
 800226a:	0646      	lsls	r6, r0, #25
 800226c:	d5fb      	bpl.n	8002266 <_printf_i+0xba>
 800226e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002272:	2e00      	cmp	r6, #0
 8002274:	da03      	bge.n	800227e <_printf_i+0xd2>
 8002276:	232d      	movs	r3, #45	; 0x2d
 8002278:	4276      	negs	r6, r6
 800227a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800227e:	485a      	ldr	r0, [pc, #360]	; (80023e8 <_printf_i+0x23c>)
 8002280:	230a      	movs	r3, #10
 8002282:	e012      	b.n	80022aa <_printf_i+0xfe>
 8002284:	682b      	ldr	r3, [r5, #0]
 8002286:	6820      	ldr	r0, [r4, #0]
 8002288:	1d19      	adds	r1, r3, #4
 800228a:	6029      	str	r1, [r5, #0]
 800228c:	0605      	lsls	r5, r0, #24
 800228e:	d501      	bpl.n	8002294 <_printf_i+0xe8>
 8002290:	681e      	ldr	r6, [r3, #0]
 8002292:	e002      	b.n	800229a <_printf_i+0xee>
 8002294:	0641      	lsls	r1, r0, #25
 8002296:	d5fb      	bpl.n	8002290 <_printf_i+0xe4>
 8002298:	881e      	ldrh	r6, [r3, #0]
 800229a:	4853      	ldr	r0, [pc, #332]	; (80023e8 <_printf_i+0x23c>)
 800229c:	2f6f      	cmp	r7, #111	; 0x6f
 800229e:	bf0c      	ite	eq
 80022a0:	2308      	moveq	r3, #8
 80022a2:	230a      	movne	r3, #10
 80022a4:	2100      	movs	r1, #0
 80022a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80022aa:	6865      	ldr	r5, [r4, #4]
 80022ac:	60a5      	str	r5, [r4, #8]
 80022ae:	2d00      	cmp	r5, #0
 80022b0:	bfa2      	ittt	ge
 80022b2:	6821      	ldrge	r1, [r4, #0]
 80022b4:	f021 0104 	bicge.w	r1, r1, #4
 80022b8:	6021      	strge	r1, [r4, #0]
 80022ba:	b90e      	cbnz	r6, 80022c0 <_printf_i+0x114>
 80022bc:	2d00      	cmp	r5, #0
 80022be:	d04b      	beq.n	8002358 <_printf_i+0x1ac>
 80022c0:	4615      	mov	r5, r2
 80022c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80022c6:	fb03 6711 	mls	r7, r3, r1, r6
 80022ca:	5dc7      	ldrb	r7, [r0, r7]
 80022cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80022d0:	4637      	mov	r7, r6
 80022d2:	42bb      	cmp	r3, r7
 80022d4:	460e      	mov	r6, r1
 80022d6:	d9f4      	bls.n	80022c2 <_printf_i+0x116>
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d10b      	bne.n	80022f4 <_printf_i+0x148>
 80022dc:	6823      	ldr	r3, [r4, #0]
 80022de:	07de      	lsls	r6, r3, #31
 80022e0:	d508      	bpl.n	80022f4 <_printf_i+0x148>
 80022e2:	6923      	ldr	r3, [r4, #16]
 80022e4:	6861      	ldr	r1, [r4, #4]
 80022e6:	4299      	cmp	r1, r3
 80022e8:	bfde      	ittt	le
 80022ea:	2330      	movle	r3, #48	; 0x30
 80022ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80022f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80022f4:	1b52      	subs	r2, r2, r5
 80022f6:	6122      	str	r2, [r4, #16]
 80022f8:	f8cd a000 	str.w	sl, [sp]
 80022fc:	464b      	mov	r3, r9
 80022fe:	aa03      	add	r2, sp, #12
 8002300:	4621      	mov	r1, r4
 8002302:	4640      	mov	r0, r8
 8002304:	f7ff fee4 	bl	80020d0 <_printf_common>
 8002308:	3001      	adds	r0, #1
 800230a:	d14a      	bne.n	80023a2 <_printf_i+0x1f6>
 800230c:	f04f 30ff 	mov.w	r0, #4294967295
 8002310:	b004      	add	sp, #16
 8002312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	f043 0320 	orr.w	r3, r3, #32
 800231c:	6023      	str	r3, [r4, #0]
 800231e:	4833      	ldr	r0, [pc, #204]	; (80023ec <_printf_i+0x240>)
 8002320:	2778      	movs	r7, #120	; 0x78
 8002322:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002326:	6823      	ldr	r3, [r4, #0]
 8002328:	6829      	ldr	r1, [r5, #0]
 800232a:	061f      	lsls	r7, r3, #24
 800232c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002330:	d402      	bmi.n	8002338 <_printf_i+0x18c>
 8002332:	065f      	lsls	r7, r3, #25
 8002334:	bf48      	it	mi
 8002336:	b2b6      	uxthmi	r6, r6
 8002338:	07df      	lsls	r7, r3, #31
 800233a:	bf48      	it	mi
 800233c:	f043 0320 	orrmi.w	r3, r3, #32
 8002340:	6029      	str	r1, [r5, #0]
 8002342:	bf48      	it	mi
 8002344:	6023      	strmi	r3, [r4, #0]
 8002346:	b91e      	cbnz	r6, 8002350 <_printf_i+0x1a4>
 8002348:	6823      	ldr	r3, [r4, #0]
 800234a:	f023 0320 	bic.w	r3, r3, #32
 800234e:	6023      	str	r3, [r4, #0]
 8002350:	2310      	movs	r3, #16
 8002352:	e7a7      	b.n	80022a4 <_printf_i+0xf8>
 8002354:	4824      	ldr	r0, [pc, #144]	; (80023e8 <_printf_i+0x23c>)
 8002356:	e7e4      	b.n	8002322 <_printf_i+0x176>
 8002358:	4615      	mov	r5, r2
 800235a:	e7bd      	b.n	80022d8 <_printf_i+0x12c>
 800235c:	682b      	ldr	r3, [r5, #0]
 800235e:	6826      	ldr	r6, [r4, #0]
 8002360:	6961      	ldr	r1, [r4, #20]
 8002362:	1d18      	adds	r0, r3, #4
 8002364:	6028      	str	r0, [r5, #0]
 8002366:	0635      	lsls	r5, r6, #24
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	d501      	bpl.n	8002370 <_printf_i+0x1c4>
 800236c:	6019      	str	r1, [r3, #0]
 800236e:	e002      	b.n	8002376 <_printf_i+0x1ca>
 8002370:	0670      	lsls	r0, r6, #25
 8002372:	d5fb      	bpl.n	800236c <_printf_i+0x1c0>
 8002374:	8019      	strh	r1, [r3, #0]
 8002376:	2300      	movs	r3, #0
 8002378:	6123      	str	r3, [r4, #16]
 800237a:	4615      	mov	r5, r2
 800237c:	e7bc      	b.n	80022f8 <_printf_i+0x14c>
 800237e:	682b      	ldr	r3, [r5, #0]
 8002380:	1d1a      	adds	r2, r3, #4
 8002382:	602a      	str	r2, [r5, #0]
 8002384:	681d      	ldr	r5, [r3, #0]
 8002386:	6862      	ldr	r2, [r4, #4]
 8002388:	2100      	movs	r1, #0
 800238a:	4628      	mov	r0, r5
 800238c:	f7fd ff28 	bl	80001e0 <memchr>
 8002390:	b108      	cbz	r0, 8002396 <_printf_i+0x1ea>
 8002392:	1b40      	subs	r0, r0, r5
 8002394:	6060      	str	r0, [r4, #4]
 8002396:	6863      	ldr	r3, [r4, #4]
 8002398:	6123      	str	r3, [r4, #16]
 800239a:	2300      	movs	r3, #0
 800239c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023a0:	e7aa      	b.n	80022f8 <_printf_i+0x14c>
 80023a2:	6923      	ldr	r3, [r4, #16]
 80023a4:	462a      	mov	r2, r5
 80023a6:	4649      	mov	r1, r9
 80023a8:	4640      	mov	r0, r8
 80023aa:	47d0      	blx	sl
 80023ac:	3001      	adds	r0, #1
 80023ae:	d0ad      	beq.n	800230c <_printf_i+0x160>
 80023b0:	6823      	ldr	r3, [r4, #0]
 80023b2:	079b      	lsls	r3, r3, #30
 80023b4:	d413      	bmi.n	80023de <_printf_i+0x232>
 80023b6:	68e0      	ldr	r0, [r4, #12]
 80023b8:	9b03      	ldr	r3, [sp, #12]
 80023ba:	4298      	cmp	r0, r3
 80023bc:	bfb8      	it	lt
 80023be:	4618      	movlt	r0, r3
 80023c0:	e7a6      	b.n	8002310 <_printf_i+0x164>
 80023c2:	2301      	movs	r3, #1
 80023c4:	4632      	mov	r2, r6
 80023c6:	4649      	mov	r1, r9
 80023c8:	4640      	mov	r0, r8
 80023ca:	47d0      	blx	sl
 80023cc:	3001      	adds	r0, #1
 80023ce:	d09d      	beq.n	800230c <_printf_i+0x160>
 80023d0:	3501      	adds	r5, #1
 80023d2:	68e3      	ldr	r3, [r4, #12]
 80023d4:	9903      	ldr	r1, [sp, #12]
 80023d6:	1a5b      	subs	r3, r3, r1
 80023d8:	42ab      	cmp	r3, r5
 80023da:	dcf2      	bgt.n	80023c2 <_printf_i+0x216>
 80023dc:	e7eb      	b.n	80023b6 <_printf_i+0x20a>
 80023de:	2500      	movs	r5, #0
 80023e0:	f104 0619 	add.w	r6, r4, #25
 80023e4:	e7f5      	b.n	80023d2 <_printf_i+0x226>
 80023e6:	bf00      	nop
 80023e8:	080027ef 	.word	0x080027ef
 80023ec:	08002800 	.word	0x08002800

080023f0 <__sflush_r>:
 80023f0:	898a      	ldrh	r2, [r1, #12]
 80023f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023f6:	4605      	mov	r5, r0
 80023f8:	0710      	lsls	r0, r2, #28
 80023fa:	460c      	mov	r4, r1
 80023fc:	d458      	bmi.n	80024b0 <__sflush_r+0xc0>
 80023fe:	684b      	ldr	r3, [r1, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	dc05      	bgt.n	8002410 <__sflush_r+0x20>
 8002404:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002406:	2b00      	cmp	r3, #0
 8002408:	dc02      	bgt.n	8002410 <__sflush_r+0x20>
 800240a:	2000      	movs	r0, #0
 800240c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002410:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002412:	2e00      	cmp	r6, #0
 8002414:	d0f9      	beq.n	800240a <__sflush_r+0x1a>
 8002416:	2300      	movs	r3, #0
 8002418:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800241c:	682f      	ldr	r7, [r5, #0]
 800241e:	6a21      	ldr	r1, [r4, #32]
 8002420:	602b      	str	r3, [r5, #0]
 8002422:	d032      	beq.n	800248a <__sflush_r+0x9a>
 8002424:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002426:	89a3      	ldrh	r3, [r4, #12]
 8002428:	075a      	lsls	r2, r3, #29
 800242a:	d505      	bpl.n	8002438 <__sflush_r+0x48>
 800242c:	6863      	ldr	r3, [r4, #4]
 800242e:	1ac0      	subs	r0, r0, r3
 8002430:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002432:	b10b      	cbz	r3, 8002438 <__sflush_r+0x48>
 8002434:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002436:	1ac0      	subs	r0, r0, r3
 8002438:	2300      	movs	r3, #0
 800243a:	4602      	mov	r2, r0
 800243c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800243e:	6a21      	ldr	r1, [r4, #32]
 8002440:	4628      	mov	r0, r5
 8002442:	47b0      	blx	r6
 8002444:	1c43      	adds	r3, r0, #1
 8002446:	89a3      	ldrh	r3, [r4, #12]
 8002448:	d106      	bne.n	8002458 <__sflush_r+0x68>
 800244a:	6829      	ldr	r1, [r5, #0]
 800244c:	291d      	cmp	r1, #29
 800244e:	d82b      	bhi.n	80024a8 <__sflush_r+0xb8>
 8002450:	4a29      	ldr	r2, [pc, #164]	; (80024f8 <__sflush_r+0x108>)
 8002452:	410a      	asrs	r2, r1
 8002454:	07d6      	lsls	r6, r2, #31
 8002456:	d427      	bmi.n	80024a8 <__sflush_r+0xb8>
 8002458:	2200      	movs	r2, #0
 800245a:	6062      	str	r2, [r4, #4]
 800245c:	04d9      	lsls	r1, r3, #19
 800245e:	6922      	ldr	r2, [r4, #16]
 8002460:	6022      	str	r2, [r4, #0]
 8002462:	d504      	bpl.n	800246e <__sflush_r+0x7e>
 8002464:	1c42      	adds	r2, r0, #1
 8002466:	d101      	bne.n	800246c <__sflush_r+0x7c>
 8002468:	682b      	ldr	r3, [r5, #0]
 800246a:	b903      	cbnz	r3, 800246e <__sflush_r+0x7e>
 800246c:	6560      	str	r0, [r4, #84]	; 0x54
 800246e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002470:	602f      	str	r7, [r5, #0]
 8002472:	2900      	cmp	r1, #0
 8002474:	d0c9      	beq.n	800240a <__sflush_r+0x1a>
 8002476:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800247a:	4299      	cmp	r1, r3
 800247c:	d002      	beq.n	8002484 <__sflush_r+0x94>
 800247e:	4628      	mov	r0, r5
 8002480:	f7ff fbea 	bl	8001c58 <_free_r>
 8002484:	2000      	movs	r0, #0
 8002486:	6360      	str	r0, [r4, #52]	; 0x34
 8002488:	e7c0      	b.n	800240c <__sflush_r+0x1c>
 800248a:	2301      	movs	r3, #1
 800248c:	4628      	mov	r0, r5
 800248e:	47b0      	blx	r6
 8002490:	1c41      	adds	r1, r0, #1
 8002492:	d1c8      	bne.n	8002426 <__sflush_r+0x36>
 8002494:	682b      	ldr	r3, [r5, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d0c5      	beq.n	8002426 <__sflush_r+0x36>
 800249a:	2b1d      	cmp	r3, #29
 800249c:	d001      	beq.n	80024a2 <__sflush_r+0xb2>
 800249e:	2b16      	cmp	r3, #22
 80024a0:	d101      	bne.n	80024a6 <__sflush_r+0xb6>
 80024a2:	602f      	str	r7, [r5, #0]
 80024a4:	e7b1      	b.n	800240a <__sflush_r+0x1a>
 80024a6:	89a3      	ldrh	r3, [r4, #12]
 80024a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024ac:	81a3      	strh	r3, [r4, #12]
 80024ae:	e7ad      	b.n	800240c <__sflush_r+0x1c>
 80024b0:	690f      	ldr	r7, [r1, #16]
 80024b2:	2f00      	cmp	r7, #0
 80024b4:	d0a9      	beq.n	800240a <__sflush_r+0x1a>
 80024b6:	0793      	lsls	r3, r2, #30
 80024b8:	680e      	ldr	r6, [r1, #0]
 80024ba:	bf08      	it	eq
 80024bc:	694b      	ldreq	r3, [r1, #20]
 80024be:	600f      	str	r7, [r1, #0]
 80024c0:	bf18      	it	ne
 80024c2:	2300      	movne	r3, #0
 80024c4:	eba6 0807 	sub.w	r8, r6, r7
 80024c8:	608b      	str	r3, [r1, #8]
 80024ca:	f1b8 0f00 	cmp.w	r8, #0
 80024ce:	dd9c      	ble.n	800240a <__sflush_r+0x1a>
 80024d0:	6a21      	ldr	r1, [r4, #32]
 80024d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80024d4:	4643      	mov	r3, r8
 80024d6:	463a      	mov	r2, r7
 80024d8:	4628      	mov	r0, r5
 80024da:	47b0      	blx	r6
 80024dc:	2800      	cmp	r0, #0
 80024de:	dc06      	bgt.n	80024ee <__sflush_r+0xfe>
 80024e0:	89a3      	ldrh	r3, [r4, #12]
 80024e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e6:	81a3      	strh	r3, [r4, #12]
 80024e8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ec:	e78e      	b.n	800240c <__sflush_r+0x1c>
 80024ee:	4407      	add	r7, r0
 80024f0:	eba8 0800 	sub.w	r8, r8, r0
 80024f4:	e7e9      	b.n	80024ca <__sflush_r+0xda>
 80024f6:	bf00      	nop
 80024f8:	dfbffffe 	.word	0xdfbffffe

080024fc <_fflush_r>:
 80024fc:	b538      	push	{r3, r4, r5, lr}
 80024fe:	690b      	ldr	r3, [r1, #16]
 8002500:	4605      	mov	r5, r0
 8002502:	460c      	mov	r4, r1
 8002504:	b913      	cbnz	r3, 800250c <_fflush_r+0x10>
 8002506:	2500      	movs	r5, #0
 8002508:	4628      	mov	r0, r5
 800250a:	bd38      	pop	{r3, r4, r5, pc}
 800250c:	b118      	cbz	r0, 8002516 <_fflush_r+0x1a>
 800250e:	6a03      	ldr	r3, [r0, #32]
 8002510:	b90b      	cbnz	r3, 8002516 <_fflush_r+0x1a>
 8002512:	f7ff fa99 	bl	8001a48 <__sinit>
 8002516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f3      	beq.n	8002506 <_fflush_r+0xa>
 800251e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002520:	07d0      	lsls	r0, r2, #31
 8002522:	d404      	bmi.n	800252e <_fflush_r+0x32>
 8002524:	0599      	lsls	r1, r3, #22
 8002526:	d402      	bmi.n	800252e <_fflush_r+0x32>
 8002528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800252a:	f7ff fb92 	bl	8001c52 <__retarget_lock_acquire_recursive>
 800252e:	4628      	mov	r0, r5
 8002530:	4621      	mov	r1, r4
 8002532:	f7ff ff5d 	bl	80023f0 <__sflush_r>
 8002536:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002538:	07da      	lsls	r2, r3, #31
 800253a:	4605      	mov	r5, r0
 800253c:	d4e4      	bmi.n	8002508 <_fflush_r+0xc>
 800253e:	89a3      	ldrh	r3, [r4, #12]
 8002540:	059b      	lsls	r3, r3, #22
 8002542:	d4e1      	bmi.n	8002508 <_fflush_r+0xc>
 8002544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002546:	f7ff fb85 	bl	8001c54 <__retarget_lock_release_recursive>
 800254a:	e7dd      	b.n	8002508 <_fflush_r+0xc>

0800254c <__swbuf_r>:
 800254c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800254e:	460e      	mov	r6, r1
 8002550:	4614      	mov	r4, r2
 8002552:	4605      	mov	r5, r0
 8002554:	b118      	cbz	r0, 800255e <__swbuf_r+0x12>
 8002556:	6a03      	ldr	r3, [r0, #32]
 8002558:	b90b      	cbnz	r3, 800255e <__swbuf_r+0x12>
 800255a:	f7ff fa75 	bl	8001a48 <__sinit>
 800255e:	69a3      	ldr	r3, [r4, #24]
 8002560:	60a3      	str	r3, [r4, #8]
 8002562:	89a3      	ldrh	r3, [r4, #12]
 8002564:	071a      	lsls	r2, r3, #28
 8002566:	d525      	bpl.n	80025b4 <__swbuf_r+0x68>
 8002568:	6923      	ldr	r3, [r4, #16]
 800256a:	b31b      	cbz	r3, 80025b4 <__swbuf_r+0x68>
 800256c:	6823      	ldr	r3, [r4, #0]
 800256e:	6922      	ldr	r2, [r4, #16]
 8002570:	1a98      	subs	r0, r3, r2
 8002572:	6963      	ldr	r3, [r4, #20]
 8002574:	b2f6      	uxtb	r6, r6
 8002576:	4283      	cmp	r3, r0
 8002578:	4637      	mov	r7, r6
 800257a:	dc04      	bgt.n	8002586 <__swbuf_r+0x3a>
 800257c:	4621      	mov	r1, r4
 800257e:	4628      	mov	r0, r5
 8002580:	f7ff ffbc 	bl	80024fc <_fflush_r>
 8002584:	b9e0      	cbnz	r0, 80025c0 <__swbuf_r+0x74>
 8002586:	68a3      	ldr	r3, [r4, #8]
 8002588:	3b01      	subs	r3, #1
 800258a:	60a3      	str	r3, [r4, #8]
 800258c:	6823      	ldr	r3, [r4, #0]
 800258e:	1c5a      	adds	r2, r3, #1
 8002590:	6022      	str	r2, [r4, #0]
 8002592:	701e      	strb	r6, [r3, #0]
 8002594:	6962      	ldr	r2, [r4, #20]
 8002596:	1c43      	adds	r3, r0, #1
 8002598:	429a      	cmp	r2, r3
 800259a:	d004      	beq.n	80025a6 <__swbuf_r+0x5a>
 800259c:	89a3      	ldrh	r3, [r4, #12]
 800259e:	07db      	lsls	r3, r3, #31
 80025a0:	d506      	bpl.n	80025b0 <__swbuf_r+0x64>
 80025a2:	2e0a      	cmp	r6, #10
 80025a4:	d104      	bne.n	80025b0 <__swbuf_r+0x64>
 80025a6:	4621      	mov	r1, r4
 80025a8:	4628      	mov	r0, r5
 80025aa:	f7ff ffa7 	bl	80024fc <_fflush_r>
 80025ae:	b938      	cbnz	r0, 80025c0 <__swbuf_r+0x74>
 80025b0:	4638      	mov	r0, r7
 80025b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025b4:	4621      	mov	r1, r4
 80025b6:	4628      	mov	r0, r5
 80025b8:	f000 f806 	bl	80025c8 <__swsetup_r>
 80025bc:	2800      	cmp	r0, #0
 80025be:	d0d5      	beq.n	800256c <__swbuf_r+0x20>
 80025c0:	f04f 37ff 	mov.w	r7, #4294967295
 80025c4:	e7f4      	b.n	80025b0 <__swbuf_r+0x64>
	...

080025c8 <__swsetup_r>:
 80025c8:	b538      	push	{r3, r4, r5, lr}
 80025ca:	4b2a      	ldr	r3, [pc, #168]	; (8002674 <__swsetup_r+0xac>)
 80025cc:	4605      	mov	r5, r0
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	460c      	mov	r4, r1
 80025d2:	b118      	cbz	r0, 80025dc <__swsetup_r+0x14>
 80025d4:	6a03      	ldr	r3, [r0, #32]
 80025d6:	b90b      	cbnz	r3, 80025dc <__swsetup_r+0x14>
 80025d8:	f7ff fa36 	bl	8001a48 <__sinit>
 80025dc:	89a3      	ldrh	r3, [r4, #12]
 80025de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80025e2:	0718      	lsls	r0, r3, #28
 80025e4:	d422      	bmi.n	800262c <__swsetup_r+0x64>
 80025e6:	06d9      	lsls	r1, r3, #27
 80025e8:	d407      	bmi.n	80025fa <__swsetup_r+0x32>
 80025ea:	2309      	movs	r3, #9
 80025ec:	602b      	str	r3, [r5, #0]
 80025ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80025f2:	81a3      	strh	r3, [r4, #12]
 80025f4:	f04f 30ff 	mov.w	r0, #4294967295
 80025f8:	e034      	b.n	8002664 <__swsetup_r+0x9c>
 80025fa:	0758      	lsls	r0, r3, #29
 80025fc:	d512      	bpl.n	8002624 <__swsetup_r+0x5c>
 80025fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002600:	b141      	cbz	r1, 8002614 <__swsetup_r+0x4c>
 8002602:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002606:	4299      	cmp	r1, r3
 8002608:	d002      	beq.n	8002610 <__swsetup_r+0x48>
 800260a:	4628      	mov	r0, r5
 800260c:	f7ff fb24 	bl	8001c58 <_free_r>
 8002610:	2300      	movs	r3, #0
 8002612:	6363      	str	r3, [r4, #52]	; 0x34
 8002614:	89a3      	ldrh	r3, [r4, #12]
 8002616:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800261a:	81a3      	strh	r3, [r4, #12]
 800261c:	2300      	movs	r3, #0
 800261e:	6063      	str	r3, [r4, #4]
 8002620:	6923      	ldr	r3, [r4, #16]
 8002622:	6023      	str	r3, [r4, #0]
 8002624:	89a3      	ldrh	r3, [r4, #12]
 8002626:	f043 0308 	orr.w	r3, r3, #8
 800262a:	81a3      	strh	r3, [r4, #12]
 800262c:	6923      	ldr	r3, [r4, #16]
 800262e:	b94b      	cbnz	r3, 8002644 <__swsetup_r+0x7c>
 8002630:	89a3      	ldrh	r3, [r4, #12]
 8002632:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800263a:	d003      	beq.n	8002644 <__swsetup_r+0x7c>
 800263c:	4621      	mov	r1, r4
 800263e:	4628      	mov	r0, r5
 8002640:	f000 f850 	bl	80026e4 <__smakebuf_r>
 8002644:	89a0      	ldrh	r0, [r4, #12]
 8002646:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800264a:	f010 0301 	ands.w	r3, r0, #1
 800264e:	d00a      	beq.n	8002666 <__swsetup_r+0x9e>
 8002650:	2300      	movs	r3, #0
 8002652:	60a3      	str	r3, [r4, #8]
 8002654:	6963      	ldr	r3, [r4, #20]
 8002656:	425b      	negs	r3, r3
 8002658:	61a3      	str	r3, [r4, #24]
 800265a:	6923      	ldr	r3, [r4, #16]
 800265c:	b943      	cbnz	r3, 8002670 <__swsetup_r+0xa8>
 800265e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002662:	d1c4      	bne.n	80025ee <__swsetup_r+0x26>
 8002664:	bd38      	pop	{r3, r4, r5, pc}
 8002666:	0781      	lsls	r1, r0, #30
 8002668:	bf58      	it	pl
 800266a:	6963      	ldrpl	r3, [r4, #20]
 800266c:	60a3      	str	r3, [r4, #8]
 800266e:	e7f4      	b.n	800265a <__swsetup_r+0x92>
 8002670:	2000      	movs	r0, #0
 8002672:	e7f7      	b.n	8002664 <__swsetup_r+0x9c>
 8002674:	2000005c 	.word	0x2000005c

08002678 <_sbrk_r>:
 8002678:	b538      	push	{r3, r4, r5, lr}
 800267a:	4d06      	ldr	r5, [pc, #24]	; (8002694 <_sbrk_r+0x1c>)
 800267c:	2300      	movs	r3, #0
 800267e:	4604      	mov	r4, r0
 8002680:	4608      	mov	r0, r1
 8002682:	602b      	str	r3, [r5, #0]
 8002684:	f7fe ffbc 	bl	8001600 <_sbrk>
 8002688:	1c43      	adds	r3, r0, #1
 800268a:	d102      	bne.n	8002692 <_sbrk_r+0x1a>
 800268c:	682b      	ldr	r3, [r5, #0]
 800268e:	b103      	cbz	r3, 8002692 <_sbrk_r+0x1a>
 8002690:	6023      	str	r3, [r4, #0]
 8002692:	bd38      	pop	{r3, r4, r5, pc}
 8002694:	200001d4 	.word	0x200001d4

08002698 <__swhatbuf_r>:
 8002698:	b570      	push	{r4, r5, r6, lr}
 800269a:	460c      	mov	r4, r1
 800269c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026a0:	2900      	cmp	r1, #0
 80026a2:	b096      	sub	sp, #88	; 0x58
 80026a4:	4615      	mov	r5, r2
 80026a6:	461e      	mov	r6, r3
 80026a8:	da0d      	bge.n	80026c6 <__swhatbuf_r+0x2e>
 80026aa:	89a3      	ldrh	r3, [r4, #12]
 80026ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80026b0:	f04f 0100 	mov.w	r1, #0
 80026b4:	bf0c      	ite	eq
 80026b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80026ba:	2340      	movne	r3, #64	; 0x40
 80026bc:	2000      	movs	r0, #0
 80026be:	6031      	str	r1, [r6, #0]
 80026c0:	602b      	str	r3, [r5, #0]
 80026c2:	b016      	add	sp, #88	; 0x58
 80026c4:	bd70      	pop	{r4, r5, r6, pc}
 80026c6:	466a      	mov	r2, sp
 80026c8:	f000 f848 	bl	800275c <_fstat_r>
 80026cc:	2800      	cmp	r0, #0
 80026ce:	dbec      	blt.n	80026aa <__swhatbuf_r+0x12>
 80026d0:	9901      	ldr	r1, [sp, #4]
 80026d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80026d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80026da:	4259      	negs	r1, r3
 80026dc:	4159      	adcs	r1, r3
 80026de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026e2:	e7eb      	b.n	80026bc <__swhatbuf_r+0x24>

080026e4 <__smakebuf_r>:
 80026e4:	898b      	ldrh	r3, [r1, #12]
 80026e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80026e8:	079d      	lsls	r5, r3, #30
 80026ea:	4606      	mov	r6, r0
 80026ec:	460c      	mov	r4, r1
 80026ee:	d507      	bpl.n	8002700 <__smakebuf_r+0x1c>
 80026f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80026f4:	6023      	str	r3, [r4, #0]
 80026f6:	6123      	str	r3, [r4, #16]
 80026f8:	2301      	movs	r3, #1
 80026fa:	6163      	str	r3, [r4, #20]
 80026fc:	b002      	add	sp, #8
 80026fe:	bd70      	pop	{r4, r5, r6, pc}
 8002700:	ab01      	add	r3, sp, #4
 8002702:	466a      	mov	r2, sp
 8002704:	f7ff ffc8 	bl	8002698 <__swhatbuf_r>
 8002708:	9900      	ldr	r1, [sp, #0]
 800270a:	4605      	mov	r5, r0
 800270c:	4630      	mov	r0, r6
 800270e:	f7ff fb0f 	bl	8001d30 <_malloc_r>
 8002712:	b948      	cbnz	r0, 8002728 <__smakebuf_r+0x44>
 8002714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002718:	059a      	lsls	r2, r3, #22
 800271a:	d4ef      	bmi.n	80026fc <__smakebuf_r+0x18>
 800271c:	f023 0303 	bic.w	r3, r3, #3
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	81a3      	strh	r3, [r4, #12]
 8002726:	e7e3      	b.n	80026f0 <__smakebuf_r+0xc>
 8002728:	89a3      	ldrh	r3, [r4, #12]
 800272a:	6020      	str	r0, [r4, #0]
 800272c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002730:	81a3      	strh	r3, [r4, #12]
 8002732:	9b00      	ldr	r3, [sp, #0]
 8002734:	6163      	str	r3, [r4, #20]
 8002736:	9b01      	ldr	r3, [sp, #4]
 8002738:	6120      	str	r0, [r4, #16]
 800273a:	b15b      	cbz	r3, 8002754 <__smakebuf_r+0x70>
 800273c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002740:	4630      	mov	r0, r6
 8002742:	f000 f81d 	bl	8002780 <_isatty_r>
 8002746:	b128      	cbz	r0, 8002754 <__smakebuf_r+0x70>
 8002748:	89a3      	ldrh	r3, [r4, #12]
 800274a:	f023 0303 	bic.w	r3, r3, #3
 800274e:	f043 0301 	orr.w	r3, r3, #1
 8002752:	81a3      	strh	r3, [r4, #12]
 8002754:	89a3      	ldrh	r3, [r4, #12]
 8002756:	431d      	orrs	r5, r3
 8002758:	81a5      	strh	r5, [r4, #12]
 800275a:	e7cf      	b.n	80026fc <__smakebuf_r+0x18>

0800275c <_fstat_r>:
 800275c:	b538      	push	{r3, r4, r5, lr}
 800275e:	4d07      	ldr	r5, [pc, #28]	; (800277c <_fstat_r+0x20>)
 8002760:	2300      	movs	r3, #0
 8002762:	4604      	mov	r4, r0
 8002764:	4608      	mov	r0, r1
 8002766:	4611      	mov	r1, r2
 8002768:	602b      	str	r3, [r5, #0]
 800276a:	f7fe ff20 	bl	80015ae <_fstat>
 800276e:	1c43      	adds	r3, r0, #1
 8002770:	d102      	bne.n	8002778 <_fstat_r+0x1c>
 8002772:	682b      	ldr	r3, [r5, #0]
 8002774:	b103      	cbz	r3, 8002778 <_fstat_r+0x1c>
 8002776:	6023      	str	r3, [r4, #0]
 8002778:	bd38      	pop	{r3, r4, r5, pc}
 800277a:	bf00      	nop
 800277c:	200001d4 	.word	0x200001d4

08002780 <_isatty_r>:
 8002780:	b538      	push	{r3, r4, r5, lr}
 8002782:	4d06      	ldr	r5, [pc, #24]	; (800279c <_isatty_r+0x1c>)
 8002784:	2300      	movs	r3, #0
 8002786:	4604      	mov	r4, r0
 8002788:	4608      	mov	r0, r1
 800278a:	602b      	str	r3, [r5, #0]
 800278c:	f7fe ff1f 	bl	80015ce <_isatty>
 8002790:	1c43      	adds	r3, r0, #1
 8002792:	d102      	bne.n	800279a <_isatty_r+0x1a>
 8002794:	682b      	ldr	r3, [r5, #0]
 8002796:	b103      	cbz	r3, 800279a <_isatty_r+0x1a>
 8002798:	6023      	str	r3, [r4, #0]
 800279a:	bd38      	pop	{r3, r4, r5, pc}
 800279c:	200001d4 	.word	0x200001d4

080027a0 <_init>:
 80027a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a2:	bf00      	nop
 80027a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027a6:	bc08      	pop	{r3}
 80027a8:	469e      	mov	lr, r3
 80027aa:	4770      	bx	lr

080027ac <_fini>:
 80027ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ae:	bf00      	nop
 80027b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b2:	bc08      	pop	{r3}
 80027b4:	469e      	mov	lr, r3
 80027b6:	4770      	bx	lr
