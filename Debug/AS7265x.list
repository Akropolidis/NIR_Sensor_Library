
AS7265x.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047c4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08004968  08004968  00014968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d5c  08004d5c  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  08004d5c  08004d5c  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d5c  08004d5c  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d5c  08004d5c  00014d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d60  08004d60  00014d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08004d64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200001cc  08004f30  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08004f30  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002f72  00000000  00000000  0002023f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000bf4  00000000  00000000  000231b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000420  00000000  00000000  00023da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002fe  00000000  00000000  000241c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fe90  00000000  00000000  000244c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003d61  00000000  00000000  00034356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000561fe  00000000  00000000  000380b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001edc  00000000  00000000  0008e2b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00090194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001cc 	.word	0x200001cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800494c 	.word	0x0800494c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d0 	.word	0x200001d0
 80001dc:	0800494c 	.word	0x0800494c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <begin>:


//Initializes the sensor with basic settings
//Returns false if sensor is not detected
bool begin()
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
	SysTick_Init();
 8000bbe:	f001 f8bf 	bl	8001d40 <SysTick_Init>
	uart2_rxtx_init();
 8000bc2:	f001 f91d 	bl	8001e00 <uart2_rxtx_init>
	I2C1_Init();
 8000bc6:	f000 fceb 	bl	80015a0 <I2C1_Init>
	fpu_enable();
 8000bca:	f000 f891 	bl	8000cf0 <fpu_enable>

	if (isConnected() == false)
 8000bce:	f000 f83f 	bl	8000c50 <isConnected>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	f083 0301 	eor.w	r3, r3, #1
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <begin+0x2a>
	{
		return false; //Check for sensor presence
 8000bde:	2300      	movs	r3, #0
 8000be0:	e031      	b.n	8000c46 <begin+0x8e>
	}

	uint8_t value = virtualReadRegister(AS7265X_DEV_SELECT_CONTROL);
 8000be2:	204f      	movs	r0, #79	; 0x4f
 8000be4:	f000 f904 	bl	8000df0 <virtualReadRegister>
 8000be8:	4603      	mov	r3, r0
 8000bea:	71fb      	strb	r3, [r7, #7]
	if ((value & 0b00110000) == 0) //Check for presence of first and second slave devices
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d101      	bne.n	8000bfa <begin+0x42>
	{
		return false;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e025      	b.n	8000c46 <begin+0x8e>
	}

	setLEDCurrent(AS7265X_LED_CURRENT_LIMIT_12_5MA, AS7265x_LED_WHITE);
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f000 fb13 	bl	8001228 <setLEDCurrent>
	setLEDCurrent(AS7265X_LED_CURRENT_LIMIT_12_5MA, AS7265x_LED_IR);
 8000c02:	2101      	movs	r1, #1
 8000c04:	2000      	movs	r0, #0
 8000c06:	f000 fb0f 	bl	8001228 <setLEDCurrent>
	setLEDCurrent(AS7265X_LED_CURRENT_LIMIT_12_5MA, AS7265x_LED_UV);
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f000 fb0b 	bl	8001228 <setLEDCurrent>

	disableLED(AS7265x_LED_WHITE); //Turn off bulb to avoid heating sensor
 8000c12:	2000      	movs	r0, #0
 8000c14:	f000 fa70 	bl	80010f8 <disableLED>
	disableLED(AS7265x_LED_IR);
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f000 fa6d 	bl	80010f8 <disableLED>
	disableLED(AS7265x_LED_UV);
 8000c1e:	2002      	movs	r0, #2
 8000c20:	f000 fa6a 	bl	80010f8 <disableLED>

	setIndicatorCurrent(AS7265X_INDICATOR_CURRENT_LIMIT_2MA);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f000 fb2a 	bl	800127e <setIndicatorCurrent>
	enableIndicator();
 8000c2a:	f000 fa32 	bl	8001092 <enableIndicator>

	setIntegrationCycles(49); //(49 + 1) * 2.78ms = 139ms. 0 to 255 is valid.
 8000c2e:	2031      	movs	r0, #49	; 0x31
 8000c30:	f000 fac6 	bl	80011c0 <setIntegrationCycles>
	//If you use Mode 2 or 3 (all the colors) then integration time is double. 139*2 = 278ms between readings.

	setGain(AS7265X_GAIN_64X);
 8000c34:	2003      	movs	r0, #3
 8000c36:	f000 fa7a 	bl	800112e <setGain>

	setMeasurementMode(AS7265X_MEASUREMENT_MODE_6CHAN_ONE_SHOT);
 8000c3a:	2003      	movs	r0, #3
 8000c3c:	f000 fa9b 	bl	8001176 <setMeasurementMode>

	enableInterrupt();
 8000c40:	f000 fb44 	bl	80012cc <enableInterrupt>

	return true;
 8000c44:	2301      	movs	r3, #1
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
	...

08000c50 <isConnected>:

//Returns TRUE if the device sends an ACK indicating it is connected
bool isConnected()
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
	uint32_t timeout = 1000; //Timeout to connect set to 1000ms
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	60fb      	str	r3, [r7, #12]
	unsigned long startTime = getMillis();
 8000c5c:	f001 f8a2 	bl	8001da4 <getMillis>
 8000c60:	60b8      	str	r0, [r7, #8]

	while ((getMillis() - startTime) < timeout)
 8000c62:	e035      	b.n	8000cd0 <isConnected+0x80>
	{
		volatile int tmp;

		/* Wait until bus not busy */
		while (I2C1->SR2 & (SR2_BUSY)){}
 8000c64:	bf00      	nop
 8000c66:	4b21      	ldr	r3, [pc, #132]	; (8000cec <isConnected+0x9c>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d1f9      	bne.n	8000c66 <isConnected+0x16>

		/* Generate start condition */
		I2C1->CR1 |= CR1_START;
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <isConnected+0x9c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a1d      	ldr	r2, [pc, #116]	; (8000cec <isConnected+0x9c>)
 8000c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7c:	6013      	str	r3, [r2, #0]

		/* Wait until start condition flag is set */
		while (!(I2C1->SR1 & (SR1_SB))){}
 8000c7e:	bf00      	nop
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <isConnected+0x9c>)
 8000c82:	695b      	ldr	r3, [r3, #20]
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d0f9      	beq.n	8000c80 <isConnected+0x30>

		/* Transmit slave address + Write (0) */
		I2C1->DR = AS7265X_WRITE_ADDR;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <isConnected+0x9c>)
 8000c8e:	2292      	movs	r2, #146	; 0x92
 8000c90:	611a      	str	r2, [r3, #16]

		/* Wait until address flag is set */
		while (!(I2C1->SR1 & (SR1_ADDR))){}
 8000c92:	bf00      	nop
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <isConnected+0x9c>)
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0f9      	beq.n	8000c94 <isConnected+0x44>

		/* Clear address flag by reading SR2 register */
		tmp = I2C1->SR2;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <isConnected+0x9c>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	607b      	str	r3, [r7, #4]

		if (I2C1->SR1 & SR1_AF)
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <isConnected+0x9c>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d006      	beq.n	8000cc0 <isConnected+0x70>
		{
			//No ACK received, address not acknowledged
			I2C1->CR1 |= CR1_STOP;  // Send STOP condition
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <isConnected+0x9c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <isConnected+0x9c>)
 8000cb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cbc:	6013      	str	r3, [r2, #0]
			continue;
 8000cbe:	e007      	b.n	8000cd0 <isConnected+0x80>
		}

		//Address acknowledged, device is connected
		I2C1->CR1 |= CR1_STOP; // Send STOP condition
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <isConnected+0x9c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a09      	ldr	r2, [pc, #36]	; (8000cec <isConnected+0x9c>)
 8000cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cca:	6013      	str	r3, [r2, #0]
		return true;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e008      	b.n	8000ce2 <isConnected+0x92>
	while ((getMillis() - startTime) < timeout)
 8000cd0:	f001 f868 	bl	8001da4 <getMillis>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d8c1      	bhi.n	8000c64 <isConnected+0x14>
	}
	//Timeout to connect has expired, hence device is not connected
	return false;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40005400 	.word	0x40005400

08000cf0 <fpu_enable>:

void fpu_enable()
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
	/*Enable Floating Point Unit: Enable CP10 and CP11 full access*/
	SCB->CPACR |= (1U<<20);
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <fpu_enable+0x50>)
 8000cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cfa:	4a11      	ldr	r2, [pc, #68]	; (8000d40 <fpu_enable+0x50>)
 8000cfc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |= (1U<<21);
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <fpu_enable+0x50>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0a:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <fpu_enable+0x50>)
 8000d0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |= (1U<<22);
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <fpu_enable+0x50>)
 8000d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1a:	4a09      	ldr	r2, [pc, #36]	; (8000d40 <fpu_enable+0x50>)
 8000d1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |= (1U<<23);
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <fpu_enable+0x50>)
 8000d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d2a:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <fpu_enable+0x50>)
 8000d2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	e000ed00 	.word	0xe000ed00

08000d44 <readRegister>:

//Reads from a given location from the AS726x
static uint8_t readRegister(uint8_t addr)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
	char data = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	73fb      	strb	r3, [r7, #15]
	I2C1_byteRead(AS7265X_ADDR, addr, &data);
 8000d52:	f107 020f 	add.w	r2, r7, #15
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	2049      	movs	r0, #73	; 0x49
 8000d5c:	f000 fcc4 	bl	80016e8 <I2C1_byteRead>
	return data;
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <writeRegister>:

//Write a value to a given location on the AS726x
static void writeRegister(uint8_t addr, uint8_t val)
{
 8000d6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	460a      	mov	r2, r1
 8000d76:	71fb      	strb	r3, [r7, #7]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	71bb      	strb	r3, [r7, #6]
 8000d7c:	466b      	mov	r3, sp
 8000d7e:	461e      	mov	r6, r3
	uint8_t bufferSize = 1;
 8000d80:	2301      	movs	r3, #1
 8000d82:	75fb      	strb	r3, [r7, #23]
	char data[bufferSize];
 8000d84:	7df9      	ldrb	r1, [r7, #23]
 8000d86:	460b      	mov	r3, r1
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	b2cb      	uxtb	r3, r1
 8000d8e:	2200      	movs	r2, #0
 8000d90:	4698      	mov	r8, r3
 8000d92:	4691      	mov	r9, r2
 8000d94:	f04f 0200 	mov.w	r2, #0
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000da0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000da4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000da8:	b2cb      	uxtb	r3, r1
 8000daa:	2200      	movs	r2, #0
 8000dac:	461c      	mov	r4, r3
 8000dae:	4615      	mov	r5, r2
 8000db0:	f04f 0200 	mov.w	r2, #0
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	00eb      	lsls	r3, r5, #3
 8000dba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000dbe:	00e2      	lsls	r2, r4, #3
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	3307      	adds	r3, #7
 8000dc4:	08db      	lsrs	r3, r3, #3
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	ebad 0d03 	sub.w	sp, sp, r3
 8000dcc:	466b      	mov	r3, sp
 8000dce:	3300      	adds	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]

	data[0] = val;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	79ba      	ldrb	r2, [r7, #6]
 8000dd6:	701a      	strb	r2, [r3, #0]
	I2C1_burstWrite(AS7265X_ADDR, addr, bufferSize, data);
 8000dd8:	7dfa      	ldrb	r2, [r7, #23]
 8000dda:	79f9      	ldrb	r1, [r7, #7]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2049      	movs	r0, #73	; 0x49
 8000de0:	f000 fcfc 	bl	80017dc <I2C1_burstWrite>
 8000de4:	46b5      	mov	sp, r6
}
 8000de6:	bf00      	nop
 8000de8:	371c      	adds	r7, #28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000df0 <virtualReadRegister>:

//Read from a virtual register on the AS7265x
static uint8_t virtualReadRegister(uint8_t virtualAddr)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
	volatile uint8_t status, data;

	//Do a preliminary check of the read register
	status = readRegister(AS7265X_STATUS_REG);
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff ffa2 	bl	8000d44 <readRegister>
 8000e00:	4603      	mov	r3, r0
 8000e02:	72fb      	strb	r3, [r7, #11]
	if((status & AS7265X_RX_VALID) != 0) //Data byte available in READ register
 8000e04:	7afb      	ldrb	r3, [r7, #11]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	f003 0301 	and.w	r3, r3, #1
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d002      	beq.n	8000e16 <virtualReadRegister+0x26>
	{
		readRegister(AS7265X_READ_REG); //Read the byte but do nothing
 8000e10:	2002      	movs	r0, #2
 8000e12:	f7ff ff97 	bl	8000d44 <readRegister>
	}

	//Wait for WRITE flag to clear
	unsigned long startTime = getMillis();
 8000e16:	f000 ffc5 	bl	8001da4 <getMillis>
 8000e1a:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if((getMillis() - startTime) > maxWaitTime)
 8000e1c:	f000 ffc2 	bl	8001da4 <getMillis>
 8000e20:	4602      	mov	r2, r0
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	4a25      	ldr	r2, [pc, #148]	; (8000ebc <virtualReadRegister+0xcc>)
 8000e28:	8812      	ldrh	r2, [r2, #0]
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d904      	bls.n	8000e38 <virtualReadRegister+0x48>
		{
			printf("Sensor failed to respond \n\r");
 8000e2e:	4824      	ldr	r0, [pc, #144]	; (8000ec0 <virtualReadRegister+0xd0>)
 8000e30:	f001 fea6 	bl	8002b80 <iprintf>
			return 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	e03c      	b.n	8000eb2 <virtualReadRegister+0xc2>
		}
		//Read slave I2C status to see if the read register is ready
		status = readRegister(AS7265X_STATUS_REG);
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff ff83 	bl	8000d44 <readRegister>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	72fb      	strb	r3, [r7, #11]
		if((status & AS7265X_TX_VALID) == 0) //New data may be written to WRITE register
 8000e42:	7afb      	ldrb	r3, [r7, #11]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <virtualReadRegister+0x66>
		{
			break;
		}
		delayMillis(AS7265X_POLLING_DELAY); //Delay for 5 ms before checking for virtual register changes
 8000e4e:	2005      	movs	r0, #5
 8000e50:	f000 ffb4 	bl	8001dbc <delayMillis>
		if((getMillis() - startTime) > maxWaitTime)
 8000e54:	e7e2      	b.n	8000e1c <virtualReadRegister+0x2c>
			break;
 8000e56:	bf00      	nop
	}

	//Send the virtual register address (disabling bit 7 to indicate a read).
	writeRegister(AS7265X_WRITE_REG, virtualAddr);
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f7ff ff84 	bl	8000d6a <writeRegister>

	//Wait for READ flag to be set
	startTime = getMillis();
 8000e62:	f000 ff9f 	bl	8001da4 <getMillis>
 8000e66:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if((getMillis() - startTime) > maxWaitTime)
 8000e68:	f000 ff9c 	bl	8001da4 <getMillis>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <virtualReadRegister+0xcc>)
 8000e74:	8812      	ldrh	r2, [r2, #0]
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d904      	bls.n	8000e84 <virtualReadRegister+0x94>
		{
			printf("Sensor failed to respond \n\r");
 8000e7a:	4811      	ldr	r0, [pc, #68]	; (8000ec0 <virtualReadRegister+0xd0>)
 8000e7c:	f001 fe80 	bl	8002b80 <iprintf>
			return 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	e016      	b.n	8000eb2 <virtualReadRegister+0xc2>
		}
		//Read slave I2C status to see if the read register is ready
		status = readRegister(AS7265X_STATUS_REG);
 8000e84:	2000      	movs	r0, #0
 8000e86:	f7ff ff5d 	bl	8000d44 <readRegister>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	72fb      	strb	r3, [r7, #11]
		if((status & AS7265X_RX_VALID) != 0) //Data byte available in READ register
 8000e8e:	7afb      	ldrb	r3, [r7, #11]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d103      	bne.n	8000ea2 <virtualReadRegister+0xb2>
		{
			break;
		}
		delayMillis(AS7265X_POLLING_DELAY); //Delay for 5 ms before checking for virtual register changes
 8000e9a:	2005      	movs	r0, #5
 8000e9c:	f000 ff8e 	bl	8001dbc <delayMillis>
		if((getMillis() - startTime) > maxWaitTime)
 8000ea0:	e7e2      	b.n	8000e68 <virtualReadRegister+0x78>
			break;
 8000ea2:	bf00      	nop
	}

	data = readRegister(AS7265X_READ_REG);
 8000ea4:	2002      	movs	r0, #2
 8000ea6:	f7ff ff4d 	bl	8000d44 <readRegister>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	72bb      	strb	r3, [r7, #10]
	return data;
 8000eae:	7abb      	ldrb	r3, [r7, #10]
 8000eb0:	b2db      	uxtb	r3, r3
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	08004968 	.word	0x08004968

08000ec4 <virtualWriteRegister>:

//Write to a virtual register in the AS7265x
static void virtualWriteRegister(uint8_t virtualAddr, uint8_t dataToWrite)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	460a      	mov	r2, r1
 8000ece:	71fb      	strb	r3, [r7, #7]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	71bb      	strb	r3, [r7, #6]
	volatile uint8_t status;

	//Wait for WRITE register to be empty
	unsigned long startTime = getMillis();
 8000ed4:	f000 ff66 	bl	8001da4 <getMillis>
 8000ed8:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if((getMillis() - startTime) > maxWaitTime)
 8000eda:	f000 ff63 	bl	8001da4 <getMillis>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	4a23      	ldr	r2, [pc, #140]	; (8000f74 <virtualWriteRegister+0xb0>)
 8000ee6:	8812      	ldrh	r2, [r2, #0]
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d903      	bls.n	8000ef4 <virtualWriteRegister+0x30>
		{
			printf("Sensor failed to respond \n\r");
 8000eec:	4822      	ldr	r0, [pc, #136]	; (8000f78 <virtualWriteRegister+0xb4>)
 8000eee:	f001 fe47 	bl	8002b80 <iprintf>
			return;
 8000ef2:	e03c      	b.n	8000f6e <virtualWriteRegister+0xaa>
		}
		//Read slave I2C status to see if the write register is ready
		status = readRegister(AS7265X_STATUS_REG);
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f7ff ff25 	bl	8000d44 <readRegister>
 8000efa:	4603      	mov	r3, r0
 8000efc:	72fb      	strb	r3, [r7, #11]
		if((status & AS7265X_TX_VALID) == 0) //New data may be written to WRITE register
 8000efe:	7afb      	ldrb	r3, [r7, #11]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <virtualWriteRegister+0x4e>
		{
			break;
		}
		delayMillis(AS7265X_POLLING_DELAY); //Delay for 5 ms before checking for virtual register changes
 8000f0a:	2005      	movs	r0, #5
 8000f0c:	f000 ff56 	bl	8001dbc <delayMillis>
		if((getMillis() - startTime) > maxWaitTime)
 8000f10:	e7e3      	b.n	8000eda <virtualWriteRegister+0x16>
			break;
 8000f12:	bf00      	nop
	}

	//Send the virtual register address (enabling bit 7 to indicate a write).
	writeRegister(AS7265X_WRITE_REG, (virtualAddr | 1 << 7));
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f7ff ff23 	bl	8000d6a <writeRegister>

	//Wait for WRITE register to be empty
	startTime = getMillis();
 8000f24:	f000 ff3e 	bl	8001da4 <getMillis>
 8000f28:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if((getMillis() - startTime) > maxWaitTime)
 8000f2a:	f000 ff3b 	bl	8001da4 <getMillis>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <virtualWriteRegister+0xb0>)
 8000f36:	8812      	ldrh	r2, [r2, #0]
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d903      	bls.n	8000f44 <virtualWriteRegister+0x80>
		{
			printf("Sensor failed to respond \n\r");
 8000f3c:	480e      	ldr	r0, [pc, #56]	; (8000f78 <virtualWriteRegister+0xb4>)
 8000f3e:	f001 fe1f 	bl	8002b80 <iprintf>
			return;
 8000f42:	e014      	b.n	8000f6e <virtualWriteRegister+0xaa>
		}
		//Read slave I2C status to see if the write register is ready
		status = readRegister(AS7265X_STATUS_REG);
 8000f44:	2000      	movs	r0, #0
 8000f46:	f7ff fefd 	bl	8000d44 <readRegister>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	72fb      	strb	r3, [r7, #11]
		if((status & AS7265X_TX_VALID) == 0) //New data may be written to WRITE register
 8000f4e:	7afb      	ldrb	r3, [r7, #11]
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <virtualWriteRegister+0x9e>
		{
			break;
		}
		delayMillis(AS7265X_POLLING_DELAY); //Delay for 5 ms before checking for virtual register changes
 8000f5a:	2005      	movs	r0, #5
 8000f5c:	f000 ff2e 	bl	8001dbc <delayMillis>
		if((getMillis() - startTime) > maxWaitTime)
 8000f60:	e7e3      	b.n	8000f2a <virtualWriteRegister+0x66>
			break;
 8000f62:	bf00      	nop
	}

	//Send the data to complete the operation
	writeRegister(AS7265X_WRITE_REG, dataToWrite);
 8000f64:	79bb      	ldrb	r3, [r7, #6]
 8000f66:	4619      	mov	r1, r3
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f7ff fefe 	bl	8000d6a <writeRegister>
}
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000000 	.word	0x20000000
 8000f78:	08004968 	.word	0x08004968

08000f7c <selectDevice>:

//As we read various registers we have to point at the master or first/second slave
static void selectDevice(uint8_t device)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
	virtualWriteRegister(AS7265X_DEV_SELECT_CONTROL, device);
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	204f      	movs	r0, #79	; 0x4f
 8000f8c:	f7ff ff9a 	bl	8000ec4 <virtualWriteRegister>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <convertBytesToFloat>:

//Given 4 bytes (size of float and uint32_t) and returns the floating point value
float convertBytesToFloat(uint32_t myLong)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
  float myFloat;
  memcpy(&myFloat, &myLong, 4); //Copy bytes into a float
 8000fa2:	60fb      	str	r3, [r7, #12]
  return myFloat;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	ee07 3a90 	vmov	s15, r3
}
 8000faa:	eeb0 0a67 	vmov.f32	s0, s15
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <getChannel>:

//Get the 16-bit raw values stored in the high and low registers of each channel
static uint16_t getChannel(uint8_t channelRegister, uint8_t device)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	460a      	mov	r2, r1
 8000fc2:	71fb      	strb	r3, [r7, #7]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	71bb      	strb	r3, [r7, #6]
	selectDevice(device);
 8000fc8:	79bb      	ldrb	r3, [r7, #6]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ffd6 	bl	8000f7c <selectDevice>

	uint16_t colorData = virtualReadRegister(channelRegister) << 8; //XXXXXXXX-00000000 High uint8_t
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff0c 	bl	8000df0 <virtualReadRegister>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	021b      	lsls	r3, r3, #8
 8000fde:	81fb      	strh	r3, [r7, #14]
	colorData |= virtualReadRegister(channelRegister + 1); //Low uint8_t
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff02 	bl	8000df0 <virtualReadRegister>
 8000fec:	4603      	mov	r3, r0
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	89fb      	ldrh	r3, [r7, #14]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	81fb      	strh	r3, [r7, #14]
	return colorData;
 8000ff6:	89fb      	ldrh	r3, [r7, #14]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <getCalibratedValue>:

//Given an address, read four consecutive bytes and return the floating point calibrated value
static float getCalibratedValue(uint8_t calAddress, uint8_t device)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	460a      	mov	r2, r1
 800100a:	71fb      	strb	r3, [r7, #7]
 800100c:	4613      	mov	r3, r2
 800100e:	71bb      	strb	r3, [r7, #6]
	selectDevice(device);
 8001010:	79bb      	ldrb	r3, [r7, #6]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ffb2 	bl	8000f7c <selectDevice>

	uint8_t chan0, chan1, chan2, chan3;
	chan0 = virtualReadRegister(calAddress + 0);
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fee8 	bl	8000df0 <virtualReadRegister>
 8001020:	4603      	mov	r3, r0
 8001022:	73fb      	strb	r3, [r7, #15]
	chan1 = virtualReadRegister(calAddress + 1);
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	3301      	adds	r3, #1
 8001028:	b2db      	uxtb	r3, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fee0 	bl	8000df0 <virtualReadRegister>
 8001030:	4603      	mov	r3, r0
 8001032:	73bb      	strb	r3, [r7, #14]
	chan2 = virtualReadRegister(calAddress + 2);
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	3302      	adds	r3, #2
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fed8 	bl	8000df0 <virtualReadRegister>
 8001040:	4603      	mov	r3, r0
 8001042:	737b      	strb	r3, [r7, #13]
	chan3 = virtualReadRegister(calAddress + 3);
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	3303      	adds	r3, #3
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff fed0 	bl	8000df0 <virtualReadRegister>
 8001050:	4603      	mov	r3, r0
 8001052:	733b      	strb	r3, [r7, #12]

	//Channel calibrated values are stored big-endian
	uint32_t calBytes = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
	calBytes |= ((uint32_t)chan0 << (8 * 3)); //bits 24-31
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	061b      	lsls	r3, r3, #24
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	4313      	orrs	r3, r2
 8001060:	60bb      	str	r3, [r7, #8]
	calBytes |= ((uint32_t)chan1 << (8 * 2)); //bits 16-23
 8001062:	7bbb      	ldrb	r3, [r7, #14]
 8001064:	041b      	lsls	r3, r3, #16
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	4313      	orrs	r3, r2
 800106a:	60bb      	str	r3, [r7, #8]
	calBytes |= ((uint32_t)chan2 << (8 * 1)); //bits 8-15
 800106c:	7b7b      	ldrb	r3, [r7, #13]
 800106e:	021b      	lsls	r3, r3, #8
 8001070:	68ba      	ldr	r2, [r7, #8]
 8001072:	4313      	orrs	r3, r2
 8001074:	60bb      	str	r3, [r7, #8]
	calBytes |= ((uint32_t)chan3 << (8 * 0)); //bits 0-7
 8001076:	7b3b      	ldrb	r3, [r7, #12]
 8001078:	68ba      	ldr	r2, [r7, #8]
 800107a:	4313      	orrs	r3, r2
 800107c:	60bb      	str	r3, [r7, #8]

	return convertBytesToFloat(calBytes);
 800107e:	68b8      	ldr	r0, [r7, #8]
 8001080:	f7ff ff8a 	bl	8000f98 <convertBytesToFloat>
 8001084:	eef0 7a40 	vmov.f32	s15, s0

4. 00000000 00000000 00000000 ZZZZZZZZ
a. 00000000 00000000 00000000 ZZZZZZZZ
b. calBytes = WWWWWWWW XXXXXXXX YYYYYYYY ZZZZZZZZ
*/
}
 8001088:	eeb0 0a67 	vmov.f32	s0, s15
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <enableIndicator>:
	return average;
}

//Enable the on-board indicator LED on the NIR master device, Blue status LED
void enableIndicator()
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
	selectDevice(AS72651_NIR);
 8001098:	2000      	movs	r0, #0
 800109a:	f7ff ff6f 	bl	8000f7c <selectDevice>

	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read existing state
 800109e:	2007      	movs	r0, #7
 80010a0:	f7ff fea6 	bl	8000df0 <virtualReadRegister>
 80010a4:	4603      	mov	r3, r0
 80010a6:	71fb      	strb	r3, [r7, #7]
	value |= (1U << 0); //Set ENABLE LED_INT bit (bit 0)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	71fb      	strb	r3, [r7, #7]
	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to enable the LED indicator
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	4619      	mov	r1, r3
 80010b4:	2007      	movs	r0, #7
 80010b6:	f7ff ff05 	bl	8000ec4 <virtualWriteRegister>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <enableLED>:
	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to disable the LED indicator
}

//Enable the LED or bulb on a given device
void enableLED(uint8_t device)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
	selectDevice(device);
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ff54 	bl	8000f7c <selectDevice>

	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read existing state
 80010d4:	2007      	movs	r0, #7
 80010d6:	f7ff fe8b 	bl	8000df0 <virtualReadRegister>
 80010da:	4603      	mov	r3, r0
 80010dc:	73fb      	strb	r3, [r7, #15]
	value |= (1U << 3); //Set ENABLE LED_DRV bit (bit 3)
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	73fb      	strb	r3, [r7, #15]
	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to enable the LED driver
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	4619      	mov	r1, r3
 80010ea:	2007      	movs	r0, #7
 80010ec:	f7ff feea 	bl	8000ec4 <virtualWriteRegister>
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <disableLED>:

//Disable the LED or bulb on a given device
void disableLED(uint8_t device)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
	selectDevice(device);
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff39 	bl	8000f7c <selectDevice>

	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read existing state
 800110a:	2007      	movs	r0, #7
 800110c:	f7ff fe70 	bl	8000df0 <virtualReadRegister>
 8001110:	4603      	mov	r3, r0
 8001112:	73fb      	strb	r3, [r7, #15]
	value &= ~(1U << 3); //Reset ENABLE LED_DRV bit (bit 3)
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	f023 0308 	bic.w	r3, r3, #8
 800111a:	73fb      	strb	r3, [r7, #15]
	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to disable the LED driver
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	4619      	mov	r1, r3
 8001120:	2007      	movs	r0, #7
 8001122:	f7ff fecf 	bl	8000ec4 <virtualWriteRegister>
}
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <setGain>:
//Gain 0: 1x
//Gain 1: 3.7x (Default)
//Gain 2: 16x
//Gain 3: 64x
void setGain(uint8_t gain)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b084      	sub	sp, #16
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	71fb      	strb	r3, [r7, #7]
	if (gain > AS7265X_GAIN_64X)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2b03      	cmp	r3, #3
 800113c:	d901      	bls.n	8001142 <setGain+0x14>
	{
		gain = AS7265X_GAIN_64X;
 800113e:	2303      	movs	r3, #3
 8001140:	71fb      	strb	r3, [r7, #7]
	}
	uint8_t value = virtualReadRegister(AS7265X_CONFIG); //Read existing state
 8001142:	2004      	movs	r0, #4
 8001144:	f7ff fe54 	bl	8000df0 <virtualReadRegister>
 8001148:	4603      	mov	r3, r0
 800114a:	73fb      	strb	r3, [r7, #15]
	value &= 0b11001111; //Clear GAIN bits
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001152:	73fb      	strb	r3, [r7, #15]
	value |= (gain << 4); //Set GAIN bits with user's choice
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	b25a      	sxtb	r2, r3
 800115a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115e:	4313      	orrs	r3, r2
 8001160:	b25b      	sxtb	r3, r3
 8001162:	73fb      	strb	r3, [r7, #15]

	virtualWriteRegister(AS7265X_CONFIG, value); //Write value to config register
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	4619      	mov	r1, r3
 8001168:	2004      	movs	r0, #4
 800116a:	f7ff feab 	bl	8000ec4 <virtualWriteRegister>
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <setMeasurementMode>:
//Mode 0: 4 channels
//Mode 1: 4 channels
//Mode 2: All 6 channels (Default)
//Mode 3: One shot operation of mode 2
void setMeasurementMode(uint8_t mode)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b084      	sub	sp, #16
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	71fb      	strb	r3, [r7, #7]
	if (mode > AS7265X_MEASUREMENT_MODE_6CHAN_ONE_SHOT)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b03      	cmp	r3, #3
 8001184:	d901      	bls.n	800118a <setMeasurementMode+0x14>
	{
		mode = AS7265X_MEASUREMENT_MODE_6CHAN_ONE_SHOT; //Limit mode to 2 bits
 8001186:	2303      	movs	r3, #3
 8001188:	71fb      	strb	r3, [r7, #7]
	}
	uint8_t value = virtualReadRegister(AS7265X_CONFIG); //Read existing state
 800118a:	2004      	movs	r0, #4
 800118c:	f7ff fe30 	bl	8000df0 <virtualReadRegister>
 8001190:	4603      	mov	r3, r0
 8001192:	73fb      	strb	r3, [r7, #15]
	value &= 0b11110011; //Clear BANK bits
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	f023 030c 	bic.w	r3, r3, #12
 800119a:	73fb      	strb	r3, [r7, #15]
	value |= (mode << 2); //Set BANK bits with user's choice
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	b25a      	sxtb	r2, r3
 80011a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b25b      	sxtb	r3, r3
 80011aa:	73fb      	strb	r3, [r7, #15]

	virtualWriteRegister(AS7265X_CONFIG, value); //Write value to config register
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	4619      	mov	r1, r3
 80011b0:	2004      	movs	r0, #4
 80011b2:	f7ff fe87 	bl	8000ec4 <virtualWriteRegister>
}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <setIntegrationCycles>:
//Set the Integration cycles with a byte from 0 - 255 to set the sensitivity
//Every 2.78ms of integration increases the resolution of the ADC by 2^10 = 1024 counts
//Longer integration time means a more accurate measurement
//16-bit ADC so full sensitivity scale is clamped at 2^16 = 65536
void setIntegrationCycles(uint8_t cycleValue)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
	if (cycleValue > 255)
	{
		cycleValue = 255; //Limit cycleValue to a byte 2^8 (0-255)
	}
	maxWaitTime = (int)((cycleValue + 1) * 2.78 * 1.5); //Wait for integration time + 50%
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	3301      	adds	r3, #1
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff f9b0 	bl	8000534 <__aeabi_i2d>
 80011d4:	a312      	add	r3, pc, #72	; (adr r3, 8001220 <setIntegrationCycles+0x60>)
 80011d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011da:	f7ff fa15 	bl	8000608 <__aeabi_dmul>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <setIntegrationCycles+0x58>)
 80011ec:	f7ff fa0c 	bl	8000608 <__aeabi_dmul>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4610      	mov	r0, r2
 80011f6:	4619      	mov	r1, r3
 80011f8:	f7ff fcb6 	bl	8000b68 <__aeabi_d2iz>
 80011fc:	4603      	mov	r3, r0
 80011fe:	b29a      	uxth	r2, r3
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <setIntegrationCycles+0x5c>)
 8001202:	801a      	strh	r2, [r3, #0]

	virtualWriteRegister(AS7265X_INTEGRATION_TIME, cycleValue);
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	4619      	mov	r1, r3
 8001208:	2005      	movs	r0, #5
 800120a:	f7ff fe5b 	bl	8000ec4 <virtualWriteRegister>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	3ff80000 	.word	0x3ff80000
 800121c:	20000000 	.word	0x20000000
 8001220:	a3d70a3d 	.word	0xa3d70a3d
 8001224:	40063d70 	.word	0x40063d70

08001228 <setLEDCurrent>:
//Current 0: 12.5mA (Default)
//Current 1: 25mA
//Current 2: 50mA
//Current 3: 100mA
void setLEDCurrent(uint8_t current, uint8_t device)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	460a      	mov	r2, r1
 8001232:	71fb      	strb	r3, [r7, #7]
 8001234:	4613      	mov	r3, r2
 8001236:	71bb      	strb	r3, [r7, #6]
	selectDevice(device);
 8001238:	79bb      	ldrb	r3, [r7, #6]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fe9e 	bl	8000f7c <selectDevice>

	if (current > AS7265X_LED_CURRENT_LIMIT_100MA)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2b03      	cmp	r3, #3
 8001244:	d901      	bls.n	800124a <setLEDCurrent+0x22>
	{
		current = AS7265X_LED_CURRENT_LIMIT_100MA;
 8001246:	2303      	movs	r3, #3
 8001248:	71fb      	strb	r3, [r7, #7]
	}
	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read existing state
 800124a:	2007      	movs	r0, #7
 800124c:	f7ff fdd0 	bl	8000df0 <virtualReadRegister>
 8001250:	4603      	mov	r3, r0
 8001252:	73fb      	strb	r3, [r7, #15]
	value &= 0b11001111; //Bitwise ANDing to reset LED current limit bits (bit5:4)
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800125a:	73fb      	strb	r3, [r7, #15]
	value |= (current << 4); //Set LED current limit
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	011b      	lsls	r3, r3, #4
 8001260:	b25a      	sxtb	r2, r3
 8001262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001266:	4313      	orrs	r3, r2
 8001268:	b25b      	sxtb	r3, r3
 800126a:	73fb      	strb	r3, [r7, #15]

	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to set the LED current limit
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	4619      	mov	r1, r3
 8001270:	2007      	movs	r0, #7
 8001272:	f7ff fe27 	bl	8000ec4 <virtualWriteRegister>
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <setIndicatorCurrent>:
//Current 0: 1mA
//Current 1: 2mA (Default)
//Current 2: 4mA
//Current 3: 8mA
void setIndicatorCurrent(uint8_t current)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b084      	sub	sp, #16
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
	selectDevice(AS72651_NIR);
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff fe77 	bl	8000f7c <selectDevice>

	if (current > AS7265X_INDICATOR_CURRENT_LIMIT_8MA)
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b03      	cmp	r3, #3
 8001292:	d901      	bls.n	8001298 <setIndicatorCurrent+0x1a>
	{
		current = AS7265X_INDICATOR_CURRENT_LIMIT_8MA;
 8001294:	2303      	movs	r3, #3
 8001296:	71fb      	strb	r3, [r7, #7]
	}
	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read existing state
 8001298:	2007      	movs	r0, #7
 800129a:	f7ff fda9 	bl	8000df0 <virtualReadRegister>
 800129e:	4603      	mov	r3, r0
 80012a0:	73fb      	strb	r3, [r7, #15]
	value &= 0b11111001; //Bitwise ANDing to reset indicator current limit bits (bit2:1)
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	f023 0306 	bic.w	r3, r3, #6
 80012a8:	73fb      	strb	r3, [r7, #15]
	value |= (current << 1); //Set indicator current limit
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	b25a      	sxtb	r2, r3
 80012b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	b25b      	sxtb	r3, r3
 80012b8:	73fb      	strb	r3, [r7, #15]

	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to set the LED indicator current limit
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	4619      	mov	r1, r3
 80012be:	2007      	movs	r0, #7
 80012c0:	f7ff fe00 	bl	8000ec4 <virtualWriteRegister>
}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <enableInterrupt>:

//Enable interrupt pin
void enableInterrupt()
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0

	uint8_t value = virtualReadRegister(AS7265X_CONFIG); //Read existing state
 80012d2:	2004      	movs	r0, #4
 80012d4:	f7ff fd8c 	bl	8000df0 <virtualReadRegister>
 80012d8:	4603      	mov	r3, r0
 80012da:	71fb      	strb	r3, [r7, #7]
	value |= (1U << 6); //Set INT bit (bit 6)
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012e2:	71fb      	strb	r3, [r7, #7]
	virtualWriteRegister(AS7265X_CONFIG, value); //Write value to config register to enable the interrupt pin
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	4619      	mov	r1, r3
 80012e8:	2004      	movs	r0, #4
 80012ea:	f7ff fdeb 	bl	8000ec4 <virtualWriteRegister>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <getRawA>:


/* Obtaining various raw light readings */
//UV Readings
uint16_t getRawA()
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_R_G_A, AS72653_UV));
 80012fa:	2102      	movs	r1, #2
 80012fc:	2008      	movs	r0, #8
 80012fe:	f7ff fe5b 	bl	8000fb8 <getChannel>
 8001302:	4603      	mov	r3, r0
}
 8001304:	4618      	mov	r0, r3
 8001306:	bd80      	pop	{r7, pc}

08001308 <getRawB>:
uint16_t getRawB()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_S_H_B, AS72653_UV));
 800130c:	2102      	movs	r1, #2
 800130e:	200a      	movs	r0, #10
 8001310:	f7ff fe52 	bl	8000fb8 <getChannel>
 8001314:	4603      	mov	r3, r0
}
 8001316:	4618      	mov	r0, r3
 8001318:	bd80      	pop	{r7, pc}

0800131a <getRawC>:
uint16_t getRawC()
{
 800131a:	b580      	push	{r7, lr}
 800131c:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_T_I_C, AS72653_UV));
 800131e:	2102      	movs	r1, #2
 8001320:	200c      	movs	r0, #12
 8001322:	f7ff fe49 	bl	8000fb8 <getChannel>
 8001326:	4603      	mov	r3, r0
}
 8001328:	4618      	mov	r0, r3
 800132a:	bd80      	pop	{r7, pc}

0800132c <getRawD>:
uint16_t getRawD()
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_U_J_D, AS72653_UV));
 8001330:	2102      	movs	r1, #2
 8001332:	200e      	movs	r0, #14
 8001334:	f7ff fe40 	bl	8000fb8 <getChannel>
 8001338:	4603      	mov	r3, r0
}
 800133a:	4618      	mov	r0, r3
 800133c:	bd80      	pop	{r7, pc}

0800133e <getRawE>:
uint16_t getRawE()
{
 800133e:	b580      	push	{r7, lr}
 8001340:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_V_K_E, AS72653_UV));
 8001342:	2102      	movs	r1, #2
 8001344:	2010      	movs	r0, #16
 8001346:	f7ff fe37 	bl	8000fb8 <getChannel>
 800134a:	4603      	mov	r3, r0
}
 800134c:	4618      	mov	r0, r3
 800134e:	bd80      	pop	{r7, pc}

08001350 <getRawF>:
uint16_t getRawF()
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_W_L_F, AS72653_UV));
 8001354:	2102      	movs	r1, #2
 8001356:	2012      	movs	r0, #18
 8001358:	f7ff fe2e 	bl	8000fb8 <getChannel>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	bd80      	pop	{r7, pc}

08001362 <getRawG>:

//VISIBLE Readings
uint16_t getRawG()
{
 8001362:	b580      	push	{r7, lr}
 8001364:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_R_G_A, AS72652_VISIBLE));
 8001366:	2101      	movs	r1, #1
 8001368:	2008      	movs	r0, #8
 800136a:	f7ff fe25 	bl	8000fb8 <getChannel>
 800136e:	4603      	mov	r3, r0
}
 8001370:	4618      	mov	r0, r3
 8001372:	bd80      	pop	{r7, pc}

08001374 <getRawH>:
uint16_t getRawH()
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_S_H_B, AS72652_VISIBLE));
 8001378:	2101      	movs	r1, #1
 800137a:	200a      	movs	r0, #10
 800137c:	f7ff fe1c 	bl	8000fb8 <getChannel>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	bd80      	pop	{r7, pc}

08001386 <getRawI>:
uint16_t getRawI()
{
 8001386:	b580      	push	{r7, lr}
 8001388:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_T_I_C, AS72652_VISIBLE));
 800138a:	2101      	movs	r1, #1
 800138c:	200c      	movs	r0, #12
 800138e:	f7ff fe13 	bl	8000fb8 <getChannel>
 8001392:	4603      	mov	r3, r0
}
 8001394:	4618      	mov	r0, r3
 8001396:	bd80      	pop	{r7, pc}

08001398 <getRawJ>:
uint16_t getRawJ()
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_U_J_D, AS72652_VISIBLE));
 800139c:	2101      	movs	r1, #1
 800139e:	200e      	movs	r0, #14
 80013a0:	f7ff fe0a 	bl	8000fb8 <getChannel>
 80013a4:	4603      	mov	r3, r0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	bd80      	pop	{r7, pc}

080013aa <getRawL>:
uint16_t getRawK()
{
	return (getChannel(AS7265X_RAW_V_K_E, AS72652_VISIBLE));
}
uint16_t getRawL()
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_W_L_F, AS72652_VISIBLE));
 80013ae:	2101      	movs	r1, #1
 80013b0:	2012      	movs	r0, #18
 80013b2:	f7ff fe01 	bl	8000fb8 <getChannel>
 80013b6:	4603      	mov	r3, r0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	bd80      	pop	{r7, pc}

080013bc <getRawR>:

//NIR Readings
uint16_t getRawR()
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_R_G_A, AS72651_NIR));
 80013c0:	2100      	movs	r1, #0
 80013c2:	2008      	movs	r0, #8
 80013c4:	f7ff fdf8 	bl	8000fb8 <getChannel>
 80013c8:	4603      	mov	r3, r0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	bd80      	pop	{r7, pc}

080013ce <getRawS>:
uint16_t getRawS()
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_S_H_B, AS72651_NIR));
 80013d2:	2100      	movs	r1, #0
 80013d4:	200a      	movs	r0, #10
 80013d6:	f7ff fdef 	bl	8000fb8 <getChannel>
 80013da:	4603      	mov	r3, r0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	bd80      	pop	{r7, pc}

080013e0 <getRawT>:
uint16_t getRawT()
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_T_I_C, AS72651_NIR));
 80013e4:	2100      	movs	r1, #0
 80013e6:	200c      	movs	r0, #12
 80013e8:	f7ff fde6 	bl	8000fb8 <getChannel>
 80013ec:	4603      	mov	r3, r0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <getRawU>:
uint16_t getRawU()
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_U_J_D, AS72651_NIR));
 80013f6:	2100      	movs	r1, #0
 80013f8:	200e      	movs	r0, #14
 80013fa:	f7ff fddd 	bl	8000fb8 <getChannel>
 80013fe:	4603      	mov	r3, r0
}
 8001400:	4618      	mov	r0, r3
 8001402:	bd80      	pop	{r7, pc}

08001404 <getRawV>:
uint16_t getRawV()
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_V_K_E, AS72651_NIR));
 8001408:	2100      	movs	r1, #0
 800140a:	2010      	movs	r0, #16
 800140c:	f7ff fdd4 	bl	8000fb8 <getChannel>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	bd80      	pop	{r7, pc}

08001416 <getRawW>:
uint16_t getRawW()
{
 8001416:	b580      	push	{r7, lr}
 8001418:	af00      	add	r7, sp, #0
	return (getChannel(AS7265X_RAW_W_L_F, AS72651_NIR));
 800141a:	2100      	movs	r1, #0
 800141c:	2012      	movs	r0, #18
 800141e:	f7ff fdcb 	bl	8000fb8 <getChannel>
 8001422:	4603      	mov	r3, r0
}
 8001424:	4618      	mov	r0, r3
 8001426:	bd80      	pop	{r7, pc}

08001428 <getCalibratedA>:

/* Obtaining the various calibrated light readings */
//UV Readings
float getCalibratedA()
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_R_G_A, AS72653_UV));
 800142c:	2102      	movs	r1, #2
 800142e:	2014      	movs	r0, #20
 8001430:	f7ff fde6 	bl	8001000 <getCalibratedValue>
 8001434:	eef0 7a40 	vmov.f32	s15, s0
}
 8001438:	eeb0 0a67 	vmov.f32	s0, s15
 800143c:	bd80      	pop	{r7, pc}

0800143e <getCalibratedB>:
float getCalibratedB()
{
 800143e:	b580      	push	{r7, lr}
 8001440:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_S_H_B, AS72653_UV));
 8001442:	2102      	movs	r1, #2
 8001444:	2018      	movs	r0, #24
 8001446:	f7ff fddb 	bl	8001000 <getCalibratedValue>
 800144a:	eef0 7a40 	vmov.f32	s15, s0
}
 800144e:	eeb0 0a67 	vmov.f32	s0, s15
 8001452:	bd80      	pop	{r7, pc}

08001454 <getCalibratedC>:
float getCalibratedC()
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_T_I_C, AS72653_UV));
 8001458:	2102      	movs	r1, #2
 800145a:	201c      	movs	r0, #28
 800145c:	f7ff fdd0 	bl	8001000 <getCalibratedValue>
 8001460:	eef0 7a40 	vmov.f32	s15, s0
}
 8001464:	eeb0 0a67 	vmov.f32	s0, s15
 8001468:	bd80      	pop	{r7, pc}

0800146a <getCalibratedD>:
float getCalibratedD()
{
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_U_J_D, AS72653_UV));
 800146e:	2102      	movs	r1, #2
 8001470:	2020      	movs	r0, #32
 8001472:	f7ff fdc5 	bl	8001000 <getCalibratedValue>
 8001476:	eef0 7a40 	vmov.f32	s15, s0
}
 800147a:	eeb0 0a67 	vmov.f32	s0, s15
 800147e:	bd80      	pop	{r7, pc}

08001480 <getCalibratedE>:
float getCalibratedE()
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_V_K_E, AS72653_UV));
 8001484:	2102      	movs	r1, #2
 8001486:	2024      	movs	r0, #36	; 0x24
 8001488:	f7ff fdba 	bl	8001000 <getCalibratedValue>
 800148c:	eef0 7a40 	vmov.f32	s15, s0
}
 8001490:	eeb0 0a67 	vmov.f32	s0, s15
 8001494:	bd80      	pop	{r7, pc}

08001496 <getCalibratedF>:
float getCalibratedF()
{
 8001496:	b580      	push	{r7, lr}
 8001498:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_W_L_F, AS72653_UV));
 800149a:	2102      	movs	r1, #2
 800149c:	2028      	movs	r0, #40	; 0x28
 800149e:	f7ff fdaf 	bl	8001000 <getCalibratedValue>
 80014a2:	eef0 7a40 	vmov.f32	s15, s0
}
 80014a6:	eeb0 0a67 	vmov.f32	s0, s15
 80014aa:	bd80      	pop	{r7, pc}

080014ac <getCalibratedG>:

//VISIBLE Readings
float getCalibratedG()
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_R_G_A, AS72652_VISIBLE));
 80014b0:	2101      	movs	r1, #1
 80014b2:	2014      	movs	r0, #20
 80014b4:	f7ff fda4 	bl	8001000 <getCalibratedValue>
 80014b8:	eef0 7a40 	vmov.f32	s15, s0
}
 80014bc:	eeb0 0a67 	vmov.f32	s0, s15
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <getCalibratedH>:
float getCalibratedH()
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_S_H_B, AS72652_VISIBLE));
 80014c6:	2101      	movs	r1, #1
 80014c8:	2018      	movs	r0, #24
 80014ca:	f7ff fd99 	bl	8001000 <getCalibratedValue>
 80014ce:	eef0 7a40 	vmov.f32	s15, s0
}
 80014d2:	eeb0 0a67 	vmov.f32	s0, s15
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <getCalibratedI>:
float getCalibratedI()
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_T_I_C, AS72652_VISIBLE));
 80014dc:	2101      	movs	r1, #1
 80014de:	201c      	movs	r0, #28
 80014e0:	f7ff fd8e 	bl	8001000 <getCalibratedValue>
 80014e4:	eef0 7a40 	vmov.f32	s15, s0
}
 80014e8:	eeb0 0a67 	vmov.f32	s0, s15
 80014ec:	bd80      	pop	{r7, pc}

080014ee <getCalibratedJ>:
float getCalibratedJ()
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_U_J_D, AS72652_VISIBLE));
 80014f2:	2101      	movs	r1, #1
 80014f4:	2020      	movs	r0, #32
 80014f6:	f7ff fd83 	bl	8001000 <getCalibratedValue>
 80014fa:	eef0 7a40 	vmov.f32	s15, s0
}
 80014fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001502:	bd80      	pop	{r7, pc}

08001504 <getCalibratedL>:
float getCalibratedK()
{
	return (getCalibratedValue(AS7265X_CAL_V_K_E, AS72652_VISIBLE));
}
float getCalibratedL()
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_W_L_F, AS72652_VISIBLE));
 8001508:	2101      	movs	r1, #1
 800150a:	2028      	movs	r0, #40	; 0x28
 800150c:	f7ff fd78 	bl	8001000 <getCalibratedValue>
 8001510:	eef0 7a40 	vmov.f32	s15, s0
}
 8001514:	eeb0 0a67 	vmov.f32	s0, s15
 8001518:	bd80      	pop	{r7, pc}

0800151a <getCalibratedR>:

//NIR Readings
float getCalibratedR()
{
 800151a:	b580      	push	{r7, lr}
 800151c:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_R_G_A, AS72651_NIR));
 800151e:	2100      	movs	r1, #0
 8001520:	2014      	movs	r0, #20
 8001522:	f7ff fd6d 	bl	8001000 <getCalibratedValue>
 8001526:	eef0 7a40 	vmov.f32	s15, s0
}
 800152a:	eeb0 0a67 	vmov.f32	s0, s15
 800152e:	bd80      	pop	{r7, pc}

08001530 <getCalibratedS>:
float getCalibratedS()
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_S_H_B, AS72651_NIR));
 8001534:	2100      	movs	r1, #0
 8001536:	2018      	movs	r0, #24
 8001538:	f7ff fd62 	bl	8001000 <getCalibratedValue>
 800153c:	eef0 7a40 	vmov.f32	s15, s0
}
 8001540:	eeb0 0a67 	vmov.f32	s0, s15
 8001544:	bd80      	pop	{r7, pc}

08001546 <getCalibratedT>:
float getCalibratedT()
{
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_T_I_C, AS72651_NIR));
 800154a:	2100      	movs	r1, #0
 800154c:	201c      	movs	r0, #28
 800154e:	f7ff fd57 	bl	8001000 <getCalibratedValue>
 8001552:	eef0 7a40 	vmov.f32	s15, s0
}
 8001556:	eeb0 0a67 	vmov.f32	s0, s15
 800155a:	bd80      	pop	{r7, pc}

0800155c <getCalibratedU>:
float getCalibratedU()
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_U_J_D, AS72651_NIR));
 8001560:	2100      	movs	r1, #0
 8001562:	2020      	movs	r0, #32
 8001564:	f7ff fd4c 	bl	8001000 <getCalibratedValue>
 8001568:	eef0 7a40 	vmov.f32	s15, s0
}
 800156c:	eeb0 0a67 	vmov.f32	s0, s15
 8001570:	bd80      	pop	{r7, pc}

08001572 <getCalibratedV>:
float getCalibratedV()
{
 8001572:	b580      	push	{r7, lr}
 8001574:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_V_K_E, AS72651_NIR));
 8001576:	2100      	movs	r1, #0
 8001578:	2024      	movs	r0, #36	; 0x24
 800157a:	f7ff fd41 	bl	8001000 <getCalibratedValue>
 800157e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001582:	eeb0 0a67 	vmov.f32	s0, s15
 8001586:	bd80      	pop	{r7, pc}

08001588 <getCalibratedW>:
float getCalibratedW()
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_W_L_F, AS72651_NIR));
 800158c:	2100      	movs	r1, #0
 800158e:	2028      	movs	r0, #40	; 0x28
 8001590:	f7ff fd36 	bl	8001000 <getCalibratedValue>
 8001594:	eef0 7a40 	vmov.f32	s15, s0
}
 8001598:	eeb0 0a67 	vmov.f32	s0, s15
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <I2C1_Init>:
//#define	SR1_BTF					(1U<<2)
//#define SR1_AF					(1U<<10)


void I2C1_Init(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOB*/
	RCC->AHB1ENR |= GPIOBEN;
 80015a4:	4b4d      	ldr	r3, [pc, #308]	; (80016dc <I2C1_Init+0x13c>)
 80015a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a8:	4a4c      	ldr	r2, [pc, #304]	; (80016dc <I2C1_Init+0x13c>)
 80015aa:	f043 0302 	orr.w	r3, r3, #2
 80015ae:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PB6 and PB7 mode to alternate function*/
	GPIOB->MODER &= ~(1U<<12);
 80015b0:	4b4b      	ldr	r3, [pc, #300]	; (80016e0 <I2C1_Init+0x140>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a4a      	ldr	r2, [pc, #296]	; (80016e0 <I2C1_Init+0x140>)
 80015b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015ba:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<13);
 80015bc:	4b48      	ldr	r3, [pc, #288]	; (80016e0 <I2C1_Init+0x140>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a47      	ldr	r2, [pc, #284]	; (80016e0 <I2C1_Init+0x140>)
 80015c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015c6:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~(1U<<14);
 80015c8:	4b45      	ldr	r3, [pc, #276]	; (80016e0 <I2C1_Init+0x140>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a44      	ldr	r2, [pc, #272]	; (80016e0 <I2C1_Init+0x140>)
 80015ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015d2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<15);
 80015d4:	4b42      	ldr	r3, [pc, #264]	; (80016e0 <I2C1_Init+0x140>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a41      	ldr	r2, [pc, #260]	; (80016e0 <I2C1_Init+0x140>)
 80015da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015de:	6013      	str	r3, [r2, #0]

	/*Set PB6 and PB7 output type to  open drain*/
	GPIOB->OTYPER |= (1U<<6);
 80015e0:	4b3f      	ldr	r3, [pc, #252]	; (80016e0 <I2C1_Init+0x140>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	4a3e      	ldr	r2, [pc, #248]	; (80016e0 <I2C1_Init+0x140>)
 80015e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015ea:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (1U<<7);
 80015ec:	4b3c      	ldr	r3, [pc, #240]	; (80016e0 <I2C1_Init+0x140>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	4a3b      	ldr	r2, [pc, #236]	; (80016e0 <I2C1_Init+0x140>)
 80015f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f6:	6053      	str	r3, [r2, #4]

	/*Enable Pull-up for PB6 and PB7*/
	GPIOB->PUPDR |= (1U<<12);
 80015f8:	4b39      	ldr	r3, [pc, #228]	; (80016e0 <I2C1_Init+0x140>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	4a38      	ldr	r2, [pc, #224]	; (80016e0 <I2C1_Init+0x140>)
 80015fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001602:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<13);
 8001604:	4b36      	ldr	r3, [pc, #216]	; (80016e0 <I2C1_Init+0x140>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	4a35      	ldr	r2, [pc, #212]	; (80016e0 <I2C1_Init+0x140>)
 800160a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800160e:	60d3      	str	r3, [r2, #12]

	GPIOB->PUPDR |= (1U<<14);
 8001610:	4b33      	ldr	r3, [pc, #204]	; (80016e0 <I2C1_Init+0x140>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	4a32      	ldr	r2, [pc, #200]	; (80016e0 <I2C1_Init+0x140>)
 8001616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800161a:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<15);
 800161c:	4b30      	ldr	r3, [pc, #192]	; (80016e0 <I2C1_Init+0x140>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	4a2f      	ldr	r2, [pc, #188]	; (80016e0 <I2C1_Init+0x140>)
 8001622:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001626:	60d3      	str	r3, [r2, #12]

	/*Set PB6 and PB7 alternate function type to I2C (AF4)
	 * PB6 --> SCL
	 * PB7 --> SDA*/
	GPIOB->AFR[0] &= ~(1U<<24);
 8001628:	4b2d      	ldr	r3, [pc, #180]	; (80016e0 <I2C1_Init+0x140>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4a2c      	ldr	r2, [pc, #176]	; (80016e0 <I2C1_Init+0x140>)
 800162e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001632:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<25);
 8001634:	4b2a      	ldr	r3, [pc, #168]	; (80016e0 <I2C1_Init+0x140>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4a29      	ldr	r2, [pc, #164]	; (80016e0 <I2C1_Init+0x140>)
 800163a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800163e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1U<<26);
 8001640:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <I2C1_Init+0x140>)
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	4a26      	ldr	r2, [pc, #152]	; (80016e0 <I2C1_Init+0x140>)
 8001646:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800164a:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<27);
 800164c:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <I2C1_Init+0x140>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4a23      	ldr	r2, [pc, #140]	; (80016e0 <I2C1_Init+0x140>)
 8001652:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001656:	6213      	str	r3, [r2, #32]

	GPIOB->AFR[0] &= ~(1U<<28);
 8001658:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <I2C1_Init+0x140>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <I2C1_Init+0x140>)
 800165e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001662:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<29);
 8001664:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <I2C1_Init+0x140>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4a1d      	ldr	r2, [pc, #116]	; (80016e0 <I2C1_Init+0x140>)
 800166a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800166e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1U<<30);
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <I2C1_Init+0x140>)
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	4a1a      	ldr	r2, [pc, #104]	; (80016e0 <I2C1_Init+0x140>)
 8001676:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800167a:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U<<31);
 800167c:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <I2C1_Init+0x140>)
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	4a17      	ldr	r2, [pc, #92]	; (80016e0 <I2C1_Init+0x140>)
 8001682:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001686:	6213      	str	r3, [r2, #32]

	/***Configuring I2C1***/

	/*Enable clock access to I2C1*/
	RCC->APB1ENR |= I2C1EN;
 8001688:	4b14      	ldr	r3, [pc, #80]	; (80016dc <I2C1_Init+0x13c>)
 800168a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168c:	4a13      	ldr	r2, [pc, #76]	; (80016dc <I2C1_Init+0x13c>)
 800168e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001692:	6413      	str	r3, [r2, #64]	; 0x40

	/*Enter reset mode  */
	I2C1->CR1 |= (1U<<15);
 8001694:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <I2C1_Init+0x144>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a12      	ldr	r2, [pc, #72]	; (80016e4 <I2C1_Init+0x144>)
 800169a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800169e:	6013      	str	r3, [r2, #0]

	/*Come out of reset mode  */
	I2C1->CR1 &= ~(1U<<15);
 80016a0:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <I2C1_Init+0x144>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0f      	ldr	r2, [pc, #60]	; (80016e4 <I2C1_Init+0x144>)
 80016a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80016aa:	6013      	str	r3, [r2, #0]

	/*Set Peripheral clock frequency*/
	I2C1->CR2 = (1U<<4);   //16 Mhz
 80016ac:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <I2C1_Init+0x144>)
 80016ae:	2210      	movs	r2, #16
 80016b0:	605a      	str	r2, [r3, #4]
//
//	/*Set rise time */
//	I2C1->TRISE = SD_MODE_MAX_RISE_TIME; //(1000ns/(1/16MHz)+1 = 17

	/*Set I2C to fast mode, 400kHz clock */
	I2C1->CCR = 1; //Refer to ST reference manual for derivation
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <I2C1_Init+0x144>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	61da      	str	r2, [r3, #28]
	I2C1->CCR = I2C_FAST_DUTY; //Set to Fast mode and duty cycle of 16/9
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <I2C1_Init+0x144>)
 80016ba:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80016be:	61da      	str	r2, [r3, #28]

	/*Set rise time */
	I2C1->TRISE = 6;//FS_MODE_MAX_RISE_TIME; //(300ns/(1/16MHz)+1 = 5.8
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <I2C1_Init+0x144>)
 80016c2:	2206      	movs	r2, #6
 80016c4:	621a      	str	r2, [r3, #32]

	/*Enable I2C1 module */
	I2C1->CR1 |= CR1_PE;
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <I2C1_Init+0x144>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <I2C1_Init+0x144>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6013      	str	r3, [r2, #0]
}
 80016d2:	bf00      	nop
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020400 	.word	0x40020400
 80016e4:	40005400 	.word	0x40005400

080016e8 <I2C1_byteRead>:

void I2C1_byteRead(char saddr, char maddr, char* data) {
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	603a      	str	r2, [r7, #0]
 80016f2:	71fb      	strb	r3, [r7, #7]
 80016f4:	460b      	mov	r3, r1
 80016f6:	71bb      	strb	r3, [r7, #6]

	  volatile int tmp;

	  /* Wait until bus not busy */
	  while (I2C1->SR2 & (SR2_BUSY)){}
 80016f8:	bf00      	nop
 80016fa:	4b37      	ldr	r3, [pc, #220]	; (80017d8 <I2C1_byteRead+0xf0>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f9      	bne.n	80016fa <I2C1_byteRead+0x12>

	  /* Generate start condition */
	  I2C1->CR1 |= CR1_START;
 8001706:	4b34      	ldr	r3, [pc, #208]	; (80017d8 <I2C1_byteRead+0xf0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a33      	ldr	r2, [pc, #204]	; (80017d8 <I2C1_byteRead+0xf0>)
 800170c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001710:	6013      	str	r3, [r2, #0]

	  /* Wait until start condition flag is set, note the negation */
	  /* Stay in loop if start flag is not set */
	  while (!(I2C1->SR1 & (SR1_SB))){}
 8001712:	bf00      	nop
 8001714:	4b30      	ldr	r3, [pc, #192]	; (80017d8 <I2C1_byteRead+0xf0>)
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f9      	beq.n	8001714 <I2C1_byteRead+0x2c>

	  /* Transmit slave address + Write (0) */
	  /* This slave address is sent to each slave device along with an indication to establish either read or write communication */
	  /* Yo device A, I want to write to one of your memory registers */
	  I2C1->DR = saddr << 1; // shifting the address left makes room for the R/W bit, which is 0 for write
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	005a      	lsls	r2, r3, #1
 8001724:	4b2c      	ldr	r3, [pc, #176]	; (80017d8 <I2C1_byteRead+0xf0>)
 8001726:	611a      	str	r2, [r3, #16]

	  /* Wait until address flag is set */
	  /* Each slave device compares the address from master to its own address and sends an ACK if matched */
	  /* I'm device A and of course you can write to one of my registers */
	  while (!(I2C1->SR1 & (SR1_ADDR))){}
 8001728:	bf00      	nop
 800172a:	4b2b      	ldr	r3, [pc, #172]	; (80017d8 <I2C1_byteRead+0xf0>)
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f9      	beq.n	800172a <I2C1_byteRead+0x42>

	  /* Clear address flag by reading SR2 register */
	  tmp = I2C1->SR2;
 8001736:	4b28      	ldr	r3, [pc, #160]	; (80017d8 <I2C1_byteRead+0xf0>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	60fb      	str	r3, [r7, #12]

	  /*Wait until transmitter empty */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 800173c:	bf00      	nop
 800173e:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <I2C1_byteRead+0xf0>)
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f9      	beq.n	800173e <I2C1_byteRead+0x56>

	  /* Send register address */
	  /* Aight, here is the location I writing to read from */
	  I2C1->DR = maddr;
 800174a:	4a23      	ldr	r2, [pc, #140]	; (80017d8 <I2C1_byteRead+0xf0>)
 800174c:	79bb      	ldrb	r3, [r7, #6]
 800174e:	6113      	str	r3, [r2, #16]

	  /*Wait until transmitter empty */
	  /* No probs */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 8001750:	bf00      	nop
 8001752:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <I2C1_byteRead+0xf0>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f9      	beq.n	8001752 <I2C1_byteRead+0x6a>

	 /* Begin actual reading process once slave device and register of interest are understood between master and slave*/
	 /*Generate restart */
	 I2C1->CR1 |= CR1_START;
 800175e:	4b1e      	ldr	r3, [pc, #120]	; (80017d8 <I2C1_byteRead+0xf0>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a1d      	ldr	r2, [pc, #116]	; (80017d8 <I2C1_byteRead+0xf0>)
 8001764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001768:	6013      	str	r3, [r2, #0]

	 /* Wait until start flag is set */
	 while (!(I2C1->SR1 & SR1_SB)){}
 800176a:	bf00      	nop
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <I2C1_byteRead+0xf0>)
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0f9      	beq.n	800176c <I2C1_byteRead+0x84>

	 /* Transmit slave address + Read */
	 I2C1->DR = saddr << 1 | 1;
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	f043 0201 	orr.w	r2, r3, #1
 8001780:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <I2C1_byteRead+0xf0>)
 8001782:	611a      	str	r2, [r3, #16]

	 /* Wait until addr flag is set */
	 while (!(I2C1->SR1 & (SR1_ADDR))){}
 8001784:	bf00      	nop
 8001786:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <I2C1_byteRead+0xf0>)
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f9      	beq.n	8001786 <I2C1_byteRead+0x9e>

	 /* Clear addr flag */
	 tmp = I2C1->SR2;
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <I2C1_byteRead+0xf0>)
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	60fb      	str	r3, [r7, #12]

	 /* Disable Acknowledge */
	 I2C1->CR1 &= ~CR1_ACK;
 8001798:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <I2C1_byteRead+0xf0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <I2C1_byteRead+0xf0>)
 800179e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80017a2:	6013      	str	r3, [r2, #0]

	 /* Generate stop after data received */
	 I2C1->CR1 |= CR1_STOP;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <I2C1_byteRead+0xf0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <I2C1_byteRead+0xf0>)
 80017aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017ae:	6013      	str	r3, [r2, #0]

	 /* Wait until RXNE flag is set */
	 while (!(I2C1->SR1 & SR1_RXNE)){}
 80017b0:	bf00      	nop
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <I2C1_byteRead+0xf0>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f9      	beq.n	80017b2 <I2C1_byteRead+0xca>

	 /* Read data from DR */
	 *data++ = I2C1->DR;
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <I2C1_byteRead+0xf0>)
 80017c0:	6919      	ldr	r1, [r3, #16]
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	603a      	str	r2, [r7, #0]
 80017c8:	b2ca      	uxtb	r2, r1
 80017ca:	701a      	strb	r2, [r3, #0]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	40005400 	.word	0x40005400

080017dc <I2C1_burstWrite>:
		 }
	 }

}

void I2C1_burstWrite(char saddr, char maddr, int n, char* data) {
 80017dc:	b480      	push	{r7}
 80017de:	b087      	sub	sp, #28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60ba      	str	r2, [r7, #8]
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	4603      	mov	r3, r0
 80017e8:	73fb      	strb	r3, [r7, #15]
 80017ea:	460b      	mov	r3, r1
 80017ec:	73bb      	strb	r3, [r7, #14]

	/* Temporary variable to read SR2*/
	volatile int tmp;

	/* Wait until bus not busy */
	while (I2C1->SR2 & (SR2_BUSY)){}
 80017ee:	bf00      	nop
 80017f0:	4b2a      	ldr	r3, [pc, #168]	; (800189c <I2C1_burstWrite+0xc0>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f9      	bne.n	80017f0 <I2C1_burstWrite+0x14>

	/* Generate start condition */
	I2C1->CR1 |= CR1_START;
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <I2C1_burstWrite+0xc0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a26      	ldr	r2, [pc, #152]	; (800189c <I2C1_burstWrite+0xc0>)
 8001802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001806:	6013      	str	r3, [r2, #0]

	/* Wait until start condition flag is set, note the negation */
	/* Stay in loop if start flag is not set*/
	while (!(I2C1->SR1 & (SR1_SB))){}
 8001808:	bf00      	nop
 800180a:	4b24      	ldr	r3, [pc, #144]	; (800189c <I2C1_burstWrite+0xc0>)
 800180c:	695b      	ldr	r3, [r3, #20]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f9      	beq.n	800180a <I2C1_burstWrite+0x2e>

	/* Transmit slave address + Write (0) */
	/* This slave address is sent to each slave device along with an indication to establish either read or write communication*/
	/* Yo device A, I want to write to one of your memory registers */
	I2C1->DR = saddr << 1; // shifting the address left makes room for the R/W bit, which is 0 for write
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	005a      	lsls	r2, r3, #1
 800181a:	4b20      	ldr	r3, [pc, #128]	; (800189c <I2C1_burstWrite+0xc0>)
 800181c:	611a      	str	r2, [r3, #16]

	/* Wait until address flag is set */
	/* Each slave device compares the address from master to its own adress and sends an ACK if mathced*/
	/* I'm device A and of course you can write to one of my registers */
	while (!(I2C1->SR1 & (SR1_ADDR))){}
 800181e:	bf00      	nop
 8001820:	4b1e      	ldr	r3, [pc, #120]	; (800189c <I2C1_burstWrite+0xc0>)
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f9      	beq.n	8001820 <I2C1_burstWrite+0x44>

	/* Clear address flag by reading SR2 register */
	tmp = I2C1->SR2;
 800182c:	4b1b      	ldr	r3, [pc, #108]	; (800189c <I2C1_burstWrite+0xc0>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	613b      	str	r3, [r7, #16]

	/*Wait until data register empty */
	while (!(I2C1->SR1 & SR1_TXE)){}
 8001832:	bf00      	nop
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <I2C1_burstWrite+0xc0>)
 8001836:	695b      	ldr	r3, [r3, #20]
 8001838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f9      	beq.n	8001834 <I2C1_burstWrite+0x58>

	/* Send register address */
	/* aight here is the register I'm writing to write to and the value I want written */
	I2C1->DR = maddr;
 8001840:	4a16      	ldr	r2, [pc, #88]	; (800189c <I2C1_burstWrite+0xc0>)
 8001842:	7bbb      	ldrb	r3, [r7, #14]
 8001844:	6113      	str	r3, [r2, #16]

	for (int i = 0; i < n; i++) {
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	e00f      	b.n	800186c <I2C1_burstWrite+0x90>

		/*Wait until data register empty */
		while (!(I2C1->SR1 & SR1_TXE)){}
 800184c:	bf00      	nop
 800184e:	4b13      	ldr	r3, [pc, #76]	; (800189c <I2C1_burstWrite+0xc0>)
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f9      	beq.n	800184e <I2C1_burstWrite+0x72>

		/* Transmit memory address */
		I2C1->DR = *data++;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	1c5a      	adds	r2, r3, #1
 800185e:	607a      	str	r2, [r7, #4]
 8001860:	781a      	ldrb	r2, [r3, #0]
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <I2C1_burstWrite+0xc0>)
 8001864:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < n; i++) {
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	3301      	adds	r3, #1
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	429a      	cmp	r2, r3
 8001872:	dbeb      	blt.n	800184c <I2C1_burstWrite+0x70>
	}
	/* Wait until transfer finished */
	while (!(I2C1->SR1 & (SR1_BTF))){}
 8001874:	bf00      	nop
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <I2C1_burstWrite+0xc0>)
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f9      	beq.n	8001876 <I2C1_burstWrite+0x9a>

	/* Generate stop */
	I2C1->CR1 |= CR1_STOP;
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <I2C1_burstWrite+0xc0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a05      	ldr	r2, [pc, #20]	; (800189c <I2C1_burstWrite+0xc0>)
 8001888:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800188c:	6013      	str	r3, [r2, #0]
}
 800188e:	bf00      	nop
 8001890:	371c      	adds	r7, #28
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	40005400 	.word	0x40005400

080018a0 <main>:

void log_data_to_csv(const char* filename, uint32_t* data, int num_channels);


int main(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b09e      	sub	sp, #120	; 0x78
 80018a4:	af00      	add	r7, sp, #0
//		printf("errno: %d, message: %s\n", errno, strerror(errno));
//	}



	bool works = begin();
 80018a6:	f7ff f987 	bl	8000bb8 <begin>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	while(1)
	{
		enableLED(AS7265x_LED_UV);
 80018b0:	2002      	movs	r0, #2
 80018b2:	f7ff fc06 	bl	80010c2 <enableLED>
		delayMillis(3000);
 80018b6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80018ba:	f000 fa7f 	bl	8001dbc <delayMillis>
		channel_data[0] = getRawA();
 80018be:	f7ff fd1a 	bl	80012f6 <getRawA>
 80018c2:	4603      	mov	r3, r0
 80018c4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		channel_data[1] = getRawB();
 80018c8:	f7ff fd1e 	bl	8001308 <getRawB>
 80018cc:	4603      	mov	r3, r0
 80018ce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
		channel_data[2] = getRawC();
 80018d2:	f7ff fd22 	bl	800131a <getRawC>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		channel_data[3] = getRawD();
 80018dc:	f7ff fd26 	bl	800132c <getRawD>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		channel_data[4] = getRawE();
 80018e6:	f7ff fd2a 	bl	800133e <getRawE>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		channel_data[5] = getRawF();
 80018f0:	f7ff fd2e 	bl	8001350 <getRawF>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
		disableLED(AS7265x_LED_UV);
 80018fa:	2002      	movs	r0, #2
 80018fc:	f7ff fbfc 	bl	80010f8 <disableLED>
		delayMillis(3000);
 8001900:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001904:	f000 fa5a 	bl	8001dbc <delayMillis>

		enableLED(AS7265x_LED_WHITE);
 8001908:	2000      	movs	r0, #0
 800190a:	f7ff fbda 	bl	80010c2 <enableLED>
		delayMillis(3000);
 800190e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001912:	f000 fa53 	bl	8001dbc <delayMillis>
		channel_data[6] = getRawG();
 8001916:	f7ff fd24 	bl	8001362 <getRawG>
 800191a:	4603      	mov	r3, r0
 800191c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		channel_data[7] = getRawH();
 8001920:	f7ff fd28 	bl	8001374 <getRawH>
 8001924:	4603      	mov	r3, r0
 8001926:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		channel_data[9] = getRawI();
 800192a:	f7ff fd2c 	bl	8001386 <getRawI>
 800192e:	4603      	mov	r3, r0
 8001930:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		channel_data[11] = getRawJ();
 8001934:	f7ff fd30 	bl	8001398 <getRawJ>
 8001938:	4603      	mov	r3, r0
 800193a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		channel_data[16] = getRawL();
 800193e:	f7ff fd34 	bl	80013aa <getRawL>
 8001942:	4603      	mov	r3, r0
 8001944:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
		channel_data[17] = getRawL();
 8001948:	f7ff fd2f 	bl	80013aa <getRawL>
 800194c:	4603      	mov	r3, r0
 800194e:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
		disableLED(AS7265x_LED_WHITE);
 8001952:	2000      	movs	r0, #0
 8001954:	f7ff fbd0 	bl	80010f8 <disableLED>
		delayMillis(3000);
 8001958:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800195c:	f000 fa2e 	bl	8001dbc <delayMillis>

		enableLED(AS7265x_LED_IR);
 8001960:	2001      	movs	r0, #1
 8001962:	f7ff fbae 	bl	80010c2 <enableLED>
		delayMillis(3000);
 8001966:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800196a:	f000 fa27 	bl	8001dbc <delayMillis>
		channel_data[8] = getRawR();
 800196e:	f7ff fd25 	bl	80013bc <getRawR>
 8001972:	4603      	mov	r3, r0
 8001974:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
		channel_data[10] = getRawS();
 8001978:	f7ff fd29 	bl	80013ce <getRawS>
 800197c:	4603      	mov	r3, r0
 800197e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
		channel_data[12] = getRawT();
 8001982:	f7ff fd2d 	bl	80013e0 <getRawT>
 8001986:	4603      	mov	r3, r0
 8001988:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
		channel_data[13] = getRawU();
 800198c:	f7ff fd31 	bl	80013f2 <getRawU>
 8001990:	4603      	mov	r3, r0
 8001992:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		channel_data[14] = getRawV();
 8001996:	f7ff fd35 	bl	8001404 <getRawV>
 800199a:	4603      	mov	r3, r0
 800199c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		channel_data[15] = getRawW();
 80019a0:	f7ff fd39 	bl	8001416 <getRawW>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
		disableLED(AS7265x_LED_IR);
 80019aa:	2001      	movs	r0, #1
 80019ac:	f7ff fba4 	bl	80010f8 <disableLED>
		delayMillis(3000);
 80019b0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019b4:	f000 fa02 	bl	8001dbc <delayMillis>


		printf("\nRaw Data Channels \n\r");
 80019b8:	4865      	ldr	r0, [pc, #404]	; (8001b50 <main+0x2b0>)
 80019ba:	f001 f8e1 	bl	8002b80 <iprintf>
		for (int i = 0; i < NUM_CHANNELS; i++)
 80019be:	2300      	movs	r3, #0
 80019c0:	677b      	str	r3, [r7, #116]	; 0x74
 80019c2:	e00c      	b.n	80019de <main+0x13e>
		{
//			printf("Channel %i: %u\n\r", i+1, channel_data[i]);
			printf("%u\n\r", channel_data[i]);
 80019c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	3378      	adds	r3, #120	; 0x78
 80019ca:	443b      	add	r3, r7
 80019cc:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80019d0:	4619      	mov	r1, r3
 80019d2:	4860      	ldr	r0, [pc, #384]	; (8001b54 <main+0x2b4>)
 80019d4:	f001 f8d4 	bl	8002b80 <iprintf>
		for (int i = 0; i < NUM_CHANNELS; i++)
 80019d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019da:	3301      	adds	r3, #1
 80019dc:	677b      	str	r3, [r7, #116]	; 0x74
 80019de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80019e0:	2b11      	cmp	r3, #17
 80019e2:	ddef      	ble.n	80019c4 <main+0x124>
		}

		// Calibrated Channels
		enableLED(AS7265x_LED_UV);
 80019e4:	2002      	movs	r0, #2
 80019e6:	f7ff fb6c 	bl	80010c2 <enableLED>
		delayMillis(3000);
 80019ea:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019ee:	f000 f9e5 	bl	8001dbc <delayMillis>
		channel_data_cal[0] = getCalibratedA();
 80019f2:	f7ff fd19 	bl	8001428 <getCalibratedA>
 80019f6:	eef0 7a40 	vmov.f32	s15, s0
 80019fa:	edc7 7a00 	vstr	s15, [r7]
		channel_data_cal[1] = getCalibratedB();
 80019fe:	f7ff fd1e 	bl	800143e <getCalibratedB>
 8001a02:	eef0 7a40 	vmov.f32	s15, s0
 8001a06:	edc7 7a01 	vstr	s15, [r7, #4]
		channel_data_cal[2] = getCalibratedC();
 8001a0a:	f7ff fd23 	bl	8001454 <getCalibratedC>
 8001a0e:	eef0 7a40 	vmov.f32	s15, s0
 8001a12:	edc7 7a02 	vstr	s15, [r7, #8]
		channel_data_cal[3] = getCalibratedD();
 8001a16:	f7ff fd28 	bl	800146a <getCalibratedD>
 8001a1a:	eef0 7a40 	vmov.f32	s15, s0
 8001a1e:	edc7 7a03 	vstr	s15, [r7, #12]
		channel_data_cal[4] = getCalibratedE();
 8001a22:	f7ff fd2d 	bl	8001480 <getCalibratedE>
 8001a26:	eef0 7a40 	vmov.f32	s15, s0
 8001a2a:	edc7 7a04 	vstr	s15, [r7, #16]
		channel_data_cal[5] = getCalibratedF();
 8001a2e:	f7ff fd32 	bl	8001496 <getCalibratedF>
 8001a32:	eef0 7a40 	vmov.f32	s15, s0
 8001a36:	edc7 7a05 	vstr	s15, [r7, #20]
		disableLED(AS7265x_LED_UV);
 8001a3a:	2002      	movs	r0, #2
 8001a3c:	f7ff fb5c 	bl	80010f8 <disableLED>
		delayMillis(3000);
 8001a40:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a44:	f000 f9ba 	bl	8001dbc <delayMillis>

		enableLED(AS7265x_LED_WHITE);
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f7ff fb3a 	bl	80010c2 <enableLED>
		delayMillis(3000);
 8001a4e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001a52:	f000 f9b3 	bl	8001dbc <delayMillis>
		channel_data_cal[6] = getCalibratedG();
 8001a56:	f7ff fd29 	bl	80014ac <getCalibratedG>
 8001a5a:	eef0 7a40 	vmov.f32	s15, s0
 8001a5e:	edc7 7a06 	vstr	s15, [r7, #24]
		channel_data_cal[7] = getCalibratedH();
 8001a62:	f7ff fd2e 	bl	80014c2 <getCalibratedH>
 8001a66:	eef0 7a40 	vmov.f32	s15, s0
 8001a6a:	edc7 7a07 	vstr	s15, [r7, #28]
		channel_data_cal[9] = getCalibratedI();
 8001a6e:	f7ff fd33 	bl	80014d8 <getCalibratedI>
 8001a72:	eef0 7a40 	vmov.f32	s15, s0
 8001a76:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		channel_data_cal[11] = getCalibratedJ();
 8001a7a:	f7ff fd38 	bl	80014ee <getCalibratedJ>
 8001a7e:	eef0 7a40 	vmov.f32	s15, s0
 8001a82:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		channel_data_cal[16] = getCalibratedL();
 8001a86:	f7ff fd3d 	bl	8001504 <getCalibratedL>
 8001a8a:	eef0 7a40 	vmov.f32	s15, s0
 8001a8e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		channel_data_cal[17] = getCalibratedL();
 8001a92:	f7ff fd37 	bl	8001504 <getCalibratedL>
 8001a96:	eef0 7a40 	vmov.f32	s15, s0
 8001a9a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
		disableLED(AS7265x_LED_WHITE);
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f7ff fb2a 	bl	80010f8 <disableLED>
		delayMillis(3000);
 8001aa4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001aa8:	f000 f988 	bl	8001dbc <delayMillis>

		enableLED(AS7265x_LED_IR);
 8001aac:	2001      	movs	r0, #1
 8001aae:	f7ff fb08 	bl	80010c2 <enableLED>
		delayMillis(3000);
 8001ab2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001ab6:	f000 f981 	bl	8001dbc <delayMillis>
		channel_data_cal[8] = getCalibratedR();
 8001aba:	f7ff fd2e 	bl	800151a <getCalibratedR>
 8001abe:	eef0 7a40 	vmov.f32	s15, s0
 8001ac2:	edc7 7a08 	vstr	s15, [r7, #32]
		channel_data_cal[10] = getCalibratedS();
 8001ac6:	f7ff fd33 	bl	8001530 <getCalibratedS>
 8001aca:	eef0 7a40 	vmov.f32	s15, s0
 8001ace:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		channel_data_cal[12] = getCalibratedT();
 8001ad2:	f7ff fd38 	bl	8001546 <getCalibratedT>
 8001ad6:	eef0 7a40 	vmov.f32	s15, s0
 8001ada:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		channel_data_cal[13] = getCalibratedU();
 8001ade:	f7ff fd3d 	bl	800155c <getCalibratedU>
 8001ae2:	eef0 7a40 	vmov.f32	s15, s0
 8001ae6:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		channel_data_cal[14] = getCalibratedV();
 8001aea:	f7ff fd42 	bl	8001572 <getCalibratedV>
 8001aee:	eef0 7a40 	vmov.f32	s15, s0
 8001af2:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		channel_data_cal[15] = getCalibratedW();
 8001af6:	f7ff fd47 	bl	8001588 <getCalibratedW>
 8001afa:	eef0 7a40 	vmov.f32	s15, s0
 8001afe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		disableLED(AS7265x_LED_IR);
 8001b02:	2001      	movs	r0, #1
 8001b04:	f7ff faf8 	bl	80010f8 <disableLED>
		delayMillis(3000);
 8001b08:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001b0c:	f000 f956 	bl	8001dbc <delayMillis>

		printf("\nCalibrated Data Channels \n\r");
 8001b10:	4811      	ldr	r0, [pc, #68]	; (8001b58 <main+0x2b8>)
 8001b12:	f001 f835 	bl	8002b80 <iprintf>
		for (int i = 0; i < NUM_CHANNELS; i++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	673b      	str	r3, [r7, #112]	; 0x70
 8001b1a:	e010      	b.n	8001b3e <main+0x29e>
		{
//			printf("Channel %i: %f\n\r", i+1, channel_data_cal[i]);
			printf("%f\n\r", channel_data_cal[i]);
 8001b1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	3378      	adds	r3, #120	; 0x78
 8001b22:	443b      	add	r3, r7
 8001b24:	3b78      	subs	r3, #120	; 0x78
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fd15 	bl	8000558 <__aeabi_f2d>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	480a      	ldr	r0, [pc, #40]	; (8001b5c <main+0x2bc>)
 8001b34:	f001 f824 	bl	8002b80 <iprintf>
		for (int i = 0; i < NUM_CHANNELS; i++)
 8001b38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	673b      	str	r3, [r7, #112]	; 0x70
 8001b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b40:	2b11      	cmp	r3, #17
 8001b42:	ddeb      	ble.n	8001b1c <main+0x27c>
		}

		break;
 8001b44:	bf00      	nop

//		// Log the data to CSV
//		log_data_to_csv(filename, channel_data, NUM_CHANNELS);

	}
	return 0;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3778      	adds	r7, #120	; 0x78
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	08004984 	.word	0x08004984
 8001b54:	0800499c 	.word	0x0800499c
 8001b58:	080049a4 	.word	0x080049a4
 8001b5c:	080049c4 	.word	0x080049c4

08001b60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return 1;
 8001b64:	2301      	movs	r3, #1
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <_kill>:

int _kill(int pid, int sig)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b7a:	f001 f93d 	bl	8002df8 <__errno>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2216      	movs	r2, #22
 8001b82:	601a      	str	r2, [r3, #0]
  return -1;
 8001b84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <_exit>:

void _exit (int status)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b98:	f04f 31ff 	mov.w	r1, #4294967295
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ffe7 	bl	8001b70 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ba2:	e7fe      	b.n	8001ba2 <_exit+0x12>

08001ba4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	e00a      	b.n	8001bcc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bb6:	f3af 8000 	nop.w
 8001bba:	4601      	mov	r1, r0
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	60ba      	str	r2, [r7, #8]
 8001bc2:	b2ca      	uxtb	r2, r1
 8001bc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	dbf0      	blt.n	8001bb6 <_read+0x12>
  }

  return len;
 8001bd4:	687b      	ldr	r3, [r7, #4]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	e009      	b.n	8001c04 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	60ba      	str	r2, [r7, #8]
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 f8f4 	bl	8001de6 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	3301      	adds	r3, #1
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	dbf1      	blt.n	8001bf0 <_write+0x12>
  }
  return len;
 8001c0c:	687b      	ldr	r3, [r7, #4]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <_close>:

int _close(int file)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c3e:	605a      	str	r2, [r3, #4]
  return 0;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <_isatty>:

int _isatty(int file)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c56:	2301      	movs	r3, #1
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c88:	4a14      	ldr	r2, [pc, #80]	; (8001cdc <_sbrk+0x5c>)
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <_sbrk+0x60>)
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c94:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <_sbrk+0x64>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d102      	bne.n	8001ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <_sbrk+0x64>)
 8001c9e:	4a12      	ldr	r2, [pc, #72]	; (8001ce8 <_sbrk+0x68>)
 8001ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <_sbrk+0x64>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d207      	bcs.n	8001cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb0:	f001 f8a2 	bl	8002df8 <__errno>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbe:	e009      	b.n	8001cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <_sbrk+0x64>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cc6:	4b07      	ldr	r3, [pc, #28]	; (8001ce4 <_sbrk+0x64>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4413      	add	r3, r2
 8001cce:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <_sbrk+0x64>)
 8001cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20018000 	.word	0x20018000
 8001ce0:	00000400 	.word	0x00000400
 8001ce4:	200001e8 	.word	0x200001e8
 8001ce8:	20000340 	.word	0x20000340

08001cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	6039      	str	r1, [r7, #0]
 8001cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	db0a      	blt.n	8001d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	b2da      	uxtb	r2, r3
 8001d04:	490c      	ldr	r1, [pc, #48]	; (8001d38 <__NVIC_SetPriority+0x4c>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	0112      	lsls	r2, r2, #4
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	440b      	add	r3, r1
 8001d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d14:	e00a      	b.n	8001d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4908      	ldr	r1, [pc, #32]	; (8001d3c <__NVIC_SetPriority+0x50>)
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	3b04      	subs	r3, #4
 8001d24:	0112      	lsls	r2, r2, #4
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	440b      	add	r3, r1
 8001d2a:	761a      	strb	r2, [r3, #24]
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000e100 	.word	0xe000e100
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <SysTick_Init>:
#define CTRL_COUNTFLAG			(1U<<16)

volatile uint32_t msTicks = 0;

void SysTick_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
    // Reload with the number of clocks per millisecond
    SysTick->LOAD = SYSTICK_LOAD_VAL - 1;  // Set reload register (off by one)
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <SysTick_Init+0x44>)
 8001d46:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8001d4a:	605a      	str	r2, [r3, #4]

    // Set the priority of the SysTick interrupt
    NVIC_SetPriority(SysTick_IRQn, (1 << __NVIC_PRIO_BITS) - 1);  // Set lowest priority
 8001d4c:	210f      	movs	r1, #15
 8001d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d52:	f7ff ffcb 	bl	8001cec <__NVIC_SetPriority>

    // Reset the SysTick counter value
    SysTick->VAL = 0;
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <SysTick_Init+0x44>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]

    // Select processor clock as SysTick clock source
    SysTick->CTRL |= CTRL_CLKSRC;
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <SysTick_Init+0x44>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a08      	ldr	r2, [pc, #32]	; (8001d84 <SysTick_Init+0x44>)
 8001d62:	f043 0304 	orr.w	r3, r3, #4
 8001d66:	6013      	str	r3, [r2, #0]

    // Enable SysTick interrupt
    SysTick->CTRL |= CTRL_TICKINT;
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <SysTick_Init+0x44>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a05      	ldr	r2, [pc, #20]	; (8001d84 <SysTick_Init+0x44>)
 8001d6e:	f043 0302 	orr.w	r3, r3, #2
 8001d72:	6013      	str	r3, [r2, #0]

    // Enable SysTick timer
    SysTick->CTRL |= CTRL_ENABLE;
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <SysTick_Init+0x44>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a02      	ldr	r2, [pc, #8]	; (8001d84 <SysTick_Init+0x44>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6013      	str	r3, [r2, #0]
}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	e000e010 	.word	0xe000e010

08001d88 <SysTick_Handler>:

// SysTick Handler - Called every 1ms
void SysTick_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
	msTicks++;
 8001d8c:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <SysTick_Handler+0x18>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	3301      	adds	r3, #1
 8001d92:	4a03      	ldr	r2, [pc, #12]	; (8001da0 <SysTick_Handler+0x18>)
 8001d94:	6013      	str	r3, [r2, #0]
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	200001ec 	.word	0x200001ec

08001da4 <getMillis>:

// Function to get the current time in milliseconds
uint32_t getMillis(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
	return msTicks;
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <getMillis+0x14>)
 8001daa:	681b      	ldr	r3, [r3, #0]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	200001ec 	.word	0x200001ec

08001dbc <delayMillis>:

void delayMillis(uint32_t delay)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	uint32_t startTick = getMillis();
 8001dc4:	f7ff ffee 	bl	8001da4 <getMillis>
 8001dc8:	60f8      	str	r0, [r7, #12]
	while ((getMillis() - startTick) < delay){}
 8001dca:	bf00      	nop
 8001dcc:	f7ff ffea 	bl	8001da4 <getMillis>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d8f7      	bhi.n	8001dcc <delayMillis+0x10>
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <__io_putchar>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);

int __io_putchar(int ch)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f876 	bl	8001ee0 <uart2_write>
	return ch;
 8001df4:	687b      	ldr	r3, [r7, #4]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <uart2_rxtx_init>:

void uart2_rxtx_init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
	/****************Configure uart  pin using gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 8001e04:	4b32      	ldr	r3, [pc, #200]	; (8001ed0 <uart2_rxtx_init+0xd0>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	4a31      	ldr	r2, [pc, #196]	; (8001ed0 <uart2_rxtx_init+0xd0>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6313      	str	r3, [r2, #48]	; 0x30


	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~ (1U<<4);
 8001e10:	4b30      	ldr	r3, [pc, #192]	; (8001ed4 <uart2_rxtx_init+0xd4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a2f      	ldr	r2, [pc, #188]	; (8001ed4 <uart2_rxtx_init+0xd4>)
 8001e16:	f023 0310 	bic.w	r3, r3, #16
 8001e1a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8001e1c:	4b2d      	ldr	r3, [pc, #180]	; (8001ed4 <uart2_rxtx_init+0xd4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a2c      	ldr	r2, [pc, #176]	; (8001ed4 <uart2_rxtx_init+0xd4>)
 8001e22:	f043 0320 	orr.w	r3, r3, #32
 8001e26:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0]|= (1U<<8);
 8001e28:	4b2a      	ldr	r3, [pc, #168]	; (8001ed4 <uart2_rxtx_init+0xd4>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	4a29      	ldr	r2, [pc, #164]	; (8001ed4 <uart2_rxtx_init+0xd4>)
 8001e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e32:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<9);
 8001e34:	4b27      	ldr	r3, [pc, #156]	; (8001ed4 <uart2_rxtx_init+0xd4>)
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	4a26      	ldr	r2, [pc, #152]	; (8001ed4 <uart2_rxtx_init+0xd4>)
 8001e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e3e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<10);
 8001e40:	4b24      	ldr	r3, [pc, #144]	; (8001ed4 <uart2_rxtx_init+0xd4>)
 8001e42:	6a1b      	ldr	r3, [r3, #32]
 8001e44:	4a23      	ldr	r2, [pc, #140]	; (8001ed4 <uart2_rxtx_init+0xd4>)
 8001e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e4a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<11);
 8001e4c:	4b21      	ldr	r3, [pc, #132]	; (8001ed4 <uart2_rxtx_init+0xd4>)
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	4a20      	ldr	r2, [pc, #128]	; (8001ed4 <uart2_rxtx_init+0xd4>)
 8001e52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e56:	6213      	str	r3, [r2, #32]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~ (1U<<6);
 8001e58:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <uart2_rxtx_init+0xd4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a1d      	ldr	r2, [pc, #116]	; (8001ed4 <uart2_rxtx_init+0xd4>)
 8001e5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e62:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8001e64:	4b1b      	ldr	r3, [pc, #108]	; (8001ed4 <uart2_rxtx_init+0xd4>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a1a      	ldr	r2, [pc, #104]	; (8001ed4 <uart2_rxtx_init+0xd4>)
 8001e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e6e:	6013      	str	r3, [r2, #0]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0]|= (1U<<12);
 8001e70:	4b18      	ldr	r3, [pc, #96]	; (8001ed4 <uart2_rxtx_init+0xd4>)
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	4a17      	ldr	r2, [pc, #92]	; (8001ed4 <uart2_rxtx_init+0xd4>)
 8001e76:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e7a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<13);
 8001e7c:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <uart2_rxtx_init+0xd4>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <uart2_rxtx_init+0xd4>)
 8001e82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e86:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<14);
 8001e88:	4b12      	ldr	r3, [pc, #72]	; (8001ed4 <uart2_rxtx_init+0xd4>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	4a11      	ldr	r2, [pc, #68]	; (8001ed4 <uart2_rxtx_init+0xd4>)
 8001e8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e92:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<15);
 8001e94:	4b0f      	ldr	r3, [pc, #60]	; (8001ed4 <uart2_rxtx_init+0xd4>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	4a0e      	ldr	r2, [pc, #56]	; (8001ed4 <uart2_rxtx_init+0xd4>)
 8001e9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001e9e:	6213      	str	r3, [r2, #32]



	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= USART2EN;
 8001ea0:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <uart2_rxtx_init+0xd0>)
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <uart2_rxtx_init+0xd0>)
 8001ea6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eaa:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8001eac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eb0:	4909      	ldr	r1, [pc, #36]	; (8001ed8 <uart2_rxtx_init+0xd8>)
 8001eb2:	480a      	ldr	r0, [pc, #40]	; (8001edc <uart2_rxtx_init+0xdc>)
 8001eb4:	f000 f82c 	bl	8001f10 <uart_set_baudrate>

	/*Configure the transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8001eb8:	4b08      	ldr	r3, [pc, #32]	; (8001edc <uart2_rxtx_init+0xdc>)
 8001eba:	220c      	movs	r2, #12
 8001ebc:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	USART2->CR1 |= CR1_UE;
 8001ebe:	4b07      	ldr	r3, [pc, #28]	; (8001edc <uart2_rxtx_init+0xdc>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	4a06      	ldr	r2, [pc, #24]	; (8001edc <uart2_rxtx_init+0xdc>)
 8001ec4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ec8:	60d3      	str	r3, [r2, #12]

}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40020000 	.word	0x40020000
 8001ed8:	00f42400 	.word	0x00f42400
 8001edc:	40004400 	.word	0x40004400

08001ee0 <uart2_write>:
	return USART2->DR;

}

void uart2_write(int ch)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){} // Program stays here until condition in while loop no longer holds
 8001ee8:	bf00      	nop
 8001eea:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <uart2_write+0x2c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f9      	beq.n	8001eea <uart2_write+0xa>

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <uart2_write+0x2c>)
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	6053      	str	r3, [r2, #4]
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	40004400 	.word	0x40004400

08001f10 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 8001f1c:	6879      	ldr	r1, [r7, #4]
 8001f1e:	68b8      	ldr	r0, [r7, #8]
 8001f20:	f000 f808 	bl	8001f34 <compute_uart_bd>
 8001f24:	4603      	mov	r3, r0
 8001f26:	461a      	mov	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	609a      	str	r2, [r3, #8]
}
 8001f2c:	bf00      	nop
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	085a      	lsrs	r2, r3, #1
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	441a      	add	r2, r3
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4c:	b29b      	uxth	r3, r3
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f5c:	480d      	ldr	r0, [pc, #52]	; (8001f94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f5e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f60:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f64:	480c      	ldr	r0, [pc, #48]	; (8001f98 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f66:	490d      	ldr	r1, [pc, #52]	; (8001f9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f68:	4a0d      	ldr	r2, [pc, #52]	; (8001fa0 <LoopForever+0xe>)
  movs r3, #0
 8001f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f6c:	e002      	b.n	8001f74 <LoopCopyDataInit>

08001f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f72:	3304      	adds	r3, #4

08001f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f78:	d3f9      	bcc.n	8001f6e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f7c:	4c0a      	ldr	r4, [pc, #40]	; (8001fa8 <LoopForever+0x16>)
  movs r3, #0
 8001f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f80:	e001      	b.n	8001f86 <LoopFillZerobss>

08001f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f84:	3204      	adds	r2, #4

08001f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f88:	d3fb      	bcc.n	8001f82 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f8a:	f000 ff3b 	bl	8002e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f8e:	f7ff fc87 	bl	80018a0 <main>

08001f92 <LoopForever>:

LoopForever:
  b LoopForever
 8001f92:	e7fe      	b.n	8001f92 <LoopForever>
  ldr   r0, =_estack
 8001f94:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f9c:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001fa0:	08004d64 	.word	0x08004d64
  ldr r2, =_sbss
 8001fa4:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001fa8:	2000033c 	.word	0x2000033c

08001fac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fac:	e7fe      	b.n	8001fac <ADC_IRQHandler>

08001fae <__cvt>:
 8001fae:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001fb2:	ec55 4b10 	vmov	r4, r5, d0
 8001fb6:	2d00      	cmp	r5, #0
 8001fb8:	460e      	mov	r6, r1
 8001fba:	4619      	mov	r1, r3
 8001fbc:	462b      	mov	r3, r5
 8001fbe:	bfbb      	ittet	lt
 8001fc0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8001fc4:	461d      	movlt	r5, r3
 8001fc6:	2300      	movge	r3, #0
 8001fc8:	232d      	movlt	r3, #45	; 0x2d
 8001fca:	700b      	strb	r3, [r1, #0]
 8001fcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001fce:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8001fd2:	4691      	mov	r9, r2
 8001fd4:	f023 0820 	bic.w	r8, r3, #32
 8001fd8:	bfbc      	itt	lt
 8001fda:	4622      	movlt	r2, r4
 8001fdc:	4614      	movlt	r4, r2
 8001fde:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8001fe2:	d005      	beq.n	8001ff0 <__cvt+0x42>
 8001fe4:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8001fe8:	d100      	bne.n	8001fec <__cvt+0x3e>
 8001fea:	3601      	adds	r6, #1
 8001fec:	2102      	movs	r1, #2
 8001fee:	e000      	b.n	8001ff2 <__cvt+0x44>
 8001ff0:	2103      	movs	r1, #3
 8001ff2:	ab03      	add	r3, sp, #12
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	ab02      	add	r3, sp, #8
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	ec45 4b10 	vmov	d0, r4, r5
 8001ffe:	4653      	mov	r3, sl
 8002000:	4632      	mov	r2, r6
 8002002:	f000 ffb1 	bl	8002f68 <_dtoa_r>
 8002006:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800200a:	4607      	mov	r7, r0
 800200c:	d102      	bne.n	8002014 <__cvt+0x66>
 800200e:	f019 0f01 	tst.w	r9, #1
 8002012:	d022      	beq.n	800205a <__cvt+0xac>
 8002014:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8002018:	eb07 0906 	add.w	r9, r7, r6
 800201c:	d110      	bne.n	8002040 <__cvt+0x92>
 800201e:	783b      	ldrb	r3, [r7, #0]
 8002020:	2b30      	cmp	r3, #48	; 0x30
 8002022:	d10a      	bne.n	800203a <__cvt+0x8c>
 8002024:	2200      	movs	r2, #0
 8002026:	2300      	movs	r3, #0
 8002028:	4620      	mov	r0, r4
 800202a:	4629      	mov	r1, r5
 800202c:	f7fe fd54 	bl	8000ad8 <__aeabi_dcmpeq>
 8002030:	b918      	cbnz	r0, 800203a <__cvt+0x8c>
 8002032:	f1c6 0601 	rsb	r6, r6, #1
 8002036:	f8ca 6000 	str.w	r6, [sl]
 800203a:	f8da 3000 	ldr.w	r3, [sl]
 800203e:	4499      	add	r9, r3
 8002040:	2200      	movs	r2, #0
 8002042:	2300      	movs	r3, #0
 8002044:	4620      	mov	r0, r4
 8002046:	4629      	mov	r1, r5
 8002048:	f7fe fd46 	bl	8000ad8 <__aeabi_dcmpeq>
 800204c:	b108      	cbz	r0, 8002052 <__cvt+0xa4>
 800204e:	f8cd 900c 	str.w	r9, [sp, #12]
 8002052:	2230      	movs	r2, #48	; 0x30
 8002054:	9b03      	ldr	r3, [sp, #12]
 8002056:	454b      	cmp	r3, r9
 8002058:	d307      	bcc.n	800206a <__cvt+0xbc>
 800205a:	9b03      	ldr	r3, [sp, #12]
 800205c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800205e:	1bdb      	subs	r3, r3, r7
 8002060:	4638      	mov	r0, r7
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	b004      	add	sp, #16
 8002066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800206a:	1c59      	adds	r1, r3, #1
 800206c:	9103      	str	r1, [sp, #12]
 800206e:	701a      	strb	r2, [r3, #0]
 8002070:	e7f0      	b.n	8002054 <__cvt+0xa6>

08002072 <__exponent>:
 8002072:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002074:	4603      	mov	r3, r0
 8002076:	2900      	cmp	r1, #0
 8002078:	bfb8      	it	lt
 800207a:	4249      	neglt	r1, r1
 800207c:	f803 2b02 	strb.w	r2, [r3], #2
 8002080:	bfb4      	ite	lt
 8002082:	222d      	movlt	r2, #45	; 0x2d
 8002084:	222b      	movge	r2, #43	; 0x2b
 8002086:	2909      	cmp	r1, #9
 8002088:	7042      	strb	r2, [r0, #1]
 800208a:	dd2a      	ble.n	80020e2 <__exponent+0x70>
 800208c:	f10d 0207 	add.w	r2, sp, #7
 8002090:	4617      	mov	r7, r2
 8002092:	260a      	movs	r6, #10
 8002094:	4694      	mov	ip, r2
 8002096:	fb91 f5f6 	sdiv	r5, r1, r6
 800209a:	fb06 1415 	mls	r4, r6, r5, r1
 800209e:	3430      	adds	r4, #48	; 0x30
 80020a0:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80020a4:	460c      	mov	r4, r1
 80020a6:	2c63      	cmp	r4, #99	; 0x63
 80020a8:	f102 32ff 	add.w	r2, r2, #4294967295
 80020ac:	4629      	mov	r1, r5
 80020ae:	dcf1      	bgt.n	8002094 <__exponent+0x22>
 80020b0:	3130      	adds	r1, #48	; 0x30
 80020b2:	f1ac 0402 	sub.w	r4, ip, #2
 80020b6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80020ba:	1c41      	adds	r1, r0, #1
 80020bc:	4622      	mov	r2, r4
 80020be:	42ba      	cmp	r2, r7
 80020c0:	d30a      	bcc.n	80020d8 <__exponent+0x66>
 80020c2:	f10d 0209 	add.w	r2, sp, #9
 80020c6:	eba2 020c 	sub.w	r2, r2, ip
 80020ca:	42bc      	cmp	r4, r7
 80020cc:	bf88      	it	hi
 80020ce:	2200      	movhi	r2, #0
 80020d0:	4413      	add	r3, r2
 80020d2:	1a18      	subs	r0, r3, r0
 80020d4:	b003      	add	sp, #12
 80020d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020d8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80020dc:	f801 5f01 	strb.w	r5, [r1, #1]!
 80020e0:	e7ed      	b.n	80020be <__exponent+0x4c>
 80020e2:	2330      	movs	r3, #48	; 0x30
 80020e4:	3130      	adds	r1, #48	; 0x30
 80020e6:	7083      	strb	r3, [r0, #2]
 80020e8:	70c1      	strb	r1, [r0, #3]
 80020ea:	1d03      	adds	r3, r0, #4
 80020ec:	e7f1      	b.n	80020d2 <__exponent+0x60>
	...

080020f0 <_printf_float>:
 80020f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020f4:	ed2d 8b02 	vpush	{d8}
 80020f8:	b08d      	sub	sp, #52	; 0x34
 80020fa:	460c      	mov	r4, r1
 80020fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8002100:	4616      	mov	r6, r2
 8002102:	461f      	mov	r7, r3
 8002104:	4605      	mov	r5, r0
 8002106:	f000 fe2d 	bl	8002d64 <_localeconv_r>
 800210a:	f8d0 a000 	ldr.w	sl, [r0]
 800210e:	4650      	mov	r0, sl
 8002110:	f7fe f8b6 	bl	8000280 <strlen>
 8002114:	2300      	movs	r3, #0
 8002116:	930a      	str	r3, [sp, #40]	; 0x28
 8002118:	6823      	ldr	r3, [r4, #0]
 800211a:	9305      	str	r3, [sp, #20]
 800211c:	f8d8 3000 	ldr.w	r3, [r8]
 8002120:	f894 b018 	ldrb.w	fp, [r4, #24]
 8002124:	3307      	adds	r3, #7
 8002126:	f023 0307 	bic.w	r3, r3, #7
 800212a:	f103 0208 	add.w	r2, r3, #8
 800212e:	f8c8 2000 	str.w	r2, [r8]
 8002132:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002136:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800213a:	9307      	str	r3, [sp, #28]
 800213c:	f8cd 8018 	str.w	r8, [sp, #24]
 8002140:	ee08 0a10 	vmov	s16, r0
 8002144:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8002148:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800214c:	4b9e      	ldr	r3, [pc, #632]	; (80023c8 <_printf_float+0x2d8>)
 800214e:	f04f 32ff 	mov.w	r2, #4294967295
 8002152:	f7fe fcf3 	bl	8000b3c <__aeabi_dcmpun>
 8002156:	bb88      	cbnz	r0, 80021bc <_printf_float+0xcc>
 8002158:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800215c:	4b9a      	ldr	r3, [pc, #616]	; (80023c8 <_printf_float+0x2d8>)
 800215e:	f04f 32ff 	mov.w	r2, #4294967295
 8002162:	f7fe fccd 	bl	8000b00 <__aeabi_dcmple>
 8002166:	bb48      	cbnz	r0, 80021bc <_printf_float+0xcc>
 8002168:	2200      	movs	r2, #0
 800216a:	2300      	movs	r3, #0
 800216c:	4640      	mov	r0, r8
 800216e:	4649      	mov	r1, r9
 8002170:	f7fe fcbc 	bl	8000aec <__aeabi_dcmplt>
 8002174:	b110      	cbz	r0, 800217c <_printf_float+0x8c>
 8002176:	232d      	movs	r3, #45	; 0x2d
 8002178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800217c:	4a93      	ldr	r2, [pc, #588]	; (80023cc <_printf_float+0x2dc>)
 800217e:	4b94      	ldr	r3, [pc, #592]	; (80023d0 <_printf_float+0x2e0>)
 8002180:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002184:	bf94      	ite	ls
 8002186:	4690      	movls	r8, r2
 8002188:	4698      	movhi	r8, r3
 800218a:	2303      	movs	r3, #3
 800218c:	6123      	str	r3, [r4, #16]
 800218e:	9b05      	ldr	r3, [sp, #20]
 8002190:	f023 0304 	bic.w	r3, r3, #4
 8002194:	6023      	str	r3, [r4, #0]
 8002196:	f04f 0900 	mov.w	r9, #0
 800219a:	9700      	str	r7, [sp, #0]
 800219c:	4633      	mov	r3, r6
 800219e:	aa0b      	add	r2, sp, #44	; 0x2c
 80021a0:	4621      	mov	r1, r4
 80021a2:	4628      	mov	r0, r5
 80021a4:	f000 f9da 	bl	800255c <_printf_common>
 80021a8:	3001      	adds	r0, #1
 80021aa:	f040 8090 	bne.w	80022ce <_printf_float+0x1de>
 80021ae:	f04f 30ff 	mov.w	r0, #4294967295
 80021b2:	b00d      	add	sp, #52	; 0x34
 80021b4:	ecbd 8b02 	vpop	{d8}
 80021b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021bc:	4642      	mov	r2, r8
 80021be:	464b      	mov	r3, r9
 80021c0:	4640      	mov	r0, r8
 80021c2:	4649      	mov	r1, r9
 80021c4:	f7fe fcba 	bl	8000b3c <__aeabi_dcmpun>
 80021c8:	b140      	cbz	r0, 80021dc <_printf_float+0xec>
 80021ca:	464b      	mov	r3, r9
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	bfbc      	itt	lt
 80021d0:	232d      	movlt	r3, #45	; 0x2d
 80021d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80021d6:	4a7f      	ldr	r2, [pc, #508]	; (80023d4 <_printf_float+0x2e4>)
 80021d8:	4b7f      	ldr	r3, [pc, #508]	; (80023d8 <_printf_float+0x2e8>)
 80021da:	e7d1      	b.n	8002180 <_printf_float+0x90>
 80021dc:	6863      	ldr	r3, [r4, #4]
 80021de:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80021e2:	9206      	str	r2, [sp, #24]
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	d13f      	bne.n	8002268 <_printf_float+0x178>
 80021e8:	2306      	movs	r3, #6
 80021ea:	6063      	str	r3, [r4, #4]
 80021ec:	9b05      	ldr	r3, [sp, #20]
 80021ee:	6861      	ldr	r1, [r4, #4]
 80021f0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80021f4:	2300      	movs	r3, #0
 80021f6:	9303      	str	r3, [sp, #12]
 80021f8:	ab0a      	add	r3, sp, #40	; 0x28
 80021fa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80021fe:	ab09      	add	r3, sp, #36	; 0x24
 8002200:	ec49 8b10 	vmov	d0, r8, r9
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	6022      	str	r2, [r4, #0]
 8002208:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800220c:	4628      	mov	r0, r5
 800220e:	f7ff fece 	bl	8001fae <__cvt>
 8002212:	9b06      	ldr	r3, [sp, #24]
 8002214:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002216:	2b47      	cmp	r3, #71	; 0x47
 8002218:	4680      	mov	r8, r0
 800221a:	d108      	bne.n	800222e <_printf_float+0x13e>
 800221c:	1cc8      	adds	r0, r1, #3
 800221e:	db02      	blt.n	8002226 <_printf_float+0x136>
 8002220:	6863      	ldr	r3, [r4, #4]
 8002222:	4299      	cmp	r1, r3
 8002224:	dd41      	ble.n	80022aa <_printf_float+0x1ba>
 8002226:	f1ab 0302 	sub.w	r3, fp, #2
 800222a:	fa5f fb83 	uxtb.w	fp, r3
 800222e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002232:	d820      	bhi.n	8002276 <_printf_float+0x186>
 8002234:	3901      	subs	r1, #1
 8002236:	465a      	mov	r2, fp
 8002238:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800223c:	9109      	str	r1, [sp, #36]	; 0x24
 800223e:	f7ff ff18 	bl	8002072 <__exponent>
 8002242:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002244:	1813      	adds	r3, r2, r0
 8002246:	2a01      	cmp	r2, #1
 8002248:	4681      	mov	r9, r0
 800224a:	6123      	str	r3, [r4, #16]
 800224c:	dc02      	bgt.n	8002254 <_printf_float+0x164>
 800224e:	6822      	ldr	r2, [r4, #0]
 8002250:	07d2      	lsls	r2, r2, #31
 8002252:	d501      	bpl.n	8002258 <_printf_float+0x168>
 8002254:	3301      	adds	r3, #1
 8002256:	6123      	str	r3, [r4, #16]
 8002258:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800225c:	2b00      	cmp	r3, #0
 800225e:	d09c      	beq.n	800219a <_printf_float+0xaa>
 8002260:	232d      	movs	r3, #45	; 0x2d
 8002262:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002266:	e798      	b.n	800219a <_printf_float+0xaa>
 8002268:	9a06      	ldr	r2, [sp, #24]
 800226a:	2a47      	cmp	r2, #71	; 0x47
 800226c:	d1be      	bne.n	80021ec <_printf_float+0xfc>
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1bc      	bne.n	80021ec <_printf_float+0xfc>
 8002272:	2301      	movs	r3, #1
 8002274:	e7b9      	b.n	80021ea <_printf_float+0xfa>
 8002276:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800227a:	d118      	bne.n	80022ae <_printf_float+0x1be>
 800227c:	2900      	cmp	r1, #0
 800227e:	6863      	ldr	r3, [r4, #4]
 8002280:	dd0b      	ble.n	800229a <_printf_float+0x1aa>
 8002282:	6121      	str	r1, [r4, #16]
 8002284:	b913      	cbnz	r3, 800228c <_printf_float+0x19c>
 8002286:	6822      	ldr	r2, [r4, #0]
 8002288:	07d0      	lsls	r0, r2, #31
 800228a:	d502      	bpl.n	8002292 <_printf_float+0x1a2>
 800228c:	3301      	adds	r3, #1
 800228e:	440b      	add	r3, r1
 8002290:	6123      	str	r3, [r4, #16]
 8002292:	65a1      	str	r1, [r4, #88]	; 0x58
 8002294:	f04f 0900 	mov.w	r9, #0
 8002298:	e7de      	b.n	8002258 <_printf_float+0x168>
 800229a:	b913      	cbnz	r3, 80022a2 <_printf_float+0x1b2>
 800229c:	6822      	ldr	r2, [r4, #0]
 800229e:	07d2      	lsls	r2, r2, #31
 80022a0:	d501      	bpl.n	80022a6 <_printf_float+0x1b6>
 80022a2:	3302      	adds	r3, #2
 80022a4:	e7f4      	b.n	8002290 <_printf_float+0x1a0>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e7f2      	b.n	8002290 <_printf_float+0x1a0>
 80022aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80022ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80022b0:	4299      	cmp	r1, r3
 80022b2:	db05      	blt.n	80022c0 <_printf_float+0x1d0>
 80022b4:	6823      	ldr	r3, [r4, #0]
 80022b6:	6121      	str	r1, [r4, #16]
 80022b8:	07d8      	lsls	r0, r3, #31
 80022ba:	d5ea      	bpl.n	8002292 <_printf_float+0x1a2>
 80022bc:	1c4b      	adds	r3, r1, #1
 80022be:	e7e7      	b.n	8002290 <_printf_float+0x1a0>
 80022c0:	2900      	cmp	r1, #0
 80022c2:	bfd4      	ite	le
 80022c4:	f1c1 0202 	rsble	r2, r1, #2
 80022c8:	2201      	movgt	r2, #1
 80022ca:	4413      	add	r3, r2
 80022cc:	e7e0      	b.n	8002290 <_printf_float+0x1a0>
 80022ce:	6823      	ldr	r3, [r4, #0]
 80022d0:	055a      	lsls	r2, r3, #21
 80022d2:	d407      	bmi.n	80022e4 <_printf_float+0x1f4>
 80022d4:	6923      	ldr	r3, [r4, #16]
 80022d6:	4642      	mov	r2, r8
 80022d8:	4631      	mov	r1, r6
 80022da:	4628      	mov	r0, r5
 80022dc:	47b8      	blx	r7
 80022de:	3001      	adds	r0, #1
 80022e0:	d12c      	bne.n	800233c <_printf_float+0x24c>
 80022e2:	e764      	b.n	80021ae <_printf_float+0xbe>
 80022e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80022e8:	f240 80e0 	bls.w	80024ac <_printf_float+0x3bc>
 80022ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80022f0:	2200      	movs	r2, #0
 80022f2:	2300      	movs	r3, #0
 80022f4:	f7fe fbf0 	bl	8000ad8 <__aeabi_dcmpeq>
 80022f8:	2800      	cmp	r0, #0
 80022fa:	d034      	beq.n	8002366 <_printf_float+0x276>
 80022fc:	4a37      	ldr	r2, [pc, #220]	; (80023dc <_printf_float+0x2ec>)
 80022fe:	2301      	movs	r3, #1
 8002300:	4631      	mov	r1, r6
 8002302:	4628      	mov	r0, r5
 8002304:	47b8      	blx	r7
 8002306:	3001      	adds	r0, #1
 8002308:	f43f af51 	beq.w	80021ae <_printf_float+0xbe>
 800230c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002310:	429a      	cmp	r2, r3
 8002312:	db02      	blt.n	800231a <_printf_float+0x22a>
 8002314:	6823      	ldr	r3, [r4, #0]
 8002316:	07d8      	lsls	r0, r3, #31
 8002318:	d510      	bpl.n	800233c <_printf_float+0x24c>
 800231a:	ee18 3a10 	vmov	r3, s16
 800231e:	4652      	mov	r2, sl
 8002320:	4631      	mov	r1, r6
 8002322:	4628      	mov	r0, r5
 8002324:	47b8      	blx	r7
 8002326:	3001      	adds	r0, #1
 8002328:	f43f af41 	beq.w	80021ae <_printf_float+0xbe>
 800232c:	f04f 0800 	mov.w	r8, #0
 8002330:	f104 091a 	add.w	r9, r4, #26
 8002334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002336:	3b01      	subs	r3, #1
 8002338:	4543      	cmp	r3, r8
 800233a:	dc09      	bgt.n	8002350 <_printf_float+0x260>
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	079b      	lsls	r3, r3, #30
 8002340:	f100 8107 	bmi.w	8002552 <_printf_float+0x462>
 8002344:	68e0      	ldr	r0, [r4, #12]
 8002346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002348:	4298      	cmp	r0, r3
 800234a:	bfb8      	it	lt
 800234c:	4618      	movlt	r0, r3
 800234e:	e730      	b.n	80021b2 <_printf_float+0xc2>
 8002350:	2301      	movs	r3, #1
 8002352:	464a      	mov	r2, r9
 8002354:	4631      	mov	r1, r6
 8002356:	4628      	mov	r0, r5
 8002358:	47b8      	blx	r7
 800235a:	3001      	adds	r0, #1
 800235c:	f43f af27 	beq.w	80021ae <_printf_float+0xbe>
 8002360:	f108 0801 	add.w	r8, r8, #1
 8002364:	e7e6      	b.n	8002334 <_printf_float+0x244>
 8002366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002368:	2b00      	cmp	r3, #0
 800236a:	dc39      	bgt.n	80023e0 <_printf_float+0x2f0>
 800236c:	4a1b      	ldr	r2, [pc, #108]	; (80023dc <_printf_float+0x2ec>)
 800236e:	2301      	movs	r3, #1
 8002370:	4631      	mov	r1, r6
 8002372:	4628      	mov	r0, r5
 8002374:	47b8      	blx	r7
 8002376:	3001      	adds	r0, #1
 8002378:	f43f af19 	beq.w	80021ae <_printf_float+0xbe>
 800237c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002380:	4313      	orrs	r3, r2
 8002382:	d102      	bne.n	800238a <_printf_float+0x29a>
 8002384:	6823      	ldr	r3, [r4, #0]
 8002386:	07d9      	lsls	r1, r3, #31
 8002388:	d5d8      	bpl.n	800233c <_printf_float+0x24c>
 800238a:	ee18 3a10 	vmov	r3, s16
 800238e:	4652      	mov	r2, sl
 8002390:	4631      	mov	r1, r6
 8002392:	4628      	mov	r0, r5
 8002394:	47b8      	blx	r7
 8002396:	3001      	adds	r0, #1
 8002398:	f43f af09 	beq.w	80021ae <_printf_float+0xbe>
 800239c:	f04f 0900 	mov.w	r9, #0
 80023a0:	f104 0a1a 	add.w	sl, r4, #26
 80023a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80023a6:	425b      	negs	r3, r3
 80023a8:	454b      	cmp	r3, r9
 80023aa:	dc01      	bgt.n	80023b0 <_printf_float+0x2c0>
 80023ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80023ae:	e792      	b.n	80022d6 <_printf_float+0x1e6>
 80023b0:	2301      	movs	r3, #1
 80023b2:	4652      	mov	r2, sl
 80023b4:	4631      	mov	r1, r6
 80023b6:	4628      	mov	r0, r5
 80023b8:	47b8      	blx	r7
 80023ba:	3001      	adds	r0, #1
 80023bc:	f43f aef7 	beq.w	80021ae <_printf_float+0xbe>
 80023c0:	f109 0901 	add.w	r9, r9, #1
 80023c4:	e7ee      	b.n	80023a4 <_printf_float+0x2b4>
 80023c6:	bf00      	nop
 80023c8:	7fefffff 	.word	0x7fefffff
 80023cc:	080049e7 	.word	0x080049e7
 80023d0:	080049eb 	.word	0x080049eb
 80023d4:	080049ef 	.word	0x080049ef
 80023d8:	080049f3 	.word	0x080049f3
 80023dc:	080049f7 	.word	0x080049f7
 80023e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80023e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023e4:	429a      	cmp	r2, r3
 80023e6:	bfa8      	it	ge
 80023e8:	461a      	movge	r2, r3
 80023ea:	2a00      	cmp	r2, #0
 80023ec:	4691      	mov	r9, r2
 80023ee:	dc37      	bgt.n	8002460 <_printf_float+0x370>
 80023f0:	f04f 0b00 	mov.w	fp, #0
 80023f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80023f8:	f104 021a 	add.w	r2, r4, #26
 80023fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023fe:	9305      	str	r3, [sp, #20]
 8002400:	eba3 0309 	sub.w	r3, r3, r9
 8002404:	455b      	cmp	r3, fp
 8002406:	dc33      	bgt.n	8002470 <_printf_float+0x380>
 8002408:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800240c:	429a      	cmp	r2, r3
 800240e:	db3b      	blt.n	8002488 <_printf_float+0x398>
 8002410:	6823      	ldr	r3, [r4, #0]
 8002412:	07da      	lsls	r2, r3, #31
 8002414:	d438      	bmi.n	8002488 <_printf_float+0x398>
 8002416:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800241a:	eba2 0903 	sub.w	r9, r2, r3
 800241e:	9b05      	ldr	r3, [sp, #20]
 8002420:	1ad2      	subs	r2, r2, r3
 8002422:	4591      	cmp	r9, r2
 8002424:	bfa8      	it	ge
 8002426:	4691      	movge	r9, r2
 8002428:	f1b9 0f00 	cmp.w	r9, #0
 800242c:	dc35      	bgt.n	800249a <_printf_float+0x3aa>
 800242e:	f04f 0800 	mov.w	r8, #0
 8002432:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002436:	f104 0a1a 	add.w	sl, r4, #26
 800243a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800243e:	1a9b      	subs	r3, r3, r2
 8002440:	eba3 0309 	sub.w	r3, r3, r9
 8002444:	4543      	cmp	r3, r8
 8002446:	f77f af79 	ble.w	800233c <_printf_float+0x24c>
 800244a:	2301      	movs	r3, #1
 800244c:	4652      	mov	r2, sl
 800244e:	4631      	mov	r1, r6
 8002450:	4628      	mov	r0, r5
 8002452:	47b8      	blx	r7
 8002454:	3001      	adds	r0, #1
 8002456:	f43f aeaa 	beq.w	80021ae <_printf_float+0xbe>
 800245a:	f108 0801 	add.w	r8, r8, #1
 800245e:	e7ec      	b.n	800243a <_printf_float+0x34a>
 8002460:	4613      	mov	r3, r2
 8002462:	4631      	mov	r1, r6
 8002464:	4642      	mov	r2, r8
 8002466:	4628      	mov	r0, r5
 8002468:	47b8      	blx	r7
 800246a:	3001      	adds	r0, #1
 800246c:	d1c0      	bne.n	80023f0 <_printf_float+0x300>
 800246e:	e69e      	b.n	80021ae <_printf_float+0xbe>
 8002470:	2301      	movs	r3, #1
 8002472:	4631      	mov	r1, r6
 8002474:	4628      	mov	r0, r5
 8002476:	9205      	str	r2, [sp, #20]
 8002478:	47b8      	blx	r7
 800247a:	3001      	adds	r0, #1
 800247c:	f43f ae97 	beq.w	80021ae <_printf_float+0xbe>
 8002480:	9a05      	ldr	r2, [sp, #20]
 8002482:	f10b 0b01 	add.w	fp, fp, #1
 8002486:	e7b9      	b.n	80023fc <_printf_float+0x30c>
 8002488:	ee18 3a10 	vmov	r3, s16
 800248c:	4652      	mov	r2, sl
 800248e:	4631      	mov	r1, r6
 8002490:	4628      	mov	r0, r5
 8002492:	47b8      	blx	r7
 8002494:	3001      	adds	r0, #1
 8002496:	d1be      	bne.n	8002416 <_printf_float+0x326>
 8002498:	e689      	b.n	80021ae <_printf_float+0xbe>
 800249a:	9a05      	ldr	r2, [sp, #20]
 800249c:	464b      	mov	r3, r9
 800249e:	4442      	add	r2, r8
 80024a0:	4631      	mov	r1, r6
 80024a2:	4628      	mov	r0, r5
 80024a4:	47b8      	blx	r7
 80024a6:	3001      	adds	r0, #1
 80024a8:	d1c1      	bne.n	800242e <_printf_float+0x33e>
 80024aa:	e680      	b.n	80021ae <_printf_float+0xbe>
 80024ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80024ae:	2a01      	cmp	r2, #1
 80024b0:	dc01      	bgt.n	80024b6 <_printf_float+0x3c6>
 80024b2:	07db      	lsls	r3, r3, #31
 80024b4:	d53a      	bpl.n	800252c <_printf_float+0x43c>
 80024b6:	2301      	movs	r3, #1
 80024b8:	4642      	mov	r2, r8
 80024ba:	4631      	mov	r1, r6
 80024bc:	4628      	mov	r0, r5
 80024be:	47b8      	blx	r7
 80024c0:	3001      	adds	r0, #1
 80024c2:	f43f ae74 	beq.w	80021ae <_printf_float+0xbe>
 80024c6:	ee18 3a10 	vmov	r3, s16
 80024ca:	4652      	mov	r2, sl
 80024cc:	4631      	mov	r1, r6
 80024ce:	4628      	mov	r0, r5
 80024d0:	47b8      	blx	r7
 80024d2:	3001      	adds	r0, #1
 80024d4:	f43f ae6b 	beq.w	80021ae <_printf_float+0xbe>
 80024d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80024dc:	2200      	movs	r2, #0
 80024de:	2300      	movs	r3, #0
 80024e0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80024e4:	f7fe faf8 	bl	8000ad8 <__aeabi_dcmpeq>
 80024e8:	b9d8      	cbnz	r0, 8002522 <_printf_float+0x432>
 80024ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 80024ee:	f108 0201 	add.w	r2, r8, #1
 80024f2:	4631      	mov	r1, r6
 80024f4:	4628      	mov	r0, r5
 80024f6:	47b8      	blx	r7
 80024f8:	3001      	adds	r0, #1
 80024fa:	d10e      	bne.n	800251a <_printf_float+0x42a>
 80024fc:	e657      	b.n	80021ae <_printf_float+0xbe>
 80024fe:	2301      	movs	r3, #1
 8002500:	4652      	mov	r2, sl
 8002502:	4631      	mov	r1, r6
 8002504:	4628      	mov	r0, r5
 8002506:	47b8      	blx	r7
 8002508:	3001      	adds	r0, #1
 800250a:	f43f ae50 	beq.w	80021ae <_printf_float+0xbe>
 800250e:	f108 0801 	add.w	r8, r8, #1
 8002512:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002514:	3b01      	subs	r3, #1
 8002516:	4543      	cmp	r3, r8
 8002518:	dcf1      	bgt.n	80024fe <_printf_float+0x40e>
 800251a:	464b      	mov	r3, r9
 800251c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002520:	e6da      	b.n	80022d8 <_printf_float+0x1e8>
 8002522:	f04f 0800 	mov.w	r8, #0
 8002526:	f104 0a1a 	add.w	sl, r4, #26
 800252a:	e7f2      	b.n	8002512 <_printf_float+0x422>
 800252c:	2301      	movs	r3, #1
 800252e:	4642      	mov	r2, r8
 8002530:	e7df      	b.n	80024f2 <_printf_float+0x402>
 8002532:	2301      	movs	r3, #1
 8002534:	464a      	mov	r2, r9
 8002536:	4631      	mov	r1, r6
 8002538:	4628      	mov	r0, r5
 800253a:	47b8      	blx	r7
 800253c:	3001      	adds	r0, #1
 800253e:	f43f ae36 	beq.w	80021ae <_printf_float+0xbe>
 8002542:	f108 0801 	add.w	r8, r8, #1
 8002546:	68e3      	ldr	r3, [r4, #12]
 8002548:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800254a:	1a5b      	subs	r3, r3, r1
 800254c:	4543      	cmp	r3, r8
 800254e:	dcf0      	bgt.n	8002532 <_printf_float+0x442>
 8002550:	e6f8      	b.n	8002344 <_printf_float+0x254>
 8002552:	f04f 0800 	mov.w	r8, #0
 8002556:	f104 0919 	add.w	r9, r4, #25
 800255a:	e7f4      	b.n	8002546 <_printf_float+0x456>

0800255c <_printf_common>:
 800255c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002560:	4616      	mov	r6, r2
 8002562:	4699      	mov	r9, r3
 8002564:	688a      	ldr	r2, [r1, #8]
 8002566:	690b      	ldr	r3, [r1, #16]
 8002568:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800256c:	4293      	cmp	r3, r2
 800256e:	bfb8      	it	lt
 8002570:	4613      	movlt	r3, r2
 8002572:	6033      	str	r3, [r6, #0]
 8002574:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002578:	4607      	mov	r7, r0
 800257a:	460c      	mov	r4, r1
 800257c:	b10a      	cbz	r2, 8002582 <_printf_common+0x26>
 800257e:	3301      	adds	r3, #1
 8002580:	6033      	str	r3, [r6, #0]
 8002582:	6823      	ldr	r3, [r4, #0]
 8002584:	0699      	lsls	r1, r3, #26
 8002586:	bf42      	ittt	mi
 8002588:	6833      	ldrmi	r3, [r6, #0]
 800258a:	3302      	addmi	r3, #2
 800258c:	6033      	strmi	r3, [r6, #0]
 800258e:	6825      	ldr	r5, [r4, #0]
 8002590:	f015 0506 	ands.w	r5, r5, #6
 8002594:	d106      	bne.n	80025a4 <_printf_common+0x48>
 8002596:	f104 0a19 	add.w	sl, r4, #25
 800259a:	68e3      	ldr	r3, [r4, #12]
 800259c:	6832      	ldr	r2, [r6, #0]
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	42ab      	cmp	r3, r5
 80025a2:	dc26      	bgt.n	80025f2 <_printf_common+0x96>
 80025a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80025a8:	1e13      	subs	r3, r2, #0
 80025aa:	6822      	ldr	r2, [r4, #0]
 80025ac:	bf18      	it	ne
 80025ae:	2301      	movne	r3, #1
 80025b0:	0692      	lsls	r2, r2, #26
 80025b2:	d42b      	bmi.n	800260c <_printf_common+0xb0>
 80025b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025b8:	4649      	mov	r1, r9
 80025ba:	4638      	mov	r0, r7
 80025bc:	47c0      	blx	r8
 80025be:	3001      	adds	r0, #1
 80025c0:	d01e      	beq.n	8002600 <_printf_common+0xa4>
 80025c2:	6823      	ldr	r3, [r4, #0]
 80025c4:	6922      	ldr	r2, [r4, #16]
 80025c6:	f003 0306 	and.w	r3, r3, #6
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	bf02      	ittt	eq
 80025ce:	68e5      	ldreq	r5, [r4, #12]
 80025d0:	6833      	ldreq	r3, [r6, #0]
 80025d2:	1aed      	subeq	r5, r5, r3
 80025d4:	68a3      	ldr	r3, [r4, #8]
 80025d6:	bf0c      	ite	eq
 80025d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025dc:	2500      	movne	r5, #0
 80025de:	4293      	cmp	r3, r2
 80025e0:	bfc4      	itt	gt
 80025e2:	1a9b      	subgt	r3, r3, r2
 80025e4:	18ed      	addgt	r5, r5, r3
 80025e6:	2600      	movs	r6, #0
 80025e8:	341a      	adds	r4, #26
 80025ea:	42b5      	cmp	r5, r6
 80025ec:	d11a      	bne.n	8002624 <_printf_common+0xc8>
 80025ee:	2000      	movs	r0, #0
 80025f0:	e008      	b.n	8002604 <_printf_common+0xa8>
 80025f2:	2301      	movs	r3, #1
 80025f4:	4652      	mov	r2, sl
 80025f6:	4649      	mov	r1, r9
 80025f8:	4638      	mov	r0, r7
 80025fa:	47c0      	blx	r8
 80025fc:	3001      	adds	r0, #1
 80025fe:	d103      	bne.n	8002608 <_printf_common+0xac>
 8002600:	f04f 30ff 	mov.w	r0, #4294967295
 8002604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002608:	3501      	adds	r5, #1
 800260a:	e7c6      	b.n	800259a <_printf_common+0x3e>
 800260c:	18e1      	adds	r1, r4, r3
 800260e:	1c5a      	adds	r2, r3, #1
 8002610:	2030      	movs	r0, #48	; 0x30
 8002612:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002616:	4422      	add	r2, r4
 8002618:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800261c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002620:	3302      	adds	r3, #2
 8002622:	e7c7      	b.n	80025b4 <_printf_common+0x58>
 8002624:	2301      	movs	r3, #1
 8002626:	4622      	mov	r2, r4
 8002628:	4649      	mov	r1, r9
 800262a:	4638      	mov	r0, r7
 800262c:	47c0      	blx	r8
 800262e:	3001      	adds	r0, #1
 8002630:	d0e6      	beq.n	8002600 <_printf_common+0xa4>
 8002632:	3601      	adds	r6, #1
 8002634:	e7d9      	b.n	80025ea <_printf_common+0x8e>
	...

08002638 <_printf_i>:
 8002638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800263c:	7e0f      	ldrb	r7, [r1, #24]
 800263e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002640:	2f78      	cmp	r7, #120	; 0x78
 8002642:	4691      	mov	r9, r2
 8002644:	4680      	mov	r8, r0
 8002646:	460c      	mov	r4, r1
 8002648:	469a      	mov	sl, r3
 800264a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800264e:	d807      	bhi.n	8002660 <_printf_i+0x28>
 8002650:	2f62      	cmp	r7, #98	; 0x62
 8002652:	d80a      	bhi.n	800266a <_printf_i+0x32>
 8002654:	2f00      	cmp	r7, #0
 8002656:	f000 80d4 	beq.w	8002802 <_printf_i+0x1ca>
 800265a:	2f58      	cmp	r7, #88	; 0x58
 800265c:	f000 80c0 	beq.w	80027e0 <_printf_i+0x1a8>
 8002660:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002664:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002668:	e03a      	b.n	80026e0 <_printf_i+0xa8>
 800266a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800266e:	2b15      	cmp	r3, #21
 8002670:	d8f6      	bhi.n	8002660 <_printf_i+0x28>
 8002672:	a101      	add	r1, pc, #4	; (adr r1, 8002678 <_printf_i+0x40>)
 8002674:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002678:	080026d1 	.word	0x080026d1
 800267c:	080026e5 	.word	0x080026e5
 8002680:	08002661 	.word	0x08002661
 8002684:	08002661 	.word	0x08002661
 8002688:	08002661 	.word	0x08002661
 800268c:	08002661 	.word	0x08002661
 8002690:	080026e5 	.word	0x080026e5
 8002694:	08002661 	.word	0x08002661
 8002698:	08002661 	.word	0x08002661
 800269c:	08002661 	.word	0x08002661
 80026a0:	08002661 	.word	0x08002661
 80026a4:	080027e9 	.word	0x080027e9
 80026a8:	08002711 	.word	0x08002711
 80026ac:	080027a3 	.word	0x080027a3
 80026b0:	08002661 	.word	0x08002661
 80026b4:	08002661 	.word	0x08002661
 80026b8:	0800280b 	.word	0x0800280b
 80026bc:	08002661 	.word	0x08002661
 80026c0:	08002711 	.word	0x08002711
 80026c4:	08002661 	.word	0x08002661
 80026c8:	08002661 	.word	0x08002661
 80026cc:	080027ab 	.word	0x080027ab
 80026d0:	682b      	ldr	r3, [r5, #0]
 80026d2:	1d1a      	adds	r2, r3, #4
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	602a      	str	r2, [r5, #0]
 80026d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026e0:	2301      	movs	r3, #1
 80026e2:	e09f      	b.n	8002824 <_printf_i+0x1ec>
 80026e4:	6820      	ldr	r0, [r4, #0]
 80026e6:	682b      	ldr	r3, [r5, #0]
 80026e8:	0607      	lsls	r7, r0, #24
 80026ea:	f103 0104 	add.w	r1, r3, #4
 80026ee:	6029      	str	r1, [r5, #0]
 80026f0:	d501      	bpl.n	80026f6 <_printf_i+0xbe>
 80026f2:	681e      	ldr	r6, [r3, #0]
 80026f4:	e003      	b.n	80026fe <_printf_i+0xc6>
 80026f6:	0646      	lsls	r6, r0, #25
 80026f8:	d5fb      	bpl.n	80026f2 <_printf_i+0xba>
 80026fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80026fe:	2e00      	cmp	r6, #0
 8002700:	da03      	bge.n	800270a <_printf_i+0xd2>
 8002702:	232d      	movs	r3, #45	; 0x2d
 8002704:	4276      	negs	r6, r6
 8002706:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800270a:	485a      	ldr	r0, [pc, #360]	; (8002874 <_printf_i+0x23c>)
 800270c:	230a      	movs	r3, #10
 800270e:	e012      	b.n	8002736 <_printf_i+0xfe>
 8002710:	682b      	ldr	r3, [r5, #0]
 8002712:	6820      	ldr	r0, [r4, #0]
 8002714:	1d19      	adds	r1, r3, #4
 8002716:	6029      	str	r1, [r5, #0]
 8002718:	0605      	lsls	r5, r0, #24
 800271a:	d501      	bpl.n	8002720 <_printf_i+0xe8>
 800271c:	681e      	ldr	r6, [r3, #0]
 800271e:	e002      	b.n	8002726 <_printf_i+0xee>
 8002720:	0641      	lsls	r1, r0, #25
 8002722:	d5fb      	bpl.n	800271c <_printf_i+0xe4>
 8002724:	881e      	ldrh	r6, [r3, #0]
 8002726:	4853      	ldr	r0, [pc, #332]	; (8002874 <_printf_i+0x23c>)
 8002728:	2f6f      	cmp	r7, #111	; 0x6f
 800272a:	bf0c      	ite	eq
 800272c:	2308      	moveq	r3, #8
 800272e:	230a      	movne	r3, #10
 8002730:	2100      	movs	r1, #0
 8002732:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002736:	6865      	ldr	r5, [r4, #4]
 8002738:	60a5      	str	r5, [r4, #8]
 800273a:	2d00      	cmp	r5, #0
 800273c:	bfa2      	ittt	ge
 800273e:	6821      	ldrge	r1, [r4, #0]
 8002740:	f021 0104 	bicge.w	r1, r1, #4
 8002744:	6021      	strge	r1, [r4, #0]
 8002746:	b90e      	cbnz	r6, 800274c <_printf_i+0x114>
 8002748:	2d00      	cmp	r5, #0
 800274a:	d04b      	beq.n	80027e4 <_printf_i+0x1ac>
 800274c:	4615      	mov	r5, r2
 800274e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002752:	fb03 6711 	mls	r7, r3, r1, r6
 8002756:	5dc7      	ldrb	r7, [r0, r7]
 8002758:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800275c:	4637      	mov	r7, r6
 800275e:	42bb      	cmp	r3, r7
 8002760:	460e      	mov	r6, r1
 8002762:	d9f4      	bls.n	800274e <_printf_i+0x116>
 8002764:	2b08      	cmp	r3, #8
 8002766:	d10b      	bne.n	8002780 <_printf_i+0x148>
 8002768:	6823      	ldr	r3, [r4, #0]
 800276a:	07de      	lsls	r6, r3, #31
 800276c:	d508      	bpl.n	8002780 <_printf_i+0x148>
 800276e:	6923      	ldr	r3, [r4, #16]
 8002770:	6861      	ldr	r1, [r4, #4]
 8002772:	4299      	cmp	r1, r3
 8002774:	bfde      	ittt	le
 8002776:	2330      	movle	r3, #48	; 0x30
 8002778:	f805 3c01 	strble.w	r3, [r5, #-1]
 800277c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002780:	1b52      	subs	r2, r2, r5
 8002782:	6122      	str	r2, [r4, #16]
 8002784:	f8cd a000 	str.w	sl, [sp]
 8002788:	464b      	mov	r3, r9
 800278a:	aa03      	add	r2, sp, #12
 800278c:	4621      	mov	r1, r4
 800278e:	4640      	mov	r0, r8
 8002790:	f7ff fee4 	bl	800255c <_printf_common>
 8002794:	3001      	adds	r0, #1
 8002796:	d14a      	bne.n	800282e <_printf_i+0x1f6>
 8002798:	f04f 30ff 	mov.w	r0, #4294967295
 800279c:	b004      	add	sp, #16
 800279e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027a2:	6823      	ldr	r3, [r4, #0]
 80027a4:	f043 0320 	orr.w	r3, r3, #32
 80027a8:	6023      	str	r3, [r4, #0]
 80027aa:	4833      	ldr	r0, [pc, #204]	; (8002878 <_printf_i+0x240>)
 80027ac:	2778      	movs	r7, #120	; 0x78
 80027ae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	6829      	ldr	r1, [r5, #0]
 80027b6:	061f      	lsls	r7, r3, #24
 80027b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80027bc:	d402      	bmi.n	80027c4 <_printf_i+0x18c>
 80027be:	065f      	lsls	r7, r3, #25
 80027c0:	bf48      	it	mi
 80027c2:	b2b6      	uxthmi	r6, r6
 80027c4:	07df      	lsls	r7, r3, #31
 80027c6:	bf48      	it	mi
 80027c8:	f043 0320 	orrmi.w	r3, r3, #32
 80027cc:	6029      	str	r1, [r5, #0]
 80027ce:	bf48      	it	mi
 80027d0:	6023      	strmi	r3, [r4, #0]
 80027d2:	b91e      	cbnz	r6, 80027dc <_printf_i+0x1a4>
 80027d4:	6823      	ldr	r3, [r4, #0]
 80027d6:	f023 0320 	bic.w	r3, r3, #32
 80027da:	6023      	str	r3, [r4, #0]
 80027dc:	2310      	movs	r3, #16
 80027de:	e7a7      	b.n	8002730 <_printf_i+0xf8>
 80027e0:	4824      	ldr	r0, [pc, #144]	; (8002874 <_printf_i+0x23c>)
 80027e2:	e7e4      	b.n	80027ae <_printf_i+0x176>
 80027e4:	4615      	mov	r5, r2
 80027e6:	e7bd      	b.n	8002764 <_printf_i+0x12c>
 80027e8:	682b      	ldr	r3, [r5, #0]
 80027ea:	6826      	ldr	r6, [r4, #0]
 80027ec:	6961      	ldr	r1, [r4, #20]
 80027ee:	1d18      	adds	r0, r3, #4
 80027f0:	6028      	str	r0, [r5, #0]
 80027f2:	0635      	lsls	r5, r6, #24
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	d501      	bpl.n	80027fc <_printf_i+0x1c4>
 80027f8:	6019      	str	r1, [r3, #0]
 80027fa:	e002      	b.n	8002802 <_printf_i+0x1ca>
 80027fc:	0670      	lsls	r0, r6, #25
 80027fe:	d5fb      	bpl.n	80027f8 <_printf_i+0x1c0>
 8002800:	8019      	strh	r1, [r3, #0]
 8002802:	2300      	movs	r3, #0
 8002804:	6123      	str	r3, [r4, #16]
 8002806:	4615      	mov	r5, r2
 8002808:	e7bc      	b.n	8002784 <_printf_i+0x14c>
 800280a:	682b      	ldr	r3, [r5, #0]
 800280c:	1d1a      	adds	r2, r3, #4
 800280e:	602a      	str	r2, [r5, #0]
 8002810:	681d      	ldr	r5, [r3, #0]
 8002812:	6862      	ldr	r2, [r4, #4]
 8002814:	2100      	movs	r1, #0
 8002816:	4628      	mov	r0, r5
 8002818:	f7fd fce2 	bl	80001e0 <memchr>
 800281c:	b108      	cbz	r0, 8002822 <_printf_i+0x1ea>
 800281e:	1b40      	subs	r0, r0, r5
 8002820:	6060      	str	r0, [r4, #4]
 8002822:	6863      	ldr	r3, [r4, #4]
 8002824:	6123      	str	r3, [r4, #16]
 8002826:	2300      	movs	r3, #0
 8002828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800282c:	e7aa      	b.n	8002784 <_printf_i+0x14c>
 800282e:	6923      	ldr	r3, [r4, #16]
 8002830:	462a      	mov	r2, r5
 8002832:	4649      	mov	r1, r9
 8002834:	4640      	mov	r0, r8
 8002836:	47d0      	blx	sl
 8002838:	3001      	adds	r0, #1
 800283a:	d0ad      	beq.n	8002798 <_printf_i+0x160>
 800283c:	6823      	ldr	r3, [r4, #0]
 800283e:	079b      	lsls	r3, r3, #30
 8002840:	d413      	bmi.n	800286a <_printf_i+0x232>
 8002842:	68e0      	ldr	r0, [r4, #12]
 8002844:	9b03      	ldr	r3, [sp, #12]
 8002846:	4298      	cmp	r0, r3
 8002848:	bfb8      	it	lt
 800284a:	4618      	movlt	r0, r3
 800284c:	e7a6      	b.n	800279c <_printf_i+0x164>
 800284e:	2301      	movs	r3, #1
 8002850:	4632      	mov	r2, r6
 8002852:	4649      	mov	r1, r9
 8002854:	4640      	mov	r0, r8
 8002856:	47d0      	blx	sl
 8002858:	3001      	adds	r0, #1
 800285a:	d09d      	beq.n	8002798 <_printf_i+0x160>
 800285c:	3501      	adds	r5, #1
 800285e:	68e3      	ldr	r3, [r4, #12]
 8002860:	9903      	ldr	r1, [sp, #12]
 8002862:	1a5b      	subs	r3, r3, r1
 8002864:	42ab      	cmp	r3, r5
 8002866:	dcf2      	bgt.n	800284e <_printf_i+0x216>
 8002868:	e7eb      	b.n	8002842 <_printf_i+0x20a>
 800286a:	2500      	movs	r5, #0
 800286c:	f104 0619 	add.w	r6, r4, #25
 8002870:	e7f5      	b.n	800285e <_printf_i+0x226>
 8002872:	bf00      	nop
 8002874:	080049f9 	.word	0x080049f9
 8002878:	08004a0a 	.word	0x08004a0a

0800287c <__sflush_r>:
 800287c:	898a      	ldrh	r2, [r1, #12]
 800287e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002882:	4605      	mov	r5, r0
 8002884:	0710      	lsls	r0, r2, #28
 8002886:	460c      	mov	r4, r1
 8002888:	d458      	bmi.n	800293c <__sflush_r+0xc0>
 800288a:	684b      	ldr	r3, [r1, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	dc05      	bgt.n	800289c <__sflush_r+0x20>
 8002890:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002892:	2b00      	cmp	r3, #0
 8002894:	dc02      	bgt.n	800289c <__sflush_r+0x20>
 8002896:	2000      	movs	r0, #0
 8002898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800289c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800289e:	2e00      	cmp	r6, #0
 80028a0:	d0f9      	beq.n	8002896 <__sflush_r+0x1a>
 80028a2:	2300      	movs	r3, #0
 80028a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80028a8:	682f      	ldr	r7, [r5, #0]
 80028aa:	6a21      	ldr	r1, [r4, #32]
 80028ac:	602b      	str	r3, [r5, #0]
 80028ae:	d032      	beq.n	8002916 <__sflush_r+0x9a>
 80028b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80028b2:	89a3      	ldrh	r3, [r4, #12]
 80028b4:	075a      	lsls	r2, r3, #29
 80028b6:	d505      	bpl.n	80028c4 <__sflush_r+0x48>
 80028b8:	6863      	ldr	r3, [r4, #4]
 80028ba:	1ac0      	subs	r0, r0, r3
 80028bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80028be:	b10b      	cbz	r3, 80028c4 <__sflush_r+0x48>
 80028c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80028c2:	1ac0      	subs	r0, r0, r3
 80028c4:	2300      	movs	r3, #0
 80028c6:	4602      	mov	r2, r0
 80028c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80028ca:	6a21      	ldr	r1, [r4, #32]
 80028cc:	4628      	mov	r0, r5
 80028ce:	47b0      	blx	r6
 80028d0:	1c43      	adds	r3, r0, #1
 80028d2:	89a3      	ldrh	r3, [r4, #12]
 80028d4:	d106      	bne.n	80028e4 <__sflush_r+0x68>
 80028d6:	6829      	ldr	r1, [r5, #0]
 80028d8:	291d      	cmp	r1, #29
 80028da:	d82b      	bhi.n	8002934 <__sflush_r+0xb8>
 80028dc:	4a29      	ldr	r2, [pc, #164]	; (8002984 <__sflush_r+0x108>)
 80028de:	410a      	asrs	r2, r1
 80028e0:	07d6      	lsls	r6, r2, #31
 80028e2:	d427      	bmi.n	8002934 <__sflush_r+0xb8>
 80028e4:	2200      	movs	r2, #0
 80028e6:	6062      	str	r2, [r4, #4]
 80028e8:	04d9      	lsls	r1, r3, #19
 80028ea:	6922      	ldr	r2, [r4, #16]
 80028ec:	6022      	str	r2, [r4, #0]
 80028ee:	d504      	bpl.n	80028fa <__sflush_r+0x7e>
 80028f0:	1c42      	adds	r2, r0, #1
 80028f2:	d101      	bne.n	80028f8 <__sflush_r+0x7c>
 80028f4:	682b      	ldr	r3, [r5, #0]
 80028f6:	b903      	cbnz	r3, 80028fa <__sflush_r+0x7e>
 80028f8:	6560      	str	r0, [r4, #84]	; 0x54
 80028fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80028fc:	602f      	str	r7, [r5, #0]
 80028fe:	2900      	cmp	r1, #0
 8002900:	d0c9      	beq.n	8002896 <__sflush_r+0x1a>
 8002902:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002906:	4299      	cmp	r1, r3
 8002908:	d002      	beq.n	8002910 <__sflush_r+0x94>
 800290a:	4628      	mov	r0, r5
 800290c:	f001 f91e 	bl	8003b4c <_free_r>
 8002910:	2000      	movs	r0, #0
 8002912:	6360      	str	r0, [r4, #52]	; 0x34
 8002914:	e7c0      	b.n	8002898 <__sflush_r+0x1c>
 8002916:	2301      	movs	r3, #1
 8002918:	4628      	mov	r0, r5
 800291a:	47b0      	blx	r6
 800291c:	1c41      	adds	r1, r0, #1
 800291e:	d1c8      	bne.n	80028b2 <__sflush_r+0x36>
 8002920:	682b      	ldr	r3, [r5, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0c5      	beq.n	80028b2 <__sflush_r+0x36>
 8002926:	2b1d      	cmp	r3, #29
 8002928:	d001      	beq.n	800292e <__sflush_r+0xb2>
 800292a:	2b16      	cmp	r3, #22
 800292c:	d101      	bne.n	8002932 <__sflush_r+0xb6>
 800292e:	602f      	str	r7, [r5, #0]
 8002930:	e7b1      	b.n	8002896 <__sflush_r+0x1a>
 8002932:	89a3      	ldrh	r3, [r4, #12]
 8002934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002938:	81a3      	strh	r3, [r4, #12]
 800293a:	e7ad      	b.n	8002898 <__sflush_r+0x1c>
 800293c:	690f      	ldr	r7, [r1, #16]
 800293e:	2f00      	cmp	r7, #0
 8002940:	d0a9      	beq.n	8002896 <__sflush_r+0x1a>
 8002942:	0793      	lsls	r3, r2, #30
 8002944:	680e      	ldr	r6, [r1, #0]
 8002946:	bf08      	it	eq
 8002948:	694b      	ldreq	r3, [r1, #20]
 800294a:	600f      	str	r7, [r1, #0]
 800294c:	bf18      	it	ne
 800294e:	2300      	movne	r3, #0
 8002950:	eba6 0807 	sub.w	r8, r6, r7
 8002954:	608b      	str	r3, [r1, #8]
 8002956:	f1b8 0f00 	cmp.w	r8, #0
 800295a:	dd9c      	ble.n	8002896 <__sflush_r+0x1a>
 800295c:	6a21      	ldr	r1, [r4, #32]
 800295e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002960:	4643      	mov	r3, r8
 8002962:	463a      	mov	r2, r7
 8002964:	4628      	mov	r0, r5
 8002966:	47b0      	blx	r6
 8002968:	2800      	cmp	r0, #0
 800296a:	dc06      	bgt.n	800297a <__sflush_r+0xfe>
 800296c:	89a3      	ldrh	r3, [r4, #12]
 800296e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002972:	81a3      	strh	r3, [r4, #12]
 8002974:	f04f 30ff 	mov.w	r0, #4294967295
 8002978:	e78e      	b.n	8002898 <__sflush_r+0x1c>
 800297a:	4407      	add	r7, r0
 800297c:	eba8 0800 	sub.w	r8, r8, r0
 8002980:	e7e9      	b.n	8002956 <__sflush_r+0xda>
 8002982:	bf00      	nop
 8002984:	dfbffffe 	.word	0xdfbffffe

08002988 <_fflush_r>:
 8002988:	b538      	push	{r3, r4, r5, lr}
 800298a:	690b      	ldr	r3, [r1, #16]
 800298c:	4605      	mov	r5, r0
 800298e:	460c      	mov	r4, r1
 8002990:	b913      	cbnz	r3, 8002998 <_fflush_r+0x10>
 8002992:	2500      	movs	r5, #0
 8002994:	4628      	mov	r0, r5
 8002996:	bd38      	pop	{r3, r4, r5, pc}
 8002998:	b118      	cbz	r0, 80029a2 <_fflush_r+0x1a>
 800299a:	6a03      	ldr	r3, [r0, #32]
 800299c:	b90b      	cbnz	r3, 80029a2 <_fflush_r+0x1a>
 800299e:	f000 f8a7 	bl	8002af0 <__sinit>
 80029a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f3      	beq.n	8002992 <_fflush_r+0xa>
 80029aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80029ac:	07d0      	lsls	r0, r2, #31
 80029ae:	d404      	bmi.n	80029ba <_fflush_r+0x32>
 80029b0:	0599      	lsls	r1, r3, #22
 80029b2:	d402      	bmi.n	80029ba <_fflush_r+0x32>
 80029b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029b6:	f000 fa4a 	bl	8002e4e <__retarget_lock_acquire_recursive>
 80029ba:	4628      	mov	r0, r5
 80029bc:	4621      	mov	r1, r4
 80029be:	f7ff ff5d 	bl	800287c <__sflush_r>
 80029c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80029c4:	07da      	lsls	r2, r3, #31
 80029c6:	4605      	mov	r5, r0
 80029c8:	d4e4      	bmi.n	8002994 <_fflush_r+0xc>
 80029ca:	89a3      	ldrh	r3, [r4, #12]
 80029cc:	059b      	lsls	r3, r3, #22
 80029ce:	d4e1      	bmi.n	8002994 <_fflush_r+0xc>
 80029d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80029d2:	f000 fa3d 	bl	8002e50 <__retarget_lock_release_recursive>
 80029d6:	e7dd      	b.n	8002994 <_fflush_r+0xc>

080029d8 <std>:
 80029d8:	2300      	movs	r3, #0
 80029da:	b510      	push	{r4, lr}
 80029dc:	4604      	mov	r4, r0
 80029de:	e9c0 3300 	strd	r3, r3, [r0]
 80029e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80029e6:	6083      	str	r3, [r0, #8]
 80029e8:	8181      	strh	r1, [r0, #12]
 80029ea:	6643      	str	r3, [r0, #100]	; 0x64
 80029ec:	81c2      	strh	r2, [r0, #14]
 80029ee:	6183      	str	r3, [r0, #24]
 80029f0:	4619      	mov	r1, r3
 80029f2:	2208      	movs	r2, #8
 80029f4:	305c      	adds	r0, #92	; 0x5c
 80029f6:	f000 f9ad 	bl	8002d54 <memset>
 80029fa:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <std+0x58>)
 80029fc:	6263      	str	r3, [r4, #36]	; 0x24
 80029fe:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <std+0x5c>)
 8002a00:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a02:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <std+0x60>)
 8002a04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a06:	4b0d      	ldr	r3, [pc, #52]	; (8002a3c <std+0x64>)
 8002a08:	6323      	str	r3, [r4, #48]	; 0x30
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <std+0x68>)
 8002a0c:	6224      	str	r4, [r4, #32]
 8002a0e:	429c      	cmp	r4, r3
 8002a10:	d006      	beq.n	8002a20 <std+0x48>
 8002a12:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002a16:	4294      	cmp	r4, r2
 8002a18:	d002      	beq.n	8002a20 <std+0x48>
 8002a1a:	33d0      	adds	r3, #208	; 0xd0
 8002a1c:	429c      	cmp	r4, r3
 8002a1e:	d105      	bne.n	8002a2c <std+0x54>
 8002a20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a28:	f000 ba10 	b.w	8002e4c <__retarget_lock_init_recursive>
 8002a2c:	bd10      	pop	{r4, pc}
 8002a2e:	bf00      	nop
 8002a30:	08002ba5 	.word	0x08002ba5
 8002a34:	08002bc7 	.word	0x08002bc7
 8002a38:	08002bff 	.word	0x08002bff
 8002a3c:	08002c23 	.word	0x08002c23
 8002a40:	200001f0 	.word	0x200001f0

08002a44 <stdio_exit_handler>:
 8002a44:	4a02      	ldr	r2, [pc, #8]	; (8002a50 <stdio_exit_handler+0xc>)
 8002a46:	4903      	ldr	r1, [pc, #12]	; (8002a54 <stdio_exit_handler+0x10>)
 8002a48:	4803      	ldr	r0, [pc, #12]	; (8002a58 <stdio_exit_handler+0x14>)
 8002a4a:	f000 b87b 	b.w	8002b44 <_fwalk_sglue>
 8002a4e:	bf00      	nop
 8002a50:	20000004 	.word	0x20000004
 8002a54:	08002989 	.word	0x08002989
 8002a58:	20000010 	.word	0x20000010

08002a5c <cleanup_stdio>:
 8002a5c:	6841      	ldr	r1, [r0, #4]
 8002a5e:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <cleanup_stdio+0x34>)
 8002a60:	4299      	cmp	r1, r3
 8002a62:	b510      	push	{r4, lr}
 8002a64:	4604      	mov	r4, r0
 8002a66:	d001      	beq.n	8002a6c <cleanup_stdio+0x10>
 8002a68:	f7ff ff8e 	bl	8002988 <_fflush_r>
 8002a6c:	68a1      	ldr	r1, [r4, #8]
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <cleanup_stdio+0x38>)
 8002a70:	4299      	cmp	r1, r3
 8002a72:	d002      	beq.n	8002a7a <cleanup_stdio+0x1e>
 8002a74:	4620      	mov	r0, r4
 8002a76:	f7ff ff87 	bl	8002988 <_fflush_r>
 8002a7a:	68e1      	ldr	r1, [r4, #12]
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <cleanup_stdio+0x3c>)
 8002a7e:	4299      	cmp	r1, r3
 8002a80:	d004      	beq.n	8002a8c <cleanup_stdio+0x30>
 8002a82:	4620      	mov	r0, r4
 8002a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a88:	f7ff bf7e 	b.w	8002988 <_fflush_r>
 8002a8c:	bd10      	pop	{r4, pc}
 8002a8e:	bf00      	nop
 8002a90:	200001f0 	.word	0x200001f0
 8002a94:	20000258 	.word	0x20000258
 8002a98:	200002c0 	.word	0x200002c0

08002a9c <global_stdio_init.part.0>:
 8002a9c:	b510      	push	{r4, lr}
 8002a9e:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <global_stdio_init.part.0+0x30>)
 8002aa0:	4c0b      	ldr	r4, [pc, #44]	; (8002ad0 <global_stdio_init.part.0+0x34>)
 8002aa2:	4a0c      	ldr	r2, [pc, #48]	; (8002ad4 <global_stdio_init.part.0+0x38>)
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	4620      	mov	r0, r4
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2104      	movs	r1, #4
 8002aac:	f7ff ff94 	bl	80029d8 <std>
 8002ab0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	2109      	movs	r1, #9
 8002ab8:	f7ff ff8e 	bl	80029d8 <std>
 8002abc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ac6:	2112      	movs	r1, #18
 8002ac8:	f7ff bf86 	b.w	80029d8 <std>
 8002acc:	20000328 	.word	0x20000328
 8002ad0:	200001f0 	.word	0x200001f0
 8002ad4:	08002a45 	.word	0x08002a45

08002ad8 <__sfp_lock_acquire>:
 8002ad8:	4801      	ldr	r0, [pc, #4]	; (8002ae0 <__sfp_lock_acquire+0x8>)
 8002ada:	f000 b9b8 	b.w	8002e4e <__retarget_lock_acquire_recursive>
 8002ade:	bf00      	nop
 8002ae0:	20000331 	.word	0x20000331

08002ae4 <__sfp_lock_release>:
 8002ae4:	4801      	ldr	r0, [pc, #4]	; (8002aec <__sfp_lock_release+0x8>)
 8002ae6:	f000 b9b3 	b.w	8002e50 <__retarget_lock_release_recursive>
 8002aea:	bf00      	nop
 8002aec:	20000331 	.word	0x20000331

08002af0 <__sinit>:
 8002af0:	b510      	push	{r4, lr}
 8002af2:	4604      	mov	r4, r0
 8002af4:	f7ff fff0 	bl	8002ad8 <__sfp_lock_acquire>
 8002af8:	6a23      	ldr	r3, [r4, #32]
 8002afa:	b11b      	cbz	r3, 8002b04 <__sinit+0x14>
 8002afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b00:	f7ff bff0 	b.w	8002ae4 <__sfp_lock_release>
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <__sinit+0x28>)
 8002b06:	6223      	str	r3, [r4, #32]
 8002b08:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <__sinit+0x2c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f5      	bne.n	8002afc <__sinit+0xc>
 8002b10:	f7ff ffc4 	bl	8002a9c <global_stdio_init.part.0>
 8002b14:	e7f2      	b.n	8002afc <__sinit+0xc>
 8002b16:	bf00      	nop
 8002b18:	08002a5d 	.word	0x08002a5d
 8002b1c:	20000328 	.word	0x20000328

08002b20 <fiprintf>:
 8002b20:	b40e      	push	{r1, r2, r3}
 8002b22:	b503      	push	{r0, r1, lr}
 8002b24:	4601      	mov	r1, r0
 8002b26:	ab03      	add	r3, sp, #12
 8002b28:	4805      	ldr	r0, [pc, #20]	; (8002b40 <fiprintf+0x20>)
 8002b2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b2e:	6800      	ldr	r0, [r0, #0]
 8002b30:	9301      	str	r3, [sp, #4]
 8002b32:	f001 fcb1 	bl	8004498 <_vfiprintf_r>
 8002b36:	b002      	add	sp, #8
 8002b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b3c:	b003      	add	sp, #12
 8002b3e:	4770      	bx	lr
 8002b40:	2000005c 	.word	0x2000005c

08002b44 <_fwalk_sglue>:
 8002b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b48:	4607      	mov	r7, r0
 8002b4a:	4688      	mov	r8, r1
 8002b4c:	4614      	mov	r4, r2
 8002b4e:	2600      	movs	r6, #0
 8002b50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b54:	f1b9 0901 	subs.w	r9, r9, #1
 8002b58:	d505      	bpl.n	8002b66 <_fwalk_sglue+0x22>
 8002b5a:	6824      	ldr	r4, [r4, #0]
 8002b5c:	2c00      	cmp	r4, #0
 8002b5e:	d1f7      	bne.n	8002b50 <_fwalk_sglue+0xc>
 8002b60:	4630      	mov	r0, r6
 8002b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b66:	89ab      	ldrh	r3, [r5, #12]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d907      	bls.n	8002b7c <_fwalk_sglue+0x38>
 8002b6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b70:	3301      	adds	r3, #1
 8002b72:	d003      	beq.n	8002b7c <_fwalk_sglue+0x38>
 8002b74:	4629      	mov	r1, r5
 8002b76:	4638      	mov	r0, r7
 8002b78:	47c0      	blx	r8
 8002b7a:	4306      	orrs	r6, r0
 8002b7c:	3568      	adds	r5, #104	; 0x68
 8002b7e:	e7e9      	b.n	8002b54 <_fwalk_sglue+0x10>

08002b80 <iprintf>:
 8002b80:	b40f      	push	{r0, r1, r2, r3}
 8002b82:	b507      	push	{r0, r1, r2, lr}
 8002b84:	4906      	ldr	r1, [pc, #24]	; (8002ba0 <iprintf+0x20>)
 8002b86:	ab04      	add	r3, sp, #16
 8002b88:	6808      	ldr	r0, [r1, #0]
 8002b8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b8e:	6881      	ldr	r1, [r0, #8]
 8002b90:	9301      	str	r3, [sp, #4]
 8002b92:	f001 fc81 	bl	8004498 <_vfiprintf_r>
 8002b96:	b003      	add	sp, #12
 8002b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b9c:	b004      	add	sp, #16
 8002b9e:	4770      	bx	lr
 8002ba0:	2000005c 	.word	0x2000005c

08002ba4 <__sread>:
 8002ba4:	b510      	push	{r4, lr}
 8002ba6:	460c      	mov	r4, r1
 8002ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bac:	f000 f900 	bl	8002db0 <_read_r>
 8002bb0:	2800      	cmp	r0, #0
 8002bb2:	bfab      	itete	ge
 8002bb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002bb6:	89a3      	ldrhlt	r3, [r4, #12]
 8002bb8:	181b      	addge	r3, r3, r0
 8002bba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002bbe:	bfac      	ite	ge
 8002bc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8002bc2:	81a3      	strhlt	r3, [r4, #12]
 8002bc4:	bd10      	pop	{r4, pc}

08002bc6 <__swrite>:
 8002bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bca:	461f      	mov	r7, r3
 8002bcc:	898b      	ldrh	r3, [r1, #12]
 8002bce:	05db      	lsls	r3, r3, #23
 8002bd0:	4605      	mov	r5, r0
 8002bd2:	460c      	mov	r4, r1
 8002bd4:	4616      	mov	r6, r2
 8002bd6:	d505      	bpl.n	8002be4 <__swrite+0x1e>
 8002bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bdc:	2302      	movs	r3, #2
 8002bde:	2200      	movs	r2, #0
 8002be0:	f000 f8d4 	bl	8002d8c <_lseek_r>
 8002be4:	89a3      	ldrh	r3, [r4, #12]
 8002be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002bea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bee:	81a3      	strh	r3, [r4, #12]
 8002bf0:	4632      	mov	r2, r6
 8002bf2:	463b      	mov	r3, r7
 8002bf4:	4628      	mov	r0, r5
 8002bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002bfa:	f000 b8eb 	b.w	8002dd4 <_write_r>

08002bfe <__sseek>:
 8002bfe:	b510      	push	{r4, lr}
 8002c00:	460c      	mov	r4, r1
 8002c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c06:	f000 f8c1 	bl	8002d8c <_lseek_r>
 8002c0a:	1c43      	adds	r3, r0, #1
 8002c0c:	89a3      	ldrh	r3, [r4, #12]
 8002c0e:	bf15      	itete	ne
 8002c10:	6560      	strne	r0, [r4, #84]	; 0x54
 8002c12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002c16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002c1a:	81a3      	strheq	r3, [r4, #12]
 8002c1c:	bf18      	it	ne
 8002c1e:	81a3      	strhne	r3, [r4, #12]
 8002c20:	bd10      	pop	{r4, pc}

08002c22 <__sclose>:
 8002c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c26:	f000 b8a1 	b.w	8002d6c <_close_r>

08002c2a <__swbuf_r>:
 8002c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2c:	460e      	mov	r6, r1
 8002c2e:	4614      	mov	r4, r2
 8002c30:	4605      	mov	r5, r0
 8002c32:	b118      	cbz	r0, 8002c3c <__swbuf_r+0x12>
 8002c34:	6a03      	ldr	r3, [r0, #32]
 8002c36:	b90b      	cbnz	r3, 8002c3c <__swbuf_r+0x12>
 8002c38:	f7ff ff5a 	bl	8002af0 <__sinit>
 8002c3c:	69a3      	ldr	r3, [r4, #24]
 8002c3e:	60a3      	str	r3, [r4, #8]
 8002c40:	89a3      	ldrh	r3, [r4, #12]
 8002c42:	071a      	lsls	r2, r3, #28
 8002c44:	d525      	bpl.n	8002c92 <__swbuf_r+0x68>
 8002c46:	6923      	ldr	r3, [r4, #16]
 8002c48:	b31b      	cbz	r3, 8002c92 <__swbuf_r+0x68>
 8002c4a:	6823      	ldr	r3, [r4, #0]
 8002c4c:	6922      	ldr	r2, [r4, #16]
 8002c4e:	1a98      	subs	r0, r3, r2
 8002c50:	6963      	ldr	r3, [r4, #20]
 8002c52:	b2f6      	uxtb	r6, r6
 8002c54:	4283      	cmp	r3, r0
 8002c56:	4637      	mov	r7, r6
 8002c58:	dc04      	bgt.n	8002c64 <__swbuf_r+0x3a>
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	4628      	mov	r0, r5
 8002c5e:	f7ff fe93 	bl	8002988 <_fflush_r>
 8002c62:	b9e0      	cbnz	r0, 8002c9e <__swbuf_r+0x74>
 8002c64:	68a3      	ldr	r3, [r4, #8]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	60a3      	str	r3, [r4, #8]
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	6022      	str	r2, [r4, #0]
 8002c70:	701e      	strb	r6, [r3, #0]
 8002c72:	6962      	ldr	r2, [r4, #20]
 8002c74:	1c43      	adds	r3, r0, #1
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d004      	beq.n	8002c84 <__swbuf_r+0x5a>
 8002c7a:	89a3      	ldrh	r3, [r4, #12]
 8002c7c:	07db      	lsls	r3, r3, #31
 8002c7e:	d506      	bpl.n	8002c8e <__swbuf_r+0x64>
 8002c80:	2e0a      	cmp	r6, #10
 8002c82:	d104      	bne.n	8002c8e <__swbuf_r+0x64>
 8002c84:	4621      	mov	r1, r4
 8002c86:	4628      	mov	r0, r5
 8002c88:	f7ff fe7e 	bl	8002988 <_fflush_r>
 8002c8c:	b938      	cbnz	r0, 8002c9e <__swbuf_r+0x74>
 8002c8e:	4638      	mov	r0, r7
 8002c90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c92:	4621      	mov	r1, r4
 8002c94:	4628      	mov	r0, r5
 8002c96:	f000 f805 	bl	8002ca4 <__swsetup_r>
 8002c9a:	2800      	cmp	r0, #0
 8002c9c:	d0d5      	beq.n	8002c4a <__swbuf_r+0x20>
 8002c9e:	f04f 37ff 	mov.w	r7, #4294967295
 8002ca2:	e7f4      	b.n	8002c8e <__swbuf_r+0x64>

08002ca4 <__swsetup_r>:
 8002ca4:	b538      	push	{r3, r4, r5, lr}
 8002ca6:	4b2a      	ldr	r3, [pc, #168]	; (8002d50 <__swsetup_r+0xac>)
 8002ca8:	4605      	mov	r5, r0
 8002caa:	6818      	ldr	r0, [r3, #0]
 8002cac:	460c      	mov	r4, r1
 8002cae:	b118      	cbz	r0, 8002cb8 <__swsetup_r+0x14>
 8002cb0:	6a03      	ldr	r3, [r0, #32]
 8002cb2:	b90b      	cbnz	r3, 8002cb8 <__swsetup_r+0x14>
 8002cb4:	f7ff ff1c 	bl	8002af0 <__sinit>
 8002cb8:	89a3      	ldrh	r3, [r4, #12]
 8002cba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002cbe:	0718      	lsls	r0, r3, #28
 8002cc0:	d422      	bmi.n	8002d08 <__swsetup_r+0x64>
 8002cc2:	06d9      	lsls	r1, r3, #27
 8002cc4:	d407      	bmi.n	8002cd6 <__swsetup_r+0x32>
 8002cc6:	2309      	movs	r3, #9
 8002cc8:	602b      	str	r3, [r5, #0]
 8002cca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002cce:	81a3      	strh	r3, [r4, #12]
 8002cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd4:	e034      	b.n	8002d40 <__swsetup_r+0x9c>
 8002cd6:	0758      	lsls	r0, r3, #29
 8002cd8:	d512      	bpl.n	8002d00 <__swsetup_r+0x5c>
 8002cda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002cdc:	b141      	cbz	r1, 8002cf0 <__swsetup_r+0x4c>
 8002cde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ce2:	4299      	cmp	r1, r3
 8002ce4:	d002      	beq.n	8002cec <__swsetup_r+0x48>
 8002ce6:	4628      	mov	r0, r5
 8002ce8:	f000 ff30 	bl	8003b4c <_free_r>
 8002cec:	2300      	movs	r3, #0
 8002cee:	6363      	str	r3, [r4, #52]	; 0x34
 8002cf0:	89a3      	ldrh	r3, [r4, #12]
 8002cf2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002cf6:	81a3      	strh	r3, [r4, #12]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	6063      	str	r3, [r4, #4]
 8002cfc:	6923      	ldr	r3, [r4, #16]
 8002cfe:	6023      	str	r3, [r4, #0]
 8002d00:	89a3      	ldrh	r3, [r4, #12]
 8002d02:	f043 0308 	orr.w	r3, r3, #8
 8002d06:	81a3      	strh	r3, [r4, #12]
 8002d08:	6923      	ldr	r3, [r4, #16]
 8002d0a:	b94b      	cbnz	r3, 8002d20 <__swsetup_r+0x7c>
 8002d0c:	89a3      	ldrh	r3, [r4, #12]
 8002d0e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002d12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d16:	d003      	beq.n	8002d20 <__swsetup_r+0x7c>
 8002d18:	4621      	mov	r1, r4
 8002d1a:	4628      	mov	r0, r5
 8002d1c:	f001 fcfc 	bl	8004718 <__smakebuf_r>
 8002d20:	89a0      	ldrh	r0, [r4, #12]
 8002d22:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002d26:	f010 0301 	ands.w	r3, r0, #1
 8002d2a:	d00a      	beq.n	8002d42 <__swsetup_r+0x9e>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60a3      	str	r3, [r4, #8]
 8002d30:	6963      	ldr	r3, [r4, #20]
 8002d32:	425b      	negs	r3, r3
 8002d34:	61a3      	str	r3, [r4, #24]
 8002d36:	6923      	ldr	r3, [r4, #16]
 8002d38:	b943      	cbnz	r3, 8002d4c <__swsetup_r+0xa8>
 8002d3a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002d3e:	d1c4      	bne.n	8002cca <__swsetup_r+0x26>
 8002d40:	bd38      	pop	{r3, r4, r5, pc}
 8002d42:	0781      	lsls	r1, r0, #30
 8002d44:	bf58      	it	pl
 8002d46:	6963      	ldrpl	r3, [r4, #20]
 8002d48:	60a3      	str	r3, [r4, #8]
 8002d4a:	e7f4      	b.n	8002d36 <__swsetup_r+0x92>
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	e7f7      	b.n	8002d40 <__swsetup_r+0x9c>
 8002d50:	2000005c 	.word	0x2000005c

08002d54 <memset>:
 8002d54:	4402      	add	r2, r0
 8002d56:	4603      	mov	r3, r0
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d100      	bne.n	8002d5e <memset+0xa>
 8002d5c:	4770      	bx	lr
 8002d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d62:	e7f9      	b.n	8002d58 <memset+0x4>

08002d64 <_localeconv_r>:
 8002d64:	4800      	ldr	r0, [pc, #0]	; (8002d68 <_localeconv_r+0x4>)
 8002d66:	4770      	bx	lr
 8002d68:	20000150 	.word	0x20000150

08002d6c <_close_r>:
 8002d6c:	b538      	push	{r3, r4, r5, lr}
 8002d6e:	4d06      	ldr	r5, [pc, #24]	; (8002d88 <_close_r+0x1c>)
 8002d70:	2300      	movs	r3, #0
 8002d72:	4604      	mov	r4, r0
 8002d74:	4608      	mov	r0, r1
 8002d76:	602b      	str	r3, [r5, #0]
 8002d78:	f7fe ff4d 	bl	8001c16 <_close>
 8002d7c:	1c43      	adds	r3, r0, #1
 8002d7e:	d102      	bne.n	8002d86 <_close_r+0x1a>
 8002d80:	682b      	ldr	r3, [r5, #0]
 8002d82:	b103      	cbz	r3, 8002d86 <_close_r+0x1a>
 8002d84:	6023      	str	r3, [r4, #0]
 8002d86:	bd38      	pop	{r3, r4, r5, pc}
 8002d88:	2000032c 	.word	0x2000032c

08002d8c <_lseek_r>:
 8002d8c:	b538      	push	{r3, r4, r5, lr}
 8002d8e:	4d07      	ldr	r5, [pc, #28]	; (8002dac <_lseek_r+0x20>)
 8002d90:	4604      	mov	r4, r0
 8002d92:	4608      	mov	r0, r1
 8002d94:	4611      	mov	r1, r2
 8002d96:	2200      	movs	r2, #0
 8002d98:	602a      	str	r2, [r5, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	f7fe ff62 	bl	8001c64 <_lseek>
 8002da0:	1c43      	adds	r3, r0, #1
 8002da2:	d102      	bne.n	8002daa <_lseek_r+0x1e>
 8002da4:	682b      	ldr	r3, [r5, #0]
 8002da6:	b103      	cbz	r3, 8002daa <_lseek_r+0x1e>
 8002da8:	6023      	str	r3, [r4, #0]
 8002daa:	bd38      	pop	{r3, r4, r5, pc}
 8002dac:	2000032c 	.word	0x2000032c

08002db0 <_read_r>:
 8002db0:	b538      	push	{r3, r4, r5, lr}
 8002db2:	4d07      	ldr	r5, [pc, #28]	; (8002dd0 <_read_r+0x20>)
 8002db4:	4604      	mov	r4, r0
 8002db6:	4608      	mov	r0, r1
 8002db8:	4611      	mov	r1, r2
 8002dba:	2200      	movs	r2, #0
 8002dbc:	602a      	str	r2, [r5, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	f7fe fef0 	bl	8001ba4 <_read>
 8002dc4:	1c43      	adds	r3, r0, #1
 8002dc6:	d102      	bne.n	8002dce <_read_r+0x1e>
 8002dc8:	682b      	ldr	r3, [r5, #0]
 8002dca:	b103      	cbz	r3, 8002dce <_read_r+0x1e>
 8002dcc:	6023      	str	r3, [r4, #0]
 8002dce:	bd38      	pop	{r3, r4, r5, pc}
 8002dd0:	2000032c 	.word	0x2000032c

08002dd4 <_write_r>:
 8002dd4:	b538      	push	{r3, r4, r5, lr}
 8002dd6:	4d07      	ldr	r5, [pc, #28]	; (8002df4 <_write_r+0x20>)
 8002dd8:	4604      	mov	r4, r0
 8002dda:	4608      	mov	r0, r1
 8002ddc:	4611      	mov	r1, r2
 8002dde:	2200      	movs	r2, #0
 8002de0:	602a      	str	r2, [r5, #0]
 8002de2:	461a      	mov	r2, r3
 8002de4:	f7fe fefb 	bl	8001bde <_write>
 8002de8:	1c43      	adds	r3, r0, #1
 8002dea:	d102      	bne.n	8002df2 <_write_r+0x1e>
 8002dec:	682b      	ldr	r3, [r5, #0]
 8002dee:	b103      	cbz	r3, 8002df2 <_write_r+0x1e>
 8002df0:	6023      	str	r3, [r4, #0]
 8002df2:	bd38      	pop	{r3, r4, r5, pc}
 8002df4:	2000032c 	.word	0x2000032c

08002df8 <__errno>:
 8002df8:	4b01      	ldr	r3, [pc, #4]	; (8002e00 <__errno+0x8>)
 8002dfa:	6818      	ldr	r0, [r3, #0]
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	2000005c 	.word	0x2000005c

08002e04 <__libc_init_array>:
 8002e04:	b570      	push	{r4, r5, r6, lr}
 8002e06:	4d0d      	ldr	r5, [pc, #52]	; (8002e3c <__libc_init_array+0x38>)
 8002e08:	4c0d      	ldr	r4, [pc, #52]	; (8002e40 <__libc_init_array+0x3c>)
 8002e0a:	1b64      	subs	r4, r4, r5
 8002e0c:	10a4      	asrs	r4, r4, #2
 8002e0e:	2600      	movs	r6, #0
 8002e10:	42a6      	cmp	r6, r4
 8002e12:	d109      	bne.n	8002e28 <__libc_init_array+0x24>
 8002e14:	4d0b      	ldr	r5, [pc, #44]	; (8002e44 <__libc_init_array+0x40>)
 8002e16:	4c0c      	ldr	r4, [pc, #48]	; (8002e48 <__libc_init_array+0x44>)
 8002e18:	f001 fd98 	bl	800494c <_init>
 8002e1c:	1b64      	subs	r4, r4, r5
 8002e1e:	10a4      	asrs	r4, r4, #2
 8002e20:	2600      	movs	r6, #0
 8002e22:	42a6      	cmp	r6, r4
 8002e24:	d105      	bne.n	8002e32 <__libc_init_array+0x2e>
 8002e26:	bd70      	pop	{r4, r5, r6, pc}
 8002e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e2c:	4798      	blx	r3
 8002e2e:	3601      	adds	r6, #1
 8002e30:	e7ee      	b.n	8002e10 <__libc_init_array+0xc>
 8002e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e36:	4798      	blx	r3
 8002e38:	3601      	adds	r6, #1
 8002e3a:	e7f2      	b.n	8002e22 <__libc_init_array+0x1e>
 8002e3c:	08004d5c 	.word	0x08004d5c
 8002e40:	08004d5c 	.word	0x08004d5c
 8002e44:	08004d5c 	.word	0x08004d5c
 8002e48:	08004d60 	.word	0x08004d60

08002e4c <__retarget_lock_init_recursive>:
 8002e4c:	4770      	bx	lr

08002e4e <__retarget_lock_acquire_recursive>:
 8002e4e:	4770      	bx	lr

08002e50 <__retarget_lock_release_recursive>:
 8002e50:	4770      	bx	lr

08002e52 <quorem>:
 8002e52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e56:	6903      	ldr	r3, [r0, #16]
 8002e58:	690c      	ldr	r4, [r1, #16]
 8002e5a:	42a3      	cmp	r3, r4
 8002e5c:	4607      	mov	r7, r0
 8002e5e:	db7e      	blt.n	8002f5e <quorem+0x10c>
 8002e60:	3c01      	subs	r4, #1
 8002e62:	f101 0814 	add.w	r8, r1, #20
 8002e66:	f100 0514 	add.w	r5, r0, #20
 8002e6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002e6e:	9301      	str	r3, [sp, #4]
 8002e70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002e74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002e80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002e84:	fbb2 f6f3 	udiv	r6, r2, r3
 8002e88:	d331      	bcc.n	8002eee <quorem+0x9c>
 8002e8a:	f04f 0e00 	mov.w	lr, #0
 8002e8e:	4640      	mov	r0, r8
 8002e90:	46ac      	mov	ip, r5
 8002e92:	46f2      	mov	sl, lr
 8002e94:	f850 2b04 	ldr.w	r2, [r0], #4
 8002e98:	b293      	uxth	r3, r2
 8002e9a:	fb06 e303 	mla	r3, r6, r3, lr
 8002e9e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002ea2:	0c1a      	lsrs	r2, r3, #16
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	ebaa 0303 	sub.w	r3, sl, r3
 8002eaa:	f8dc a000 	ldr.w	sl, [ip]
 8002eae:	fa13 f38a 	uxtah	r3, r3, sl
 8002eb2:	fb06 220e 	mla	r2, r6, lr, r2
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	9b00      	ldr	r3, [sp, #0]
 8002eba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002ebe:	b292      	uxth	r2, r2
 8002ec0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002ec4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002ec8:	f8bd 3000 	ldrh.w	r3, [sp]
 8002ecc:	4581      	cmp	r9, r0
 8002ece:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ed2:	f84c 3b04 	str.w	r3, [ip], #4
 8002ed6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002eda:	d2db      	bcs.n	8002e94 <quorem+0x42>
 8002edc:	f855 300b 	ldr.w	r3, [r5, fp]
 8002ee0:	b92b      	cbnz	r3, 8002eee <quorem+0x9c>
 8002ee2:	9b01      	ldr	r3, [sp, #4]
 8002ee4:	3b04      	subs	r3, #4
 8002ee6:	429d      	cmp	r5, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	d32c      	bcc.n	8002f46 <quorem+0xf4>
 8002eec:	613c      	str	r4, [r7, #16]
 8002eee:	4638      	mov	r0, r7
 8002ef0:	f001 f9a8 	bl	8004244 <__mcmp>
 8002ef4:	2800      	cmp	r0, #0
 8002ef6:	db22      	blt.n	8002f3e <quorem+0xec>
 8002ef8:	3601      	adds	r6, #1
 8002efa:	4629      	mov	r1, r5
 8002efc:	2000      	movs	r0, #0
 8002efe:	f858 2b04 	ldr.w	r2, [r8], #4
 8002f02:	f8d1 c000 	ldr.w	ip, [r1]
 8002f06:	b293      	uxth	r3, r2
 8002f08:	1ac3      	subs	r3, r0, r3
 8002f0a:	0c12      	lsrs	r2, r2, #16
 8002f0c:	fa13 f38c 	uxtah	r3, r3, ip
 8002f10:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8002f14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f1e:	45c1      	cmp	r9, r8
 8002f20:	f841 3b04 	str.w	r3, [r1], #4
 8002f24:	ea4f 4022 	mov.w	r0, r2, asr #16
 8002f28:	d2e9      	bcs.n	8002efe <quorem+0xac>
 8002f2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002f2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002f32:	b922      	cbnz	r2, 8002f3e <quorem+0xec>
 8002f34:	3b04      	subs	r3, #4
 8002f36:	429d      	cmp	r5, r3
 8002f38:	461a      	mov	r2, r3
 8002f3a:	d30a      	bcc.n	8002f52 <quorem+0x100>
 8002f3c:	613c      	str	r4, [r7, #16]
 8002f3e:	4630      	mov	r0, r6
 8002f40:	b003      	add	sp, #12
 8002f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f46:	6812      	ldr	r2, [r2, #0]
 8002f48:	3b04      	subs	r3, #4
 8002f4a:	2a00      	cmp	r2, #0
 8002f4c:	d1ce      	bne.n	8002eec <quorem+0x9a>
 8002f4e:	3c01      	subs	r4, #1
 8002f50:	e7c9      	b.n	8002ee6 <quorem+0x94>
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	3b04      	subs	r3, #4
 8002f56:	2a00      	cmp	r2, #0
 8002f58:	d1f0      	bne.n	8002f3c <quorem+0xea>
 8002f5a:	3c01      	subs	r4, #1
 8002f5c:	e7eb      	b.n	8002f36 <quorem+0xe4>
 8002f5e:	2000      	movs	r0, #0
 8002f60:	e7ee      	b.n	8002f40 <quorem+0xee>
 8002f62:	0000      	movs	r0, r0
 8002f64:	0000      	movs	r0, r0
	...

08002f68 <_dtoa_r>:
 8002f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f6c:	ed2d 8b04 	vpush	{d8-d9}
 8002f70:	69c5      	ldr	r5, [r0, #28]
 8002f72:	b093      	sub	sp, #76	; 0x4c
 8002f74:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002f78:	ec57 6b10 	vmov	r6, r7, d0
 8002f7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8002f80:	9107      	str	r1, [sp, #28]
 8002f82:	4604      	mov	r4, r0
 8002f84:	920a      	str	r2, [sp, #40]	; 0x28
 8002f86:	930d      	str	r3, [sp, #52]	; 0x34
 8002f88:	b975      	cbnz	r5, 8002fa8 <_dtoa_r+0x40>
 8002f8a:	2010      	movs	r0, #16
 8002f8c:	f000 fe2a 	bl	8003be4 <malloc>
 8002f90:	4602      	mov	r2, r0
 8002f92:	61e0      	str	r0, [r4, #28]
 8002f94:	b920      	cbnz	r0, 8002fa0 <_dtoa_r+0x38>
 8002f96:	4bae      	ldr	r3, [pc, #696]	; (8003250 <_dtoa_r+0x2e8>)
 8002f98:	21ef      	movs	r1, #239	; 0xef
 8002f9a:	48ae      	ldr	r0, [pc, #696]	; (8003254 <_dtoa_r+0x2ec>)
 8002f9c:	f001 fc38 	bl	8004810 <__assert_func>
 8002fa0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002fa4:	6005      	str	r5, [r0, #0]
 8002fa6:	60c5      	str	r5, [r0, #12]
 8002fa8:	69e3      	ldr	r3, [r4, #28]
 8002faa:	6819      	ldr	r1, [r3, #0]
 8002fac:	b151      	cbz	r1, 8002fc4 <_dtoa_r+0x5c>
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	604a      	str	r2, [r1, #4]
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	4093      	lsls	r3, r2
 8002fb6:	608b      	str	r3, [r1, #8]
 8002fb8:	4620      	mov	r0, r4
 8002fba:	f000 ff07 	bl	8003dcc <_Bfree>
 8002fbe:	69e3      	ldr	r3, [r4, #28]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	1e3b      	subs	r3, r7, #0
 8002fc6:	bfbb      	ittet	lt
 8002fc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002fcc:	9303      	strlt	r3, [sp, #12]
 8002fce:	2300      	movge	r3, #0
 8002fd0:	2201      	movlt	r2, #1
 8002fd2:	bfac      	ite	ge
 8002fd4:	f8c8 3000 	strge.w	r3, [r8]
 8002fd8:	f8c8 2000 	strlt.w	r2, [r8]
 8002fdc:	4b9e      	ldr	r3, [pc, #632]	; (8003258 <_dtoa_r+0x2f0>)
 8002fde:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002fe2:	ea33 0308 	bics.w	r3, r3, r8
 8002fe6:	d11b      	bne.n	8003020 <_dtoa_r+0xb8>
 8002fe8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002fea:	f242 730f 	movw	r3, #9999	; 0x270f
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8002ff4:	4333      	orrs	r3, r6
 8002ff6:	f000 8593 	beq.w	8003b20 <_dtoa_r+0xbb8>
 8002ffa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002ffc:	b963      	cbnz	r3, 8003018 <_dtoa_r+0xb0>
 8002ffe:	4b97      	ldr	r3, [pc, #604]	; (800325c <_dtoa_r+0x2f4>)
 8003000:	e027      	b.n	8003052 <_dtoa_r+0xea>
 8003002:	4b97      	ldr	r3, [pc, #604]	; (8003260 <_dtoa_r+0x2f8>)
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	3308      	adds	r3, #8
 8003008:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	9800      	ldr	r0, [sp, #0]
 800300e:	b013      	add	sp, #76	; 0x4c
 8003010:	ecbd 8b04 	vpop	{d8-d9}
 8003014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003018:	4b90      	ldr	r3, [pc, #576]	; (800325c <_dtoa_r+0x2f4>)
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	3303      	adds	r3, #3
 800301e:	e7f3      	b.n	8003008 <_dtoa_r+0xa0>
 8003020:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003024:	2200      	movs	r2, #0
 8003026:	ec51 0b17 	vmov	r0, r1, d7
 800302a:	eeb0 8a47 	vmov.f32	s16, s14
 800302e:	eef0 8a67 	vmov.f32	s17, s15
 8003032:	2300      	movs	r3, #0
 8003034:	f7fd fd50 	bl	8000ad8 <__aeabi_dcmpeq>
 8003038:	4681      	mov	r9, r0
 800303a:	b160      	cbz	r0, 8003056 <_dtoa_r+0xee>
 800303c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800303e:	2301      	movs	r3, #1
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 8568 	beq.w	8003b1a <_dtoa_r+0xbb2>
 800304a:	4b86      	ldr	r3, [pc, #536]	; (8003264 <_dtoa_r+0x2fc>)
 800304c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	3b01      	subs	r3, #1
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	e7da      	b.n	800300c <_dtoa_r+0xa4>
 8003056:	aa10      	add	r2, sp, #64	; 0x40
 8003058:	a911      	add	r1, sp, #68	; 0x44
 800305a:	4620      	mov	r0, r4
 800305c:	eeb0 0a48 	vmov.f32	s0, s16
 8003060:	eef0 0a68 	vmov.f32	s1, s17
 8003064:	f001 f994 	bl	8004390 <__d2b>
 8003068:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800306c:	4682      	mov	sl, r0
 800306e:	2d00      	cmp	r5, #0
 8003070:	d07f      	beq.n	8003172 <_dtoa_r+0x20a>
 8003072:	ee18 3a90 	vmov	r3, s17
 8003076:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800307a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800307e:	ec51 0b18 	vmov	r0, r1, d8
 8003082:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003086:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800308a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800308e:	4619      	mov	r1, r3
 8003090:	2200      	movs	r2, #0
 8003092:	4b75      	ldr	r3, [pc, #468]	; (8003268 <_dtoa_r+0x300>)
 8003094:	f7fd f900 	bl	8000298 <__aeabi_dsub>
 8003098:	a367      	add	r3, pc, #412	; (adr r3, 8003238 <_dtoa_r+0x2d0>)
 800309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309e:	f7fd fab3 	bl	8000608 <__aeabi_dmul>
 80030a2:	a367      	add	r3, pc, #412	; (adr r3, 8003240 <_dtoa_r+0x2d8>)
 80030a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a8:	f7fd f8f8 	bl	800029c <__adddf3>
 80030ac:	4606      	mov	r6, r0
 80030ae:	4628      	mov	r0, r5
 80030b0:	460f      	mov	r7, r1
 80030b2:	f7fd fa3f 	bl	8000534 <__aeabi_i2d>
 80030b6:	a364      	add	r3, pc, #400	; (adr r3, 8003248 <_dtoa_r+0x2e0>)
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030bc:	f7fd faa4 	bl	8000608 <__aeabi_dmul>
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	4630      	mov	r0, r6
 80030c6:	4639      	mov	r1, r7
 80030c8:	f7fd f8e8 	bl	800029c <__adddf3>
 80030cc:	4606      	mov	r6, r0
 80030ce:	460f      	mov	r7, r1
 80030d0:	f7fd fd4a 	bl	8000b68 <__aeabi_d2iz>
 80030d4:	2200      	movs	r2, #0
 80030d6:	4683      	mov	fp, r0
 80030d8:	2300      	movs	r3, #0
 80030da:	4630      	mov	r0, r6
 80030dc:	4639      	mov	r1, r7
 80030de:	f7fd fd05 	bl	8000aec <__aeabi_dcmplt>
 80030e2:	b148      	cbz	r0, 80030f8 <_dtoa_r+0x190>
 80030e4:	4658      	mov	r0, fp
 80030e6:	f7fd fa25 	bl	8000534 <__aeabi_i2d>
 80030ea:	4632      	mov	r2, r6
 80030ec:	463b      	mov	r3, r7
 80030ee:	f7fd fcf3 	bl	8000ad8 <__aeabi_dcmpeq>
 80030f2:	b908      	cbnz	r0, 80030f8 <_dtoa_r+0x190>
 80030f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80030f8:	f1bb 0f16 	cmp.w	fp, #22
 80030fc:	d857      	bhi.n	80031ae <_dtoa_r+0x246>
 80030fe:	4b5b      	ldr	r3, [pc, #364]	; (800326c <_dtoa_r+0x304>)
 8003100:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003108:	ec51 0b18 	vmov	r0, r1, d8
 800310c:	f7fd fcee 	bl	8000aec <__aeabi_dcmplt>
 8003110:	2800      	cmp	r0, #0
 8003112:	d04e      	beq.n	80031b2 <_dtoa_r+0x24a>
 8003114:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003118:	2300      	movs	r3, #0
 800311a:	930c      	str	r3, [sp, #48]	; 0x30
 800311c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800311e:	1b5b      	subs	r3, r3, r5
 8003120:	1e5a      	subs	r2, r3, #1
 8003122:	bf45      	ittet	mi
 8003124:	f1c3 0301 	rsbmi	r3, r3, #1
 8003128:	9305      	strmi	r3, [sp, #20]
 800312a:	2300      	movpl	r3, #0
 800312c:	2300      	movmi	r3, #0
 800312e:	9206      	str	r2, [sp, #24]
 8003130:	bf54      	ite	pl
 8003132:	9305      	strpl	r3, [sp, #20]
 8003134:	9306      	strmi	r3, [sp, #24]
 8003136:	f1bb 0f00 	cmp.w	fp, #0
 800313a:	db3c      	blt.n	80031b6 <_dtoa_r+0x24e>
 800313c:	9b06      	ldr	r3, [sp, #24]
 800313e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8003142:	445b      	add	r3, fp
 8003144:	9306      	str	r3, [sp, #24]
 8003146:	2300      	movs	r3, #0
 8003148:	9308      	str	r3, [sp, #32]
 800314a:	9b07      	ldr	r3, [sp, #28]
 800314c:	2b09      	cmp	r3, #9
 800314e:	d868      	bhi.n	8003222 <_dtoa_r+0x2ba>
 8003150:	2b05      	cmp	r3, #5
 8003152:	bfc4      	itt	gt
 8003154:	3b04      	subgt	r3, #4
 8003156:	9307      	strgt	r3, [sp, #28]
 8003158:	9b07      	ldr	r3, [sp, #28]
 800315a:	f1a3 0302 	sub.w	r3, r3, #2
 800315e:	bfcc      	ite	gt
 8003160:	2500      	movgt	r5, #0
 8003162:	2501      	movle	r5, #1
 8003164:	2b03      	cmp	r3, #3
 8003166:	f200 8085 	bhi.w	8003274 <_dtoa_r+0x30c>
 800316a:	e8df f003 	tbb	[pc, r3]
 800316e:	3b2e      	.short	0x3b2e
 8003170:	5839      	.short	0x5839
 8003172:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003176:	441d      	add	r5, r3
 8003178:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800317c:	2b20      	cmp	r3, #32
 800317e:	bfc1      	itttt	gt
 8003180:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003184:	fa08 f803 	lslgt.w	r8, r8, r3
 8003188:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800318c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8003190:	bfd6      	itet	le
 8003192:	f1c3 0320 	rsble	r3, r3, #32
 8003196:	ea48 0003 	orrgt.w	r0, r8, r3
 800319a:	fa06 f003 	lslle.w	r0, r6, r3
 800319e:	f7fd f9b9 	bl	8000514 <__aeabi_ui2d>
 80031a2:	2201      	movs	r2, #1
 80031a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80031a8:	3d01      	subs	r5, #1
 80031aa:	920e      	str	r2, [sp, #56]	; 0x38
 80031ac:	e76f      	b.n	800308e <_dtoa_r+0x126>
 80031ae:	2301      	movs	r3, #1
 80031b0:	e7b3      	b.n	800311a <_dtoa_r+0x1b2>
 80031b2:	900c      	str	r0, [sp, #48]	; 0x30
 80031b4:	e7b2      	b.n	800311c <_dtoa_r+0x1b4>
 80031b6:	9b05      	ldr	r3, [sp, #20]
 80031b8:	eba3 030b 	sub.w	r3, r3, fp
 80031bc:	9305      	str	r3, [sp, #20]
 80031be:	f1cb 0300 	rsb	r3, fp, #0
 80031c2:	9308      	str	r3, [sp, #32]
 80031c4:	2300      	movs	r3, #0
 80031c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80031c8:	e7bf      	b.n	800314a <_dtoa_r+0x1e2>
 80031ca:	2300      	movs	r3, #0
 80031cc:	9309      	str	r3, [sp, #36]	; 0x24
 80031ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	dc52      	bgt.n	800327a <_dtoa_r+0x312>
 80031d4:	2301      	movs	r3, #1
 80031d6:	9301      	str	r3, [sp, #4]
 80031d8:	9304      	str	r3, [sp, #16]
 80031da:	461a      	mov	r2, r3
 80031dc:	920a      	str	r2, [sp, #40]	; 0x28
 80031de:	e00b      	b.n	80031f8 <_dtoa_r+0x290>
 80031e0:	2301      	movs	r3, #1
 80031e2:	e7f3      	b.n	80031cc <_dtoa_r+0x264>
 80031e4:	2300      	movs	r3, #0
 80031e6:	9309      	str	r3, [sp, #36]	; 0x24
 80031e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031ea:	445b      	add	r3, fp
 80031ec:	9301      	str	r3, [sp, #4]
 80031ee:	3301      	adds	r3, #1
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	9304      	str	r3, [sp, #16]
 80031f4:	bfb8      	it	lt
 80031f6:	2301      	movlt	r3, #1
 80031f8:	69e0      	ldr	r0, [r4, #28]
 80031fa:	2100      	movs	r1, #0
 80031fc:	2204      	movs	r2, #4
 80031fe:	f102 0614 	add.w	r6, r2, #20
 8003202:	429e      	cmp	r6, r3
 8003204:	d93d      	bls.n	8003282 <_dtoa_r+0x31a>
 8003206:	6041      	str	r1, [r0, #4]
 8003208:	4620      	mov	r0, r4
 800320a:	f000 fd9f 	bl	8003d4c <_Balloc>
 800320e:	9000      	str	r0, [sp, #0]
 8003210:	2800      	cmp	r0, #0
 8003212:	d139      	bne.n	8003288 <_dtoa_r+0x320>
 8003214:	4b16      	ldr	r3, [pc, #88]	; (8003270 <_dtoa_r+0x308>)
 8003216:	4602      	mov	r2, r0
 8003218:	f240 11af 	movw	r1, #431	; 0x1af
 800321c:	e6bd      	b.n	8002f9a <_dtoa_r+0x32>
 800321e:	2301      	movs	r3, #1
 8003220:	e7e1      	b.n	80031e6 <_dtoa_r+0x27e>
 8003222:	2501      	movs	r5, #1
 8003224:	2300      	movs	r3, #0
 8003226:	9307      	str	r3, [sp, #28]
 8003228:	9509      	str	r5, [sp, #36]	; 0x24
 800322a:	f04f 33ff 	mov.w	r3, #4294967295
 800322e:	9301      	str	r3, [sp, #4]
 8003230:	9304      	str	r3, [sp, #16]
 8003232:	2200      	movs	r2, #0
 8003234:	2312      	movs	r3, #18
 8003236:	e7d1      	b.n	80031dc <_dtoa_r+0x274>
 8003238:	636f4361 	.word	0x636f4361
 800323c:	3fd287a7 	.word	0x3fd287a7
 8003240:	8b60c8b3 	.word	0x8b60c8b3
 8003244:	3fc68a28 	.word	0x3fc68a28
 8003248:	509f79fb 	.word	0x509f79fb
 800324c:	3fd34413 	.word	0x3fd34413
 8003250:	08004a28 	.word	0x08004a28
 8003254:	08004a3f 	.word	0x08004a3f
 8003258:	7ff00000 	.word	0x7ff00000
 800325c:	08004a24 	.word	0x08004a24
 8003260:	08004a1b 	.word	0x08004a1b
 8003264:	080049f8 	.word	0x080049f8
 8003268:	3ff80000 	.word	0x3ff80000
 800326c:	08004b30 	.word	0x08004b30
 8003270:	08004a97 	.word	0x08004a97
 8003274:	2301      	movs	r3, #1
 8003276:	9309      	str	r3, [sp, #36]	; 0x24
 8003278:	e7d7      	b.n	800322a <_dtoa_r+0x2c2>
 800327a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800327c:	9301      	str	r3, [sp, #4]
 800327e:	9304      	str	r3, [sp, #16]
 8003280:	e7ba      	b.n	80031f8 <_dtoa_r+0x290>
 8003282:	3101      	adds	r1, #1
 8003284:	0052      	lsls	r2, r2, #1
 8003286:	e7ba      	b.n	80031fe <_dtoa_r+0x296>
 8003288:	69e3      	ldr	r3, [r4, #28]
 800328a:	9a00      	ldr	r2, [sp, #0]
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	9b04      	ldr	r3, [sp, #16]
 8003290:	2b0e      	cmp	r3, #14
 8003292:	f200 80a8 	bhi.w	80033e6 <_dtoa_r+0x47e>
 8003296:	2d00      	cmp	r5, #0
 8003298:	f000 80a5 	beq.w	80033e6 <_dtoa_r+0x47e>
 800329c:	f1bb 0f00 	cmp.w	fp, #0
 80032a0:	dd38      	ble.n	8003314 <_dtoa_r+0x3ac>
 80032a2:	4bc0      	ldr	r3, [pc, #768]	; (80035a4 <_dtoa_r+0x63c>)
 80032a4:	f00b 020f 	and.w	r2, fp, #15
 80032a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80032ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80032b0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80032b4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80032b8:	d019      	beq.n	80032ee <_dtoa_r+0x386>
 80032ba:	4bbb      	ldr	r3, [pc, #748]	; (80035a8 <_dtoa_r+0x640>)
 80032bc:	ec51 0b18 	vmov	r0, r1, d8
 80032c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80032c4:	f7fd faca 	bl	800085c <__aeabi_ddiv>
 80032c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80032cc:	f008 080f 	and.w	r8, r8, #15
 80032d0:	2503      	movs	r5, #3
 80032d2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80035a8 <_dtoa_r+0x640>
 80032d6:	f1b8 0f00 	cmp.w	r8, #0
 80032da:	d10a      	bne.n	80032f2 <_dtoa_r+0x38a>
 80032dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80032e0:	4632      	mov	r2, r6
 80032e2:	463b      	mov	r3, r7
 80032e4:	f7fd faba 	bl	800085c <__aeabi_ddiv>
 80032e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80032ec:	e02b      	b.n	8003346 <_dtoa_r+0x3de>
 80032ee:	2502      	movs	r5, #2
 80032f0:	e7ef      	b.n	80032d2 <_dtoa_r+0x36a>
 80032f2:	f018 0f01 	tst.w	r8, #1
 80032f6:	d008      	beq.n	800330a <_dtoa_r+0x3a2>
 80032f8:	4630      	mov	r0, r6
 80032fa:	4639      	mov	r1, r7
 80032fc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8003300:	f7fd f982 	bl	8000608 <__aeabi_dmul>
 8003304:	3501      	adds	r5, #1
 8003306:	4606      	mov	r6, r0
 8003308:	460f      	mov	r7, r1
 800330a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800330e:	f109 0908 	add.w	r9, r9, #8
 8003312:	e7e0      	b.n	80032d6 <_dtoa_r+0x36e>
 8003314:	f000 809f 	beq.w	8003456 <_dtoa_r+0x4ee>
 8003318:	f1cb 0600 	rsb	r6, fp, #0
 800331c:	4ba1      	ldr	r3, [pc, #644]	; (80035a4 <_dtoa_r+0x63c>)
 800331e:	4fa2      	ldr	r7, [pc, #648]	; (80035a8 <_dtoa_r+0x640>)
 8003320:	f006 020f 	and.w	r2, r6, #15
 8003324:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332c:	ec51 0b18 	vmov	r0, r1, d8
 8003330:	f7fd f96a 	bl	8000608 <__aeabi_dmul>
 8003334:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003338:	1136      	asrs	r6, r6, #4
 800333a:	2300      	movs	r3, #0
 800333c:	2502      	movs	r5, #2
 800333e:	2e00      	cmp	r6, #0
 8003340:	d17e      	bne.n	8003440 <_dtoa_r+0x4d8>
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1d0      	bne.n	80032e8 <_dtoa_r+0x380>
 8003346:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003348:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8084 	beq.w	800345a <_dtoa_r+0x4f2>
 8003352:	4b96      	ldr	r3, [pc, #600]	; (80035ac <_dtoa_r+0x644>)
 8003354:	2200      	movs	r2, #0
 8003356:	4640      	mov	r0, r8
 8003358:	4649      	mov	r1, r9
 800335a:	f7fd fbc7 	bl	8000aec <__aeabi_dcmplt>
 800335e:	2800      	cmp	r0, #0
 8003360:	d07b      	beq.n	800345a <_dtoa_r+0x4f2>
 8003362:	9b04      	ldr	r3, [sp, #16]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d078      	beq.n	800345a <_dtoa_r+0x4f2>
 8003368:	9b01      	ldr	r3, [sp, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	dd39      	ble.n	80033e2 <_dtoa_r+0x47a>
 800336e:	4b90      	ldr	r3, [pc, #576]	; (80035b0 <_dtoa_r+0x648>)
 8003370:	2200      	movs	r2, #0
 8003372:	4640      	mov	r0, r8
 8003374:	4649      	mov	r1, r9
 8003376:	f7fd f947 	bl	8000608 <__aeabi_dmul>
 800337a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800337e:	9e01      	ldr	r6, [sp, #4]
 8003380:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003384:	3501      	adds	r5, #1
 8003386:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800338a:	4628      	mov	r0, r5
 800338c:	f7fd f8d2 	bl	8000534 <__aeabi_i2d>
 8003390:	4642      	mov	r2, r8
 8003392:	464b      	mov	r3, r9
 8003394:	f7fd f938 	bl	8000608 <__aeabi_dmul>
 8003398:	4b86      	ldr	r3, [pc, #536]	; (80035b4 <_dtoa_r+0x64c>)
 800339a:	2200      	movs	r2, #0
 800339c:	f7fc ff7e 	bl	800029c <__adddf3>
 80033a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80033a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80033a8:	9303      	str	r3, [sp, #12]
 80033aa:	2e00      	cmp	r6, #0
 80033ac:	d158      	bne.n	8003460 <_dtoa_r+0x4f8>
 80033ae:	4b82      	ldr	r3, [pc, #520]	; (80035b8 <_dtoa_r+0x650>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	4640      	mov	r0, r8
 80033b4:	4649      	mov	r1, r9
 80033b6:	f7fc ff6f 	bl	8000298 <__aeabi_dsub>
 80033ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80033be:	4680      	mov	r8, r0
 80033c0:	4689      	mov	r9, r1
 80033c2:	f7fd fbb1 	bl	8000b28 <__aeabi_dcmpgt>
 80033c6:	2800      	cmp	r0, #0
 80033c8:	f040 8296 	bne.w	80038f8 <_dtoa_r+0x990>
 80033cc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80033d0:	4640      	mov	r0, r8
 80033d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80033d6:	4649      	mov	r1, r9
 80033d8:	f7fd fb88 	bl	8000aec <__aeabi_dcmplt>
 80033dc:	2800      	cmp	r0, #0
 80033de:	f040 8289 	bne.w	80038f4 <_dtoa_r+0x98c>
 80033e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80033e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f2c0 814e 	blt.w	800368a <_dtoa_r+0x722>
 80033ee:	f1bb 0f0e 	cmp.w	fp, #14
 80033f2:	f300 814a 	bgt.w	800368a <_dtoa_r+0x722>
 80033f6:	4b6b      	ldr	r3, [pc, #428]	; (80035a4 <_dtoa_r+0x63c>)
 80033f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80033fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003402:	2b00      	cmp	r3, #0
 8003404:	f280 80dc 	bge.w	80035c0 <_dtoa_r+0x658>
 8003408:	9b04      	ldr	r3, [sp, #16]
 800340a:	2b00      	cmp	r3, #0
 800340c:	f300 80d8 	bgt.w	80035c0 <_dtoa_r+0x658>
 8003410:	f040 826f 	bne.w	80038f2 <_dtoa_r+0x98a>
 8003414:	4b68      	ldr	r3, [pc, #416]	; (80035b8 <_dtoa_r+0x650>)
 8003416:	2200      	movs	r2, #0
 8003418:	4640      	mov	r0, r8
 800341a:	4649      	mov	r1, r9
 800341c:	f7fd f8f4 	bl	8000608 <__aeabi_dmul>
 8003420:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003424:	f7fd fb76 	bl	8000b14 <__aeabi_dcmpge>
 8003428:	9e04      	ldr	r6, [sp, #16]
 800342a:	4637      	mov	r7, r6
 800342c:	2800      	cmp	r0, #0
 800342e:	f040 8245 	bne.w	80038bc <_dtoa_r+0x954>
 8003432:	9d00      	ldr	r5, [sp, #0]
 8003434:	2331      	movs	r3, #49	; 0x31
 8003436:	f805 3b01 	strb.w	r3, [r5], #1
 800343a:	f10b 0b01 	add.w	fp, fp, #1
 800343e:	e241      	b.n	80038c4 <_dtoa_r+0x95c>
 8003440:	07f2      	lsls	r2, r6, #31
 8003442:	d505      	bpl.n	8003450 <_dtoa_r+0x4e8>
 8003444:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003448:	f7fd f8de 	bl	8000608 <__aeabi_dmul>
 800344c:	3501      	adds	r5, #1
 800344e:	2301      	movs	r3, #1
 8003450:	1076      	asrs	r6, r6, #1
 8003452:	3708      	adds	r7, #8
 8003454:	e773      	b.n	800333e <_dtoa_r+0x3d6>
 8003456:	2502      	movs	r5, #2
 8003458:	e775      	b.n	8003346 <_dtoa_r+0x3de>
 800345a:	9e04      	ldr	r6, [sp, #16]
 800345c:	465f      	mov	r7, fp
 800345e:	e792      	b.n	8003386 <_dtoa_r+0x41e>
 8003460:	9900      	ldr	r1, [sp, #0]
 8003462:	4b50      	ldr	r3, [pc, #320]	; (80035a4 <_dtoa_r+0x63c>)
 8003464:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003468:	4431      	add	r1, r6
 800346a:	9102      	str	r1, [sp, #8]
 800346c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800346e:	eeb0 9a47 	vmov.f32	s18, s14
 8003472:	eef0 9a67 	vmov.f32	s19, s15
 8003476:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800347a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800347e:	2900      	cmp	r1, #0
 8003480:	d044      	beq.n	800350c <_dtoa_r+0x5a4>
 8003482:	494e      	ldr	r1, [pc, #312]	; (80035bc <_dtoa_r+0x654>)
 8003484:	2000      	movs	r0, #0
 8003486:	f7fd f9e9 	bl	800085c <__aeabi_ddiv>
 800348a:	ec53 2b19 	vmov	r2, r3, d9
 800348e:	f7fc ff03 	bl	8000298 <__aeabi_dsub>
 8003492:	9d00      	ldr	r5, [sp, #0]
 8003494:	ec41 0b19 	vmov	d9, r0, r1
 8003498:	4649      	mov	r1, r9
 800349a:	4640      	mov	r0, r8
 800349c:	f7fd fb64 	bl	8000b68 <__aeabi_d2iz>
 80034a0:	4606      	mov	r6, r0
 80034a2:	f7fd f847 	bl	8000534 <__aeabi_i2d>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4640      	mov	r0, r8
 80034ac:	4649      	mov	r1, r9
 80034ae:	f7fc fef3 	bl	8000298 <__aeabi_dsub>
 80034b2:	3630      	adds	r6, #48	; 0x30
 80034b4:	f805 6b01 	strb.w	r6, [r5], #1
 80034b8:	ec53 2b19 	vmov	r2, r3, d9
 80034bc:	4680      	mov	r8, r0
 80034be:	4689      	mov	r9, r1
 80034c0:	f7fd fb14 	bl	8000aec <__aeabi_dcmplt>
 80034c4:	2800      	cmp	r0, #0
 80034c6:	d164      	bne.n	8003592 <_dtoa_r+0x62a>
 80034c8:	4642      	mov	r2, r8
 80034ca:	464b      	mov	r3, r9
 80034cc:	4937      	ldr	r1, [pc, #220]	; (80035ac <_dtoa_r+0x644>)
 80034ce:	2000      	movs	r0, #0
 80034d0:	f7fc fee2 	bl	8000298 <__aeabi_dsub>
 80034d4:	ec53 2b19 	vmov	r2, r3, d9
 80034d8:	f7fd fb08 	bl	8000aec <__aeabi_dcmplt>
 80034dc:	2800      	cmp	r0, #0
 80034de:	f040 80b6 	bne.w	800364e <_dtoa_r+0x6e6>
 80034e2:	9b02      	ldr	r3, [sp, #8]
 80034e4:	429d      	cmp	r5, r3
 80034e6:	f43f af7c 	beq.w	80033e2 <_dtoa_r+0x47a>
 80034ea:	4b31      	ldr	r3, [pc, #196]	; (80035b0 <_dtoa_r+0x648>)
 80034ec:	ec51 0b19 	vmov	r0, r1, d9
 80034f0:	2200      	movs	r2, #0
 80034f2:	f7fd f889 	bl	8000608 <__aeabi_dmul>
 80034f6:	4b2e      	ldr	r3, [pc, #184]	; (80035b0 <_dtoa_r+0x648>)
 80034f8:	ec41 0b19 	vmov	d9, r0, r1
 80034fc:	2200      	movs	r2, #0
 80034fe:	4640      	mov	r0, r8
 8003500:	4649      	mov	r1, r9
 8003502:	f7fd f881 	bl	8000608 <__aeabi_dmul>
 8003506:	4680      	mov	r8, r0
 8003508:	4689      	mov	r9, r1
 800350a:	e7c5      	b.n	8003498 <_dtoa_r+0x530>
 800350c:	ec51 0b17 	vmov	r0, r1, d7
 8003510:	f7fd f87a 	bl	8000608 <__aeabi_dmul>
 8003514:	9b02      	ldr	r3, [sp, #8]
 8003516:	9d00      	ldr	r5, [sp, #0]
 8003518:	930f      	str	r3, [sp, #60]	; 0x3c
 800351a:	ec41 0b19 	vmov	d9, r0, r1
 800351e:	4649      	mov	r1, r9
 8003520:	4640      	mov	r0, r8
 8003522:	f7fd fb21 	bl	8000b68 <__aeabi_d2iz>
 8003526:	4606      	mov	r6, r0
 8003528:	f7fd f804 	bl	8000534 <__aeabi_i2d>
 800352c:	3630      	adds	r6, #48	; 0x30
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4640      	mov	r0, r8
 8003534:	4649      	mov	r1, r9
 8003536:	f7fc feaf 	bl	8000298 <__aeabi_dsub>
 800353a:	f805 6b01 	strb.w	r6, [r5], #1
 800353e:	9b02      	ldr	r3, [sp, #8]
 8003540:	429d      	cmp	r5, r3
 8003542:	4680      	mov	r8, r0
 8003544:	4689      	mov	r9, r1
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	d124      	bne.n	8003596 <_dtoa_r+0x62e>
 800354c:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <_dtoa_r+0x654>)
 800354e:	ec51 0b19 	vmov	r0, r1, d9
 8003552:	f7fc fea3 	bl	800029c <__adddf3>
 8003556:	4602      	mov	r2, r0
 8003558:	460b      	mov	r3, r1
 800355a:	4640      	mov	r0, r8
 800355c:	4649      	mov	r1, r9
 800355e:	f7fd fae3 	bl	8000b28 <__aeabi_dcmpgt>
 8003562:	2800      	cmp	r0, #0
 8003564:	d173      	bne.n	800364e <_dtoa_r+0x6e6>
 8003566:	ec53 2b19 	vmov	r2, r3, d9
 800356a:	4914      	ldr	r1, [pc, #80]	; (80035bc <_dtoa_r+0x654>)
 800356c:	2000      	movs	r0, #0
 800356e:	f7fc fe93 	bl	8000298 <__aeabi_dsub>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	4640      	mov	r0, r8
 8003578:	4649      	mov	r1, r9
 800357a:	f7fd fab7 	bl	8000aec <__aeabi_dcmplt>
 800357e:	2800      	cmp	r0, #0
 8003580:	f43f af2f 	beq.w	80033e2 <_dtoa_r+0x47a>
 8003584:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8003586:	1e6b      	subs	r3, r5, #1
 8003588:	930f      	str	r3, [sp, #60]	; 0x3c
 800358a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800358e:	2b30      	cmp	r3, #48	; 0x30
 8003590:	d0f8      	beq.n	8003584 <_dtoa_r+0x61c>
 8003592:	46bb      	mov	fp, r7
 8003594:	e04a      	b.n	800362c <_dtoa_r+0x6c4>
 8003596:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <_dtoa_r+0x648>)
 8003598:	f7fd f836 	bl	8000608 <__aeabi_dmul>
 800359c:	4680      	mov	r8, r0
 800359e:	4689      	mov	r9, r1
 80035a0:	e7bd      	b.n	800351e <_dtoa_r+0x5b6>
 80035a2:	bf00      	nop
 80035a4:	08004b30 	.word	0x08004b30
 80035a8:	08004b08 	.word	0x08004b08
 80035ac:	3ff00000 	.word	0x3ff00000
 80035b0:	40240000 	.word	0x40240000
 80035b4:	401c0000 	.word	0x401c0000
 80035b8:	40140000 	.word	0x40140000
 80035bc:	3fe00000 	.word	0x3fe00000
 80035c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80035c4:	9d00      	ldr	r5, [sp, #0]
 80035c6:	4642      	mov	r2, r8
 80035c8:	464b      	mov	r3, r9
 80035ca:	4630      	mov	r0, r6
 80035cc:	4639      	mov	r1, r7
 80035ce:	f7fd f945 	bl	800085c <__aeabi_ddiv>
 80035d2:	f7fd fac9 	bl	8000b68 <__aeabi_d2iz>
 80035d6:	9001      	str	r0, [sp, #4]
 80035d8:	f7fc ffac 	bl	8000534 <__aeabi_i2d>
 80035dc:	4642      	mov	r2, r8
 80035de:	464b      	mov	r3, r9
 80035e0:	f7fd f812 	bl	8000608 <__aeabi_dmul>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4630      	mov	r0, r6
 80035ea:	4639      	mov	r1, r7
 80035ec:	f7fc fe54 	bl	8000298 <__aeabi_dsub>
 80035f0:	9e01      	ldr	r6, [sp, #4]
 80035f2:	9f04      	ldr	r7, [sp, #16]
 80035f4:	3630      	adds	r6, #48	; 0x30
 80035f6:	f805 6b01 	strb.w	r6, [r5], #1
 80035fa:	9e00      	ldr	r6, [sp, #0]
 80035fc:	1bae      	subs	r6, r5, r6
 80035fe:	42b7      	cmp	r7, r6
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	d134      	bne.n	8003670 <_dtoa_r+0x708>
 8003606:	f7fc fe49 	bl	800029c <__adddf3>
 800360a:	4642      	mov	r2, r8
 800360c:	464b      	mov	r3, r9
 800360e:	4606      	mov	r6, r0
 8003610:	460f      	mov	r7, r1
 8003612:	f7fd fa89 	bl	8000b28 <__aeabi_dcmpgt>
 8003616:	b9c8      	cbnz	r0, 800364c <_dtoa_r+0x6e4>
 8003618:	4642      	mov	r2, r8
 800361a:	464b      	mov	r3, r9
 800361c:	4630      	mov	r0, r6
 800361e:	4639      	mov	r1, r7
 8003620:	f7fd fa5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8003624:	b110      	cbz	r0, 800362c <_dtoa_r+0x6c4>
 8003626:	9b01      	ldr	r3, [sp, #4]
 8003628:	07db      	lsls	r3, r3, #31
 800362a:	d40f      	bmi.n	800364c <_dtoa_r+0x6e4>
 800362c:	4651      	mov	r1, sl
 800362e:	4620      	mov	r0, r4
 8003630:	f000 fbcc 	bl	8003dcc <_Bfree>
 8003634:	2300      	movs	r3, #0
 8003636:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003638:	702b      	strb	r3, [r5, #0]
 800363a:	f10b 0301 	add.w	r3, fp, #1
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003642:	2b00      	cmp	r3, #0
 8003644:	f43f ace2 	beq.w	800300c <_dtoa_r+0xa4>
 8003648:	601d      	str	r5, [r3, #0]
 800364a:	e4df      	b.n	800300c <_dtoa_r+0xa4>
 800364c:	465f      	mov	r7, fp
 800364e:	462b      	mov	r3, r5
 8003650:	461d      	mov	r5, r3
 8003652:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003656:	2a39      	cmp	r2, #57	; 0x39
 8003658:	d106      	bne.n	8003668 <_dtoa_r+0x700>
 800365a:	9a00      	ldr	r2, [sp, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d1f7      	bne.n	8003650 <_dtoa_r+0x6e8>
 8003660:	9900      	ldr	r1, [sp, #0]
 8003662:	2230      	movs	r2, #48	; 0x30
 8003664:	3701      	adds	r7, #1
 8003666:	700a      	strb	r2, [r1, #0]
 8003668:	781a      	ldrb	r2, [r3, #0]
 800366a:	3201      	adds	r2, #1
 800366c:	701a      	strb	r2, [r3, #0]
 800366e:	e790      	b.n	8003592 <_dtoa_r+0x62a>
 8003670:	4ba3      	ldr	r3, [pc, #652]	; (8003900 <_dtoa_r+0x998>)
 8003672:	2200      	movs	r2, #0
 8003674:	f7fc ffc8 	bl	8000608 <__aeabi_dmul>
 8003678:	2200      	movs	r2, #0
 800367a:	2300      	movs	r3, #0
 800367c:	4606      	mov	r6, r0
 800367e:	460f      	mov	r7, r1
 8003680:	f7fd fa2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8003684:	2800      	cmp	r0, #0
 8003686:	d09e      	beq.n	80035c6 <_dtoa_r+0x65e>
 8003688:	e7d0      	b.n	800362c <_dtoa_r+0x6c4>
 800368a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800368c:	2a00      	cmp	r2, #0
 800368e:	f000 80ca 	beq.w	8003826 <_dtoa_r+0x8be>
 8003692:	9a07      	ldr	r2, [sp, #28]
 8003694:	2a01      	cmp	r2, #1
 8003696:	f300 80ad 	bgt.w	80037f4 <_dtoa_r+0x88c>
 800369a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800369c:	2a00      	cmp	r2, #0
 800369e:	f000 80a5 	beq.w	80037ec <_dtoa_r+0x884>
 80036a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80036a6:	9e08      	ldr	r6, [sp, #32]
 80036a8:	9d05      	ldr	r5, [sp, #20]
 80036aa:	9a05      	ldr	r2, [sp, #20]
 80036ac:	441a      	add	r2, r3
 80036ae:	9205      	str	r2, [sp, #20]
 80036b0:	9a06      	ldr	r2, [sp, #24]
 80036b2:	2101      	movs	r1, #1
 80036b4:	441a      	add	r2, r3
 80036b6:	4620      	mov	r0, r4
 80036b8:	9206      	str	r2, [sp, #24]
 80036ba:	f000 fc3d 	bl	8003f38 <__i2b>
 80036be:	4607      	mov	r7, r0
 80036c0:	b165      	cbz	r5, 80036dc <_dtoa_r+0x774>
 80036c2:	9b06      	ldr	r3, [sp, #24]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	dd09      	ble.n	80036dc <_dtoa_r+0x774>
 80036c8:	42ab      	cmp	r3, r5
 80036ca:	9a05      	ldr	r2, [sp, #20]
 80036cc:	bfa8      	it	ge
 80036ce:	462b      	movge	r3, r5
 80036d0:	1ad2      	subs	r2, r2, r3
 80036d2:	9205      	str	r2, [sp, #20]
 80036d4:	9a06      	ldr	r2, [sp, #24]
 80036d6:	1aed      	subs	r5, r5, r3
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	9306      	str	r3, [sp, #24]
 80036dc:	9b08      	ldr	r3, [sp, #32]
 80036de:	b1f3      	cbz	r3, 800371e <_dtoa_r+0x7b6>
 80036e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 80a3 	beq.w	800382e <_dtoa_r+0x8c6>
 80036e8:	2e00      	cmp	r6, #0
 80036ea:	dd10      	ble.n	800370e <_dtoa_r+0x7a6>
 80036ec:	4639      	mov	r1, r7
 80036ee:	4632      	mov	r2, r6
 80036f0:	4620      	mov	r0, r4
 80036f2:	f000 fce1 	bl	80040b8 <__pow5mult>
 80036f6:	4652      	mov	r2, sl
 80036f8:	4601      	mov	r1, r0
 80036fa:	4607      	mov	r7, r0
 80036fc:	4620      	mov	r0, r4
 80036fe:	f000 fc31 	bl	8003f64 <__multiply>
 8003702:	4651      	mov	r1, sl
 8003704:	4680      	mov	r8, r0
 8003706:	4620      	mov	r0, r4
 8003708:	f000 fb60 	bl	8003dcc <_Bfree>
 800370c:	46c2      	mov	sl, r8
 800370e:	9b08      	ldr	r3, [sp, #32]
 8003710:	1b9a      	subs	r2, r3, r6
 8003712:	d004      	beq.n	800371e <_dtoa_r+0x7b6>
 8003714:	4651      	mov	r1, sl
 8003716:	4620      	mov	r0, r4
 8003718:	f000 fcce 	bl	80040b8 <__pow5mult>
 800371c:	4682      	mov	sl, r0
 800371e:	2101      	movs	r1, #1
 8003720:	4620      	mov	r0, r4
 8003722:	f000 fc09 	bl	8003f38 <__i2b>
 8003726:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003728:	2b00      	cmp	r3, #0
 800372a:	4606      	mov	r6, r0
 800372c:	f340 8081 	ble.w	8003832 <_dtoa_r+0x8ca>
 8003730:	461a      	mov	r2, r3
 8003732:	4601      	mov	r1, r0
 8003734:	4620      	mov	r0, r4
 8003736:	f000 fcbf 	bl	80040b8 <__pow5mult>
 800373a:	9b07      	ldr	r3, [sp, #28]
 800373c:	2b01      	cmp	r3, #1
 800373e:	4606      	mov	r6, r0
 8003740:	dd7a      	ble.n	8003838 <_dtoa_r+0x8d0>
 8003742:	f04f 0800 	mov.w	r8, #0
 8003746:	6933      	ldr	r3, [r6, #16]
 8003748:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800374c:	6918      	ldr	r0, [r3, #16]
 800374e:	f000 fba5 	bl	8003e9c <__hi0bits>
 8003752:	f1c0 0020 	rsb	r0, r0, #32
 8003756:	9b06      	ldr	r3, [sp, #24]
 8003758:	4418      	add	r0, r3
 800375a:	f010 001f 	ands.w	r0, r0, #31
 800375e:	f000 8094 	beq.w	800388a <_dtoa_r+0x922>
 8003762:	f1c0 0320 	rsb	r3, r0, #32
 8003766:	2b04      	cmp	r3, #4
 8003768:	f340 8085 	ble.w	8003876 <_dtoa_r+0x90e>
 800376c:	9b05      	ldr	r3, [sp, #20]
 800376e:	f1c0 001c 	rsb	r0, r0, #28
 8003772:	4403      	add	r3, r0
 8003774:	9305      	str	r3, [sp, #20]
 8003776:	9b06      	ldr	r3, [sp, #24]
 8003778:	4403      	add	r3, r0
 800377a:	4405      	add	r5, r0
 800377c:	9306      	str	r3, [sp, #24]
 800377e:	9b05      	ldr	r3, [sp, #20]
 8003780:	2b00      	cmp	r3, #0
 8003782:	dd05      	ble.n	8003790 <_dtoa_r+0x828>
 8003784:	4651      	mov	r1, sl
 8003786:	461a      	mov	r2, r3
 8003788:	4620      	mov	r0, r4
 800378a:	f000 fcef 	bl	800416c <__lshift>
 800378e:	4682      	mov	sl, r0
 8003790:	9b06      	ldr	r3, [sp, #24]
 8003792:	2b00      	cmp	r3, #0
 8003794:	dd05      	ble.n	80037a2 <_dtoa_r+0x83a>
 8003796:	4631      	mov	r1, r6
 8003798:	461a      	mov	r2, r3
 800379a:	4620      	mov	r0, r4
 800379c:	f000 fce6 	bl	800416c <__lshift>
 80037a0:	4606      	mov	r6, r0
 80037a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d072      	beq.n	800388e <_dtoa_r+0x926>
 80037a8:	4631      	mov	r1, r6
 80037aa:	4650      	mov	r0, sl
 80037ac:	f000 fd4a 	bl	8004244 <__mcmp>
 80037b0:	2800      	cmp	r0, #0
 80037b2:	da6c      	bge.n	800388e <_dtoa_r+0x926>
 80037b4:	2300      	movs	r3, #0
 80037b6:	4651      	mov	r1, sl
 80037b8:	220a      	movs	r2, #10
 80037ba:	4620      	mov	r0, r4
 80037bc:	f000 fb28 	bl	8003e10 <__multadd>
 80037c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80037c6:	4682      	mov	sl, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 81b0 	beq.w	8003b2e <_dtoa_r+0xbc6>
 80037ce:	2300      	movs	r3, #0
 80037d0:	4639      	mov	r1, r7
 80037d2:	220a      	movs	r2, #10
 80037d4:	4620      	mov	r0, r4
 80037d6:	f000 fb1b 	bl	8003e10 <__multadd>
 80037da:	9b01      	ldr	r3, [sp, #4]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	4607      	mov	r7, r0
 80037e0:	f300 8096 	bgt.w	8003910 <_dtoa_r+0x9a8>
 80037e4:	9b07      	ldr	r3, [sp, #28]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	dc59      	bgt.n	800389e <_dtoa_r+0x936>
 80037ea:	e091      	b.n	8003910 <_dtoa_r+0x9a8>
 80037ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80037ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80037f2:	e758      	b.n	80036a6 <_dtoa_r+0x73e>
 80037f4:	9b04      	ldr	r3, [sp, #16]
 80037f6:	1e5e      	subs	r6, r3, #1
 80037f8:	9b08      	ldr	r3, [sp, #32]
 80037fa:	42b3      	cmp	r3, r6
 80037fc:	bfbf      	itttt	lt
 80037fe:	9b08      	ldrlt	r3, [sp, #32]
 8003800:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8003802:	9608      	strlt	r6, [sp, #32]
 8003804:	1af3      	sublt	r3, r6, r3
 8003806:	bfb4      	ite	lt
 8003808:	18d2      	addlt	r2, r2, r3
 800380a:	1b9e      	subge	r6, r3, r6
 800380c:	9b04      	ldr	r3, [sp, #16]
 800380e:	bfbc      	itt	lt
 8003810:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8003812:	2600      	movlt	r6, #0
 8003814:	2b00      	cmp	r3, #0
 8003816:	bfb7      	itett	lt
 8003818:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800381c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8003820:	1a9d      	sublt	r5, r3, r2
 8003822:	2300      	movlt	r3, #0
 8003824:	e741      	b.n	80036aa <_dtoa_r+0x742>
 8003826:	9e08      	ldr	r6, [sp, #32]
 8003828:	9d05      	ldr	r5, [sp, #20]
 800382a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800382c:	e748      	b.n	80036c0 <_dtoa_r+0x758>
 800382e:	9a08      	ldr	r2, [sp, #32]
 8003830:	e770      	b.n	8003714 <_dtoa_r+0x7ac>
 8003832:	9b07      	ldr	r3, [sp, #28]
 8003834:	2b01      	cmp	r3, #1
 8003836:	dc19      	bgt.n	800386c <_dtoa_r+0x904>
 8003838:	9b02      	ldr	r3, [sp, #8]
 800383a:	b9bb      	cbnz	r3, 800386c <_dtoa_r+0x904>
 800383c:	9b03      	ldr	r3, [sp, #12]
 800383e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003842:	b99b      	cbnz	r3, 800386c <_dtoa_r+0x904>
 8003844:	9b03      	ldr	r3, [sp, #12]
 8003846:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800384a:	0d1b      	lsrs	r3, r3, #20
 800384c:	051b      	lsls	r3, r3, #20
 800384e:	b183      	cbz	r3, 8003872 <_dtoa_r+0x90a>
 8003850:	9b05      	ldr	r3, [sp, #20]
 8003852:	3301      	adds	r3, #1
 8003854:	9305      	str	r3, [sp, #20]
 8003856:	9b06      	ldr	r3, [sp, #24]
 8003858:	3301      	adds	r3, #1
 800385a:	9306      	str	r3, [sp, #24]
 800385c:	f04f 0801 	mov.w	r8, #1
 8003860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003862:	2b00      	cmp	r3, #0
 8003864:	f47f af6f 	bne.w	8003746 <_dtoa_r+0x7de>
 8003868:	2001      	movs	r0, #1
 800386a:	e774      	b.n	8003756 <_dtoa_r+0x7ee>
 800386c:	f04f 0800 	mov.w	r8, #0
 8003870:	e7f6      	b.n	8003860 <_dtoa_r+0x8f8>
 8003872:	4698      	mov	r8, r3
 8003874:	e7f4      	b.n	8003860 <_dtoa_r+0x8f8>
 8003876:	d082      	beq.n	800377e <_dtoa_r+0x816>
 8003878:	9a05      	ldr	r2, [sp, #20]
 800387a:	331c      	adds	r3, #28
 800387c:	441a      	add	r2, r3
 800387e:	9205      	str	r2, [sp, #20]
 8003880:	9a06      	ldr	r2, [sp, #24]
 8003882:	441a      	add	r2, r3
 8003884:	441d      	add	r5, r3
 8003886:	9206      	str	r2, [sp, #24]
 8003888:	e779      	b.n	800377e <_dtoa_r+0x816>
 800388a:	4603      	mov	r3, r0
 800388c:	e7f4      	b.n	8003878 <_dtoa_r+0x910>
 800388e:	9b04      	ldr	r3, [sp, #16]
 8003890:	2b00      	cmp	r3, #0
 8003892:	dc37      	bgt.n	8003904 <_dtoa_r+0x99c>
 8003894:	9b07      	ldr	r3, [sp, #28]
 8003896:	2b02      	cmp	r3, #2
 8003898:	dd34      	ble.n	8003904 <_dtoa_r+0x99c>
 800389a:	9b04      	ldr	r3, [sp, #16]
 800389c:	9301      	str	r3, [sp, #4]
 800389e:	9b01      	ldr	r3, [sp, #4]
 80038a0:	b963      	cbnz	r3, 80038bc <_dtoa_r+0x954>
 80038a2:	4631      	mov	r1, r6
 80038a4:	2205      	movs	r2, #5
 80038a6:	4620      	mov	r0, r4
 80038a8:	f000 fab2 	bl	8003e10 <__multadd>
 80038ac:	4601      	mov	r1, r0
 80038ae:	4606      	mov	r6, r0
 80038b0:	4650      	mov	r0, sl
 80038b2:	f000 fcc7 	bl	8004244 <__mcmp>
 80038b6:	2800      	cmp	r0, #0
 80038b8:	f73f adbb 	bgt.w	8003432 <_dtoa_r+0x4ca>
 80038bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038be:	9d00      	ldr	r5, [sp, #0]
 80038c0:	ea6f 0b03 	mvn.w	fp, r3
 80038c4:	f04f 0800 	mov.w	r8, #0
 80038c8:	4631      	mov	r1, r6
 80038ca:	4620      	mov	r0, r4
 80038cc:	f000 fa7e 	bl	8003dcc <_Bfree>
 80038d0:	2f00      	cmp	r7, #0
 80038d2:	f43f aeab 	beq.w	800362c <_dtoa_r+0x6c4>
 80038d6:	f1b8 0f00 	cmp.w	r8, #0
 80038da:	d005      	beq.n	80038e8 <_dtoa_r+0x980>
 80038dc:	45b8      	cmp	r8, r7
 80038de:	d003      	beq.n	80038e8 <_dtoa_r+0x980>
 80038e0:	4641      	mov	r1, r8
 80038e2:	4620      	mov	r0, r4
 80038e4:	f000 fa72 	bl	8003dcc <_Bfree>
 80038e8:	4639      	mov	r1, r7
 80038ea:	4620      	mov	r0, r4
 80038ec:	f000 fa6e 	bl	8003dcc <_Bfree>
 80038f0:	e69c      	b.n	800362c <_dtoa_r+0x6c4>
 80038f2:	2600      	movs	r6, #0
 80038f4:	4637      	mov	r7, r6
 80038f6:	e7e1      	b.n	80038bc <_dtoa_r+0x954>
 80038f8:	46bb      	mov	fp, r7
 80038fa:	4637      	mov	r7, r6
 80038fc:	e599      	b.n	8003432 <_dtoa_r+0x4ca>
 80038fe:	bf00      	nop
 8003900:	40240000 	.word	0x40240000
 8003904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 80c8 	beq.w	8003a9c <_dtoa_r+0xb34>
 800390c:	9b04      	ldr	r3, [sp, #16]
 800390e:	9301      	str	r3, [sp, #4]
 8003910:	2d00      	cmp	r5, #0
 8003912:	dd05      	ble.n	8003920 <_dtoa_r+0x9b8>
 8003914:	4639      	mov	r1, r7
 8003916:	462a      	mov	r2, r5
 8003918:	4620      	mov	r0, r4
 800391a:	f000 fc27 	bl	800416c <__lshift>
 800391e:	4607      	mov	r7, r0
 8003920:	f1b8 0f00 	cmp.w	r8, #0
 8003924:	d05b      	beq.n	80039de <_dtoa_r+0xa76>
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	4620      	mov	r0, r4
 800392a:	f000 fa0f 	bl	8003d4c <_Balloc>
 800392e:	4605      	mov	r5, r0
 8003930:	b928      	cbnz	r0, 800393e <_dtoa_r+0x9d6>
 8003932:	4b83      	ldr	r3, [pc, #524]	; (8003b40 <_dtoa_r+0xbd8>)
 8003934:	4602      	mov	r2, r0
 8003936:	f240 21ef 	movw	r1, #751	; 0x2ef
 800393a:	f7ff bb2e 	b.w	8002f9a <_dtoa_r+0x32>
 800393e:	693a      	ldr	r2, [r7, #16]
 8003940:	3202      	adds	r2, #2
 8003942:	0092      	lsls	r2, r2, #2
 8003944:	f107 010c 	add.w	r1, r7, #12
 8003948:	300c      	adds	r0, #12
 800394a:	f000 ff53 	bl	80047f4 <memcpy>
 800394e:	2201      	movs	r2, #1
 8003950:	4629      	mov	r1, r5
 8003952:	4620      	mov	r0, r4
 8003954:	f000 fc0a 	bl	800416c <__lshift>
 8003958:	9b00      	ldr	r3, [sp, #0]
 800395a:	3301      	adds	r3, #1
 800395c:	9304      	str	r3, [sp, #16]
 800395e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003962:	4413      	add	r3, r2
 8003964:	9308      	str	r3, [sp, #32]
 8003966:	9b02      	ldr	r3, [sp, #8]
 8003968:	f003 0301 	and.w	r3, r3, #1
 800396c:	46b8      	mov	r8, r7
 800396e:	9306      	str	r3, [sp, #24]
 8003970:	4607      	mov	r7, r0
 8003972:	9b04      	ldr	r3, [sp, #16]
 8003974:	4631      	mov	r1, r6
 8003976:	3b01      	subs	r3, #1
 8003978:	4650      	mov	r0, sl
 800397a:	9301      	str	r3, [sp, #4]
 800397c:	f7ff fa69 	bl	8002e52 <quorem>
 8003980:	4641      	mov	r1, r8
 8003982:	9002      	str	r0, [sp, #8]
 8003984:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003988:	4650      	mov	r0, sl
 800398a:	f000 fc5b 	bl	8004244 <__mcmp>
 800398e:	463a      	mov	r2, r7
 8003990:	9005      	str	r0, [sp, #20]
 8003992:	4631      	mov	r1, r6
 8003994:	4620      	mov	r0, r4
 8003996:	f000 fc71 	bl	800427c <__mdiff>
 800399a:	68c2      	ldr	r2, [r0, #12]
 800399c:	4605      	mov	r5, r0
 800399e:	bb02      	cbnz	r2, 80039e2 <_dtoa_r+0xa7a>
 80039a0:	4601      	mov	r1, r0
 80039a2:	4650      	mov	r0, sl
 80039a4:	f000 fc4e 	bl	8004244 <__mcmp>
 80039a8:	4602      	mov	r2, r0
 80039aa:	4629      	mov	r1, r5
 80039ac:	4620      	mov	r0, r4
 80039ae:	9209      	str	r2, [sp, #36]	; 0x24
 80039b0:	f000 fa0c 	bl	8003dcc <_Bfree>
 80039b4:	9b07      	ldr	r3, [sp, #28]
 80039b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039b8:	9d04      	ldr	r5, [sp, #16]
 80039ba:	ea43 0102 	orr.w	r1, r3, r2
 80039be:	9b06      	ldr	r3, [sp, #24]
 80039c0:	4319      	orrs	r1, r3
 80039c2:	d110      	bne.n	80039e6 <_dtoa_r+0xa7e>
 80039c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80039c8:	d029      	beq.n	8003a1e <_dtoa_r+0xab6>
 80039ca:	9b05      	ldr	r3, [sp, #20]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	dd02      	ble.n	80039d6 <_dtoa_r+0xa6e>
 80039d0:	9b02      	ldr	r3, [sp, #8]
 80039d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80039d6:	9b01      	ldr	r3, [sp, #4]
 80039d8:	f883 9000 	strb.w	r9, [r3]
 80039dc:	e774      	b.n	80038c8 <_dtoa_r+0x960>
 80039de:	4638      	mov	r0, r7
 80039e0:	e7ba      	b.n	8003958 <_dtoa_r+0x9f0>
 80039e2:	2201      	movs	r2, #1
 80039e4:	e7e1      	b.n	80039aa <_dtoa_r+0xa42>
 80039e6:	9b05      	ldr	r3, [sp, #20]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	db04      	blt.n	80039f6 <_dtoa_r+0xa8e>
 80039ec:	9907      	ldr	r1, [sp, #28]
 80039ee:	430b      	orrs	r3, r1
 80039f0:	9906      	ldr	r1, [sp, #24]
 80039f2:	430b      	orrs	r3, r1
 80039f4:	d120      	bne.n	8003a38 <_dtoa_r+0xad0>
 80039f6:	2a00      	cmp	r2, #0
 80039f8:	dded      	ble.n	80039d6 <_dtoa_r+0xa6e>
 80039fa:	4651      	mov	r1, sl
 80039fc:	2201      	movs	r2, #1
 80039fe:	4620      	mov	r0, r4
 8003a00:	f000 fbb4 	bl	800416c <__lshift>
 8003a04:	4631      	mov	r1, r6
 8003a06:	4682      	mov	sl, r0
 8003a08:	f000 fc1c 	bl	8004244 <__mcmp>
 8003a0c:	2800      	cmp	r0, #0
 8003a0e:	dc03      	bgt.n	8003a18 <_dtoa_r+0xab0>
 8003a10:	d1e1      	bne.n	80039d6 <_dtoa_r+0xa6e>
 8003a12:	f019 0f01 	tst.w	r9, #1
 8003a16:	d0de      	beq.n	80039d6 <_dtoa_r+0xa6e>
 8003a18:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003a1c:	d1d8      	bne.n	80039d0 <_dtoa_r+0xa68>
 8003a1e:	9a01      	ldr	r2, [sp, #4]
 8003a20:	2339      	movs	r3, #57	; 0x39
 8003a22:	7013      	strb	r3, [r2, #0]
 8003a24:	462b      	mov	r3, r5
 8003a26:	461d      	mov	r5, r3
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003a2e:	2a39      	cmp	r2, #57	; 0x39
 8003a30:	d06c      	beq.n	8003b0c <_dtoa_r+0xba4>
 8003a32:	3201      	adds	r2, #1
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	e747      	b.n	80038c8 <_dtoa_r+0x960>
 8003a38:	2a00      	cmp	r2, #0
 8003a3a:	dd07      	ble.n	8003a4c <_dtoa_r+0xae4>
 8003a3c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003a40:	d0ed      	beq.n	8003a1e <_dtoa_r+0xab6>
 8003a42:	9a01      	ldr	r2, [sp, #4]
 8003a44:	f109 0301 	add.w	r3, r9, #1
 8003a48:	7013      	strb	r3, [r2, #0]
 8003a4a:	e73d      	b.n	80038c8 <_dtoa_r+0x960>
 8003a4c:	9b04      	ldr	r3, [sp, #16]
 8003a4e:	9a08      	ldr	r2, [sp, #32]
 8003a50:	f803 9c01 	strb.w	r9, [r3, #-1]
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d043      	beq.n	8003ae0 <_dtoa_r+0xb78>
 8003a58:	4651      	mov	r1, sl
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	220a      	movs	r2, #10
 8003a5e:	4620      	mov	r0, r4
 8003a60:	f000 f9d6 	bl	8003e10 <__multadd>
 8003a64:	45b8      	cmp	r8, r7
 8003a66:	4682      	mov	sl, r0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	f04f 020a 	mov.w	r2, #10
 8003a70:	4641      	mov	r1, r8
 8003a72:	4620      	mov	r0, r4
 8003a74:	d107      	bne.n	8003a86 <_dtoa_r+0xb1e>
 8003a76:	f000 f9cb 	bl	8003e10 <__multadd>
 8003a7a:	4680      	mov	r8, r0
 8003a7c:	4607      	mov	r7, r0
 8003a7e:	9b04      	ldr	r3, [sp, #16]
 8003a80:	3301      	adds	r3, #1
 8003a82:	9304      	str	r3, [sp, #16]
 8003a84:	e775      	b.n	8003972 <_dtoa_r+0xa0a>
 8003a86:	f000 f9c3 	bl	8003e10 <__multadd>
 8003a8a:	4639      	mov	r1, r7
 8003a8c:	4680      	mov	r8, r0
 8003a8e:	2300      	movs	r3, #0
 8003a90:	220a      	movs	r2, #10
 8003a92:	4620      	mov	r0, r4
 8003a94:	f000 f9bc 	bl	8003e10 <__multadd>
 8003a98:	4607      	mov	r7, r0
 8003a9a:	e7f0      	b.n	8003a7e <_dtoa_r+0xb16>
 8003a9c:	9b04      	ldr	r3, [sp, #16]
 8003a9e:	9301      	str	r3, [sp, #4]
 8003aa0:	9d00      	ldr	r5, [sp, #0]
 8003aa2:	4631      	mov	r1, r6
 8003aa4:	4650      	mov	r0, sl
 8003aa6:	f7ff f9d4 	bl	8002e52 <quorem>
 8003aaa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003aae:	9b00      	ldr	r3, [sp, #0]
 8003ab0:	f805 9b01 	strb.w	r9, [r5], #1
 8003ab4:	1aea      	subs	r2, r5, r3
 8003ab6:	9b01      	ldr	r3, [sp, #4]
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	dd07      	ble.n	8003acc <_dtoa_r+0xb64>
 8003abc:	4651      	mov	r1, sl
 8003abe:	2300      	movs	r3, #0
 8003ac0:	220a      	movs	r2, #10
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	f000 f9a4 	bl	8003e10 <__multadd>
 8003ac8:	4682      	mov	sl, r0
 8003aca:	e7ea      	b.n	8003aa2 <_dtoa_r+0xb3a>
 8003acc:	9b01      	ldr	r3, [sp, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bfc8      	it	gt
 8003ad2:	461d      	movgt	r5, r3
 8003ad4:	9b00      	ldr	r3, [sp, #0]
 8003ad6:	bfd8      	it	le
 8003ad8:	2501      	movle	r5, #1
 8003ada:	441d      	add	r5, r3
 8003adc:	f04f 0800 	mov.w	r8, #0
 8003ae0:	4651      	mov	r1, sl
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	4620      	mov	r0, r4
 8003ae6:	f000 fb41 	bl	800416c <__lshift>
 8003aea:	4631      	mov	r1, r6
 8003aec:	4682      	mov	sl, r0
 8003aee:	f000 fba9 	bl	8004244 <__mcmp>
 8003af2:	2800      	cmp	r0, #0
 8003af4:	dc96      	bgt.n	8003a24 <_dtoa_r+0xabc>
 8003af6:	d102      	bne.n	8003afe <_dtoa_r+0xb96>
 8003af8:	f019 0f01 	tst.w	r9, #1
 8003afc:	d192      	bne.n	8003a24 <_dtoa_r+0xabc>
 8003afe:	462b      	mov	r3, r5
 8003b00:	461d      	mov	r5, r3
 8003b02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003b06:	2a30      	cmp	r2, #48	; 0x30
 8003b08:	d0fa      	beq.n	8003b00 <_dtoa_r+0xb98>
 8003b0a:	e6dd      	b.n	80038c8 <_dtoa_r+0x960>
 8003b0c:	9a00      	ldr	r2, [sp, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d189      	bne.n	8003a26 <_dtoa_r+0xabe>
 8003b12:	f10b 0b01 	add.w	fp, fp, #1
 8003b16:	2331      	movs	r3, #49	; 0x31
 8003b18:	e796      	b.n	8003a48 <_dtoa_r+0xae0>
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	; (8003b44 <_dtoa_r+0xbdc>)
 8003b1c:	f7ff ba99 	b.w	8003052 <_dtoa_r+0xea>
 8003b20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f47f aa6d 	bne.w	8003002 <_dtoa_r+0x9a>
 8003b28:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <_dtoa_r+0xbe0>)
 8003b2a:	f7ff ba92 	b.w	8003052 <_dtoa_r+0xea>
 8003b2e:	9b01      	ldr	r3, [sp, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	dcb5      	bgt.n	8003aa0 <_dtoa_r+0xb38>
 8003b34:	9b07      	ldr	r3, [sp, #28]
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	f73f aeb1 	bgt.w	800389e <_dtoa_r+0x936>
 8003b3c:	e7b0      	b.n	8003aa0 <_dtoa_r+0xb38>
 8003b3e:	bf00      	nop
 8003b40:	08004a97 	.word	0x08004a97
 8003b44:	080049f7 	.word	0x080049f7
 8003b48:	08004a1b 	.word	0x08004a1b

08003b4c <_free_r>:
 8003b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003b4e:	2900      	cmp	r1, #0
 8003b50:	d044      	beq.n	8003bdc <_free_r+0x90>
 8003b52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b56:	9001      	str	r0, [sp, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f1a1 0404 	sub.w	r4, r1, #4
 8003b5e:	bfb8      	it	lt
 8003b60:	18e4      	addlt	r4, r4, r3
 8003b62:	f000 f8e7 	bl	8003d34 <__malloc_lock>
 8003b66:	4a1e      	ldr	r2, [pc, #120]	; (8003be0 <_free_r+0x94>)
 8003b68:	9801      	ldr	r0, [sp, #4]
 8003b6a:	6813      	ldr	r3, [r2, #0]
 8003b6c:	b933      	cbnz	r3, 8003b7c <_free_r+0x30>
 8003b6e:	6063      	str	r3, [r4, #4]
 8003b70:	6014      	str	r4, [r2, #0]
 8003b72:	b003      	add	sp, #12
 8003b74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b78:	f000 b8e2 	b.w	8003d40 <__malloc_unlock>
 8003b7c:	42a3      	cmp	r3, r4
 8003b7e:	d908      	bls.n	8003b92 <_free_r+0x46>
 8003b80:	6825      	ldr	r5, [r4, #0]
 8003b82:	1961      	adds	r1, r4, r5
 8003b84:	428b      	cmp	r3, r1
 8003b86:	bf01      	itttt	eq
 8003b88:	6819      	ldreq	r1, [r3, #0]
 8003b8a:	685b      	ldreq	r3, [r3, #4]
 8003b8c:	1949      	addeq	r1, r1, r5
 8003b8e:	6021      	streq	r1, [r4, #0]
 8003b90:	e7ed      	b.n	8003b6e <_free_r+0x22>
 8003b92:	461a      	mov	r2, r3
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	b10b      	cbz	r3, 8003b9c <_free_r+0x50>
 8003b98:	42a3      	cmp	r3, r4
 8003b9a:	d9fa      	bls.n	8003b92 <_free_r+0x46>
 8003b9c:	6811      	ldr	r1, [r2, #0]
 8003b9e:	1855      	adds	r5, r2, r1
 8003ba0:	42a5      	cmp	r5, r4
 8003ba2:	d10b      	bne.n	8003bbc <_free_r+0x70>
 8003ba4:	6824      	ldr	r4, [r4, #0]
 8003ba6:	4421      	add	r1, r4
 8003ba8:	1854      	adds	r4, r2, r1
 8003baa:	42a3      	cmp	r3, r4
 8003bac:	6011      	str	r1, [r2, #0]
 8003bae:	d1e0      	bne.n	8003b72 <_free_r+0x26>
 8003bb0:	681c      	ldr	r4, [r3, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	6053      	str	r3, [r2, #4]
 8003bb6:	440c      	add	r4, r1
 8003bb8:	6014      	str	r4, [r2, #0]
 8003bba:	e7da      	b.n	8003b72 <_free_r+0x26>
 8003bbc:	d902      	bls.n	8003bc4 <_free_r+0x78>
 8003bbe:	230c      	movs	r3, #12
 8003bc0:	6003      	str	r3, [r0, #0]
 8003bc2:	e7d6      	b.n	8003b72 <_free_r+0x26>
 8003bc4:	6825      	ldr	r5, [r4, #0]
 8003bc6:	1961      	adds	r1, r4, r5
 8003bc8:	428b      	cmp	r3, r1
 8003bca:	bf04      	itt	eq
 8003bcc:	6819      	ldreq	r1, [r3, #0]
 8003bce:	685b      	ldreq	r3, [r3, #4]
 8003bd0:	6063      	str	r3, [r4, #4]
 8003bd2:	bf04      	itt	eq
 8003bd4:	1949      	addeq	r1, r1, r5
 8003bd6:	6021      	streq	r1, [r4, #0]
 8003bd8:	6054      	str	r4, [r2, #4]
 8003bda:	e7ca      	b.n	8003b72 <_free_r+0x26>
 8003bdc:	b003      	add	sp, #12
 8003bde:	bd30      	pop	{r4, r5, pc}
 8003be0:	20000334 	.word	0x20000334

08003be4 <malloc>:
 8003be4:	4b02      	ldr	r3, [pc, #8]	; (8003bf0 <malloc+0xc>)
 8003be6:	4601      	mov	r1, r0
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	f000 b823 	b.w	8003c34 <_malloc_r>
 8003bee:	bf00      	nop
 8003bf0:	2000005c 	.word	0x2000005c

08003bf4 <sbrk_aligned>:
 8003bf4:	b570      	push	{r4, r5, r6, lr}
 8003bf6:	4e0e      	ldr	r6, [pc, #56]	; (8003c30 <sbrk_aligned+0x3c>)
 8003bf8:	460c      	mov	r4, r1
 8003bfa:	6831      	ldr	r1, [r6, #0]
 8003bfc:	4605      	mov	r5, r0
 8003bfe:	b911      	cbnz	r1, 8003c06 <sbrk_aligned+0x12>
 8003c00:	f000 fde8 	bl	80047d4 <_sbrk_r>
 8003c04:	6030      	str	r0, [r6, #0]
 8003c06:	4621      	mov	r1, r4
 8003c08:	4628      	mov	r0, r5
 8003c0a:	f000 fde3 	bl	80047d4 <_sbrk_r>
 8003c0e:	1c43      	adds	r3, r0, #1
 8003c10:	d00a      	beq.n	8003c28 <sbrk_aligned+0x34>
 8003c12:	1cc4      	adds	r4, r0, #3
 8003c14:	f024 0403 	bic.w	r4, r4, #3
 8003c18:	42a0      	cmp	r0, r4
 8003c1a:	d007      	beq.n	8003c2c <sbrk_aligned+0x38>
 8003c1c:	1a21      	subs	r1, r4, r0
 8003c1e:	4628      	mov	r0, r5
 8003c20:	f000 fdd8 	bl	80047d4 <_sbrk_r>
 8003c24:	3001      	adds	r0, #1
 8003c26:	d101      	bne.n	8003c2c <sbrk_aligned+0x38>
 8003c28:	f04f 34ff 	mov.w	r4, #4294967295
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	bd70      	pop	{r4, r5, r6, pc}
 8003c30:	20000338 	.word	0x20000338

08003c34 <_malloc_r>:
 8003c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c38:	1ccd      	adds	r5, r1, #3
 8003c3a:	f025 0503 	bic.w	r5, r5, #3
 8003c3e:	3508      	adds	r5, #8
 8003c40:	2d0c      	cmp	r5, #12
 8003c42:	bf38      	it	cc
 8003c44:	250c      	movcc	r5, #12
 8003c46:	2d00      	cmp	r5, #0
 8003c48:	4607      	mov	r7, r0
 8003c4a:	db01      	blt.n	8003c50 <_malloc_r+0x1c>
 8003c4c:	42a9      	cmp	r1, r5
 8003c4e:	d905      	bls.n	8003c5c <_malloc_r+0x28>
 8003c50:	230c      	movs	r3, #12
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	2600      	movs	r6, #0
 8003c56:	4630      	mov	r0, r6
 8003c58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003d30 <_malloc_r+0xfc>
 8003c60:	f000 f868 	bl	8003d34 <__malloc_lock>
 8003c64:	f8d8 3000 	ldr.w	r3, [r8]
 8003c68:	461c      	mov	r4, r3
 8003c6a:	bb5c      	cbnz	r4, 8003cc4 <_malloc_r+0x90>
 8003c6c:	4629      	mov	r1, r5
 8003c6e:	4638      	mov	r0, r7
 8003c70:	f7ff ffc0 	bl	8003bf4 <sbrk_aligned>
 8003c74:	1c43      	adds	r3, r0, #1
 8003c76:	4604      	mov	r4, r0
 8003c78:	d155      	bne.n	8003d26 <_malloc_r+0xf2>
 8003c7a:	f8d8 4000 	ldr.w	r4, [r8]
 8003c7e:	4626      	mov	r6, r4
 8003c80:	2e00      	cmp	r6, #0
 8003c82:	d145      	bne.n	8003d10 <_malloc_r+0xdc>
 8003c84:	2c00      	cmp	r4, #0
 8003c86:	d048      	beq.n	8003d1a <_malloc_r+0xe6>
 8003c88:	6823      	ldr	r3, [r4, #0]
 8003c8a:	4631      	mov	r1, r6
 8003c8c:	4638      	mov	r0, r7
 8003c8e:	eb04 0903 	add.w	r9, r4, r3
 8003c92:	f000 fd9f 	bl	80047d4 <_sbrk_r>
 8003c96:	4581      	cmp	r9, r0
 8003c98:	d13f      	bne.n	8003d1a <_malloc_r+0xe6>
 8003c9a:	6821      	ldr	r1, [r4, #0]
 8003c9c:	1a6d      	subs	r5, r5, r1
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	4638      	mov	r0, r7
 8003ca2:	f7ff ffa7 	bl	8003bf4 <sbrk_aligned>
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	d037      	beq.n	8003d1a <_malloc_r+0xe6>
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	442b      	add	r3, r5
 8003cae:	6023      	str	r3, [r4, #0]
 8003cb0:	f8d8 3000 	ldr.w	r3, [r8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d038      	beq.n	8003d2a <_malloc_r+0xf6>
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	42a2      	cmp	r2, r4
 8003cbc:	d12b      	bne.n	8003d16 <_malloc_r+0xe2>
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	e00f      	b.n	8003ce4 <_malloc_r+0xb0>
 8003cc4:	6822      	ldr	r2, [r4, #0]
 8003cc6:	1b52      	subs	r2, r2, r5
 8003cc8:	d41f      	bmi.n	8003d0a <_malloc_r+0xd6>
 8003cca:	2a0b      	cmp	r2, #11
 8003ccc:	d917      	bls.n	8003cfe <_malloc_r+0xca>
 8003cce:	1961      	adds	r1, r4, r5
 8003cd0:	42a3      	cmp	r3, r4
 8003cd2:	6025      	str	r5, [r4, #0]
 8003cd4:	bf18      	it	ne
 8003cd6:	6059      	strne	r1, [r3, #4]
 8003cd8:	6863      	ldr	r3, [r4, #4]
 8003cda:	bf08      	it	eq
 8003cdc:	f8c8 1000 	streq.w	r1, [r8]
 8003ce0:	5162      	str	r2, [r4, r5]
 8003ce2:	604b      	str	r3, [r1, #4]
 8003ce4:	4638      	mov	r0, r7
 8003ce6:	f104 060b 	add.w	r6, r4, #11
 8003cea:	f000 f829 	bl	8003d40 <__malloc_unlock>
 8003cee:	f026 0607 	bic.w	r6, r6, #7
 8003cf2:	1d23      	adds	r3, r4, #4
 8003cf4:	1af2      	subs	r2, r6, r3
 8003cf6:	d0ae      	beq.n	8003c56 <_malloc_r+0x22>
 8003cf8:	1b9b      	subs	r3, r3, r6
 8003cfa:	50a3      	str	r3, [r4, r2]
 8003cfc:	e7ab      	b.n	8003c56 <_malloc_r+0x22>
 8003cfe:	42a3      	cmp	r3, r4
 8003d00:	6862      	ldr	r2, [r4, #4]
 8003d02:	d1dd      	bne.n	8003cc0 <_malloc_r+0x8c>
 8003d04:	f8c8 2000 	str.w	r2, [r8]
 8003d08:	e7ec      	b.n	8003ce4 <_malloc_r+0xb0>
 8003d0a:	4623      	mov	r3, r4
 8003d0c:	6864      	ldr	r4, [r4, #4]
 8003d0e:	e7ac      	b.n	8003c6a <_malloc_r+0x36>
 8003d10:	4634      	mov	r4, r6
 8003d12:	6876      	ldr	r6, [r6, #4]
 8003d14:	e7b4      	b.n	8003c80 <_malloc_r+0x4c>
 8003d16:	4613      	mov	r3, r2
 8003d18:	e7cc      	b.n	8003cb4 <_malloc_r+0x80>
 8003d1a:	230c      	movs	r3, #12
 8003d1c:	603b      	str	r3, [r7, #0]
 8003d1e:	4638      	mov	r0, r7
 8003d20:	f000 f80e 	bl	8003d40 <__malloc_unlock>
 8003d24:	e797      	b.n	8003c56 <_malloc_r+0x22>
 8003d26:	6025      	str	r5, [r4, #0]
 8003d28:	e7dc      	b.n	8003ce4 <_malloc_r+0xb0>
 8003d2a:	605b      	str	r3, [r3, #4]
 8003d2c:	deff      	udf	#255	; 0xff
 8003d2e:	bf00      	nop
 8003d30:	20000334 	.word	0x20000334

08003d34 <__malloc_lock>:
 8003d34:	4801      	ldr	r0, [pc, #4]	; (8003d3c <__malloc_lock+0x8>)
 8003d36:	f7ff b88a 	b.w	8002e4e <__retarget_lock_acquire_recursive>
 8003d3a:	bf00      	nop
 8003d3c:	20000330 	.word	0x20000330

08003d40 <__malloc_unlock>:
 8003d40:	4801      	ldr	r0, [pc, #4]	; (8003d48 <__malloc_unlock+0x8>)
 8003d42:	f7ff b885 	b.w	8002e50 <__retarget_lock_release_recursive>
 8003d46:	bf00      	nop
 8003d48:	20000330 	.word	0x20000330

08003d4c <_Balloc>:
 8003d4c:	b570      	push	{r4, r5, r6, lr}
 8003d4e:	69c6      	ldr	r6, [r0, #28]
 8003d50:	4604      	mov	r4, r0
 8003d52:	460d      	mov	r5, r1
 8003d54:	b976      	cbnz	r6, 8003d74 <_Balloc+0x28>
 8003d56:	2010      	movs	r0, #16
 8003d58:	f7ff ff44 	bl	8003be4 <malloc>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	61e0      	str	r0, [r4, #28]
 8003d60:	b920      	cbnz	r0, 8003d6c <_Balloc+0x20>
 8003d62:	4b18      	ldr	r3, [pc, #96]	; (8003dc4 <_Balloc+0x78>)
 8003d64:	4818      	ldr	r0, [pc, #96]	; (8003dc8 <_Balloc+0x7c>)
 8003d66:	216b      	movs	r1, #107	; 0x6b
 8003d68:	f000 fd52 	bl	8004810 <__assert_func>
 8003d6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003d70:	6006      	str	r6, [r0, #0]
 8003d72:	60c6      	str	r6, [r0, #12]
 8003d74:	69e6      	ldr	r6, [r4, #28]
 8003d76:	68f3      	ldr	r3, [r6, #12]
 8003d78:	b183      	cbz	r3, 8003d9c <_Balloc+0x50>
 8003d7a:	69e3      	ldr	r3, [r4, #28]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003d82:	b9b8      	cbnz	r0, 8003db4 <_Balloc+0x68>
 8003d84:	2101      	movs	r1, #1
 8003d86:	fa01 f605 	lsl.w	r6, r1, r5
 8003d8a:	1d72      	adds	r2, r6, #5
 8003d8c:	0092      	lsls	r2, r2, #2
 8003d8e:	4620      	mov	r0, r4
 8003d90:	f000 fd5c 	bl	800484c <_calloc_r>
 8003d94:	b160      	cbz	r0, 8003db0 <_Balloc+0x64>
 8003d96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003d9a:	e00e      	b.n	8003dba <_Balloc+0x6e>
 8003d9c:	2221      	movs	r2, #33	; 0x21
 8003d9e:	2104      	movs	r1, #4
 8003da0:	4620      	mov	r0, r4
 8003da2:	f000 fd53 	bl	800484c <_calloc_r>
 8003da6:	69e3      	ldr	r3, [r4, #28]
 8003da8:	60f0      	str	r0, [r6, #12]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1e4      	bne.n	8003d7a <_Balloc+0x2e>
 8003db0:	2000      	movs	r0, #0
 8003db2:	bd70      	pop	{r4, r5, r6, pc}
 8003db4:	6802      	ldr	r2, [r0, #0]
 8003db6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003dc0:	e7f7      	b.n	8003db2 <_Balloc+0x66>
 8003dc2:	bf00      	nop
 8003dc4:	08004a28 	.word	0x08004a28
 8003dc8:	08004aa8 	.word	0x08004aa8

08003dcc <_Bfree>:
 8003dcc:	b570      	push	{r4, r5, r6, lr}
 8003dce:	69c6      	ldr	r6, [r0, #28]
 8003dd0:	4605      	mov	r5, r0
 8003dd2:	460c      	mov	r4, r1
 8003dd4:	b976      	cbnz	r6, 8003df4 <_Bfree+0x28>
 8003dd6:	2010      	movs	r0, #16
 8003dd8:	f7ff ff04 	bl	8003be4 <malloc>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	61e8      	str	r0, [r5, #28]
 8003de0:	b920      	cbnz	r0, 8003dec <_Bfree+0x20>
 8003de2:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <_Bfree+0x3c>)
 8003de4:	4809      	ldr	r0, [pc, #36]	; (8003e0c <_Bfree+0x40>)
 8003de6:	218f      	movs	r1, #143	; 0x8f
 8003de8:	f000 fd12 	bl	8004810 <__assert_func>
 8003dec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003df0:	6006      	str	r6, [r0, #0]
 8003df2:	60c6      	str	r6, [r0, #12]
 8003df4:	b13c      	cbz	r4, 8003e06 <_Bfree+0x3a>
 8003df6:	69eb      	ldr	r3, [r5, #28]
 8003df8:	6862      	ldr	r2, [r4, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e00:	6021      	str	r1, [r4, #0]
 8003e02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003e06:	bd70      	pop	{r4, r5, r6, pc}
 8003e08:	08004a28 	.word	0x08004a28
 8003e0c:	08004aa8 	.word	0x08004aa8

08003e10 <__multadd>:
 8003e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e14:	690d      	ldr	r5, [r1, #16]
 8003e16:	4607      	mov	r7, r0
 8003e18:	460c      	mov	r4, r1
 8003e1a:	461e      	mov	r6, r3
 8003e1c:	f101 0c14 	add.w	ip, r1, #20
 8003e20:	2000      	movs	r0, #0
 8003e22:	f8dc 3000 	ldr.w	r3, [ip]
 8003e26:	b299      	uxth	r1, r3
 8003e28:	fb02 6101 	mla	r1, r2, r1, r6
 8003e2c:	0c1e      	lsrs	r6, r3, #16
 8003e2e:	0c0b      	lsrs	r3, r1, #16
 8003e30:	fb02 3306 	mla	r3, r2, r6, r3
 8003e34:	b289      	uxth	r1, r1
 8003e36:	3001      	adds	r0, #1
 8003e38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003e3c:	4285      	cmp	r5, r0
 8003e3e:	f84c 1b04 	str.w	r1, [ip], #4
 8003e42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003e46:	dcec      	bgt.n	8003e22 <__multadd+0x12>
 8003e48:	b30e      	cbz	r6, 8003e8e <__multadd+0x7e>
 8003e4a:	68a3      	ldr	r3, [r4, #8]
 8003e4c:	42ab      	cmp	r3, r5
 8003e4e:	dc19      	bgt.n	8003e84 <__multadd+0x74>
 8003e50:	6861      	ldr	r1, [r4, #4]
 8003e52:	4638      	mov	r0, r7
 8003e54:	3101      	adds	r1, #1
 8003e56:	f7ff ff79 	bl	8003d4c <_Balloc>
 8003e5a:	4680      	mov	r8, r0
 8003e5c:	b928      	cbnz	r0, 8003e6a <__multadd+0x5a>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	4b0c      	ldr	r3, [pc, #48]	; (8003e94 <__multadd+0x84>)
 8003e62:	480d      	ldr	r0, [pc, #52]	; (8003e98 <__multadd+0x88>)
 8003e64:	21ba      	movs	r1, #186	; 0xba
 8003e66:	f000 fcd3 	bl	8004810 <__assert_func>
 8003e6a:	6922      	ldr	r2, [r4, #16]
 8003e6c:	3202      	adds	r2, #2
 8003e6e:	f104 010c 	add.w	r1, r4, #12
 8003e72:	0092      	lsls	r2, r2, #2
 8003e74:	300c      	adds	r0, #12
 8003e76:	f000 fcbd 	bl	80047f4 <memcpy>
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	4638      	mov	r0, r7
 8003e7e:	f7ff ffa5 	bl	8003dcc <_Bfree>
 8003e82:	4644      	mov	r4, r8
 8003e84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003e88:	3501      	adds	r5, #1
 8003e8a:	615e      	str	r6, [r3, #20]
 8003e8c:	6125      	str	r5, [r4, #16]
 8003e8e:	4620      	mov	r0, r4
 8003e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e94:	08004a97 	.word	0x08004a97
 8003e98:	08004aa8 	.word	0x08004aa8

08003e9c <__hi0bits>:
 8003e9c:	0c03      	lsrs	r3, r0, #16
 8003e9e:	041b      	lsls	r3, r3, #16
 8003ea0:	b9d3      	cbnz	r3, 8003ed8 <__hi0bits+0x3c>
 8003ea2:	0400      	lsls	r0, r0, #16
 8003ea4:	2310      	movs	r3, #16
 8003ea6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003eaa:	bf04      	itt	eq
 8003eac:	0200      	lsleq	r0, r0, #8
 8003eae:	3308      	addeq	r3, #8
 8003eb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003eb4:	bf04      	itt	eq
 8003eb6:	0100      	lsleq	r0, r0, #4
 8003eb8:	3304      	addeq	r3, #4
 8003eba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8003ebe:	bf04      	itt	eq
 8003ec0:	0080      	lsleq	r0, r0, #2
 8003ec2:	3302      	addeq	r3, #2
 8003ec4:	2800      	cmp	r0, #0
 8003ec6:	db05      	blt.n	8003ed4 <__hi0bits+0x38>
 8003ec8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003ecc:	f103 0301 	add.w	r3, r3, #1
 8003ed0:	bf08      	it	eq
 8003ed2:	2320      	moveq	r3, #32
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	4770      	bx	lr
 8003ed8:	2300      	movs	r3, #0
 8003eda:	e7e4      	b.n	8003ea6 <__hi0bits+0xa>

08003edc <__lo0bits>:
 8003edc:	6803      	ldr	r3, [r0, #0]
 8003ede:	f013 0207 	ands.w	r2, r3, #7
 8003ee2:	d00c      	beq.n	8003efe <__lo0bits+0x22>
 8003ee4:	07d9      	lsls	r1, r3, #31
 8003ee6:	d422      	bmi.n	8003f2e <__lo0bits+0x52>
 8003ee8:	079a      	lsls	r2, r3, #30
 8003eea:	bf49      	itett	mi
 8003eec:	085b      	lsrmi	r3, r3, #1
 8003eee:	089b      	lsrpl	r3, r3, #2
 8003ef0:	6003      	strmi	r3, [r0, #0]
 8003ef2:	2201      	movmi	r2, #1
 8003ef4:	bf5c      	itt	pl
 8003ef6:	6003      	strpl	r3, [r0, #0]
 8003ef8:	2202      	movpl	r2, #2
 8003efa:	4610      	mov	r0, r2
 8003efc:	4770      	bx	lr
 8003efe:	b299      	uxth	r1, r3
 8003f00:	b909      	cbnz	r1, 8003f06 <__lo0bits+0x2a>
 8003f02:	0c1b      	lsrs	r3, r3, #16
 8003f04:	2210      	movs	r2, #16
 8003f06:	b2d9      	uxtb	r1, r3
 8003f08:	b909      	cbnz	r1, 8003f0e <__lo0bits+0x32>
 8003f0a:	3208      	adds	r2, #8
 8003f0c:	0a1b      	lsrs	r3, r3, #8
 8003f0e:	0719      	lsls	r1, r3, #28
 8003f10:	bf04      	itt	eq
 8003f12:	091b      	lsreq	r3, r3, #4
 8003f14:	3204      	addeq	r2, #4
 8003f16:	0799      	lsls	r1, r3, #30
 8003f18:	bf04      	itt	eq
 8003f1a:	089b      	lsreq	r3, r3, #2
 8003f1c:	3202      	addeq	r2, #2
 8003f1e:	07d9      	lsls	r1, r3, #31
 8003f20:	d403      	bmi.n	8003f2a <__lo0bits+0x4e>
 8003f22:	085b      	lsrs	r3, r3, #1
 8003f24:	f102 0201 	add.w	r2, r2, #1
 8003f28:	d003      	beq.n	8003f32 <__lo0bits+0x56>
 8003f2a:	6003      	str	r3, [r0, #0]
 8003f2c:	e7e5      	b.n	8003efa <__lo0bits+0x1e>
 8003f2e:	2200      	movs	r2, #0
 8003f30:	e7e3      	b.n	8003efa <__lo0bits+0x1e>
 8003f32:	2220      	movs	r2, #32
 8003f34:	e7e1      	b.n	8003efa <__lo0bits+0x1e>
	...

08003f38 <__i2b>:
 8003f38:	b510      	push	{r4, lr}
 8003f3a:	460c      	mov	r4, r1
 8003f3c:	2101      	movs	r1, #1
 8003f3e:	f7ff ff05 	bl	8003d4c <_Balloc>
 8003f42:	4602      	mov	r2, r0
 8003f44:	b928      	cbnz	r0, 8003f52 <__i2b+0x1a>
 8003f46:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <__i2b+0x24>)
 8003f48:	4805      	ldr	r0, [pc, #20]	; (8003f60 <__i2b+0x28>)
 8003f4a:	f240 1145 	movw	r1, #325	; 0x145
 8003f4e:	f000 fc5f 	bl	8004810 <__assert_func>
 8003f52:	2301      	movs	r3, #1
 8003f54:	6144      	str	r4, [r0, #20]
 8003f56:	6103      	str	r3, [r0, #16]
 8003f58:	bd10      	pop	{r4, pc}
 8003f5a:	bf00      	nop
 8003f5c:	08004a97 	.word	0x08004a97
 8003f60:	08004aa8 	.word	0x08004aa8

08003f64 <__multiply>:
 8003f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f68:	4691      	mov	r9, r2
 8003f6a:	690a      	ldr	r2, [r1, #16]
 8003f6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	bfb8      	it	lt
 8003f74:	460b      	movlt	r3, r1
 8003f76:	460c      	mov	r4, r1
 8003f78:	bfbc      	itt	lt
 8003f7a:	464c      	movlt	r4, r9
 8003f7c:	4699      	movlt	r9, r3
 8003f7e:	6927      	ldr	r7, [r4, #16]
 8003f80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003f84:	68a3      	ldr	r3, [r4, #8]
 8003f86:	6861      	ldr	r1, [r4, #4]
 8003f88:	eb07 060a 	add.w	r6, r7, sl
 8003f8c:	42b3      	cmp	r3, r6
 8003f8e:	b085      	sub	sp, #20
 8003f90:	bfb8      	it	lt
 8003f92:	3101      	addlt	r1, #1
 8003f94:	f7ff feda 	bl	8003d4c <_Balloc>
 8003f98:	b930      	cbnz	r0, 8003fa8 <__multiply+0x44>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	4b44      	ldr	r3, [pc, #272]	; (80040b0 <__multiply+0x14c>)
 8003f9e:	4845      	ldr	r0, [pc, #276]	; (80040b4 <__multiply+0x150>)
 8003fa0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8003fa4:	f000 fc34 	bl	8004810 <__assert_func>
 8003fa8:	f100 0514 	add.w	r5, r0, #20
 8003fac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003fb0:	462b      	mov	r3, r5
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	4543      	cmp	r3, r8
 8003fb6:	d321      	bcc.n	8003ffc <__multiply+0x98>
 8003fb8:	f104 0314 	add.w	r3, r4, #20
 8003fbc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003fc0:	f109 0314 	add.w	r3, r9, #20
 8003fc4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003fc8:	9202      	str	r2, [sp, #8]
 8003fca:	1b3a      	subs	r2, r7, r4
 8003fcc:	3a15      	subs	r2, #21
 8003fce:	f022 0203 	bic.w	r2, r2, #3
 8003fd2:	3204      	adds	r2, #4
 8003fd4:	f104 0115 	add.w	r1, r4, #21
 8003fd8:	428f      	cmp	r7, r1
 8003fda:	bf38      	it	cc
 8003fdc:	2204      	movcc	r2, #4
 8003fde:	9201      	str	r2, [sp, #4]
 8003fe0:	9a02      	ldr	r2, [sp, #8]
 8003fe2:	9303      	str	r3, [sp, #12]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d80c      	bhi.n	8004002 <__multiply+0x9e>
 8003fe8:	2e00      	cmp	r6, #0
 8003fea:	dd03      	ble.n	8003ff4 <__multiply+0x90>
 8003fec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d05b      	beq.n	80040ac <__multiply+0x148>
 8003ff4:	6106      	str	r6, [r0, #16]
 8003ff6:	b005      	add	sp, #20
 8003ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ffc:	f843 2b04 	str.w	r2, [r3], #4
 8004000:	e7d8      	b.n	8003fb4 <__multiply+0x50>
 8004002:	f8b3 a000 	ldrh.w	sl, [r3]
 8004006:	f1ba 0f00 	cmp.w	sl, #0
 800400a:	d024      	beq.n	8004056 <__multiply+0xf2>
 800400c:	f104 0e14 	add.w	lr, r4, #20
 8004010:	46a9      	mov	r9, r5
 8004012:	f04f 0c00 	mov.w	ip, #0
 8004016:	f85e 2b04 	ldr.w	r2, [lr], #4
 800401a:	f8d9 1000 	ldr.w	r1, [r9]
 800401e:	fa1f fb82 	uxth.w	fp, r2
 8004022:	b289      	uxth	r1, r1
 8004024:	fb0a 110b 	mla	r1, sl, fp, r1
 8004028:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800402c:	f8d9 2000 	ldr.w	r2, [r9]
 8004030:	4461      	add	r1, ip
 8004032:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004036:	fb0a c20b 	mla	r2, sl, fp, ip
 800403a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800403e:	b289      	uxth	r1, r1
 8004040:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004044:	4577      	cmp	r7, lr
 8004046:	f849 1b04 	str.w	r1, [r9], #4
 800404a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800404e:	d8e2      	bhi.n	8004016 <__multiply+0xb2>
 8004050:	9a01      	ldr	r2, [sp, #4]
 8004052:	f845 c002 	str.w	ip, [r5, r2]
 8004056:	9a03      	ldr	r2, [sp, #12]
 8004058:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800405c:	3304      	adds	r3, #4
 800405e:	f1b9 0f00 	cmp.w	r9, #0
 8004062:	d021      	beq.n	80040a8 <__multiply+0x144>
 8004064:	6829      	ldr	r1, [r5, #0]
 8004066:	f104 0c14 	add.w	ip, r4, #20
 800406a:	46ae      	mov	lr, r5
 800406c:	f04f 0a00 	mov.w	sl, #0
 8004070:	f8bc b000 	ldrh.w	fp, [ip]
 8004074:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004078:	fb09 220b 	mla	r2, r9, fp, r2
 800407c:	4452      	add	r2, sl
 800407e:	b289      	uxth	r1, r1
 8004080:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004084:	f84e 1b04 	str.w	r1, [lr], #4
 8004088:	f85c 1b04 	ldr.w	r1, [ip], #4
 800408c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004090:	f8be 1000 	ldrh.w	r1, [lr]
 8004094:	fb09 110a 	mla	r1, r9, sl, r1
 8004098:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800409c:	4567      	cmp	r7, ip
 800409e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80040a2:	d8e5      	bhi.n	8004070 <__multiply+0x10c>
 80040a4:	9a01      	ldr	r2, [sp, #4]
 80040a6:	50a9      	str	r1, [r5, r2]
 80040a8:	3504      	adds	r5, #4
 80040aa:	e799      	b.n	8003fe0 <__multiply+0x7c>
 80040ac:	3e01      	subs	r6, #1
 80040ae:	e79b      	b.n	8003fe8 <__multiply+0x84>
 80040b0:	08004a97 	.word	0x08004a97
 80040b4:	08004aa8 	.word	0x08004aa8

080040b8 <__pow5mult>:
 80040b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040bc:	4615      	mov	r5, r2
 80040be:	f012 0203 	ands.w	r2, r2, #3
 80040c2:	4606      	mov	r6, r0
 80040c4:	460f      	mov	r7, r1
 80040c6:	d007      	beq.n	80040d8 <__pow5mult+0x20>
 80040c8:	4c25      	ldr	r4, [pc, #148]	; (8004160 <__pow5mult+0xa8>)
 80040ca:	3a01      	subs	r2, #1
 80040cc:	2300      	movs	r3, #0
 80040ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80040d2:	f7ff fe9d 	bl	8003e10 <__multadd>
 80040d6:	4607      	mov	r7, r0
 80040d8:	10ad      	asrs	r5, r5, #2
 80040da:	d03d      	beq.n	8004158 <__pow5mult+0xa0>
 80040dc:	69f4      	ldr	r4, [r6, #28]
 80040de:	b97c      	cbnz	r4, 8004100 <__pow5mult+0x48>
 80040e0:	2010      	movs	r0, #16
 80040e2:	f7ff fd7f 	bl	8003be4 <malloc>
 80040e6:	4602      	mov	r2, r0
 80040e8:	61f0      	str	r0, [r6, #28]
 80040ea:	b928      	cbnz	r0, 80040f8 <__pow5mult+0x40>
 80040ec:	4b1d      	ldr	r3, [pc, #116]	; (8004164 <__pow5mult+0xac>)
 80040ee:	481e      	ldr	r0, [pc, #120]	; (8004168 <__pow5mult+0xb0>)
 80040f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80040f4:	f000 fb8c 	bl	8004810 <__assert_func>
 80040f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80040fc:	6004      	str	r4, [r0, #0]
 80040fe:	60c4      	str	r4, [r0, #12]
 8004100:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8004104:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004108:	b94c      	cbnz	r4, 800411e <__pow5mult+0x66>
 800410a:	f240 2171 	movw	r1, #625	; 0x271
 800410e:	4630      	mov	r0, r6
 8004110:	f7ff ff12 	bl	8003f38 <__i2b>
 8004114:	2300      	movs	r3, #0
 8004116:	f8c8 0008 	str.w	r0, [r8, #8]
 800411a:	4604      	mov	r4, r0
 800411c:	6003      	str	r3, [r0, #0]
 800411e:	f04f 0900 	mov.w	r9, #0
 8004122:	07eb      	lsls	r3, r5, #31
 8004124:	d50a      	bpl.n	800413c <__pow5mult+0x84>
 8004126:	4639      	mov	r1, r7
 8004128:	4622      	mov	r2, r4
 800412a:	4630      	mov	r0, r6
 800412c:	f7ff ff1a 	bl	8003f64 <__multiply>
 8004130:	4639      	mov	r1, r7
 8004132:	4680      	mov	r8, r0
 8004134:	4630      	mov	r0, r6
 8004136:	f7ff fe49 	bl	8003dcc <_Bfree>
 800413a:	4647      	mov	r7, r8
 800413c:	106d      	asrs	r5, r5, #1
 800413e:	d00b      	beq.n	8004158 <__pow5mult+0xa0>
 8004140:	6820      	ldr	r0, [r4, #0]
 8004142:	b938      	cbnz	r0, 8004154 <__pow5mult+0x9c>
 8004144:	4622      	mov	r2, r4
 8004146:	4621      	mov	r1, r4
 8004148:	4630      	mov	r0, r6
 800414a:	f7ff ff0b 	bl	8003f64 <__multiply>
 800414e:	6020      	str	r0, [r4, #0]
 8004150:	f8c0 9000 	str.w	r9, [r0]
 8004154:	4604      	mov	r4, r0
 8004156:	e7e4      	b.n	8004122 <__pow5mult+0x6a>
 8004158:	4638      	mov	r0, r7
 800415a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800415e:	bf00      	nop
 8004160:	08004bf8 	.word	0x08004bf8
 8004164:	08004a28 	.word	0x08004a28
 8004168:	08004aa8 	.word	0x08004aa8

0800416c <__lshift>:
 800416c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004170:	460c      	mov	r4, r1
 8004172:	6849      	ldr	r1, [r1, #4]
 8004174:	6923      	ldr	r3, [r4, #16]
 8004176:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800417a:	68a3      	ldr	r3, [r4, #8]
 800417c:	4607      	mov	r7, r0
 800417e:	4691      	mov	r9, r2
 8004180:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004184:	f108 0601 	add.w	r6, r8, #1
 8004188:	42b3      	cmp	r3, r6
 800418a:	db0b      	blt.n	80041a4 <__lshift+0x38>
 800418c:	4638      	mov	r0, r7
 800418e:	f7ff fddd 	bl	8003d4c <_Balloc>
 8004192:	4605      	mov	r5, r0
 8004194:	b948      	cbnz	r0, 80041aa <__lshift+0x3e>
 8004196:	4602      	mov	r2, r0
 8004198:	4b28      	ldr	r3, [pc, #160]	; (800423c <__lshift+0xd0>)
 800419a:	4829      	ldr	r0, [pc, #164]	; (8004240 <__lshift+0xd4>)
 800419c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80041a0:	f000 fb36 	bl	8004810 <__assert_func>
 80041a4:	3101      	adds	r1, #1
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	e7ee      	b.n	8004188 <__lshift+0x1c>
 80041aa:	2300      	movs	r3, #0
 80041ac:	f100 0114 	add.w	r1, r0, #20
 80041b0:	f100 0210 	add.w	r2, r0, #16
 80041b4:	4618      	mov	r0, r3
 80041b6:	4553      	cmp	r3, sl
 80041b8:	db33      	blt.n	8004222 <__lshift+0xb6>
 80041ba:	6920      	ldr	r0, [r4, #16]
 80041bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80041c0:	f104 0314 	add.w	r3, r4, #20
 80041c4:	f019 091f 	ands.w	r9, r9, #31
 80041c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80041cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80041d0:	d02b      	beq.n	800422a <__lshift+0xbe>
 80041d2:	f1c9 0e20 	rsb	lr, r9, #32
 80041d6:	468a      	mov	sl, r1
 80041d8:	2200      	movs	r2, #0
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	fa00 f009 	lsl.w	r0, r0, r9
 80041e0:	4310      	orrs	r0, r2
 80041e2:	f84a 0b04 	str.w	r0, [sl], #4
 80041e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80041ea:	459c      	cmp	ip, r3
 80041ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80041f0:	d8f3      	bhi.n	80041da <__lshift+0x6e>
 80041f2:	ebac 0304 	sub.w	r3, ip, r4
 80041f6:	3b15      	subs	r3, #21
 80041f8:	f023 0303 	bic.w	r3, r3, #3
 80041fc:	3304      	adds	r3, #4
 80041fe:	f104 0015 	add.w	r0, r4, #21
 8004202:	4584      	cmp	ip, r0
 8004204:	bf38      	it	cc
 8004206:	2304      	movcc	r3, #4
 8004208:	50ca      	str	r2, [r1, r3]
 800420a:	b10a      	cbz	r2, 8004210 <__lshift+0xa4>
 800420c:	f108 0602 	add.w	r6, r8, #2
 8004210:	3e01      	subs	r6, #1
 8004212:	4638      	mov	r0, r7
 8004214:	612e      	str	r6, [r5, #16]
 8004216:	4621      	mov	r1, r4
 8004218:	f7ff fdd8 	bl	8003dcc <_Bfree>
 800421c:	4628      	mov	r0, r5
 800421e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004222:	f842 0f04 	str.w	r0, [r2, #4]!
 8004226:	3301      	adds	r3, #1
 8004228:	e7c5      	b.n	80041b6 <__lshift+0x4a>
 800422a:	3904      	subs	r1, #4
 800422c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004230:	f841 2f04 	str.w	r2, [r1, #4]!
 8004234:	459c      	cmp	ip, r3
 8004236:	d8f9      	bhi.n	800422c <__lshift+0xc0>
 8004238:	e7ea      	b.n	8004210 <__lshift+0xa4>
 800423a:	bf00      	nop
 800423c:	08004a97 	.word	0x08004a97
 8004240:	08004aa8 	.word	0x08004aa8

08004244 <__mcmp>:
 8004244:	b530      	push	{r4, r5, lr}
 8004246:	6902      	ldr	r2, [r0, #16]
 8004248:	690c      	ldr	r4, [r1, #16]
 800424a:	1b12      	subs	r2, r2, r4
 800424c:	d10e      	bne.n	800426c <__mcmp+0x28>
 800424e:	f100 0314 	add.w	r3, r0, #20
 8004252:	3114      	adds	r1, #20
 8004254:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004258:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800425c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004260:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004264:	42a5      	cmp	r5, r4
 8004266:	d003      	beq.n	8004270 <__mcmp+0x2c>
 8004268:	d305      	bcc.n	8004276 <__mcmp+0x32>
 800426a:	2201      	movs	r2, #1
 800426c:	4610      	mov	r0, r2
 800426e:	bd30      	pop	{r4, r5, pc}
 8004270:	4283      	cmp	r3, r0
 8004272:	d3f3      	bcc.n	800425c <__mcmp+0x18>
 8004274:	e7fa      	b.n	800426c <__mcmp+0x28>
 8004276:	f04f 32ff 	mov.w	r2, #4294967295
 800427a:	e7f7      	b.n	800426c <__mcmp+0x28>

0800427c <__mdiff>:
 800427c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004280:	460c      	mov	r4, r1
 8004282:	4606      	mov	r6, r0
 8004284:	4611      	mov	r1, r2
 8004286:	4620      	mov	r0, r4
 8004288:	4690      	mov	r8, r2
 800428a:	f7ff ffdb 	bl	8004244 <__mcmp>
 800428e:	1e05      	subs	r5, r0, #0
 8004290:	d110      	bne.n	80042b4 <__mdiff+0x38>
 8004292:	4629      	mov	r1, r5
 8004294:	4630      	mov	r0, r6
 8004296:	f7ff fd59 	bl	8003d4c <_Balloc>
 800429a:	b930      	cbnz	r0, 80042aa <__mdiff+0x2e>
 800429c:	4b3a      	ldr	r3, [pc, #232]	; (8004388 <__mdiff+0x10c>)
 800429e:	4602      	mov	r2, r0
 80042a0:	f240 2137 	movw	r1, #567	; 0x237
 80042a4:	4839      	ldr	r0, [pc, #228]	; (800438c <__mdiff+0x110>)
 80042a6:	f000 fab3 	bl	8004810 <__assert_func>
 80042aa:	2301      	movs	r3, #1
 80042ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80042b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042b4:	bfa4      	itt	ge
 80042b6:	4643      	movge	r3, r8
 80042b8:	46a0      	movge	r8, r4
 80042ba:	4630      	mov	r0, r6
 80042bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80042c0:	bfa6      	itte	ge
 80042c2:	461c      	movge	r4, r3
 80042c4:	2500      	movge	r5, #0
 80042c6:	2501      	movlt	r5, #1
 80042c8:	f7ff fd40 	bl	8003d4c <_Balloc>
 80042cc:	b920      	cbnz	r0, 80042d8 <__mdiff+0x5c>
 80042ce:	4b2e      	ldr	r3, [pc, #184]	; (8004388 <__mdiff+0x10c>)
 80042d0:	4602      	mov	r2, r0
 80042d2:	f240 2145 	movw	r1, #581	; 0x245
 80042d6:	e7e5      	b.n	80042a4 <__mdiff+0x28>
 80042d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80042dc:	6926      	ldr	r6, [r4, #16]
 80042de:	60c5      	str	r5, [r0, #12]
 80042e0:	f104 0914 	add.w	r9, r4, #20
 80042e4:	f108 0514 	add.w	r5, r8, #20
 80042e8:	f100 0e14 	add.w	lr, r0, #20
 80042ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80042f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80042f4:	f108 0210 	add.w	r2, r8, #16
 80042f8:	46f2      	mov	sl, lr
 80042fa:	2100      	movs	r1, #0
 80042fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8004300:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004304:	fa11 f88b 	uxtah	r8, r1, fp
 8004308:	b299      	uxth	r1, r3
 800430a:	0c1b      	lsrs	r3, r3, #16
 800430c:	eba8 0801 	sub.w	r8, r8, r1
 8004310:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004314:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8004318:	fa1f f888 	uxth.w	r8, r8
 800431c:	1419      	asrs	r1, r3, #16
 800431e:	454e      	cmp	r6, r9
 8004320:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004324:	f84a 3b04 	str.w	r3, [sl], #4
 8004328:	d8e8      	bhi.n	80042fc <__mdiff+0x80>
 800432a:	1b33      	subs	r3, r6, r4
 800432c:	3b15      	subs	r3, #21
 800432e:	f023 0303 	bic.w	r3, r3, #3
 8004332:	3304      	adds	r3, #4
 8004334:	3415      	adds	r4, #21
 8004336:	42a6      	cmp	r6, r4
 8004338:	bf38      	it	cc
 800433a:	2304      	movcc	r3, #4
 800433c:	441d      	add	r5, r3
 800433e:	4473      	add	r3, lr
 8004340:	469e      	mov	lr, r3
 8004342:	462e      	mov	r6, r5
 8004344:	4566      	cmp	r6, ip
 8004346:	d30e      	bcc.n	8004366 <__mdiff+0xea>
 8004348:	f10c 0203 	add.w	r2, ip, #3
 800434c:	1b52      	subs	r2, r2, r5
 800434e:	f022 0203 	bic.w	r2, r2, #3
 8004352:	3d03      	subs	r5, #3
 8004354:	45ac      	cmp	ip, r5
 8004356:	bf38      	it	cc
 8004358:	2200      	movcc	r2, #0
 800435a:	4413      	add	r3, r2
 800435c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004360:	b17a      	cbz	r2, 8004382 <__mdiff+0x106>
 8004362:	6107      	str	r7, [r0, #16]
 8004364:	e7a4      	b.n	80042b0 <__mdiff+0x34>
 8004366:	f856 8b04 	ldr.w	r8, [r6], #4
 800436a:	fa11 f288 	uxtah	r2, r1, r8
 800436e:	1414      	asrs	r4, r2, #16
 8004370:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004374:	b292      	uxth	r2, r2
 8004376:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800437a:	f84e 2b04 	str.w	r2, [lr], #4
 800437e:	1421      	asrs	r1, r4, #16
 8004380:	e7e0      	b.n	8004344 <__mdiff+0xc8>
 8004382:	3f01      	subs	r7, #1
 8004384:	e7ea      	b.n	800435c <__mdiff+0xe0>
 8004386:	bf00      	nop
 8004388:	08004a97 	.word	0x08004a97
 800438c:	08004aa8 	.word	0x08004aa8

08004390 <__d2b>:
 8004390:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004394:	460f      	mov	r7, r1
 8004396:	2101      	movs	r1, #1
 8004398:	ec59 8b10 	vmov	r8, r9, d0
 800439c:	4616      	mov	r6, r2
 800439e:	f7ff fcd5 	bl	8003d4c <_Balloc>
 80043a2:	4604      	mov	r4, r0
 80043a4:	b930      	cbnz	r0, 80043b4 <__d2b+0x24>
 80043a6:	4602      	mov	r2, r0
 80043a8:	4b24      	ldr	r3, [pc, #144]	; (800443c <__d2b+0xac>)
 80043aa:	4825      	ldr	r0, [pc, #148]	; (8004440 <__d2b+0xb0>)
 80043ac:	f240 310f 	movw	r1, #783	; 0x30f
 80043b0:	f000 fa2e 	bl	8004810 <__assert_func>
 80043b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80043b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80043bc:	bb2d      	cbnz	r5, 800440a <__d2b+0x7a>
 80043be:	9301      	str	r3, [sp, #4]
 80043c0:	f1b8 0300 	subs.w	r3, r8, #0
 80043c4:	d026      	beq.n	8004414 <__d2b+0x84>
 80043c6:	4668      	mov	r0, sp
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	f7ff fd87 	bl	8003edc <__lo0bits>
 80043ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80043d2:	b1e8      	cbz	r0, 8004410 <__d2b+0x80>
 80043d4:	f1c0 0320 	rsb	r3, r0, #32
 80043d8:	fa02 f303 	lsl.w	r3, r2, r3
 80043dc:	430b      	orrs	r3, r1
 80043de:	40c2      	lsrs	r2, r0
 80043e0:	6163      	str	r3, [r4, #20]
 80043e2:	9201      	str	r2, [sp, #4]
 80043e4:	9b01      	ldr	r3, [sp, #4]
 80043e6:	61a3      	str	r3, [r4, #24]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	bf14      	ite	ne
 80043ec:	2202      	movne	r2, #2
 80043ee:	2201      	moveq	r2, #1
 80043f0:	6122      	str	r2, [r4, #16]
 80043f2:	b1bd      	cbz	r5, 8004424 <__d2b+0x94>
 80043f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80043f8:	4405      	add	r5, r0
 80043fa:	603d      	str	r5, [r7, #0]
 80043fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004400:	6030      	str	r0, [r6, #0]
 8004402:	4620      	mov	r0, r4
 8004404:	b003      	add	sp, #12
 8004406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800440a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800440e:	e7d6      	b.n	80043be <__d2b+0x2e>
 8004410:	6161      	str	r1, [r4, #20]
 8004412:	e7e7      	b.n	80043e4 <__d2b+0x54>
 8004414:	a801      	add	r0, sp, #4
 8004416:	f7ff fd61 	bl	8003edc <__lo0bits>
 800441a:	9b01      	ldr	r3, [sp, #4]
 800441c:	6163      	str	r3, [r4, #20]
 800441e:	3020      	adds	r0, #32
 8004420:	2201      	movs	r2, #1
 8004422:	e7e5      	b.n	80043f0 <__d2b+0x60>
 8004424:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004428:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800442c:	6038      	str	r0, [r7, #0]
 800442e:	6918      	ldr	r0, [r3, #16]
 8004430:	f7ff fd34 	bl	8003e9c <__hi0bits>
 8004434:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004438:	e7e2      	b.n	8004400 <__d2b+0x70>
 800443a:	bf00      	nop
 800443c:	08004a97 	.word	0x08004a97
 8004440:	08004aa8 	.word	0x08004aa8

08004444 <__sfputc_r>:
 8004444:	6893      	ldr	r3, [r2, #8]
 8004446:	3b01      	subs	r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	b410      	push	{r4}
 800444c:	6093      	str	r3, [r2, #8]
 800444e:	da08      	bge.n	8004462 <__sfputc_r+0x1e>
 8004450:	6994      	ldr	r4, [r2, #24]
 8004452:	42a3      	cmp	r3, r4
 8004454:	db01      	blt.n	800445a <__sfputc_r+0x16>
 8004456:	290a      	cmp	r1, #10
 8004458:	d103      	bne.n	8004462 <__sfputc_r+0x1e>
 800445a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800445e:	f7fe bbe4 	b.w	8002c2a <__swbuf_r>
 8004462:	6813      	ldr	r3, [r2, #0]
 8004464:	1c58      	adds	r0, r3, #1
 8004466:	6010      	str	r0, [r2, #0]
 8004468:	7019      	strb	r1, [r3, #0]
 800446a:	4608      	mov	r0, r1
 800446c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004470:	4770      	bx	lr

08004472 <__sfputs_r>:
 8004472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004474:	4606      	mov	r6, r0
 8004476:	460f      	mov	r7, r1
 8004478:	4614      	mov	r4, r2
 800447a:	18d5      	adds	r5, r2, r3
 800447c:	42ac      	cmp	r4, r5
 800447e:	d101      	bne.n	8004484 <__sfputs_r+0x12>
 8004480:	2000      	movs	r0, #0
 8004482:	e007      	b.n	8004494 <__sfputs_r+0x22>
 8004484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004488:	463a      	mov	r2, r7
 800448a:	4630      	mov	r0, r6
 800448c:	f7ff ffda 	bl	8004444 <__sfputc_r>
 8004490:	1c43      	adds	r3, r0, #1
 8004492:	d1f3      	bne.n	800447c <__sfputs_r+0xa>
 8004494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004498 <_vfiprintf_r>:
 8004498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800449c:	460d      	mov	r5, r1
 800449e:	b09d      	sub	sp, #116	; 0x74
 80044a0:	4614      	mov	r4, r2
 80044a2:	4698      	mov	r8, r3
 80044a4:	4606      	mov	r6, r0
 80044a6:	b118      	cbz	r0, 80044b0 <_vfiprintf_r+0x18>
 80044a8:	6a03      	ldr	r3, [r0, #32]
 80044aa:	b90b      	cbnz	r3, 80044b0 <_vfiprintf_r+0x18>
 80044ac:	f7fe fb20 	bl	8002af0 <__sinit>
 80044b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044b2:	07d9      	lsls	r1, r3, #31
 80044b4:	d405      	bmi.n	80044c2 <_vfiprintf_r+0x2a>
 80044b6:	89ab      	ldrh	r3, [r5, #12]
 80044b8:	059a      	lsls	r2, r3, #22
 80044ba:	d402      	bmi.n	80044c2 <_vfiprintf_r+0x2a>
 80044bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044be:	f7fe fcc6 	bl	8002e4e <__retarget_lock_acquire_recursive>
 80044c2:	89ab      	ldrh	r3, [r5, #12]
 80044c4:	071b      	lsls	r3, r3, #28
 80044c6:	d501      	bpl.n	80044cc <_vfiprintf_r+0x34>
 80044c8:	692b      	ldr	r3, [r5, #16]
 80044ca:	b99b      	cbnz	r3, 80044f4 <_vfiprintf_r+0x5c>
 80044cc:	4629      	mov	r1, r5
 80044ce:	4630      	mov	r0, r6
 80044d0:	f7fe fbe8 	bl	8002ca4 <__swsetup_r>
 80044d4:	b170      	cbz	r0, 80044f4 <_vfiprintf_r+0x5c>
 80044d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80044d8:	07dc      	lsls	r4, r3, #31
 80044da:	d504      	bpl.n	80044e6 <_vfiprintf_r+0x4e>
 80044dc:	f04f 30ff 	mov.w	r0, #4294967295
 80044e0:	b01d      	add	sp, #116	; 0x74
 80044e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044e6:	89ab      	ldrh	r3, [r5, #12]
 80044e8:	0598      	lsls	r0, r3, #22
 80044ea:	d4f7      	bmi.n	80044dc <_vfiprintf_r+0x44>
 80044ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044ee:	f7fe fcaf 	bl	8002e50 <__retarget_lock_release_recursive>
 80044f2:	e7f3      	b.n	80044dc <_vfiprintf_r+0x44>
 80044f4:	2300      	movs	r3, #0
 80044f6:	9309      	str	r3, [sp, #36]	; 0x24
 80044f8:	2320      	movs	r3, #32
 80044fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004502:	2330      	movs	r3, #48	; 0x30
 8004504:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80046b8 <_vfiprintf_r+0x220>
 8004508:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800450c:	f04f 0901 	mov.w	r9, #1
 8004510:	4623      	mov	r3, r4
 8004512:	469a      	mov	sl, r3
 8004514:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004518:	b10a      	cbz	r2, 800451e <_vfiprintf_r+0x86>
 800451a:	2a25      	cmp	r2, #37	; 0x25
 800451c:	d1f9      	bne.n	8004512 <_vfiprintf_r+0x7a>
 800451e:	ebba 0b04 	subs.w	fp, sl, r4
 8004522:	d00b      	beq.n	800453c <_vfiprintf_r+0xa4>
 8004524:	465b      	mov	r3, fp
 8004526:	4622      	mov	r2, r4
 8004528:	4629      	mov	r1, r5
 800452a:	4630      	mov	r0, r6
 800452c:	f7ff ffa1 	bl	8004472 <__sfputs_r>
 8004530:	3001      	adds	r0, #1
 8004532:	f000 80a9 	beq.w	8004688 <_vfiprintf_r+0x1f0>
 8004536:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004538:	445a      	add	r2, fp
 800453a:	9209      	str	r2, [sp, #36]	; 0x24
 800453c:	f89a 3000 	ldrb.w	r3, [sl]
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 80a1 	beq.w	8004688 <_vfiprintf_r+0x1f0>
 8004546:	2300      	movs	r3, #0
 8004548:	f04f 32ff 	mov.w	r2, #4294967295
 800454c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004550:	f10a 0a01 	add.w	sl, sl, #1
 8004554:	9304      	str	r3, [sp, #16]
 8004556:	9307      	str	r3, [sp, #28]
 8004558:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800455c:	931a      	str	r3, [sp, #104]	; 0x68
 800455e:	4654      	mov	r4, sl
 8004560:	2205      	movs	r2, #5
 8004562:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004566:	4854      	ldr	r0, [pc, #336]	; (80046b8 <_vfiprintf_r+0x220>)
 8004568:	f7fb fe3a 	bl	80001e0 <memchr>
 800456c:	9a04      	ldr	r2, [sp, #16]
 800456e:	b9d8      	cbnz	r0, 80045a8 <_vfiprintf_r+0x110>
 8004570:	06d1      	lsls	r1, r2, #27
 8004572:	bf44      	itt	mi
 8004574:	2320      	movmi	r3, #32
 8004576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800457a:	0713      	lsls	r3, r2, #28
 800457c:	bf44      	itt	mi
 800457e:	232b      	movmi	r3, #43	; 0x2b
 8004580:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004584:	f89a 3000 	ldrb.w	r3, [sl]
 8004588:	2b2a      	cmp	r3, #42	; 0x2a
 800458a:	d015      	beq.n	80045b8 <_vfiprintf_r+0x120>
 800458c:	9a07      	ldr	r2, [sp, #28]
 800458e:	4654      	mov	r4, sl
 8004590:	2000      	movs	r0, #0
 8004592:	f04f 0c0a 	mov.w	ip, #10
 8004596:	4621      	mov	r1, r4
 8004598:	f811 3b01 	ldrb.w	r3, [r1], #1
 800459c:	3b30      	subs	r3, #48	; 0x30
 800459e:	2b09      	cmp	r3, #9
 80045a0:	d94d      	bls.n	800463e <_vfiprintf_r+0x1a6>
 80045a2:	b1b0      	cbz	r0, 80045d2 <_vfiprintf_r+0x13a>
 80045a4:	9207      	str	r2, [sp, #28]
 80045a6:	e014      	b.n	80045d2 <_vfiprintf_r+0x13a>
 80045a8:	eba0 0308 	sub.w	r3, r0, r8
 80045ac:	fa09 f303 	lsl.w	r3, r9, r3
 80045b0:	4313      	orrs	r3, r2
 80045b2:	9304      	str	r3, [sp, #16]
 80045b4:	46a2      	mov	sl, r4
 80045b6:	e7d2      	b.n	800455e <_vfiprintf_r+0xc6>
 80045b8:	9b03      	ldr	r3, [sp, #12]
 80045ba:	1d19      	adds	r1, r3, #4
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	9103      	str	r1, [sp, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	bfbb      	ittet	lt
 80045c4:	425b      	neglt	r3, r3
 80045c6:	f042 0202 	orrlt.w	r2, r2, #2
 80045ca:	9307      	strge	r3, [sp, #28]
 80045cc:	9307      	strlt	r3, [sp, #28]
 80045ce:	bfb8      	it	lt
 80045d0:	9204      	strlt	r2, [sp, #16]
 80045d2:	7823      	ldrb	r3, [r4, #0]
 80045d4:	2b2e      	cmp	r3, #46	; 0x2e
 80045d6:	d10c      	bne.n	80045f2 <_vfiprintf_r+0x15a>
 80045d8:	7863      	ldrb	r3, [r4, #1]
 80045da:	2b2a      	cmp	r3, #42	; 0x2a
 80045dc:	d134      	bne.n	8004648 <_vfiprintf_r+0x1b0>
 80045de:	9b03      	ldr	r3, [sp, #12]
 80045e0:	1d1a      	adds	r2, r3, #4
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	9203      	str	r2, [sp, #12]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	bfb8      	it	lt
 80045ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80045ee:	3402      	adds	r4, #2
 80045f0:	9305      	str	r3, [sp, #20]
 80045f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80046c8 <_vfiprintf_r+0x230>
 80045f6:	7821      	ldrb	r1, [r4, #0]
 80045f8:	2203      	movs	r2, #3
 80045fa:	4650      	mov	r0, sl
 80045fc:	f7fb fdf0 	bl	80001e0 <memchr>
 8004600:	b138      	cbz	r0, 8004612 <_vfiprintf_r+0x17a>
 8004602:	9b04      	ldr	r3, [sp, #16]
 8004604:	eba0 000a 	sub.w	r0, r0, sl
 8004608:	2240      	movs	r2, #64	; 0x40
 800460a:	4082      	lsls	r2, r0
 800460c:	4313      	orrs	r3, r2
 800460e:	3401      	adds	r4, #1
 8004610:	9304      	str	r3, [sp, #16]
 8004612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004616:	4829      	ldr	r0, [pc, #164]	; (80046bc <_vfiprintf_r+0x224>)
 8004618:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800461c:	2206      	movs	r2, #6
 800461e:	f7fb fddf 	bl	80001e0 <memchr>
 8004622:	2800      	cmp	r0, #0
 8004624:	d03f      	beq.n	80046a6 <_vfiprintf_r+0x20e>
 8004626:	4b26      	ldr	r3, [pc, #152]	; (80046c0 <_vfiprintf_r+0x228>)
 8004628:	bb1b      	cbnz	r3, 8004672 <_vfiprintf_r+0x1da>
 800462a:	9b03      	ldr	r3, [sp, #12]
 800462c:	3307      	adds	r3, #7
 800462e:	f023 0307 	bic.w	r3, r3, #7
 8004632:	3308      	adds	r3, #8
 8004634:	9303      	str	r3, [sp, #12]
 8004636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004638:	443b      	add	r3, r7
 800463a:	9309      	str	r3, [sp, #36]	; 0x24
 800463c:	e768      	b.n	8004510 <_vfiprintf_r+0x78>
 800463e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004642:	460c      	mov	r4, r1
 8004644:	2001      	movs	r0, #1
 8004646:	e7a6      	b.n	8004596 <_vfiprintf_r+0xfe>
 8004648:	2300      	movs	r3, #0
 800464a:	3401      	adds	r4, #1
 800464c:	9305      	str	r3, [sp, #20]
 800464e:	4619      	mov	r1, r3
 8004650:	f04f 0c0a 	mov.w	ip, #10
 8004654:	4620      	mov	r0, r4
 8004656:	f810 2b01 	ldrb.w	r2, [r0], #1
 800465a:	3a30      	subs	r2, #48	; 0x30
 800465c:	2a09      	cmp	r2, #9
 800465e:	d903      	bls.n	8004668 <_vfiprintf_r+0x1d0>
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0c6      	beq.n	80045f2 <_vfiprintf_r+0x15a>
 8004664:	9105      	str	r1, [sp, #20]
 8004666:	e7c4      	b.n	80045f2 <_vfiprintf_r+0x15a>
 8004668:	fb0c 2101 	mla	r1, ip, r1, r2
 800466c:	4604      	mov	r4, r0
 800466e:	2301      	movs	r3, #1
 8004670:	e7f0      	b.n	8004654 <_vfiprintf_r+0x1bc>
 8004672:	ab03      	add	r3, sp, #12
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	462a      	mov	r2, r5
 8004678:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <_vfiprintf_r+0x22c>)
 800467a:	a904      	add	r1, sp, #16
 800467c:	4630      	mov	r0, r6
 800467e:	f7fd fd37 	bl	80020f0 <_printf_float>
 8004682:	4607      	mov	r7, r0
 8004684:	1c78      	adds	r0, r7, #1
 8004686:	d1d6      	bne.n	8004636 <_vfiprintf_r+0x19e>
 8004688:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800468a:	07d9      	lsls	r1, r3, #31
 800468c:	d405      	bmi.n	800469a <_vfiprintf_r+0x202>
 800468e:	89ab      	ldrh	r3, [r5, #12]
 8004690:	059a      	lsls	r2, r3, #22
 8004692:	d402      	bmi.n	800469a <_vfiprintf_r+0x202>
 8004694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004696:	f7fe fbdb 	bl	8002e50 <__retarget_lock_release_recursive>
 800469a:	89ab      	ldrh	r3, [r5, #12]
 800469c:	065b      	lsls	r3, r3, #25
 800469e:	f53f af1d 	bmi.w	80044dc <_vfiprintf_r+0x44>
 80046a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046a4:	e71c      	b.n	80044e0 <_vfiprintf_r+0x48>
 80046a6:	ab03      	add	r3, sp, #12
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	462a      	mov	r2, r5
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <_vfiprintf_r+0x22c>)
 80046ae:	a904      	add	r1, sp, #16
 80046b0:	4630      	mov	r0, r6
 80046b2:	f7fd ffc1 	bl	8002638 <_printf_i>
 80046b6:	e7e4      	b.n	8004682 <_vfiprintf_r+0x1ea>
 80046b8:	08004c04 	.word	0x08004c04
 80046bc:	08004c0e 	.word	0x08004c0e
 80046c0:	080020f1 	.word	0x080020f1
 80046c4:	08004473 	.word	0x08004473
 80046c8:	08004c0a 	.word	0x08004c0a

080046cc <__swhatbuf_r>:
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	460c      	mov	r4, r1
 80046d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046d4:	2900      	cmp	r1, #0
 80046d6:	b096      	sub	sp, #88	; 0x58
 80046d8:	4615      	mov	r5, r2
 80046da:	461e      	mov	r6, r3
 80046dc:	da0d      	bge.n	80046fa <__swhatbuf_r+0x2e>
 80046de:	89a3      	ldrh	r3, [r4, #12]
 80046e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80046e4:	f04f 0100 	mov.w	r1, #0
 80046e8:	bf0c      	ite	eq
 80046ea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80046ee:	2340      	movne	r3, #64	; 0x40
 80046f0:	2000      	movs	r0, #0
 80046f2:	6031      	str	r1, [r6, #0]
 80046f4:	602b      	str	r3, [r5, #0]
 80046f6:	b016      	add	sp, #88	; 0x58
 80046f8:	bd70      	pop	{r4, r5, r6, pc}
 80046fa:	466a      	mov	r2, sp
 80046fc:	f000 f848 	bl	8004790 <_fstat_r>
 8004700:	2800      	cmp	r0, #0
 8004702:	dbec      	blt.n	80046de <__swhatbuf_r+0x12>
 8004704:	9901      	ldr	r1, [sp, #4]
 8004706:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800470a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800470e:	4259      	negs	r1, r3
 8004710:	4159      	adcs	r1, r3
 8004712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004716:	e7eb      	b.n	80046f0 <__swhatbuf_r+0x24>

08004718 <__smakebuf_r>:
 8004718:	898b      	ldrh	r3, [r1, #12]
 800471a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800471c:	079d      	lsls	r5, r3, #30
 800471e:	4606      	mov	r6, r0
 8004720:	460c      	mov	r4, r1
 8004722:	d507      	bpl.n	8004734 <__smakebuf_r+0x1c>
 8004724:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004728:	6023      	str	r3, [r4, #0]
 800472a:	6123      	str	r3, [r4, #16]
 800472c:	2301      	movs	r3, #1
 800472e:	6163      	str	r3, [r4, #20]
 8004730:	b002      	add	sp, #8
 8004732:	bd70      	pop	{r4, r5, r6, pc}
 8004734:	ab01      	add	r3, sp, #4
 8004736:	466a      	mov	r2, sp
 8004738:	f7ff ffc8 	bl	80046cc <__swhatbuf_r>
 800473c:	9900      	ldr	r1, [sp, #0]
 800473e:	4605      	mov	r5, r0
 8004740:	4630      	mov	r0, r6
 8004742:	f7ff fa77 	bl	8003c34 <_malloc_r>
 8004746:	b948      	cbnz	r0, 800475c <__smakebuf_r+0x44>
 8004748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800474c:	059a      	lsls	r2, r3, #22
 800474e:	d4ef      	bmi.n	8004730 <__smakebuf_r+0x18>
 8004750:	f023 0303 	bic.w	r3, r3, #3
 8004754:	f043 0302 	orr.w	r3, r3, #2
 8004758:	81a3      	strh	r3, [r4, #12]
 800475a:	e7e3      	b.n	8004724 <__smakebuf_r+0xc>
 800475c:	89a3      	ldrh	r3, [r4, #12]
 800475e:	6020      	str	r0, [r4, #0]
 8004760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004764:	81a3      	strh	r3, [r4, #12]
 8004766:	9b00      	ldr	r3, [sp, #0]
 8004768:	6163      	str	r3, [r4, #20]
 800476a:	9b01      	ldr	r3, [sp, #4]
 800476c:	6120      	str	r0, [r4, #16]
 800476e:	b15b      	cbz	r3, 8004788 <__smakebuf_r+0x70>
 8004770:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004774:	4630      	mov	r0, r6
 8004776:	f000 f81d 	bl	80047b4 <_isatty_r>
 800477a:	b128      	cbz	r0, 8004788 <__smakebuf_r+0x70>
 800477c:	89a3      	ldrh	r3, [r4, #12]
 800477e:	f023 0303 	bic.w	r3, r3, #3
 8004782:	f043 0301 	orr.w	r3, r3, #1
 8004786:	81a3      	strh	r3, [r4, #12]
 8004788:	89a3      	ldrh	r3, [r4, #12]
 800478a:	431d      	orrs	r5, r3
 800478c:	81a5      	strh	r5, [r4, #12]
 800478e:	e7cf      	b.n	8004730 <__smakebuf_r+0x18>

08004790 <_fstat_r>:
 8004790:	b538      	push	{r3, r4, r5, lr}
 8004792:	4d07      	ldr	r5, [pc, #28]	; (80047b0 <_fstat_r+0x20>)
 8004794:	2300      	movs	r3, #0
 8004796:	4604      	mov	r4, r0
 8004798:	4608      	mov	r0, r1
 800479a:	4611      	mov	r1, r2
 800479c:	602b      	str	r3, [r5, #0]
 800479e:	f7fd fa46 	bl	8001c2e <_fstat>
 80047a2:	1c43      	adds	r3, r0, #1
 80047a4:	d102      	bne.n	80047ac <_fstat_r+0x1c>
 80047a6:	682b      	ldr	r3, [r5, #0]
 80047a8:	b103      	cbz	r3, 80047ac <_fstat_r+0x1c>
 80047aa:	6023      	str	r3, [r4, #0]
 80047ac:	bd38      	pop	{r3, r4, r5, pc}
 80047ae:	bf00      	nop
 80047b0:	2000032c 	.word	0x2000032c

080047b4 <_isatty_r>:
 80047b4:	b538      	push	{r3, r4, r5, lr}
 80047b6:	4d06      	ldr	r5, [pc, #24]	; (80047d0 <_isatty_r+0x1c>)
 80047b8:	2300      	movs	r3, #0
 80047ba:	4604      	mov	r4, r0
 80047bc:	4608      	mov	r0, r1
 80047be:	602b      	str	r3, [r5, #0]
 80047c0:	f7fd fa45 	bl	8001c4e <_isatty>
 80047c4:	1c43      	adds	r3, r0, #1
 80047c6:	d102      	bne.n	80047ce <_isatty_r+0x1a>
 80047c8:	682b      	ldr	r3, [r5, #0]
 80047ca:	b103      	cbz	r3, 80047ce <_isatty_r+0x1a>
 80047cc:	6023      	str	r3, [r4, #0]
 80047ce:	bd38      	pop	{r3, r4, r5, pc}
 80047d0:	2000032c 	.word	0x2000032c

080047d4 <_sbrk_r>:
 80047d4:	b538      	push	{r3, r4, r5, lr}
 80047d6:	4d06      	ldr	r5, [pc, #24]	; (80047f0 <_sbrk_r+0x1c>)
 80047d8:	2300      	movs	r3, #0
 80047da:	4604      	mov	r4, r0
 80047dc:	4608      	mov	r0, r1
 80047de:	602b      	str	r3, [r5, #0]
 80047e0:	f7fd fa4e 	bl	8001c80 <_sbrk>
 80047e4:	1c43      	adds	r3, r0, #1
 80047e6:	d102      	bne.n	80047ee <_sbrk_r+0x1a>
 80047e8:	682b      	ldr	r3, [r5, #0]
 80047ea:	b103      	cbz	r3, 80047ee <_sbrk_r+0x1a>
 80047ec:	6023      	str	r3, [r4, #0]
 80047ee:	bd38      	pop	{r3, r4, r5, pc}
 80047f0:	2000032c 	.word	0x2000032c

080047f4 <memcpy>:
 80047f4:	440a      	add	r2, r1
 80047f6:	4291      	cmp	r1, r2
 80047f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80047fc:	d100      	bne.n	8004800 <memcpy+0xc>
 80047fe:	4770      	bx	lr
 8004800:	b510      	push	{r4, lr}
 8004802:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004806:	f803 4f01 	strb.w	r4, [r3, #1]!
 800480a:	4291      	cmp	r1, r2
 800480c:	d1f9      	bne.n	8004802 <memcpy+0xe>
 800480e:	bd10      	pop	{r4, pc}

08004810 <__assert_func>:
 8004810:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004812:	4614      	mov	r4, r2
 8004814:	461a      	mov	r2, r3
 8004816:	4b09      	ldr	r3, [pc, #36]	; (800483c <__assert_func+0x2c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4605      	mov	r5, r0
 800481c:	68d8      	ldr	r0, [r3, #12]
 800481e:	b14c      	cbz	r4, 8004834 <__assert_func+0x24>
 8004820:	4b07      	ldr	r3, [pc, #28]	; (8004840 <__assert_func+0x30>)
 8004822:	9100      	str	r1, [sp, #0]
 8004824:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004828:	4906      	ldr	r1, [pc, #24]	; (8004844 <__assert_func+0x34>)
 800482a:	462b      	mov	r3, r5
 800482c:	f7fe f978 	bl	8002b20 <fiprintf>
 8004830:	f000 f841 	bl	80048b6 <abort>
 8004834:	4b04      	ldr	r3, [pc, #16]	; (8004848 <__assert_func+0x38>)
 8004836:	461c      	mov	r4, r3
 8004838:	e7f3      	b.n	8004822 <__assert_func+0x12>
 800483a:	bf00      	nop
 800483c:	2000005c 	.word	0x2000005c
 8004840:	08004c1f 	.word	0x08004c1f
 8004844:	08004c2c 	.word	0x08004c2c
 8004848:	08004c5a 	.word	0x08004c5a

0800484c <_calloc_r>:
 800484c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800484e:	fba1 2402 	umull	r2, r4, r1, r2
 8004852:	b94c      	cbnz	r4, 8004868 <_calloc_r+0x1c>
 8004854:	4611      	mov	r1, r2
 8004856:	9201      	str	r2, [sp, #4]
 8004858:	f7ff f9ec 	bl	8003c34 <_malloc_r>
 800485c:	9a01      	ldr	r2, [sp, #4]
 800485e:	4605      	mov	r5, r0
 8004860:	b930      	cbnz	r0, 8004870 <_calloc_r+0x24>
 8004862:	4628      	mov	r0, r5
 8004864:	b003      	add	sp, #12
 8004866:	bd30      	pop	{r4, r5, pc}
 8004868:	220c      	movs	r2, #12
 800486a:	6002      	str	r2, [r0, #0]
 800486c:	2500      	movs	r5, #0
 800486e:	e7f8      	b.n	8004862 <_calloc_r+0x16>
 8004870:	4621      	mov	r1, r4
 8004872:	f7fe fa6f 	bl	8002d54 <memset>
 8004876:	e7f4      	b.n	8004862 <_calloc_r+0x16>

08004878 <__ascii_mbtowc>:
 8004878:	b082      	sub	sp, #8
 800487a:	b901      	cbnz	r1, 800487e <__ascii_mbtowc+0x6>
 800487c:	a901      	add	r1, sp, #4
 800487e:	b142      	cbz	r2, 8004892 <__ascii_mbtowc+0x1a>
 8004880:	b14b      	cbz	r3, 8004896 <__ascii_mbtowc+0x1e>
 8004882:	7813      	ldrb	r3, [r2, #0]
 8004884:	600b      	str	r3, [r1, #0]
 8004886:	7812      	ldrb	r2, [r2, #0]
 8004888:	1e10      	subs	r0, r2, #0
 800488a:	bf18      	it	ne
 800488c:	2001      	movne	r0, #1
 800488e:	b002      	add	sp, #8
 8004890:	4770      	bx	lr
 8004892:	4610      	mov	r0, r2
 8004894:	e7fb      	b.n	800488e <__ascii_mbtowc+0x16>
 8004896:	f06f 0001 	mvn.w	r0, #1
 800489a:	e7f8      	b.n	800488e <__ascii_mbtowc+0x16>

0800489c <__ascii_wctomb>:
 800489c:	b149      	cbz	r1, 80048b2 <__ascii_wctomb+0x16>
 800489e:	2aff      	cmp	r2, #255	; 0xff
 80048a0:	bf85      	ittet	hi
 80048a2:	238a      	movhi	r3, #138	; 0x8a
 80048a4:	6003      	strhi	r3, [r0, #0]
 80048a6:	700a      	strbls	r2, [r1, #0]
 80048a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80048ac:	bf98      	it	ls
 80048ae:	2001      	movls	r0, #1
 80048b0:	4770      	bx	lr
 80048b2:	4608      	mov	r0, r1
 80048b4:	4770      	bx	lr

080048b6 <abort>:
 80048b6:	b508      	push	{r3, lr}
 80048b8:	2006      	movs	r0, #6
 80048ba:	f000 f82b 	bl	8004914 <raise>
 80048be:	2001      	movs	r0, #1
 80048c0:	f7fd f966 	bl	8001b90 <_exit>

080048c4 <_raise_r>:
 80048c4:	291f      	cmp	r1, #31
 80048c6:	b538      	push	{r3, r4, r5, lr}
 80048c8:	4604      	mov	r4, r0
 80048ca:	460d      	mov	r5, r1
 80048cc:	d904      	bls.n	80048d8 <_raise_r+0x14>
 80048ce:	2316      	movs	r3, #22
 80048d0:	6003      	str	r3, [r0, #0]
 80048d2:	f04f 30ff 	mov.w	r0, #4294967295
 80048d6:	bd38      	pop	{r3, r4, r5, pc}
 80048d8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80048da:	b112      	cbz	r2, 80048e2 <_raise_r+0x1e>
 80048dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80048e0:	b94b      	cbnz	r3, 80048f6 <_raise_r+0x32>
 80048e2:	4620      	mov	r0, r4
 80048e4:	f000 f830 	bl	8004948 <_getpid_r>
 80048e8:	462a      	mov	r2, r5
 80048ea:	4601      	mov	r1, r0
 80048ec:	4620      	mov	r0, r4
 80048ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048f2:	f000 b817 	b.w	8004924 <_kill_r>
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d00a      	beq.n	8004910 <_raise_r+0x4c>
 80048fa:	1c59      	adds	r1, r3, #1
 80048fc:	d103      	bne.n	8004906 <_raise_r+0x42>
 80048fe:	2316      	movs	r3, #22
 8004900:	6003      	str	r3, [r0, #0]
 8004902:	2001      	movs	r0, #1
 8004904:	e7e7      	b.n	80048d6 <_raise_r+0x12>
 8004906:	2400      	movs	r4, #0
 8004908:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800490c:	4628      	mov	r0, r5
 800490e:	4798      	blx	r3
 8004910:	2000      	movs	r0, #0
 8004912:	e7e0      	b.n	80048d6 <_raise_r+0x12>

08004914 <raise>:
 8004914:	4b02      	ldr	r3, [pc, #8]	; (8004920 <raise+0xc>)
 8004916:	4601      	mov	r1, r0
 8004918:	6818      	ldr	r0, [r3, #0]
 800491a:	f7ff bfd3 	b.w	80048c4 <_raise_r>
 800491e:	bf00      	nop
 8004920:	2000005c 	.word	0x2000005c

08004924 <_kill_r>:
 8004924:	b538      	push	{r3, r4, r5, lr}
 8004926:	4d07      	ldr	r5, [pc, #28]	; (8004944 <_kill_r+0x20>)
 8004928:	2300      	movs	r3, #0
 800492a:	4604      	mov	r4, r0
 800492c:	4608      	mov	r0, r1
 800492e:	4611      	mov	r1, r2
 8004930:	602b      	str	r3, [r5, #0]
 8004932:	f7fd f91d 	bl	8001b70 <_kill>
 8004936:	1c43      	adds	r3, r0, #1
 8004938:	d102      	bne.n	8004940 <_kill_r+0x1c>
 800493a:	682b      	ldr	r3, [r5, #0]
 800493c:	b103      	cbz	r3, 8004940 <_kill_r+0x1c>
 800493e:	6023      	str	r3, [r4, #0]
 8004940:	bd38      	pop	{r3, r4, r5, pc}
 8004942:	bf00      	nop
 8004944:	2000032c 	.word	0x2000032c

08004948 <_getpid_r>:
 8004948:	f7fd b90a 	b.w	8001b60 <_getpid>

0800494c <_init>:
 800494c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494e:	bf00      	nop
 8004950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004952:	bc08      	pop	{r3}
 8004954:	469e      	mov	lr, r3
 8004956:	4770      	bx	lr

08004958 <_fini>:
 8004958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495a:	bf00      	nop
 800495c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800495e:	bc08      	pop	{r3}
 8004960:	469e      	mov	lr, r3
 8004962:	4770      	bx	lr
