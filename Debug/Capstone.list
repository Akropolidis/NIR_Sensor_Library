
Capstone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005888  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005a38  08005a38  00006a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005abc  08005abc  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005abc  08005abc  00006abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ac4  08005ac4  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ac4  08005ac4  00006ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ac8  08005ac8  00006ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005acc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000706c  2**0
                  CONTENTS
 10 .bss          000008cc  2000006c  2000006c  0000706c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000938  20000938  0000706c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fa3f  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000231a  00000000  00000000  00016adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  00018df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b04  00000000  00000000  00019c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002546c  00000000  00000000  0001a764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fa30  00000000  00000000  0003fbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc62e  00000000  00000000  0004f600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012bc2e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004574  00000000  00000000  0012bc74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001301e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005a20 	.word	0x08005a20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08005a20 	.word	0x08005a20

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	@ 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2iz>:
 800086c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000870:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000874:	d215      	bcs.n	80008a2 <__aeabi_d2iz+0x36>
 8000876:	d511      	bpl.n	800089c <__aeabi_d2iz+0x30>
 8000878:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800087c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000880:	d912      	bls.n	80008a8 <__aeabi_d2iz+0x3c>
 8000882:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000886:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800088a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800088e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000892:	fa23 f002 	lsr.w	r0, r3, r2
 8000896:	bf18      	it	ne
 8000898:	4240      	negne	r0, r0
 800089a:	4770      	bx	lr
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	4770      	bx	lr
 80008a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008a6:	d105      	bne.n	80008b4 <__aeabi_d2iz+0x48>
 80008a8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80008ac:	bf08      	it	eq
 80008ae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop

080008bc <__aeabi_uldivmod>:
 80008bc:	b953      	cbnz	r3, 80008d4 <__aeabi_uldivmod+0x18>
 80008be:	b94a      	cbnz	r2, 80008d4 <__aeabi_uldivmod+0x18>
 80008c0:	2900      	cmp	r1, #0
 80008c2:	bf08      	it	eq
 80008c4:	2800      	cmpeq	r0, #0
 80008c6:	bf1c      	itt	ne
 80008c8:	f04f 31ff 	movne.w	r1, #4294967295
 80008cc:	f04f 30ff 	movne.w	r0, #4294967295
 80008d0:	f000 b96a 	b.w	8000ba8 <__aeabi_idiv0>
 80008d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008dc:	f000 f806 	bl	80008ec <__udivmoddi4>
 80008e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008e8:	b004      	add	sp, #16
 80008ea:	4770      	bx	lr

080008ec <__udivmoddi4>:
 80008ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008f0:	9d08      	ldr	r5, [sp, #32]
 80008f2:	460c      	mov	r4, r1
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d14e      	bne.n	8000996 <__udivmoddi4+0xaa>
 80008f8:	4694      	mov	ip, r2
 80008fa:	458c      	cmp	ip, r1
 80008fc:	4686      	mov	lr, r0
 80008fe:	fab2 f282 	clz	r2, r2
 8000902:	d962      	bls.n	80009ca <__udivmoddi4+0xde>
 8000904:	b14a      	cbz	r2, 800091a <__udivmoddi4+0x2e>
 8000906:	f1c2 0320 	rsb	r3, r2, #32
 800090a:	4091      	lsls	r1, r2
 800090c:	fa20 f303 	lsr.w	r3, r0, r3
 8000910:	fa0c fc02 	lsl.w	ip, ip, r2
 8000914:	4319      	orrs	r1, r3
 8000916:	fa00 fe02 	lsl.w	lr, r0, r2
 800091a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800091e:	fa1f f68c 	uxth.w	r6, ip
 8000922:	fbb1 f4f7 	udiv	r4, r1, r7
 8000926:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800092a:	fb07 1114 	mls	r1, r7, r4, r1
 800092e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000932:	fb04 f106 	mul.w	r1, r4, r6
 8000936:	4299      	cmp	r1, r3
 8000938:	d90a      	bls.n	8000950 <__udivmoddi4+0x64>
 800093a:	eb1c 0303 	adds.w	r3, ip, r3
 800093e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000942:	f080 8112 	bcs.w	8000b6a <__udivmoddi4+0x27e>
 8000946:	4299      	cmp	r1, r3
 8000948:	f240 810f 	bls.w	8000b6a <__udivmoddi4+0x27e>
 800094c:	3c02      	subs	r4, #2
 800094e:	4463      	add	r3, ip
 8000950:	1a59      	subs	r1, r3, r1
 8000952:	fa1f f38e 	uxth.w	r3, lr
 8000956:	fbb1 f0f7 	udiv	r0, r1, r7
 800095a:	fb07 1110 	mls	r1, r7, r0, r1
 800095e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000962:	fb00 f606 	mul.w	r6, r0, r6
 8000966:	429e      	cmp	r6, r3
 8000968:	d90a      	bls.n	8000980 <__udivmoddi4+0x94>
 800096a:	eb1c 0303 	adds.w	r3, ip, r3
 800096e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000972:	f080 80fc 	bcs.w	8000b6e <__udivmoddi4+0x282>
 8000976:	429e      	cmp	r6, r3
 8000978:	f240 80f9 	bls.w	8000b6e <__udivmoddi4+0x282>
 800097c:	4463      	add	r3, ip
 800097e:	3802      	subs	r0, #2
 8000980:	1b9b      	subs	r3, r3, r6
 8000982:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000986:	2100      	movs	r1, #0
 8000988:	b11d      	cbz	r5, 8000992 <__udivmoddi4+0xa6>
 800098a:	40d3      	lsrs	r3, r2
 800098c:	2200      	movs	r2, #0
 800098e:	e9c5 3200 	strd	r3, r2, [r5]
 8000992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000996:	428b      	cmp	r3, r1
 8000998:	d905      	bls.n	80009a6 <__udivmoddi4+0xba>
 800099a:	b10d      	cbz	r5, 80009a0 <__udivmoddi4+0xb4>
 800099c:	e9c5 0100 	strd	r0, r1, [r5]
 80009a0:	2100      	movs	r1, #0
 80009a2:	4608      	mov	r0, r1
 80009a4:	e7f5      	b.n	8000992 <__udivmoddi4+0xa6>
 80009a6:	fab3 f183 	clz	r1, r3
 80009aa:	2900      	cmp	r1, #0
 80009ac:	d146      	bne.n	8000a3c <__udivmoddi4+0x150>
 80009ae:	42a3      	cmp	r3, r4
 80009b0:	d302      	bcc.n	80009b8 <__udivmoddi4+0xcc>
 80009b2:	4290      	cmp	r0, r2
 80009b4:	f0c0 80f0 	bcc.w	8000b98 <__udivmoddi4+0x2ac>
 80009b8:	1a86      	subs	r6, r0, r2
 80009ba:	eb64 0303 	sbc.w	r3, r4, r3
 80009be:	2001      	movs	r0, #1
 80009c0:	2d00      	cmp	r5, #0
 80009c2:	d0e6      	beq.n	8000992 <__udivmoddi4+0xa6>
 80009c4:	e9c5 6300 	strd	r6, r3, [r5]
 80009c8:	e7e3      	b.n	8000992 <__udivmoddi4+0xa6>
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	f040 8090 	bne.w	8000af0 <__udivmoddi4+0x204>
 80009d0:	eba1 040c 	sub.w	r4, r1, ip
 80009d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009d8:	fa1f f78c 	uxth.w	r7, ip
 80009dc:	2101      	movs	r1, #1
 80009de:	fbb4 f6f8 	udiv	r6, r4, r8
 80009e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009e6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ee:	fb07 f006 	mul.w	r0, r7, r6
 80009f2:	4298      	cmp	r0, r3
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0x11c>
 80009f6:	eb1c 0303 	adds.w	r3, ip, r3
 80009fa:	f106 34ff 	add.w	r4, r6, #4294967295
 80009fe:	d202      	bcs.n	8000a06 <__udivmoddi4+0x11a>
 8000a00:	4298      	cmp	r0, r3
 8000a02:	f200 80cd 	bhi.w	8000ba0 <__udivmoddi4+0x2b4>
 8000a06:	4626      	mov	r6, r4
 8000a08:	1a1c      	subs	r4, r3, r0
 8000a0a:	fa1f f38e 	uxth.w	r3, lr
 8000a0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a12:	fb08 4410 	mls	r4, r8, r0, r4
 8000a16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a1a:	fb00 f707 	mul.w	r7, r0, r7
 8000a1e:	429f      	cmp	r7, r3
 8000a20:	d908      	bls.n	8000a34 <__udivmoddi4+0x148>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a2a:	d202      	bcs.n	8000a32 <__udivmoddi4+0x146>
 8000a2c:	429f      	cmp	r7, r3
 8000a2e:	f200 80b0 	bhi.w	8000b92 <__udivmoddi4+0x2a6>
 8000a32:	4620      	mov	r0, r4
 8000a34:	1bdb      	subs	r3, r3, r7
 8000a36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a3a:	e7a5      	b.n	8000988 <__udivmoddi4+0x9c>
 8000a3c:	f1c1 0620 	rsb	r6, r1, #32
 8000a40:	408b      	lsls	r3, r1
 8000a42:	fa22 f706 	lsr.w	r7, r2, r6
 8000a46:	431f      	orrs	r7, r3
 8000a48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a50:	ea43 030c 	orr.w	r3, r3, ip
 8000a54:	40f4      	lsrs	r4, r6
 8000a56:	fa00 f801 	lsl.w	r8, r0, r1
 8000a5a:	0c38      	lsrs	r0, r7, #16
 8000a5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a60:	fbb4 fef0 	udiv	lr, r4, r0
 8000a64:	fa1f fc87 	uxth.w	ip, r7
 8000a68:	fb00 441e 	mls	r4, r0, lr, r4
 8000a6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a70:	fb0e f90c 	mul.w	r9, lr, ip
 8000a74:	45a1      	cmp	r9, r4
 8000a76:	fa02 f201 	lsl.w	r2, r2, r1
 8000a7a:	d90a      	bls.n	8000a92 <__udivmoddi4+0x1a6>
 8000a7c:	193c      	adds	r4, r7, r4
 8000a7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a82:	f080 8084 	bcs.w	8000b8e <__udivmoddi4+0x2a2>
 8000a86:	45a1      	cmp	r9, r4
 8000a88:	f240 8081 	bls.w	8000b8e <__udivmoddi4+0x2a2>
 8000a8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a90:	443c      	add	r4, r7
 8000a92:	eba4 0409 	sub.w	r4, r4, r9
 8000a96:	fa1f f983 	uxth.w	r9, r3
 8000a9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000aa2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000aa6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aaa:	45a4      	cmp	ip, r4
 8000aac:	d907      	bls.n	8000abe <__udivmoddi4+0x1d2>
 8000aae:	193c      	adds	r4, r7, r4
 8000ab0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ab4:	d267      	bcs.n	8000b86 <__udivmoddi4+0x29a>
 8000ab6:	45a4      	cmp	ip, r4
 8000ab8:	d965      	bls.n	8000b86 <__udivmoddi4+0x29a>
 8000aba:	3b02      	subs	r3, #2
 8000abc:	443c      	add	r4, r7
 8000abe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ac2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ac6:	eba4 040c 	sub.w	r4, r4, ip
 8000aca:	429c      	cmp	r4, r3
 8000acc:	46ce      	mov	lr, r9
 8000ace:	469c      	mov	ip, r3
 8000ad0:	d351      	bcc.n	8000b76 <__udivmoddi4+0x28a>
 8000ad2:	d04e      	beq.n	8000b72 <__udivmoddi4+0x286>
 8000ad4:	b155      	cbz	r5, 8000aec <__udivmoddi4+0x200>
 8000ad6:	ebb8 030e 	subs.w	r3, r8, lr
 8000ada:	eb64 040c 	sbc.w	r4, r4, ip
 8000ade:	fa04 f606 	lsl.w	r6, r4, r6
 8000ae2:	40cb      	lsrs	r3, r1
 8000ae4:	431e      	orrs	r6, r3
 8000ae6:	40cc      	lsrs	r4, r1
 8000ae8:	e9c5 6400 	strd	r6, r4, [r5]
 8000aec:	2100      	movs	r1, #0
 8000aee:	e750      	b.n	8000992 <__udivmoddi4+0xa6>
 8000af0:	f1c2 0320 	rsb	r3, r2, #32
 8000af4:	fa20 f103 	lsr.w	r1, r0, r3
 8000af8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000afc:	fa24 f303 	lsr.w	r3, r4, r3
 8000b00:	4094      	lsls	r4, r2
 8000b02:	430c      	orrs	r4, r1
 8000b04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0c:	fa1f f78c 	uxth.w	r7, ip
 8000b10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b14:	fb08 3110 	mls	r1, r8, r0, r3
 8000b18:	0c23      	lsrs	r3, r4, #16
 8000b1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b1e:	fb00 f107 	mul.w	r1, r0, r7
 8000b22:	4299      	cmp	r1, r3
 8000b24:	d908      	bls.n	8000b38 <__udivmoddi4+0x24c>
 8000b26:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b2e:	d22c      	bcs.n	8000b8a <__udivmoddi4+0x29e>
 8000b30:	4299      	cmp	r1, r3
 8000b32:	d92a      	bls.n	8000b8a <__udivmoddi4+0x29e>
 8000b34:	3802      	subs	r0, #2
 8000b36:	4463      	add	r3, ip
 8000b38:	1a5b      	subs	r3, r3, r1
 8000b3a:	b2a4      	uxth	r4, r4
 8000b3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b40:	fb08 3311 	mls	r3, r8, r1, r3
 8000b44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b48:	fb01 f307 	mul.w	r3, r1, r7
 8000b4c:	42a3      	cmp	r3, r4
 8000b4e:	d908      	bls.n	8000b62 <__udivmoddi4+0x276>
 8000b50:	eb1c 0404 	adds.w	r4, ip, r4
 8000b54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b58:	d213      	bcs.n	8000b82 <__udivmoddi4+0x296>
 8000b5a:	42a3      	cmp	r3, r4
 8000b5c:	d911      	bls.n	8000b82 <__udivmoddi4+0x296>
 8000b5e:	3902      	subs	r1, #2
 8000b60:	4464      	add	r4, ip
 8000b62:	1ae4      	subs	r4, r4, r3
 8000b64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b68:	e739      	b.n	80009de <__udivmoddi4+0xf2>
 8000b6a:	4604      	mov	r4, r0
 8000b6c:	e6f0      	b.n	8000950 <__udivmoddi4+0x64>
 8000b6e:	4608      	mov	r0, r1
 8000b70:	e706      	b.n	8000980 <__udivmoddi4+0x94>
 8000b72:	45c8      	cmp	r8, r9
 8000b74:	d2ae      	bcs.n	8000ad4 <__udivmoddi4+0x1e8>
 8000b76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b7e:	3801      	subs	r0, #1
 8000b80:	e7a8      	b.n	8000ad4 <__udivmoddi4+0x1e8>
 8000b82:	4631      	mov	r1, r6
 8000b84:	e7ed      	b.n	8000b62 <__udivmoddi4+0x276>
 8000b86:	4603      	mov	r3, r0
 8000b88:	e799      	b.n	8000abe <__udivmoddi4+0x1d2>
 8000b8a:	4630      	mov	r0, r6
 8000b8c:	e7d4      	b.n	8000b38 <__udivmoddi4+0x24c>
 8000b8e:	46d6      	mov	lr, sl
 8000b90:	e77f      	b.n	8000a92 <__udivmoddi4+0x1a6>
 8000b92:	4463      	add	r3, ip
 8000b94:	3802      	subs	r0, #2
 8000b96:	e74d      	b.n	8000a34 <__udivmoddi4+0x148>
 8000b98:	4606      	mov	r6, r0
 8000b9a:	4623      	mov	r3, r4
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	e70f      	b.n	80009c0 <__udivmoddi4+0xd4>
 8000ba0:	3e02      	subs	r6, #2
 8000ba2:	4463      	add	r3, ip
 8000ba4:	e730      	b.n	8000a08 <__udivmoddi4+0x11c>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_idiv0>:
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <begin>:
static float getCalibratedValue(uint8_t calAddress, uint8_t device);

//Initializes the sensor with basic settings
//Returns false if sensor is not detected
bool begin()
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
	I2C1_Init();
 8000bb2:	f000 fc03 	bl	80013bc <I2C1_Init>

	if (isConnected() == false)
 8000bb6:	f000 f83f 	bl	8000c38 <isConnected>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	f083 0301 	eor.w	r3, r3, #1
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <begin+0x1e>
	{
		return false; //Check for sensor presence
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e031      	b.n	8000c2e <begin+0x82>
	}

	uint8_t value = virtualReadRegister(AS7265X_DEV_SELECT_CONTROL);
 8000bca:	204f      	movs	r0, #79	@ 0x4f
 8000bcc:	f000 f8da 	bl	8000d84 <virtualReadRegister>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	71fb      	strb	r3, [r7, #7]
	if ((value & 0b00110000) == 0) //Check for presence of first and second slave devices
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d101      	bne.n	8000be2 <begin+0x36>
	{
		return false;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e025      	b.n	8000c2e <begin+0x82>
	}

	setLEDCurrent(AS7265X_LED_CURRENT_LIMIT_12_5MA, AS7265x_LED_WHITE);
 8000be2:	2100      	movs	r1, #0
 8000be4:	2000      	movs	r0, #0
 8000be6:	f000 fac7 	bl	8001178 <setLEDCurrent>
	setLEDCurrent(AS7265X_LED_CURRENT_LIMIT_12_5MA, AS7265x_LED_IR);
 8000bea:	2101      	movs	r1, #1
 8000bec:	2000      	movs	r0, #0
 8000bee:	f000 fac3 	bl	8001178 <setLEDCurrent>
	setLEDCurrent(AS7265X_LED_CURRENT_LIMIT_12_5MA, AS7265x_LED_UV);
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f000 fabf 	bl	8001178 <setLEDCurrent>

	disableLED(AS7265x_LED_WHITE); //Turn off bulb to avoid heating sensor
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 fa22 	bl	8001044 <disableLED>
	disableLED(AS7265x_LED_IR);
 8000c00:	2001      	movs	r0, #1
 8000c02:	f000 fa1f 	bl	8001044 <disableLED>
	disableLED(AS7265x_LED_UV);
 8000c06:	2002      	movs	r0, #2
 8000c08:	f000 fa1c 	bl	8001044 <disableLED>

	setIndicatorCurrent(AS7265X_INDICATOR_CURRENT_LIMIT_2MA);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f000 fade 	bl	80011ce <setIndicatorCurrent>
	enableIndicator();
 8000c12:	f000 f9e4 	bl	8000fde <enableIndicator>

	setIntegrationCycles(49); //(49 + 1) * 2.78ms = 139ms. 0 to 255 is valid.
 8000c16:	2031      	movs	r0, #49	@ 0x31
 8000c18:	f000 fa7a 	bl	8001110 <setIntegrationCycles>
	//If you use Mode 2 or 3 (all the colors) then integration time is double. 139*2 = 278ms between readings.

	setGain(AS7265X_GAIN_64X);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 fa2c 	bl	800107a <setGain>

	setMeasurementMode(AS7265X_MEASUREMENT_MODE_6CHAN_ONE_SHOT);
 8000c22:	2003      	movs	r0, #3
 8000c24:	f000 fa4d 	bl	80010c2 <setMeasurementMode>

	enableInterrupt();
 8000c28:	f000 faf8 	bl	800121c <enableInterrupt>

	return true;
 8000c2c:	2301      	movs	r3, #1
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <isConnected>:

//Returns TRUE if the device sends an ACK indicating it is connected
bool isConnected()
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
	uint32_t timeout = 1000; //Timeout to connect set to 1000ms
 8000c3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c42:	60fb      	str	r3, [r7, #12]
	unsigned long startTime = HAL_GetTick();
 8000c44:	f001 fb08 	bl	8002258 <HAL_GetTick>
 8000c48:	60b8      	str	r0, [r7, #8]

	while ((HAL_GetTick() - startTime) < timeout)
 8000c4a:	e035      	b.n	8000cb8 <isConnected+0x80>
	{
		volatile int tmp;

		/* Wait until bus not busy */
		while (I2C1->SR2 & (SR2_BUSY)){}
 8000c4c:	bf00      	nop
 8000c4e:	4b21      	ldr	r3, [pc, #132]	@ (8000cd4 <isConnected+0x9c>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d1f9      	bne.n	8000c4e <isConnected+0x16>

		/* Generate start condition */
		I2C1->CR1 |= CR1_START;
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd4 <isConnected+0x9c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8000cd4 <isConnected+0x9c>)
 8000c60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c64:	6013      	str	r3, [r2, #0]

		/* Wait until start condition flag is set */
		while (!(I2C1->SR1 & (SR1_SB))){}
 8000c66:	bf00      	nop
 8000c68:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd4 <isConnected+0x9c>)
 8000c6a:	695b      	ldr	r3, [r3, #20]
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d0f9      	beq.n	8000c68 <isConnected+0x30>

		/* Transmit slave address + Write (0) */
		I2C1->DR = AS7265X_WRITE_ADDR;
 8000c74:	4b17      	ldr	r3, [pc, #92]	@ (8000cd4 <isConnected+0x9c>)
 8000c76:	2292      	movs	r2, #146	@ 0x92
 8000c78:	611a      	str	r2, [r3, #16]

		/* Wait until address flag is set */
		while (!(I2C1->SR1 & (SR1_ADDR))){}
 8000c7a:	bf00      	nop
 8000c7c:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <isConnected+0x9c>)
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	f003 0302 	and.w	r3, r3, #2
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d0f9      	beq.n	8000c7c <isConnected+0x44>

		/* Clear address flag by reading SR2 register */
		tmp = I2C1->SR2;
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <isConnected+0x9c>)
 8000c8a:	699b      	ldr	r3, [r3, #24]
 8000c8c:	607b      	str	r3, [r7, #4]

		if (I2C1->SR1 & SR1_AF)
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <isConnected+0x9c>)
 8000c90:	695b      	ldr	r3, [r3, #20]
 8000c92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d006      	beq.n	8000ca8 <isConnected+0x70>
		{
			//No ACK received, address not acknowledged
			I2C1->CR1 |= CR1_STOP;  // Send STOP condition
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <isConnected+0x9c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a0d      	ldr	r2, [pc, #52]	@ (8000cd4 <isConnected+0x9c>)
 8000ca0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ca4:	6013      	str	r3, [r2, #0]
			continue;
 8000ca6:	e007      	b.n	8000cb8 <isConnected+0x80>
		}

		//Address acknowledged, device is connected
		I2C1->CR1 |= CR1_STOP; // Send STOP condition
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd4 <isConnected+0x9c>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a09      	ldr	r2, [pc, #36]	@ (8000cd4 <isConnected+0x9c>)
 8000cae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cb2:	6013      	str	r3, [r2, #0]
		return true;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e008      	b.n	8000cca <isConnected+0x92>
	while ((HAL_GetTick() - startTime) < timeout)
 8000cb8:	f001 face 	bl	8002258 <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d8c1      	bhi.n	8000c4c <isConnected+0x14>
	}
	//Timeout to connect has expired, hence device is not connected
	return false;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40005400 	.word	0x40005400

08000cd8 <readRegister>:

//Reads from a given location from the AS726x
static uint8_t readRegister(uint8_t addr)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	char data = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	73fb      	strb	r3, [r7, #15]
	I2C1_byteRead(AS7265X_ADDR, addr, &data);
 8000ce6:	f107 020f 	add.w	r2, r7, #15
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	4619      	mov	r1, r3
 8000cee:	2049      	movs	r0, #73	@ 0x49
 8000cf0:	f000 fc08 	bl	8001504 <I2C1_byteRead>
	return data;
 8000cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <writeRegister>:

//Write a value to a given location on the AS726x
static void writeRegister(uint8_t addr, uint8_t val)
{
 8000cfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d02:	b087      	sub	sp, #28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	460a      	mov	r2, r1
 8000d0a:	71fb      	strb	r3, [r7, #7]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	71bb      	strb	r3, [r7, #6]
 8000d10:	466b      	mov	r3, sp
 8000d12:	461e      	mov	r6, r3
	uint8_t bufferSize = 1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	75fb      	strb	r3, [r7, #23]
	char data[bufferSize];
 8000d18:	7df9      	ldrb	r1, [r7, #23]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	b2cb      	uxtb	r3, r1
 8000d22:	2200      	movs	r2, #0
 8000d24:	4698      	mov	r8, r3
 8000d26:	4691      	mov	r9, r2
 8000d28:	f04f 0200 	mov.w	r2, #0
 8000d2c:	f04f 0300 	mov.w	r3, #0
 8000d30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d3c:	b2cb      	uxtb	r3, r1
 8000d3e:	2200      	movs	r2, #0
 8000d40:	461c      	mov	r4, r3
 8000d42:	4615      	mov	r5, r2
 8000d44:	f04f 0200 	mov.w	r2, #0
 8000d48:	f04f 0300 	mov.w	r3, #0
 8000d4c:	00eb      	lsls	r3, r5, #3
 8000d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d52:	00e2      	lsls	r2, r4, #3
 8000d54:	460b      	mov	r3, r1
 8000d56:	3307      	adds	r3, #7
 8000d58:	08db      	lsrs	r3, r3, #3
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	ebad 0d03 	sub.w	sp, sp, r3
 8000d60:	466b      	mov	r3, sp
 8000d62:	3300      	adds	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]

	data[0] = val;
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	79ba      	ldrb	r2, [r7, #6]
 8000d6a:	701a      	strb	r2, [r3, #0]
	I2C1_burstWrite(AS7265X_ADDR, addr, bufferSize, data);
 8000d6c:	7dfa      	ldrb	r2, [r7, #23]
 8000d6e:	79f9      	ldrb	r1, [r7, #7]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	2049      	movs	r0, #73	@ 0x49
 8000d74:	f000 fc40 	bl	80015f8 <I2C1_burstWrite>
 8000d78:	46b5      	mov	sp, r6
}
 8000d7a:	bf00      	nop
 8000d7c:	371c      	adds	r7, #28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000d84 <virtualReadRegister>:

//Read from a virtual register on the AS7265x
static uint8_t virtualReadRegister(uint8_t virtualAddr)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
	volatile uint8_t status, data;

	//Do a preliminary check of the read register
	status = readRegister(AS7265X_STATUS_REG);
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f7ff ffa2 	bl	8000cd8 <readRegister>
 8000d94:	4603      	mov	r3, r0
 8000d96:	72fb      	strb	r3, [r7, #11]
	if((status & AS7265X_RX_VALID) != 0) //Data byte available in READ register
 8000d98:	7afb      	ldrb	r3, [r7, #11]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d002      	beq.n	8000daa <virtualReadRegister+0x26>
	{
		readRegister(AS7265X_READ_REG); //Read the byte but do nothing
 8000da4:	2002      	movs	r0, #2
 8000da6:	f7ff ff97 	bl	8000cd8 <readRegister>
	}

	//Wait for WRITE flag to clear
	unsigned long startTime = HAL_GetTick();
 8000daa:	f001 fa55 	bl	8002258 <HAL_GetTick>
 8000dae:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if((HAL_GetTick() - startTime) > maxWaitTime)
 8000db0:	f001 fa52 	bl	8002258 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	4a25      	ldr	r2, [pc, #148]	@ (8000e50 <virtualReadRegister+0xcc>)
 8000dbc:	8812      	ldrh	r2, [r2, #0]
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d904      	bls.n	8000dcc <virtualReadRegister+0x48>
		{
			printf("Sensor failed to respond \n\r");
 8000dc2:	4824      	ldr	r0, [pc, #144]	@ (8000e54 <virtualReadRegister+0xd0>)
 8000dc4:	f003 fde8 	bl	8004998 <iprintf>
			return 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	e03c      	b.n	8000e46 <virtualReadRegister+0xc2>
		}
		//Read slave I2C status to see if the read register is ready
		status = readRegister(AS7265X_STATUS_REG);
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f7ff ff83 	bl	8000cd8 <readRegister>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	72fb      	strb	r3, [r7, #11]
		if((status & AS7265X_TX_VALID) == 0) //New data may be written to WRITE register
 8000dd6:	7afb      	ldrb	r3, [r7, #11]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <virtualReadRegister+0x66>
		{
			break;
		}
		HAL_Delay(5); //Delay for 5 ms before checking for virtual register changes
 8000de2:	2005      	movs	r0, #5
 8000de4:	f001 fa44 	bl	8002270 <HAL_Delay>
		if((HAL_GetTick() - startTime) > maxWaitTime)
 8000de8:	e7e2      	b.n	8000db0 <virtualReadRegister+0x2c>
			break;
 8000dea:	bf00      	nop
	}

	//Send the virtual register address (disabling bit 7 to indicate a read).
	writeRegister(AS7265X_WRITE_REG, virtualAddr);
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	4619      	mov	r1, r3
 8000df0:	2001      	movs	r0, #1
 8000df2:	f7ff ff84 	bl	8000cfe <writeRegister>

	//Wait for READ flag to be set
	startTime = HAL_GetTick();
 8000df6:	f001 fa2f 	bl	8002258 <HAL_GetTick>
 8000dfa:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if((HAL_GetTick() - startTime) > maxWaitTime)
 8000dfc:	f001 fa2c 	bl	8002258 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	4a12      	ldr	r2, [pc, #72]	@ (8000e50 <virtualReadRegister+0xcc>)
 8000e08:	8812      	ldrh	r2, [r2, #0]
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d904      	bls.n	8000e18 <virtualReadRegister+0x94>
		{
			printf("Sensor failed to respond \n\r");
 8000e0e:	4811      	ldr	r0, [pc, #68]	@ (8000e54 <virtualReadRegister+0xd0>)
 8000e10:	f003 fdc2 	bl	8004998 <iprintf>
			return 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	e016      	b.n	8000e46 <virtualReadRegister+0xc2>
		}
		//Read slave I2C status to see if the read register is ready
		status = readRegister(AS7265X_STATUS_REG);
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f7ff ff5d 	bl	8000cd8 <readRegister>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	72fb      	strb	r3, [r7, #11]
		if((status & AS7265X_RX_VALID) != 0) //Data byte available in READ register
 8000e22:	7afb      	ldrb	r3, [r7, #11]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d103      	bne.n	8000e36 <virtualReadRegister+0xb2>
		{
			break;
		}
		HAL_Delay(5); //Delay for 5 ms before checking for virtual register changes
 8000e2e:	2005      	movs	r0, #5
 8000e30:	f001 fa1e 	bl	8002270 <HAL_Delay>
		if((HAL_GetTick() - startTime) > maxWaitTime)
 8000e34:	e7e2      	b.n	8000dfc <virtualReadRegister+0x78>
			break;
 8000e36:	bf00      	nop
	}

	data = readRegister(AS7265X_READ_REG);
 8000e38:	2002      	movs	r0, #2
 8000e3a:	f7ff ff4d 	bl	8000cd8 <readRegister>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	72bb      	strb	r3, [r7, #10]
	return data;
 8000e42:	7abb      	ldrb	r3, [r7, #10]
 8000e44:	b2db      	uxtb	r3, r3
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000000 	.word	0x20000000
 8000e54:	08005a38 	.word	0x08005a38

08000e58 <virtualWriteRegister>:

//Write to a virtual register in the AS7265x
static void virtualWriteRegister(uint8_t virtualAddr, uint8_t dataToWrite)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	460a      	mov	r2, r1
 8000e62:	71fb      	strb	r3, [r7, #7]
 8000e64:	4613      	mov	r3, r2
 8000e66:	71bb      	strb	r3, [r7, #6]
	volatile uint8_t status;

	//Wait for WRITE register to be empty
	unsigned long startTime = HAL_GetTick();
 8000e68:	f001 f9f6 	bl	8002258 <HAL_GetTick>
 8000e6c:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if((HAL_GetTick() - startTime) > maxWaitTime)
 8000e6e:	f001 f9f3 	bl	8002258 <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	4a23      	ldr	r2, [pc, #140]	@ (8000f08 <virtualWriteRegister+0xb0>)
 8000e7a:	8812      	ldrh	r2, [r2, #0]
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d903      	bls.n	8000e88 <virtualWriteRegister+0x30>
		{
			printf("Sensor failed to respond \n\r");
 8000e80:	4822      	ldr	r0, [pc, #136]	@ (8000f0c <virtualWriteRegister+0xb4>)
 8000e82:	f003 fd89 	bl	8004998 <iprintf>
			return;
 8000e86:	e03c      	b.n	8000f02 <virtualWriteRegister+0xaa>
		}
		//Read slave I2C status to see if the write register is ready
		status = readRegister(AS7265X_STATUS_REG);
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f7ff ff25 	bl	8000cd8 <readRegister>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	72fb      	strb	r3, [r7, #11]
		if((status & AS7265X_TX_VALID) == 0) //New data may be written to WRITE register
 8000e92:	7afb      	ldrb	r3, [r7, #11]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <virtualWriteRegister+0x4e>
		{
			break;
		}
		HAL_Delay(5); //Delay for 5 ms before checking for virtual register changes
 8000e9e:	2005      	movs	r0, #5
 8000ea0:	f001 f9e6 	bl	8002270 <HAL_Delay>
		if((HAL_GetTick() - startTime) > maxWaitTime)
 8000ea4:	e7e3      	b.n	8000e6e <virtualWriteRegister+0x16>
			break;
 8000ea6:	bf00      	nop
	}

	//Send the virtual register address (enabling bit 7 to indicate a write).
	writeRegister(AS7265X_WRITE_REG, (virtualAddr | 1 << 7));
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f7ff ff23 	bl	8000cfe <writeRegister>

	//Wait for WRITE register to be empty
	startTime = HAL_GetTick();
 8000eb8:	f001 f9ce 	bl	8002258 <HAL_GetTick>
 8000ebc:	60f8      	str	r0, [r7, #12]
	while(1)
	{
		if((HAL_GetTick() - startTime) > maxWaitTime)
 8000ebe:	f001 f9cb 	bl	8002258 <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	4a0f      	ldr	r2, [pc, #60]	@ (8000f08 <virtualWriteRegister+0xb0>)
 8000eca:	8812      	ldrh	r2, [r2, #0]
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d903      	bls.n	8000ed8 <virtualWriteRegister+0x80>
		{
			printf("Sensor failed to respond \n\r");
 8000ed0:	480e      	ldr	r0, [pc, #56]	@ (8000f0c <virtualWriteRegister+0xb4>)
 8000ed2:	f003 fd61 	bl	8004998 <iprintf>
			return;
 8000ed6:	e014      	b.n	8000f02 <virtualWriteRegister+0xaa>
		}
		//Read slave I2C status to see if the write register is ready
		status = readRegister(AS7265X_STATUS_REG);
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f7ff fefd 	bl	8000cd8 <readRegister>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	72fb      	strb	r3, [r7, #11]
		if((status & AS7265X_TX_VALID) == 0) //New data may be written to WRITE register
 8000ee2:	7afb      	ldrb	r3, [r7, #11]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <virtualWriteRegister+0x9e>
		{
			break;
		}
		HAL_Delay(5); //Delay for 5 ms before checking for virtual register changes
 8000eee:	2005      	movs	r0, #5
 8000ef0:	f001 f9be 	bl	8002270 <HAL_Delay>
		if((HAL_GetTick() - startTime) > maxWaitTime)
 8000ef4:	e7e3      	b.n	8000ebe <virtualWriteRegister+0x66>
			break;
 8000ef6:	bf00      	nop
	}

	//Send the data to complete the operation
	writeRegister(AS7265X_WRITE_REG, dataToWrite);
 8000ef8:	79bb      	ldrb	r3, [r7, #6]
 8000efa:	4619      	mov	r1, r3
 8000efc:	2001      	movs	r0, #1
 8000efe:	f7ff fefe 	bl	8000cfe <writeRegister>
}
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	08005a38 	.word	0x08005a38

08000f10 <selectDevice>:

//As we read various registers we have to point at the master or first/second slave
static void selectDevice(uint8_t device)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	71fb      	strb	r3, [r7, #7]
	virtualWriteRegister(AS7265X_DEV_SELECT_CONTROL, device);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	204f      	movs	r0, #79	@ 0x4f
 8000f20:	f7ff ff9a 	bl	8000e58 <virtualWriteRegister>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <convertBytesToFloat>:

//Given 4 bytes (size of float and uint32_t) and returns the floating point value
float convertBytesToFloat(uint32_t myLong)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  float myFloat;
  memcpy(&myFloat, &myLong, 4); //Copy bytes into a float
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	60fb      	str	r3, [r7, #12]
  return myFloat;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	ee07 3a90 	vmov	s15, r3
}
 8000f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <getCalibratedValue>:
	return colorData;
}

//Given an address, read four consecutive bytes and return the floating point calibrated value
static float getCalibratedValue(uint8_t calAddress, uint8_t device)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	460a      	mov	r2, r1
 8000f56:	71fb      	strb	r3, [r7, #7]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	71bb      	strb	r3, [r7, #6]
	selectDevice(device);
 8000f5c:	79bb      	ldrb	r3, [r7, #6]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ffd6 	bl	8000f10 <selectDevice>

	uint8_t chan0, chan1, chan2, chan3;
	chan0 = virtualReadRegister(calAddress + 0);
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff0c 	bl	8000d84 <virtualReadRegister>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]
	chan1 = virtualReadRegister(calAddress + 1);
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	3301      	adds	r3, #1
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff04 	bl	8000d84 <virtualReadRegister>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	73bb      	strb	r3, [r7, #14]
	chan2 = virtualReadRegister(calAddress + 2);
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	3302      	adds	r3, #2
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fefc 	bl	8000d84 <virtualReadRegister>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	737b      	strb	r3, [r7, #13]
	chan3 = virtualReadRegister(calAddress + 3);
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	3303      	adds	r3, #3
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fef4 	bl	8000d84 <virtualReadRegister>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	733b      	strb	r3, [r7, #12]

	//Channel calibrated values are stored big-endian
	uint32_t calBytes = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
	calBytes |= ((uint32_t)chan0 << (8 * 3)); //bits 24-31
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	061b      	lsls	r3, r3, #24
 8000fa8:	68ba      	ldr	r2, [r7, #8]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	60bb      	str	r3, [r7, #8]
	calBytes |= ((uint32_t)chan1 << (8 * 2)); //bits 16-23
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	041b      	lsls	r3, r3, #16
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
	calBytes |= ((uint32_t)chan2 << (8 * 1)); //bits 8-15
 8000fb8:	7b7b      	ldrb	r3, [r7, #13]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	68ba      	ldr	r2, [r7, #8]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	60bb      	str	r3, [r7, #8]
	calBytes |= ((uint32_t)chan3 << (8 * 0)); //bits 0-7
 8000fc2:	7b3b      	ldrb	r3, [r7, #12]
 8000fc4:	68ba      	ldr	r2, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	60bb      	str	r3, [r7, #8]

	return convertBytesToFloat(calBytes);
 8000fca:	68b8      	ldr	r0, [r7, #8]
 8000fcc:	f7ff ffae 	bl	8000f2c <convertBytesToFloat>
 8000fd0:	eef0 7a40 	vmov.f32	s15, s0

4. 00000000 00000000 00000000 ZZZZZZZZ
a. 00000000 00000000 00000000 ZZZZZZZZ
b. calBytes = WWWWWWWW XXXXXXXX YYYYYYYY ZZZZZZZZ
*/
}
 8000fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <enableIndicator>:
	return average;
}

//Enable the on-board indicator LED on the NIR master device, Blue status LED
void enableIndicator()
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
	selectDevice(AS72651_NIR);
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f7ff ff93 	bl	8000f10 <selectDevice>

	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read existing state
 8000fea:	2007      	movs	r0, #7
 8000fec:	f7ff feca 	bl	8000d84 <virtualReadRegister>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	71fb      	strb	r3, [r7, #7]
	value |= (1U << 0); //Set ENABLE LED_INT bit (bit 0)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	71fb      	strb	r3, [r7, #7]
	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to enable the LED indicator
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	4619      	mov	r1, r3
 8001000:	2007      	movs	r0, #7
 8001002:	f7ff ff29 	bl	8000e58 <virtualWriteRegister>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <enableLED>:
	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to disable the LED indicator
}

//Enable the LED or bulb on a given device
void enableLED(uint8_t device)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b084      	sub	sp, #16
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	71fb      	strb	r3, [r7, #7]
	selectDevice(device);
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff78 	bl	8000f10 <selectDevice>

	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read existing state
 8001020:	2007      	movs	r0, #7
 8001022:	f7ff feaf 	bl	8000d84 <virtualReadRegister>
 8001026:	4603      	mov	r3, r0
 8001028:	73fb      	strb	r3, [r7, #15]
	value |= (1U << 3); //Set ENABLE LED_DRV bit (bit 3)
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	f043 0308 	orr.w	r3, r3, #8
 8001030:	73fb      	strb	r3, [r7, #15]
	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to enable the LED driver
 8001032:	7bfb      	ldrb	r3, [r7, #15]
 8001034:	4619      	mov	r1, r3
 8001036:	2007      	movs	r0, #7
 8001038:	f7ff ff0e 	bl	8000e58 <virtualWriteRegister>
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <disableLED>:

//Disable the LED or bulb on a given device
void disableLED(uint8_t device)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	selectDevice(device);
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff5d 	bl	8000f10 <selectDevice>

	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read existing state
 8001056:	2007      	movs	r0, #7
 8001058:	f7ff fe94 	bl	8000d84 <virtualReadRegister>
 800105c:	4603      	mov	r3, r0
 800105e:	73fb      	strb	r3, [r7, #15]
	value &= ~(1U << 3); //Reset ENABLE LED_DRV bit (bit 3)
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	f023 0308 	bic.w	r3, r3, #8
 8001066:	73fb      	strb	r3, [r7, #15]
	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to disable the LED driver
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	4619      	mov	r1, r3
 800106c:	2007      	movs	r0, #7
 800106e:	f7ff fef3 	bl	8000e58 <virtualWriteRegister>
}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <setGain>:
//Gain 0: 1x
//Gain 1: 3.7x (Default)
//Gain 2: 16x
//Gain 3: 64x
void setGain(uint8_t gain)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b084      	sub	sp, #16
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	71fb      	strb	r3, [r7, #7]
	if (gain > AS7265X_GAIN_64X)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	2b03      	cmp	r3, #3
 8001088:	d901      	bls.n	800108e <setGain+0x14>
	{
		gain = AS7265X_GAIN_64X;
 800108a:	2303      	movs	r3, #3
 800108c:	71fb      	strb	r3, [r7, #7]
	}
	uint8_t value = virtualReadRegister(AS7265X_CONFIG); //Read existing state
 800108e:	2004      	movs	r0, #4
 8001090:	f7ff fe78 	bl	8000d84 <virtualReadRegister>
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]
	value &= 0b11001111; //Clear GAIN bits
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800109e:	73fb      	strb	r3, [r7, #15]
	value |= (gain << 4); //Set GAIN bits with user's choice
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	011b      	lsls	r3, r3, #4
 80010a4:	b25a      	sxtb	r2, r3
 80010a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b25b      	sxtb	r3, r3
 80010ae:	73fb      	strb	r3, [r7, #15]

	virtualWriteRegister(AS7265X_CONFIG, value); //Write value to config register
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	4619      	mov	r1, r3
 80010b4:	2004      	movs	r0, #4
 80010b6:	f7ff fecf 	bl	8000e58 <virtualWriteRegister>
}
 80010ba:	bf00      	nop
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <setMeasurementMode>:
//Mode 0: 4 channels
//Mode 1: 4 channels
//Mode 2: All 6 channels (Default)
//Mode 3: One shot operation of mode 2
void setMeasurementMode(uint8_t mode)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	4603      	mov	r3, r0
 80010ca:	71fb      	strb	r3, [r7, #7]
	if (mode > AS7265X_MEASUREMENT_MODE_6CHAN_ONE_SHOT)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	2b03      	cmp	r3, #3
 80010d0:	d901      	bls.n	80010d6 <setMeasurementMode+0x14>
	{
		mode = AS7265X_MEASUREMENT_MODE_6CHAN_ONE_SHOT; //Limit mode to 2 bits
 80010d2:	2303      	movs	r3, #3
 80010d4:	71fb      	strb	r3, [r7, #7]
	}
	uint8_t value = virtualReadRegister(AS7265X_CONFIG); //Read existing state
 80010d6:	2004      	movs	r0, #4
 80010d8:	f7ff fe54 	bl	8000d84 <virtualReadRegister>
 80010dc:	4603      	mov	r3, r0
 80010de:	73fb      	strb	r3, [r7, #15]
	value &= 0b11110011; //Clear BANK bits
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	f023 030c 	bic.w	r3, r3, #12
 80010e6:	73fb      	strb	r3, [r7, #15]
	value |= (mode << 2); //Set BANK bits with user's choice
 80010e8:	79fb      	ldrb	r3, [r7, #7]
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	b25a      	sxtb	r2, r3
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	73fb      	strb	r3, [r7, #15]

	virtualWriteRegister(AS7265X_CONFIG, value); //Write value to config register
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	4619      	mov	r1, r3
 80010fc:	2004      	movs	r0, #4
 80010fe:	f7ff feab 	bl	8000e58 <virtualWriteRegister>
}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	0000      	movs	r0, r0
 800110c:	0000      	movs	r0, r0
	...

08001110 <setIntegrationCycles>:
//Set the Integration cycles with a byte from 0 - 255 to set the sensitivity
//Every 2.78ms of integration increases the resolution of the ADC by 2^10 = 1024 counts
//Longer integration time means a more accurate measurement
//16-bit ADC so full sensitivity scale is clamped at 2^16 = 65536
void setIntegrationCycles(uint8_t cycleValue)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
	if (cycleValue > 255)
	{
		cycleValue = 255; //Limit cycleValue to a byte 2^8 (0-255)
	}
	maxWaitTime = (int)((cycleValue + 1) * 2.78 * 1.5); //Wait for integration time + 50%
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	3301      	adds	r3, #1
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fb3a 	bl	8000798 <__aeabi_i2d>
 8001124:	a312      	add	r3, pc, #72	@ (adr r3, 8001170 <setIntegrationCycles+0x60>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	f7ff f8b9 	bl	80002a0 <__aeabi_dmul>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4610      	mov	r0, r2
 8001134:	4619      	mov	r1, r3
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <setIntegrationCycles+0x58>)
 800113c:	f7ff f8b0 	bl	80002a0 <__aeabi_dmul>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4610      	mov	r0, r2
 8001146:	4619      	mov	r1, r3
 8001148:	f7ff fb90 	bl	800086c <__aeabi_d2iz>
 800114c:	4603      	mov	r3, r0
 800114e:	b29a      	uxth	r2, r3
 8001150:	4b06      	ldr	r3, [pc, #24]	@ (800116c <setIntegrationCycles+0x5c>)
 8001152:	801a      	strh	r2, [r3, #0]

	virtualWriteRegister(AS7265X_INTEGRATION_TIME, cycleValue);
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	4619      	mov	r1, r3
 8001158:	2005      	movs	r0, #5
 800115a:	f7ff fe7d 	bl	8000e58 <virtualWriteRegister>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	3ff80000 	.word	0x3ff80000
 800116c:	20000000 	.word	0x20000000
 8001170:	a3d70a3d 	.word	0xa3d70a3d
 8001174:	40063d70 	.word	0x40063d70

08001178 <setLEDCurrent>:
//Current 0: 12.5mA (Default)
//Current 1: 25mA
//Current 2: 50mA
//Current 3: 100mA
void setLEDCurrent(uint8_t current, uint8_t device)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	460a      	mov	r2, r1
 8001182:	71fb      	strb	r3, [r7, #7]
 8001184:	4613      	mov	r3, r2
 8001186:	71bb      	strb	r3, [r7, #6]
	selectDevice(device);
 8001188:	79bb      	ldrb	r3, [r7, #6]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fec0 	bl	8000f10 <selectDevice>

	if (current > AS7265X_LED_CURRENT_LIMIT_100MA)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	2b03      	cmp	r3, #3
 8001194:	d901      	bls.n	800119a <setLEDCurrent+0x22>
	{
		current = AS7265X_LED_CURRENT_LIMIT_100MA;
 8001196:	2303      	movs	r3, #3
 8001198:	71fb      	strb	r3, [r7, #7]
	}
	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read existing state
 800119a:	2007      	movs	r0, #7
 800119c:	f7ff fdf2 	bl	8000d84 <virtualReadRegister>
 80011a0:	4603      	mov	r3, r0
 80011a2:	73fb      	strb	r3, [r7, #15]
	value &= 0b11001111; //Bitwise ANDing to reset LED current limit bits (bit5:4)
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80011aa:	73fb      	strb	r3, [r7, #15]
	value |= (current << 4); //Set LED current limit
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	011b      	lsls	r3, r3, #4
 80011b0:	b25a      	sxtb	r2, r3
 80011b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	b25b      	sxtb	r3, r3
 80011ba:	73fb      	strb	r3, [r7, #15]

	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to set the LED current limit
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	4619      	mov	r1, r3
 80011c0:	2007      	movs	r0, #7
 80011c2:	f7ff fe49 	bl	8000e58 <virtualWriteRegister>
}
 80011c6:	bf00      	nop
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <setIndicatorCurrent>:
//Current 0: 1mA
//Current 1: 2mA (Default)
//Current 2: 4mA
//Current 3: 8mA
void setIndicatorCurrent(uint8_t current)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	71fb      	strb	r3, [r7, #7]
	selectDevice(AS72651_NIR);
 80011d8:	2000      	movs	r0, #0
 80011da:	f7ff fe99 	bl	8000f10 <selectDevice>

	if (current > AS7265X_INDICATOR_CURRENT_LIMIT_8MA)
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	d901      	bls.n	80011e8 <setIndicatorCurrent+0x1a>
	{
		current = AS7265X_INDICATOR_CURRENT_LIMIT_8MA;
 80011e4:	2303      	movs	r3, #3
 80011e6:	71fb      	strb	r3, [r7, #7]
	}
	uint8_t value = virtualReadRegister(AS7265X_LED_CONFIG); //Read existing state
 80011e8:	2007      	movs	r0, #7
 80011ea:	f7ff fdcb 	bl	8000d84 <virtualReadRegister>
 80011ee:	4603      	mov	r3, r0
 80011f0:	73fb      	strb	r3, [r7, #15]
	value &= 0b11111001; //Bitwise ANDing to reset indicator current limit bits (bit2:1)
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	f023 0306 	bic.w	r3, r3, #6
 80011f8:	73fb      	strb	r3, [r7, #15]
	value |= (current << 1); //Set indicator current limit
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	b25a      	sxtb	r2, r3
 8001200:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001204:	4313      	orrs	r3, r2
 8001206:	b25b      	sxtb	r3, r3
 8001208:	73fb      	strb	r3, [r7, #15]

	virtualWriteRegister(AS7265X_LED_CONFIG, value); //Write value to LED config register to set the LED indicator current limit
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	4619      	mov	r1, r3
 800120e:	2007      	movs	r0, #7
 8001210:	f7ff fe22 	bl	8000e58 <virtualWriteRegister>
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <enableInterrupt>:

//Enable interrupt pin
void enableInterrupt()
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0

	uint8_t value = virtualReadRegister(AS7265X_CONFIG); //Read existing state
 8001222:	2004      	movs	r0, #4
 8001224:	f7ff fdae 	bl	8000d84 <virtualReadRegister>
 8001228:	4603      	mov	r3, r0
 800122a:	71fb      	strb	r3, [r7, #7]
	value |= (1U << 6); //Set INT bit (bit 6)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001232:	71fb      	strb	r3, [r7, #7]
	virtualWriteRegister(AS7265X_CONFIG, value); //Write value to config register to enable the interrupt pin
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	4619      	mov	r1, r3
 8001238:	2004      	movs	r0, #4
 800123a:	f7ff fe0d 	bl	8000e58 <virtualWriteRegister>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <getCalibratedA>:
}

/* Obtaining the various calibrated light readings */
//UV Readings
float getCalibratedA()
{
 8001246:	b580      	push	{r7, lr}
 8001248:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_R_G_A, AS72653_UV));
 800124a:	2102      	movs	r1, #2
 800124c:	2014      	movs	r0, #20
 800124e:	f7ff fe7d 	bl	8000f4c <getCalibratedValue>
 8001252:	eef0 7a40 	vmov.f32	s15, s0
}
 8001256:	eeb0 0a67 	vmov.f32	s0, s15
 800125a:	bd80      	pop	{r7, pc}

0800125c <getCalibratedB>:
float getCalibratedB()
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_S_H_B, AS72653_UV));
 8001260:	2102      	movs	r1, #2
 8001262:	2018      	movs	r0, #24
 8001264:	f7ff fe72 	bl	8000f4c <getCalibratedValue>
 8001268:	eef0 7a40 	vmov.f32	s15, s0
}
 800126c:	eeb0 0a67 	vmov.f32	s0, s15
 8001270:	bd80      	pop	{r7, pc}

08001272 <getCalibratedC>:
float getCalibratedC()
{
 8001272:	b580      	push	{r7, lr}
 8001274:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_T_I_C, AS72653_UV));
 8001276:	2102      	movs	r1, #2
 8001278:	201c      	movs	r0, #28
 800127a:	f7ff fe67 	bl	8000f4c <getCalibratedValue>
 800127e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001282:	eeb0 0a67 	vmov.f32	s0, s15
 8001286:	bd80      	pop	{r7, pc}

08001288 <getCalibratedD>:
float getCalibratedD()
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_U_J_D, AS72653_UV));
 800128c:	2102      	movs	r1, #2
 800128e:	2020      	movs	r0, #32
 8001290:	f7ff fe5c 	bl	8000f4c <getCalibratedValue>
 8001294:	eef0 7a40 	vmov.f32	s15, s0
}
 8001298:	eeb0 0a67 	vmov.f32	s0, s15
 800129c:	bd80      	pop	{r7, pc}

0800129e <getCalibratedE>:
float getCalibratedE()
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_V_K_E, AS72653_UV));
 80012a2:	2102      	movs	r1, #2
 80012a4:	2024      	movs	r0, #36	@ 0x24
 80012a6:	f7ff fe51 	bl	8000f4c <getCalibratedValue>
 80012aa:	eef0 7a40 	vmov.f32	s15, s0
}
 80012ae:	eeb0 0a67 	vmov.f32	s0, s15
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <getCalibratedF>:
float getCalibratedF()
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_W_L_F, AS72653_UV));
 80012b8:	2102      	movs	r1, #2
 80012ba:	2028      	movs	r0, #40	@ 0x28
 80012bc:	f7ff fe46 	bl	8000f4c <getCalibratedValue>
 80012c0:	eef0 7a40 	vmov.f32	s15, s0
}
 80012c4:	eeb0 0a67 	vmov.f32	s0, s15
 80012c8:	bd80      	pop	{r7, pc}

080012ca <getCalibratedG>:

//VISIBLE Readings
float getCalibratedG()
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_R_G_A, AS72652_VISIBLE));
 80012ce:	2101      	movs	r1, #1
 80012d0:	2014      	movs	r0, #20
 80012d2:	f7ff fe3b 	bl	8000f4c <getCalibratedValue>
 80012d6:	eef0 7a40 	vmov.f32	s15, s0
}
 80012da:	eeb0 0a67 	vmov.f32	s0, s15
 80012de:	bd80      	pop	{r7, pc}

080012e0 <getCalibratedH>:
float getCalibratedH()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_S_H_B, AS72652_VISIBLE));
 80012e4:	2101      	movs	r1, #1
 80012e6:	2018      	movs	r0, #24
 80012e8:	f7ff fe30 	bl	8000f4c <getCalibratedValue>
 80012ec:	eef0 7a40 	vmov.f32	s15, s0
}
 80012f0:	eeb0 0a67 	vmov.f32	s0, s15
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <getCalibratedI>:
float getCalibratedI()
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_T_I_C, AS72652_VISIBLE));
 80012fa:	2101      	movs	r1, #1
 80012fc:	201c      	movs	r0, #28
 80012fe:	f7ff fe25 	bl	8000f4c <getCalibratedValue>
 8001302:	eef0 7a40 	vmov.f32	s15, s0
}
 8001306:	eeb0 0a67 	vmov.f32	s0, s15
 800130a:	bd80      	pop	{r7, pc}

0800130c <getCalibratedJ>:
float getCalibratedJ()
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_U_J_D, AS72652_VISIBLE));
 8001310:	2101      	movs	r1, #1
 8001312:	2020      	movs	r0, #32
 8001314:	f7ff fe1a 	bl	8000f4c <getCalibratedValue>
 8001318:	eef0 7a40 	vmov.f32	s15, s0
}
 800131c:	eeb0 0a67 	vmov.f32	s0, s15
 8001320:	bd80      	pop	{r7, pc}

08001322 <getCalibratedL>:
float getCalibratedK()
{
	return (getCalibratedValue(AS7265X_CAL_V_K_E, AS72652_VISIBLE));
}
float getCalibratedL()
{
 8001322:	b580      	push	{r7, lr}
 8001324:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_W_L_F, AS72652_VISIBLE));
 8001326:	2101      	movs	r1, #1
 8001328:	2028      	movs	r0, #40	@ 0x28
 800132a:	f7ff fe0f 	bl	8000f4c <getCalibratedValue>
 800132e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001332:	eeb0 0a67 	vmov.f32	s0, s15
 8001336:	bd80      	pop	{r7, pc}

08001338 <getCalibratedR>:

//NIR Readings
float getCalibratedR()
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_R_G_A, AS72651_NIR));
 800133c:	2100      	movs	r1, #0
 800133e:	2014      	movs	r0, #20
 8001340:	f7ff fe04 	bl	8000f4c <getCalibratedValue>
 8001344:	eef0 7a40 	vmov.f32	s15, s0
}
 8001348:	eeb0 0a67 	vmov.f32	s0, s15
 800134c:	bd80      	pop	{r7, pc}

0800134e <getCalibratedS>:
float getCalibratedS()
{
 800134e:	b580      	push	{r7, lr}
 8001350:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_S_H_B, AS72651_NIR));
 8001352:	2100      	movs	r1, #0
 8001354:	2018      	movs	r0, #24
 8001356:	f7ff fdf9 	bl	8000f4c <getCalibratedValue>
 800135a:	eef0 7a40 	vmov.f32	s15, s0
}
 800135e:	eeb0 0a67 	vmov.f32	s0, s15
 8001362:	bd80      	pop	{r7, pc}

08001364 <getCalibratedT>:
float getCalibratedT()
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_T_I_C, AS72651_NIR));
 8001368:	2100      	movs	r1, #0
 800136a:	201c      	movs	r0, #28
 800136c:	f7ff fdee 	bl	8000f4c <getCalibratedValue>
 8001370:	eef0 7a40 	vmov.f32	s15, s0
}
 8001374:	eeb0 0a67 	vmov.f32	s0, s15
 8001378:	bd80      	pop	{r7, pc}

0800137a <getCalibratedU>:
float getCalibratedU()
{
 800137a:	b580      	push	{r7, lr}
 800137c:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_U_J_D, AS72651_NIR));
 800137e:	2100      	movs	r1, #0
 8001380:	2020      	movs	r0, #32
 8001382:	f7ff fde3 	bl	8000f4c <getCalibratedValue>
 8001386:	eef0 7a40 	vmov.f32	s15, s0
}
 800138a:	eeb0 0a67 	vmov.f32	s0, s15
 800138e:	bd80      	pop	{r7, pc}

08001390 <getCalibratedV>:
float getCalibratedV()
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_V_K_E, AS72651_NIR));
 8001394:	2100      	movs	r1, #0
 8001396:	2024      	movs	r0, #36	@ 0x24
 8001398:	f7ff fdd8 	bl	8000f4c <getCalibratedValue>
 800139c:	eef0 7a40 	vmov.f32	s15, s0
}
 80013a0:	eeb0 0a67 	vmov.f32	s0, s15
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <getCalibratedW>:
float getCalibratedW()
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	af00      	add	r7, sp, #0
	return (getCalibratedValue(AS7265X_CAL_W_L_F, AS72651_NIR));
 80013aa:	2100      	movs	r1, #0
 80013ac:	2028      	movs	r0, #40	@ 0x28
 80013ae:	f7ff fdcd 	bl	8000f4c <getCalibratedValue>
 80013b2:	eef0 7a40 	vmov.f32	s15, s0
}
 80013b6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ba:	bd80      	pop	{r7, pc}

080013bc <I2C1_Init>:
//#define	SR1_BTF					(1U<<2)
//#define SR1_AF					(1U<<10)


void I2C1_Init(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOB*/
	RCC->AHB1ENR |= GPIOBEN;
 80013c0:	4b4d      	ldr	r3, [pc, #308]	@ (80014f8 <I2C1_Init+0x13c>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c4:	4a4c      	ldr	r2, [pc, #304]	@ (80014f8 <I2C1_Init+0x13c>)
 80013c6:	f043 0302 	orr.w	r3, r3, #2
 80013ca:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PB8 and PB9 mode to alternate function*/
	GPIOB->MODER &= ~(1U<<16);
 80013cc:	4b4b      	ldr	r3, [pc, #300]	@ (80014fc <I2C1_Init+0x140>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a4a      	ldr	r2, [pc, #296]	@ (80014fc <I2C1_Init+0x140>)
 80013d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013d6:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<17);
 80013d8:	4b48      	ldr	r3, [pc, #288]	@ (80014fc <I2C1_Init+0x140>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a47      	ldr	r2, [pc, #284]	@ (80014fc <I2C1_Init+0x140>)
 80013de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013e2:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~(1U<<18);
 80013e4:	4b45      	ldr	r3, [pc, #276]	@ (80014fc <I2C1_Init+0x140>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a44      	ldr	r2, [pc, #272]	@ (80014fc <I2C1_Init+0x140>)
 80013ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ee:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<19);
 80013f0:	4b42      	ldr	r3, [pc, #264]	@ (80014fc <I2C1_Init+0x140>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a41      	ldr	r2, [pc, #260]	@ (80014fc <I2C1_Init+0x140>)
 80013f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013fa:	6013      	str	r3, [r2, #0]

	/*Set PB8 and PB9 output type to  open drain*/
	GPIOB->OTYPER |= (1U<<8);
 80013fc:	4b3f      	ldr	r3, [pc, #252]	@ (80014fc <I2C1_Init+0x140>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	4a3e      	ldr	r2, [pc, #248]	@ (80014fc <I2C1_Init+0x140>)
 8001402:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001406:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (1U<<9);
 8001408:	4b3c      	ldr	r3, [pc, #240]	@ (80014fc <I2C1_Init+0x140>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	4a3b      	ldr	r2, [pc, #236]	@ (80014fc <I2C1_Init+0x140>)
 800140e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001412:	6053      	str	r3, [r2, #4]

	/*Enable Pull-up for PB8 and PB9*/
	GPIOB->PUPDR |= (1U<<16);
 8001414:	4b39      	ldr	r3, [pc, #228]	@ (80014fc <I2C1_Init+0x140>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	4a38      	ldr	r2, [pc, #224]	@ (80014fc <I2C1_Init+0x140>)
 800141a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800141e:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<17);
 8001420:	4b36      	ldr	r3, [pc, #216]	@ (80014fc <I2C1_Init+0x140>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	4a35      	ldr	r2, [pc, #212]	@ (80014fc <I2C1_Init+0x140>)
 8001426:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800142a:	60d3      	str	r3, [r2, #12]

	GPIOB->PUPDR |= (1U<<18);
 800142c:	4b33      	ldr	r3, [pc, #204]	@ (80014fc <I2C1_Init+0x140>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	4a32      	ldr	r2, [pc, #200]	@ (80014fc <I2C1_Init+0x140>)
 8001432:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001436:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<19);
 8001438:	4b30      	ldr	r3, [pc, #192]	@ (80014fc <I2C1_Init+0x140>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	4a2f      	ldr	r2, [pc, #188]	@ (80014fc <I2C1_Init+0x140>)
 800143e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8001442:	60d3      	str	r3, [r2, #12]

	/*Set PB9 and PB9 alternate function type to I2C (AF4)
	 * PB8 --> SCL
	 * PB9 --> SDA*/
	GPIOB->AFR[1] &= ~(1U<<0);
 8001444:	4b2d      	ldr	r3, [pc, #180]	@ (80014fc <I2C1_Init+0x140>)
 8001446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001448:	4a2c      	ldr	r2, [pc, #176]	@ (80014fc <I2C1_Init+0x140>)
 800144a:	f023 0301 	bic.w	r3, r3, #1
 800144e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &= ~(1U<<1);
 8001450:	4b2a      	ldr	r3, [pc, #168]	@ (80014fc <I2C1_Init+0x140>)
 8001452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001454:	4a29      	ldr	r2, [pc, #164]	@ (80014fc <I2C1_Init+0x140>)
 8001456:	f023 0302 	bic.w	r3, r3, #2
 800145a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (1U<<2);
 800145c:	4b27      	ldr	r3, [pc, #156]	@ (80014fc <I2C1_Init+0x140>)
 800145e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001460:	4a26      	ldr	r2, [pc, #152]	@ (80014fc <I2C1_Init+0x140>)
 8001462:	f043 0304 	orr.w	r3, r3, #4
 8001466:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &= ~(1U<<3);
 8001468:	4b24      	ldr	r3, [pc, #144]	@ (80014fc <I2C1_Init+0x140>)
 800146a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146c:	4a23      	ldr	r2, [pc, #140]	@ (80014fc <I2C1_Init+0x140>)
 800146e:	f023 0308 	bic.w	r3, r3, #8
 8001472:	6253      	str	r3, [r2, #36]	@ 0x24

	GPIOB->AFR[1] &= ~(1U<<4);
 8001474:	4b21      	ldr	r3, [pc, #132]	@ (80014fc <I2C1_Init+0x140>)
 8001476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001478:	4a20      	ldr	r2, [pc, #128]	@ (80014fc <I2C1_Init+0x140>)
 800147a:	f023 0310 	bic.w	r3, r3, #16
 800147e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &= ~(1U<<5);
 8001480:	4b1e      	ldr	r3, [pc, #120]	@ (80014fc <I2C1_Init+0x140>)
 8001482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001484:	4a1d      	ldr	r2, [pc, #116]	@ (80014fc <I2C1_Init+0x140>)
 8001486:	f023 0320 	bic.w	r3, r3, #32
 800148a:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (1U<<6);
 800148c:	4b1b      	ldr	r3, [pc, #108]	@ (80014fc <I2C1_Init+0x140>)
 800148e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001490:	4a1a      	ldr	r2, [pc, #104]	@ (80014fc <I2C1_Init+0x140>)
 8001492:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001496:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] &= ~(1U<<7);
 8001498:	4b18      	ldr	r3, [pc, #96]	@ (80014fc <I2C1_Init+0x140>)
 800149a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800149c:	4a17      	ldr	r2, [pc, #92]	@ (80014fc <I2C1_Init+0x140>)
 800149e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80014a2:	6253      	str	r3, [r2, #36]	@ 0x24

	/***Configuring I2C1***/

	/*Enable clock access to I2C1*/
	RCC->APB1ENR |= I2C1EN;
 80014a4:	4b14      	ldr	r3, [pc, #80]	@ (80014f8 <I2C1_Init+0x13c>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a8:	4a13      	ldr	r2, [pc, #76]	@ (80014f8 <I2C1_Init+0x13c>)
 80014aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80014ae:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Enter reset mode  */
	I2C1->CR1 |= (1U<<15);
 80014b0:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <I2C1_Init+0x144>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a12      	ldr	r2, [pc, #72]	@ (8001500 <I2C1_Init+0x144>)
 80014b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014ba:	6013      	str	r3, [r2, #0]

	/*Come out of reset mode  */
	I2C1->CR1 &= ~(1U<<15);
 80014bc:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <I2C1_Init+0x144>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001500 <I2C1_Init+0x144>)
 80014c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80014c6:	6013      	str	r3, [r2, #0]

	/*Set Peripheral clock frequency*/
	I2C1->CR2 = (1U<<4);   //16 Mhz
 80014c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001500 <I2C1_Init+0x144>)
 80014ca:	2210      	movs	r2, #16
 80014cc:	605a      	str	r2, [r3, #4]
//
//	/*Set rise time */
//	I2C1->TRISE = SD_MODE_MAX_RISE_TIME; //(1000ns/(1/16MHz)+1 = 17

	/*Set I2C to fast mode, 400kHz clock */
	I2C1->CCR = 1; //Refer to ST reference manual for derivation
 80014ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <I2C1_Init+0x144>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	61da      	str	r2, [r3, #28]
	I2C1->CCR = I2C_FAST_DUTY; //Set to Fast mode and duty cycle of 16/9
 80014d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001500 <I2C1_Init+0x144>)
 80014d6:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80014da:	61da      	str	r2, [r3, #28]

	/*Set rise time */
	I2C1->TRISE = 6;//FS_MODE_MAX_RISE_TIME; //(300ns/(1/16MHz)+1 = 5.8
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <I2C1_Init+0x144>)
 80014de:	2206      	movs	r2, #6
 80014e0:	621a      	str	r2, [r3, #32]

	/*Enable I2C1 module */
	I2C1->CR1 |= CR1_PE;
 80014e2:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <I2C1_Init+0x144>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a06      	ldr	r2, [pc, #24]	@ (8001500 <I2C1_Init+0x144>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6013      	str	r3, [r2, #0]
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020400 	.word	0x40020400
 8001500:	40005400 	.word	0x40005400

08001504 <I2C1_byteRead>:

void I2C1_byteRead(char saddr, char maddr, char* data) {
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	603a      	str	r2, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
 8001510:	460b      	mov	r3, r1
 8001512:	71bb      	strb	r3, [r7, #6]

	  volatile int tmp;

	  /* Wait until bus not busy */
	  while (I2C1->SR2 & (SR2_BUSY)){}
 8001514:	bf00      	nop
 8001516:	4b37      	ldr	r3, [pc, #220]	@ (80015f4 <I2C1_byteRead+0xf0>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f9      	bne.n	8001516 <I2C1_byteRead+0x12>

	  /* Generate start condition */
	  I2C1->CR1 |= CR1_START;
 8001522:	4b34      	ldr	r3, [pc, #208]	@ (80015f4 <I2C1_byteRead+0xf0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a33      	ldr	r2, [pc, #204]	@ (80015f4 <I2C1_byteRead+0xf0>)
 8001528:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800152c:	6013      	str	r3, [r2, #0]

	  /* Wait until start condition flag is set, note the negation */
	  /* Stay in loop if start flag is not set */
	  while (!(I2C1->SR1 & (SR1_SB))){}
 800152e:	bf00      	nop
 8001530:	4b30      	ldr	r3, [pc, #192]	@ (80015f4 <I2C1_byteRead+0xf0>)
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	d0f9      	beq.n	8001530 <I2C1_byteRead+0x2c>

	  /* Transmit slave address + Write (0) */
	  /* This slave address is sent to each slave device along with an indication to establish either read or write communication */
	  /* Yo device A, I want to write to one of your memory registers */
	  I2C1->DR = saddr << 1; // shifting the address left makes room for the R/W bit, which is 0 for write
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	4a2d      	ldr	r2, [pc, #180]	@ (80015f4 <I2C1_byteRead+0xf0>)
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	6113      	str	r3, [r2, #16]

	  /* Wait until address flag is set */
	  /* Each slave device compares the address from master to its own address and sends an ACK if matched */
	  /* I'm device A and of course you can write to one of my registers */
	  while (!(I2C1->SR1 & (SR1_ADDR))){}
 8001544:	bf00      	nop
 8001546:	4b2b      	ldr	r3, [pc, #172]	@ (80015f4 <I2C1_byteRead+0xf0>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f9      	beq.n	8001546 <I2C1_byteRead+0x42>

	  /* Clear address flag by reading SR2 register */
	  tmp = I2C1->SR2;
 8001552:	4b28      	ldr	r3, [pc, #160]	@ (80015f4 <I2C1_byteRead+0xf0>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	60fb      	str	r3, [r7, #12]

	  /*Wait until transmitter empty */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 8001558:	bf00      	nop
 800155a:	4b26      	ldr	r3, [pc, #152]	@ (80015f4 <I2C1_byteRead+0xf0>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f9      	beq.n	800155a <I2C1_byteRead+0x56>

	  /* Send register address */
	  /* Aight, here is the location I writing to read from */
	  I2C1->DR = maddr;
 8001566:	4a23      	ldr	r2, [pc, #140]	@ (80015f4 <I2C1_byteRead+0xf0>)
 8001568:	79bb      	ldrb	r3, [r7, #6]
 800156a:	6113      	str	r3, [r2, #16]

	  /*Wait until transmitter empty */
	  /* No probs */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 800156c:	bf00      	nop
 800156e:	4b21      	ldr	r3, [pc, #132]	@ (80015f4 <I2C1_byteRead+0xf0>)
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001576:	2b00      	cmp	r3, #0
 8001578:	d0f9      	beq.n	800156e <I2C1_byteRead+0x6a>

	 /* Begin actual reading process once slave device and register of interest are understood between master and slave*/
	 /*Generate restart */
	 I2C1->CR1 |= CR1_START;
 800157a:	4b1e      	ldr	r3, [pc, #120]	@ (80015f4 <I2C1_byteRead+0xf0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a1d      	ldr	r2, [pc, #116]	@ (80015f4 <I2C1_byteRead+0xf0>)
 8001580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001584:	6013      	str	r3, [r2, #0]

	 /* Wait until start flag is set */
	 while (!(I2C1->SR1 & SR1_SB)){}
 8001586:	bf00      	nop
 8001588:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <I2C1_byteRead+0xf0>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f9      	beq.n	8001588 <I2C1_byteRead+0x84>

	 /* Transmit slave address + Read */
	 I2C1->DR = saddr << 1 | 1;
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	f043 0201 	orr.w	r2, r3, #1
 800159c:	4b15      	ldr	r3, [pc, #84]	@ (80015f4 <I2C1_byteRead+0xf0>)
 800159e:	611a      	str	r2, [r3, #16]

	 /* Wait until addr flag is set */
	 while (!(I2C1->SR1 & (SR1_ADDR))){}
 80015a0:	bf00      	nop
 80015a2:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <I2C1_byteRead+0xf0>)
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f9      	beq.n	80015a2 <I2C1_byteRead+0x9e>

	 /* Clear addr flag */
	 tmp = I2C1->SR2;
 80015ae:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <I2C1_byteRead+0xf0>)
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	60fb      	str	r3, [r7, #12]

	 /* Disable Acknowledge */
	 I2C1->CR1 &= ~CR1_ACK;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <I2C1_byteRead+0xf0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0e      	ldr	r2, [pc, #56]	@ (80015f4 <I2C1_byteRead+0xf0>)
 80015ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80015be:	6013      	str	r3, [r2, #0]

	 /* Generate stop after data received */
	 I2C1->CR1 |= CR1_STOP;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <I2C1_byteRead+0xf0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0b      	ldr	r2, [pc, #44]	@ (80015f4 <I2C1_byteRead+0xf0>)
 80015c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015ca:	6013      	str	r3, [r2, #0]

	 /* Wait until RXNE flag is set */
	 while (!(I2C1->SR1 & SR1_RXNE)){}
 80015cc:	bf00      	nop
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <I2C1_byteRead+0xf0>)
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0f9      	beq.n	80015ce <I2C1_byteRead+0xca>

	 /* Read data from DR */
	 *data++ = I2C1->DR;
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <I2C1_byteRead+0xf0>)
 80015dc:	6919      	ldr	r1, [r3, #16]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	1c5a      	adds	r2, r3, #1
 80015e2:	603a      	str	r2, [r7, #0]
 80015e4:	b2ca      	uxtb	r2, r1
 80015e6:	701a      	strb	r2, [r3, #0]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	40005400 	.word	0x40005400

080015f8 <I2C1_burstWrite>:
		 }
	 }

}

void I2C1_burstWrite(char saddr, char maddr, int n, char* data) {
 80015f8:	b480      	push	{r7}
 80015fa:	b087      	sub	sp, #28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60ba      	str	r2, [r7, #8]
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	4603      	mov	r3, r0
 8001604:	73fb      	strb	r3, [r7, #15]
 8001606:	460b      	mov	r3, r1
 8001608:	73bb      	strb	r3, [r7, #14]

	/* Temporary variable to read SR2*/
	volatile int tmp;

	/* Wait until bus not busy */
	while (I2C1->SR2 & (SR2_BUSY)){}
 800160a:	bf00      	nop
 800160c:	4b2a      	ldr	r3, [pc, #168]	@ (80016b8 <I2C1_burstWrite+0xc0>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f9      	bne.n	800160c <I2C1_burstWrite+0x14>

	/* Generate start condition */
	I2C1->CR1 |= CR1_START;
 8001618:	4b27      	ldr	r3, [pc, #156]	@ (80016b8 <I2C1_burstWrite+0xc0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a26      	ldr	r2, [pc, #152]	@ (80016b8 <I2C1_burstWrite+0xc0>)
 800161e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001622:	6013      	str	r3, [r2, #0]

	/* Wait until start condition flag is set, note the negation */
	/* Stay in loop if start flag is not set*/
	while (!(I2C1->SR1 & (SR1_SB))){}
 8001624:	bf00      	nop
 8001626:	4b24      	ldr	r3, [pc, #144]	@ (80016b8 <I2C1_burstWrite+0xc0>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f9      	beq.n	8001626 <I2C1_burstWrite+0x2e>

	/* Transmit slave address + Write (0) */
	/* This slave address is sent to each slave device along with an indication to establish either read or write communication*/
	/* Yo device A, I want to write to one of your memory registers */
	I2C1->DR = saddr << 1; // shifting the address left makes room for the R/W bit, which is 0 for write
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	4a20      	ldr	r2, [pc, #128]	@ (80016b8 <I2C1_burstWrite+0xc0>)
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	6113      	str	r3, [r2, #16]

	/* Wait until address flag is set */
	/* Each slave device compares the address from master to its own adress and sends an ACK if mathced*/
	/* I'm device A and of course you can write to one of my registers */
	while (!(I2C1->SR1 & (SR1_ADDR))){}
 800163a:	bf00      	nop
 800163c:	4b1e      	ldr	r3, [pc, #120]	@ (80016b8 <I2C1_burstWrite+0xc0>)
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d0f9      	beq.n	800163c <I2C1_burstWrite+0x44>

	/* Clear address flag by reading SR2 register */
	tmp = I2C1->SR2;
 8001648:	4b1b      	ldr	r3, [pc, #108]	@ (80016b8 <I2C1_burstWrite+0xc0>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	613b      	str	r3, [r7, #16]

	/*Wait until data register empty */
	while (!(I2C1->SR1 & SR1_TXE)){}
 800164e:	bf00      	nop
 8001650:	4b19      	ldr	r3, [pc, #100]	@ (80016b8 <I2C1_burstWrite+0xc0>)
 8001652:	695b      	ldr	r3, [r3, #20]
 8001654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f9      	beq.n	8001650 <I2C1_burstWrite+0x58>

	/* Send register address */
	/* aight here is the register I'm writing to write to and the value I want written */
	I2C1->DR = maddr;
 800165c:	4a16      	ldr	r2, [pc, #88]	@ (80016b8 <I2C1_burstWrite+0xc0>)
 800165e:	7bbb      	ldrb	r3, [r7, #14]
 8001660:	6113      	str	r3, [r2, #16]

	for (int i = 0; i < n; i++) {
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
 8001666:	e00f      	b.n	8001688 <I2C1_burstWrite+0x90>

		/*Wait until data register empty */
		while (!(I2C1->SR1 & SR1_TXE)){}
 8001668:	bf00      	nop
 800166a:	4b13      	ldr	r3, [pc, #76]	@ (80016b8 <I2C1_burstWrite+0xc0>)
 800166c:	695b      	ldr	r3, [r3, #20]
 800166e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f9      	beq.n	800166a <I2C1_burstWrite+0x72>

		/* Transmit memory address */
		I2C1->DR = *data++;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	1c5a      	adds	r2, r3, #1
 800167a:	607a      	str	r2, [r7, #4]
 800167c:	781a      	ldrb	r2, [r3, #0]
 800167e:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <I2C1_burstWrite+0xc0>)
 8001680:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < n; i++) {
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	3301      	adds	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	429a      	cmp	r2, r3
 800168e:	dbeb      	blt.n	8001668 <I2C1_burstWrite+0x70>
	}
	/* Wait until transfer finished */
	while (!(I2C1->SR1 & (SR1_BTF))){}
 8001690:	bf00      	nop
 8001692:	4b09      	ldr	r3, [pc, #36]	@ (80016b8 <I2C1_burstWrite+0xc0>)
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f003 0304 	and.w	r3, r3, #4
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f9      	beq.n	8001692 <I2C1_burstWrite+0x9a>

	/* Generate stop */
	I2C1->CR1 |= CR1_STOP;
 800169e:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <I2C1_burstWrite+0xc0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a05      	ldr	r2, [pc, #20]	@ (80016b8 <I2C1_burstWrite+0xc0>)
 80016a4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016a8:	6013      	str	r3, [r2, #0]
}
 80016aa:	bf00      	nop
 80016ac:	371c      	adds	r7, #28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40005400 	.word	0x40005400

080016bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b0b8      	sub	sp, #224	@ 0xe0
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c2:	f000 fd63 	bl	800218c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c6:	f000 f8ff 	bl	80018c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ca:	f000 fa0d 	bl	8001ae8 <MX_GPIO_Init>
  MX_ETH_Init();
 80016ce:	f000 f965 	bl	800199c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80016d2:	f000 f9b1 	bl	8001a38 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80016d6:	f000 f9d9 	bl	8001a8c <MX_USB_OTG_FS_PCD_Init>
  float channel_data_cal[NUM_CHANNELS];

  char uart_buf[100];
  int uart_buf_len;

  int works = begin();
 80016da:	f7ff fa67 	bl	8000bac <begin>
 80016de:	4603      	mov	r3, r0
 80016e0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  uart_buf_len = sprintf(uart_buf, "Startup complete\n"); // end line
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	4973      	ldr	r1, [pc, #460]	@ (80018b4 <main+0x1f8>)
 80016e8:	4618      	mov	r0, r3
 80016ea:	f003 f967 	bl	80049bc <siprintf>
 80016ee:	f8c7 00dc 	str.w	r0, [r7, #220]	@ 0xdc
  HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100); // transmits the data
 80016f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	1d39      	adds	r1, r7, #4
 80016fa:	2364      	movs	r3, #100	@ 0x64
 80016fc:	486e      	ldr	r0, [pc, #440]	@ (80018b8 <main+0x1fc>)
 80016fe:	f002 f9cd 	bl	8003a9c <HAL_UART_Transmit>

  HAL_Delay(100);
 8001702:	2064      	movs	r0, #100	@ 0x64
 8001704:	f000 fdb4 	bl	8002270 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  // Calibrated Channels
	  	enableLED(AS7265x_LED_UV);
 8001708:	2002      	movs	r0, #2
 800170a:	f7ff fc80 	bl	800100e <enableLED>
	  	HAL_Delay(3000);
 800170e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001712:	f000 fdad 	bl	8002270 <HAL_Delay>
	  	channel_data_cal[0] = getCalibratedA();
 8001716:	f7ff fd96 	bl	8001246 <getCalibratedA>
 800171a:	eef0 7a40 	vmov.f32	s15, s0
 800171e:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	  	channel_data_cal[1] = getCalibratedB();
 8001722:	f7ff fd9b 	bl	800125c <getCalibratedB>
 8001726:	eef0 7a40 	vmov.f32	s15, s0
 800172a:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	  	channel_data_cal[2] = getCalibratedC();
 800172e:	f7ff fda0 	bl	8001272 <getCalibratedC>
 8001732:	eef0 7a40 	vmov.f32	s15, s0
 8001736:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
	  	channel_data_cal[3] = getCalibratedD();
 800173a:	f7ff fda5 	bl	8001288 <getCalibratedD>
 800173e:	eef0 7a40 	vmov.f32	s15, s0
 8001742:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
	  	channel_data_cal[4] = getCalibratedE();
 8001746:	f7ff fdaa 	bl	800129e <getCalibratedE>
 800174a:	eef0 7a40 	vmov.f32	s15, s0
 800174e:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
	  	channel_data_cal[5] = getCalibratedF();
 8001752:	f7ff fdaf 	bl	80012b4 <getCalibratedF>
 8001756:	eef0 7a40 	vmov.f32	s15, s0
 800175a:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
	  	disableLED(AS7265x_LED_UV);
 800175e:	2002      	movs	r0, #2
 8001760:	f7ff fc70 	bl	8001044 <disableLED>

	  	enableLED(AS7265x_LED_WHITE);
 8001764:	2000      	movs	r0, #0
 8001766:	f7ff fc52 	bl	800100e <enableLED>
	  	HAL_Delay(3000);
 800176a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800176e:	f000 fd7f 	bl	8002270 <HAL_Delay>
	  	channel_data_cal[6] = getCalibratedG();
 8001772:	f7ff fdaa 	bl	80012ca <getCalibratedG>
 8001776:	eef0 7a40 	vmov.f32	s15, s0
 800177a:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
	  	channel_data_cal[7] = getCalibratedH();
 800177e:	f7ff fdaf 	bl	80012e0 <getCalibratedH>
 8001782:	eef0 7a40 	vmov.f32	s15, s0
 8001786:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
	  	channel_data_cal[9] = getCalibratedI();
 800178a:	f7ff fdb4 	bl	80012f6 <getCalibratedI>
 800178e:	eef0 7a40 	vmov.f32	s15, s0
 8001792:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
	  	channel_data_cal[11] = getCalibratedJ();
 8001796:	f7ff fdb9 	bl	800130c <getCalibratedJ>
 800179a:	eef0 7a40 	vmov.f32	s15, s0
 800179e:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
	  	channel_data_cal[16] = getCalibratedL();
 80017a2:	f7ff fdbe 	bl	8001322 <getCalibratedL>
 80017a6:	eef0 7a40 	vmov.f32	s15, s0
 80017aa:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
	  	channel_data_cal[17] = getCalibratedL();
 80017ae:	f7ff fdb8 	bl	8001322 <getCalibratedL>
 80017b2:	eef0 7a40 	vmov.f32	s15, s0
 80017b6:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
	  	disableLED(AS7265x_LED_WHITE);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f7ff fc42 	bl	8001044 <disableLED>

	  	enableLED(AS7265x_LED_IR);
 80017c0:	2001      	movs	r0, #1
 80017c2:	f7ff fc24 	bl	800100e <enableLED>
	  	HAL_Delay(3000);
 80017c6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80017ca:	f000 fd51 	bl	8002270 <HAL_Delay>
	  	channel_data_cal[8] = getCalibratedR();
 80017ce:	f7ff fdb3 	bl	8001338 <getCalibratedR>
 80017d2:	eef0 7a40 	vmov.f32	s15, s0
 80017d6:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
	  	channel_data_cal[10] = getCalibratedS();
 80017da:	f7ff fdb8 	bl	800134e <getCalibratedS>
 80017de:	eef0 7a40 	vmov.f32	s15, s0
 80017e2:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
	  	channel_data_cal[12] = getCalibratedT();
 80017e6:	f7ff fdbd 	bl	8001364 <getCalibratedT>
 80017ea:	eef0 7a40 	vmov.f32	s15, s0
 80017ee:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
	  	channel_data_cal[13] = getCalibratedU();
 80017f2:	f7ff fdc2 	bl	800137a <getCalibratedU>
 80017f6:	eef0 7a40 	vmov.f32	s15, s0
 80017fa:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
	  	channel_data_cal[14] = getCalibratedV();
 80017fe:	f7ff fdc7 	bl	8001390 <getCalibratedV>
 8001802:	eef0 7a40 	vmov.f32	s15, s0
 8001806:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
	  	channel_data_cal[15] = getCalibratedW();
 800180a:	f7ff fdcc 	bl	80013a6 <getCalibratedW>
 800180e:	eef0 7a40 	vmov.f32	s15, s0
 8001812:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
	  	disableLED(AS7265x_LED_IR);
 8001816:	2001      	movs	r0, #1
 8001818:	f7ff fc14 	bl	8001044 <disableLED>

	  	for (int i = 0; i < NUM_CHANNELS; i++)
 800181c:	2300      	movs	r3, #0
 800181e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001822:	e024      	b.n	800186e <main+0x1b2>
	  	{
	  		uart_buf_len += sprintf(uart_buf + strlen(uart_buf), "%d,", (int)(channel_data_cal[i]*100));
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	4618      	mov	r0, r3
 8001828:	f7fe fce2 	bl	80001f0 <strlen>
 800182c:	4602      	mov	r2, r0
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	1898      	adds	r0, r3, r2
 8001832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	33e0      	adds	r3, #224	@ 0xe0
 800183a:	443b      	add	r3, r7
 800183c:	3b78      	subs	r3, #120	@ 0x78
 800183e:	edd3 7a00 	vldr	s15, [r3]
 8001842:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80018bc <main+0x200>
 8001846:	ee67 7a87 	vmul.f32	s15, s15, s14
 800184a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800184e:	ee17 2a90 	vmov	r2, s15
 8001852:	491b      	ldr	r1, [pc, #108]	@ (80018c0 <main+0x204>)
 8001854:	f003 f8b2 	bl	80049bc <siprintf>
 8001858:	4602      	mov	r2, r0
 800185a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800185e:	4413      	add	r3, r2
 8001860:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	  	for (int i = 0; i < NUM_CHANNELS; i++)
 8001864:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001868:	3301      	adds	r3, #1
 800186a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800186e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001872:	2b11      	cmp	r3, #17
 8001874:	ddd6      	ble.n	8001824 <main+0x168>
	  	}

	  	uart_buf_len += sprintf(uart_buf + strlen(uart_buf), "\n"); // end line
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fcb9 	bl	80001f0 <strlen>
 800187e:	4602      	mov	r2, r0
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	4413      	add	r3, r2
 8001884:	490f      	ldr	r1, [pc, #60]	@ (80018c4 <main+0x208>)
 8001886:	4618      	mov	r0, r3
 8001888:	f003 f898 	bl	80049bc <siprintf>
 800188c:	4602      	mov	r2, r0
 800188e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001892:	4413      	add	r3, r2
 8001894:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	  	HAL_UART_Transmit(&huart3, (uint8_t *)uart_buf, uart_buf_len, 100); // transmits the data
 8001898:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800189c:	b29a      	uxth	r2, r3
 800189e:	1d39      	adds	r1, r7, #4
 80018a0:	2364      	movs	r3, #100	@ 0x64
 80018a2:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <main+0x1fc>)
 80018a4:	f002 f8fa 	bl	8003a9c <HAL_UART_Transmit>
	  	uart_buf[0] = '\0';
 80018a8:	2300      	movs	r3, #0
 80018aa:	713b      	strb	r3, [r7, #4]
	  	uart_buf_len = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
	  	enableLED(AS7265x_LED_UV);
 80018b2:	e729      	b.n	8001708 <main+0x4c>
 80018b4:	08005a54 	.word	0x08005a54
 80018b8:	200002b0 	.word	0x200002b0
 80018bc:	42c80000 	.word	0x42c80000
 80018c0:	08005a68 	.word	0x08005a68
 80018c4:	08005a6c 	.word	0x08005a6c

080018c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b094      	sub	sp, #80	@ 0x50
 80018cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ce:	f107 0320 	add.w	r3, r7, #32
 80018d2:	2230      	movs	r2, #48	@ 0x30
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f003 f8d3 	bl	8004a82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ec:	2300      	movs	r3, #0
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	4b28      	ldr	r3, [pc, #160]	@ (8001994 <SystemClock_Config+0xcc>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f4:	4a27      	ldr	r2, [pc, #156]	@ (8001994 <SystemClock_Config+0xcc>)
 80018f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80018fc:	4b25      	ldr	r3, [pc, #148]	@ (8001994 <SystemClock_Config+0xcc>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001908:	2300      	movs	r3, #0
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	4b22      	ldr	r3, [pc, #136]	@ (8001998 <SystemClock_Config+0xd0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a21      	ldr	r2, [pc, #132]	@ (8001998 <SystemClock_Config+0xd0>)
 8001912:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001916:	6013      	str	r3, [r2, #0]
 8001918:	4b1f      	ldr	r3, [pc, #124]	@ (8001998 <SystemClock_Config+0xd0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001924:	2301      	movs	r3, #1
 8001926:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001928:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800192c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800192e:	2302      	movs	r3, #2
 8001930:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001932:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001936:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001938:	2304      	movs	r3, #4
 800193a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800193c:	23a8      	movs	r3, #168	@ 0xa8
 800193e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001940:	2302      	movs	r3, #2
 8001942:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001944:	2307      	movs	r3, #7
 8001946:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001948:	f107 0320 	add.w	r3, r7, #32
 800194c:	4618      	mov	r0, r3
 800194e:	f001 fbbd 	bl	80030cc <HAL_RCC_OscConfig>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001958:	f000 f974 	bl	8001c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800195c:	230f      	movs	r3, #15
 800195e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001960:	2302      	movs	r3, #2
 8001962:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001968:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800196c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800196e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001972:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001974:	f107 030c 	add.w	r3, r7, #12
 8001978:	2105      	movs	r1, #5
 800197a:	4618      	mov	r0, r3
 800197c:	f001 fe1e 	bl	80035bc <HAL_RCC_ClockConfig>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001986:	f000 f95d 	bl	8001c44 <Error_Handler>
  }
}
 800198a:	bf00      	nop
 800198c:	3750      	adds	r7, #80	@ 0x50
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	40007000 	.word	0x40007000

0800199c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80019a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a20 <MX_ETH_Init+0x84>)
 80019a2:	4a20      	ldr	r2, [pc, #128]	@ (8001a24 <MX_ETH_Init+0x88>)
 80019a4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80019a6:	4b20      	ldr	r3, [pc, #128]	@ (8001a28 <MX_ETH_Init+0x8c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80019ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001a28 <MX_ETH_Init+0x8c>)
 80019ae:	2280      	movs	r2, #128	@ 0x80
 80019b0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80019b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a28 <MX_ETH_Init+0x8c>)
 80019b4:	22e1      	movs	r2, #225	@ 0xe1
 80019b6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80019b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a28 <MX_ETH_Init+0x8c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80019be:	4b1a      	ldr	r3, [pc, #104]	@ (8001a28 <MX_ETH_Init+0x8c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80019c4:	4b18      	ldr	r3, [pc, #96]	@ (8001a28 <MX_ETH_Init+0x8c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80019ca:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <MX_ETH_Init+0x84>)
 80019cc:	4a16      	ldr	r2, [pc, #88]	@ (8001a28 <MX_ETH_Init+0x8c>)
 80019ce:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80019d0:	4b13      	ldr	r3, [pc, #76]	@ (8001a20 <MX_ETH_Init+0x84>)
 80019d2:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019d6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80019d8:	4b11      	ldr	r3, [pc, #68]	@ (8001a20 <MX_ETH_Init+0x84>)
 80019da:	4a14      	ldr	r2, [pc, #80]	@ (8001a2c <MX_ETH_Init+0x90>)
 80019dc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80019de:	4b10      	ldr	r3, [pc, #64]	@ (8001a20 <MX_ETH_Init+0x84>)
 80019e0:	4a13      	ldr	r2, [pc, #76]	@ (8001a30 <MX_ETH_Init+0x94>)
 80019e2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80019e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a20 <MX_ETH_Init+0x84>)
 80019e6:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80019ea:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80019ec:	480c      	ldr	r0, [pc, #48]	@ (8001a20 <MX_ETH_Init+0x84>)
 80019ee:	f000 fd49 	bl	8002484 <HAL_ETH_Init>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80019f8:	f000 f924 	bl	8001c44 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80019fc:	2238      	movs	r2, #56	@ 0x38
 80019fe:	2100      	movs	r1, #0
 8001a00:	480c      	ldr	r0, [pc, #48]	@ (8001a34 <MX_ETH_Init+0x98>)
 8001a02:	f003 f83e 	bl	8004a82 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001a06:	4b0b      	ldr	r3, [pc, #44]	@ (8001a34 <MX_ETH_Init+0x98>)
 8001a08:	2221      	movs	r2, #33	@ 0x21
 8001a0a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001a0c:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <MX_ETH_Init+0x98>)
 8001a0e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001a12:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001a14:	4b07      	ldr	r3, [pc, #28]	@ (8001a34 <MX_ETH_Init+0x98>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000200 	.word	0x20000200
 8001a24:	40028000 	.word	0x40028000
 8001a28:	200007dc 	.word	0x200007dc
 8001a2c:	20000160 	.word	0x20000160
 8001a30:	200000c0 	.word	0x200000c0
 8001a34:	20000088 	.word	0x20000088

08001a38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a3c:	4b11      	ldr	r3, [pc, #68]	@ (8001a84 <MX_USART3_UART_Init+0x4c>)
 8001a3e:	4a12      	ldr	r2, [pc, #72]	@ (8001a88 <MX_USART3_UART_Init+0x50>)
 8001a40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a42:	4b10      	ldr	r3, [pc, #64]	@ (8001a84 <MX_USART3_UART_Init+0x4c>)
 8001a44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a84 <MX_USART3_UART_Init+0x4c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	@ (8001a84 <MX_USART3_UART_Init+0x4c>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a56:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <MX_USART3_UART_Init+0x4c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a5c:	4b09      	ldr	r3, [pc, #36]	@ (8001a84 <MX_USART3_UART_Init+0x4c>)
 8001a5e:	220c      	movs	r2, #12
 8001a60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a62:	4b08      	ldr	r3, [pc, #32]	@ (8001a84 <MX_USART3_UART_Init+0x4c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a68:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <MX_USART3_UART_Init+0x4c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a6e:	4805      	ldr	r0, [pc, #20]	@ (8001a84 <MX_USART3_UART_Init+0x4c>)
 8001a70:	f001 ffc4 	bl	80039fc <HAL_UART_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001a7a:	f000 f8e3 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200002b0 	.word	0x200002b0
 8001a88:	40004800 	.word	0x40004800

08001a8c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001a90:	4b14      	ldr	r3, [pc, #80]	@ (8001ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a92:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001a96:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001a98:	4b12      	ldr	r3, [pc, #72]	@ (8001ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a9a:	2204      	movs	r2, #4
 8001a9c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001a9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001aac:	2202      	movs	r2, #2
 8001aae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001abc:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001ac2:	4b08      	ldr	r3, [pc, #32]	@ (8001ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001ace:	4805      	ldr	r0, [pc, #20]	@ (8001ae4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ad0:	f001 f9ed 	bl	8002eae <HAL_PCD_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001ada:	f000 f8b3 	bl	8001c44 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200002f8 	.word	0x200002f8

08001ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08c      	sub	sp, #48	@ 0x30
 8001aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aee:	f107 031c 	add.w	r3, r7, #28
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
 8001afc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
 8001b02:	4b4c      	ldr	r3, [pc, #304]	@ (8001c34 <MX_GPIO_Init+0x14c>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b06:	4a4b      	ldr	r2, [pc, #300]	@ (8001c34 <MX_GPIO_Init+0x14c>)
 8001b08:	f043 0304 	orr.w	r3, r3, #4
 8001b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0e:	4b49      	ldr	r3, [pc, #292]	@ (8001c34 <MX_GPIO_Init+0x14c>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	61bb      	str	r3, [r7, #24]
 8001b18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	4b45      	ldr	r3, [pc, #276]	@ (8001c34 <MX_GPIO_Init+0x14c>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b22:	4a44      	ldr	r2, [pc, #272]	@ (8001c34 <MX_GPIO_Init+0x14c>)
 8001b24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b2a:	4b42      	ldr	r3, [pc, #264]	@ (8001c34 <MX_GPIO_Init+0x14c>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c34 <MX_GPIO_Init+0x14c>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	4a3d      	ldr	r2, [pc, #244]	@ (8001c34 <MX_GPIO_Init+0x14c>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b46:	4b3b      	ldr	r3, [pc, #236]	@ (8001c34 <MX_GPIO_Init+0x14c>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	4b37      	ldr	r3, [pc, #220]	@ (8001c34 <MX_GPIO_Init+0x14c>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	4a36      	ldr	r2, [pc, #216]	@ (8001c34 <MX_GPIO_Init+0x14c>)
 8001b5c:	f043 0302 	orr.w	r3, r3, #2
 8001b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b62:	4b34      	ldr	r3, [pc, #208]	@ (8001c34 <MX_GPIO_Init+0x14c>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	f003 0302 	and.w	r3, r3, #2
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	4b30      	ldr	r3, [pc, #192]	@ (8001c34 <MX_GPIO_Init+0x14c>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	4a2f      	ldr	r2, [pc, #188]	@ (8001c34 <MX_GPIO_Init+0x14c>)
 8001b78:	f043 0308 	orr.w	r3, r3, #8
 8001b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001c34 <MX_GPIO_Init+0x14c>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	4b29      	ldr	r3, [pc, #164]	@ (8001c34 <MX_GPIO_Init+0x14c>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	4a28      	ldr	r2, [pc, #160]	@ (8001c34 <MX_GPIO_Init+0x14c>)
 8001b94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b9a:	4b26      	ldr	r3, [pc, #152]	@ (8001c34 <MX_GPIO_Init+0x14c>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001bac:	4822      	ldr	r0, [pc, #136]	@ (8001c38 <MX_GPIO_Init+0x150>)
 8001bae:	f001 f965 	bl	8002e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2140      	movs	r1, #64	@ 0x40
 8001bb6:	4821      	ldr	r0, [pc, #132]	@ (8001c3c <MX_GPIO_Init+0x154>)
 8001bb8:	f001 f960 	bl	8002e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001bbc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bc2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001bcc:	f107 031c 	add.w	r3, r7, #28
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	481b      	ldr	r0, [pc, #108]	@ (8001c40 <MX_GPIO_Init+0x158>)
 8001bd4:	f000 ffa6 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001bd8:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bde:	2301      	movs	r3, #1
 8001be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	2300      	movs	r3, #0
 8001be8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bea:	f107 031c 	add.w	r3, r7, #28
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4811      	ldr	r0, [pc, #68]	@ (8001c38 <MX_GPIO_Init+0x150>)
 8001bf2:	f000 ff97 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001bf6:	2340      	movs	r3, #64	@ 0x40
 8001bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c02:	2300      	movs	r3, #0
 8001c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c06:	f107 031c 	add.w	r3, r7, #28
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	480b      	ldr	r0, [pc, #44]	@ (8001c3c <MX_GPIO_Init+0x154>)
 8001c0e:	f000 ff89 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001c12:	2380      	movs	r3, #128	@ 0x80
 8001c14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c16:	2300      	movs	r3, #0
 8001c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c1e:	f107 031c 	add.w	r3, r7, #28
 8001c22:	4619      	mov	r1, r3
 8001c24:	4805      	ldr	r0, [pc, #20]	@ (8001c3c <MX_GPIO_Init+0x154>)
 8001c26:	f000 ff7d 	bl	8002b24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c2a:	bf00      	nop
 8001c2c:	3730      	adds	r7, #48	@ 0x30
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020400 	.word	0x40020400
 8001c3c:	40021800 	.word	0x40021800
 8001c40:	40020800 	.word	0x40020800

08001c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c48:	b672      	cpsid	i
}
 8001c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c4c:	bf00      	nop
 8001c4e:	e7fd      	b.n	8001c4c <Error_Handler+0x8>

08001c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	607b      	str	r3, [r7, #4]
 8001c5a:	4b10      	ldr	r3, [pc, #64]	@ (8001c9c <HAL_MspInit+0x4c>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c9c <HAL_MspInit+0x4c>)
 8001c60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c66:	4b0d      	ldr	r3, [pc, #52]	@ (8001c9c <HAL_MspInit+0x4c>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	4b09      	ldr	r3, [pc, #36]	@ (8001c9c <HAL_MspInit+0x4c>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	4a08      	ldr	r2, [pc, #32]	@ (8001c9c <HAL_MspInit+0x4c>)
 8001c7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c82:	4b06      	ldr	r3, [pc, #24]	@ (8001c9c <HAL_MspInit+0x4c>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800

08001ca0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08e      	sub	sp, #56	@ 0x38
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a55      	ldr	r2, [pc, #340]	@ (8001e14 <HAL_ETH_MspInit+0x174>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	f040 80a4 	bne.w	8001e0c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	623b      	str	r3, [r7, #32]
 8001cc8:	4b53      	ldr	r3, [pc, #332]	@ (8001e18 <HAL_ETH_MspInit+0x178>)
 8001cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ccc:	4a52      	ldr	r2, [pc, #328]	@ (8001e18 <HAL_ETH_MspInit+0x178>)
 8001cce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd4:	4b50      	ldr	r3, [pc, #320]	@ (8001e18 <HAL_ETH_MspInit+0x178>)
 8001cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cdc:	623b      	str	r3, [r7, #32]
 8001cde:	6a3b      	ldr	r3, [r7, #32]
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61fb      	str	r3, [r7, #28]
 8001ce4:	4b4c      	ldr	r3, [pc, #304]	@ (8001e18 <HAL_ETH_MspInit+0x178>)
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce8:	4a4b      	ldr	r2, [pc, #300]	@ (8001e18 <HAL_ETH_MspInit+0x178>)
 8001cea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001cee:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf0:	4b49      	ldr	r3, [pc, #292]	@ (8001e18 <HAL_ETH_MspInit+0x178>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61bb      	str	r3, [r7, #24]
 8001d00:	4b45      	ldr	r3, [pc, #276]	@ (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d04:	4a44      	ldr	r2, [pc, #272]	@ (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d06:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001d0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0c:	4b42      	ldr	r3, [pc, #264]	@ (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001d14:	61bb      	str	r3, [r7, #24]
 8001d16:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d20:	4a3d      	ldr	r2, [pc, #244]	@ (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d22:	f043 0304 	orr.w	r3, r3, #4
 8001d26:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d28:	4b3b      	ldr	r3, [pc, #236]	@ (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d34:	2300      	movs	r3, #0
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	4b37      	ldr	r3, [pc, #220]	@ (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3c:	4a36      	ldr	r2, [pc, #216]	@ (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d44:	4b34      	ldr	r3, [pc, #208]	@ (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d50:	2300      	movs	r3, #0
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	4b30      	ldr	r3, [pc, #192]	@ (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d58:	4a2f      	ldr	r2, [pc, #188]	@ (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d5a:	f043 0302 	orr.w	r3, r3, #2
 8001d5e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d60:	4b2d      	ldr	r3, [pc, #180]	@ (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	4b29      	ldr	r3, [pc, #164]	@ (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d74:	4a28      	ldr	r2, [pc, #160]	@ (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7c:	4b26      	ldr	r3, [pc, #152]	@ (8001e18 <HAL_ETH_MspInit+0x178>)
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001d88:	2332      	movs	r3, #50	@ 0x32
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d98:	230b      	movs	r3, #11
 8001d9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001da0:	4619      	mov	r1, r3
 8001da2:	481e      	ldr	r0, [pc, #120]	@ (8001e1c <HAL_ETH_MspInit+0x17c>)
 8001da4:	f000 febe 	bl	8002b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001da8:	2386      	movs	r3, #134	@ 0x86
 8001daa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db4:	2303      	movs	r3, #3
 8001db6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001db8:	230b      	movs	r3, #11
 8001dba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4817      	ldr	r0, [pc, #92]	@ (8001e20 <HAL_ETH_MspInit+0x180>)
 8001dc4:	f000 feae 	bl	8002b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001dc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dda:	230b      	movs	r3, #11
 8001ddc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001dde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001de2:	4619      	mov	r1, r3
 8001de4:	480f      	ldr	r0, [pc, #60]	@ (8001e24 <HAL_ETH_MspInit+0x184>)
 8001de6:	f000 fe9d 	bl	8002b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001dea:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001dee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df0:	2302      	movs	r3, #2
 8001df2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dfc:	230b      	movs	r3, #11
 8001dfe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e04:	4619      	mov	r1, r3
 8001e06:	4808      	ldr	r0, [pc, #32]	@ (8001e28 <HAL_ETH_MspInit+0x188>)
 8001e08:	f000 fe8c 	bl	8002b24 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001e0c:	bf00      	nop
 8001e0e:	3738      	adds	r7, #56	@ 0x38
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40028000 	.word	0x40028000
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40020800 	.word	0x40020800
 8001e20:	40020000 	.word	0x40020000
 8001e24:	40020400 	.word	0x40020400
 8001e28:	40021800 	.word	0x40021800

08001e2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	@ 0x28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a19      	ldr	r2, [pc, #100]	@ (8001eb0 <HAL_UART_MspInit+0x84>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d12c      	bne.n	8001ea8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	4b18      	ldr	r3, [pc, #96]	@ (8001eb4 <HAL_UART_MspInit+0x88>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e56:	4a17      	ldr	r2, [pc, #92]	@ (8001eb4 <HAL_UART_MspInit+0x88>)
 8001e58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e5e:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <HAL_UART_MspInit+0x88>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <HAL_UART_MspInit+0x88>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	4a10      	ldr	r2, [pc, #64]	@ (8001eb4 <HAL_UART_MspInit+0x88>)
 8001e74:	f043 0308 	orr.w	r3, r3, #8
 8001e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb4 <HAL_UART_MspInit+0x88>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	f003 0308 	and.w	r3, r3, #8
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001e86:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e94:	2303      	movs	r3, #3
 8001e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e98:	2307      	movs	r3, #7
 8001e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4805      	ldr	r0, [pc, #20]	@ (8001eb8 <HAL_UART_MspInit+0x8c>)
 8001ea4:	f000 fe3e 	bl	8002b24 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001ea8:	bf00      	nop
 8001eaa:	3728      	adds	r7, #40	@ 0x28
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40004800 	.word	0x40004800
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40020c00 	.word	0x40020c00

08001ebc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	@ 0x28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001edc:	d13f      	bne.n	8001f5e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	4b21      	ldr	r3, [pc, #132]	@ (8001f68 <HAL_PCD_MspInit+0xac>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	4a20      	ldr	r2, [pc, #128]	@ (8001f68 <HAL_PCD_MspInit+0xac>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eee:	4b1e      	ldr	r3, [pc, #120]	@ (8001f68 <HAL_PCD_MspInit+0xac>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001efa:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f0c:	230a      	movs	r3, #10
 8001f0e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	4619      	mov	r1, r3
 8001f16:	4815      	ldr	r0, [pc, #84]	@ (8001f6c <HAL_PCD_MspInit+0xb0>)
 8001f18:	f000 fe04 	bl	8002b24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001f1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001f2a:	f107 0314 	add.w	r3, r7, #20
 8001f2e:	4619      	mov	r1, r3
 8001f30:	480e      	ldr	r0, [pc, #56]	@ (8001f6c <HAL_PCD_MspInit+0xb0>)
 8001f32:	f000 fdf7 	bl	8002b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f36:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <HAL_PCD_MspInit+0xac>)
 8001f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001f68 <HAL_PCD_MspInit+0xac>)
 8001f3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f40:	6353      	str	r3, [r2, #52]	@ 0x34
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	4b08      	ldr	r3, [pc, #32]	@ (8001f68 <HAL_PCD_MspInit+0xac>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4a:	4a07      	ldr	r2, [pc, #28]	@ (8001f68 <HAL_PCD_MspInit+0xac>)
 8001f4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f52:	4b05      	ldr	r3, [pc, #20]	@ (8001f68 <HAL_PCD_MspInit+0xac>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001f5e:	bf00      	nop
 8001f60:	3728      	adds	r7, #40	@ 0x28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40020000 	.word	0x40020000

08001f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <NMI_Handler+0x4>

08001f78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <HardFault_Handler+0x4>

08001f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <MemManage_Handler+0x4>

08001f88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f8c:	bf00      	nop
 8001f8e:	e7fd      	b.n	8001f8c <BusFault_Handler+0x4>

08001f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f94:	bf00      	nop
 8001f96:	e7fd      	b.n	8001f94 <UsageFault_Handler+0x4>

08001f98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc6:	f000 f933 	bl	8002230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b086      	sub	sp, #24
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	60f8      	str	r0, [r7, #12]
 8001fd6:	60b9      	str	r1, [r7, #8]
 8001fd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	e00a      	b.n	8001ff6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fe0:	f3af 8000 	nop.w
 8001fe4:	4601      	mov	r1, r0
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	1c5a      	adds	r2, r3, #1
 8001fea:	60ba      	str	r2, [r7, #8]
 8001fec:	b2ca      	uxtb	r2, r1
 8001fee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	dbf0      	blt.n	8001fe0 <_read+0x12>
  }

  return len;
 8001ffe:	687b      	ldr	r3, [r7, #4]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002014:	2300      	movs	r3, #0
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	e009      	b.n	800202e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	60ba      	str	r2, [r7, #8]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	3301      	adds	r3, #1
 800202c:	617b      	str	r3, [r7, #20]
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	429a      	cmp	r2, r3
 8002034:	dbf1      	blt.n	800201a <_write+0x12>
  }
  return len;
 8002036:	687b      	ldr	r3, [r7, #4]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <_close>:

int _close(int file)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002048:	f04f 33ff 	mov.w	r3, #4294967295
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002068:	605a      	str	r2, [r3, #4]
  return 0;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <_isatty>:

int _isatty(int file)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002080:	2301      	movs	r3, #1
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800208e:	b480      	push	{r7}
 8002090:	b085      	sub	sp, #20
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020b0:	4a14      	ldr	r2, [pc, #80]	@ (8002104 <_sbrk+0x5c>)
 80020b2:	4b15      	ldr	r3, [pc, #84]	@ (8002108 <_sbrk+0x60>)
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020bc:	4b13      	ldr	r3, [pc, #76]	@ (800210c <_sbrk+0x64>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d102      	bne.n	80020ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020c4:	4b11      	ldr	r3, [pc, #68]	@ (800210c <_sbrk+0x64>)
 80020c6:	4a12      	ldr	r2, [pc, #72]	@ (8002110 <_sbrk+0x68>)
 80020c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ca:	4b10      	ldr	r3, [pc, #64]	@ (800210c <_sbrk+0x64>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d207      	bcs.n	80020e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d8:	f002 fd22 	bl	8004b20 <__errno>
 80020dc:	4603      	mov	r3, r0
 80020de:	220c      	movs	r2, #12
 80020e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020e2:	f04f 33ff 	mov.w	r3, #4294967295
 80020e6:	e009      	b.n	80020fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e8:	4b08      	ldr	r3, [pc, #32]	@ (800210c <_sbrk+0x64>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ee:	4b07      	ldr	r3, [pc, #28]	@ (800210c <_sbrk+0x64>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	4a05      	ldr	r2, [pc, #20]	@ (800210c <_sbrk+0x64>)
 80020f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020fa:	68fb      	ldr	r3, [r7, #12]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20030000 	.word	0x20030000
 8002108:	00000400 	.word	0x00000400
 800210c:	200007e4 	.word	0x200007e4
 8002110:	20000938 	.word	0x20000938

08002114 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002118:	4b06      	ldr	r3, [pc, #24]	@ (8002134 <SystemInit+0x20>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211e:	4a05      	ldr	r2, [pc, #20]	@ (8002134 <SystemInit+0x20>)
 8002120:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002124:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002138:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002170 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800213c:	f7ff ffea 	bl	8002114 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002140:	480c      	ldr	r0, [pc, #48]	@ (8002174 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002142:	490d      	ldr	r1, [pc, #52]	@ (8002178 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002144:	4a0d      	ldr	r2, [pc, #52]	@ (800217c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002148:	e002      	b.n	8002150 <LoopCopyDataInit>

0800214a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800214a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800214c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800214e:	3304      	adds	r3, #4

08002150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002154:	d3f9      	bcc.n	800214a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002156:	4a0a      	ldr	r2, [pc, #40]	@ (8002180 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002158:	4c0a      	ldr	r4, [pc, #40]	@ (8002184 <LoopFillZerobss+0x22>)
  movs r3, #0
 800215a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800215c:	e001      	b.n	8002162 <LoopFillZerobss>

0800215e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800215e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002160:	3204      	adds	r2, #4

08002162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002164:	d3fb      	bcc.n	800215e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002166:	f002 fce1 	bl	8004b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800216a:	f7ff faa7 	bl	80016bc <main>
  bx  lr    
 800216e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002170:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002174:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002178:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800217c:	08005acc 	.word	0x08005acc
  ldr r2, =_sbss
 8002180:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002184:	20000938 	.word	0x20000938

08002188 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002188:	e7fe      	b.n	8002188 <ADC_IRQHandler>
	...

0800218c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002190:	4b0e      	ldr	r3, [pc, #56]	@ (80021cc <HAL_Init+0x40>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a0d      	ldr	r2, [pc, #52]	@ (80021cc <HAL_Init+0x40>)
 8002196:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800219a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800219c:	4b0b      	ldr	r3, [pc, #44]	@ (80021cc <HAL_Init+0x40>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a0a      	ldr	r2, [pc, #40]	@ (80021cc <HAL_Init+0x40>)
 80021a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021a8:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <HAL_Init+0x40>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a07      	ldr	r2, [pc, #28]	@ (80021cc <HAL_Init+0x40>)
 80021ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b4:	2003      	movs	r0, #3
 80021b6:	f000 f931 	bl	800241c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ba:	2000      	movs	r0, #0
 80021bc:	f000 f808 	bl	80021d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021c0:	f7ff fd46 	bl	8001c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40023c00 	.word	0x40023c00

080021d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021d8:	4b12      	ldr	r3, [pc, #72]	@ (8002224 <HAL_InitTick+0x54>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b12      	ldr	r3, [pc, #72]	@ (8002228 <HAL_InitTick+0x58>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	4619      	mov	r1, r3
 80021e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 f93b 	bl	800246a <HAL_SYSTICK_Config>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00e      	b.n	800221c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b0f      	cmp	r3, #15
 8002202:	d80a      	bhi.n	800221a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002204:	2200      	movs	r2, #0
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	f04f 30ff 	mov.w	r0, #4294967295
 800220c:	f000 f911 	bl	8002432 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002210:	4a06      	ldr	r2, [pc, #24]	@ (800222c <HAL_InitTick+0x5c>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	e000      	b.n	800221c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000004 	.word	0x20000004
 8002228:	2000000c 	.word	0x2000000c
 800222c:	20000008 	.word	0x20000008

08002230 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002234:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <HAL_IncTick+0x20>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	461a      	mov	r2, r3
 800223a:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <HAL_IncTick+0x24>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4413      	add	r3, r2
 8002240:	4a04      	ldr	r2, [pc, #16]	@ (8002254 <HAL_IncTick+0x24>)
 8002242:	6013      	str	r3, [r2, #0]
}
 8002244:	bf00      	nop
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	2000000c 	.word	0x2000000c
 8002254:	200007e8 	.word	0x200007e8

08002258 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return uwTick;
 800225c:	4b03      	ldr	r3, [pc, #12]	@ (800226c <HAL_GetTick+0x14>)
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	200007e8 	.word	0x200007e8

08002270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002278:	f7ff ffee 	bl	8002258 <HAL_GetTick>
 800227c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d005      	beq.n	8002296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800228a:	4b0a      	ldr	r3, [pc, #40]	@ (80022b4 <HAL_Delay+0x44>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4413      	add	r3, r2
 8002294:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002296:	bf00      	nop
 8002298:	f7ff ffde 	bl	8002258 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d8f7      	bhi.n	8002298 <HAL_Delay+0x28>
  {
  }
}
 80022a8:	bf00      	nop
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	2000000c 	.word	0x2000000c

080022b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c8:	4b0c      	ldr	r3, [pc, #48]	@ (80022fc <__NVIC_SetPriorityGrouping+0x44>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022d4:	4013      	ands	r3, r2
 80022d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ea:	4a04      	ldr	r2, [pc, #16]	@ (80022fc <__NVIC_SetPriorityGrouping+0x44>)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	60d3      	str	r3, [r2, #12]
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002304:	4b04      	ldr	r3, [pc, #16]	@ (8002318 <__NVIC_GetPriorityGrouping+0x18>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	0a1b      	lsrs	r3, r3, #8
 800230a:	f003 0307 	and.w	r3, r3, #7
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	6039      	str	r1, [r7, #0]
 8002326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232c:	2b00      	cmp	r3, #0
 800232e:	db0a      	blt.n	8002346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	b2da      	uxtb	r2, r3
 8002334:	490c      	ldr	r1, [pc, #48]	@ (8002368 <__NVIC_SetPriority+0x4c>)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	0112      	lsls	r2, r2, #4
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	440b      	add	r3, r1
 8002340:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002344:	e00a      	b.n	800235c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4908      	ldr	r1, [pc, #32]	@ (800236c <__NVIC_SetPriority+0x50>)
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	3b04      	subs	r3, #4
 8002354:	0112      	lsls	r2, r2, #4
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	440b      	add	r3, r1
 800235a:	761a      	strb	r2, [r3, #24]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	e000e100 	.word	0xe000e100
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002370:	b480      	push	{r7}
 8002372:	b089      	sub	sp, #36	@ 0x24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f1c3 0307 	rsb	r3, r3, #7
 800238a:	2b04      	cmp	r3, #4
 800238c:	bf28      	it	cs
 800238e:	2304      	movcs	r3, #4
 8002390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3304      	adds	r3, #4
 8002396:	2b06      	cmp	r3, #6
 8002398:	d902      	bls.n	80023a0 <NVIC_EncodePriority+0x30>
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3b03      	subs	r3, #3
 800239e:	e000      	b.n	80023a2 <NVIC_EncodePriority+0x32>
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a4:	f04f 32ff 	mov.w	r2, #4294967295
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43da      	mvns	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	401a      	ands	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b8:	f04f 31ff 	mov.w	r1, #4294967295
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	43d9      	mvns	r1, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c8:	4313      	orrs	r3, r2
         );
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3724      	adds	r7, #36	@ 0x24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3b01      	subs	r3, #1
 80023e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023e8:	d301      	bcc.n	80023ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ea:	2301      	movs	r3, #1
 80023ec:	e00f      	b.n	800240e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002418 <SysTick_Config+0x40>)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3b01      	subs	r3, #1
 80023f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f6:	210f      	movs	r1, #15
 80023f8:	f04f 30ff 	mov.w	r0, #4294967295
 80023fc:	f7ff ff8e 	bl	800231c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002400:	4b05      	ldr	r3, [pc, #20]	@ (8002418 <SysTick_Config+0x40>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002406:	4b04      	ldr	r3, [pc, #16]	@ (8002418 <SysTick_Config+0x40>)
 8002408:	2207      	movs	r2, #7
 800240a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	e000e010 	.word	0xe000e010

0800241c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff ff47 	bl	80022b8 <__NVIC_SetPriorityGrouping>
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002432:	b580      	push	{r7, lr}
 8002434:	b086      	sub	sp, #24
 8002436:	af00      	add	r7, sp, #0
 8002438:	4603      	mov	r3, r0
 800243a:	60b9      	str	r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
 800243e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002444:	f7ff ff5c 	bl	8002300 <__NVIC_GetPriorityGrouping>
 8002448:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	6978      	ldr	r0, [r7, #20]
 8002450:	f7ff ff8e 	bl	8002370 <NVIC_EncodePriority>
 8002454:	4602      	mov	r2, r0
 8002456:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800245a:	4611      	mov	r1, r2
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff5d 	bl	800231c <__NVIC_SetPriority>
}
 8002462:	bf00      	nop
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ffb0 	bl	80023d8 <SysTick_Config>
 8002478:	4603      	mov	r3, r0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e08a      	b.n	80025ac <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800249c:	2b00      	cmp	r3, #0
 800249e:	d106      	bne.n	80024ae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2223      	movs	r2, #35	@ 0x23
 80024a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f7ff fbf9 	bl	8001ca0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	60bb      	str	r3, [r7, #8]
 80024b2:	4b40      	ldr	r3, [pc, #256]	@ (80025b4 <HAL_ETH_Init+0x130>)
 80024b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b6:	4a3f      	ldr	r2, [pc, #252]	@ (80025b4 <HAL_ETH_Init+0x130>)
 80024b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80024be:	4b3d      	ldr	r3, [pc, #244]	@ (80025b4 <HAL_ETH_Init+0x130>)
 80024c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80024ca:	4b3b      	ldr	r3, [pc, #236]	@ (80025b8 <HAL_ETH_Init+0x134>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4a3a      	ldr	r2, [pc, #232]	@ (80025b8 <HAL_ETH_Init+0x134>)
 80024d0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80024d4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80024d6:	4b38      	ldr	r3, [pc, #224]	@ (80025b8 <HAL_ETH_Init+0x134>)
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	4936      	ldr	r1, [pc, #216]	@ (80025b8 <HAL_ETH_Init+0x134>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80024e4:	4b34      	ldr	r3, [pc, #208]	@ (80025b8 <HAL_ETH_Init+0x134>)
 80024e6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002500:	f7ff feaa 	bl	8002258 <HAL_GetTick>
 8002504:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002506:	e011      	b.n	800252c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002508:	f7ff fea6 	bl	8002258 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002516:	d909      	bls.n	800252c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2204      	movs	r2, #4
 800251c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	22e0      	movs	r2, #224	@ 0xe0
 8002524:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e03f      	b.n	80025ac <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1e4      	bne.n	8002508 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f97a 	bl	8002838 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 fa25 	bl	8002994 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 fa7b 	bl	8002a46 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	461a      	mov	r2, r3
 8002556:	2100      	movs	r1, #0
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f9e3 	bl	8002924 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800256c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6812      	ldr	r2, [r2, #0]
 800257a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800257e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002582:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002596:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2210      	movs	r2, #16
 80025a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40013800 	.word	0x40013800

080025bc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4b53      	ldr	r3, [pc, #332]	@ (8002720 <ETH_SetMACConfig+0x164>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	7b9b      	ldrb	r3, [r3, #14]
 80025da:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	7c12      	ldrb	r2, [r2, #16]
 80025e0:	2a00      	cmp	r2, #0
 80025e2:	d102      	bne.n	80025ea <ETH_SetMACConfig+0x2e>
 80025e4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80025e8:	e000      	b.n	80025ec <ETH_SetMACConfig+0x30>
 80025ea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80025ec:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	7c52      	ldrb	r2, [r2, #17]
 80025f2:	2a00      	cmp	r2, #0
 80025f4:	d102      	bne.n	80025fc <ETH_SetMACConfig+0x40>
 80025f6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80025fa:	e000      	b.n	80025fe <ETH_SetMACConfig+0x42>
 80025fc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025fe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002604:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	7fdb      	ldrb	r3, [r3, #31]
 800260a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800260c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002612:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	7f92      	ldrb	r2, [r2, #30]
 8002618:	2a00      	cmp	r2, #0
 800261a:	d102      	bne.n	8002622 <ETH_SetMACConfig+0x66>
 800261c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002620:	e000      	b.n	8002624 <ETH_SetMACConfig+0x68>
 8002622:	2200      	movs	r2, #0
                        macconf->Speed |
 8002624:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	7f1b      	ldrb	r3, [r3, #28]
 800262a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800262c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002632:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	791b      	ldrb	r3, [r3, #4]
 8002638:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800263a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002642:	2a00      	cmp	r2, #0
 8002644:	d102      	bne.n	800264c <ETH_SetMACConfig+0x90>
 8002646:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800264a:	e000      	b.n	800264e <ETH_SetMACConfig+0x92>
 800264c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800264e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	7bdb      	ldrb	r3, [r3, #15]
 8002654:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002656:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800265c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002664:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002666:	4313      	orrs	r3, r2
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	4313      	orrs	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800267e:	2001      	movs	r0, #1
 8002680:	f7ff fdf6 	bl	8002270 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800269a:	4013      	ands	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026a2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80026aa:	2a00      	cmp	r2, #0
 80026ac:	d101      	bne.n	80026b2 <ETH_SetMACConfig+0xf6>
 80026ae:	2280      	movs	r2, #128	@ 0x80
 80026b0:	e000      	b.n	80026b4 <ETH_SetMACConfig+0xf8>
 80026b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026b4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80026ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80026c2:	2a01      	cmp	r2, #1
 80026c4:	d101      	bne.n	80026ca <ETH_SetMACConfig+0x10e>
 80026c6:	2208      	movs	r2, #8
 80026c8:	e000      	b.n	80026cc <ETH_SetMACConfig+0x110>
 80026ca:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80026cc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80026d4:	2a01      	cmp	r2, #1
 80026d6:	d101      	bne.n	80026dc <ETH_SetMACConfig+0x120>
 80026d8:	2204      	movs	r2, #4
 80026da:	e000      	b.n	80026de <ETH_SetMACConfig+0x122>
 80026dc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80026de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80026e6:	2a01      	cmp	r2, #1
 80026e8:	d101      	bne.n	80026ee <ETH_SetMACConfig+0x132>
 80026ea:	2202      	movs	r2, #2
 80026ec:	e000      	b.n	80026f0 <ETH_SetMACConfig+0x134>
 80026ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026f0:	4313      	orrs	r3, r2
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002708:	2001      	movs	r0, #1
 800270a:	f7ff fdb1 	bl	8002270 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	619a      	str	r2, [r3, #24]
}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	fd20810f 	.word	0xfd20810f

08002724 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	4b3d      	ldr	r3, [pc, #244]	@ (8002834 <ETH_SetDMAConfig+0x110>)
 800273e:	4013      	ands	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	7b1b      	ldrb	r3, [r3, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d102      	bne.n	8002750 <ETH_SetDMAConfig+0x2c>
 800274a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800274e:	e000      	b.n	8002752 <ETH_SetDMAConfig+0x2e>
 8002750:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	7b5b      	ldrb	r3, [r3, #13]
 8002756:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002758:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	7f52      	ldrb	r2, [r2, #29]
 800275e:	2a00      	cmp	r2, #0
 8002760:	d102      	bne.n	8002768 <ETH_SetDMAConfig+0x44>
 8002762:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002766:	e000      	b.n	800276a <ETH_SetDMAConfig+0x46>
 8002768:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800276a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	7b9b      	ldrb	r3, [r3, #14]
 8002770:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002772:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002778:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	7f1b      	ldrb	r3, [r3, #28]
 800277e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002780:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	7f9b      	ldrb	r3, [r3, #30]
 8002786:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002788:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800278e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002796:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002798:	4313      	orrs	r3, r2
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	4313      	orrs	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027a8:	461a      	mov	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027ba:	2001      	movs	r0, #1
 80027bc:	f7ff fd58 	bl	8002270 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027c8:	461a      	mov	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	791b      	ldrb	r3, [r3, #4]
 80027d2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027d8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80027de:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80027e4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027ec:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80027ee:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027f6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027fc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002806:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800280a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002818:	2001      	movs	r0, #1
 800281a:	f7ff fd29 	bl	8002270 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002826:	461a      	mov	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6013      	str	r3, [r2, #0]
}
 800282c:	bf00      	nop
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	f8de3f23 	.word	0xf8de3f23

08002838 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b0a6      	sub	sp, #152	@ 0x98
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002840:	2301      	movs	r3, #1
 8002842:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002846:	2301      	movs	r3, #1
 8002848:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800284c:	2300      	movs	r3, #0
 800284e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002850:	2300      	movs	r3, #0
 8002852:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002856:	2301      	movs	r3, #1
 8002858:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800285c:	2300      	movs	r3, #0
 800285e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002862:	2301      	movs	r3, #1
 8002864:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002868:	2301      	movs	r3, #1
 800286a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800286e:	2300      	movs	r3, #0
 8002870:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002874:	2300      	movs	r3, #0
 8002876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800287a:	2300      	movs	r3, #0
 800287c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800287e:	2300      	movs	r3, #0
 8002880:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002884:	2300      	movs	r3, #0
 8002886:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002888:	2300      	movs	r3, #0
 800288a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800288e:	2300      	movs	r3, #0
 8002890:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002894:	2300      	movs	r3, #0
 8002896:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800289a:	2300      	movs	r3, #0
 800289c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80028a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80028a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80028a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80028aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80028ac:	2300      	movs	r3, #0
 80028ae:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80028b2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80028b6:	4619      	mov	r1, r3
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff fe7f 	bl	80025bc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80028be:	2301      	movs	r3, #1
 80028c0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80028c2:	2301      	movs	r3, #1
 80028c4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80028c6:	2301      	movs	r3, #1
 80028c8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80028cc:	2301      	movs	r3, #1
 80028ce:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80028d0:	2300      	movs	r3, #0
 80028d2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80028da:	2300      	movs	r3, #0
 80028dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80028e0:	2300      	movs	r3, #0
 80028e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80028e4:	2301      	movs	r3, #1
 80028e6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80028ea:	2301      	movs	r3, #1
 80028ec:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80028ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80028f2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80028f4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80028f8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80028fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028fe:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002900:	2301      	movs	r3, #1
 8002902:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002906:	2300      	movs	r3, #0
 8002908:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800290e:	f107 0308 	add.w	r3, r7, #8
 8002912:	4619      	mov	r1, r3
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff ff05 	bl	8002724 <ETH_SetDMAConfig>
}
 800291a:	bf00      	nop
 800291c:	3798      	adds	r7, #152	@ 0x98
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3305      	adds	r3, #5
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	3204      	adds	r2, #4
 800293c:	7812      	ldrb	r2, [r2, #0]
 800293e:	4313      	orrs	r3, r2
 8002940:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	4b11      	ldr	r3, [pc, #68]	@ (800298c <ETH_MACAddressConfig+0x68>)
 8002946:	4413      	add	r3, r2
 8002948:	461a      	mov	r2, r3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	3303      	adds	r3, #3
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	061a      	lsls	r2, r3, #24
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3302      	adds	r3, #2
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	041b      	lsls	r3, r3, #16
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3301      	adds	r3, #1
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	021b      	lsls	r3, r3, #8
 8002968:	4313      	orrs	r3, r2
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	7812      	ldrb	r2, [r2, #0]
 800296e:	4313      	orrs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <ETH_MACAddressConfig+0x6c>)
 8002976:	4413      	add	r3, r2
 8002978:	461a      	mov	r2, r3
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	6013      	str	r3, [r2, #0]
}
 800297e:	bf00      	nop
 8002980:	371c      	adds	r7, #28
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40028040 	.word	0x40028040
 8002990:	40028044 	.word	0x40028044

08002994 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	e03e      	b.n	8002a20 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68d9      	ldr	r1, [r3, #12]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	440b      	add	r3, r1
 80029b2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2200      	movs	r2, #0
 80029be:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	2200      	movs	r2, #0
 80029c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2200      	movs	r2, #0
 80029ca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	3206      	adds	r2, #6
 80029d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d80c      	bhi.n	8002a04 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68d9      	ldr	r1, [r3, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1c5a      	adds	r2, r3, #1
 80029f2:	4613      	mov	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	440b      	add	r3, r1
 80029fc:	461a      	mov	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	e004      	b.n	8002a0e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	d9bd      	bls.n	80029a2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a38:	611a      	str	r2, [r3, #16]
}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b085      	sub	sp, #20
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	e048      	b.n	8002ae6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6919      	ldr	r1, [r3, #16]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	440b      	add	r3, r1
 8002a64:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2200      	movs	r2, #0
 8002a82:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2200      	movs	r2, #0
 8002a88:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002a90:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002aaa:	68b9      	ldr	r1, [r7, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	3212      	adds	r2, #18
 8002ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d80c      	bhi.n	8002ad6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6919      	ldr	r1, [r3, #16]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4413      	add	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	440b      	add	r3, r1
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	60da      	str	r2, [r3, #12]
 8002ad4:	e004      	b.n	8002ae0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	461a      	mov	r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	60fb      	str	r3, [r7, #12]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2b03      	cmp	r3, #3
 8002aea:	d9b3      	bls.n	8002a54 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b16:	60da      	str	r2, [r3, #12]
}
 8002b18:	bf00      	nop
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b089      	sub	sp, #36	@ 0x24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
 8002b3e:	e177      	b.n	8002e30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b40:	2201      	movs	r2, #1
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	4013      	ands	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	f040 8166 	bne.w	8002e2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d005      	beq.n	8002b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d130      	bne.n	8002bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	2203      	movs	r2, #3
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bac:	2201      	movs	r2, #1
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 0201 	and.w	r2, r3, #1
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d017      	beq.n	8002c14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	2203      	movs	r2, #3
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d123      	bne.n	8002c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	08da      	lsrs	r2, r3, #3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3208      	adds	r2, #8
 8002c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	220f      	movs	r2, #15
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	08da      	lsrs	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3208      	adds	r2, #8
 8002c62:	69b9      	ldr	r1, [r7, #24]
 8002c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	2203      	movs	r2, #3
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 0203 	and.w	r2, r3, #3
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 80c0 	beq.w	8002e2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	4b66      	ldr	r3, [pc, #408]	@ (8002e48 <HAL_GPIO_Init+0x324>)
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb2:	4a65      	ldr	r2, [pc, #404]	@ (8002e48 <HAL_GPIO_Init+0x324>)
 8002cb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cba:	4b63      	ldr	r3, [pc, #396]	@ (8002e48 <HAL_GPIO_Init+0x324>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cc6:	4a61      	ldr	r2, [pc, #388]	@ (8002e4c <HAL_GPIO_Init+0x328>)
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	089b      	lsrs	r3, r3, #2
 8002ccc:	3302      	adds	r3, #2
 8002cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	220f      	movs	r2, #15
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a58      	ldr	r2, [pc, #352]	@ (8002e50 <HAL_GPIO_Init+0x32c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d037      	beq.n	8002d62 <HAL_GPIO_Init+0x23e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a57      	ldr	r2, [pc, #348]	@ (8002e54 <HAL_GPIO_Init+0x330>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d031      	beq.n	8002d5e <HAL_GPIO_Init+0x23a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a56      	ldr	r2, [pc, #344]	@ (8002e58 <HAL_GPIO_Init+0x334>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d02b      	beq.n	8002d5a <HAL_GPIO_Init+0x236>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a55      	ldr	r2, [pc, #340]	@ (8002e5c <HAL_GPIO_Init+0x338>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d025      	beq.n	8002d56 <HAL_GPIO_Init+0x232>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a54      	ldr	r2, [pc, #336]	@ (8002e60 <HAL_GPIO_Init+0x33c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d01f      	beq.n	8002d52 <HAL_GPIO_Init+0x22e>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a53      	ldr	r2, [pc, #332]	@ (8002e64 <HAL_GPIO_Init+0x340>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d019      	beq.n	8002d4e <HAL_GPIO_Init+0x22a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a52      	ldr	r2, [pc, #328]	@ (8002e68 <HAL_GPIO_Init+0x344>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d013      	beq.n	8002d4a <HAL_GPIO_Init+0x226>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a51      	ldr	r2, [pc, #324]	@ (8002e6c <HAL_GPIO_Init+0x348>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d00d      	beq.n	8002d46 <HAL_GPIO_Init+0x222>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a50      	ldr	r2, [pc, #320]	@ (8002e70 <HAL_GPIO_Init+0x34c>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d007      	beq.n	8002d42 <HAL_GPIO_Init+0x21e>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a4f      	ldr	r2, [pc, #316]	@ (8002e74 <HAL_GPIO_Init+0x350>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d101      	bne.n	8002d3e <HAL_GPIO_Init+0x21a>
 8002d3a:	2309      	movs	r3, #9
 8002d3c:	e012      	b.n	8002d64 <HAL_GPIO_Init+0x240>
 8002d3e:	230a      	movs	r3, #10
 8002d40:	e010      	b.n	8002d64 <HAL_GPIO_Init+0x240>
 8002d42:	2308      	movs	r3, #8
 8002d44:	e00e      	b.n	8002d64 <HAL_GPIO_Init+0x240>
 8002d46:	2307      	movs	r3, #7
 8002d48:	e00c      	b.n	8002d64 <HAL_GPIO_Init+0x240>
 8002d4a:	2306      	movs	r3, #6
 8002d4c:	e00a      	b.n	8002d64 <HAL_GPIO_Init+0x240>
 8002d4e:	2305      	movs	r3, #5
 8002d50:	e008      	b.n	8002d64 <HAL_GPIO_Init+0x240>
 8002d52:	2304      	movs	r3, #4
 8002d54:	e006      	b.n	8002d64 <HAL_GPIO_Init+0x240>
 8002d56:	2303      	movs	r3, #3
 8002d58:	e004      	b.n	8002d64 <HAL_GPIO_Init+0x240>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e002      	b.n	8002d64 <HAL_GPIO_Init+0x240>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <HAL_GPIO_Init+0x240>
 8002d62:	2300      	movs	r3, #0
 8002d64:	69fa      	ldr	r2, [r7, #28]
 8002d66:	f002 0203 	and.w	r2, r2, #3
 8002d6a:	0092      	lsls	r2, r2, #2
 8002d6c:	4093      	lsls	r3, r2
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d74:	4935      	ldr	r1, [pc, #212]	@ (8002e4c <HAL_GPIO_Init+0x328>)
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	089b      	lsrs	r3, r3, #2
 8002d7a:	3302      	adds	r3, #2
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d82:	4b3d      	ldr	r3, [pc, #244]	@ (8002e78 <HAL_GPIO_Init+0x354>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002da6:	4a34      	ldr	r2, [pc, #208]	@ (8002e78 <HAL_GPIO_Init+0x354>)
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dac:	4b32      	ldr	r3, [pc, #200]	@ (8002e78 <HAL_GPIO_Init+0x354>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	43db      	mvns	r3, r3
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	4013      	ands	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dd0:	4a29      	ldr	r2, [pc, #164]	@ (8002e78 <HAL_GPIO_Init+0x354>)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dd6:	4b28      	ldr	r3, [pc, #160]	@ (8002e78 <HAL_GPIO_Init+0x354>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dfa:	4a1f      	ldr	r2, [pc, #124]	@ (8002e78 <HAL_GPIO_Init+0x354>)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e00:	4b1d      	ldr	r3, [pc, #116]	@ (8002e78 <HAL_GPIO_Init+0x354>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e24:	4a14      	ldr	r2, [pc, #80]	@ (8002e78 <HAL_GPIO_Init+0x354>)
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	61fb      	str	r3, [r7, #28]
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	2b0f      	cmp	r3, #15
 8002e34:	f67f ae84 	bls.w	8002b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e38:	bf00      	nop
 8002e3a:	bf00      	nop
 8002e3c:	3724      	adds	r7, #36	@ 0x24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	40013800 	.word	0x40013800
 8002e50:	40020000 	.word	0x40020000
 8002e54:	40020400 	.word	0x40020400
 8002e58:	40020800 	.word	0x40020800
 8002e5c:	40020c00 	.word	0x40020c00
 8002e60:	40021000 	.word	0x40021000
 8002e64:	40021400 	.word	0x40021400
 8002e68:	40021800 	.word	0x40021800
 8002e6c:	40021c00 	.word	0x40021c00
 8002e70:	40022000 	.word	0x40022000
 8002e74:	40022400 	.word	0x40022400
 8002e78:	40013c00 	.word	0x40013c00

08002e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	807b      	strh	r3, [r7, #2]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e8c:	787b      	ldrb	r3, [r7, #1]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e92:	887a      	ldrh	r2, [r7, #2]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e98:	e003      	b.n	8002ea2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e9a:	887b      	ldrh	r3, [r7, #2]
 8002e9c:	041a      	lsls	r2, r3, #16
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	619a      	str	r2, [r3, #24]
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b086      	sub	sp, #24
 8002eb2:	af02      	add	r7, sp, #8
 8002eb4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e101      	b.n	80030c4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d106      	bne.n	8002ee0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7fe ffee 	bl	8001ebc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002eee:	d102      	bne.n	8002ef6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f001 f9ee 	bl	80042dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	7c1a      	ldrb	r2, [r3, #16]
 8002f08:	f88d 2000 	strb.w	r2, [sp]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f10:	f001 f980 	bl	8004214 <USB_CoreInit>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d005      	beq.n	8002f26 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e0ce      	b.n	80030c4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f001 f9e6 	bl	80042fe <USB_SetCurrentMode>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0bf      	b.n	80030c4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f44:	2300      	movs	r3, #0
 8002f46:	73fb      	strb	r3, [r7, #15]
 8002f48:	e04a      	b.n	8002fe0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002f4a:	7bfa      	ldrb	r2, [r7, #15]
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	3315      	adds	r3, #21
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002f5e:	7bfa      	ldrb	r2, [r7, #15]
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	3314      	adds	r3, #20
 8002f6e:	7bfa      	ldrb	r2, [r7, #15]
 8002f70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002f72:	7bfa      	ldrb	r2, [r7, #15]
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	b298      	uxth	r0, r3
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4413      	add	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	332e      	adds	r3, #46	@ 0x2e
 8002f86:	4602      	mov	r2, r0
 8002f88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f8a:	7bfa      	ldrb	r2, [r7, #15]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	3318      	adds	r3, #24
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f9e:	7bfa      	ldrb	r2, [r7, #15]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	331c      	adds	r3, #28
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002fb2:	7bfa      	ldrb	r2, [r7, #15]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	4413      	add	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	3320      	adds	r3, #32
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002fc6:	7bfa      	ldrb	r2, [r7, #15]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4413      	add	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	3324      	adds	r3, #36	@ 0x24
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	791b      	ldrb	r3, [r3, #4]
 8002fe4:	7bfa      	ldrb	r2, [r7, #15]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d3af      	bcc.n	8002f4a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fea:	2300      	movs	r3, #0
 8002fec:	73fb      	strb	r3, [r7, #15]
 8002fee:	e044      	b.n	800307a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ff0:	7bfa      	ldrb	r2, [r7, #15]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003002:	2200      	movs	r2, #0
 8003004:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003006:	7bfa      	ldrb	r2, [r7, #15]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	4413      	add	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003018:	7bfa      	ldrb	r2, [r7, #15]
 800301a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800301c:	7bfa      	ldrb	r2, [r7, #15]
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800302e:	2200      	movs	r2, #0
 8003030:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003032:	7bfa      	ldrb	r2, [r7, #15]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003044:	2200      	movs	r2, #0
 8003046:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003048:	7bfa      	ldrb	r2, [r7, #15]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800305e:	7bfa      	ldrb	r2, [r7, #15]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	4413      	add	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	3301      	adds	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	791b      	ldrb	r3, [r3, #4]
 800307e:	7bfa      	ldrb	r2, [r7, #15]
 8003080:	429a      	cmp	r2, r3
 8003082:	d3b5      	bcc.n	8002ff0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	7c1a      	ldrb	r2, [r3, #16]
 800308c:	f88d 2000 	strb.w	r2, [sp]
 8003090:	3304      	adds	r3, #4
 8003092:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003094:	f001 f980 	bl	8004398 <USB_DevInit>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d005      	beq.n	80030aa <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2202      	movs	r2, #2
 80030a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e00c      	b.n	80030c4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f001 fb48 	bl	8004752 <USB_DevDisconnect>

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b086      	sub	sp, #24
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e267      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d075      	beq.n	80031d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030ea:	4b88      	ldr	r3, [pc, #544]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d00c      	beq.n	8003110 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030f6:	4b85      	ldr	r3, [pc, #532]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d112      	bne.n	8003128 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003102:	4b82      	ldr	r3, [pc, #520]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800310a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800310e:	d10b      	bne.n	8003128 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003110:	4b7e      	ldr	r3, [pc, #504]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003118:	2b00      	cmp	r3, #0
 800311a:	d05b      	beq.n	80031d4 <HAL_RCC_OscConfig+0x108>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d157      	bne.n	80031d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e242      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003130:	d106      	bne.n	8003140 <HAL_RCC_OscConfig+0x74>
 8003132:	4b76      	ldr	r3, [pc, #472]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a75      	ldr	r2, [pc, #468]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 8003138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	e01d      	b.n	800317c <HAL_RCC_OscConfig+0xb0>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0x98>
 800314a:	4b70      	ldr	r3, [pc, #448]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a6f      	ldr	r2, [pc, #444]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 8003150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	4b6d      	ldr	r3, [pc, #436]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a6c      	ldr	r2, [pc, #432]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 800315c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	e00b      	b.n	800317c <HAL_RCC_OscConfig+0xb0>
 8003164:	4b69      	ldr	r3, [pc, #420]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a68      	ldr	r2, [pc, #416]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 800316a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	4b66      	ldr	r3, [pc, #408]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a65      	ldr	r2, [pc, #404]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 8003176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800317a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d013      	beq.n	80031ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7ff f868 	bl	8002258 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800318c:	f7ff f864 	bl	8002258 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	@ 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e207      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319e:	4b5b      	ldr	r3, [pc, #364]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0xc0>
 80031aa:	e014      	b.n	80031d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7ff f854 	bl	8002258 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b4:	f7ff f850 	bl	8002258 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	@ 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e1f3      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c6:	4b51      	ldr	r3, [pc, #324]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0xe8>
 80031d2:	e000      	b.n	80031d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d063      	beq.n	80032aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031e2:	4b4a      	ldr	r3, [pc, #296]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 030c 	and.w	r3, r3, #12
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00b      	beq.n	8003206 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ee:	4b47      	ldr	r3, [pc, #284]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d11c      	bne.n	8003234 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031fa:	4b44      	ldr	r3, [pc, #272]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d116      	bne.n	8003234 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003206:	4b41      	ldr	r3, [pc, #260]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <HAL_RCC_OscConfig+0x152>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d001      	beq.n	800321e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e1c7      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321e:	4b3b      	ldr	r3, [pc, #236]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4937      	ldr	r1, [pc, #220]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 800322e:	4313      	orrs	r3, r2
 8003230:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003232:	e03a      	b.n	80032aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d020      	beq.n	800327e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800323c:	4b34      	ldr	r3, [pc, #208]	@ (8003310 <HAL_RCC_OscConfig+0x244>)
 800323e:	2201      	movs	r2, #1
 8003240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003242:	f7ff f809 	bl	8002258 <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003248:	e008      	b.n	800325c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800324a:	f7ff f805 	bl	8002258 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e1a8      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325c:	4b2b      	ldr	r3, [pc, #172]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f0      	beq.n	800324a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003268:	4b28      	ldr	r3, [pc, #160]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4925      	ldr	r1, [pc, #148]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 8003278:	4313      	orrs	r3, r2
 800327a:	600b      	str	r3, [r1, #0]
 800327c:	e015      	b.n	80032aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800327e:	4b24      	ldr	r3, [pc, #144]	@ (8003310 <HAL_RCC_OscConfig+0x244>)
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003284:	f7fe ffe8 	bl	8002258 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800328c:	f7fe ffe4 	bl	8002258 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e187      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329e:	4b1b      	ldr	r3, [pc, #108]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d036      	beq.n	8003324 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	695b      	ldr	r3, [r3, #20]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d016      	beq.n	80032ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032be:	4b15      	ldr	r3, [pc, #84]	@ (8003314 <HAL_RCC_OscConfig+0x248>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c4:	f7fe ffc8 	bl	8002258 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032cc:	f7fe ffc4 	bl	8002258 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e167      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032de:	4b0b      	ldr	r3, [pc, #44]	@ (800330c <HAL_RCC_OscConfig+0x240>)
 80032e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0x200>
 80032ea:	e01b      	b.n	8003324 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ec:	4b09      	ldr	r3, [pc, #36]	@ (8003314 <HAL_RCC_OscConfig+0x248>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f2:	f7fe ffb1 	bl	8002258 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f8:	e00e      	b.n	8003318 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032fa:	f7fe ffad 	bl	8002258 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d907      	bls.n	8003318 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e150      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
 800330c:	40023800 	.word	0x40023800
 8003310:	42470000 	.word	0x42470000
 8003314:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003318:	4b88      	ldr	r3, [pc, #544]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 800331a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1ea      	bne.n	80032fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0304 	and.w	r3, r3, #4
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 8097 	beq.w	8003460 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003332:	2300      	movs	r3, #0
 8003334:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003336:	4b81      	ldr	r3, [pc, #516]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10f      	bne.n	8003362 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	4b7d      	ldr	r3, [pc, #500]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	4a7c      	ldr	r2, [pc, #496]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 800334c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003350:	6413      	str	r3, [r2, #64]	@ 0x40
 8003352:	4b7a      	ldr	r3, [pc, #488]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800335a:	60bb      	str	r3, [r7, #8]
 800335c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800335e:	2301      	movs	r3, #1
 8003360:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003362:	4b77      	ldr	r3, [pc, #476]	@ (8003540 <HAL_RCC_OscConfig+0x474>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800336a:	2b00      	cmp	r3, #0
 800336c:	d118      	bne.n	80033a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800336e:	4b74      	ldr	r3, [pc, #464]	@ (8003540 <HAL_RCC_OscConfig+0x474>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a73      	ldr	r2, [pc, #460]	@ (8003540 <HAL_RCC_OscConfig+0x474>)
 8003374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003378:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800337a:	f7fe ff6d 	bl	8002258 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003382:	f7fe ff69 	bl	8002258 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e10c      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003394:	4b6a      	ldr	r3, [pc, #424]	@ (8003540 <HAL_RCC_OscConfig+0x474>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d106      	bne.n	80033b6 <HAL_RCC_OscConfig+0x2ea>
 80033a8:	4b64      	ldr	r3, [pc, #400]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ac:	4a63      	ldr	r2, [pc, #396]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80033b4:	e01c      	b.n	80033f0 <HAL_RCC_OscConfig+0x324>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	2b05      	cmp	r3, #5
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCC_OscConfig+0x30c>
 80033be:	4b5f      	ldr	r3, [pc, #380]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80033c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c2:	4a5e      	ldr	r2, [pc, #376]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80033c4:	f043 0304 	orr.w	r3, r3, #4
 80033c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ca:	4b5c      	ldr	r3, [pc, #368]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80033cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ce:	4a5b      	ldr	r2, [pc, #364]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80033d0:	f043 0301 	orr.w	r3, r3, #1
 80033d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80033d6:	e00b      	b.n	80033f0 <HAL_RCC_OscConfig+0x324>
 80033d8:	4b58      	ldr	r3, [pc, #352]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033dc:	4a57      	ldr	r2, [pc, #348]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80033de:	f023 0301 	bic.w	r3, r3, #1
 80033e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80033e4:	4b55      	ldr	r3, [pc, #340]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80033e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e8:	4a54      	ldr	r2, [pc, #336]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80033ea:	f023 0304 	bic.w	r3, r3, #4
 80033ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d015      	beq.n	8003424 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f8:	f7fe ff2e 	bl	8002258 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fe:	e00a      	b.n	8003416 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003400:	f7fe ff2a 	bl	8002258 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800340e:	4293      	cmp	r3, r2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e0cb      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003416:	4b49      	ldr	r3, [pc, #292]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 8003418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0ee      	beq.n	8003400 <HAL_RCC_OscConfig+0x334>
 8003422:	e014      	b.n	800344e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003424:	f7fe ff18 	bl	8002258 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800342a:	e00a      	b.n	8003442 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342c:	f7fe ff14 	bl	8002258 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800343a:	4293      	cmp	r3, r2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e0b5      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003442:	4b3e      	ldr	r3, [pc, #248]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1ee      	bne.n	800342c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800344e:	7dfb      	ldrb	r3, [r7, #23]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d105      	bne.n	8003460 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003454:	4b39      	ldr	r3, [pc, #228]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 8003456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003458:	4a38      	ldr	r2, [pc, #224]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 800345a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800345e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 80a1 	beq.w	80035ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800346a:	4b34      	ldr	r3, [pc, #208]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 030c 	and.w	r3, r3, #12
 8003472:	2b08      	cmp	r3, #8
 8003474:	d05c      	beq.n	8003530 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d141      	bne.n	8003502 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347e:	4b31      	ldr	r3, [pc, #196]	@ (8003544 <HAL_RCC_OscConfig+0x478>)
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003484:	f7fe fee8 	bl	8002258 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348c:	f7fe fee4 	bl	8002258 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b02      	cmp	r3, #2
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e087      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349e:	4b27      	ldr	r3, [pc, #156]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69da      	ldr	r2, [r3, #28]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	431a      	orrs	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b8:	019b      	lsls	r3, r3, #6
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c0:	085b      	lsrs	r3, r3, #1
 80034c2:	3b01      	subs	r3, #1
 80034c4:	041b      	lsls	r3, r3, #16
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034cc:	061b      	lsls	r3, r3, #24
 80034ce:	491b      	ldr	r1, [pc, #108]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003544 <HAL_RCC_OscConfig+0x478>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034da:	f7fe febd 	bl	8002258 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e2:	f7fe feb9 	bl	8002258 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e05c      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f4:	4b11      	ldr	r3, [pc, #68]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x416>
 8003500:	e054      	b.n	80035ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003502:	4b10      	ldr	r3, [pc, #64]	@ (8003544 <HAL_RCC_OscConfig+0x478>)
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003508:	f7fe fea6 	bl	8002258 <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350e:	e008      	b.n	8003522 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003510:	f7fe fea2 	bl	8002258 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d901      	bls.n	8003522 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800351e:	2303      	movs	r3, #3
 8003520:	e045      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003522:	4b06      	ldr	r3, [pc, #24]	@ (800353c <HAL_RCC_OscConfig+0x470>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f0      	bne.n	8003510 <HAL_RCC_OscConfig+0x444>
 800352e:	e03d      	b.n	80035ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d107      	bne.n	8003548 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e038      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
 800353c:	40023800 	.word	0x40023800
 8003540:	40007000 	.word	0x40007000
 8003544:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003548:	4b1b      	ldr	r3, [pc, #108]	@ (80035b8 <HAL_RCC_OscConfig+0x4ec>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d028      	beq.n	80035a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d121      	bne.n	80035a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356e:	429a      	cmp	r2, r3
 8003570:	d11a      	bne.n	80035a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003578:	4013      	ands	r3, r2
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800357e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003580:	4293      	cmp	r3, r2
 8003582:	d111      	bne.n	80035a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800358e:	085b      	lsrs	r3, r3, #1
 8003590:	3b01      	subs	r3, #1
 8003592:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003594:	429a      	cmp	r2, r3
 8003596:	d107      	bne.n	80035a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d001      	beq.n	80035ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40023800 	.word	0x40023800

080035bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0cc      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035d0:	4b68      	ldr	r3, [pc, #416]	@ (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 030f 	and.w	r3, r3, #15
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d90c      	bls.n	80035f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035de:	4b65      	ldr	r3, [pc, #404]	@ (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e6:	4b63      	ldr	r3, [pc, #396]	@ (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d001      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0b8      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d020      	beq.n	8003646 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003610:	4b59      	ldr	r3, [pc, #356]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	4a58      	ldr	r2, [pc, #352]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003616:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800361a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003628:	4b53      	ldr	r3, [pc, #332]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	4a52      	ldr	r2, [pc, #328]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800362e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003632:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003634:	4b50      	ldr	r3, [pc, #320]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	494d      	ldr	r1, [pc, #308]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	4313      	orrs	r3, r2
 8003644:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d044      	beq.n	80036dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d107      	bne.n	800366a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365a:	4b47      	ldr	r3, [pc, #284]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d119      	bne.n	800369a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e07f      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d003      	beq.n	800367a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003676:	2b03      	cmp	r3, #3
 8003678:	d107      	bne.n	800368a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367a:	4b3f      	ldr	r3, [pc, #252]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d109      	bne.n	800369a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e06f      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800368a:	4b3b      	ldr	r3, [pc, #236]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e067      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800369a:	4b37      	ldr	r3, [pc, #220]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f023 0203 	bic.w	r2, r3, #3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	4934      	ldr	r1, [pc, #208]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036ac:	f7fe fdd4 	bl	8002258 <HAL_GetTick>
 80036b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036b2:	e00a      	b.n	80036ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036b4:	f7fe fdd0 	bl	8002258 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e04f      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ca:	4b2b      	ldr	r3, [pc, #172]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 020c 	and.w	r2, r3, #12
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	429a      	cmp	r2, r3
 80036da:	d1eb      	bne.n	80036b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036dc:	4b25      	ldr	r3, [pc, #148]	@ (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 030f 	and.w	r3, r3, #15
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d20c      	bcs.n	8003704 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ea:	4b22      	ldr	r3, [pc, #136]	@ (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	b2d2      	uxtb	r2, r2
 80036f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f2:	4b20      	ldr	r3, [pc, #128]	@ (8003774 <HAL_RCC_ClockConfig+0x1b8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 030f 	and.w	r3, r3, #15
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d001      	beq.n	8003704 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e032      	b.n	800376a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003710:	4b19      	ldr	r3, [pc, #100]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	4916      	ldr	r1, [pc, #88]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	4313      	orrs	r3, r2
 8003720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800372e:	4b12      	ldr	r3, [pc, #72]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	490e      	ldr	r1, [pc, #56]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	4313      	orrs	r3, r2
 8003740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003742:	f000 f821 	bl	8003788 <HAL_RCC_GetSysClockFreq>
 8003746:	4602      	mov	r2, r0
 8003748:	4b0b      	ldr	r3, [pc, #44]	@ (8003778 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	490a      	ldr	r1, [pc, #40]	@ (800377c <HAL_RCC_ClockConfig+0x1c0>)
 8003754:	5ccb      	ldrb	r3, [r1, r3]
 8003756:	fa22 f303 	lsr.w	r3, r2, r3
 800375a:	4a09      	ldr	r2, [pc, #36]	@ (8003780 <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800375e:	4b09      	ldr	r3, [pc, #36]	@ (8003784 <HAL_RCC_ClockConfig+0x1c8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7fe fd34 	bl	80021d0 <HAL_InitTick>

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40023c00 	.word	0x40023c00
 8003778:	40023800 	.word	0x40023800
 800377c:	08005a70 	.word	0x08005a70
 8003780:	20000004 	.word	0x20000004
 8003784:	20000008 	.word	0x20000008

08003788 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800378c:	b094      	sub	sp, #80	@ 0x50
 800378e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003790:	2300      	movs	r3, #0
 8003792:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037a0:	4b79      	ldr	r3, [pc, #484]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 030c 	and.w	r3, r3, #12
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d00d      	beq.n	80037c8 <HAL_RCC_GetSysClockFreq+0x40>
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	f200 80e1 	bhi.w	8003974 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <HAL_RCC_GetSysClockFreq+0x34>
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d003      	beq.n	80037c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80037ba:	e0db      	b.n	8003974 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037bc:	4b73      	ldr	r3, [pc, #460]	@ (800398c <HAL_RCC_GetSysClockFreq+0x204>)
 80037be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037c0:	e0db      	b.n	800397a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037c2:	4b73      	ldr	r3, [pc, #460]	@ (8003990 <HAL_RCC_GetSysClockFreq+0x208>)
 80037c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037c6:	e0d8      	b.n	800397a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037c8:	4b6f      	ldr	r3, [pc, #444]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x200>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d063      	beq.n	80038a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037de:	4b6a      	ldr	r3, [pc, #424]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x200>)
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	099b      	lsrs	r3, r3, #6
 80037e4:	2200      	movs	r2, #0
 80037e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80037ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80037f2:	2300      	movs	r3, #0
 80037f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80037f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80037fa:	4622      	mov	r2, r4
 80037fc:	462b      	mov	r3, r5
 80037fe:	f04f 0000 	mov.w	r0, #0
 8003802:	f04f 0100 	mov.w	r1, #0
 8003806:	0159      	lsls	r1, r3, #5
 8003808:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800380c:	0150      	lsls	r0, r2, #5
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4621      	mov	r1, r4
 8003814:	1a51      	subs	r1, r2, r1
 8003816:	6139      	str	r1, [r7, #16]
 8003818:	4629      	mov	r1, r5
 800381a:	eb63 0301 	sbc.w	r3, r3, r1
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800382c:	4659      	mov	r1, fp
 800382e:	018b      	lsls	r3, r1, #6
 8003830:	4651      	mov	r1, sl
 8003832:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003836:	4651      	mov	r1, sl
 8003838:	018a      	lsls	r2, r1, #6
 800383a:	4651      	mov	r1, sl
 800383c:	ebb2 0801 	subs.w	r8, r2, r1
 8003840:	4659      	mov	r1, fp
 8003842:	eb63 0901 	sbc.w	r9, r3, r1
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003852:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003856:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800385a:	4690      	mov	r8, r2
 800385c:	4699      	mov	r9, r3
 800385e:	4623      	mov	r3, r4
 8003860:	eb18 0303 	adds.w	r3, r8, r3
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	462b      	mov	r3, r5
 8003868:	eb49 0303 	adc.w	r3, r9, r3
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	f04f 0200 	mov.w	r2, #0
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800387a:	4629      	mov	r1, r5
 800387c:	024b      	lsls	r3, r1, #9
 800387e:	4621      	mov	r1, r4
 8003880:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003884:	4621      	mov	r1, r4
 8003886:	024a      	lsls	r2, r1, #9
 8003888:	4610      	mov	r0, r2
 800388a:	4619      	mov	r1, r3
 800388c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800388e:	2200      	movs	r2, #0
 8003890:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003892:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003894:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003898:	f7fd f810 	bl	80008bc <__aeabi_uldivmod>
 800389c:	4602      	mov	r2, r0
 800389e:	460b      	mov	r3, r1
 80038a0:	4613      	mov	r3, r2
 80038a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038a4:	e058      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a6:	4b38      	ldr	r3, [pc, #224]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x200>)
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	099b      	lsrs	r3, r3, #6
 80038ac:	2200      	movs	r2, #0
 80038ae:	4618      	mov	r0, r3
 80038b0:	4611      	mov	r1, r2
 80038b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038b6:	623b      	str	r3, [r7, #32]
 80038b8:	2300      	movs	r3, #0
 80038ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80038bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038c0:	4642      	mov	r2, r8
 80038c2:	464b      	mov	r3, r9
 80038c4:	f04f 0000 	mov.w	r0, #0
 80038c8:	f04f 0100 	mov.w	r1, #0
 80038cc:	0159      	lsls	r1, r3, #5
 80038ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038d2:	0150      	lsls	r0, r2, #5
 80038d4:	4602      	mov	r2, r0
 80038d6:	460b      	mov	r3, r1
 80038d8:	4641      	mov	r1, r8
 80038da:	ebb2 0a01 	subs.w	sl, r2, r1
 80038de:	4649      	mov	r1, r9
 80038e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038f8:	ebb2 040a 	subs.w	r4, r2, sl
 80038fc:	eb63 050b 	sbc.w	r5, r3, fp
 8003900:	f04f 0200 	mov.w	r2, #0
 8003904:	f04f 0300 	mov.w	r3, #0
 8003908:	00eb      	lsls	r3, r5, #3
 800390a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800390e:	00e2      	lsls	r2, r4, #3
 8003910:	4614      	mov	r4, r2
 8003912:	461d      	mov	r5, r3
 8003914:	4643      	mov	r3, r8
 8003916:	18e3      	adds	r3, r4, r3
 8003918:	603b      	str	r3, [r7, #0]
 800391a:	464b      	mov	r3, r9
 800391c:	eb45 0303 	adc.w	r3, r5, r3
 8003920:	607b      	str	r3, [r7, #4]
 8003922:	f04f 0200 	mov.w	r2, #0
 8003926:	f04f 0300 	mov.w	r3, #0
 800392a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800392e:	4629      	mov	r1, r5
 8003930:	028b      	lsls	r3, r1, #10
 8003932:	4621      	mov	r1, r4
 8003934:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003938:	4621      	mov	r1, r4
 800393a:	028a      	lsls	r2, r1, #10
 800393c:	4610      	mov	r0, r2
 800393e:	4619      	mov	r1, r3
 8003940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003942:	2200      	movs	r2, #0
 8003944:	61bb      	str	r3, [r7, #24]
 8003946:	61fa      	str	r2, [r7, #28]
 8003948:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800394c:	f7fc ffb6 	bl	80008bc <__aeabi_uldivmod>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4613      	mov	r3, r2
 8003956:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003958:	4b0b      	ldr	r3, [pc, #44]	@ (8003988 <HAL_RCC_GetSysClockFreq+0x200>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	0c1b      	lsrs	r3, r3, #16
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	3301      	adds	r3, #1
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003968:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800396a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800396c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003970:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003972:	e002      	b.n	800397a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003974:	4b05      	ldr	r3, [pc, #20]	@ (800398c <HAL_RCC_GetSysClockFreq+0x204>)
 8003976:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003978:	bf00      	nop
    }
  }
  return sysclockfreq;
 800397a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800397c:	4618      	mov	r0, r3
 800397e:	3750      	adds	r7, #80	@ 0x50
 8003980:	46bd      	mov	sp, r7
 8003982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003986:	bf00      	nop
 8003988:	40023800 	.word	0x40023800
 800398c:	00f42400 	.word	0x00f42400
 8003990:	007a1200 	.word	0x007a1200

08003994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003998:	4b03      	ldr	r3, [pc, #12]	@ (80039a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800399a:	681b      	ldr	r3, [r3, #0]
}
 800399c:	4618      	mov	r0, r3
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	20000004 	.word	0x20000004

080039ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039b0:	f7ff fff0 	bl	8003994 <HAL_RCC_GetHCLKFreq>
 80039b4:	4602      	mov	r2, r0
 80039b6:	4b05      	ldr	r3, [pc, #20]	@ (80039cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	0a9b      	lsrs	r3, r3, #10
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	4903      	ldr	r1, [pc, #12]	@ (80039d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039c2:	5ccb      	ldrb	r3, [r1, r3]
 80039c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40023800 	.word	0x40023800
 80039d0:	08005a80 	.word	0x08005a80

080039d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039d8:	f7ff ffdc 	bl	8003994 <HAL_RCC_GetHCLKFreq>
 80039dc:	4602      	mov	r2, r0
 80039de:	4b05      	ldr	r3, [pc, #20]	@ (80039f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	0b5b      	lsrs	r3, r3, #13
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	4903      	ldr	r1, [pc, #12]	@ (80039f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ea:	5ccb      	ldrb	r3, [r1, r3]
 80039ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40023800 	.word	0x40023800
 80039f8:	08005a80 	.word	0x08005a80

080039fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e042      	b.n	8003a94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fe fa02 	bl	8001e2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2224      	movs	r2, #36	@ 0x24
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f973 	bl	8003d2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695a      	ldr	r2, [r3, #20]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b08a      	sub	sp, #40	@ 0x28
 8003aa0:	af02      	add	r7, sp, #8
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b20      	cmp	r3, #32
 8003aba:	d175      	bne.n	8003ba8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_UART_Transmit+0x2c>
 8003ac2:	88fb      	ldrh	r3, [r7, #6]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e06e      	b.n	8003baa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2221      	movs	r2, #33	@ 0x21
 8003ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ada:	f7fe fbbd 	bl	8002258 <HAL_GetTick>
 8003ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	88fa      	ldrh	r2, [r7, #6]
 8003ae4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	88fa      	ldrh	r2, [r7, #6]
 8003aea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003af4:	d108      	bne.n	8003b08 <HAL_UART_Transmit+0x6c>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d104      	bne.n	8003b08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	e003      	b.n	8003b10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b10:	e02e      	b.n	8003b70 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	2180      	movs	r1, #128	@ 0x80
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f848 	bl	8003bb2 <UART_WaitOnFlagUntilTimeout>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e03a      	b.n	8003baa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10b      	bne.n	8003b52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	e007      	b.n	8003b62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	781a      	ldrb	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1cb      	bne.n	8003b12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2200      	movs	r2, #0
 8003b82:	2140      	movs	r1, #64	@ 0x40
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f814 	bl	8003bb2 <UART_WaitOnFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e006      	b.n	8003baa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	e000      	b.n	8003baa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ba8:	2302      	movs	r3, #2
  }
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3720      	adds	r7, #32
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b086      	sub	sp, #24
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	603b      	str	r3, [r7, #0]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bc2:	e03b      	b.n	8003c3c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bc4:	6a3b      	ldr	r3, [r7, #32]
 8003bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bca:	d037      	beq.n	8003c3c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bcc:	f7fe fb44 	bl	8002258 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	6a3a      	ldr	r2, [r7, #32]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d302      	bcc.n	8003be2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e03a      	b.n	8003c5c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d023      	beq.n	8003c3c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b80      	cmp	r3, #128	@ 0x80
 8003bf8:	d020      	beq.n	8003c3c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	2b40      	cmp	r3, #64	@ 0x40
 8003bfe:	d01d      	beq.n	8003c3c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d116      	bne.n	8003c3c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	617b      	str	r3, [r7, #20]
 8003c22:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f81d 	bl	8003c64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2208      	movs	r2, #8
 8003c2e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e00f      	b.n	8003c5c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	4013      	ands	r3, r2
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	bf0c      	ite	eq
 8003c4c:	2301      	moveq	r3, #1
 8003c4e:	2300      	movne	r3, #0
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	79fb      	ldrb	r3, [r7, #7]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d0b4      	beq.n	8003bc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3718      	adds	r7, #24
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b095      	sub	sp, #84	@ 0x54
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	330c      	adds	r3, #12
 8003c72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c76:	e853 3f00 	ldrex	r3, [r3]
 8003c7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	330c      	adds	r3, #12
 8003c8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c8c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c94:	e841 2300 	strex	r3, r2, [r1]
 8003c98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1e5      	bne.n	8003c6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3314      	adds	r3, #20
 8003ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	e853 3f00 	ldrex	r3, [r3]
 8003cae:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f023 0301 	bic.w	r3, r3, #1
 8003cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3314      	adds	r3, #20
 8003cbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cc8:	e841 2300 	strex	r3, r2, [r1]
 8003ccc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e5      	bne.n	8003ca0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d119      	bne.n	8003d10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	330c      	adds	r3, #12
 8003ce2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	e853 3f00 	ldrex	r3, [r3]
 8003cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f023 0310 	bic.w	r3, r3, #16
 8003cf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	330c      	adds	r3, #12
 8003cfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cfc:	61ba      	str	r2, [r7, #24]
 8003cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d00:	6979      	ldr	r1, [r7, #20]
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	e841 2300 	strex	r3, r2, [r1]
 8003d08:	613b      	str	r3, [r7, #16]
   return(result);
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e5      	bne.n	8003cdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d1e:	bf00      	nop
 8003d20:	3754      	adds	r7, #84	@ 0x54
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
	...

08003d2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d30:	b0c0      	sub	sp, #256	@ 0x100
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d48:	68d9      	ldr	r1, [r3, #12]
 8003d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	ea40 0301 	orr.w	r3, r0, r1
 8003d54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d84:	f021 010c 	bic.w	r1, r1, #12
 8003d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d92:	430b      	orrs	r3, r1
 8003d94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da6:	6999      	ldr	r1, [r3, #24]
 8003da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	ea40 0301 	orr.w	r3, r0, r1
 8003db2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	4b8f      	ldr	r3, [pc, #572]	@ (8003ff8 <UART_SetConfig+0x2cc>)
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d005      	beq.n	8003dcc <UART_SetConfig+0xa0>
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	4b8d      	ldr	r3, [pc, #564]	@ (8003ffc <UART_SetConfig+0x2d0>)
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d104      	bne.n	8003dd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dcc:	f7ff fe02 	bl	80039d4 <HAL_RCC_GetPCLK2Freq>
 8003dd0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003dd4:	e003      	b.n	8003dde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dd6:	f7ff fde9 	bl	80039ac <HAL_RCC_GetPCLK1Freq>
 8003dda:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003de8:	f040 810c 	bne.w	8004004 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003df0:	2200      	movs	r2, #0
 8003df2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003df6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003dfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003dfe:	4622      	mov	r2, r4
 8003e00:	462b      	mov	r3, r5
 8003e02:	1891      	adds	r1, r2, r2
 8003e04:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e06:	415b      	adcs	r3, r3
 8003e08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e0e:	4621      	mov	r1, r4
 8003e10:	eb12 0801 	adds.w	r8, r2, r1
 8003e14:	4629      	mov	r1, r5
 8003e16:	eb43 0901 	adc.w	r9, r3, r1
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e2e:	4690      	mov	r8, r2
 8003e30:	4699      	mov	r9, r3
 8003e32:	4623      	mov	r3, r4
 8003e34:	eb18 0303 	adds.w	r3, r8, r3
 8003e38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e3c:	462b      	mov	r3, r5
 8003e3e:	eb49 0303 	adc.w	r3, r9, r3
 8003e42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e52:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	18db      	adds	r3, r3, r3
 8003e5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e60:	4613      	mov	r3, r2
 8003e62:	eb42 0303 	adc.w	r3, r2, r3
 8003e66:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e70:	f7fc fd24 	bl	80008bc <__aeabi_uldivmod>
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	4b61      	ldr	r3, [pc, #388]	@ (8004000 <UART_SetConfig+0x2d4>)
 8003e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e7e:	095b      	lsrs	r3, r3, #5
 8003e80:	011c      	lsls	r4, r3, #4
 8003e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e86:	2200      	movs	r2, #0
 8003e88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e8c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e94:	4642      	mov	r2, r8
 8003e96:	464b      	mov	r3, r9
 8003e98:	1891      	adds	r1, r2, r2
 8003e9a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003e9c:	415b      	adcs	r3, r3
 8003e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ea0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	eb12 0a01 	adds.w	sl, r2, r1
 8003eaa:	4649      	mov	r1, r9
 8003eac:	eb43 0b01 	adc.w	fp, r3, r1
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ebc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ec0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ec4:	4692      	mov	sl, r2
 8003ec6:	469b      	mov	fp, r3
 8003ec8:	4643      	mov	r3, r8
 8003eca:	eb1a 0303 	adds.w	r3, sl, r3
 8003ece:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ed2:	464b      	mov	r3, r9
 8003ed4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ed8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ee8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003eec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	18db      	adds	r3, r3, r3
 8003ef4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	eb42 0303 	adc.w	r3, r2, r3
 8003efc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003efe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f06:	f7fc fcd9 	bl	80008bc <__aeabi_uldivmod>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4611      	mov	r1, r2
 8003f10:	4b3b      	ldr	r3, [pc, #236]	@ (8004000 <UART_SetConfig+0x2d4>)
 8003f12:	fba3 2301 	umull	r2, r3, r3, r1
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	2264      	movs	r2, #100	@ 0x64
 8003f1a:	fb02 f303 	mul.w	r3, r2, r3
 8003f1e:	1acb      	subs	r3, r1, r3
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f26:	4b36      	ldr	r3, [pc, #216]	@ (8004000 <UART_SetConfig+0x2d4>)
 8003f28:	fba3 2302 	umull	r2, r3, r3, r2
 8003f2c:	095b      	lsrs	r3, r3, #5
 8003f2e:	005b      	lsls	r3, r3, #1
 8003f30:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f34:	441c      	add	r4, r3
 8003f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f40:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f48:	4642      	mov	r2, r8
 8003f4a:	464b      	mov	r3, r9
 8003f4c:	1891      	adds	r1, r2, r2
 8003f4e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f50:	415b      	adcs	r3, r3
 8003f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f58:	4641      	mov	r1, r8
 8003f5a:	1851      	adds	r1, r2, r1
 8003f5c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f5e:	4649      	mov	r1, r9
 8003f60:	414b      	adcs	r3, r1
 8003f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f70:	4659      	mov	r1, fp
 8003f72:	00cb      	lsls	r3, r1, #3
 8003f74:	4651      	mov	r1, sl
 8003f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f7a:	4651      	mov	r1, sl
 8003f7c:	00ca      	lsls	r2, r1, #3
 8003f7e:	4610      	mov	r0, r2
 8003f80:	4619      	mov	r1, r3
 8003f82:	4603      	mov	r3, r0
 8003f84:	4642      	mov	r2, r8
 8003f86:	189b      	adds	r3, r3, r2
 8003f88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f8c:	464b      	mov	r3, r9
 8003f8e:	460a      	mov	r2, r1
 8003f90:	eb42 0303 	adc.w	r3, r2, r3
 8003f94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fa4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003fa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fac:	460b      	mov	r3, r1
 8003fae:	18db      	adds	r3, r3, r3
 8003fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	eb42 0303 	adc.w	r3, r2, r3
 8003fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003fc2:	f7fc fc7b 	bl	80008bc <__aeabi_uldivmod>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	4b0d      	ldr	r3, [pc, #52]	@ (8004000 <UART_SetConfig+0x2d4>)
 8003fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	2164      	movs	r1, #100	@ 0x64
 8003fd4:	fb01 f303 	mul.w	r3, r1, r3
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	3332      	adds	r3, #50	@ 0x32
 8003fde:	4a08      	ldr	r2, [pc, #32]	@ (8004000 <UART_SetConfig+0x2d4>)
 8003fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	f003 0207 	and.w	r2, r3, #7
 8003fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4422      	add	r2, r4
 8003ff2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ff4:	e106      	b.n	8004204 <UART_SetConfig+0x4d8>
 8003ff6:	bf00      	nop
 8003ff8:	40011000 	.word	0x40011000
 8003ffc:	40011400 	.word	0x40011400
 8004000:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004008:	2200      	movs	r2, #0
 800400a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800400e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004012:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004016:	4642      	mov	r2, r8
 8004018:	464b      	mov	r3, r9
 800401a:	1891      	adds	r1, r2, r2
 800401c:	6239      	str	r1, [r7, #32]
 800401e:	415b      	adcs	r3, r3
 8004020:	627b      	str	r3, [r7, #36]	@ 0x24
 8004022:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004026:	4641      	mov	r1, r8
 8004028:	1854      	adds	r4, r2, r1
 800402a:	4649      	mov	r1, r9
 800402c:	eb43 0501 	adc.w	r5, r3, r1
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	00eb      	lsls	r3, r5, #3
 800403a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800403e:	00e2      	lsls	r2, r4, #3
 8004040:	4614      	mov	r4, r2
 8004042:	461d      	mov	r5, r3
 8004044:	4643      	mov	r3, r8
 8004046:	18e3      	adds	r3, r4, r3
 8004048:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800404c:	464b      	mov	r3, r9
 800404e:	eb45 0303 	adc.w	r3, r5, r3
 8004052:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004062:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004066:	f04f 0200 	mov.w	r2, #0
 800406a:	f04f 0300 	mov.w	r3, #0
 800406e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004072:	4629      	mov	r1, r5
 8004074:	008b      	lsls	r3, r1, #2
 8004076:	4621      	mov	r1, r4
 8004078:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800407c:	4621      	mov	r1, r4
 800407e:	008a      	lsls	r2, r1, #2
 8004080:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004084:	f7fc fc1a 	bl	80008bc <__aeabi_uldivmod>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4b60      	ldr	r3, [pc, #384]	@ (8004210 <UART_SetConfig+0x4e4>)
 800408e:	fba3 2302 	umull	r2, r3, r3, r2
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	011c      	lsls	r4, r3, #4
 8004096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800409a:	2200      	movs	r2, #0
 800409c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80040a8:	4642      	mov	r2, r8
 80040aa:	464b      	mov	r3, r9
 80040ac:	1891      	adds	r1, r2, r2
 80040ae:	61b9      	str	r1, [r7, #24]
 80040b0:	415b      	adcs	r3, r3
 80040b2:	61fb      	str	r3, [r7, #28]
 80040b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040b8:	4641      	mov	r1, r8
 80040ba:	1851      	adds	r1, r2, r1
 80040bc:	6139      	str	r1, [r7, #16]
 80040be:	4649      	mov	r1, r9
 80040c0:	414b      	adcs	r3, r1
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040d0:	4659      	mov	r1, fp
 80040d2:	00cb      	lsls	r3, r1, #3
 80040d4:	4651      	mov	r1, sl
 80040d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040da:	4651      	mov	r1, sl
 80040dc:	00ca      	lsls	r2, r1, #3
 80040de:	4610      	mov	r0, r2
 80040e0:	4619      	mov	r1, r3
 80040e2:	4603      	mov	r3, r0
 80040e4:	4642      	mov	r2, r8
 80040e6:	189b      	adds	r3, r3, r2
 80040e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040ec:	464b      	mov	r3, r9
 80040ee:	460a      	mov	r2, r1
 80040f0:	eb42 0303 	adc.w	r3, r2, r3
 80040f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004102:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004110:	4649      	mov	r1, r9
 8004112:	008b      	lsls	r3, r1, #2
 8004114:	4641      	mov	r1, r8
 8004116:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800411a:	4641      	mov	r1, r8
 800411c:	008a      	lsls	r2, r1, #2
 800411e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004122:	f7fc fbcb 	bl	80008bc <__aeabi_uldivmod>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4611      	mov	r1, r2
 800412c:	4b38      	ldr	r3, [pc, #224]	@ (8004210 <UART_SetConfig+0x4e4>)
 800412e:	fba3 2301 	umull	r2, r3, r3, r1
 8004132:	095b      	lsrs	r3, r3, #5
 8004134:	2264      	movs	r2, #100	@ 0x64
 8004136:	fb02 f303 	mul.w	r3, r2, r3
 800413a:	1acb      	subs	r3, r1, r3
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	3332      	adds	r3, #50	@ 0x32
 8004140:	4a33      	ldr	r2, [pc, #204]	@ (8004210 <UART_SetConfig+0x4e4>)
 8004142:	fba2 2303 	umull	r2, r3, r2, r3
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800414c:	441c      	add	r4, r3
 800414e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004152:	2200      	movs	r2, #0
 8004154:	673b      	str	r3, [r7, #112]	@ 0x70
 8004156:	677a      	str	r2, [r7, #116]	@ 0x74
 8004158:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800415c:	4642      	mov	r2, r8
 800415e:	464b      	mov	r3, r9
 8004160:	1891      	adds	r1, r2, r2
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	415b      	adcs	r3, r3
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800416c:	4641      	mov	r1, r8
 800416e:	1851      	adds	r1, r2, r1
 8004170:	6039      	str	r1, [r7, #0]
 8004172:	4649      	mov	r1, r9
 8004174:	414b      	adcs	r3, r1
 8004176:	607b      	str	r3, [r7, #4]
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004184:	4659      	mov	r1, fp
 8004186:	00cb      	lsls	r3, r1, #3
 8004188:	4651      	mov	r1, sl
 800418a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800418e:	4651      	mov	r1, sl
 8004190:	00ca      	lsls	r2, r1, #3
 8004192:	4610      	mov	r0, r2
 8004194:	4619      	mov	r1, r3
 8004196:	4603      	mov	r3, r0
 8004198:	4642      	mov	r2, r8
 800419a:	189b      	adds	r3, r3, r2
 800419c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800419e:	464b      	mov	r3, r9
 80041a0:	460a      	mov	r2, r1
 80041a2:	eb42 0303 	adc.w	r3, r2, r3
 80041a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80041b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80041b4:	f04f 0200 	mov.w	r2, #0
 80041b8:	f04f 0300 	mov.w	r3, #0
 80041bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80041c0:	4649      	mov	r1, r9
 80041c2:	008b      	lsls	r3, r1, #2
 80041c4:	4641      	mov	r1, r8
 80041c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041ca:	4641      	mov	r1, r8
 80041cc:	008a      	lsls	r2, r1, #2
 80041ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041d2:	f7fc fb73 	bl	80008bc <__aeabi_uldivmod>
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	4b0d      	ldr	r3, [pc, #52]	@ (8004210 <UART_SetConfig+0x4e4>)
 80041dc:	fba3 1302 	umull	r1, r3, r3, r2
 80041e0:	095b      	lsrs	r3, r3, #5
 80041e2:	2164      	movs	r1, #100	@ 0x64
 80041e4:	fb01 f303 	mul.w	r3, r1, r3
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	3332      	adds	r3, #50	@ 0x32
 80041ee:	4a08      	ldr	r2, [pc, #32]	@ (8004210 <UART_SetConfig+0x4e4>)
 80041f0:	fba2 2303 	umull	r2, r3, r2, r3
 80041f4:	095b      	lsrs	r3, r3, #5
 80041f6:	f003 020f 	and.w	r2, r3, #15
 80041fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4422      	add	r2, r4
 8004202:	609a      	str	r2, [r3, #8]
}
 8004204:	bf00      	nop
 8004206:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800420a:	46bd      	mov	sp, r7
 800420c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004210:	51eb851f 	.word	0x51eb851f

08004214 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004214:	b084      	sub	sp, #16
 8004216:	b580      	push	{r7, lr}
 8004218:	b084      	sub	sp, #16
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	f107 001c 	add.w	r0, r7, #28
 8004222:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004226:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800422a:	2b01      	cmp	r3, #1
 800422c:	d123      	bne.n	8004276 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004232:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004242:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004256:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800425a:	2b01      	cmp	r3, #1
 800425c:	d105      	bne.n	800426a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 faa0 	bl	80047b0 <USB_CoreReset>
 8004270:	4603      	mov	r3, r0
 8004272:	73fb      	strb	r3, [r7, #15]
 8004274:	e01b      	b.n	80042ae <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 fa94 	bl	80047b0 <USB_CoreReset>
 8004288:	4603      	mov	r3, r0
 800428a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800428c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004290:	2b00      	cmp	r3, #0
 8004292:	d106      	bne.n	80042a2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004298:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	639a      	str	r2, [r3, #56]	@ 0x38
 80042a0:	e005      	b.n	80042ae <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80042ae:	7fbb      	ldrb	r3, [r7, #30]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d10b      	bne.n	80042cc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f043 0206 	orr.w	r2, r3, #6
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f043 0220 	orr.w	r2, r3, #32
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042d8:	b004      	add	sp, #16
 80042da:	4770      	bx	lr

080042dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f023 0201 	bic.w	r2, r3, #1
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	460b      	mov	r3, r1
 8004308:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d115      	bne.n	800434c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800432c:	200a      	movs	r0, #10
 800432e:	f7fd ff9f 	bl	8002270 <HAL_Delay>
      ms += 10U;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	330a      	adds	r3, #10
 8004336:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fa2b 	bl	8004794 <USB_GetMode>
 800433e:	4603      	mov	r3, r0
 8004340:	2b01      	cmp	r3, #1
 8004342:	d01e      	beq.n	8004382 <USB_SetCurrentMode+0x84>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2bc7      	cmp	r3, #199	@ 0xc7
 8004348:	d9f0      	bls.n	800432c <USB_SetCurrentMode+0x2e>
 800434a:	e01a      	b.n	8004382 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800434c:	78fb      	ldrb	r3, [r7, #3]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d115      	bne.n	800437e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800435e:	200a      	movs	r0, #10
 8004360:	f7fd ff86 	bl	8002270 <HAL_Delay>
      ms += 10U;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	330a      	adds	r3, #10
 8004368:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fa12 	bl	8004794 <USB_GetMode>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <USB_SetCurrentMode+0x84>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2bc7      	cmp	r3, #199	@ 0xc7
 800437a:	d9f0      	bls.n	800435e <USB_SetCurrentMode+0x60>
 800437c:	e001      	b.n	8004382 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e005      	b.n	800438e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2bc8      	cmp	r3, #200	@ 0xc8
 8004386:	d101      	bne.n	800438c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004398:	b084      	sub	sp, #16
 800439a:	b580      	push	{r7, lr}
 800439c:	b086      	sub	sp, #24
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80043a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80043aa:	2300      	movs	r3, #0
 80043ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80043b2:	2300      	movs	r3, #0
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	e009      	b.n	80043cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	3340      	adds	r3, #64	@ 0x40
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	2200      	movs	r2, #0
 80043c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	3301      	adds	r3, #1
 80043ca:	613b      	str	r3, [r7, #16]
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b0e      	cmp	r3, #14
 80043d0:	d9f2      	bls.n	80043b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80043d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d11c      	bne.n	8004414 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043e8:	f043 0302 	orr.w	r3, r3, #2
 80043ec:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fe:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800440a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	639a      	str	r2, [r3, #56]	@ 0x38
 8004412:	e00b      	b.n	800442c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004418:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004424:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004432:	461a      	mov	r2, r3
 8004434:	2300      	movs	r3, #0
 8004436:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004438:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800443c:	2b01      	cmp	r3, #1
 800443e:	d10d      	bne.n	800445c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004440:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004444:	2b00      	cmp	r3, #0
 8004446:	d104      	bne.n	8004452 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004448:	2100      	movs	r1, #0
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 f968 	bl	8004720 <USB_SetDevSpeed>
 8004450:	e008      	b.n	8004464 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004452:	2101      	movs	r1, #1
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f963 	bl	8004720 <USB_SetDevSpeed>
 800445a:	e003      	b.n	8004464 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800445c:	2103      	movs	r1, #3
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f95e 	bl	8004720 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004464:	2110      	movs	r1, #16
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f8fa 	bl	8004660 <USB_FlushTxFifo>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f924 	bl	80046c4 <USB_FlushRxFifo>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800448c:	461a      	mov	r2, r3
 800448e:	2300      	movs	r3, #0
 8004490:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004498:	461a      	mov	r2, r3
 800449a:	2300      	movs	r3, #0
 800449c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044a4:	461a      	mov	r2, r3
 80044a6:	2300      	movs	r3, #0
 80044a8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044aa:	2300      	movs	r3, #0
 80044ac:	613b      	str	r3, [r7, #16]
 80044ae:	e043      	b.n	8004538 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044c6:	d118      	bne.n	80044fa <USB_DevInit+0x162>
    {
      if (i == 0U)
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10a      	bne.n	80044e4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044da:	461a      	mov	r2, r3
 80044dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	e013      	b.n	800450c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044f0:	461a      	mov	r2, r3
 80044f2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80044f6:	6013      	str	r3, [r2, #0]
 80044f8:	e008      	b.n	800450c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004506:	461a      	mov	r2, r3
 8004508:	2300      	movs	r3, #0
 800450a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004518:	461a      	mov	r2, r3
 800451a:	2300      	movs	r3, #0
 800451c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	015a      	lsls	r2, r3, #5
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4413      	add	r3, r2
 8004526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800452a:	461a      	mov	r2, r3
 800452c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004530:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	3301      	adds	r3, #1
 8004536:	613b      	str	r3, [r7, #16]
 8004538:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800453c:	461a      	mov	r2, r3
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	4293      	cmp	r3, r2
 8004542:	d3b5      	bcc.n	80044b0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004544:	2300      	movs	r3, #0
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	e043      	b.n	80045d2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4413      	add	r3, r2
 8004552:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800455c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004560:	d118      	bne.n	8004594 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10a      	bne.n	800457e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004574:	461a      	mov	r2, r3
 8004576:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	e013      	b.n	80045a6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	4413      	add	r3, r2
 8004586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800458a:	461a      	mov	r2, r3
 800458c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004590:	6013      	str	r3, [r2, #0]
 8004592:	e008      	b.n	80045a6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4413      	add	r3, r2
 800459c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045a0:	461a      	mov	r2, r3
 80045a2:	2300      	movs	r3, #0
 80045a4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045b2:	461a      	mov	r2, r3
 80045b4:	2300      	movs	r3, #0
 80045b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045c4:	461a      	mov	r2, r3
 80045c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80045ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	3301      	adds	r3, #1
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80045d6:	461a      	mov	r2, r3
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	4293      	cmp	r3, r2
 80045dc:	d3b5      	bcc.n	800454a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045e4:	691b      	ldr	r3, [r3, #16]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045f0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80045fe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004600:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004604:	2b00      	cmp	r3, #0
 8004606:	d105      	bne.n	8004614 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	f043 0210 	orr.w	r2, r3, #16
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699a      	ldr	r2, [r3, #24]
 8004618:	4b10      	ldr	r3, [pc, #64]	@ (800465c <USB_DevInit+0x2c4>)
 800461a:	4313      	orrs	r3, r2
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004620:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004624:	2b00      	cmp	r3, #0
 8004626:	d005      	beq.n	8004634 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	f043 0208 	orr.w	r2, r3, #8
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004634:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004638:	2b01      	cmp	r3, #1
 800463a:	d107      	bne.n	800464c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004644:	f043 0304 	orr.w	r3, r3, #4
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800464c:	7dfb      	ldrb	r3, [r7, #23]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004658:	b004      	add	sp, #16
 800465a:	4770      	bx	lr
 800465c:	803c3800 	.word	0x803c3800

08004660 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3301      	adds	r3, #1
 8004672:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800467a:	d901      	bls.n	8004680 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e01b      	b.n	80046b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	691b      	ldr	r3, [r3, #16]
 8004684:	2b00      	cmp	r3, #0
 8004686:	daf2      	bge.n	800466e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	019b      	lsls	r3, r3, #6
 8004690:	f043 0220 	orr.w	r2, r3, #32
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	3301      	adds	r3, #1
 800469c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046a4:	d901      	bls.n	80046aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e006      	b.n	80046b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	d0f0      	beq.n	8004698 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	3301      	adds	r3, #1
 80046d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80046dc:	d901      	bls.n	80046e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e018      	b.n	8004714 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	daf2      	bge.n	80046d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2210      	movs	r2, #16
 80046f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	3301      	adds	r3, #1
 80046f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004700:	d901      	bls.n	8004706 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e006      	b.n	8004714 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	2b10      	cmp	r3, #16
 8004710:	d0f0      	beq.n	80046f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	78fb      	ldrb	r3, [r7, #3]
 800473a:	68f9      	ldr	r1, [r7, #12]
 800473c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004740:	4313      	orrs	r3, r2
 8004742:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004752:	b480      	push	{r7}
 8004754:	b085      	sub	sp, #20
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800476c:	f023 0303 	bic.w	r3, r3, #3
 8004770:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004780:	f043 0302 	orr.w	r3, r3, #2
 8004784:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	f003 0301 	and.w	r3, r3, #1
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	3301      	adds	r3, #1
 80047c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047c8:	d901      	bls.n	80047ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e01b      	b.n	8004806 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	daf2      	bge.n	80047bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f043 0201 	orr.w	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	3301      	adds	r3, #1
 80047ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047f2:	d901      	bls.n	80047f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e006      	b.n	8004806 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b01      	cmp	r3, #1
 8004802:	d0f0      	beq.n	80047e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
	...

08004814 <std>:
 8004814:	2300      	movs	r3, #0
 8004816:	b510      	push	{r4, lr}
 8004818:	4604      	mov	r4, r0
 800481a:	e9c0 3300 	strd	r3, r3, [r0]
 800481e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004822:	6083      	str	r3, [r0, #8]
 8004824:	8181      	strh	r1, [r0, #12]
 8004826:	6643      	str	r3, [r0, #100]	@ 0x64
 8004828:	81c2      	strh	r2, [r0, #14]
 800482a:	6183      	str	r3, [r0, #24]
 800482c:	4619      	mov	r1, r3
 800482e:	2208      	movs	r2, #8
 8004830:	305c      	adds	r0, #92	@ 0x5c
 8004832:	f000 f926 	bl	8004a82 <memset>
 8004836:	4b0d      	ldr	r3, [pc, #52]	@ (800486c <std+0x58>)
 8004838:	6263      	str	r3, [r4, #36]	@ 0x24
 800483a:	4b0d      	ldr	r3, [pc, #52]	@ (8004870 <std+0x5c>)
 800483c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800483e:	4b0d      	ldr	r3, [pc, #52]	@ (8004874 <std+0x60>)
 8004840:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004842:	4b0d      	ldr	r3, [pc, #52]	@ (8004878 <std+0x64>)
 8004844:	6323      	str	r3, [r4, #48]	@ 0x30
 8004846:	4b0d      	ldr	r3, [pc, #52]	@ (800487c <std+0x68>)
 8004848:	6224      	str	r4, [r4, #32]
 800484a:	429c      	cmp	r4, r3
 800484c:	d006      	beq.n	800485c <std+0x48>
 800484e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004852:	4294      	cmp	r4, r2
 8004854:	d002      	beq.n	800485c <std+0x48>
 8004856:	33d0      	adds	r3, #208	@ 0xd0
 8004858:	429c      	cmp	r4, r3
 800485a:	d105      	bne.n	8004868 <std+0x54>
 800485c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004864:	f000 b986 	b.w	8004b74 <__retarget_lock_init_recursive>
 8004868:	bd10      	pop	{r4, pc}
 800486a:	bf00      	nop
 800486c:	080049fd 	.word	0x080049fd
 8004870:	08004a1f 	.word	0x08004a1f
 8004874:	08004a57 	.word	0x08004a57
 8004878:	08004a7b 	.word	0x08004a7b
 800487c:	200007ec 	.word	0x200007ec

08004880 <stdio_exit_handler>:
 8004880:	4a02      	ldr	r2, [pc, #8]	@ (800488c <stdio_exit_handler+0xc>)
 8004882:	4903      	ldr	r1, [pc, #12]	@ (8004890 <stdio_exit_handler+0x10>)
 8004884:	4803      	ldr	r0, [pc, #12]	@ (8004894 <stdio_exit_handler+0x14>)
 8004886:	f000 b869 	b.w	800495c <_fwalk_sglue>
 800488a:	bf00      	nop
 800488c:	20000010 	.word	0x20000010
 8004890:	080056c5 	.word	0x080056c5
 8004894:	20000020 	.word	0x20000020

08004898 <cleanup_stdio>:
 8004898:	6841      	ldr	r1, [r0, #4]
 800489a:	4b0c      	ldr	r3, [pc, #48]	@ (80048cc <cleanup_stdio+0x34>)
 800489c:	4299      	cmp	r1, r3
 800489e:	b510      	push	{r4, lr}
 80048a0:	4604      	mov	r4, r0
 80048a2:	d001      	beq.n	80048a8 <cleanup_stdio+0x10>
 80048a4:	f000 ff0e 	bl	80056c4 <_fflush_r>
 80048a8:	68a1      	ldr	r1, [r4, #8]
 80048aa:	4b09      	ldr	r3, [pc, #36]	@ (80048d0 <cleanup_stdio+0x38>)
 80048ac:	4299      	cmp	r1, r3
 80048ae:	d002      	beq.n	80048b6 <cleanup_stdio+0x1e>
 80048b0:	4620      	mov	r0, r4
 80048b2:	f000 ff07 	bl	80056c4 <_fflush_r>
 80048b6:	68e1      	ldr	r1, [r4, #12]
 80048b8:	4b06      	ldr	r3, [pc, #24]	@ (80048d4 <cleanup_stdio+0x3c>)
 80048ba:	4299      	cmp	r1, r3
 80048bc:	d004      	beq.n	80048c8 <cleanup_stdio+0x30>
 80048be:	4620      	mov	r0, r4
 80048c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048c4:	f000 befe 	b.w	80056c4 <_fflush_r>
 80048c8:	bd10      	pop	{r4, pc}
 80048ca:	bf00      	nop
 80048cc:	200007ec 	.word	0x200007ec
 80048d0:	20000854 	.word	0x20000854
 80048d4:	200008bc 	.word	0x200008bc

080048d8 <global_stdio_init.part.0>:
 80048d8:	b510      	push	{r4, lr}
 80048da:	4b0b      	ldr	r3, [pc, #44]	@ (8004908 <global_stdio_init.part.0+0x30>)
 80048dc:	4c0b      	ldr	r4, [pc, #44]	@ (800490c <global_stdio_init.part.0+0x34>)
 80048de:	4a0c      	ldr	r2, [pc, #48]	@ (8004910 <global_stdio_init.part.0+0x38>)
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	4620      	mov	r0, r4
 80048e4:	2200      	movs	r2, #0
 80048e6:	2104      	movs	r1, #4
 80048e8:	f7ff ff94 	bl	8004814 <std>
 80048ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80048f0:	2201      	movs	r2, #1
 80048f2:	2109      	movs	r1, #9
 80048f4:	f7ff ff8e 	bl	8004814 <std>
 80048f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80048fc:	2202      	movs	r2, #2
 80048fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004902:	2112      	movs	r1, #18
 8004904:	f7ff bf86 	b.w	8004814 <std>
 8004908:	20000924 	.word	0x20000924
 800490c:	200007ec 	.word	0x200007ec
 8004910:	08004881 	.word	0x08004881

08004914 <__sfp_lock_acquire>:
 8004914:	4801      	ldr	r0, [pc, #4]	@ (800491c <__sfp_lock_acquire+0x8>)
 8004916:	f000 b92e 	b.w	8004b76 <__retarget_lock_acquire_recursive>
 800491a:	bf00      	nop
 800491c:	2000092d 	.word	0x2000092d

08004920 <__sfp_lock_release>:
 8004920:	4801      	ldr	r0, [pc, #4]	@ (8004928 <__sfp_lock_release+0x8>)
 8004922:	f000 b929 	b.w	8004b78 <__retarget_lock_release_recursive>
 8004926:	bf00      	nop
 8004928:	2000092d 	.word	0x2000092d

0800492c <__sinit>:
 800492c:	b510      	push	{r4, lr}
 800492e:	4604      	mov	r4, r0
 8004930:	f7ff fff0 	bl	8004914 <__sfp_lock_acquire>
 8004934:	6a23      	ldr	r3, [r4, #32]
 8004936:	b11b      	cbz	r3, 8004940 <__sinit+0x14>
 8004938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800493c:	f7ff bff0 	b.w	8004920 <__sfp_lock_release>
 8004940:	4b04      	ldr	r3, [pc, #16]	@ (8004954 <__sinit+0x28>)
 8004942:	6223      	str	r3, [r4, #32]
 8004944:	4b04      	ldr	r3, [pc, #16]	@ (8004958 <__sinit+0x2c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1f5      	bne.n	8004938 <__sinit+0xc>
 800494c:	f7ff ffc4 	bl	80048d8 <global_stdio_init.part.0>
 8004950:	e7f2      	b.n	8004938 <__sinit+0xc>
 8004952:	bf00      	nop
 8004954:	08004899 	.word	0x08004899
 8004958:	20000924 	.word	0x20000924

0800495c <_fwalk_sglue>:
 800495c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004960:	4607      	mov	r7, r0
 8004962:	4688      	mov	r8, r1
 8004964:	4614      	mov	r4, r2
 8004966:	2600      	movs	r6, #0
 8004968:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800496c:	f1b9 0901 	subs.w	r9, r9, #1
 8004970:	d505      	bpl.n	800497e <_fwalk_sglue+0x22>
 8004972:	6824      	ldr	r4, [r4, #0]
 8004974:	2c00      	cmp	r4, #0
 8004976:	d1f7      	bne.n	8004968 <_fwalk_sglue+0xc>
 8004978:	4630      	mov	r0, r6
 800497a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800497e:	89ab      	ldrh	r3, [r5, #12]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d907      	bls.n	8004994 <_fwalk_sglue+0x38>
 8004984:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004988:	3301      	adds	r3, #1
 800498a:	d003      	beq.n	8004994 <_fwalk_sglue+0x38>
 800498c:	4629      	mov	r1, r5
 800498e:	4638      	mov	r0, r7
 8004990:	47c0      	blx	r8
 8004992:	4306      	orrs	r6, r0
 8004994:	3568      	adds	r5, #104	@ 0x68
 8004996:	e7e9      	b.n	800496c <_fwalk_sglue+0x10>

08004998 <iprintf>:
 8004998:	b40f      	push	{r0, r1, r2, r3}
 800499a:	b507      	push	{r0, r1, r2, lr}
 800499c:	4906      	ldr	r1, [pc, #24]	@ (80049b8 <iprintf+0x20>)
 800499e:	ab04      	add	r3, sp, #16
 80049a0:	6808      	ldr	r0, [r1, #0]
 80049a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80049a6:	6881      	ldr	r1, [r0, #8]
 80049a8:	9301      	str	r3, [sp, #4]
 80049aa:	f000 fb61 	bl	8005070 <_vfiprintf_r>
 80049ae:	b003      	add	sp, #12
 80049b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80049b4:	b004      	add	sp, #16
 80049b6:	4770      	bx	lr
 80049b8:	2000001c 	.word	0x2000001c

080049bc <siprintf>:
 80049bc:	b40e      	push	{r1, r2, r3}
 80049be:	b500      	push	{lr}
 80049c0:	b09c      	sub	sp, #112	@ 0x70
 80049c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80049c4:	9002      	str	r0, [sp, #8]
 80049c6:	9006      	str	r0, [sp, #24]
 80049c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80049cc:	4809      	ldr	r0, [pc, #36]	@ (80049f4 <siprintf+0x38>)
 80049ce:	9107      	str	r1, [sp, #28]
 80049d0:	9104      	str	r1, [sp, #16]
 80049d2:	4909      	ldr	r1, [pc, #36]	@ (80049f8 <siprintf+0x3c>)
 80049d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80049d8:	9105      	str	r1, [sp, #20]
 80049da:	6800      	ldr	r0, [r0, #0]
 80049dc:	9301      	str	r3, [sp, #4]
 80049de:	a902      	add	r1, sp, #8
 80049e0:	f000 fa20 	bl	8004e24 <_svfiprintf_r>
 80049e4:	9b02      	ldr	r3, [sp, #8]
 80049e6:	2200      	movs	r2, #0
 80049e8:	701a      	strb	r2, [r3, #0]
 80049ea:	b01c      	add	sp, #112	@ 0x70
 80049ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80049f0:	b003      	add	sp, #12
 80049f2:	4770      	bx	lr
 80049f4:	2000001c 	.word	0x2000001c
 80049f8:	ffff0208 	.word	0xffff0208

080049fc <__sread>:
 80049fc:	b510      	push	{r4, lr}
 80049fe:	460c      	mov	r4, r1
 8004a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a04:	f000 f868 	bl	8004ad8 <_read_r>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	bfab      	itete	ge
 8004a0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004a0e:	89a3      	ldrhlt	r3, [r4, #12]
 8004a10:	181b      	addge	r3, r3, r0
 8004a12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004a16:	bfac      	ite	ge
 8004a18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004a1a:	81a3      	strhlt	r3, [r4, #12]
 8004a1c:	bd10      	pop	{r4, pc}

08004a1e <__swrite>:
 8004a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a22:	461f      	mov	r7, r3
 8004a24:	898b      	ldrh	r3, [r1, #12]
 8004a26:	05db      	lsls	r3, r3, #23
 8004a28:	4605      	mov	r5, r0
 8004a2a:	460c      	mov	r4, r1
 8004a2c:	4616      	mov	r6, r2
 8004a2e:	d505      	bpl.n	8004a3c <__swrite+0x1e>
 8004a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a34:	2302      	movs	r3, #2
 8004a36:	2200      	movs	r2, #0
 8004a38:	f000 f83c 	bl	8004ab4 <_lseek_r>
 8004a3c:	89a3      	ldrh	r3, [r4, #12]
 8004a3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a46:	81a3      	strh	r3, [r4, #12]
 8004a48:	4632      	mov	r2, r6
 8004a4a:	463b      	mov	r3, r7
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a52:	f000 b853 	b.w	8004afc <_write_r>

08004a56 <__sseek>:
 8004a56:	b510      	push	{r4, lr}
 8004a58:	460c      	mov	r4, r1
 8004a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a5e:	f000 f829 	bl	8004ab4 <_lseek_r>
 8004a62:	1c43      	adds	r3, r0, #1
 8004a64:	89a3      	ldrh	r3, [r4, #12]
 8004a66:	bf15      	itete	ne
 8004a68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004a6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004a6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004a72:	81a3      	strheq	r3, [r4, #12]
 8004a74:	bf18      	it	ne
 8004a76:	81a3      	strhne	r3, [r4, #12]
 8004a78:	bd10      	pop	{r4, pc}

08004a7a <__sclose>:
 8004a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a7e:	f000 b809 	b.w	8004a94 <_close_r>

08004a82 <memset>:
 8004a82:	4402      	add	r2, r0
 8004a84:	4603      	mov	r3, r0
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d100      	bne.n	8004a8c <memset+0xa>
 8004a8a:	4770      	bx	lr
 8004a8c:	f803 1b01 	strb.w	r1, [r3], #1
 8004a90:	e7f9      	b.n	8004a86 <memset+0x4>
	...

08004a94 <_close_r>:
 8004a94:	b538      	push	{r3, r4, r5, lr}
 8004a96:	4d06      	ldr	r5, [pc, #24]	@ (8004ab0 <_close_r+0x1c>)
 8004a98:	2300      	movs	r3, #0
 8004a9a:	4604      	mov	r4, r0
 8004a9c:	4608      	mov	r0, r1
 8004a9e:	602b      	str	r3, [r5, #0]
 8004aa0:	f7fd face 	bl	8002040 <_close>
 8004aa4:	1c43      	adds	r3, r0, #1
 8004aa6:	d102      	bne.n	8004aae <_close_r+0x1a>
 8004aa8:	682b      	ldr	r3, [r5, #0]
 8004aaa:	b103      	cbz	r3, 8004aae <_close_r+0x1a>
 8004aac:	6023      	str	r3, [r4, #0]
 8004aae:	bd38      	pop	{r3, r4, r5, pc}
 8004ab0:	20000928 	.word	0x20000928

08004ab4 <_lseek_r>:
 8004ab4:	b538      	push	{r3, r4, r5, lr}
 8004ab6:	4d07      	ldr	r5, [pc, #28]	@ (8004ad4 <_lseek_r+0x20>)
 8004ab8:	4604      	mov	r4, r0
 8004aba:	4608      	mov	r0, r1
 8004abc:	4611      	mov	r1, r2
 8004abe:	2200      	movs	r2, #0
 8004ac0:	602a      	str	r2, [r5, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f7fd fae3 	bl	800208e <_lseek>
 8004ac8:	1c43      	adds	r3, r0, #1
 8004aca:	d102      	bne.n	8004ad2 <_lseek_r+0x1e>
 8004acc:	682b      	ldr	r3, [r5, #0]
 8004ace:	b103      	cbz	r3, 8004ad2 <_lseek_r+0x1e>
 8004ad0:	6023      	str	r3, [r4, #0]
 8004ad2:	bd38      	pop	{r3, r4, r5, pc}
 8004ad4:	20000928 	.word	0x20000928

08004ad8 <_read_r>:
 8004ad8:	b538      	push	{r3, r4, r5, lr}
 8004ada:	4d07      	ldr	r5, [pc, #28]	@ (8004af8 <_read_r+0x20>)
 8004adc:	4604      	mov	r4, r0
 8004ade:	4608      	mov	r0, r1
 8004ae0:	4611      	mov	r1, r2
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	602a      	str	r2, [r5, #0]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f7fd fa71 	bl	8001fce <_read>
 8004aec:	1c43      	adds	r3, r0, #1
 8004aee:	d102      	bne.n	8004af6 <_read_r+0x1e>
 8004af0:	682b      	ldr	r3, [r5, #0]
 8004af2:	b103      	cbz	r3, 8004af6 <_read_r+0x1e>
 8004af4:	6023      	str	r3, [r4, #0]
 8004af6:	bd38      	pop	{r3, r4, r5, pc}
 8004af8:	20000928 	.word	0x20000928

08004afc <_write_r>:
 8004afc:	b538      	push	{r3, r4, r5, lr}
 8004afe:	4d07      	ldr	r5, [pc, #28]	@ (8004b1c <_write_r+0x20>)
 8004b00:	4604      	mov	r4, r0
 8004b02:	4608      	mov	r0, r1
 8004b04:	4611      	mov	r1, r2
 8004b06:	2200      	movs	r2, #0
 8004b08:	602a      	str	r2, [r5, #0]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f7fd fa7c 	bl	8002008 <_write>
 8004b10:	1c43      	adds	r3, r0, #1
 8004b12:	d102      	bne.n	8004b1a <_write_r+0x1e>
 8004b14:	682b      	ldr	r3, [r5, #0]
 8004b16:	b103      	cbz	r3, 8004b1a <_write_r+0x1e>
 8004b18:	6023      	str	r3, [r4, #0]
 8004b1a:	bd38      	pop	{r3, r4, r5, pc}
 8004b1c:	20000928 	.word	0x20000928

08004b20 <__errno>:
 8004b20:	4b01      	ldr	r3, [pc, #4]	@ (8004b28 <__errno+0x8>)
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	2000001c 	.word	0x2000001c

08004b2c <__libc_init_array>:
 8004b2c:	b570      	push	{r4, r5, r6, lr}
 8004b2e:	4d0d      	ldr	r5, [pc, #52]	@ (8004b64 <__libc_init_array+0x38>)
 8004b30:	4c0d      	ldr	r4, [pc, #52]	@ (8004b68 <__libc_init_array+0x3c>)
 8004b32:	1b64      	subs	r4, r4, r5
 8004b34:	10a4      	asrs	r4, r4, #2
 8004b36:	2600      	movs	r6, #0
 8004b38:	42a6      	cmp	r6, r4
 8004b3a:	d109      	bne.n	8004b50 <__libc_init_array+0x24>
 8004b3c:	4d0b      	ldr	r5, [pc, #44]	@ (8004b6c <__libc_init_array+0x40>)
 8004b3e:	4c0c      	ldr	r4, [pc, #48]	@ (8004b70 <__libc_init_array+0x44>)
 8004b40:	f000 ff6e 	bl	8005a20 <_init>
 8004b44:	1b64      	subs	r4, r4, r5
 8004b46:	10a4      	asrs	r4, r4, #2
 8004b48:	2600      	movs	r6, #0
 8004b4a:	42a6      	cmp	r6, r4
 8004b4c:	d105      	bne.n	8004b5a <__libc_init_array+0x2e>
 8004b4e:	bd70      	pop	{r4, r5, r6, pc}
 8004b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b54:	4798      	blx	r3
 8004b56:	3601      	adds	r6, #1
 8004b58:	e7ee      	b.n	8004b38 <__libc_init_array+0xc>
 8004b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b5e:	4798      	blx	r3
 8004b60:	3601      	adds	r6, #1
 8004b62:	e7f2      	b.n	8004b4a <__libc_init_array+0x1e>
 8004b64:	08005ac4 	.word	0x08005ac4
 8004b68:	08005ac4 	.word	0x08005ac4
 8004b6c:	08005ac4 	.word	0x08005ac4
 8004b70:	08005ac8 	.word	0x08005ac8

08004b74 <__retarget_lock_init_recursive>:
 8004b74:	4770      	bx	lr

08004b76 <__retarget_lock_acquire_recursive>:
 8004b76:	4770      	bx	lr

08004b78 <__retarget_lock_release_recursive>:
 8004b78:	4770      	bx	lr
	...

08004b7c <_free_r>:
 8004b7c:	b538      	push	{r3, r4, r5, lr}
 8004b7e:	4605      	mov	r5, r0
 8004b80:	2900      	cmp	r1, #0
 8004b82:	d041      	beq.n	8004c08 <_free_r+0x8c>
 8004b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b88:	1f0c      	subs	r4, r1, #4
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	bfb8      	it	lt
 8004b8e:	18e4      	addlt	r4, r4, r3
 8004b90:	f000 f8e0 	bl	8004d54 <__malloc_lock>
 8004b94:	4a1d      	ldr	r2, [pc, #116]	@ (8004c0c <_free_r+0x90>)
 8004b96:	6813      	ldr	r3, [r2, #0]
 8004b98:	b933      	cbnz	r3, 8004ba8 <_free_r+0x2c>
 8004b9a:	6063      	str	r3, [r4, #4]
 8004b9c:	6014      	str	r4, [r2, #0]
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ba4:	f000 b8dc 	b.w	8004d60 <__malloc_unlock>
 8004ba8:	42a3      	cmp	r3, r4
 8004baa:	d908      	bls.n	8004bbe <_free_r+0x42>
 8004bac:	6820      	ldr	r0, [r4, #0]
 8004bae:	1821      	adds	r1, r4, r0
 8004bb0:	428b      	cmp	r3, r1
 8004bb2:	bf01      	itttt	eq
 8004bb4:	6819      	ldreq	r1, [r3, #0]
 8004bb6:	685b      	ldreq	r3, [r3, #4]
 8004bb8:	1809      	addeq	r1, r1, r0
 8004bba:	6021      	streq	r1, [r4, #0]
 8004bbc:	e7ed      	b.n	8004b9a <_free_r+0x1e>
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	b10b      	cbz	r3, 8004bc8 <_free_r+0x4c>
 8004bc4:	42a3      	cmp	r3, r4
 8004bc6:	d9fa      	bls.n	8004bbe <_free_r+0x42>
 8004bc8:	6811      	ldr	r1, [r2, #0]
 8004bca:	1850      	adds	r0, r2, r1
 8004bcc:	42a0      	cmp	r0, r4
 8004bce:	d10b      	bne.n	8004be8 <_free_r+0x6c>
 8004bd0:	6820      	ldr	r0, [r4, #0]
 8004bd2:	4401      	add	r1, r0
 8004bd4:	1850      	adds	r0, r2, r1
 8004bd6:	4283      	cmp	r3, r0
 8004bd8:	6011      	str	r1, [r2, #0]
 8004bda:	d1e0      	bne.n	8004b9e <_free_r+0x22>
 8004bdc:	6818      	ldr	r0, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	6053      	str	r3, [r2, #4]
 8004be2:	4408      	add	r0, r1
 8004be4:	6010      	str	r0, [r2, #0]
 8004be6:	e7da      	b.n	8004b9e <_free_r+0x22>
 8004be8:	d902      	bls.n	8004bf0 <_free_r+0x74>
 8004bea:	230c      	movs	r3, #12
 8004bec:	602b      	str	r3, [r5, #0]
 8004bee:	e7d6      	b.n	8004b9e <_free_r+0x22>
 8004bf0:	6820      	ldr	r0, [r4, #0]
 8004bf2:	1821      	adds	r1, r4, r0
 8004bf4:	428b      	cmp	r3, r1
 8004bf6:	bf04      	itt	eq
 8004bf8:	6819      	ldreq	r1, [r3, #0]
 8004bfa:	685b      	ldreq	r3, [r3, #4]
 8004bfc:	6063      	str	r3, [r4, #4]
 8004bfe:	bf04      	itt	eq
 8004c00:	1809      	addeq	r1, r1, r0
 8004c02:	6021      	streq	r1, [r4, #0]
 8004c04:	6054      	str	r4, [r2, #4]
 8004c06:	e7ca      	b.n	8004b9e <_free_r+0x22>
 8004c08:	bd38      	pop	{r3, r4, r5, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20000934 	.word	0x20000934

08004c10 <sbrk_aligned>:
 8004c10:	b570      	push	{r4, r5, r6, lr}
 8004c12:	4e0f      	ldr	r6, [pc, #60]	@ (8004c50 <sbrk_aligned+0x40>)
 8004c14:	460c      	mov	r4, r1
 8004c16:	6831      	ldr	r1, [r6, #0]
 8004c18:	4605      	mov	r5, r0
 8004c1a:	b911      	cbnz	r1, 8004c22 <sbrk_aligned+0x12>
 8004c1c:	f000 fe28 	bl	8005870 <_sbrk_r>
 8004c20:	6030      	str	r0, [r6, #0]
 8004c22:	4621      	mov	r1, r4
 8004c24:	4628      	mov	r0, r5
 8004c26:	f000 fe23 	bl	8005870 <_sbrk_r>
 8004c2a:	1c43      	adds	r3, r0, #1
 8004c2c:	d103      	bne.n	8004c36 <sbrk_aligned+0x26>
 8004c2e:	f04f 34ff 	mov.w	r4, #4294967295
 8004c32:	4620      	mov	r0, r4
 8004c34:	bd70      	pop	{r4, r5, r6, pc}
 8004c36:	1cc4      	adds	r4, r0, #3
 8004c38:	f024 0403 	bic.w	r4, r4, #3
 8004c3c:	42a0      	cmp	r0, r4
 8004c3e:	d0f8      	beq.n	8004c32 <sbrk_aligned+0x22>
 8004c40:	1a21      	subs	r1, r4, r0
 8004c42:	4628      	mov	r0, r5
 8004c44:	f000 fe14 	bl	8005870 <_sbrk_r>
 8004c48:	3001      	adds	r0, #1
 8004c4a:	d1f2      	bne.n	8004c32 <sbrk_aligned+0x22>
 8004c4c:	e7ef      	b.n	8004c2e <sbrk_aligned+0x1e>
 8004c4e:	bf00      	nop
 8004c50:	20000930 	.word	0x20000930

08004c54 <_malloc_r>:
 8004c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c58:	1ccd      	adds	r5, r1, #3
 8004c5a:	f025 0503 	bic.w	r5, r5, #3
 8004c5e:	3508      	adds	r5, #8
 8004c60:	2d0c      	cmp	r5, #12
 8004c62:	bf38      	it	cc
 8004c64:	250c      	movcc	r5, #12
 8004c66:	2d00      	cmp	r5, #0
 8004c68:	4606      	mov	r6, r0
 8004c6a:	db01      	blt.n	8004c70 <_malloc_r+0x1c>
 8004c6c:	42a9      	cmp	r1, r5
 8004c6e:	d904      	bls.n	8004c7a <_malloc_r+0x26>
 8004c70:	230c      	movs	r3, #12
 8004c72:	6033      	str	r3, [r6, #0]
 8004c74:	2000      	movs	r0, #0
 8004c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d50 <_malloc_r+0xfc>
 8004c7e:	f000 f869 	bl	8004d54 <__malloc_lock>
 8004c82:	f8d8 3000 	ldr.w	r3, [r8]
 8004c86:	461c      	mov	r4, r3
 8004c88:	bb44      	cbnz	r4, 8004cdc <_malloc_r+0x88>
 8004c8a:	4629      	mov	r1, r5
 8004c8c:	4630      	mov	r0, r6
 8004c8e:	f7ff ffbf 	bl	8004c10 <sbrk_aligned>
 8004c92:	1c43      	adds	r3, r0, #1
 8004c94:	4604      	mov	r4, r0
 8004c96:	d158      	bne.n	8004d4a <_malloc_r+0xf6>
 8004c98:	f8d8 4000 	ldr.w	r4, [r8]
 8004c9c:	4627      	mov	r7, r4
 8004c9e:	2f00      	cmp	r7, #0
 8004ca0:	d143      	bne.n	8004d2a <_malloc_r+0xd6>
 8004ca2:	2c00      	cmp	r4, #0
 8004ca4:	d04b      	beq.n	8004d3e <_malloc_r+0xea>
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	4639      	mov	r1, r7
 8004caa:	4630      	mov	r0, r6
 8004cac:	eb04 0903 	add.w	r9, r4, r3
 8004cb0:	f000 fdde 	bl	8005870 <_sbrk_r>
 8004cb4:	4581      	cmp	r9, r0
 8004cb6:	d142      	bne.n	8004d3e <_malloc_r+0xea>
 8004cb8:	6821      	ldr	r1, [r4, #0]
 8004cba:	1a6d      	subs	r5, r5, r1
 8004cbc:	4629      	mov	r1, r5
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	f7ff ffa6 	bl	8004c10 <sbrk_aligned>
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	d03a      	beq.n	8004d3e <_malloc_r+0xea>
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	442b      	add	r3, r5
 8004ccc:	6023      	str	r3, [r4, #0]
 8004cce:	f8d8 3000 	ldr.w	r3, [r8]
 8004cd2:	685a      	ldr	r2, [r3, #4]
 8004cd4:	bb62      	cbnz	r2, 8004d30 <_malloc_r+0xdc>
 8004cd6:	f8c8 7000 	str.w	r7, [r8]
 8004cda:	e00f      	b.n	8004cfc <_malloc_r+0xa8>
 8004cdc:	6822      	ldr	r2, [r4, #0]
 8004cde:	1b52      	subs	r2, r2, r5
 8004ce0:	d420      	bmi.n	8004d24 <_malloc_r+0xd0>
 8004ce2:	2a0b      	cmp	r2, #11
 8004ce4:	d917      	bls.n	8004d16 <_malloc_r+0xc2>
 8004ce6:	1961      	adds	r1, r4, r5
 8004ce8:	42a3      	cmp	r3, r4
 8004cea:	6025      	str	r5, [r4, #0]
 8004cec:	bf18      	it	ne
 8004cee:	6059      	strne	r1, [r3, #4]
 8004cf0:	6863      	ldr	r3, [r4, #4]
 8004cf2:	bf08      	it	eq
 8004cf4:	f8c8 1000 	streq.w	r1, [r8]
 8004cf8:	5162      	str	r2, [r4, r5]
 8004cfa:	604b      	str	r3, [r1, #4]
 8004cfc:	4630      	mov	r0, r6
 8004cfe:	f000 f82f 	bl	8004d60 <__malloc_unlock>
 8004d02:	f104 000b 	add.w	r0, r4, #11
 8004d06:	1d23      	adds	r3, r4, #4
 8004d08:	f020 0007 	bic.w	r0, r0, #7
 8004d0c:	1ac2      	subs	r2, r0, r3
 8004d0e:	bf1c      	itt	ne
 8004d10:	1a1b      	subne	r3, r3, r0
 8004d12:	50a3      	strne	r3, [r4, r2]
 8004d14:	e7af      	b.n	8004c76 <_malloc_r+0x22>
 8004d16:	6862      	ldr	r2, [r4, #4]
 8004d18:	42a3      	cmp	r3, r4
 8004d1a:	bf0c      	ite	eq
 8004d1c:	f8c8 2000 	streq.w	r2, [r8]
 8004d20:	605a      	strne	r2, [r3, #4]
 8004d22:	e7eb      	b.n	8004cfc <_malloc_r+0xa8>
 8004d24:	4623      	mov	r3, r4
 8004d26:	6864      	ldr	r4, [r4, #4]
 8004d28:	e7ae      	b.n	8004c88 <_malloc_r+0x34>
 8004d2a:	463c      	mov	r4, r7
 8004d2c:	687f      	ldr	r7, [r7, #4]
 8004d2e:	e7b6      	b.n	8004c9e <_malloc_r+0x4a>
 8004d30:	461a      	mov	r2, r3
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	42a3      	cmp	r3, r4
 8004d36:	d1fb      	bne.n	8004d30 <_malloc_r+0xdc>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	6053      	str	r3, [r2, #4]
 8004d3c:	e7de      	b.n	8004cfc <_malloc_r+0xa8>
 8004d3e:	230c      	movs	r3, #12
 8004d40:	6033      	str	r3, [r6, #0]
 8004d42:	4630      	mov	r0, r6
 8004d44:	f000 f80c 	bl	8004d60 <__malloc_unlock>
 8004d48:	e794      	b.n	8004c74 <_malloc_r+0x20>
 8004d4a:	6005      	str	r5, [r0, #0]
 8004d4c:	e7d6      	b.n	8004cfc <_malloc_r+0xa8>
 8004d4e:	bf00      	nop
 8004d50:	20000934 	.word	0x20000934

08004d54 <__malloc_lock>:
 8004d54:	4801      	ldr	r0, [pc, #4]	@ (8004d5c <__malloc_lock+0x8>)
 8004d56:	f7ff bf0e 	b.w	8004b76 <__retarget_lock_acquire_recursive>
 8004d5a:	bf00      	nop
 8004d5c:	2000092c 	.word	0x2000092c

08004d60 <__malloc_unlock>:
 8004d60:	4801      	ldr	r0, [pc, #4]	@ (8004d68 <__malloc_unlock+0x8>)
 8004d62:	f7ff bf09 	b.w	8004b78 <__retarget_lock_release_recursive>
 8004d66:	bf00      	nop
 8004d68:	2000092c 	.word	0x2000092c

08004d6c <__ssputs_r>:
 8004d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d70:	688e      	ldr	r6, [r1, #8]
 8004d72:	461f      	mov	r7, r3
 8004d74:	42be      	cmp	r6, r7
 8004d76:	680b      	ldr	r3, [r1, #0]
 8004d78:	4682      	mov	sl, r0
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	4690      	mov	r8, r2
 8004d7e:	d82d      	bhi.n	8004ddc <__ssputs_r+0x70>
 8004d80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004d88:	d026      	beq.n	8004dd8 <__ssputs_r+0x6c>
 8004d8a:	6965      	ldr	r5, [r4, #20]
 8004d8c:	6909      	ldr	r1, [r1, #16]
 8004d8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d92:	eba3 0901 	sub.w	r9, r3, r1
 8004d96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d9a:	1c7b      	adds	r3, r7, #1
 8004d9c:	444b      	add	r3, r9
 8004d9e:	106d      	asrs	r5, r5, #1
 8004da0:	429d      	cmp	r5, r3
 8004da2:	bf38      	it	cc
 8004da4:	461d      	movcc	r5, r3
 8004da6:	0553      	lsls	r3, r2, #21
 8004da8:	d527      	bpl.n	8004dfa <__ssputs_r+0x8e>
 8004daa:	4629      	mov	r1, r5
 8004dac:	f7ff ff52 	bl	8004c54 <_malloc_r>
 8004db0:	4606      	mov	r6, r0
 8004db2:	b360      	cbz	r0, 8004e0e <__ssputs_r+0xa2>
 8004db4:	6921      	ldr	r1, [r4, #16]
 8004db6:	464a      	mov	r2, r9
 8004db8:	f000 fd6a 	bl	8005890 <memcpy>
 8004dbc:	89a3      	ldrh	r3, [r4, #12]
 8004dbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004dc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dc6:	81a3      	strh	r3, [r4, #12]
 8004dc8:	6126      	str	r6, [r4, #16]
 8004dca:	6165      	str	r5, [r4, #20]
 8004dcc:	444e      	add	r6, r9
 8004dce:	eba5 0509 	sub.w	r5, r5, r9
 8004dd2:	6026      	str	r6, [r4, #0]
 8004dd4:	60a5      	str	r5, [r4, #8]
 8004dd6:	463e      	mov	r6, r7
 8004dd8:	42be      	cmp	r6, r7
 8004dda:	d900      	bls.n	8004dde <__ssputs_r+0x72>
 8004ddc:	463e      	mov	r6, r7
 8004dde:	6820      	ldr	r0, [r4, #0]
 8004de0:	4632      	mov	r2, r6
 8004de2:	4641      	mov	r1, r8
 8004de4:	f000 fd2a 	bl	800583c <memmove>
 8004de8:	68a3      	ldr	r3, [r4, #8]
 8004dea:	1b9b      	subs	r3, r3, r6
 8004dec:	60a3      	str	r3, [r4, #8]
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	4433      	add	r3, r6
 8004df2:	6023      	str	r3, [r4, #0]
 8004df4:	2000      	movs	r0, #0
 8004df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfa:	462a      	mov	r2, r5
 8004dfc:	f000 fd56 	bl	80058ac <_realloc_r>
 8004e00:	4606      	mov	r6, r0
 8004e02:	2800      	cmp	r0, #0
 8004e04:	d1e0      	bne.n	8004dc8 <__ssputs_r+0x5c>
 8004e06:	6921      	ldr	r1, [r4, #16]
 8004e08:	4650      	mov	r0, sl
 8004e0a:	f7ff feb7 	bl	8004b7c <_free_r>
 8004e0e:	230c      	movs	r3, #12
 8004e10:	f8ca 3000 	str.w	r3, [sl]
 8004e14:	89a3      	ldrh	r3, [r4, #12]
 8004e16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e1a:	81a3      	strh	r3, [r4, #12]
 8004e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e20:	e7e9      	b.n	8004df6 <__ssputs_r+0x8a>
	...

08004e24 <_svfiprintf_r>:
 8004e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e28:	4698      	mov	r8, r3
 8004e2a:	898b      	ldrh	r3, [r1, #12]
 8004e2c:	061b      	lsls	r3, r3, #24
 8004e2e:	b09d      	sub	sp, #116	@ 0x74
 8004e30:	4607      	mov	r7, r0
 8004e32:	460d      	mov	r5, r1
 8004e34:	4614      	mov	r4, r2
 8004e36:	d510      	bpl.n	8004e5a <_svfiprintf_r+0x36>
 8004e38:	690b      	ldr	r3, [r1, #16]
 8004e3a:	b973      	cbnz	r3, 8004e5a <_svfiprintf_r+0x36>
 8004e3c:	2140      	movs	r1, #64	@ 0x40
 8004e3e:	f7ff ff09 	bl	8004c54 <_malloc_r>
 8004e42:	6028      	str	r0, [r5, #0]
 8004e44:	6128      	str	r0, [r5, #16]
 8004e46:	b930      	cbnz	r0, 8004e56 <_svfiprintf_r+0x32>
 8004e48:	230c      	movs	r3, #12
 8004e4a:	603b      	str	r3, [r7, #0]
 8004e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e50:	b01d      	add	sp, #116	@ 0x74
 8004e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e56:	2340      	movs	r3, #64	@ 0x40
 8004e58:	616b      	str	r3, [r5, #20]
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e5e:	2320      	movs	r3, #32
 8004e60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e64:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e68:	2330      	movs	r3, #48	@ 0x30
 8004e6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005008 <_svfiprintf_r+0x1e4>
 8004e6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e72:	f04f 0901 	mov.w	r9, #1
 8004e76:	4623      	mov	r3, r4
 8004e78:	469a      	mov	sl, r3
 8004e7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e7e:	b10a      	cbz	r2, 8004e84 <_svfiprintf_r+0x60>
 8004e80:	2a25      	cmp	r2, #37	@ 0x25
 8004e82:	d1f9      	bne.n	8004e78 <_svfiprintf_r+0x54>
 8004e84:	ebba 0b04 	subs.w	fp, sl, r4
 8004e88:	d00b      	beq.n	8004ea2 <_svfiprintf_r+0x7e>
 8004e8a:	465b      	mov	r3, fp
 8004e8c:	4622      	mov	r2, r4
 8004e8e:	4629      	mov	r1, r5
 8004e90:	4638      	mov	r0, r7
 8004e92:	f7ff ff6b 	bl	8004d6c <__ssputs_r>
 8004e96:	3001      	adds	r0, #1
 8004e98:	f000 80a7 	beq.w	8004fea <_svfiprintf_r+0x1c6>
 8004e9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e9e:	445a      	add	r2, fp
 8004ea0:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 809f 	beq.w	8004fea <_svfiprintf_r+0x1c6>
 8004eac:	2300      	movs	r3, #0
 8004eae:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eb6:	f10a 0a01 	add.w	sl, sl, #1
 8004eba:	9304      	str	r3, [sp, #16]
 8004ebc:	9307      	str	r3, [sp, #28]
 8004ebe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ec2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ec4:	4654      	mov	r4, sl
 8004ec6:	2205      	movs	r2, #5
 8004ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ecc:	484e      	ldr	r0, [pc, #312]	@ (8005008 <_svfiprintf_r+0x1e4>)
 8004ece:	f7fb f997 	bl	8000200 <memchr>
 8004ed2:	9a04      	ldr	r2, [sp, #16]
 8004ed4:	b9d8      	cbnz	r0, 8004f0e <_svfiprintf_r+0xea>
 8004ed6:	06d0      	lsls	r0, r2, #27
 8004ed8:	bf44      	itt	mi
 8004eda:	2320      	movmi	r3, #32
 8004edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ee0:	0711      	lsls	r1, r2, #28
 8004ee2:	bf44      	itt	mi
 8004ee4:	232b      	movmi	r3, #43	@ 0x2b
 8004ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004eea:	f89a 3000 	ldrb.w	r3, [sl]
 8004eee:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ef0:	d015      	beq.n	8004f1e <_svfiprintf_r+0xfa>
 8004ef2:	9a07      	ldr	r2, [sp, #28]
 8004ef4:	4654      	mov	r4, sl
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	f04f 0c0a 	mov.w	ip, #10
 8004efc:	4621      	mov	r1, r4
 8004efe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f02:	3b30      	subs	r3, #48	@ 0x30
 8004f04:	2b09      	cmp	r3, #9
 8004f06:	d94b      	bls.n	8004fa0 <_svfiprintf_r+0x17c>
 8004f08:	b1b0      	cbz	r0, 8004f38 <_svfiprintf_r+0x114>
 8004f0a:	9207      	str	r2, [sp, #28]
 8004f0c:	e014      	b.n	8004f38 <_svfiprintf_r+0x114>
 8004f0e:	eba0 0308 	sub.w	r3, r0, r8
 8004f12:	fa09 f303 	lsl.w	r3, r9, r3
 8004f16:	4313      	orrs	r3, r2
 8004f18:	9304      	str	r3, [sp, #16]
 8004f1a:	46a2      	mov	sl, r4
 8004f1c:	e7d2      	b.n	8004ec4 <_svfiprintf_r+0xa0>
 8004f1e:	9b03      	ldr	r3, [sp, #12]
 8004f20:	1d19      	adds	r1, r3, #4
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	9103      	str	r1, [sp, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bfbb      	ittet	lt
 8004f2a:	425b      	neglt	r3, r3
 8004f2c:	f042 0202 	orrlt.w	r2, r2, #2
 8004f30:	9307      	strge	r3, [sp, #28]
 8004f32:	9307      	strlt	r3, [sp, #28]
 8004f34:	bfb8      	it	lt
 8004f36:	9204      	strlt	r2, [sp, #16]
 8004f38:	7823      	ldrb	r3, [r4, #0]
 8004f3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f3c:	d10a      	bne.n	8004f54 <_svfiprintf_r+0x130>
 8004f3e:	7863      	ldrb	r3, [r4, #1]
 8004f40:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f42:	d132      	bne.n	8004faa <_svfiprintf_r+0x186>
 8004f44:	9b03      	ldr	r3, [sp, #12]
 8004f46:	1d1a      	adds	r2, r3, #4
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	9203      	str	r2, [sp, #12]
 8004f4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f50:	3402      	adds	r4, #2
 8004f52:	9305      	str	r3, [sp, #20]
 8004f54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005018 <_svfiprintf_r+0x1f4>
 8004f58:	7821      	ldrb	r1, [r4, #0]
 8004f5a:	2203      	movs	r2, #3
 8004f5c:	4650      	mov	r0, sl
 8004f5e:	f7fb f94f 	bl	8000200 <memchr>
 8004f62:	b138      	cbz	r0, 8004f74 <_svfiprintf_r+0x150>
 8004f64:	9b04      	ldr	r3, [sp, #16]
 8004f66:	eba0 000a 	sub.w	r0, r0, sl
 8004f6a:	2240      	movs	r2, #64	@ 0x40
 8004f6c:	4082      	lsls	r2, r0
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	3401      	adds	r4, #1
 8004f72:	9304      	str	r3, [sp, #16]
 8004f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f78:	4824      	ldr	r0, [pc, #144]	@ (800500c <_svfiprintf_r+0x1e8>)
 8004f7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f7e:	2206      	movs	r2, #6
 8004f80:	f7fb f93e 	bl	8000200 <memchr>
 8004f84:	2800      	cmp	r0, #0
 8004f86:	d036      	beq.n	8004ff6 <_svfiprintf_r+0x1d2>
 8004f88:	4b21      	ldr	r3, [pc, #132]	@ (8005010 <_svfiprintf_r+0x1ec>)
 8004f8a:	bb1b      	cbnz	r3, 8004fd4 <_svfiprintf_r+0x1b0>
 8004f8c:	9b03      	ldr	r3, [sp, #12]
 8004f8e:	3307      	adds	r3, #7
 8004f90:	f023 0307 	bic.w	r3, r3, #7
 8004f94:	3308      	adds	r3, #8
 8004f96:	9303      	str	r3, [sp, #12]
 8004f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f9a:	4433      	add	r3, r6
 8004f9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f9e:	e76a      	b.n	8004e76 <_svfiprintf_r+0x52>
 8004fa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fa4:	460c      	mov	r4, r1
 8004fa6:	2001      	movs	r0, #1
 8004fa8:	e7a8      	b.n	8004efc <_svfiprintf_r+0xd8>
 8004faa:	2300      	movs	r3, #0
 8004fac:	3401      	adds	r4, #1
 8004fae:	9305      	str	r3, [sp, #20]
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	f04f 0c0a 	mov.w	ip, #10
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fbc:	3a30      	subs	r2, #48	@ 0x30
 8004fbe:	2a09      	cmp	r2, #9
 8004fc0:	d903      	bls.n	8004fca <_svfiprintf_r+0x1a6>
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d0c6      	beq.n	8004f54 <_svfiprintf_r+0x130>
 8004fc6:	9105      	str	r1, [sp, #20]
 8004fc8:	e7c4      	b.n	8004f54 <_svfiprintf_r+0x130>
 8004fca:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fce:	4604      	mov	r4, r0
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e7f0      	b.n	8004fb6 <_svfiprintf_r+0x192>
 8004fd4:	ab03      	add	r3, sp, #12
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	462a      	mov	r2, r5
 8004fda:	4b0e      	ldr	r3, [pc, #56]	@ (8005014 <_svfiprintf_r+0x1f0>)
 8004fdc:	a904      	add	r1, sp, #16
 8004fde:	4638      	mov	r0, r7
 8004fe0:	f3af 8000 	nop.w
 8004fe4:	1c42      	adds	r2, r0, #1
 8004fe6:	4606      	mov	r6, r0
 8004fe8:	d1d6      	bne.n	8004f98 <_svfiprintf_r+0x174>
 8004fea:	89ab      	ldrh	r3, [r5, #12]
 8004fec:	065b      	lsls	r3, r3, #25
 8004fee:	f53f af2d 	bmi.w	8004e4c <_svfiprintf_r+0x28>
 8004ff2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ff4:	e72c      	b.n	8004e50 <_svfiprintf_r+0x2c>
 8004ff6:	ab03      	add	r3, sp, #12
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	462a      	mov	r2, r5
 8004ffc:	4b05      	ldr	r3, [pc, #20]	@ (8005014 <_svfiprintf_r+0x1f0>)
 8004ffe:	a904      	add	r1, sp, #16
 8005000:	4638      	mov	r0, r7
 8005002:	f000 f9bb 	bl	800537c <_printf_i>
 8005006:	e7ed      	b.n	8004fe4 <_svfiprintf_r+0x1c0>
 8005008:	08005a88 	.word	0x08005a88
 800500c:	08005a92 	.word	0x08005a92
 8005010:	00000000 	.word	0x00000000
 8005014:	08004d6d 	.word	0x08004d6d
 8005018:	08005a8e 	.word	0x08005a8e

0800501c <__sfputc_r>:
 800501c:	6893      	ldr	r3, [r2, #8]
 800501e:	3b01      	subs	r3, #1
 8005020:	2b00      	cmp	r3, #0
 8005022:	b410      	push	{r4}
 8005024:	6093      	str	r3, [r2, #8]
 8005026:	da08      	bge.n	800503a <__sfputc_r+0x1e>
 8005028:	6994      	ldr	r4, [r2, #24]
 800502a:	42a3      	cmp	r3, r4
 800502c:	db01      	blt.n	8005032 <__sfputc_r+0x16>
 800502e:	290a      	cmp	r1, #10
 8005030:	d103      	bne.n	800503a <__sfputc_r+0x1e>
 8005032:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005036:	f000 bb6d 	b.w	8005714 <__swbuf_r>
 800503a:	6813      	ldr	r3, [r2, #0]
 800503c:	1c58      	adds	r0, r3, #1
 800503e:	6010      	str	r0, [r2, #0]
 8005040:	7019      	strb	r1, [r3, #0]
 8005042:	4608      	mov	r0, r1
 8005044:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005048:	4770      	bx	lr

0800504a <__sfputs_r>:
 800504a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504c:	4606      	mov	r6, r0
 800504e:	460f      	mov	r7, r1
 8005050:	4614      	mov	r4, r2
 8005052:	18d5      	adds	r5, r2, r3
 8005054:	42ac      	cmp	r4, r5
 8005056:	d101      	bne.n	800505c <__sfputs_r+0x12>
 8005058:	2000      	movs	r0, #0
 800505a:	e007      	b.n	800506c <__sfputs_r+0x22>
 800505c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005060:	463a      	mov	r2, r7
 8005062:	4630      	mov	r0, r6
 8005064:	f7ff ffda 	bl	800501c <__sfputc_r>
 8005068:	1c43      	adds	r3, r0, #1
 800506a:	d1f3      	bne.n	8005054 <__sfputs_r+0xa>
 800506c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005070 <_vfiprintf_r>:
 8005070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005074:	460d      	mov	r5, r1
 8005076:	b09d      	sub	sp, #116	@ 0x74
 8005078:	4614      	mov	r4, r2
 800507a:	4698      	mov	r8, r3
 800507c:	4606      	mov	r6, r0
 800507e:	b118      	cbz	r0, 8005088 <_vfiprintf_r+0x18>
 8005080:	6a03      	ldr	r3, [r0, #32]
 8005082:	b90b      	cbnz	r3, 8005088 <_vfiprintf_r+0x18>
 8005084:	f7ff fc52 	bl	800492c <__sinit>
 8005088:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800508a:	07d9      	lsls	r1, r3, #31
 800508c:	d405      	bmi.n	800509a <_vfiprintf_r+0x2a>
 800508e:	89ab      	ldrh	r3, [r5, #12]
 8005090:	059a      	lsls	r2, r3, #22
 8005092:	d402      	bmi.n	800509a <_vfiprintf_r+0x2a>
 8005094:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005096:	f7ff fd6e 	bl	8004b76 <__retarget_lock_acquire_recursive>
 800509a:	89ab      	ldrh	r3, [r5, #12]
 800509c:	071b      	lsls	r3, r3, #28
 800509e:	d501      	bpl.n	80050a4 <_vfiprintf_r+0x34>
 80050a0:	692b      	ldr	r3, [r5, #16]
 80050a2:	b99b      	cbnz	r3, 80050cc <_vfiprintf_r+0x5c>
 80050a4:	4629      	mov	r1, r5
 80050a6:	4630      	mov	r0, r6
 80050a8:	f000 fb72 	bl	8005790 <__swsetup_r>
 80050ac:	b170      	cbz	r0, 80050cc <_vfiprintf_r+0x5c>
 80050ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80050b0:	07dc      	lsls	r4, r3, #31
 80050b2:	d504      	bpl.n	80050be <_vfiprintf_r+0x4e>
 80050b4:	f04f 30ff 	mov.w	r0, #4294967295
 80050b8:	b01d      	add	sp, #116	@ 0x74
 80050ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050be:	89ab      	ldrh	r3, [r5, #12]
 80050c0:	0598      	lsls	r0, r3, #22
 80050c2:	d4f7      	bmi.n	80050b4 <_vfiprintf_r+0x44>
 80050c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80050c6:	f7ff fd57 	bl	8004b78 <__retarget_lock_release_recursive>
 80050ca:	e7f3      	b.n	80050b4 <_vfiprintf_r+0x44>
 80050cc:	2300      	movs	r3, #0
 80050ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80050d0:	2320      	movs	r3, #32
 80050d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80050d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80050da:	2330      	movs	r3, #48	@ 0x30
 80050dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800528c <_vfiprintf_r+0x21c>
 80050e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80050e4:	f04f 0901 	mov.w	r9, #1
 80050e8:	4623      	mov	r3, r4
 80050ea:	469a      	mov	sl, r3
 80050ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050f0:	b10a      	cbz	r2, 80050f6 <_vfiprintf_r+0x86>
 80050f2:	2a25      	cmp	r2, #37	@ 0x25
 80050f4:	d1f9      	bne.n	80050ea <_vfiprintf_r+0x7a>
 80050f6:	ebba 0b04 	subs.w	fp, sl, r4
 80050fa:	d00b      	beq.n	8005114 <_vfiprintf_r+0xa4>
 80050fc:	465b      	mov	r3, fp
 80050fe:	4622      	mov	r2, r4
 8005100:	4629      	mov	r1, r5
 8005102:	4630      	mov	r0, r6
 8005104:	f7ff ffa1 	bl	800504a <__sfputs_r>
 8005108:	3001      	adds	r0, #1
 800510a:	f000 80a7 	beq.w	800525c <_vfiprintf_r+0x1ec>
 800510e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005110:	445a      	add	r2, fp
 8005112:	9209      	str	r2, [sp, #36]	@ 0x24
 8005114:	f89a 3000 	ldrb.w	r3, [sl]
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 809f 	beq.w	800525c <_vfiprintf_r+0x1ec>
 800511e:	2300      	movs	r3, #0
 8005120:	f04f 32ff 	mov.w	r2, #4294967295
 8005124:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005128:	f10a 0a01 	add.w	sl, sl, #1
 800512c:	9304      	str	r3, [sp, #16]
 800512e:	9307      	str	r3, [sp, #28]
 8005130:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005134:	931a      	str	r3, [sp, #104]	@ 0x68
 8005136:	4654      	mov	r4, sl
 8005138:	2205      	movs	r2, #5
 800513a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800513e:	4853      	ldr	r0, [pc, #332]	@ (800528c <_vfiprintf_r+0x21c>)
 8005140:	f7fb f85e 	bl	8000200 <memchr>
 8005144:	9a04      	ldr	r2, [sp, #16]
 8005146:	b9d8      	cbnz	r0, 8005180 <_vfiprintf_r+0x110>
 8005148:	06d1      	lsls	r1, r2, #27
 800514a:	bf44      	itt	mi
 800514c:	2320      	movmi	r3, #32
 800514e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005152:	0713      	lsls	r3, r2, #28
 8005154:	bf44      	itt	mi
 8005156:	232b      	movmi	r3, #43	@ 0x2b
 8005158:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800515c:	f89a 3000 	ldrb.w	r3, [sl]
 8005160:	2b2a      	cmp	r3, #42	@ 0x2a
 8005162:	d015      	beq.n	8005190 <_vfiprintf_r+0x120>
 8005164:	9a07      	ldr	r2, [sp, #28]
 8005166:	4654      	mov	r4, sl
 8005168:	2000      	movs	r0, #0
 800516a:	f04f 0c0a 	mov.w	ip, #10
 800516e:	4621      	mov	r1, r4
 8005170:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005174:	3b30      	subs	r3, #48	@ 0x30
 8005176:	2b09      	cmp	r3, #9
 8005178:	d94b      	bls.n	8005212 <_vfiprintf_r+0x1a2>
 800517a:	b1b0      	cbz	r0, 80051aa <_vfiprintf_r+0x13a>
 800517c:	9207      	str	r2, [sp, #28]
 800517e:	e014      	b.n	80051aa <_vfiprintf_r+0x13a>
 8005180:	eba0 0308 	sub.w	r3, r0, r8
 8005184:	fa09 f303 	lsl.w	r3, r9, r3
 8005188:	4313      	orrs	r3, r2
 800518a:	9304      	str	r3, [sp, #16]
 800518c:	46a2      	mov	sl, r4
 800518e:	e7d2      	b.n	8005136 <_vfiprintf_r+0xc6>
 8005190:	9b03      	ldr	r3, [sp, #12]
 8005192:	1d19      	adds	r1, r3, #4
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	9103      	str	r1, [sp, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	bfbb      	ittet	lt
 800519c:	425b      	neglt	r3, r3
 800519e:	f042 0202 	orrlt.w	r2, r2, #2
 80051a2:	9307      	strge	r3, [sp, #28]
 80051a4:	9307      	strlt	r3, [sp, #28]
 80051a6:	bfb8      	it	lt
 80051a8:	9204      	strlt	r2, [sp, #16]
 80051aa:	7823      	ldrb	r3, [r4, #0]
 80051ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80051ae:	d10a      	bne.n	80051c6 <_vfiprintf_r+0x156>
 80051b0:	7863      	ldrb	r3, [r4, #1]
 80051b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80051b4:	d132      	bne.n	800521c <_vfiprintf_r+0x1ac>
 80051b6:	9b03      	ldr	r3, [sp, #12]
 80051b8:	1d1a      	adds	r2, r3, #4
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	9203      	str	r2, [sp, #12]
 80051be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80051c2:	3402      	adds	r4, #2
 80051c4:	9305      	str	r3, [sp, #20]
 80051c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800529c <_vfiprintf_r+0x22c>
 80051ca:	7821      	ldrb	r1, [r4, #0]
 80051cc:	2203      	movs	r2, #3
 80051ce:	4650      	mov	r0, sl
 80051d0:	f7fb f816 	bl	8000200 <memchr>
 80051d4:	b138      	cbz	r0, 80051e6 <_vfiprintf_r+0x176>
 80051d6:	9b04      	ldr	r3, [sp, #16]
 80051d8:	eba0 000a 	sub.w	r0, r0, sl
 80051dc:	2240      	movs	r2, #64	@ 0x40
 80051de:	4082      	lsls	r2, r0
 80051e0:	4313      	orrs	r3, r2
 80051e2:	3401      	adds	r4, #1
 80051e4:	9304      	str	r3, [sp, #16]
 80051e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ea:	4829      	ldr	r0, [pc, #164]	@ (8005290 <_vfiprintf_r+0x220>)
 80051ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80051f0:	2206      	movs	r2, #6
 80051f2:	f7fb f805 	bl	8000200 <memchr>
 80051f6:	2800      	cmp	r0, #0
 80051f8:	d03f      	beq.n	800527a <_vfiprintf_r+0x20a>
 80051fa:	4b26      	ldr	r3, [pc, #152]	@ (8005294 <_vfiprintf_r+0x224>)
 80051fc:	bb1b      	cbnz	r3, 8005246 <_vfiprintf_r+0x1d6>
 80051fe:	9b03      	ldr	r3, [sp, #12]
 8005200:	3307      	adds	r3, #7
 8005202:	f023 0307 	bic.w	r3, r3, #7
 8005206:	3308      	adds	r3, #8
 8005208:	9303      	str	r3, [sp, #12]
 800520a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800520c:	443b      	add	r3, r7
 800520e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005210:	e76a      	b.n	80050e8 <_vfiprintf_r+0x78>
 8005212:	fb0c 3202 	mla	r2, ip, r2, r3
 8005216:	460c      	mov	r4, r1
 8005218:	2001      	movs	r0, #1
 800521a:	e7a8      	b.n	800516e <_vfiprintf_r+0xfe>
 800521c:	2300      	movs	r3, #0
 800521e:	3401      	adds	r4, #1
 8005220:	9305      	str	r3, [sp, #20]
 8005222:	4619      	mov	r1, r3
 8005224:	f04f 0c0a 	mov.w	ip, #10
 8005228:	4620      	mov	r0, r4
 800522a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800522e:	3a30      	subs	r2, #48	@ 0x30
 8005230:	2a09      	cmp	r2, #9
 8005232:	d903      	bls.n	800523c <_vfiprintf_r+0x1cc>
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0c6      	beq.n	80051c6 <_vfiprintf_r+0x156>
 8005238:	9105      	str	r1, [sp, #20]
 800523a:	e7c4      	b.n	80051c6 <_vfiprintf_r+0x156>
 800523c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005240:	4604      	mov	r4, r0
 8005242:	2301      	movs	r3, #1
 8005244:	e7f0      	b.n	8005228 <_vfiprintf_r+0x1b8>
 8005246:	ab03      	add	r3, sp, #12
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	462a      	mov	r2, r5
 800524c:	4b12      	ldr	r3, [pc, #72]	@ (8005298 <_vfiprintf_r+0x228>)
 800524e:	a904      	add	r1, sp, #16
 8005250:	4630      	mov	r0, r6
 8005252:	f3af 8000 	nop.w
 8005256:	4607      	mov	r7, r0
 8005258:	1c78      	adds	r0, r7, #1
 800525a:	d1d6      	bne.n	800520a <_vfiprintf_r+0x19a>
 800525c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800525e:	07d9      	lsls	r1, r3, #31
 8005260:	d405      	bmi.n	800526e <_vfiprintf_r+0x1fe>
 8005262:	89ab      	ldrh	r3, [r5, #12]
 8005264:	059a      	lsls	r2, r3, #22
 8005266:	d402      	bmi.n	800526e <_vfiprintf_r+0x1fe>
 8005268:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800526a:	f7ff fc85 	bl	8004b78 <__retarget_lock_release_recursive>
 800526e:	89ab      	ldrh	r3, [r5, #12]
 8005270:	065b      	lsls	r3, r3, #25
 8005272:	f53f af1f 	bmi.w	80050b4 <_vfiprintf_r+0x44>
 8005276:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005278:	e71e      	b.n	80050b8 <_vfiprintf_r+0x48>
 800527a:	ab03      	add	r3, sp, #12
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	462a      	mov	r2, r5
 8005280:	4b05      	ldr	r3, [pc, #20]	@ (8005298 <_vfiprintf_r+0x228>)
 8005282:	a904      	add	r1, sp, #16
 8005284:	4630      	mov	r0, r6
 8005286:	f000 f879 	bl	800537c <_printf_i>
 800528a:	e7e4      	b.n	8005256 <_vfiprintf_r+0x1e6>
 800528c:	08005a88 	.word	0x08005a88
 8005290:	08005a92 	.word	0x08005a92
 8005294:	00000000 	.word	0x00000000
 8005298:	0800504b 	.word	0x0800504b
 800529c:	08005a8e 	.word	0x08005a8e

080052a0 <_printf_common>:
 80052a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052a4:	4616      	mov	r6, r2
 80052a6:	4698      	mov	r8, r3
 80052a8:	688a      	ldr	r2, [r1, #8]
 80052aa:	690b      	ldr	r3, [r1, #16]
 80052ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052b0:	4293      	cmp	r3, r2
 80052b2:	bfb8      	it	lt
 80052b4:	4613      	movlt	r3, r2
 80052b6:	6033      	str	r3, [r6, #0]
 80052b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80052bc:	4607      	mov	r7, r0
 80052be:	460c      	mov	r4, r1
 80052c0:	b10a      	cbz	r2, 80052c6 <_printf_common+0x26>
 80052c2:	3301      	adds	r3, #1
 80052c4:	6033      	str	r3, [r6, #0]
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	0699      	lsls	r1, r3, #26
 80052ca:	bf42      	ittt	mi
 80052cc:	6833      	ldrmi	r3, [r6, #0]
 80052ce:	3302      	addmi	r3, #2
 80052d0:	6033      	strmi	r3, [r6, #0]
 80052d2:	6825      	ldr	r5, [r4, #0]
 80052d4:	f015 0506 	ands.w	r5, r5, #6
 80052d8:	d106      	bne.n	80052e8 <_printf_common+0x48>
 80052da:	f104 0a19 	add.w	sl, r4, #25
 80052de:	68e3      	ldr	r3, [r4, #12]
 80052e0:	6832      	ldr	r2, [r6, #0]
 80052e2:	1a9b      	subs	r3, r3, r2
 80052e4:	42ab      	cmp	r3, r5
 80052e6:	dc26      	bgt.n	8005336 <_printf_common+0x96>
 80052e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80052ec:	6822      	ldr	r2, [r4, #0]
 80052ee:	3b00      	subs	r3, #0
 80052f0:	bf18      	it	ne
 80052f2:	2301      	movne	r3, #1
 80052f4:	0692      	lsls	r2, r2, #26
 80052f6:	d42b      	bmi.n	8005350 <_printf_common+0xb0>
 80052f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80052fc:	4641      	mov	r1, r8
 80052fe:	4638      	mov	r0, r7
 8005300:	47c8      	blx	r9
 8005302:	3001      	adds	r0, #1
 8005304:	d01e      	beq.n	8005344 <_printf_common+0xa4>
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	6922      	ldr	r2, [r4, #16]
 800530a:	f003 0306 	and.w	r3, r3, #6
 800530e:	2b04      	cmp	r3, #4
 8005310:	bf02      	ittt	eq
 8005312:	68e5      	ldreq	r5, [r4, #12]
 8005314:	6833      	ldreq	r3, [r6, #0]
 8005316:	1aed      	subeq	r5, r5, r3
 8005318:	68a3      	ldr	r3, [r4, #8]
 800531a:	bf0c      	ite	eq
 800531c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005320:	2500      	movne	r5, #0
 8005322:	4293      	cmp	r3, r2
 8005324:	bfc4      	itt	gt
 8005326:	1a9b      	subgt	r3, r3, r2
 8005328:	18ed      	addgt	r5, r5, r3
 800532a:	2600      	movs	r6, #0
 800532c:	341a      	adds	r4, #26
 800532e:	42b5      	cmp	r5, r6
 8005330:	d11a      	bne.n	8005368 <_printf_common+0xc8>
 8005332:	2000      	movs	r0, #0
 8005334:	e008      	b.n	8005348 <_printf_common+0xa8>
 8005336:	2301      	movs	r3, #1
 8005338:	4652      	mov	r2, sl
 800533a:	4641      	mov	r1, r8
 800533c:	4638      	mov	r0, r7
 800533e:	47c8      	blx	r9
 8005340:	3001      	adds	r0, #1
 8005342:	d103      	bne.n	800534c <_printf_common+0xac>
 8005344:	f04f 30ff 	mov.w	r0, #4294967295
 8005348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800534c:	3501      	adds	r5, #1
 800534e:	e7c6      	b.n	80052de <_printf_common+0x3e>
 8005350:	18e1      	adds	r1, r4, r3
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	2030      	movs	r0, #48	@ 0x30
 8005356:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800535a:	4422      	add	r2, r4
 800535c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005360:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005364:	3302      	adds	r3, #2
 8005366:	e7c7      	b.n	80052f8 <_printf_common+0x58>
 8005368:	2301      	movs	r3, #1
 800536a:	4622      	mov	r2, r4
 800536c:	4641      	mov	r1, r8
 800536e:	4638      	mov	r0, r7
 8005370:	47c8      	blx	r9
 8005372:	3001      	adds	r0, #1
 8005374:	d0e6      	beq.n	8005344 <_printf_common+0xa4>
 8005376:	3601      	adds	r6, #1
 8005378:	e7d9      	b.n	800532e <_printf_common+0x8e>
	...

0800537c <_printf_i>:
 800537c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005380:	7e0f      	ldrb	r7, [r1, #24]
 8005382:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005384:	2f78      	cmp	r7, #120	@ 0x78
 8005386:	4691      	mov	r9, r2
 8005388:	4680      	mov	r8, r0
 800538a:	460c      	mov	r4, r1
 800538c:	469a      	mov	sl, r3
 800538e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005392:	d807      	bhi.n	80053a4 <_printf_i+0x28>
 8005394:	2f62      	cmp	r7, #98	@ 0x62
 8005396:	d80a      	bhi.n	80053ae <_printf_i+0x32>
 8005398:	2f00      	cmp	r7, #0
 800539a:	f000 80d2 	beq.w	8005542 <_printf_i+0x1c6>
 800539e:	2f58      	cmp	r7, #88	@ 0x58
 80053a0:	f000 80b9 	beq.w	8005516 <_printf_i+0x19a>
 80053a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80053ac:	e03a      	b.n	8005424 <_printf_i+0xa8>
 80053ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80053b2:	2b15      	cmp	r3, #21
 80053b4:	d8f6      	bhi.n	80053a4 <_printf_i+0x28>
 80053b6:	a101      	add	r1, pc, #4	@ (adr r1, 80053bc <_printf_i+0x40>)
 80053b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053bc:	08005415 	.word	0x08005415
 80053c0:	08005429 	.word	0x08005429
 80053c4:	080053a5 	.word	0x080053a5
 80053c8:	080053a5 	.word	0x080053a5
 80053cc:	080053a5 	.word	0x080053a5
 80053d0:	080053a5 	.word	0x080053a5
 80053d4:	08005429 	.word	0x08005429
 80053d8:	080053a5 	.word	0x080053a5
 80053dc:	080053a5 	.word	0x080053a5
 80053e0:	080053a5 	.word	0x080053a5
 80053e4:	080053a5 	.word	0x080053a5
 80053e8:	08005529 	.word	0x08005529
 80053ec:	08005453 	.word	0x08005453
 80053f0:	080054e3 	.word	0x080054e3
 80053f4:	080053a5 	.word	0x080053a5
 80053f8:	080053a5 	.word	0x080053a5
 80053fc:	0800554b 	.word	0x0800554b
 8005400:	080053a5 	.word	0x080053a5
 8005404:	08005453 	.word	0x08005453
 8005408:	080053a5 	.word	0x080053a5
 800540c:	080053a5 	.word	0x080053a5
 8005410:	080054eb 	.word	0x080054eb
 8005414:	6833      	ldr	r3, [r6, #0]
 8005416:	1d1a      	adds	r2, r3, #4
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6032      	str	r2, [r6, #0]
 800541c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005420:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005424:	2301      	movs	r3, #1
 8005426:	e09d      	b.n	8005564 <_printf_i+0x1e8>
 8005428:	6833      	ldr	r3, [r6, #0]
 800542a:	6820      	ldr	r0, [r4, #0]
 800542c:	1d19      	adds	r1, r3, #4
 800542e:	6031      	str	r1, [r6, #0]
 8005430:	0606      	lsls	r6, r0, #24
 8005432:	d501      	bpl.n	8005438 <_printf_i+0xbc>
 8005434:	681d      	ldr	r5, [r3, #0]
 8005436:	e003      	b.n	8005440 <_printf_i+0xc4>
 8005438:	0645      	lsls	r5, r0, #25
 800543a:	d5fb      	bpl.n	8005434 <_printf_i+0xb8>
 800543c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005440:	2d00      	cmp	r5, #0
 8005442:	da03      	bge.n	800544c <_printf_i+0xd0>
 8005444:	232d      	movs	r3, #45	@ 0x2d
 8005446:	426d      	negs	r5, r5
 8005448:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800544c:	4859      	ldr	r0, [pc, #356]	@ (80055b4 <_printf_i+0x238>)
 800544e:	230a      	movs	r3, #10
 8005450:	e011      	b.n	8005476 <_printf_i+0xfa>
 8005452:	6821      	ldr	r1, [r4, #0]
 8005454:	6833      	ldr	r3, [r6, #0]
 8005456:	0608      	lsls	r0, r1, #24
 8005458:	f853 5b04 	ldr.w	r5, [r3], #4
 800545c:	d402      	bmi.n	8005464 <_printf_i+0xe8>
 800545e:	0649      	lsls	r1, r1, #25
 8005460:	bf48      	it	mi
 8005462:	b2ad      	uxthmi	r5, r5
 8005464:	2f6f      	cmp	r7, #111	@ 0x6f
 8005466:	4853      	ldr	r0, [pc, #332]	@ (80055b4 <_printf_i+0x238>)
 8005468:	6033      	str	r3, [r6, #0]
 800546a:	bf14      	ite	ne
 800546c:	230a      	movne	r3, #10
 800546e:	2308      	moveq	r3, #8
 8005470:	2100      	movs	r1, #0
 8005472:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005476:	6866      	ldr	r6, [r4, #4]
 8005478:	60a6      	str	r6, [r4, #8]
 800547a:	2e00      	cmp	r6, #0
 800547c:	bfa2      	ittt	ge
 800547e:	6821      	ldrge	r1, [r4, #0]
 8005480:	f021 0104 	bicge.w	r1, r1, #4
 8005484:	6021      	strge	r1, [r4, #0]
 8005486:	b90d      	cbnz	r5, 800548c <_printf_i+0x110>
 8005488:	2e00      	cmp	r6, #0
 800548a:	d04b      	beq.n	8005524 <_printf_i+0x1a8>
 800548c:	4616      	mov	r6, r2
 800548e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005492:	fb03 5711 	mls	r7, r3, r1, r5
 8005496:	5dc7      	ldrb	r7, [r0, r7]
 8005498:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800549c:	462f      	mov	r7, r5
 800549e:	42bb      	cmp	r3, r7
 80054a0:	460d      	mov	r5, r1
 80054a2:	d9f4      	bls.n	800548e <_printf_i+0x112>
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d10b      	bne.n	80054c0 <_printf_i+0x144>
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	07df      	lsls	r7, r3, #31
 80054ac:	d508      	bpl.n	80054c0 <_printf_i+0x144>
 80054ae:	6923      	ldr	r3, [r4, #16]
 80054b0:	6861      	ldr	r1, [r4, #4]
 80054b2:	4299      	cmp	r1, r3
 80054b4:	bfde      	ittt	le
 80054b6:	2330      	movle	r3, #48	@ 0x30
 80054b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054c0:	1b92      	subs	r2, r2, r6
 80054c2:	6122      	str	r2, [r4, #16]
 80054c4:	f8cd a000 	str.w	sl, [sp]
 80054c8:	464b      	mov	r3, r9
 80054ca:	aa03      	add	r2, sp, #12
 80054cc:	4621      	mov	r1, r4
 80054ce:	4640      	mov	r0, r8
 80054d0:	f7ff fee6 	bl	80052a0 <_printf_common>
 80054d4:	3001      	adds	r0, #1
 80054d6:	d14a      	bne.n	800556e <_printf_i+0x1f2>
 80054d8:	f04f 30ff 	mov.w	r0, #4294967295
 80054dc:	b004      	add	sp, #16
 80054de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	f043 0320 	orr.w	r3, r3, #32
 80054e8:	6023      	str	r3, [r4, #0]
 80054ea:	4833      	ldr	r0, [pc, #204]	@ (80055b8 <_printf_i+0x23c>)
 80054ec:	2778      	movs	r7, #120	@ 0x78
 80054ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	6831      	ldr	r1, [r6, #0]
 80054f6:	061f      	lsls	r7, r3, #24
 80054f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80054fc:	d402      	bmi.n	8005504 <_printf_i+0x188>
 80054fe:	065f      	lsls	r7, r3, #25
 8005500:	bf48      	it	mi
 8005502:	b2ad      	uxthmi	r5, r5
 8005504:	6031      	str	r1, [r6, #0]
 8005506:	07d9      	lsls	r1, r3, #31
 8005508:	bf44      	itt	mi
 800550a:	f043 0320 	orrmi.w	r3, r3, #32
 800550e:	6023      	strmi	r3, [r4, #0]
 8005510:	b11d      	cbz	r5, 800551a <_printf_i+0x19e>
 8005512:	2310      	movs	r3, #16
 8005514:	e7ac      	b.n	8005470 <_printf_i+0xf4>
 8005516:	4827      	ldr	r0, [pc, #156]	@ (80055b4 <_printf_i+0x238>)
 8005518:	e7e9      	b.n	80054ee <_printf_i+0x172>
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	f023 0320 	bic.w	r3, r3, #32
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	e7f6      	b.n	8005512 <_printf_i+0x196>
 8005524:	4616      	mov	r6, r2
 8005526:	e7bd      	b.n	80054a4 <_printf_i+0x128>
 8005528:	6833      	ldr	r3, [r6, #0]
 800552a:	6825      	ldr	r5, [r4, #0]
 800552c:	6961      	ldr	r1, [r4, #20]
 800552e:	1d18      	adds	r0, r3, #4
 8005530:	6030      	str	r0, [r6, #0]
 8005532:	062e      	lsls	r6, r5, #24
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	d501      	bpl.n	800553c <_printf_i+0x1c0>
 8005538:	6019      	str	r1, [r3, #0]
 800553a:	e002      	b.n	8005542 <_printf_i+0x1c6>
 800553c:	0668      	lsls	r0, r5, #25
 800553e:	d5fb      	bpl.n	8005538 <_printf_i+0x1bc>
 8005540:	8019      	strh	r1, [r3, #0]
 8005542:	2300      	movs	r3, #0
 8005544:	6123      	str	r3, [r4, #16]
 8005546:	4616      	mov	r6, r2
 8005548:	e7bc      	b.n	80054c4 <_printf_i+0x148>
 800554a:	6833      	ldr	r3, [r6, #0]
 800554c:	1d1a      	adds	r2, r3, #4
 800554e:	6032      	str	r2, [r6, #0]
 8005550:	681e      	ldr	r6, [r3, #0]
 8005552:	6862      	ldr	r2, [r4, #4]
 8005554:	2100      	movs	r1, #0
 8005556:	4630      	mov	r0, r6
 8005558:	f7fa fe52 	bl	8000200 <memchr>
 800555c:	b108      	cbz	r0, 8005562 <_printf_i+0x1e6>
 800555e:	1b80      	subs	r0, r0, r6
 8005560:	6060      	str	r0, [r4, #4]
 8005562:	6863      	ldr	r3, [r4, #4]
 8005564:	6123      	str	r3, [r4, #16]
 8005566:	2300      	movs	r3, #0
 8005568:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800556c:	e7aa      	b.n	80054c4 <_printf_i+0x148>
 800556e:	6923      	ldr	r3, [r4, #16]
 8005570:	4632      	mov	r2, r6
 8005572:	4649      	mov	r1, r9
 8005574:	4640      	mov	r0, r8
 8005576:	47d0      	blx	sl
 8005578:	3001      	adds	r0, #1
 800557a:	d0ad      	beq.n	80054d8 <_printf_i+0x15c>
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	079b      	lsls	r3, r3, #30
 8005580:	d413      	bmi.n	80055aa <_printf_i+0x22e>
 8005582:	68e0      	ldr	r0, [r4, #12]
 8005584:	9b03      	ldr	r3, [sp, #12]
 8005586:	4298      	cmp	r0, r3
 8005588:	bfb8      	it	lt
 800558a:	4618      	movlt	r0, r3
 800558c:	e7a6      	b.n	80054dc <_printf_i+0x160>
 800558e:	2301      	movs	r3, #1
 8005590:	4632      	mov	r2, r6
 8005592:	4649      	mov	r1, r9
 8005594:	4640      	mov	r0, r8
 8005596:	47d0      	blx	sl
 8005598:	3001      	adds	r0, #1
 800559a:	d09d      	beq.n	80054d8 <_printf_i+0x15c>
 800559c:	3501      	adds	r5, #1
 800559e:	68e3      	ldr	r3, [r4, #12]
 80055a0:	9903      	ldr	r1, [sp, #12]
 80055a2:	1a5b      	subs	r3, r3, r1
 80055a4:	42ab      	cmp	r3, r5
 80055a6:	dcf2      	bgt.n	800558e <_printf_i+0x212>
 80055a8:	e7eb      	b.n	8005582 <_printf_i+0x206>
 80055aa:	2500      	movs	r5, #0
 80055ac:	f104 0619 	add.w	r6, r4, #25
 80055b0:	e7f5      	b.n	800559e <_printf_i+0x222>
 80055b2:	bf00      	nop
 80055b4:	08005a99 	.word	0x08005a99
 80055b8:	08005aaa 	.word	0x08005aaa

080055bc <__sflush_r>:
 80055bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055c4:	0716      	lsls	r6, r2, #28
 80055c6:	4605      	mov	r5, r0
 80055c8:	460c      	mov	r4, r1
 80055ca:	d454      	bmi.n	8005676 <__sflush_r+0xba>
 80055cc:	684b      	ldr	r3, [r1, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	dc02      	bgt.n	80055d8 <__sflush_r+0x1c>
 80055d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	dd48      	ble.n	800566a <__sflush_r+0xae>
 80055d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80055da:	2e00      	cmp	r6, #0
 80055dc:	d045      	beq.n	800566a <__sflush_r+0xae>
 80055de:	2300      	movs	r3, #0
 80055e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80055e4:	682f      	ldr	r7, [r5, #0]
 80055e6:	6a21      	ldr	r1, [r4, #32]
 80055e8:	602b      	str	r3, [r5, #0]
 80055ea:	d030      	beq.n	800564e <__sflush_r+0x92>
 80055ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80055ee:	89a3      	ldrh	r3, [r4, #12]
 80055f0:	0759      	lsls	r1, r3, #29
 80055f2:	d505      	bpl.n	8005600 <__sflush_r+0x44>
 80055f4:	6863      	ldr	r3, [r4, #4]
 80055f6:	1ad2      	subs	r2, r2, r3
 80055f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80055fa:	b10b      	cbz	r3, 8005600 <__sflush_r+0x44>
 80055fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80055fe:	1ad2      	subs	r2, r2, r3
 8005600:	2300      	movs	r3, #0
 8005602:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005604:	6a21      	ldr	r1, [r4, #32]
 8005606:	4628      	mov	r0, r5
 8005608:	47b0      	blx	r6
 800560a:	1c43      	adds	r3, r0, #1
 800560c:	89a3      	ldrh	r3, [r4, #12]
 800560e:	d106      	bne.n	800561e <__sflush_r+0x62>
 8005610:	6829      	ldr	r1, [r5, #0]
 8005612:	291d      	cmp	r1, #29
 8005614:	d82b      	bhi.n	800566e <__sflush_r+0xb2>
 8005616:	4a2a      	ldr	r2, [pc, #168]	@ (80056c0 <__sflush_r+0x104>)
 8005618:	410a      	asrs	r2, r1
 800561a:	07d6      	lsls	r6, r2, #31
 800561c:	d427      	bmi.n	800566e <__sflush_r+0xb2>
 800561e:	2200      	movs	r2, #0
 8005620:	6062      	str	r2, [r4, #4]
 8005622:	04d9      	lsls	r1, r3, #19
 8005624:	6922      	ldr	r2, [r4, #16]
 8005626:	6022      	str	r2, [r4, #0]
 8005628:	d504      	bpl.n	8005634 <__sflush_r+0x78>
 800562a:	1c42      	adds	r2, r0, #1
 800562c:	d101      	bne.n	8005632 <__sflush_r+0x76>
 800562e:	682b      	ldr	r3, [r5, #0]
 8005630:	b903      	cbnz	r3, 8005634 <__sflush_r+0x78>
 8005632:	6560      	str	r0, [r4, #84]	@ 0x54
 8005634:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005636:	602f      	str	r7, [r5, #0]
 8005638:	b1b9      	cbz	r1, 800566a <__sflush_r+0xae>
 800563a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800563e:	4299      	cmp	r1, r3
 8005640:	d002      	beq.n	8005648 <__sflush_r+0x8c>
 8005642:	4628      	mov	r0, r5
 8005644:	f7ff fa9a 	bl	8004b7c <_free_r>
 8005648:	2300      	movs	r3, #0
 800564a:	6363      	str	r3, [r4, #52]	@ 0x34
 800564c:	e00d      	b.n	800566a <__sflush_r+0xae>
 800564e:	2301      	movs	r3, #1
 8005650:	4628      	mov	r0, r5
 8005652:	47b0      	blx	r6
 8005654:	4602      	mov	r2, r0
 8005656:	1c50      	adds	r0, r2, #1
 8005658:	d1c9      	bne.n	80055ee <__sflush_r+0x32>
 800565a:	682b      	ldr	r3, [r5, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0c6      	beq.n	80055ee <__sflush_r+0x32>
 8005660:	2b1d      	cmp	r3, #29
 8005662:	d001      	beq.n	8005668 <__sflush_r+0xac>
 8005664:	2b16      	cmp	r3, #22
 8005666:	d11e      	bne.n	80056a6 <__sflush_r+0xea>
 8005668:	602f      	str	r7, [r5, #0]
 800566a:	2000      	movs	r0, #0
 800566c:	e022      	b.n	80056b4 <__sflush_r+0xf8>
 800566e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005672:	b21b      	sxth	r3, r3
 8005674:	e01b      	b.n	80056ae <__sflush_r+0xf2>
 8005676:	690f      	ldr	r7, [r1, #16]
 8005678:	2f00      	cmp	r7, #0
 800567a:	d0f6      	beq.n	800566a <__sflush_r+0xae>
 800567c:	0793      	lsls	r3, r2, #30
 800567e:	680e      	ldr	r6, [r1, #0]
 8005680:	bf08      	it	eq
 8005682:	694b      	ldreq	r3, [r1, #20]
 8005684:	600f      	str	r7, [r1, #0]
 8005686:	bf18      	it	ne
 8005688:	2300      	movne	r3, #0
 800568a:	eba6 0807 	sub.w	r8, r6, r7
 800568e:	608b      	str	r3, [r1, #8]
 8005690:	f1b8 0f00 	cmp.w	r8, #0
 8005694:	dde9      	ble.n	800566a <__sflush_r+0xae>
 8005696:	6a21      	ldr	r1, [r4, #32]
 8005698:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800569a:	4643      	mov	r3, r8
 800569c:	463a      	mov	r2, r7
 800569e:	4628      	mov	r0, r5
 80056a0:	47b0      	blx	r6
 80056a2:	2800      	cmp	r0, #0
 80056a4:	dc08      	bgt.n	80056b8 <__sflush_r+0xfc>
 80056a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056ae:	81a3      	strh	r3, [r4, #12]
 80056b0:	f04f 30ff 	mov.w	r0, #4294967295
 80056b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056b8:	4407      	add	r7, r0
 80056ba:	eba8 0800 	sub.w	r8, r8, r0
 80056be:	e7e7      	b.n	8005690 <__sflush_r+0xd4>
 80056c0:	dfbffffe 	.word	0xdfbffffe

080056c4 <_fflush_r>:
 80056c4:	b538      	push	{r3, r4, r5, lr}
 80056c6:	690b      	ldr	r3, [r1, #16]
 80056c8:	4605      	mov	r5, r0
 80056ca:	460c      	mov	r4, r1
 80056cc:	b913      	cbnz	r3, 80056d4 <_fflush_r+0x10>
 80056ce:	2500      	movs	r5, #0
 80056d0:	4628      	mov	r0, r5
 80056d2:	bd38      	pop	{r3, r4, r5, pc}
 80056d4:	b118      	cbz	r0, 80056de <_fflush_r+0x1a>
 80056d6:	6a03      	ldr	r3, [r0, #32]
 80056d8:	b90b      	cbnz	r3, 80056de <_fflush_r+0x1a>
 80056da:	f7ff f927 	bl	800492c <__sinit>
 80056de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d0f3      	beq.n	80056ce <_fflush_r+0xa>
 80056e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80056e8:	07d0      	lsls	r0, r2, #31
 80056ea:	d404      	bmi.n	80056f6 <_fflush_r+0x32>
 80056ec:	0599      	lsls	r1, r3, #22
 80056ee:	d402      	bmi.n	80056f6 <_fflush_r+0x32>
 80056f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80056f2:	f7ff fa40 	bl	8004b76 <__retarget_lock_acquire_recursive>
 80056f6:	4628      	mov	r0, r5
 80056f8:	4621      	mov	r1, r4
 80056fa:	f7ff ff5f 	bl	80055bc <__sflush_r>
 80056fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005700:	07da      	lsls	r2, r3, #31
 8005702:	4605      	mov	r5, r0
 8005704:	d4e4      	bmi.n	80056d0 <_fflush_r+0xc>
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	059b      	lsls	r3, r3, #22
 800570a:	d4e1      	bmi.n	80056d0 <_fflush_r+0xc>
 800570c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800570e:	f7ff fa33 	bl	8004b78 <__retarget_lock_release_recursive>
 8005712:	e7dd      	b.n	80056d0 <_fflush_r+0xc>

08005714 <__swbuf_r>:
 8005714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005716:	460e      	mov	r6, r1
 8005718:	4614      	mov	r4, r2
 800571a:	4605      	mov	r5, r0
 800571c:	b118      	cbz	r0, 8005726 <__swbuf_r+0x12>
 800571e:	6a03      	ldr	r3, [r0, #32]
 8005720:	b90b      	cbnz	r3, 8005726 <__swbuf_r+0x12>
 8005722:	f7ff f903 	bl	800492c <__sinit>
 8005726:	69a3      	ldr	r3, [r4, #24]
 8005728:	60a3      	str	r3, [r4, #8]
 800572a:	89a3      	ldrh	r3, [r4, #12]
 800572c:	071a      	lsls	r2, r3, #28
 800572e:	d501      	bpl.n	8005734 <__swbuf_r+0x20>
 8005730:	6923      	ldr	r3, [r4, #16]
 8005732:	b943      	cbnz	r3, 8005746 <__swbuf_r+0x32>
 8005734:	4621      	mov	r1, r4
 8005736:	4628      	mov	r0, r5
 8005738:	f000 f82a 	bl	8005790 <__swsetup_r>
 800573c:	b118      	cbz	r0, 8005746 <__swbuf_r+0x32>
 800573e:	f04f 37ff 	mov.w	r7, #4294967295
 8005742:	4638      	mov	r0, r7
 8005744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	6922      	ldr	r2, [r4, #16]
 800574a:	1a98      	subs	r0, r3, r2
 800574c:	6963      	ldr	r3, [r4, #20]
 800574e:	b2f6      	uxtb	r6, r6
 8005750:	4283      	cmp	r3, r0
 8005752:	4637      	mov	r7, r6
 8005754:	dc05      	bgt.n	8005762 <__swbuf_r+0x4e>
 8005756:	4621      	mov	r1, r4
 8005758:	4628      	mov	r0, r5
 800575a:	f7ff ffb3 	bl	80056c4 <_fflush_r>
 800575e:	2800      	cmp	r0, #0
 8005760:	d1ed      	bne.n	800573e <__swbuf_r+0x2a>
 8005762:	68a3      	ldr	r3, [r4, #8]
 8005764:	3b01      	subs	r3, #1
 8005766:	60a3      	str	r3, [r4, #8]
 8005768:	6823      	ldr	r3, [r4, #0]
 800576a:	1c5a      	adds	r2, r3, #1
 800576c:	6022      	str	r2, [r4, #0]
 800576e:	701e      	strb	r6, [r3, #0]
 8005770:	6962      	ldr	r2, [r4, #20]
 8005772:	1c43      	adds	r3, r0, #1
 8005774:	429a      	cmp	r2, r3
 8005776:	d004      	beq.n	8005782 <__swbuf_r+0x6e>
 8005778:	89a3      	ldrh	r3, [r4, #12]
 800577a:	07db      	lsls	r3, r3, #31
 800577c:	d5e1      	bpl.n	8005742 <__swbuf_r+0x2e>
 800577e:	2e0a      	cmp	r6, #10
 8005780:	d1df      	bne.n	8005742 <__swbuf_r+0x2e>
 8005782:	4621      	mov	r1, r4
 8005784:	4628      	mov	r0, r5
 8005786:	f7ff ff9d 	bl	80056c4 <_fflush_r>
 800578a:	2800      	cmp	r0, #0
 800578c:	d0d9      	beq.n	8005742 <__swbuf_r+0x2e>
 800578e:	e7d6      	b.n	800573e <__swbuf_r+0x2a>

08005790 <__swsetup_r>:
 8005790:	b538      	push	{r3, r4, r5, lr}
 8005792:	4b29      	ldr	r3, [pc, #164]	@ (8005838 <__swsetup_r+0xa8>)
 8005794:	4605      	mov	r5, r0
 8005796:	6818      	ldr	r0, [r3, #0]
 8005798:	460c      	mov	r4, r1
 800579a:	b118      	cbz	r0, 80057a4 <__swsetup_r+0x14>
 800579c:	6a03      	ldr	r3, [r0, #32]
 800579e:	b90b      	cbnz	r3, 80057a4 <__swsetup_r+0x14>
 80057a0:	f7ff f8c4 	bl	800492c <__sinit>
 80057a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057a8:	0719      	lsls	r1, r3, #28
 80057aa:	d422      	bmi.n	80057f2 <__swsetup_r+0x62>
 80057ac:	06da      	lsls	r2, r3, #27
 80057ae:	d407      	bmi.n	80057c0 <__swsetup_r+0x30>
 80057b0:	2209      	movs	r2, #9
 80057b2:	602a      	str	r2, [r5, #0]
 80057b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057b8:	81a3      	strh	r3, [r4, #12]
 80057ba:	f04f 30ff 	mov.w	r0, #4294967295
 80057be:	e033      	b.n	8005828 <__swsetup_r+0x98>
 80057c0:	0758      	lsls	r0, r3, #29
 80057c2:	d512      	bpl.n	80057ea <__swsetup_r+0x5a>
 80057c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057c6:	b141      	cbz	r1, 80057da <__swsetup_r+0x4a>
 80057c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80057cc:	4299      	cmp	r1, r3
 80057ce:	d002      	beq.n	80057d6 <__swsetup_r+0x46>
 80057d0:	4628      	mov	r0, r5
 80057d2:	f7ff f9d3 	bl	8004b7c <_free_r>
 80057d6:	2300      	movs	r3, #0
 80057d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80057da:	89a3      	ldrh	r3, [r4, #12]
 80057dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80057e0:	81a3      	strh	r3, [r4, #12]
 80057e2:	2300      	movs	r3, #0
 80057e4:	6063      	str	r3, [r4, #4]
 80057e6:	6923      	ldr	r3, [r4, #16]
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	89a3      	ldrh	r3, [r4, #12]
 80057ec:	f043 0308 	orr.w	r3, r3, #8
 80057f0:	81a3      	strh	r3, [r4, #12]
 80057f2:	6923      	ldr	r3, [r4, #16]
 80057f4:	b94b      	cbnz	r3, 800580a <__swsetup_r+0x7a>
 80057f6:	89a3      	ldrh	r3, [r4, #12]
 80057f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80057fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005800:	d003      	beq.n	800580a <__swsetup_r+0x7a>
 8005802:	4621      	mov	r1, r4
 8005804:	4628      	mov	r0, r5
 8005806:	f000 f8a5 	bl	8005954 <__smakebuf_r>
 800580a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800580e:	f013 0201 	ands.w	r2, r3, #1
 8005812:	d00a      	beq.n	800582a <__swsetup_r+0x9a>
 8005814:	2200      	movs	r2, #0
 8005816:	60a2      	str	r2, [r4, #8]
 8005818:	6962      	ldr	r2, [r4, #20]
 800581a:	4252      	negs	r2, r2
 800581c:	61a2      	str	r2, [r4, #24]
 800581e:	6922      	ldr	r2, [r4, #16]
 8005820:	b942      	cbnz	r2, 8005834 <__swsetup_r+0xa4>
 8005822:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005826:	d1c5      	bne.n	80057b4 <__swsetup_r+0x24>
 8005828:	bd38      	pop	{r3, r4, r5, pc}
 800582a:	0799      	lsls	r1, r3, #30
 800582c:	bf58      	it	pl
 800582e:	6962      	ldrpl	r2, [r4, #20]
 8005830:	60a2      	str	r2, [r4, #8]
 8005832:	e7f4      	b.n	800581e <__swsetup_r+0x8e>
 8005834:	2000      	movs	r0, #0
 8005836:	e7f7      	b.n	8005828 <__swsetup_r+0x98>
 8005838:	2000001c 	.word	0x2000001c

0800583c <memmove>:
 800583c:	4288      	cmp	r0, r1
 800583e:	b510      	push	{r4, lr}
 8005840:	eb01 0402 	add.w	r4, r1, r2
 8005844:	d902      	bls.n	800584c <memmove+0x10>
 8005846:	4284      	cmp	r4, r0
 8005848:	4623      	mov	r3, r4
 800584a:	d807      	bhi.n	800585c <memmove+0x20>
 800584c:	1e43      	subs	r3, r0, #1
 800584e:	42a1      	cmp	r1, r4
 8005850:	d008      	beq.n	8005864 <memmove+0x28>
 8005852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005856:	f803 2f01 	strb.w	r2, [r3, #1]!
 800585a:	e7f8      	b.n	800584e <memmove+0x12>
 800585c:	4402      	add	r2, r0
 800585e:	4601      	mov	r1, r0
 8005860:	428a      	cmp	r2, r1
 8005862:	d100      	bne.n	8005866 <memmove+0x2a>
 8005864:	bd10      	pop	{r4, pc}
 8005866:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800586a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800586e:	e7f7      	b.n	8005860 <memmove+0x24>

08005870 <_sbrk_r>:
 8005870:	b538      	push	{r3, r4, r5, lr}
 8005872:	4d06      	ldr	r5, [pc, #24]	@ (800588c <_sbrk_r+0x1c>)
 8005874:	2300      	movs	r3, #0
 8005876:	4604      	mov	r4, r0
 8005878:	4608      	mov	r0, r1
 800587a:	602b      	str	r3, [r5, #0]
 800587c:	f7fc fc14 	bl	80020a8 <_sbrk>
 8005880:	1c43      	adds	r3, r0, #1
 8005882:	d102      	bne.n	800588a <_sbrk_r+0x1a>
 8005884:	682b      	ldr	r3, [r5, #0]
 8005886:	b103      	cbz	r3, 800588a <_sbrk_r+0x1a>
 8005888:	6023      	str	r3, [r4, #0]
 800588a:	bd38      	pop	{r3, r4, r5, pc}
 800588c:	20000928 	.word	0x20000928

08005890 <memcpy>:
 8005890:	440a      	add	r2, r1
 8005892:	4291      	cmp	r1, r2
 8005894:	f100 33ff 	add.w	r3, r0, #4294967295
 8005898:	d100      	bne.n	800589c <memcpy+0xc>
 800589a:	4770      	bx	lr
 800589c:	b510      	push	{r4, lr}
 800589e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058a6:	4291      	cmp	r1, r2
 80058a8:	d1f9      	bne.n	800589e <memcpy+0xe>
 80058aa:	bd10      	pop	{r4, pc}

080058ac <_realloc_r>:
 80058ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058b0:	4680      	mov	r8, r0
 80058b2:	4615      	mov	r5, r2
 80058b4:	460c      	mov	r4, r1
 80058b6:	b921      	cbnz	r1, 80058c2 <_realloc_r+0x16>
 80058b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058bc:	4611      	mov	r1, r2
 80058be:	f7ff b9c9 	b.w	8004c54 <_malloc_r>
 80058c2:	b92a      	cbnz	r2, 80058d0 <_realloc_r+0x24>
 80058c4:	f7ff f95a 	bl	8004b7c <_free_r>
 80058c8:	2400      	movs	r4, #0
 80058ca:	4620      	mov	r0, r4
 80058cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058d0:	f000 f89e 	bl	8005a10 <_malloc_usable_size_r>
 80058d4:	4285      	cmp	r5, r0
 80058d6:	4606      	mov	r6, r0
 80058d8:	d802      	bhi.n	80058e0 <_realloc_r+0x34>
 80058da:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80058de:	d8f4      	bhi.n	80058ca <_realloc_r+0x1e>
 80058e0:	4629      	mov	r1, r5
 80058e2:	4640      	mov	r0, r8
 80058e4:	f7ff f9b6 	bl	8004c54 <_malloc_r>
 80058e8:	4607      	mov	r7, r0
 80058ea:	2800      	cmp	r0, #0
 80058ec:	d0ec      	beq.n	80058c8 <_realloc_r+0x1c>
 80058ee:	42b5      	cmp	r5, r6
 80058f0:	462a      	mov	r2, r5
 80058f2:	4621      	mov	r1, r4
 80058f4:	bf28      	it	cs
 80058f6:	4632      	movcs	r2, r6
 80058f8:	f7ff ffca 	bl	8005890 <memcpy>
 80058fc:	4621      	mov	r1, r4
 80058fe:	4640      	mov	r0, r8
 8005900:	f7ff f93c 	bl	8004b7c <_free_r>
 8005904:	463c      	mov	r4, r7
 8005906:	e7e0      	b.n	80058ca <_realloc_r+0x1e>

08005908 <__swhatbuf_r>:
 8005908:	b570      	push	{r4, r5, r6, lr}
 800590a:	460c      	mov	r4, r1
 800590c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005910:	2900      	cmp	r1, #0
 8005912:	b096      	sub	sp, #88	@ 0x58
 8005914:	4615      	mov	r5, r2
 8005916:	461e      	mov	r6, r3
 8005918:	da0d      	bge.n	8005936 <__swhatbuf_r+0x2e>
 800591a:	89a3      	ldrh	r3, [r4, #12]
 800591c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005920:	f04f 0100 	mov.w	r1, #0
 8005924:	bf14      	ite	ne
 8005926:	2340      	movne	r3, #64	@ 0x40
 8005928:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800592c:	2000      	movs	r0, #0
 800592e:	6031      	str	r1, [r6, #0]
 8005930:	602b      	str	r3, [r5, #0]
 8005932:	b016      	add	sp, #88	@ 0x58
 8005934:	bd70      	pop	{r4, r5, r6, pc}
 8005936:	466a      	mov	r2, sp
 8005938:	f000 f848 	bl	80059cc <_fstat_r>
 800593c:	2800      	cmp	r0, #0
 800593e:	dbec      	blt.n	800591a <__swhatbuf_r+0x12>
 8005940:	9901      	ldr	r1, [sp, #4]
 8005942:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005946:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800594a:	4259      	negs	r1, r3
 800594c:	4159      	adcs	r1, r3
 800594e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005952:	e7eb      	b.n	800592c <__swhatbuf_r+0x24>

08005954 <__smakebuf_r>:
 8005954:	898b      	ldrh	r3, [r1, #12]
 8005956:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005958:	079d      	lsls	r5, r3, #30
 800595a:	4606      	mov	r6, r0
 800595c:	460c      	mov	r4, r1
 800595e:	d507      	bpl.n	8005970 <__smakebuf_r+0x1c>
 8005960:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005964:	6023      	str	r3, [r4, #0]
 8005966:	6123      	str	r3, [r4, #16]
 8005968:	2301      	movs	r3, #1
 800596a:	6163      	str	r3, [r4, #20]
 800596c:	b003      	add	sp, #12
 800596e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005970:	ab01      	add	r3, sp, #4
 8005972:	466a      	mov	r2, sp
 8005974:	f7ff ffc8 	bl	8005908 <__swhatbuf_r>
 8005978:	9f00      	ldr	r7, [sp, #0]
 800597a:	4605      	mov	r5, r0
 800597c:	4639      	mov	r1, r7
 800597e:	4630      	mov	r0, r6
 8005980:	f7ff f968 	bl	8004c54 <_malloc_r>
 8005984:	b948      	cbnz	r0, 800599a <__smakebuf_r+0x46>
 8005986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800598a:	059a      	lsls	r2, r3, #22
 800598c:	d4ee      	bmi.n	800596c <__smakebuf_r+0x18>
 800598e:	f023 0303 	bic.w	r3, r3, #3
 8005992:	f043 0302 	orr.w	r3, r3, #2
 8005996:	81a3      	strh	r3, [r4, #12]
 8005998:	e7e2      	b.n	8005960 <__smakebuf_r+0xc>
 800599a:	89a3      	ldrh	r3, [r4, #12]
 800599c:	6020      	str	r0, [r4, #0]
 800599e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059a2:	81a3      	strh	r3, [r4, #12]
 80059a4:	9b01      	ldr	r3, [sp, #4]
 80059a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80059aa:	b15b      	cbz	r3, 80059c4 <__smakebuf_r+0x70>
 80059ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059b0:	4630      	mov	r0, r6
 80059b2:	f000 f81d 	bl	80059f0 <_isatty_r>
 80059b6:	b128      	cbz	r0, 80059c4 <__smakebuf_r+0x70>
 80059b8:	89a3      	ldrh	r3, [r4, #12]
 80059ba:	f023 0303 	bic.w	r3, r3, #3
 80059be:	f043 0301 	orr.w	r3, r3, #1
 80059c2:	81a3      	strh	r3, [r4, #12]
 80059c4:	89a3      	ldrh	r3, [r4, #12]
 80059c6:	431d      	orrs	r5, r3
 80059c8:	81a5      	strh	r5, [r4, #12]
 80059ca:	e7cf      	b.n	800596c <__smakebuf_r+0x18>

080059cc <_fstat_r>:
 80059cc:	b538      	push	{r3, r4, r5, lr}
 80059ce:	4d07      	ldr	r5, [pc, #28]	@ (80059ec <_fstat_r+0x20>)
 80059d0:	2300      	movs	r3, #0
 80059d2:	4604      	mov	r4, r0
 80059d4:	4608      	mov	r0, r1
 80059d6:	4611      	mov	r1, r2
 80059d8:	602b      	str	r3, [r5, #0]
 80059da:	f7fc fb3d 	bl	8002058 <_fstat>
 80059de:	1c43      	adds	r3, r0, #1
 80059e0:	d102      	bne.n	80059e8 <_fstat_r+0x1c>
 80059e2:	682b      	ldr	r3, [r5, #0]
 80059e4:	b103      	cbz	r3, 80059e8 <_fstat_r+0x1c>
 80059e6:	6023      	str	r3, [r4, #0]
 80059e8:	bd38      	pop	{r3, r4, r5, pc}
 80059ea:	bf00      	nop
 80059ec:	20000928 	.word	0x20000928

080059f0 <_isatty_r>:
 80059f0:	b538      	push	{r3, r4, r5, lr}
 80059f2:	4d06      	ldr	r5, [pc, #24]	@ (8005a0c <_isatty_r+0x1c>)
 80059f4:	2300      	movs	r3, #0
 80059f6:	4604      	mov	r4, r0
 80059f8:	4608      	mov	r0, r1
 80059fa:	602b      	str	r3, [r5, #0]
 80059fc:	f7fc fb3c 	bl	8002078 <_isatty>
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	d102      	bne.n	8005a0a <_isatty_r+0x1a>
 8005a04:	682b      	ldr	r3, [r5, #0]
 8005a06:	b103      	cbz	r3, 8005a0a <_isatty_r+0x1a>
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	bd38      	pop	{r3, r4, r5, pc}
 8005a0c:	20000928 	.word	0x20000928

08005a10 <_malloc_usable_size_r>:
 8005a10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a14:	1f18      	subs	r0, r3, #4
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	bfbc      	itt	lt
 8005a1a:	580b      	ldrlt	r3, [r1, r0]
 8005a1c:	18c0      	addlt	r0, r0, r3
 8005a1e:	4770      	bx	lr

08005a20 <_init>:
 8005a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a22:	bf00      	nop
 8005a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a26:	bc08      	pop	{r3}
 8005a28:	469e      	mov	lr, r3
 8005a2a:	4770      	bx	lr

08005a2c <_fini>:
 8005a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a2e:	bf00      	nop
 8005a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a32:	bc08      	pop	{r3}
 8005a34:	469e      	mov	lr, r3
 8005a36:	4770      	bx	lr
