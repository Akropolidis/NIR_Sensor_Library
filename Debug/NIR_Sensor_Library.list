
NIR_Sensor_Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a120  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  0800a2c0  0800a2c0  0001a2c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a854  0800a854  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a854  0800a854  0001a854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a85c  0800a85c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a85c  0800a85c  0001a85c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a860  0800a860  0001a860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800a864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  200001f4  0800aa58  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000864  0800aa58  00020864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016511  00000000  00000000  00020267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a96  00000000  00000000  00036778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d8  00000000  00000000  0003a210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fee  00000000  00000000  0003b6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c544  00000000  00000000  0003c6d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019631  00000000  00000000  00058c1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095871  00000000  00000000  0007224b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000064ec  00000000  00000000  00107abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0010dfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a2a8 	.word	0x0800a2a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800a2a8 	.word	0x0800a2a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08c      	sub	sp, #48	; 0x30
 8000eb8:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

	/* USER CODE END BlueNRG_MS_Init_PreTreatment */

	/* Initialize the peripherals and the BLE Stack */
	uint8_t SERVER_BDADDR[] = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8000eba:	4a52      	ldr	r2, [pc, #328]	; (8001004 <MX_BlueNRG_MS_Init+0x150>)
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ec4:	6018      	str	r0, [r3, #0]
 8000ec6:	3304      	adds	r3, #4
 8000ec8:	8019      	strh	r1, [r3, #0]

	uint8_t  hwVersion;
	uint16_t fwVersion;
	int ret;

	User_Init();
 8000eca:	f000 f8c2 	bl	8001052 <User_Init>

	/* Get the User Button initial state */
	user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f002 ffa8 	bl	8003e24 <BSP_PB_GetState>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	4b4b      	ldr	r3, [pc, #300]	; (8001008 <MX_BlueNRG_MS_Init+0x154>)
 8000eda:	701a      	strb	r2, [r3, #0]

	hci_init(user_notify, NULL);
 8000edc:	2100      	movs	r1, #0
 8000ede:	484b      	ldr	r0, [pc, #300]	; (800100c <MX_BlueNRG_MS_Init+0x158>)
 8000ee0:	f005 ff94 	bl	8006e0c <hci_init>

	/* get the BlueNRG HW and FW versions */
	getBlueNRGVersion(&hwVersion, &fwVersion);
 8000ee4:	1cba      	adds	r2, r7, #2
 8000ee6:	1d7b      	adds	r3, r7, #5
 8000ee8:	4611      	mov	r1, r2
 8000eea:	4618      	mov	r0, r3
 8000eec:	f005 fe03 	bl	8006af6 <getBlueNRGVersion>
	* Reset BlueNRG again otherwise we won't
	* be able to change its MAC address.
	* aci_hal_write_config_data() must be the first
	* command after reset otherwise it will fail.
	*/
	hci_reset();
 8000ef0:	f005 fe45 	bl	8006b7e <hci_reset>

	HAL_Delay(100);
 8000ef4:	2064      	movs	r0, #100	; 0x64
 8000ef6:	f003 f93b 	bl	8004170 <HAL_Delay>

	printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 8000efa:	797b      	ldrb	r3, [r7, #5]
 8000efc:	4619      	mov	r1, r3
 8000efe:	887b      	ldrh	r3, [r7, #2]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4843      	ldr	r0, [pc, #268]	; (8001010 <MX_BlueNRG_MS_Init+0x15c>)
 8000f04:	f007 f876 	bl	8007ff4 <iprintf>

	if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8000f08:	797b      	ldrb	r3, [r7, #5]
 8000f0a:	2b30      	cmp	r3, #48	; 0x30
 8000f0c:	d902      	bls.n	8000f14 <MX_BlueNRG_MS_Init+0x60>
		bnrg_expansion_board = IDB05A1;
 8000f0e:	4b41      	ldr	r3, [pc, #260]	; (8001014 <MX_BlueNRG_MS_Init+0x160>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]
	}

	BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	f107 0214 	add.w	r2, r7, #20
 8000f1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f20:	6018      	str	r0, [r3, #0]
 8000f22:	3304      	adds	r3, #4
 8000f24:	8019      	strh	r1, [r3, #0]

	ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	2106      	movs	r1, #6
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f005 fd4b 	bl	80069ca <aci_hal_write_config_data>
 8000f34:	4603      	mov	r3, r0
 8000f36:	61fb      	str	r3, [r7, #28]
								  CONFIG_DATA_PUBADDR_LEN,
								  bdaddr);
	if (ret) {
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <MX_BlueNRG_MS_Init+0x92>
		printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 8000f3e:	69f9      	ldr	r1, [r7, #28]
 8000f40:	4835      	ldr	r0, [pc, #212]	; (8001018 <MX_BlueNRG_MS_Init+0x164>)
 8000f42:	f007 f857 	bl	8007ff4 <iprintf>
	}

	ret = aci_gatt_init();
 8000f46:	f005 faf4 	bl	8006532 <aci_gatt_init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	61fb      	str	r3, [r7, #28]
	if (ret) {
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d002      	beq.n	8000f5a <MX_BlueNRG_MS_Init+0xa6>
		printf("GATT_Init failed.\n");
 8000f54:	4831      	ldr	r0, [pc, #196]	; (800101c <MX_BlueNRG_MS_Init+0x168>)
 8000f56:	f007 f8bb 	bl	80080d0 <puts>
	}

	if (bnrg_expansion_board == IDB05A1) {
 8000f5a:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <MX_BlueNRG_MS_Init+0x160>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d10f      	bne.n	8000f82 <MX_BlueNRG_MS_Init+0xce>
		ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000f62:	f107 020a 	add.w	r2, r7, #10
 8000f66:	1dbb      	adds	r3, r7, #6
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	4613      	mov	r3, r2
 8000f72:	2207      	movs	r2, #7
 8000f74:	2100      	movs	r1, #0
 8000f76:	2001      	movs	r0, #1
 8000f78:	f005 f900 	bl	800617c <aci_gap_init_IDB05A1>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	61fb      	str	r3, [r7, #28]
 8000f80:	e009      	b.n	8000f96 <MX_BlueNRG_MS_Init+0xe2>
	}
	else {
		ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8000f82:	1dbb      	adds	r3, r7, #6
 8000f84:	f107 0208 	add.w	r2, r7, #8
 8000f88:	f107 010a 	add.w	r1, r7, #10
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f005 f945 	bl	800621c <aci_gap_init_IDB04A1>
 8000f92:	4603      	mov	r3, r0
 8000f94:	61fb      	str	r3, [r7, #28]
	}

	if (ret != BLE_STATUS_SUCCESS) {
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <MX_BlueNRG_MS_Init+0xee>
		printf("GAP_Init failed.\n");
 8000f9c:	4820      	ldr	r0, [pc, #128]	; (8001020 <MX_BlueNRG_MS_Init+0x16c>)
 8000f9e:	f007 f897 	bl	80080d0 <puts>
	}

	ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	9303      	str	r3, [sp, #12]
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <MX_BlueNRG_MS_Init+0x170>)
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	2300      	movs	r3, #0
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	2310      	movs	r3, #16
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f005 fa63 	bl	8006484 <aci_gap_set_auth_requirement>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	61fb      	str	r3, [r7, #28]
									 7,
									 16,
									 USE_FIXED_PIN_FOR_PAIRING,
									 123456,
									 BONDING);
	if (ret == BLE_STATUS_SUCCESS) {
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <MX_BlueNRG_MS_Init+0x11a>
		printf("BLE Stack Initialized.\n");
 8000fc8:	4817      	ldr	r0, [pc, #92]	; (8001028 <MX_BlueNRG_MS_Init+0x174>)
 8000fca:	f007 f881 	bl	80080d0 <puts>
	}

	printf("SERVER: BLE Stack Initialized\n");
 8000fce:	4817      	ldr	r0, [pc, #92]	; (800102c <MX_BlueNRG_MS_Init+0x178>)
 8000fd0:	f007 f87e 	bl	80080d0 <puts>
	ret = Add_Sample_Service();
 8000fd4:	f000 f8e0 	bl	8001198 <Add_Sample_Service>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	61fb      	str	r3, [r7, #28]

	if (ret == BLE_STATUS_SUCCESS){
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d103      	bne.n	8000fea <MX_BlueNRG_MS_Init+0x136>
		printf("Service added successfully.\n");
 8000fe2:	4813      	ldr	r0, [pc, #76]	; (8001030 <MX_BlueNRG_MS_Init+0x17c>)
 8000fe4:	f007 f874 	bl	80080d0 <puts>
 8000fe8:	e002      	b.n	8000ff0 <MX_BlueNRG_MS_Init+0x13c>
	} else {
		printf("Error while adding service.\n");
 8000fea:	4812      	ldr	r0, [pc, #72]	; (8001034 <MX_BlueNRG_MS_Init+0x180>)
 8000fec:	f007 f870 	bl	80080d0 <puts>
	}

	/* Set output power level */
	ret = aci_hal_set_tx_power_level(1,4);
 8000ff0:	2104      	movs	r1, #4
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f005 fd4e 	bl	8006a94 <aci_hal_set_tx_power_level>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	61fb      	str	r3, [r7, #28]

	/* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

	/* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 8000ffc:	bf00      	nop
 8000ffe:	3720      	adds	r7, #32
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	0800a38c 	.word	0x0800a38c
 8001008:	20000000 	.word	0x20000000
 800100c:	080014d1 	.word	0x080014d1
 8001010:	0800a2c0 	.word	0x0800a2c0
 8001014:	20000210 	.word	0x20000210
 8001018:	0800a2d4 	.word	0x0800a2d4
 800101c:	0800a2f4 	.word	0x0800a2f4
 8001020:	0800a308 	.word	0x0800a308
 8001024:	0001e240 	.word	0x0001e240
 8001028:	0800a31c 	.word	0x0800a31c
 800102c:	0800a334 	.word	0x0800a334
 8001030:	0800a354 	.word	0x0800a354
 8001034:	0800a370 	.word	0x0800a370

08001038 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(float channel_data[64])
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process(channel_data);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f000 f815 	bl	8001070 <User_Process>
  hci_user_evt_proc();
 8001046:	f006 f85b 	bl	8007100 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8001056:	2101      	movs	r1, #1
 8001058:	2000      	movs	r0, #0
 800105a:	f002 fe8f 	bl	8003d7c <BSP_PB_Init>
  BSP_LED_Init(LED2);
 800105e:	2000      	movs	r0, #0
 8001060:	f002 fe22 	bl	8003ca8 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 8001064:	2000      	movs	r0, #0
 8001066:	f002 ff3f 	bl	8003ee8 <BSP_COM_Init>
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(float channel_data[64])
{
 8001070:	b580      	push	{r7, lr}
 8001072:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001076:	af00      	add	r7, sp, #0
 8001078:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800107c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001080:	6018      	str	r0, [r3, #0]
  if (set_connectable)
 8001082:	4b39      	ldr	r3, [pc, #228]	; (8001168 <User_Process+0xf8>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	b2db      	uxtb	r3, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	d00b      	beq.n	80010a4 <User_Process+0x34>
  {
    /* Establish connection with remote device */
    Make_Connection();
 800108c:	f000 f8f6 	bl	800127c <Make_Connection>
    set_connectable = FALSE;
 8001090:	4b35      	ldr	r3, [pc, #212]	; (8001168 <User_Process+0xf8>)
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
    user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8001096:	2000      	movs	r0, #0
 8001098:	f002 fec4 	bl	8003e24 <BSP_PB_GetState>
 800109c:	4603      	mov	r3, r0
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	4b32      	ldr	r3, [pc, #200]	; (800116c <User_Process+0xfc>)
 80010a2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if the User Button has been pushed */
    /* Debouncing */
    HAL_Delay(50);
 80010a4:	2032      	movs	r0, #50	; 0x32
 80010a6:	f003 f863 	bl	8004170 <HAL_Delay>

    /* Wait until the User Button is released */
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);
 80010aa:	bf00      	nop
 80010ac:	2000      	movs	r0, #0
 80010ae:	f002 feb9 	bl	8003e24 <BSP_PB_GetState>
 80010b2:	4602      	mov	r2, r0
 80010b4:	4b2d      	ldr	r3, [pc, #180]	; (800116c <User_Process+0xfc>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	bf0c      	ite	eq
 80010be:	2301      	moveq	r3, #1
 80010c0:	2300      	movne	r3, #0
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d0f1      	beq.n	80010ac <User_Process+0x3c>

    /* Debouncing */
    HAL_Delay(50);
 80010c8:	2032      	movs	r0, #50	; 0x32
 80010ca:	f003 f851 	bl	8004170 <HAL_Delay>

    if (connected)
 80010ce:	4b28      	ldr	r3, [pc, #160]	; (8001170 <User_Process+0x100>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d043      	beq.n	800115e <User_Process+0xee>
    {
    	/* Handshake */
    	uint8_t start[1] = {'F'};
 80010d6:	2346      	movs	r3, #70	; 0x46
 80010d8:	f887 3200 	strb.w	r3, [r7, #512]	; 0x200
    	uint8_t end[1] = {'L'};
 80010dc:	234c      	movs	r3, #76	; 0x4c
 80010de:	f887 31fc 	strb.w	r3, [r7, #508]	; 0x1fc
    	uint8_t ble_buf[500];
		uint8_t ble_buf_len = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203

		sendData(start, sizeof(start));
 80010e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010ec:	2101      	movs	r1, #1
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 f918 	bl	8001324 <sendData>

    	for (int i = 0; i < 64; i++){
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80010fa:	e026      	b.n	800114a <User_Process+0xda>
    		ble_buf_len = sprintf(ble_buf, "%f", channel_data[i]);
 80010fc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001106:	f5a2 7201 	sub.w	r2, r2, #516	; 0x204
 800110a:	6812      	ldr	r2, [r2, #0]
 800110c:	4413      	add	r3, r2
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff fa21 	bl	8000558 <__aeabi_f2d>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	f107 0008 	add.w	r0, r7, #8
 800111e:	4915      	ldr	r1, [pc, #84]	; (8001174 <User_Process+0x104>)
 8001120:	f006 ffde 	bl	80080e0 <siprintf>
 8001124:	4603      	mov	r3, r0
 8001126:	f887 3203 	strb.w	r3, [r7, #515]	; 0x203
    		sendData(ble_buf, ble_buf_len);
 800112a:	f897 2203 	ldrb.w	r2, [r7, #515]	; 0x203
 800112e:	f107 0308 	add.w	r3, r7, #8
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f000 f8f5 	bl	8001324 <sendData>
    		HAL_Delay(50);
 800113a:	2032      	movs	r0, #50	; 0x32
 800113c:	f003 f818 	bl	8004170 <HAL_Delay>
    	for (int i = 0; i < 64; i++){
 8001140:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8001144:	3301      	adds	r3, #1
 8001146:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 800114a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800114e:	2b3f      	cmp	r3, #63	; 0x3f
 8001150:	ddd4      	ble.n	80010fc <User_Process+0x8c>
//		for (int i = 0; i < 64; i++){
//			ble_buf_len += sprintf (ble_buf + ble_buf_len, "%d,", channel_data[i]);
//		}
//		sendData(ble_buf, ble_buf_len);
//
    	sendData(end, sizeof(end));
 8001152:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8001156:	2101      	movs	r1, #1
 8001158:	4618      	mov	r0, r3
 800115a:	f000 f8e3 	bl	8001324 <sendData>
      //BSP_LED_Toggle(LED2);  /* Toggle the LED2 locally. */
                               /* If uncommented be sure the BSP_LED_Init(LED2)
                                * is called in main().
                                * E.g. it can be enabled for debugging. */
    }
}
 800115e:	bf00      	nop
 8001160:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000002 	.word	0x20000002
 800116c:	20000000 	.word	0x20000000
 8001170:	20000214 	.word	0x20000214
 8001174:	0800a394 	.word	0x0800a394

08001178 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <BSP_PB_Callback+0x1c>)
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	20000211 	.word	0x20000211

08001198 <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 8001198:	b590      	push	{r4, r7, lr}
 800119a:	b095      	sub	sp, #84	; 0x54
 800119c:	af06      	add	r7, sp, #24
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */

  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 800119e:	4b31      	ldr	r3, [pc, #196]	; (8001264 <Add_Sample_Service+0xcc>)
 80011a0:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80011a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 80011aa:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <Add_Sample_Service+0xd0>)
 80011ac:	f107 0414 	add.w	r4, r7, #20
 80011b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 80011b6:	4b2d      	ldr	r3, [pc, #180]	; (800126c <Add_Sample_Service+0xd4>)
 80011b8:	1d3c      	adds	r4, r7, #4
 80011ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 80011c0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80011c4:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <Add_Sample_Service+0xd8>)
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2307      	movs	r3, #7
 80011ca:	2201      	movs	r2, #1
 80011cc:	2002      	movs	r0, #2
 80011ce:	f005 f9d3 	bl	8006578 <aci_gatt_add_serv>
 80011d2:	4603      	mov	r3, r0
 80011d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 80011d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d136      	bne.n	800124e <Add_Sample_Service+0xb6>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 80011e0:	4b23      	ldr	r3, [pc, #140]	; (8001270 <Add_Sample_Service+0xd8>)
 80011e2:	8818      	ldrh	r0, [r3, #0]
 80011e4:	f107 0214 	add.w	r2, r7, #20
 80011e8:	4b22      	ldr	r3, [pc, #136]	; (8001274 <Add_Sample_Service+0xdc>)
 80011ea:	9305      	str	r3, [sp, #20]
 80011ec:	2301      	movs	r3, #1
 80011ee:	9304      	str	r3, [sp, #16]
 80011f0:	2310      	movs	r3, #16
 80011f2:	9303      	str	r3, [sp, #12]
 80011f4:	2300      	movs	r3, #0
 80011f6:	9302      	str	r3, [sp, #8]
 80011f8:	2300      	movs	r3, #0
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	2310      	movs	r3, #16
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2314      	movs	r3, #20
 8001202:	2102      	movs	r1, #2
 8001204:	f005 fa41 	bl	800668a <aci_gatt_add_char>
 8001208:	4603      	mov	r3, r0
 800120a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800120e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001212:	2b00      	cmp	r3, #0
 8001214:	d11d      	bne.n	8001252 <Add_Sample_Service+0xba>

  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <Add_Sample_Service+0xd8>)
 8001218:	8818      	ldrh	r0, [r3, #0]
 800121a:	1d3a      	adds	r2, r7, #4
 800121c:	4b16      	ldr	r3, [pc, #88]	; (8001278 <Add_Sample_Service+0xe0>)
 800121e:	9305      	str	r3, [sp, #20]
 8001220:	2301      	movs	r3, #1
 8001222:	9304      	str	r3, [sp, #16]
 8001224:	2310      	movs	r3, #16
 8001226:	9303      	str	r3, [sp, #12]
 8001228:	2301      	movs	r3, #1
 800122a:	9302      	str	r3, [sp, #8]
 800122c:	2300      	movs	r3, #0
 800122e:	9301      	str	r3, [sp, #4]
 8001230:	230c      	movs	r3, #12
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2314      	movs	r3, #20
 8001236:	2102      	movs	r1, #2
 8001238:	f005 fa27 	bl	800668a <aci_gatt_add_char>
 800123c:	4603      	mov	r3, r0
 800123e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                           16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001242:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001246:	2b00      	cmp	r3, #0
 8001248:	d105      	bne.n	8001256 <Add_Sample_Service+0xbe>

  PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS;
 800124a:	2300      	movs	r3, #0
 800124c:	e005      	b.n	800125a <Add_Sample_Service+0xc2>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 800124e:	bf00      	nop
 8001250:	e002      	b.n	8001258 <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001252:	bf00      	nop
 8001254:	e000      	b.n	8001258 <Add_Sample_Service+0xc0>
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8001256:	bf00      	nop

fail:
  PRINTF("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
 8001258:	2347      	movs	r3, #71	; 0x47
}
 800125a:	4618      	mov	r0, r3
 800125c:	373c      	adds	r7, #60	; 0x3c
 800125e:	46bd      	mov	sp, r7
 8001260:	bd90      	pop	{r4, r7, pc}
 8001262:	bf00      	nop
 8001264:	0800a398 	.word	0x0800a398
 8001268:	0800a3a8 	.word	0x0800a3a8
 800126c:	0800a3b8 	.word	0x0800a3b8
 8001270:	20000224 	.word	0x20000224
 8001274:	20000226 	.word	0x20000226
 8001278:	20000228 	.word	0x20000228

0800127c <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None
 * @retval None
 */
void Make_Connection(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08c      	sub	sp, #48	; 0x30
 8001280:	af08      	add	r7, sp, #32
	tBleStatus ret;

	const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'A','l','l','e','r','S','p','e','c','X'};
 8001282:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <Make_Connection+0x58>)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	ca07      	ldmia	r2, {r0, r1, r2}
 8001288:	c303      	stmia	r3!, {r0, r1}
 800128a:	801a      	strh	r2, [r3, #0]
 800128c:	3302      	adds	r3, #2
 800128e:	0c12      	lsrs	r2, r2, #16
 8001290:	701a      	strb	r2, [r3, #0]

	/* disable scan response */
	hci_le_set_scan_resp_data(0,NULL);
 8001292:	2100      	movs	r1, #0
 8001294:	2000      	movs	r0, #0
 8001296:	f005 fcde 	bl	8006c56 <hci_le_set_scan_resp_data>
	/*
	Advertising_Event_Type, Adv_Interval_Min, Adv_Interval_Max, Address_Type, Adv_Filter_Policy,
	Local_Name_Length, Local_Name, Service_Uuid_Length, Service_Uuid_List, Slave_Conn_Interval_Min,
	Slave_Conn_Interval_Max
	*/
	ret = aci_gap_set_discoverable(ADV_DATA_TYPE, ADV_INTERV_MIN, ADV_INTERV_MAX, PUBLIC_ADDR,
 800129a:	2300      	movs	r3, #0
 800129c:	9306      	str	r3, [sp, #24]
 800129e:	2300      	movs	r3, #0
 80012a0:	9305      	str	r3, [sp, #20]
 80012a2:	2300      	movs	r3, #0
 80012a4:	9304      	str	r3, [sp, #16]
 80012a6:	2300      	movs	r3, #0
 80012a8:	9303      	str	r3, [sp, #12]
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	9302      	str	r3, [sp, #8]
 80012ae:	230d      	movs	r3, #13
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	2300      	movs	r3, #0
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2300      	movs	r3, #0
 80012b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c0:	2000      	movs	r0, #0
 80012c2:	f004 fff5 	bl	80062b0 <aci_gap_set_discoverable>
 80012c6:	4603      	mov	r3, r0
 80012c8:	73fb      	strb	r3, [r7, #15]
							   NO_WHITE_LIST_USE, 13, local_name, 0, NULL, 0, 0);
	PRINTF("%d\n",ret);
}
 80012ca:	bf00      	nop
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	0800a3c8 	.word	0x0800a3c8

080012d8 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	70fb      	strb	r3, [r7, #3]
  BSP_LED_Toggle(LED2);
 80012e4:	2000      	movs	r0, #0
 80012e6:	f002 fcf1 	bl	8003ccc <BSP_LED_Toggle>

  for(int i = 0; i < Nb_bytes; i++) {
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	e009      	b.n	8001304 <receiveData+0x2c>
    printf("%c", data_buffer[i]);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f006 fe8d 	bl	8008018 <putchar>
  for(int i = 0; i < Nb_bytes; i++) {
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	3301      	adds	r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	429a      	cmp	r2, r3
 800130a:	dbf1      	blt.n	80012f0 <receiveData+0x18>
  }
  fflush(stdout);
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <receiveData+0x48>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	4618      	mov	r0, r3
 8001314:	f006 fd98 	bl	8007e48 <fflush>
}
 8001318:	bf00      	nop
 800131a:	3710      	adds	r7, #16
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000084 	.word	0x20000084

08001324 <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af02      	add	r7, sp, #8
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	70fb      	strb	r3, [r7, #3]
  if(BLE_Role == SERVER) {
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <sendData+0x4c>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d10b      	bne.n	8001350 <sendData+0x2c>
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);
 8001338:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <sendData+0x50>)
 800133a:	8818      	ldrh	r0, [r3, #0]
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <sendData+0x54>)
 800133e:	8819      	ldrh	r1, [r3, #0]
 8001340:	78fa      	ldrb	r2, [r7, #3]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	4613      	mov	r3, r2
 8001348:	2200      	movs	r2, #0
 800134a:	f005 fa69 	bl	8006820 <aci_gatt_update_char_value>
  }
  else {
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
  }
}
 800134e:	e00a      	b.n	8001366 <sendData+0x42>
    aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 8001350:	4b0a      	ldr	r3, [pc, #40]	; (800137c <sendData+0x58>)
 8001352:	881b      	ldrh	r3, [r3, #0]
 8001354:	b298      	uxth	r0, r3
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <sendData+0x5c>)
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	3301      	adds	r3, #1
 800135c:	b299      	uxth	r1, r3
 800135e:	78fa      	ldrb	r2, [r7, #3]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f005 faed 	bl	8006940 <aci_gatt_write_without_response>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000001 	.word	0x20000001
 8001374:	20000224 	.word	0x20000224
 8001378:	20000226 	.word	0x20000226
 800137c:	20000218 	.word	0x20000218
 8001380:	20000222 	.word	0x20000222

08001384 <Attribute_Modified_CB>:
 * @param  data_length : size of the modified attribute data
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	603a      	str	r2, [r7, #0]
 800138e:	80fb      	strh	r3, [r7, #6]
 8001390:	460b      	mov	r3, r1
 8001392:	717b      	strb	r3, [r7, #5]
  if(handle == RXCharHandle + 1){
 8001394:	88fa      	ldrh	r2, [r7, #6]
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <Attribute_Modified_CB+0x4c>)
 8001398:	881b      	ldrh	r3, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	429a      	cmp	r2, r3
 800139e:	d105      	bne.n	80013ac <Attribute_Modified_CB+0x28>
    receiveData(att_data, data_length);
 80013a0:	797b      	ldrb	r3, [r7, #5]
 80013a2:	4619      	mov	r1, r3
 80013a4:	6838      	ldr	r0, [r7, #0]
 80013a6:	f7ff ff97 	bl	80012d8 <receiveData>
  } else if (handle == TXCharHandle + 2) {
    if(att_data[0] == 0x01)
      notification_enabled = TRUE;
  }
}
 80013aa:	e00c      	b.n	80013c6 <Attribute_Modified_CB+0x42>
  } else if (handle == TXCharHandle + 2) {
 80013ac:	88fa      	ldrh	r2, [r7, #6]
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <Attribute_Modified_CB+0x50>)
 80013b0:	881b      	ldrh	r3, [r3, #0]
 80013b2:	3302      	adds	r3, #2
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d106      	bne.n	80013c6 <Attribute_Modified_CB+0x42>
    if(att_data[0] == 0x01)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d102      	bne.n	80013c6 <Attribute_Modified_CB+0x42>
      notification_enabled = TRUE;
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <Attribute_Modified_CB+0x54>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000228 	.word	0x20000228
 80013d4:	20000226 	.word	0x20000226
 80013d8:	2000021a 	.word	0x2000021a

080013dc <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <GAP_ConnectionComplete_CB+0x54>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 80013ee:	4a11      	ldr	r2, [pc, #68]	; (8001434 <GAP_ConnectionComplete_CB+0x58>)
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	8013      	strh	r3, [r2, #0]

  printf("Connected to device:");
 80013f4:	4810      	ldr	r0, [pc, #64]	; (8001438 <GAP_ConnectionComplete_CB+0x5c>)
 80013f6:	f006 fdfd 	bl	8007ff4 <iprintf>
  for(int i = 5; i > 0; i--){
 80013fa:	2305      	movs	r3, #5
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	e00a      	b.n	8001416 <GAP_ConnectionComplete_CB+0x3a>
    printf("%02X-", addr[i]);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	480c      	ldr	r0, [pc, #48]	; (800143c <GAP_ConnectionComplete_CB+0x60>)
 800140c:	f006 fdf2 	bl	8007ff4 <iprintf>
  for(int i = 5; i > 0; i--){
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3b01      	subs	r3, #1
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2b00      	cmp	r3, #0
 800141a:	dcf1      	bgt.n	8001400 <GAP_ConnectionComplete_CB+0x24>
  }
  printf("%02X\n", addr[0]);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	4807      	ldr	r0, [pc, #28]	; (8001440 <GAP_ConnectionComplete_CB+0x64>)
 8001424:	f006 fde6 	bl	8007ff4 <iprintf>
}
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000214 	.word	0x20000214
 8001434:	20000218 	.word	0x20000218
 8001438:	0800a3d4 	.word	0x0800a3d4
 800143c:	0800a3ec 	.word	0x0800a3ec
 8001440:	0800a3f4 	.word	0x0800a3f4

08001444 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device get disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  connected = FALSE;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <GAP_DisconnectionComplete_CB+0x38>)
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]

  printf("Disconnected\n");
 800144e:	480c      	ldr	r0, [pc, #48]	; (8001480 <GAP_DisconnectionComplete_CB+0x3c>)
 8001450:	f006 fe3e 	bl	80080d0 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <GAP_DisconnectionComplete_CB+0x40>)
 8001456:	2201      	movs	r2, #1
 8001458:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 800145a:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <GAP_DisconnectionComplete_CB+0x44>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
  start_read_tx_char_handle = FALSE;
 8001460:	4b0a      	ldr	r3, [pc, #40]	; (800148c <GAP_DisconnectionComplete_CB+0x48>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
  start_read_rx_char_handle = FALSE;
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <GAP_DisconnectionComplete_CB+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
  end_read_tx_char_handle = FALSE;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <GAP_DisconnectionComplete_CB+0x50>)
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
  end_read_rx_char_handle = FALSE;
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <GAP_DisconnectionComplete_CB+0x54>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000214 	.word	0x20000214
 8001480:	0800a3fc 	.word	0x0800a3fc
 8001484:	20000002 	.word	0x20000002
 8001488:	2000021a 	.word	0x2000021a
 800148c:	2000021b 	.word	0x2000021b
 8001490:	2000021c 	.word	0x2000021c
 8001494:	2000021d 	.word	0x2000021d
 8001498:	2000021e 	.word	0x2000021e

0800149c <GATT_Notification_CB>:
 * @param  attr_len    Length of attribute value in the notification
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	603a      	str	r2, [r7, #0]
 80014a6:	80fb      	strh	r3, [r7, #6]
 80014a8:	460b      	mov	r3, r1
 80014aa:	717b      	strb	r3, [r7, #5]
  if (attr_handle == tx_handle+1) {
 80014ac:	88fa      	ldrh	r2, [r7, #6]
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <GATT_Notification_CB+0x30>)
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	3301      	adds	r3, #1
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d104      	bne.n	80014c2 <GATT_Notification_CB+0x26>
    receiveData(attr_value, attr_len);
 80014b8:	797b      	ldrb	r3, [r7, #5]
 80014ba:	4619      	mov	r1, r3
 80014bc:	6838      	ldr	r0, [r7, #0]
 80014be:	f7ff ff0b 	bl	80012d8 <receiveData>
  }
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000220 	.word	0x20000220

080014d0 <user_notify>:
 *         parsed.
 * @param  pData  Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08c      	sub	sp, #48	; 0x30
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 80014dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014de:	3301      	adds	r3, #1
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(hci_pckt->type != HCI_EVENT_PKT)
 80014e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	f040 80e2 	bne.w	80016b0 <user_notify+0x1e0>
    return;

  switch(event_pckt->evt){
 80014ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2bff      	cmp	r3, #255	; 0xff
 80014f2:	d021      	beq.n	8001538 <user_notify+0x68>
 80014f4:	2bff      	cmp	r3, #255	; 0xff
 80014f6:	f300 80e0 	bgt.w	80016ba <user_notify+0x1ea>
 80014fa:	2b05      	cmp	r3, #5
 80014fc:	d002      	beq.n	8001504 <user_notify+0x34>
 80014fe:	2b3e      	cmp	r3, #62	; 0x3e
 8001500:	d003      	beq.n	800150a <user_notify+0x3a>
 8001502:	e0da      	b.n	80016ba <user_notify+0x1ea>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8001504:	f7ff ff9e 	bl	8001444 <GAP_DisconnectionComplete_CB>
    }
    break;
 8001508:	e0d7      	b.n	80016ba <user_notify+0x1ea>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 800150a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150c:	3302      	adds	r3, #2
 800150e:	613b      	str	r3, [r7, #16]

      switch(evt->subevent){
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b01      	cmp	r3, #1
 8001516:	f040 80cd 	bne.w	80016b4 <user_notify+0x1e4>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	3301      	adds	r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1d5a      	adds	r2, r3, #5
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800152a:	b29b      	uxth	r3, r3
 800152c:	4619      	mov	r1, r3
 800152e:	4610      	mov	r0, r2
 8001530:	f7ff ff54 	bl	80013dc <GAP_ConnectionComplete_CB>
        }
        break;
 8001534:	bf00      	nop
      }
    }
    break;
 8001536:	e0bd      	b.n	80016b4 <user_notify+0x1e4>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8001538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153a:	3302      	adds	r3, #2
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
      switch(blue_evt->ecode){
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	b29b      	uxth	r3, r3
 8001544:	f6a3 4301 	subw	r3, r3, #3073	; 0xc01
 8001548:	2b11      	cmp	r3, #17
 800154a:	f200 80b5 	bhi.w	80016b8 <user_notify+0x1e8>
 800154e:	a201      	add	r2, pc, #4	; (adr r2, 8001554 <user_notify+0x84>)
 8001550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001554:	0800159d 	.word	0x0800159d
 8001558:	080016b9 	.word	0x080016b9
 800155c:	080016b9 	.word	0x080016b9
 8001560:	080016b9 	.word	0x080016b9
 8001564:	080016b9 	.word	0x080016b9
 8001568:	080016b9 	.word	0x080016b9
 800156c:	080016b9 	.word	0x080016b9
 8001570:	080016b9 	.word	0x080016b9
 8001574:	080016b9 	.word	0x080016b9
 8001578:	080016b9 	.word	0x080016b9
 800157c:	080016b9 	.word	0x080016b9
 8001580:	080016b9 	.word	0x080016b9
 8001584:	080016b9 	.word	0x080016b9
 8001588:	080016b9 	.word	0x080016b9
 800158c:	080015dd 	.word	0x080015dd
 8001590:	08001669 	.word	0x08001669
 8001594:	080016b9 	.word	0x080016b9
 8001598:	080015ff 	.word	0x080015ff

      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 800159c:	4b48      	ldr	r3, [pc, #288]	; (80016c0 <user_notify+0x1f0>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d10d      	bne.n	80015c0 <user_notify+0xf0>
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	3302      	adds	r3, #2
 80015a8:	617b      	str	r3, [r7, #20]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	885b      	ldrh	r3, [r3, #2]
 80015ae:	b298      	uxth	r0, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	7919      	ldrb	r1, [r3, #4]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	3307      	adds	r3, #7
 80015b8:	461a      	mov	r2, r3
 80015ba:	f7ff fee3 	bl	8001384 <Attribute_Modified_CB>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }

        }
        break;
 80015be:	e076      	b.n	80016ae <user_notify+0x1de>
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	3302      	adds	r3, #2
 80015c4:	61bb      	str	r3, [r7, #24]
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	885b      	ldrh	r3, [r3, #2]
 80015ca:	b298      	uxth	r0, r3
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	7919      	ldrb	r1, [r3, #4]
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	3305      	adds	r3, #5
 80015d4:	461a      	mov	r2, r3
 80015d6:	f7ff fed5 	bl	8001384 <Attribute_Modified_CB>
        break;
 80015da:	e068      	b.n	80016ae <user_notify+0x1de>
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	3302      	adds	r3, #2
 80015e0:	61fb      	str	r3, [r7, #28]
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80015e8:	b298      	uxth	r0, r3
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	789b      	ldrb	r3, [r3, #2]
 80015ee:	3b02      	subs	r3, #2
 80015f0:	b2d9      	uxtb	r1, r3
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3305      	adds	r3, #5
 80015f6:	461a      	mov	r2, r3
 80015f8:	f7ff ff50 	bl	800149c <GATT_Notification_CB>
        }
        break;
 80015fc:	e057      	b.n	80016ae <user_notify+0x1de>
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 80015fe:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <user_notify+0x1f4>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d150      	bne.n	80016a8 <user_notify+0x1d8>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");

          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	3302      	adds	r3, #2
 800160a:	623b      	str	r3, [r7, #32]

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 800160c:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <user_notify+0x1f8>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d011      	beq.n	800163a <user_notify+0x16a>
 8001616:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <user_notify+0x1fc>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10c      	bne.n	800163a <user_notify+0x16a>
          {
            tx_handle = resp->attr_handle;
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8001626:	b29a      	uxth	r2, r3
 8001628:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <user_notify+0x200>)
 800162a:	801a      	strh	r2, [r3, #0]
            printf("TX Char Handle %04X\n", tx_handle);
 800162c:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <user_notify+0x200>)
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	4828      	ldr	r0, [pc, #160]	; (80016d4 <user_notify+0x204>)
 8001634:	f006 fcde 	bl	8007ff4 <iprintf>
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
          }
        }
        break;
 8001638:	e036      	b.n	80016a8 <user_notify+0x1d8>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 800163a:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <user_notify+0x208>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	d031      	beq.n	80016a8 <user_notify+0x1d8>
 8001644:	4b25      	ldr	r3, [pc, #148]	; (80016dc <user_notify+0x20c>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d12c      	bne.n	80016a8 <user_notify+0x1d8>
            rx_handle = resp->attr_handle;
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8001654:	b29a      	uxth	r2, r3
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <user_notify+0x210>)
 8001658:	801a      	strh	r2, [r3, #0]
            printf("RX Char Handle %04X\n", rx_handle);
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <user_notify+0x210>)
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	4619      	mov	r1, r3
 8001660:	4820      	ldr	r0, [pc, #128]	; (80016e4 <user_notify+0x214>)
 8001662:	f006 fcc7 	bl	8007ff4 <iprintf>
        break;
 8001666:	e01f      	b.n	80016a8 <user_notify+0x1d8>

      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 8001668:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <user_notify+0x1f4>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d11d      	bne.n	80016ac <user_notify+0x1dc>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;

          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <user_notify+0x1f8>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d008      	beq.n	800168c <user_notify+0x1bc>
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <user_notify+0x1fc>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b00      	cmp	r3, #0
 8001682:	d103      	bne.n	800168c <user_notify+0x1bc>
          {
            end_read_tx_char_handle = TRUE;
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <user_notify+0x1fc>)
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
          }
        }
        break;
 800168a:	e00f      	b.n	80016ac <user_notify+0x1dc>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 800168c:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <user_notify+0x208>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00a      	beq.n	80016ac <user_notify+0x1dc>
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <user_notify+0x20c>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d105      	bne.n	80016ac <user_notify+0x1dc>
            end_read_rx_char_handle = TRUE;
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <user_notify+0x20c>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	701a      	strb	r2, [r3, #0]
        break;
 80016a6:	e001      	b.n	80016ac <user_notify+0x1dc>
        break;
 80016a8:	bf00      	nop
 80016aa:	e005      	b.n	80016b8 <user_notify+0x1e8>
        break;
 80016ac:	bf00      	nop
      }
    }
    break;
 80016ae:	e003      	b.n	80016b8 <user_notify+0x1e8>
    return;
 80016b0:	bf00      	nop
 80016b2:	e002      	b.n	80016ba <user_notify+0x1ea>
    break;
 80016b4:	bf00      	nop
 80016b6:	e000      	b.n	80016ba <user_notify+0x1ea>
    break;
 80016b8:	bf00      	nop
  }
}
 80016ba:	3730      	adds	r7, #48	; 0x30
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000210 	.word	0x20000210
 80016c4:	20000001 	.word	0x20000001
 80016c8:	2000021b 	.word	0x2000021b
 80016cc:	2000021d 	.word	0x2000021d
 80016d0:	20000220 	.word	0x20000220
 80016d4:	0800a40c 	.word	0x0800a40c
 80016d8:	2000021c 	.word	0x2000021c
 80016dc:	2000021e 	.word	0x2000021e
 80016e0:	20000222 	.word	0x20000222
 80016e4:	0800a424 	.word	0x0800a424

080016e8 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b088      	sub	sp, #32
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <HCI_TL_SPI_Init+0x88>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	4a1d      	ldr	r2, [pc, #116]	; (8001770 <HCI_TL_SPI_Init+0x88>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <HCI_TL_SPI_Init+0x88>)
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	60bb      	str	r3, [r7, #8]
 800170a:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 800170c:	2301      	movs	r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001710:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001714:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800171a:	f107 030c 	add.w	r3, r7, #12
 800171e:	4619      	mov	r1, r3
 8001720:	4814      	ldr	r0, [pc, #80]	; (8001774 <HCI_TL_SPI_Init+0x8c>)
 8001722:	f002 fead 	bl	8004480 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8001726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800172a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	2301      	movs	r3, #1
 800172e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8001738:	f107 030c 	add.w	r3, r7, #12
 800173c:	4619      	mov	r1, r3
 800173e:	480d      	ldr	r0, [pc, #52]	; (8001774 <HCI_TL_SPI_Init+0x8c>)
 8001740:	f002 fe9e 	bl	8004480 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8001744:	2302      	movs	r3, #2
 8001746:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001748:	2301      	movs	r3, #1
 800174a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	4619      	mov	r1, r3
 800175a:	4806      	ldr	r0, [pc, #24]	; (8001774 <HCI_TL_SPI_Init+0x8c>)
 800175c:	f002 fe90 	bl	8004480 <HAL_GPIO_Init>

  return BSP_SPI1_Init();
 8001760:	f002 f8a4 	bl	80038ac <BSP_SPI1_Init>
 8001764:	4603      	mov	r3, r0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3720      	adds	r7, #32
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800
 8001774:	40020000 	.word	0x40020000

08001778 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 800177c:	2101      	movs	r1, #1
 800177e:	4807      	ldr	r0, [pc, #28]	; (800179c <HCI_TL_SPI_DeInit+0x24>)
 8001780:	f003 f802 	bl	8004788 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001784:	2102      	movs	r1, #2
 8001786:	4805      	ldr	r0, [pc, #20]	; (800179c <HCI_TL_SPI_DeInit+0x24>)
 8001788:	f002 fffe 	bl	8004788 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800178c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <HCI_TL_SPI_DeInit+0x24>)
 8001792:	f002 fff9 	bl	8004788 <HAL_GPIO_DeInit>
  return 0;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40020000 	.word	0x40020000

080017a0 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80017a4:	2201      	movs	r2, #1
 80017a6:	2102      	movs	r1, #2
 80017a8:	480b      	ldr	r0, [pc, #44]	; (80017d8 <HCI_TL_SPI_Reset+0x38>)
 80017aa:	f003 f8e9 	bl	8004980 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b4:	4808      	ldr	r0, [pc, #32]	; (80017d8 <HCI_TL_SPI_Reset+0x38>)
 80017b6:	f003 f8e3 	bl	8004980 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80017ba:	2005      	movs	r0, #5
 80017bc:	f002 fcd8 	bl	8004170 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80017c0:	2201      	movs	r2, #1
 80017c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017c6:	4804      	ldr	r0, [pc, #16]	; (80017d8 <HCI_TL_SPI_Reset+0x38>)
 80017c8:	f003 f8da 	bl	8004980 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80017cc:	2005      	movs	r0, #5
 80017ce:	f002 fccf 	bl	8004170 <HAL_Delay>
  return 0;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40020000 	.word	0x40020000

080017dc <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 80017ec:	23ff      	movs	r3, #255	; 0xff
 80017ee:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80017f0:	4a25      	ldr	r2, [pc, #148]	; (8001888 <HCI_TL_SPI_Receive+0xac>)
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017fa:	6018      	str	r0, [r3, #0]
 80017fc:	3304      	adds	r3, #4
 80017fe:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001800:	2200      	movs	r2, #0
 8001802:	2102      	movs	r1, #2
 8001804:	4821      	ldr	r0, [pc, #132]	; (800188c <HCI_TL_SPI_Receive+0xb0>)
 8001806:	f003 f8bb 	bl	8004980 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800180a:	f107 010c 	add.w	r1, r7, #12
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	2205      	movs	r2, #5
 8001814:	4618      	mov	r0, r3
 8001816:	f002 f879 	bl	800390c <BSP_SPI1_SendRecv>

  if(header_slave[0] == 0x02)
 800181a:	7b3b      	ldrb	r3, [r7, #12]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d129      	bne.n	8001874 <HCI_TL_SPI_Receive+0x98>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8001820:	7c3b      	ldrb	r3, [r7, #16]
 8001822:	021b      	lsls	r3, r3, #8
 8001824:	b21a      	sxth	r2, r3
 8001826:	7bfb      	ldrb	r3, [r7, #15]
 8001828:	b21b      	sxth	r3, r3
 800182a:	4313      	orrs	r3, r2
 800182c:	b21b      	sxth	r3, r3
 800182e:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 8001830:	8bfb      	ldrh	r3, [r7, #30]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d01e      	beq.n	8001874 <HCI_TL_SPI_Receive+0x98>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 8001836:	8bfa      	ldrh	r2, [r7, #30]
 8001838:	887b      	ldrh	r3, [r7, #2]
 800183a:	429a      	cmp	r2, r3
 800183c:	d901      	bls.n	8001842 <HCI_TL_SPI_Receive+0x66>
        byte_count = size;
 800183e:	887b      	ldrh	r3, [r7, #2]
 8001840:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8001842:	2300      	movs	r3, #0
 8001844:	777b      	strb	r3, [r7, #29]
 8001846:	e010      	b.n	800186a <HCI_TL_SPI_Receive+0x8e>
      {
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8001848:	f107 011b 	add.w	r1, r7, #27
 800184c:	f107 031c 	add.w	r3, r7, #28
 8001850:	2201      	movs	r2, #1
 8001852:	4618      	mov	r0, r3
 8001854:	f002 f85a 	bl	800390c <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 8001858:	7f7b      	ldrb	r3, [r7, #29]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	7efa      	ldrb	r2, [r7, #27]
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8001864:	7f7b      	ldrb	r3, [r7, #29]
 8001866:	3301      	adds	r3, #1
 8001868:	777b      	strb	r3, [r7, #29]
 800186a:	7f7b      	ldrb	r3, [r7, #29]
 800186c:	b29b      	uxth	r3, r3
 800186e:	8bfa      	ldrh	r2, [r7, #30]
 8001870:	429a      	cmp	r2, r3
 8001872:	d8e9      	bhi.n	8001848 <HCI_TL_SPI_Receive+0x6c>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001874:	2201      	movs	r2, #1
 8001876:	2102      	movs	r1, #2
 8001878:	4804      	ldr	r0, [pc, #16]	; (800188c <HCI_TL_SPI_Receive+0xb0>)
 800187a:	f003 f881 	bl	8004980 <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 800187e:	7f7b      	ldrb	r3, [r7, #29]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3720      	adds	r7, #32
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	0800a43c 	.word	0x0800a43c
 800188c:	40020000 	.word	0x40020000

08001890 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800189c:	4a23      	ldr	r2, [pc, #140]	; (800192c <HCI_TL_SPI_Send+0x9c>)
 800189e:	f107 0310 	add.w	r3, r7, #16
 80018a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018a6:	6018      	str	r0, [r3, #0]
 80018a8:	3304      	adds	r3, #4
 80018aa:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80018ac:	f002 fc54 	bl	8004158 <HAL_GetTick>
 80018b0:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2102      	movs	r1, #2
 80018ba:	481d      	ldr	r0, [pc, #116]	; (8001930 <HCI_TL_SPI_Send+0xa0>)
 80018bc:	f003 f860 	bl	8004980 <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80018c0:	f107 0108 	add.w	r1, r7, #8
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	2205      	movs	r2, #5
 80018ca:	4618      	mov	r0, r3
 80018cc:	f002 f81e 	bl	800390c <BSP_SPI1_SendRecv>

    if(header_slave[0] == 0x02)
 80018d0:	7a3b      	ldrb	r3, [r7, #8]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d10f      	bne.n	80018f6 <HCI_TL_SPI_Send+0x66>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 80018d6:	7a7b      	ldrb	r3, [r7, #9]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	887a      	ldrh	r2, [r7, #2]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d806      	bhi.n	80018ee <HCI_TL_SPI_Send+0x5e>
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80018e0:	887b      	ldrh	r3, [r7, #2]
 80018e2:	461a      	mov	r2, r3
 80018e4:	4913      	ldr	r1, [pc, #76]	; (8001934 <HCI_TL_SPI_Send+0xa4>)
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f002 f810 	bl	800390c <BSP_SPI1_SendRecv>
 80018ec:	e006      	b.n	80018fc <HCI_TL_SPI_Send+0x6c>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80018ee:	f06f 0301 	mvn.w	r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
 80018f4:	e002      	b.n	80018fc <HCI_TL_SPI_Send+0x6c>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295
 80018fa:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	2102      	movs	r1, #2
 8001900:	480b      	ldr	r0, [pc, #44]	; (8001930 <HCI_TL_SPI_Send+0xa0>)
 8001902:	f003 f83d 	bl	8004980 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8001906:	f002 fc27 	bl	8004158 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	69bb      	ldr	r3, [r7, #24]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b0f      	cmp	r3, #15
 8001912:	d903      	bls.n	800191c <HCI_TL_SPI_Send+0x8c>
    {
      result = -3;
 8001914:	f06f 0302 	mvn.w	r3, #2
 8001918:	61fb      	str	r3, [r7, #28]
      break;
 800191a:	e002      	b.n	8001922 <HCI_TL_SPI_Send+0x92>
    }
  } while(result < 0);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	2b00      	cmp	r3, #0
 8001920:	dbc7      	blt.n	80018b2 <HCI_TL_SPI_Send+0x22>

  return result;
 8001922:	69fb      	ldr	r3, [r7, #28]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3720      	adds	r7, #32
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	0800a444 	.word	0x0800a444
 8001930:	40020000 	.word	0x40020000
 8001934:	20000234 	.word	0x20000234

08001938 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800193c:	2101      	movs	r1, #1
 800193e:	4805      	ldr	r0, [pc, #20]	; (8001954 <IsDataAvailable+0x1c>)
 8001940:	f003 f806 	bl	8004950 <HAL_GPIO_ReadPin>
 8001944:	4603      	mov	r3, r0
 8001946:	2b01      	cmp	r3, #1
 8001948:	bf0c      	ite	eq
 800194a:	2301      	moveq	r3, #1
 800194c:	2300      	movne	r3, #0
 800194e:	b2db      	uxtb	r3, r3
}
 8001950:	4618      	mov	r0, r3
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40020000 	.word	0x40020000

08001958 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b088      	sub	sp, #32
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 800195e:	4b13      	ldr	r3, [pc, #76]	; (80019ac <hci_tl_lowlevel_init+0x54>)
 8001960:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <hci_tl_lowlevel_init+0x58>)
 8001964:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8001966:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <hci_tl_lowlevel_init+0x5c>)
 8001968:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 800196a:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <hci_tl_lowlevel_init+0x60>)
 800196c:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 800196e:	4b13      	ldr	r3, [pc, #76]	; (80019bc <hci_tl_lowlevel_init+0x64>)
 8001970:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <hci_tl_lowlevel_init+0x68>)
 8001974:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	4618      	mov	r0, r3
 800197a:	f005 fa89 	bl	8006e90 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 800197e:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8001982:	4810      	ldr	r0, [pc, #64]	; (80019c4 <hci_tl_lowlevel_init+0x6c>)
 8001984:	f002 fd43 	bl	800440e <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8001988:	4a0f      	ldr	r2, [pc, #60]	; (80019c8 <hci_tl_lowlevel_init+0x70>)
 800198a:	2100      	movs	r1, #0
 800198c:	480d      	ldr	r0, [pc, #52]	; (80019c4 <hci_tl_lowlevel_init+0x6c>)
 800198e:	f002 fd24 	bl	80043da <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	2006      	movs	r0, #6
 8001998:	f002 fce9 	bl	800436e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800199c:	2006      	movs	r0, #6
 800199e:	f002 fd02 	bl	80043a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 80019a2:	bf00      	nop
 80019a4:	3720      	adds	r7, #32
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	080016e9 	.word	0x080016e9
 80019b0:	08001779 	.word	0x08001779
 80019b4:	08001891 	.word	0x08001891
 80019b8:	080017dd 	.word	0x080017dd
 80019bc:	080017a1 	.word	0x080017a1
 80019c0:	0800394d 	.word	0x0800394d
 80019c4:	2000022c 	.word	0x2000022c
 80019c8:	080019cd 	.word	0x080019cd

080019cc <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80019d0:	e005      	b.n	80019de <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 80019d2:	2000      	movs	r0, #0
 80019d4:	f005 fbc0 	bl	8007158 <hci_notify_asynch_evt>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d105      	bne.n	80019ea <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80019de:	f7ff ffab 	bl	8001938 <IsDataAvailable>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1f4      	bne.n	80019d2 <hci_tl_lowlevel_isr+0x6>
 80019e8:	e000      	b.n	80019ec <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80019ea:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80019ec:	bd80      	pop	{r7, pc}

080019ee <AS7421_readRegister>:
static void AS7421_writeRegisters(uint8_t startAddr, uint8_t bufferSize, uint8_t *val);
static uint16_t byteSwap16(uint16_t value);

//Reads from a given location from the AS7421
static uint8_t AS7421_readRegister(uint8_t addr)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b084      	sub	sp, #16
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	71fb      	strb	r3, [r7, #7]
	char data = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	73fb      	strb	r3, [r7, #15]
	I2C1_byteRead(AS7421_ADDR, addr, &data);
 80019fc:	f107 020f 	add.w	r2, r7, #15
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	4619      	mov	r1, r3
 8001a04:	2064      	movs	r0, #100	; 0x64
 8001a06:	f001 fac5 	bl	8002f94 <I2C1_byteRead>
	return data;
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <AS7421_readRegisters>:

//Reads from consecutive register locations on the AS7421
static void AS7421_readRegisters(uint8_t addr, uint8_t bufferSize, uint8_t *data)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	603a      	str	r2, [r7, #0]
 8001a1e:	71fb      	strb	r3, [r7, #7]
 8001a20:	460b      	mov	r3, r1
 8001a22:	71bb      	strb	r3, [r7, #6]
	I2C1_burstRead(AS7421_ADDR, addr, bufferSize, (char *)data);
 8001a24:	79ba      	ldrb	r2, [r7, #6]
 8001a26:	79f9      	ldrb	r1, [r7, #7]
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	2064      	movs	r0, #100	; 0x64
 8001a2c:	f001 fb2c 	bl	8003088 <I2C1_burstRead>
}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <AS7421_writeRegister>:

//Write a value to a given location on the AS7421
static void AS7421_writeRegister(uint8_t addr, uint8_t val)
{
 8001a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a3c:	b087      	sub	sp, #28
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	460a      	mov	r2, r1
 8001a44:	71fb      	strb	r3, [r7, #7]
 8001a46:	4613      	mov	r3, r2
 8001a48:	71bb      	strb	r3, [r7, #6]
 8001a4a:	466b      	mov	r3, sp
 8001a4c:	461e      	mov	r6, r3
	uint8_t bufferSize = 1;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	75fb      	strb	r3, [r7, #23]
	char data[bufferSize];
 8001a52:	7df9      	ldrb	r1, [r7, #23]
 8001a54:	460b      	mov	r3, r1
 8001a56:	3b01      	subs	r3, #1
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	b2cb      	uxtb	r3, r1
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	4698      	mov	r8, r3
 8001a60:	4691      	mov	r9, r2
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a76:	b2cb      	uxtb	r3, r1
 8001a78:	2200      	movs	r2, #0
 8001a7a:	461c      	mov	r4, r3
 8001a7c:	4615      	mov	r5, r2
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	00eb      	lsls	r3, r5, #3
 8001a88:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a8c:	00e2      	lsls	r2, r4, #3
 8001a8e:	460b      	mov	r3, r1
 8001a90:	3307      	adds	r3, #7
 8001a92:	08db      	lsrs	r3, r3, #3
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	ebad 0d03 	sub.w	sp, sp, r3
 8001a9a:	466b      	mov	r3, sp
 8001a9c:	3300      	adds	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]

	data[0] = val;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	79ba      	ldrb	r2, [r7, #6]
 8001aa4:	701a      	strb	r2, [r3, #0]
	I2C1_burstWrite(AS7421_ADDR, addr, bufferSize, data);
 8001aa6:	7dfa      	ldrb	r2, [r7, #23]
 8001aa8:	79f9      	ldrb	r1, [r7, #7]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2064      	movs	r0, #100	; 0x64
 8001aae:	f001 fb87 	bl	80031c0 <I2C1_burstWrite>
 8001ab2:	46b5      	mov	sp, r6
}
 8001ab4:	bf00      	nop
 8001ab6:	371c      	adds	r7, #28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001abe <AS7421_writeRegisters>:

//Write values to consecutive register locations on the AS7421
static void AS7421_writeRegisters(uint8_t startAddr, uint8_t bufferSize, uint8_t *val)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	603a      	str	r2, [r7, #0]
 8001ac8:	71fb      	strb	r3, [r7, #7]
 8001aca:	460b      	mov	r3, r1
 8001acc:	71bb      	strb	r3, [r7, #6]
//
//	for (int i = 0; i < bufferSize; i++)
//	{
//		data[i] = val[i];
//	}
	I2C1_burstWrite(AS7421_ADDR, startAddr, bufferSize, (char *)val);
 8001ace:	79ba      	ldrb	r2, [r7, #6]
 8001ad0:	79f9      	ldrb	r1, [r7, #7]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2064      	movs	r0, #100	; 0x64
 8001ad6:	f001 fb73 	bl	80031c0 <I2C1_burstWrite>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <byteSwap16>:

static uint16_t byteSwap16(uint16_t value) {
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	80fb      	strh	r3, [r7, #6]
    return (value >> 8) | (value << 8);
 8001aec:	88fb      	ldrh	r3, [r7, #6]
 8001aee:	0a1b      	lsrs	r3, r3, #8
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	b21a      	sxth	r2, r3
 8001af4:	88fb      	ldrh	r3, [r7, #6]
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	b21b      	sxth	r3, r3
 8001afa:	4313      	orrs	r3, r2
 8001afc:	b21b      	sxth	r3, r3
 8001afe:	b29b      	uxth	r3, r3
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <fpu_enable>:

// Enable FPU
void fpu_enable()
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
	/*Enable Floating Point Unit: Enable CP10 and CP11 full access*/
	SCB->CPACR |= (1U<<20);
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <fpu_enable+0x50>)
 8001b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b16:	4a11      	ldr	r2, [pc, #68]	; (8001b5c <fpu_enable+0x50>)
 8001b18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |= (1U<<21);
 8001b20:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <fpu_enable+0x50>)
 8001b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b26:	4a0d      	ldr	r2, [pc, #52]	; (8001b5c <fpu_enable+0x50>)
 8001b28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |= (1U<<22);
 8001b30:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <fpu_enable+0x50>)
 8001b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b36:	4a09      	ldr	r2, [pc, #36]	; (8001b5c <fpu_enable+0x50>)
 8001b38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |= (1U<<23);
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <fpu_enable+0x50>)
 8001b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b46:	4a05      	ldr	r2, [pc, #20]	; (8001b5c <fpu_enable+0x50>)
 8001b48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001b50:	bf00      	nop
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <isConnected>:

//Returns TRUE if the device sends an ACK indicating it is connected
bool isConnected()
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
	uint32_t timeout = 1000; //Timeout to connect set to 1000ms
 8001b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6a:	60fb      	str	r3, [r7, #12]
	unsigned long startTime = HAL_GetTick();
 8001b6c:	f002 faf4 	bl	8004158 <HAL_GetTick>
 8001b70:	60b8      	str	r0, [r7, #8]

	while ((HAL_GetTick() - startTime) < timeout)
 8001b72:	e035      	b.n	8001be0 <isConnected+0x80>
	{
		volatile int tmp;

		/* Wait until bus not busy */
		while (I2C1->SR2 & (SR2_BUSY)){}
 8001b74:	bf00      	nop
 8001b76:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <isConnected+0x9c>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f9      	bne.n	8001b76 <isConnected+0x16>

		/* Generate start condition */
		I2C1->CR1 |= CR1_START;
 8001b82:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <isConnected+0x9c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a1d      	ldr	r2, [pc, #116]	; (8001bfc <isConnected+0x9c>)
 8001b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8c:	6013      	str	r3, [r2, #0]

		/* Wait until start condition flag is set */
		while (!(I2C1->SR1 & (SR1_SB))){}
 8001b8e:	bf00      	nop
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <isConnected+0x9c>)
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f9      	beq.n	8001b90 <isConnected+0x30>

		/* Transmit slave address + Write (0) */
		I2C1->DR = AS7421_WRITE_ADDR;
 8001b9c:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <isConnected+0x9c>)
 8001b9e:	22c8      	movs	r2, #200	; 0xc8
 8001ba0:	611a      	str	r2, [r3, #16]

		/* Wait until address flag is set */
		while (!(I2C1->SR1 & (SR1_ADDR))){}
 8001ba2:	bf00      	nop
 8001ba4:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <isConnected+0x9c>)
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f9      	beq.n	8001ba4 <isConnected+0x44>

		/* Clear address flag by reading SR2 register */
		tmp = I2C1->SR2;
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <isConnected+0x9c>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	607b      	str	r3, [r7, #4]

		if (I2C1->SR1 & SR1_AF)
 8001bb6:	4b11      	ldr	r3, [pc, #68]	; (8001bfc <isConnected+0x9c>)
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d006      	beq.n	8001bd0 <isConnected+0x70>
		{
			//No ACK received, address not acknowledged
			I2C1->CR1 |= CR1_STOP;  // Send STOP condition
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <isConnected+0x9c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a0d      	ldr	r2, [pc, #52]	; (8001bfc <isConnected+0x9c>)
 8001bc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bcc:	6013      	str	r3, [r2, #0]
			continue;
 8001bce:	e007      	b.n	8001be0 <isConnected+0x80>
		}

		//Address acknowledged, device is connected
		I2C1->CR1 |= CR1_STOP; // Send STOP condition
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <isConnected+0x9c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a09      	ldr	r2, [pc, #36]	; (8001bfc <isConnected+0x9c>)
 8001bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bda:	6013      	str	r3, [r2, #0]
		return true;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e008      	b.n	8001bf2 <isConnected+0x92>
	while ((HAL_GetTick() - startTime) < timeout)
 8001be0:	f002 faba 	bl	8004158 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d8c1      	bhi.n	8001b74 <isConnected+0x14>
	}
	//Timeout to connect has expired, hence device is not connected
	return false;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40005400 	.word	0x40005400

08001c00 <initialize>:

//Initializes the sensor with basic settings
//Returns false if sensor is not detected
bool initialize()
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
//	uart2_rxtx_init();
	I2C1_Init();
 8001c04:	f001 f922 	bl	8002e4c <I2C1_Init>
	fpu_enable();
 8001c08:	f7ff ff80 	bl	8001b0c <fpu_enable>

	if (isConnected() == false)
 8001c0c:	f7ff ffa8 	bl	8001b60 <isConnected>
 8001c10:	4603      	mov	r3, r0
 8001c12:	f083 0301 	eor.w	r3, r3, #1
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <initialize+0x20>
	{
		return false; //Check for sensor presence
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	e022      	b.n	8001c66 <initialize+0x66>
	}

	//Add initialization functions
	configueLEDWait(false); //False is to enable LED wait time between cycles
 8001c20:	2000      	movs	r0, #0
 8001c22:	f000 f86a 	bl	8001cfa <configueLEDWait>
	configureWaitCycle(true);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f000 f894 	bl	8001d54 <configureWaitCycle>
	setInterLED(2);
 8001c2c:	2002      	movs	r0, #2
 8001c2e:	f000 f883 	bl	8001d38 <setInterLED>
	setLTF_CCOUNT(1023);
 8001c32:	f240 30ff 	movw	r0, #1023	; 0x3ff
 8001c36:	f000 f8dd 	bl	8001df4 <setLTF_CCOUNT>

	configureLEDAuto(false);
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f000 f8fa 	bl	8001e34 <configureLEDAuto>
	setWaitTime(10);
 8001c40:	200a      	movs	r0, #10
 8001c42:	f000 f8a7 	bl	8001d94 <setWaitTime>
	setIntegrationTime(20);
 8001c46:	2014      	movs	r0, #20
 8001c48:	f000 f91c 	bl	8001e84 <setIntegrationTime>
	numMeasurements(CONTINUOUS);
 8001c4c:	20ff      	movs	r0, #255	; 0xff
 8001c4e:	f000 f949 	bl	8001ee4 <numMeasurements>
	setIntegrationMode(INTEGRATIONCYLE_ABCD);
 8001c52:	2003      	movs	r0, #3
 8001c54:	f000 f954 	bl	8001f00 <setIntegrationMode>
	configureAutozero(true, AZ_WTIME_128US, 0, 1);
 8001c58:	2301      	movs	r3, #1
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2102      	movs	r1, #2
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f000 f972 	bl	8001f48 <configureAutozero>
//	configueLEDWait(false);

	return true;
 8001c64:	2301      	movs	r3, #1
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <startup>:

void startup()
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
	bool works = initialize();
 8001c72:	f7ff ffc5 	bl	8001c00 <initialize>
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
	if (works)
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d014      	beq.n	8001caa <startup+0x3e>
	{
		setIntegrationTime(65.5); //65.5
 8001c80:	2041      	movs	r0, #65	; 0x41
 8001c82:	f000 f8ff 	bl	8001e84 <setIntegrationTime>
		setWaitTime(5);
 8001c86:	2005      	movs	r0, #5
 8001c88:	f000 f884 	bl	8001d94 <setWaitTime>

		sleep();
 8001c8c:	f000 f9d4 	bl	8002038 <sleep>
		powerup();
 8001c90:	f000 f9b1 	bl	8001ff6 <powerup>
		configureSMUX();
 8001c94:	f000 fb50 	bl	8002338 <configureSMUX>
		configureGain(8); //Sets gain for all ADCs // 8 max
 8001c98:	2008      	movs	r0, #8
 8001c9a:	f000 fb61 	bl	8002360 <configureGain>
		configureLEDs(true, ALL_LEDS, LED_CURRENT_LIMIT_75MA); //75 max
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	211f      	movs	r1, #31
 8001ca2:	2001      	movs	r0, #1
 8001ca4:	f000 fba9 	bl	80023fa <configureLEDs>
 8001ca8:	e003      	b.n	8001cb2 <startup+0x46>
	}
	else
	{
		printf("Sensor failed to respond \n\r");
 8001caa:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <startup+0x4c>)
 8001cac:	f006 f9a2 	bl	8007ff4 <iprintf>
		return;
 8001cb0:	bf00      	nop
	}
}
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	0800a44c 	.word	0x0800a44c

08001cbc <performMeasurements>:

// Perform Measurements
void performMeasurements(uint16_t arrSpectra[CHANNELSIZE], uint16_t arrTemp[TEMPSIZE])
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
	unsigned long startTime = HAL_GetTick();
 8001cc6:	f002 fa47 	bl	8004158 <HAL_GetTick>
 8001cca:	60f8      	str	r0, [r7, #12]
	while (getMeasurementStatus(ADATA) == 0){} //End of measurement, new measurement data can be read if true
 8001ccc:	bf00      	nop
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f000 fc12 	bl	80024f8 <getMeasurementStatus>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f083 0301 	eor.w	r3, r3, #1
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f6      	bne.n	8001cce <performMeasurements+0x12>

	unsigned long endTime = HAL_GetTick();
 8001ce0:	f002 fa3a 	bl	8004158 <HAL_GetTick>
 8001ce4:	60b8      	str	r0, [r7, #8]
//	printf("\nTIme to get data: %ld \n\r", endTime - startTime);

	getAllSpectralData(arrSpectra); //Reading spectral data channels and passing organized values into arrSpectra
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 fe44 	bl	8002974 <getAllSpectralData>
	getAllTemperatureData(arrTemp); //Reading temperatures of integration cycles A to D
 8001cec:	6838      	ldr	r0, [r7, #0]
 8001cee:	f001 f83f 	bl	8002d70 <getAllTemperatureData>
}
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <configueLEDWait>:

//Configure LED_WAIT_OFF or Disable LED_WAIT_OFF to modify waiting time between integration cycle A to D
void configueLEDWait(bool setting)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	71fb      	strb	r3, [r7, #7]
	uint8_t value = AS7421_readRegister(CFG_MISC); //Read existing state
 8001d04:	2038      	movs	r0, #56	; 0x38
 8001d06:	f7ff fe72 	bl	80019ee <AS7421_readRegister>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	73fb      	strb	r3, [r7, #15]
	if (setting)
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d004      	beq.n	8001d1e <configueLEDWait+0x24>
	{
		value |= (1U << 2); //Set LED_WAIT_OFF bit (bit 2)
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	f043 0304 	orr.w	r3, r3, #4
 8001d1a:	73fb      	strb	r3, [r7, #15]
 8001d1c:	e003      	b.n	8001d26 <configueLEDWait+0x2c>
	}
	else
	{
		value &= ~(1U << 2); //Reset LED_WAIT_OFF bit (bit 2)
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
 8001d20:	f023 0304 	bic.w	r3, r3, #4
 8001d24:	73fb      	strb	r3, [r7, #15]
	}

	AS7421_writeRegister(CFG_MISC, value); //Write value to CFG_MISC register to configure the LED_WAIT_OFF bit
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	2038      	movs	r0, #56	; 0x38
 8001d2c:	f7ff fe84 	bl	8001a38 <AS7421_writeRegister>
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <setInterLED>:

// Set Wait time (LED_WAIT) between switching on the LED and begin of integration/modulation. Wait time = 1024us * waitTime
void setInterLED(uint8_t waitTime)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
	if (waitTime > 255)
	{
        waitTime = 255; // Set to maximum value if out of range
	}

	AS7421_writeRegister(LED_WAIT, waitTime);
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	4619      	mov	r1, r3
 8001d46:	203d      	movs	r0, #61	; 0x3d
 8001d48:	f7ff fe76 	bl	8001a38 <AS7421_writeRegister>
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <configureWaitCycle>:

//Configure the waiting time between integration cycle A to D (programmable with LTF_WTIME)
void configureWaitCycle(bool setting)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
	uint8_t value = AS7421_readRegister(CFG_MISC); //Read existing state
 8001d5e:	2038      	movs	r0, #56	; 0x38
 8001d60:	f7ff fe45 	bl	80019ee <AS7421_readRegister>
 8001d64:	4603      	mov	r3, r0
 8001d66:	73fb      	strb	r3, [r7, #15]
	if (setting)
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d004      	beq.n	8001d78 <configureWaitCycle+0x24>
	{
		value |= (1U << 1); //Set WAIT_CYCLE_ON bit (bit 1)
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	73fb      	strb	r3, [r7, #15]
 8001d76:	e003      	b.n	8001d80 <configureWaitCycle+0x2c>
	}
	else
	{
		value &= ~(1U << 1); //Reset WAIT_CYCLE_ON bit (bit 1)
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
 8001d7a:	f023 0302 	bic.w	r3, r3, #2
 8001d7e:	73fb      	strb	r3, [r7, #15]
	}

	AS7421_writeRegister(CFG_MISC, value); //Write value to CFG_MISC register to configure the WAIT_CYCLE_ON bit
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	4619      	mov	r1, r3
 8001d84:	2038      	movs	r0, #56	; 0x38
 8001d86:	f7ff fe57 	bl	8001a38 <AS7421_writeRegister>
}
 8001d8a:	bf00      	nop
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <setWaitTime>:

//Programs the wait time (WTIME) in ms between two consecutive spectral measurements
void setWaitTime(uint32_t waitTime)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	uint32_t waitCounts = ((waitTime * F_CLKMOD) / 1000) - 1;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a12      	ldr	r2, [pc, #72]	; (8001de8 <setWaitTime+0x54>)
 8001da0:	fb02 f303 	mul.w	r3, r2, r3
 8001da4:	4a11      	ldr	r2, [pc, #68]	; (8001dec <setWaitTime+0x58>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	099b      	lsrs	r3, r3, #6
 8001dac:	3b01      	subs	r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]

	uint8_t data[3] = {0};
 8001db0:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <setWaitTime+0x5c>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	813b      	strh	r3, [r7, #8]
 8001db6:	2300      	movs	r3, #0
 8001db8:	72bb      	strb	r3, [r7, #10]
	data[0] = waitCounts & 0xFF; //low byte
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	723b      	strb	r3, [r7, #8]
	data[1] = (waitCounts >> 8) & 0xFF; //mid byte
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	0a1b      	lsrs	r3, r3, #8
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	727b      	strb	r3, [r7, #9]
	data[2] = (waitCounts >> 16) & 0xFF; //high byte
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	0c1b      	lsrs	r3, r3, #16
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	72bb      	strb	r3, [r7, #10]

	AS7421_writeRegisters(LTF_WTIME, 3, data);
 8001dd0:	f107 0308 	add.w	r3, r7, #8
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	2103      	movs	r1, #3
 8001dd8:	2064      	movs	r0, #100	; 0x64
 8001dda:	f7ff fe70 	bl	8001abe <AS7421_writeRegisters>
}
 8001dde:	bf00      	nop
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	000f4240 	.word	0x000f4240
 8001dec:	10624dd3 	.word	0x10624dd3
 8001df0:	0800a468 	.word	0x0800a468

08001df4 <setLTF_CCOUNT>:

void setLTF_CCOUNT(uint16_t ccount_value)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	80fb      	strh	r3, [r7, #6]
    // Validate the input value
    if (ccount_value > 0xFFFF) {
        ccount_value = 0xFFFF;  // Cap to maximum 16-bit value
    }
	uint8_t data[2] = {0};
 8001dfe:	2300      	movs	r3, #0
 8001e00:	81bb      	strh	r3, [r7, #12]
	ccount_value = byteSwap16(ccount_value);
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fe6c 	bl	8001ae2 <byteSwap16>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	80fb      	strh	r3, [r7, #6]

	data[0] = ccount_value & 0xFF; //low byte
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	733b      	strb	r3, [r7, #12]
	data[1] = (ccount_value >> 8) & 0xFF; //high byte
 8001e14:	88fb      	ldrh	r3, [r7, #6]
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	737b      	strb	r3, [r7, #13]

    // Write the value to the LTF_CCOUNT register
    AS7421_writeRegisters(LTF_CCOUNT, 2, data);
 8001e1e:	f107 030c 	add.w	r3, r7, #12
 8001e22:	461a      	mov	r2, r3
 8001e24:	2102      	movs	r1, #2
 8001e26:	203a      	movs	r0, #58	; 0x3a
 8001e28:	f7ff fe49 	bl	8001abe <AS7421_writeRegisters>
}
 8001e2c:	bf00      	nop
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <configureLEDAuto>:

//Controls NIR light source during spectral measurement
void configureLEDAuto(bool mode)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
	uint8_t value = AS7421_readRegister(ENABLE); //Read existing state
 8001e3e:	2060      	movs	r0, #96	; 0x60
 8001e40:	f7ff fdd5 	bl	80019ee <AS7421_readRegister>
 8001e44:	4603      	mov	r3, r0
 8001e46:	73fb      	strb	r3, [r7, #15]
	if (mode)
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d008      	beq.n	8001e60 <configureLEDAuto+0x2c>
	{
		value |= (1U << 4); //Set LED_AUTO bit (bit 4 and 5)
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	f043 0310 	orr.w	r3, r3, #16
 8001e54:	73fb      	strb	r3, [r7, #15]
		value |= (1U << 5);
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
 8001e58:	f043 0320 	orr.w	r3, r3, #32
 8001e5c:	73fb      	strb	r3, [r7, #15]
 8001e5e:	e007      	b.n	8001e70 <configureLEDAuto+0x3c>
	}
	else
	{
		value &= ~(1U << 4); //Reset LED_AUTO bit (bit 4 and 5)
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	f023 0310 	bic.w	r3, r3, #16
 8001e66:	73fb      	strb	r3, [r7, #15]
		value &= ~(1U << 5);
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
 8001e6a:	f023 0320 	bic.w	r3, r3, #32
 8001e6e:	73fb      	strb	r3, [r7, #15]
	}

	AS7421_writeRegister(ENABLE, value);
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	4619      	mov	r1, r3
 8001e74:	2060      	movs	r0, #96	; 0x60
 8001e76:	f7ff fddf 	bl	8001a38 <AS7421_writeRegister>
}
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <setIntegrationTime>:

//Programs the integration time (ITIME) in ms of the LTF converter
void setIntegrationTime(uint32_t intTime)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
//	if (intTime > 256)
//	{
//		intTime = 256;
//	}
	uint32_t intCounts = ((intTime * F_CLKMOD) / 1000) - 1;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a12      	ldr	r2, [pc, #72]	; (8001ed8 <setIntegrationTime+0x54>)
 8001e90:	fb02 f303 	mul.w	r3, r2, r3
 8001e94:	4a11      	ldr	r2, [pc, #68]	; (8001edc <setIntegrationTime+0x58>)
 8001e96:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9a:	099b      	lsrs	r3, r3, #6
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]

	uint8_t data[3] = {0};
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <setIntegrationTime+0x5c>)
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	813b      	strh	r3, [r7, #8]
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	72bb      	strb	r3, [r7, #10]
	data[0] = intCounts & 0xFF;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	723b      	strb	r3, [r7, #8]
	data[1] = (intCounts >> 8) & 0xFF;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	0a1b      	lsrs	r3, r3, #8
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	727b      	strb	r3, [r7, #9]
	data[2] = (intCounts >> 16) & 0xFF;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	0c1b      	lsrs	r3, r3, #16
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	72bb      	strb	r3, [r7, #10]

	AS7421_writeRegisters(LTF_ITIME, 3, data);
 8001ec0:	f107 0308 	add.w	r3, r7, #8
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	2103      	movs	r1, #3
 8001ec8:	2061      	movs	r0, #97	; 0x61
 8001eca:	f7ff fdf8 	bl	8001abe <AS7421_writeRegisters>
}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	000f4240 	.word	0x000f4240
 8001edc:	10624dd3 	.word	0x10624dd3
 8001ee0:	0800a468 	.word	0x0800a468

08001ee4 <numMeasurements>:

void numMeasurements(uint8_t counts) //specifying number of measurements
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	71fb      	strb	r3, [r7, #7]
	if (counts > 255)
	{
		counts = 255; // Set to maximum value if out of range
	}

	AS7421_writeRegister(LTF_ICOUNT, counts);
 8001eee:	79fb      	ldrb	r3, [r7, #7]
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	2069      	movs	r0, #105	; 0x69
 8001ef4:	f7ff fda0 	bl	8001a38 <AS7421_writeRegister>
}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <setIntegrationMode>:

//16 channels (A), 32 channels (AB), 48 channels (ABC), 64 channels (ABCD)
void setIntegrationMode(uint8_t mode)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
	if (mode > INTEGRATIONCYLE_ABCD)
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d901      	bls.n	8001f14 <setIntegrationMode+0x14>
	{
		mode = INTEGRATIONCYLE_ABCD; //Limit mode to 2 bits
 8001f10:	2303      	movs	r3, #3
 8001f12:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t value = AS7421_readRegister(CFG_LTF); //Read existing state
 8001f14:	2067      	movs	r0, #103	; 0x67
 8001f16:	f7ff fd6a 	bl	80019ee <AS7421_readRegister>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	73fb      	strb	r3, [r7, #15]
	value &= 0b11100111; //Clear LTF_CYCLE bits
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	f023 0318 	bic.w	r3, r3, #24
 8001f24:	73fb      	strb	r3, [r7, #15]
	value |= (mode << 3); //Set LTF_CYCLE bits with user's choice
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	b25a      	sxtb	r2, r3
 8001f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	b25b      	sxtb	r3, r3
 8001f34:	73fb      	strb	r3, [r7, #15]

	AS7421_writeRegister(CFG_LTF, value);
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	2067      	movs	r0, #103	; 0x67
 8001f3c:	f7ff fd7c 	bl	8001a38 <AS7421_writeRegister>
}
 8001f40:	bf00      	nop
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <configureAutozero>:


void configureAutozero(bool enable, uint8_t az_waitTime, uint8_t iteration, uint8_t cycle)
{
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4604      	mov	r4, r0
 8001f50:	4608      	mov	r0, r1
 8001f52:	4611      	mov	r1, r2
 8001f54:	461a      	mov	r2, r3
 8001f56:	4623      	mov	r3, r4
 8001f58:	71fb      	strb	r3, [r7, #7]
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	71bb      	strb	r3, [r7, #6]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	717b      	strb	r3, [r7, #5]
 8001f62:	4613      	mov	r3, r2
 8001f64:	713b      	strb	r3, [r7, #4]
	uint8_t value = AS7421_readRegister(CFG_AZ);
 8001f66:	206d      	movs	r0, #109	; 0x6d
 8001f68:	f7ff fd41 	bl	80019ee <AS7421_readRegister>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	73fb      	strb	r3, [r7, #15]

	value |= (1U << 7); //Enable AZ_ON (bit 7)
 8001f70:	7bfb      	ldrb	r3, [r7, #15]
 8001f72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f76:	73fb      	strb	r3, [r7, #15]
	if (az_waitTime > 0b11)
 8001f78:	79bb      	ldrb	r3, [r7, #6]
 8001f7a:	2b03      	cmp	r3, #3
 8001f7c:	d901      	bls.n	8001f82 <configureAutozero+0x3a>
	{
		az_waitTime = 0b11;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	71bb      	strb	r3, [r7, #6]
	}
    value &= ~(0b11 << 5);  // Clear the AZ_WTIME bits (bits 5 and 6)
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001f88:	73fb      	strb	r3, [r7, #15]
	value |= (az_waitTime << 5); //Set AZ_WTIME (bit 5 and 6)
 8001f8a:	79bb      	ldrb	r3, [r7, #6]
 8001f8c:	015b      	lsls	r3, r3, #5
 8001f8e:	b25a      	sxtb	r2, r3
 8001f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	b25b      	sxtb	r3, r3
 8001f98:	73fb      	strb	r3, [r7, #15]

    value &= ~(1U << 4);  // Clear the AZ_EN bit
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	f023 0310 	bic.w	r3, r3, #16
 8001fa0:	73fb      	strb	r3, [r7, #15]
	value |= (enable << 4); //Set AZ_EN (bit 4)
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	b25a      	sxtb	r2, r3
 8001fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	b25b      	sxtb	r3, r3
 8001fb0:	73fb      	strb	r3, [r7, #15]

	value &= ~(1U << 3);  // Clear the AZ_CYCLE bit
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	f023 0308 	bic.w	r3, r3, #8
 8001fb8:	73fb      	strb	r3, [r7, #15]
	value |= (cycle << 3); //Set AZ_CYCLE (bit 3)
 8001fba:	793b      	ldrb	r3, [r7, #4]
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	b25a      	sxtb	r2, r3
 8001fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	b25b      	sxtb	r3, r3
 8001fc8:	73fb      	strb	r3, [r7, #15]

	if (iteration > 0b111)
 8001fca:	797b      	ldrb	r3, [r7, #5]
 8001fcc:	2b07      	cmp	r3, #7
 8001fce:	d901      	bls.n	8001fd4 <configureAutozero+0x8c>
	{
		iteration = 0b111;
 8001fd0:	2307      	movs	r3, #7
 8001fd2:	717b      	strb	r3, [r7, #5]
	}
    value &= ~0b111;  // Clear the iteration bits (bits 0, 1, and 2)
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	f023 0307 	bic.w	r3, r3, #7
 8001fda:	73fb      	strb	r3, [r7, #15]
	value |= iteration;
 8001fdc:	7bfa      	ldrb	r2, [r7, #15]
 8001fde:	797b      	ldrb	r3, [r7, #5]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	73fb      	strb	r3, [r7, #15]

    AS7421_writeRegister(CFG_AZ, value);
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	206d      	movs	r0, #109	; 0x6d
 8001fea:	f7ff fd25 	bl	8001a38 <AS7421_writeRegister>
}
 8001fee:	bf00      	nop
 8001ff0:	3714      	adds	r7, #20
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd90      	pop	{r4, r7, pc}

08001ff6 <powerup>:

// Internal oscillator enabled, potentially write 0x44 to register 0x6F, 0x20 to register 0x6E, 0x00 to register 0x6F, sensor is in idle state
void powerup()
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
	uint8_t value = AS7421_readRegister(ENABLE); //Read existing state
 8001ffc:	2060      	movs	r0, #96	; 0x60
 8001ffe:	f7ff fcf6 	bl	80019ee <AS7421_readRegister>
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
	value |= (1U << 0); //Set PON (bit 0)
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	71fb      	strb	r3, [r7, #7]
    AS7421_writeRegister(ENABLE, value);
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	4619      	mov	r1, r3
 8002012:	2060      	movs	r0, #96	; 0x60
 8002014:	f7ff fd10 	bl	8001a38 <AS7421_writeRegister>

    //After power on reset the following commands have to be written prior accessing other registers
    AS7421_writeRegister(0x6F, 0x44);
 8002018:	2144      	movs	r1, #68	; 0x44
 800201a:	206f      	movs	r0, #111	; 0x6f
 800201c:	f7ff fd0c 	bl	8001a38 <AS7421_writeRegister>
    AS7421_writeRegister(0x6E, 0x20);
 8002020:	2120      	movs	r1, #32
 8002022:	206e      	movs	r0, #110	; 0x6e
 8002024:	f7ff fd08 	bl	8001a38 <AS7421_writeRegister>
    AS7421_writeRegister(0x6F, 0x00);
 8002028:	2100      	movs	r1, #0
 800202a:	206f      	movs	r0, #111	; 0x6f
 800202c:	f7ff fd04 	bl	8001a38 <AS7421_writeRegister>
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <sleep>:
	AS7421_writeRegister(CFG_MISC, value);
}

// Internal oscillator disabled, sensor is in sleep state
void sleep()
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
	uint8_t value = AS7421_readRegister(ENABLE); //Read existing state
 800203e:	2060      	movs	r0, #96	; 0x60
 8002040:	f7ff fcd5 	bl	80019ee <AS7421_readRegister>
 8002044:	4603      	mov	r3, r0
 8002046:	71fb      	strb	r3, [r7, #7]
	value &= ~(1U << 0); //Reset PON (bit 0)
 8002048:	79fb      	ldrb	r3, [r7, #7]
 800204a:	f023 0301 	bic.w	r3, r3, #1
 800204e:	71fb      	strb	r3, [r7, #7]
    AS7421_writeRegister(ENABLE, value);
 8002050:	79fb      	ldrb	r3, [r7, #7]
 8002052:	4619      	mov	r1, r3
 8002054:	2060      	movs	r0, #96	; 0x60
 8002056:	f7ff fcef 	bl	8001a38 <AS7421_writeRegister>
}
 800205a:	bf00      	nop
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <writeRAMData>:

void writeRAMData(uint8_t *smuxData, uint8_t offset)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b082      	sub	sp, #8
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	70fb      	strb	r3, [r7, #3]
	if (offset == INTA_OFFSET)
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d136      	bne.n	80020e2 <writeRAMData+0x80>
	{
		AS7421_writeRegister(CFG_RAM_0, smuxData[0]);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	4619      	mov	r1, r3
 800207a:	2040      	movs	r0, #64	; 0x40
 800207c:	f7ff fcdc 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_1, smuxData[1]);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3301      	adds	r3, #1
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	4619      	mov	r1, r3
 8002088:	2041      	movs	r0, #65	; 0x41
 800208a:	f7ff fcd5 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_2, smuxData[2]);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3302      	adds	r3, #2
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4619      	mov	r1, r3
 8002096:	2042      	movs	r0, #66	; 0x42
 8002098:	f7ff fcce 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_3, smuxData[3]);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3303      	adds	r3, #3
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	4619      	mov	r1, r3
 80020a4:	2043      	movs	r0, #67	; 0x43
 80020a6:	f7ff fcc7 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_4, smuxData[4]);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3304      	adds	r3, #4
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	4619      	mov	r1, r3
 80020b2:	2044      	movs	r0, #68	; 0x44
 80020b4:	f7ff fcc0 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_5, smuxData[5]);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3305      	adds	r3, #5
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	4619      	mov	r1, r3
 80020c0:	2045      	movs	r0, #69	; 0x45
 80020c2:	f7ff fcb9 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_6, smuxData[6]);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	3306      	adds	r3, #6
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	4619      	mov	r1, r3
 80020ce:	2046      	movs	r0, #70	; 0x46
 80020d0:	f7ff fcb2 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_7, smuxData[7]);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3307      	adds	r3, #7
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	4619      	mov	r1, r3
 80020dc:	2047      	movs	r0, #71	; 0x47
 80020de:	f7ff fcab 	bl	8001a38 <AS7421_writeRegister>
	}

	if (offset == INTB_OFFSET)
 80020e2:	78fb      	ldrb	r3, [r7, #3]
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d136      	bne.n	8002156 <writeRAMData+0xf4>
	{
		AS7421_writeRegister(CFG_RAM_8, smuxData[0]);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	4619      	mov	r1, r3
 80020ee:	2048      	movs	r0, #72	; 0x48
 80020f0:	f7ff fca2 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_9, smuxData[1]);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3301      	adds	r3, #1
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	4619      	mov	r1, r3
 80020fc:	2049      	movs	r0, #73	; 0x49
 80020fe:	f7ff fc9b 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_10, smuxData[2]);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3302      	adds	r3, #2
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4619      	mov	r1, r3
 800210a:	204a      	movs	r0, #74	; 0x4a
 800210c:	f7ff fc94 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_11, smuxData[3]);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3303      	adds	r3, #3
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	4619      	mov	r1, r3
 8002118:	204b      	movs	r0, #75	; 0x4b
 800211a:	f7ff fc8d 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_12, smuxData[4]);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3304      	adds	r3, #4
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	4619      	mov	r1, r3
 8002126:	204c      	movs	r0, #76	; 0x4c
 8002128:	f7ff fc86 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_13, smuxData[5]);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3305      	adds	r3, #5
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	4619      	mov	r1, r3
 8002134:	204d      	movs	r0, #77	; 0x4d
 8002136:	f7ff fc7f 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_14, smuxData[6]);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3306      	adds	r3, #6
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	4619      	mov	r1, r3
 8002142:	204e      	movs	r0, #78	; 0x4e
 8002144:	f7ff fc78 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_15, smuxData[7]);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3307      	adds	r3, #7
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	4619      	mov	r1, r3
 8002150:	204f      	movs	r0, #79	; 0x4f
 8002152:	f7ff fc71 	bl	8001a38 <AS7421_writeRegister>
	}

	if (offset == INTC_OFFSET)
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	2b10      	cmp	r3, #16
 800215a:	d136      	bne.n	80021ca <writeRAMData+0x168>
	{
		AS7421_writeRegister(CFG_RAM_16, smuxData[0]);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	4619      	mov	r1, r3
 8002162:	2050      	movs	r0, #80	; 0x50
 8002164:	f7ff fc68 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_17, smuxData[1]);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3301      	adds	r3, #1
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	4619      	mov	r1, r3
 8002170:	2051      	movs	r0, #81	; 0x51
 8002172:	f7ff fc61 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_18, smuxData[2]);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3302      	adds	r3, #2
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	4619      	mov	r1, r3
 800217e:	2052      	movs	r0, #82	; 0x52
 8002180:	f7ff fc5a 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_19, smuxData[3]);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3303      	adds	r3, #3
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	4619      	mov	r1, r3
 800218c:	2053      	movs	r0, #83	; 0x53
 800218e:	f7ff fc53 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_20, smuxData[4]);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	3304      	adds	r3, #4
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	4619      	mov	r1, r3
 800219a:	2054      	movs	r0, #84	; 0x54
 800219c:	f7ff fc4c 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_21, smuxData[5]);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3305      	adds	r3, #5
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	4619      	mov	r1, r3
 80021a8:	2055      	movs	r0, #85	; 0x55
 80021aa:	f7ff fc45 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_22, smuxData[6]);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3306      	adds	r3, #6
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	4619      	mov	r1, r3
 80021b6:	2056      	movs	r0, #86	; 0x56
 80021b8:	f7ff fc3e 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_23, smuxData[7]);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3307      	adds	r3, #7
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	4619      	mov	r1, r3
 80021c4:	2057      	movs	r0, #87	; 0x57
 80021c6:	f7ff fc37 	bl	8001a38 <AS7421_writeRegister>
	}

	if (offset == INTD_OFFSET)
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	2b18      	cmp	r3, #24
 80021ce:	d136      	bne.n	800223e <writeRAMData+0x1dc>
	{
		AS7421_writeRegister(CFG_RAM_24, smuxData[0]);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	4619      	mov	r1, r3
 80021d6:	2058      	movs	r0, #88	; 0x58
 80021d8:	f7ff fc2e 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_25, smuxData[1]);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3301      	adds	r3, #1
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	4619      	mov	r1, r3
 80021e4:	2059      	movs	r0, #89	; 0x59
 80021e6:	f7ff fc27 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_26, smuxData[2]);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3302      	adds	r3, #2
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4619      	mov	r1, r3
 80021f2:	205a      	movs	r0, #90	; 0x5a
 80021f4:	f7ff fc20 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_27, smuxData[3]);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3303      	adds	r3, #3
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	4619      	mov	r1, r3
 8002200:	205b      	movs	r0, #91	; 0x5b
 8002202:	f7ff fc19 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_28, smuxData[4]);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3304      	adds	r3, #4
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	205c      	movs	r0, #92	; 0x5c
 8002210:	f7ff fc12 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_29, smuxData[5]);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3305      	adds	r3, #5
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	4619      	mov	r1, r3
 800221c:	205d      	movs	r0, #93	; 0x5d
 800221e:	f7ff fc0b 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_30, smuxData[6]);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3306      	adds	r3, #6
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	4619      	mov	r1, r3
 800222a:	205e      	movs	r0, #94	; 0x5e
 800222c:	f7ff fc04 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_RAM_31, smuxData[7]);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3307      	adds	r3, #7
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	4619      	mov	r1, r3
 8002238:	205f      	movs	r0, #95	; 0x5f
 800223a:	f7ff fbfd 	bl	8001a38 <AS7421_writeRegister>
	}
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <zeroSMUX>:

// Clear RAM registers with SMUX
void zeroSMUX()
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
	uint8_t zeros[8] = {0};
 800224c:	2300      	movs	r3, #0
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	2300      	movs	r3, #0
 8002252:	60bb      	str	r3, [r7, #8]
	for (int i = SMUX_A_ADDR; i <= SMUX_D_ADDR; i++)
 8002254:	230c      	movs	r3, #12
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	e01c      	b.n	8002294 <zeroSMUX+0x4e>
	{
		AS7421_writeRegister(CFG_RAM, i);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	4619      	mov	r1, r3
 8002260:	206a      	movs	r0, #106	; 0x6a
 8002262:	f7ff fbe9 	bl	8001a38 <AS7421_writeRegister>

		writeRAMData(zeros, 0);
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	2100      	movs	r1, #0
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fef9 	bl	8002062 <writeRAMData>
		writeRAMData(zeros, 1);
 8002270:	1d3b      	adds	r3, r7, #4
 8002272:	2101      	movs	r1, #1
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fef4 	bl	8002062 <writeRAMData>
		writeRAMData(zeros, 2);
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	2102      	movs	r1, #2
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff feef 	bl	8002062 <writeRAMData>
		writeRAMData(zeros, 3);
 8002284:	1d3b      	adds	r3, r7, #4
 8002286:	2103      	movs	r1, #3
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff feea 	bl	8002062 <writeRAMData>
	for (int i = SMUX_A_ADDR; i <= SMUX_D_ADDR; i++)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	3301      	adds	r3, #1
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b0f      	cmp	r3, #15
 8002298:	dddf      	ble.n	800225a <zeroSMUX+0x14>
	}
}
 800229a:	bf00      	nop
 800229c:	bf00      	nop
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <setSMUX>:

// Set SMUX region (A,B,C, or D) with ramOffsetAddr
void setSMUX(uint8_t ramOffsetAddr, uint8_t offset, uint8_t* configvalues)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	603a      	str	r2, [r7, #0]
 80022ae:	71fb      	strb	r3, [r7, #7]
 80022b0:	460b      	mov	r3, r1
 80022b2:	71bb      	strb	r3, [r7, #6]
	AS7421_writeRegister(CFG_RAM, ramOffsetAddr); //Writing the ram offset(SMUX addresses) for programming the configuration into RAM
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	4619      	mov	r1, r3
 80022b8:	206a      	movs	r0, #106	; 0x6a
 80022ba:	f7ff fbbd 	bl	8001a38 <AS7421_writeRegister>
	writeRAMData(configvalues, offset); //Writing to respective ram registers after setting RAM offset
 80022be:	79bb      	ldrb	r3, [r7, #6]
 80022c0:	4619      	mov	r1, r3
 80022c2:	6838      	ldr	r0, [r7, #0]
 80022c4:	f7ff fecd 	bl	8002062 <writeRAMData>
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <setSMUX_A>:

// Set SMUX for integration cycle A and write to ram registers
void setSMUX_A(uint8_t* configvalues)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	setSMUX(SMUX_A_ADDR, INTA_OFFSET, configvalues);
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	2100      	movs	r1, #0
 80022dc:	200c      	movs	r0, #12
 80022de:	f7ff ffe1 	bl	80022a4 <setSMUX>
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <setSMUX_B>:

// Set SMUX for integration cycle B and write to ram registers
void setSMUX_B(uint8_t* configvalues)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
	setSMUX(SMUX_B_ADDR, INTB_OFFSET, configvalues);
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	2108      	movs	r1, #8
 80022f6:	200d      	movs	r0, #13
 80022f8:	f7ff ffd4 	bl	80022a4 <setSMUX>
}
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <setSMUX_C>:

// Set SMUX for integration cycle C and write to ram registers
void setSMUX_C(uint8_t* configvalues)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
	setSMUX(SMUX_C_ADDR, INTC_OFFSET, configvalues);
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	2110      	movs	r1, #16
 8002310:	200e      	movs	r0, #14
 8002312:	f7ff ffc7 	bl	80022a4 <setSMUX>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <setSMUX_D>:

// Set SMUX for integration cycle D and write to ram registers
void setSMUX_D(uint8_t* configvalues)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
	setSMUX(SMUX_D_ADDR, INTD_OFFSET, configvalues);
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	2118      	movs	r1, #24
 800232a:	200f      	movs	r0, #15
 800232c:	f7ff ffba 	bl	80022a4 <setSMUX>
}
 8002330:	bf00      	nop
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <configureSMUX>:

// Configure all SMUX registers either with a specified default array of bytes or the config_values
void configureSMUX()
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
    zeroSMUX();
 800233c:	f7ff ff83 	bl	8002246 <zeroSMUX>

    // Configure SMUX registers
	setSMUX_A(config_values);
 8002340:	4806      	ldr	r0, [pc, #24]	; (800235c <configureSMUX+0x24>)
 8002342:	f7ff ffc5 	bl	80022d0 <setSMUX_A>
	setSMUX_B(config_values);
 8002346:	4805      	ldr	r0, [pc, #20]	; (800235c <configureSMUX+0x24>)
 8002348:	f7ff ffcf 	bl	80022ea <setSMUX_B>
	setSMUX_C(config_values);
 800234c:	4803      	ldr	r0, [pc, #12]	; (800235c <configureSMUX+0x24>)
 800234e:	f7ff ffd9 	bl	8002304 <setSMUX_C>
	setSMUX_D(config_values);
 8002352:	4802      	ldr	r0, [pc, #8]	; (800235c <configureSMUX+0x24>)
 8002354:	f7ff ffe3 	bl	800231e <setSMUX_D>
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000004 	.word	0x20000004

08002360 <configureGain>:

//2^x gain, i.e. gain of 6 = 2^6 = 256x
void configureGain(uint8_t gain)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
	if (gain > 8)
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	2b08      	cmp	r3, #8
 800236e:	d901      	bls.n	8002374 <configureGain+0x14>
	{
		gain = 8;
 8002370:	2308      	movs	r3, #8
 8002372:	71fb      	strb	r3, [r7, #7]
	}

	uint8_t data[8] = {gain};
 8002374:	f107 0308 	add.w	r3, r7, #8
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	723b      	strb	r3, [r7, #8]

	AS7421_writeRegister(CFG_RAM, ASETUP_AB);
 8002382:	2110      	movs	r1, #16
 8002384:	206a      	movs	r0, #106	; 0x6a
 8002386:	f7ff fb57 	bl	8001a38 <AS7421_writeRegister>

	writeRAMData(data, 0);
 800238a:	f107 0308 	add.w	r3, r7, #8
 800238e:	2100      	movs	r1, #0
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fe66 	bl	8002062 <writeRAMData>
	writeRAMData(data, 1);
 8002396:	f107 0308 	add.w	r3, r7, #8
 800239a:	2101      	movs	r1, #1
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fe60 	bl	8002062 <writeRAMData>
	writeRAMData(data, 2);
 80023a2:	f107 0308 	add.w	r3, r7, #8
 80023a6:	2102      	movs	r1, #2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fe5a 	bl	8002062 <writeRAMData>
	writeRAMData(data, 3);
 80023ae:	f107 0308 	add.w	r3, r7, #8
 80023b2:	2103      	movs	r1, #3
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fe54 	bl	8002062 <writeRAMData>

	AS7421_writeRegister(CFG_RAM, ASETUP_CD);
 80023ba:	2111      	movs	r1, #17
 80023bc:	206a      	movs	r0, #106	; 0x6a
 80023be:	f7ff fb3b 	bl	8001a38 <AS7421_writeRegister>

	writeRAMData(data, 0);
 80023c2:	f107 0308 	add.w	r3, r7, #8
 80023c6:	2100      	movs	r1, #0
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fe4a 	bl	8002062 <writeRAMData>
	writeRAMData(data, 1);
 80023ce:	f107 0308 	add.w	r3, r7, #8
 80023d2:	2101      	movs	r1, #1
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fe44 	bl	8002062 <writeRAMData>
	writeRAMData(data, 2);
 80023da:	f107 0308 	add.w	r3, r7, #8
 80023de:	2102      	movs	r1, #2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fe3e 	bl	8002062 <writeRAMData>
	writeRAMData(data, 3);
 80023e6:	f107 0308 	add.w	r3, r7, #8
 80023ea:	2103      	movs	r1, #3
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff fe38 	bl	8002062 <writeRAMData>
}
 80023f2:	bf00      	nop
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <configureLEDs>:

// Configure LED register
void configureLEDs(bool enable, uint8_t led, uint8_t current)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
 8002400:	4603      	mov	r3, r0
 8002402:	71fb      	strb	r3, [r7, #7]
 8002404:	460b      	mov	r3, r1
 8002406:	71bb      	strb	r3, [r7, #6]
 8002408:	4613      	mov	r3, r2
 800240a:	717b      	strb	r3, [r7, #5]
	//Clearing LED config register to default
	AS7421_writeRegister(CFG_LED, 0);
 800240c:	2100      	movs	r1, #0
 800240e:	2068      	movs	r0, #104	; 0x68
 8002410:	f7ff fb12 	bl	8001a38 <AS7421_writeRegister>

	uint8_t value = AS7421_readRegister(CFG_LED);
 8002414:	2068      	movs	r0, #104	; 0x68
 8002416:	f7ff faea 	bl	80019ee <AS7421_readRegister>
 800241a:	4603      	mov	r3, r0
 800241c:	73fb      	strb	r3, [r7, #15]

	value |= (enable << 7); //Configure SET_LED_ON (bit 7)
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	01db      	lsls	r3, r3, #7
 8002422:	b25a      	sxtb	r2, r3
 8002424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002428:	4313      	orrs	r3, r2
 800242a:	b25b      	sxtb	r3, r3
 800242c:	73fb      	strb	r3, [r7, #15]

	for (int i = LED_MULT_0; i <= LED_MULT_3; i++)
 800242e:	2300      	movs	r3, #0
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	e014      	b.n	800245e <configureLEDs+0x64>
	{
		value |= (i << 4); //Enable LED_OFFSET (bits 4 and 5)
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	b25a      	sxtb	r2, r3
 800243a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243e:	4313      	orrs	r3, r2
 8002440:	b25b      	sxtb	r3, r3
 8002442:	73fb      	strb	r3, [r7, #15]
		AS7421_writeRegister(CFG_LED, value); // Setting Offset address for programming the values for LED_MULT
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	4619      	mov	r1, r3
 8002448:	2068      	movs	r0, #104	; 0x68
 800244a:	f7ff faf5 	bl	8001a38 <AS7421_writeRegister>
		AS7421_writeRegister(CFG_LED_MULT, led);
 800244e:	79bb      	ldrb	r3, [r7, #6]
 8002450:	4619      	mov	r1, r3
 8002452:	2039      	movs	r0, #57	; 0x39
 8002454:	f7ff faf0 	bl	8001a38 <AS7421_writeRegister>
	for (int i = LED_MULT_0; i <= LED_MULT_3; i++)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	3301      	adds	r3, #1
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2b03      	cmp	r3, #3
 8002462:	dde7      	ble.n	8002434 <configureLEDs+0x3a>
	}

	if (current > LED_CURRENT_LIMIT_75MA)
 8002464:	797b      	ldrb	r3, [r7, #5]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d901      	bls.n	800246e <configureLEDs+0x74>
	{
		current = LED_CURRENT_LIMIT_75MA;
 800246a:	2301      	movs	r3, #1
 800246c:	717b      	strb	r3, [r7, #5]
	}
	value |= (current << 0);
 800246e:	7bfa      	ldrb	r2, [r7, #15]
 8002470:	797b      	ldrb	r3, [r7, #5]
 8002472:	4313      	orrs	r3, r2
 8002474:	73fb      	strb	r3, [r7, #15]

	AS7421_writeRegister(CFG_LED, value);
 8002476:	7bfb      	ldrb	r3, [r7, #15]
 8002478:	4619      	mov	r1, r3
 800247a:	2068      	movs	r0, #104	; 0x68
 800247c:	f7ff fadc 	bl	8001a38 <AS7421_writeRegister>
}
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <startMeasurements>:

// Start spectral measurement
void startMeasurements(bool withLED)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	71fb      	strb	r3, [r7, #7]
	//Turn on LEDs
	configureLEDAuto(withLED);
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fccd 	bl	8001e34 <configureLEDAuto>

	uint8_t value = AS7421_readRegister(ENABLE); //Read existing state
 800249a:	2060      	movs	r0, #96	; 0x60
 800249c:	f7ff faa7 	bl	80019ee <AS7421_readRegister>
 80024a0:	4603      	mov	r3, r0
 80024a2:	73fb      	strb	r3, [r7, #15]

	// Power on
	value |= (1U << 0); //Set PON (bit 0)
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	73fb      	strb	r3, [r7, #15]

    //Spectral measurement enabled
    value |= (1U << 1); //Set LTF_EN (bit 1)
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	f043 0302 	orr.w	r3, r3, #2
 80024b2:	73fb      	strb	r3, [r7, #15]

    //Automatic power down by temperature measurement
    value |= (1U << 2); //Set TSD_EN (bit 2)
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	f043 0304 	orr.w	r3, r3, #4
 80024ba:	73fb      	strb	r3, [r7, #15]

    AS7421_writeRegister(ENABLE, value);
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	4619      	mov	r1, r3
 80024c0:	2060      	movs	r0, #96	; 0x60
 80024c2:	f7ff fab9 	bl	8001a38 <AS7421_writeRegister>
}
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <measurementActive>:
	configureLEDAuto(false);
}

//Measurement is active. New measurement cannot be started
bool measurementActive()
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
	uint8_t value = AS7421_readRegister(STATUS_6);
 80024d4:	2076      	movs	r0, #118	; 0x76
 80024d6:	f7ff fa8a 	bl	80019ee <AS7421_readRegister>
 80024da:	4603      	mov	r3, r0
 80024dc:	71fb      	strb	r3, [r7, #7]
    bool status = (value & (1U << 4)) != 0; // Isolate bit 4 (LTF_BUSY) and check if it's set
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	bf14      	ite	ne
 80024e8:	2301      	movne	r3, #1
 80024ea:	2300      	moveq	r3, #0
 80024ec:	71bb      	strb	r3, [r7, #6]
    return status;
 80024ee:	79bb      	ldrb	r3, [r7, #6]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <getMeasurementStatus>:
 * Bit2 = TSD
 * Bit1 = AZ
 * Bit0 = ADATA
 */
bool getMeasurementStatus(uint8_t bit)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
	uint8_t status7 = AS7421_readRegister(STATUS_7);
 8002502:	2077      	movs	r0, #119	; 0x77
 8002504:	f7ff fa73 	bl	80019ee <AS7421_readRegister>
 8002508:	4603      	mov	r3, r0
 800250a:	73fb      	strb	r3, [r7, #15]
	if (bit > 7)
 800250c:	79fb      	ldrb	r3, [r7, #7]
 800250e:	2b07      	cmp	r3, #7
 8002510:	d904      	bls.n	800251c <getMeasurementStatus+0x24>
	{
		printf("Bit is not within range of 0-7 of STATUS_7 register \n\r");
 8002512:	480a      	ldr	r0, [pc, #40]	; (800253c <getMeasurementStatus+0x44>)
 8002514:	f005 fd6e 	bl	8007ff4 <iprintf>
		return 0;
 8002518:	2300      	movs	r3, #0
 800251a:	e00b      	b.n	8002534 <getMeasurementStatus+0x3c>
	}
    bool status = (status7 & (1U << bit)) != 0; // Isolate a bit and check its status
 800251c:	7bfa      	ldrb	r2, [r7, #15]
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	fa22 f303 	lsr.w	r3, r2, r3
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf14      	ite	ne
 800252c:	2301      	movne	r3, #1
 800252e:	2300      	moveq	r3, #0
 8002530:	73bb      	strb	r3, [r7, #14]
	return status;
 8002532:	7bbb      	ldrb	r3, [r7, #14]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	0800a46c 	.word	0x0800a46c

08002540 <recordChannelData>:

// Helper function to record channel data
uint16_t recordChannelData(uint8_t addr)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2] = {0};
 800254a:	2300      	movs	r3, #0
 800254c:	81bb      	strh	r3, [r7, #12]
	AS7421_readRegisters(addr, 2, data);
 800254e:	f107 020c 	add.w	r2, r7, #12
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	2102      	movs	r1, #2
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fa5c 	bl	8001a14 <AS7421_readRegisters>

	// Combine the two bytes into a 16-bit value
	return ((uint16_t)data[1] << 8) | data[0];
 800255c:	7b7b      	ldrb	r3, [r7, #13]
 800255e:	021b      	lsls	r3, r3, #8
 8002560:	b21a      	sxth	r2, r3
 8002562:	7b3b      	ldrb	r3, [r7, #12]
 8002564:	b21b      	sxth	r3, r3
 8002566:	4313      	orrs	r3, r2
 8002568:	b21b      	sxth	r3, r3
 800256a:	b29b      	uxth	r3, r3
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <getChannel1>:

/* Integration Cycle A */
uint16_t getChannel1()
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
	return recordChannelData(CH1_DATA);
 8002578:	2082      	movs	r0, #130	; 0x82
 800257a:	f7ff ffe1 	bl	8002540 <recordChannelData>
 800257e:	4603      	mov	r3, r0
}
 8002580:	4618      	mov	r0, r3
 8002582:	bd80      	pop	{r7, pc}

08002584 <getChannel48>:
uint16_t getChannel48()
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
	return recordChannelData(CH48_DATA);
 8002588:	20e0      	movs	r0, #224	; 0xe0
 800258a:	f7ff ffd9 	bl	8002540 <recordChannelData>
 800258e:	4603      	mov	r3, r0
}
 8002590:	4618      	mov	r0, r3
 8002592:	bd80      	pop	{r7, pc}

08002594 <getChannel2>:
uint16_t getChannel2()
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
	return recordChannelData(CH2_DATA);
 8002598:	2084      	movs	r0, #132	; 0x84
 800259a:	f7ff ffd1 	bl	8002540 <recordChannelData>
 800259e:	4603      	mov	r3, r0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <getChannel34>:
uint16_t getChannel34()
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
	return recordChannelData(CH34_DATA);
 80025a8:	20c4      	movs	r0, #196	; 0xc4
 80025aa:	f7ff ffc9 	bl	8002540 <recordChannelData>
 80025ae:	4603      	mov	r3, r0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <getChannel16>:
uint16_t getChannel16()
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
	return recordChannelData(CH16_DATA);
 80025b8:	20a0      	movs	r0, #160	; 0xa0
 80025ba:	f7ff ffc1 	bl	8002540 <recordChannelData>
 80025be:	4603      	mov	r3, r0

}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <getChannel32>:
uint16_t getChannel32()
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
	return recordChannelData(CH32_DATA);
 80025c8:	20c0      	movs	r0, #192	; 0xc0
 80025ca:	f7ff ffb9 	bl	8002540 <recordChannelData>
 80025ce:	4603      	mov	r3, r0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <getChannel18>:
uint16_t getChannel18()
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
	return recordChannelData(CH18_DATA);
 80025d8:	20a4      	movs	r0, #164	; 0xa4
 80025da:	f7ff ffb1 	bl	8002540 <recordChannelData>
 80025de:	4603      	mov	r3, r0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <getChannel51>:
uint16_t getChannel51()
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
	return recordChannelData(CH51_DATA);
 80025e8:	20e6      	movs	r0, #230	; 0xe6
 80025ea:	f7ff ffa9 	bl	8002540 <recordChannelData>
 80025ee:	4603      	mov	r3, r0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <getChannel4>:

//Next 8 PDs
uint16_t getChannel4()
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
	return recordChannelData(CH4_DATA);
 80025f8:	2088      	movs	r0, #136	; 0x88
 80025fa:	f7ff ffa1 	bl	8002540 <recordChannelData>
 80025fe:	4603      	mov	r3, r0
}
 8002600:	4618      	mov	r0, r3
 8002602:	bd80      	pop	{r7, pc}

08002604 <getChannel49>:
uint16_t getChannel49()
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
	return recordChannelData(CH49_DATA);
 8002608:	20e2      	movs	r0, #226	; 0xe2
 800260a:	f7ff ff99 	bl	8002540 <recordChannelData>
 800260e:	4603      	mov	r3, r0
}
 8002610:	4618      	mov	r0, r3
 8002612:	bd80      	pop	{r7, pc}

08002614 <getChannel3>:
uint16_t getChannel3()
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
	return recordChannelData(CH3_DATA);
 8002618:	2086      	movs	r0, #134	; 0x86
 800261a:	f7ff ff91 	bl	8002540 <recordChannelData>
 800261e:	4603      	mov	r3, r0
}
 8002620:	4618      	mov	r0, r3
 8002622:	bd80      	pop	{r7, pc}

08002624 <getChannel35>:
uint16_t getChannel35()
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
	return recordChannelData(CH35_DATA);
 8002628:	20c6      	movs	r0, #198	; 0xc6
 800262a:	f7ff ff89 	bl	8002540 <recordChannelData>
 800262e:	4603      	mov	r3, r0

}
 8002630:	4618      	mov	r0, r3
 8002632:	bd80      	pop	{r7, pc}

08002634 <getChannel17>:
uint16_t getChannel17()
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
	return recordChannelData(CH17_DATA);
 8002638:	20a2      	movs	r0, #162	; 0xa2
 800263a:	f7ff ff81 	bl	8002540 <recordChannelData>
 800263e:	4603      	mov	r3, r0
}
 8002640:	4618      	mov	r0, r3
 8002642:	bd80      	pop	{r7, pc}

08002644 <getChannel33>:
uint16_t getChannel33()
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
	return recordChannelData(CH33_DATA);
 8002648:	20c2      	movs	r0, #194	; 0xc2
 800264a:	f7ff ff79 	bl	8002540 <recordChannelData>
 800264e:	4603      	mov	r3, r0
}
 8002650:	4618      	mov	r0, r3
 8002652:	bd80      	pop	{r7, pc}

08002654 <getChannel19>:
uint16_t getChannel19()
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
	return recordChannelData(CH19_DATA);
 8002658:	20a6      	movs	r0, #166	; 0xa6
 800265a:	f7ff ff71 	bl	8002540 <recordChannelData>
 800265e:	4603      	mov	r3, r0
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd80      	pop	{r7, pc}

08002664 <getChannel54>:
uint16_t getChannel54()
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
	return recordChannelData(CH54_DATA);
 8002668:	20ec      	movs	r0, #236	; 0xec
 800266a:	f7ff ff69 	bl	8002540 <recordChannelData>
 800266e:	4603      	mov	r3, r0
}
 8002670:	4618      	mov	r0, r3
 8002672:	bd80      	pop	{r7, pc}

08002674 <getChannel0>:

/* Integration Cycle B */
uint16_t getChannel0()
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
	return recordChannelData(CH0_DATA);
 8002678:	2080      	movs	r0, #128	; 0x80
 800267a:	f7ff ff61 	bl	8002540 <recordChannelData>
 800267e:	4603      	mov	r3, r0
}
 8002680:	4618      	mov	r0, r3
 8002682:	bd80      	pop	{r7, pc}

08002684 <getChannel13>:
uint16_t getChannel13()
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
	return recordChannelData(CH13_DATA);
 8002688:	209a      	movs	r0, #154	; 0x9a
 800268a:	f7ff ff59 	bl	8002540 <recordChannelData>
 800268e:	4603      	mov	r3, r0
}
 8002690:	4618      	mov	r0, r3
 8002692:	bd80      	pop	{r7, pc}

08002694 <getChannel50>:
uint16_t getChannel50()
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
	return recordChannelData(CH50_DATA);
 8002698:	20e4      	movs	r0, #228	; 0xe4
 800269a:	f7ff ff51 	bl	8002540 <recordChannelData>
 800269e:	4603      	mov	r3, r0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <getChannel63>:
uint16_t getChannel63()
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
	return recordChannelData(CH63_DATA);
 80026a8:	20fe      	movs	r0, #254	; 0xfe
 80026aa:	f7ff ff49 	bl	8002540 <recordChannelData>
 80026ae:	4603      	mov	r3, r0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <getChannel52>:
uint16_t getChannel52()
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
	return recordChannelData(CH52_DATA);
 80026b8:	20e8      	movs	r0, #232	; 0xe8
 80026ba:	f7ff ff41 	bl	8002540 <recordChannelData>
 80026be:	4603      	mov	r3, r0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <getChannel6>:
uint16_t getChannel6()
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
	return recordChannelData(CH6_DATA);
 80026c8:	208c      	movs	r0, #140	; 0x8c
 80026ca:	f7ff ff39 	bl	8002540 <recordChannelData>
 80026ce:	4603      	mov	r3, r0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <getChannel38>:
uint16_t getChannel38()
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
	return recordChannelData(CH38_DATA);
 80026d8:	20cc      	movs	r0, #204	; 0xcc
 80026da:	f7ff ff31 	bl	8002540 <recordChannelData>
 80026de:	4603      	mov	r3, r0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <getChannel20>:
uint16_t getChannel20()
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
	return recordChannelData(CH20_DATA);
 80026e8:	20a8      	movs	r0, #168	; 0xa8
 80026ea:	f7ff ff29 	bl	8002540 <recordChannelData>
 80026ee:	4603      	mov	r3, r0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <getChannel36>:

//Next 8 PDs
uint16_t getChannel36()
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
	return recordChannelData(CH36_DATA);
 80026f8:	20c8      	movs	r0, #200	; 0xc8
 80026fa:	f7ff ff21 	bl	8002540 <recordChannelData>
 80026fe:	4603      	mov	r3, r0
}
 8002700:	4618      	mov	r0, r3
 8002702:	bd80      	pop	{r7, pc}

08002704 <getChannel22>:
uint16_t getChannel22()
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
	return recordChannelData(CH22_DATA);
 8002708:	20ac      	movs	r0, #172	; 0xac
 800270a:	f7ff ff19 	bl	8002540 <recordChannelData>
 800270e:	4603      	mov	r3, r0
}
 8002710:	4618      	mov	r0, r3
 8002712:	bd80      	pop	{r7, pc}

08002714 <getChannel55>:
uint16_t getChannel55()
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
	return recordChannelData(CH55_DATA);
 8002718:	20ee      	movs	r0, #238	; 0xee
 800271a:	f7ff ff11 	bl	8002540 <recordChannelData>
 800271e:	4603      	mov	r3, r0
}
 8002720:	4618      	mov	r0, r3
 8002722:	bd80      	pop	{r7, pc}

08002724 <getChannel5>:
uint16_t getChannel5()
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
	return recordChannelData(CH5_DATA);
 8002728:	208a      	movs	r0, #138	; 0x8a
 800272a:	f7ff ff09 	bl	8002540 <recordChannelData>
 800272e:	4603      	mov	r3, r0
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd80      	pop	{r7, pc}

08002734 <getChannel53>:
uint16_t getChannel53()
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
	return recordChannelData(CH53_DATA);
 8002738:	20ea      	movs	r0, #234	; 0xea
 800273a:	f7ff ff01 	bl	8002540 <recordChannelData>
 800273e:	4603      	mov	r3, r0
}
 8002740:	4618      	mov	r0, r3
 8002742:	bd80      	pop	{r7, pc}

08002744 <getChannel7>:
uint16_t getChannel7()
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
	return recordChannelData(CH7_DATA);
 8002748:	208e      	movs	r0, #142	; 0x8e
 800274a:	f7ff fef9 	bl	8002540 <recordChannelData>
 800274e:	4603      	mov	r3, r0
}
 8002750:	4618      	mov	r0, r3
 8002752:	bd80      	pop	{r7, pc}

08002754 <getChannel39>:
uint16_t getChannel39()
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
	return recordChannelData(CH39_DATA);
 8002758:	20ce      	movs	r0, #206	; 0xce
 800275a:	f7ff fef1 	bl	8002540 <recordChannelData>
 800275e:	4603      	mov	r3, r0
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}

08002764 <getChannel21>:
uint16_t getChannel21()
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
	return recordChannelData(CH21_DATA);
 8002768:	20aa      	movs	r0, #170	; 0xaa
 800276a:	f7ff fee9 	bl	8002540 <recordChannelData>
 800276e:	4603      	mov	r3, r0
}
 8002770:	4618      	mov	r0, r3
 8002772:	bd80      	pop	{r7, pc}

08002774 <getChannel37>:

/* Integration Cycle C */
uint16_t getChannel37()
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
	return recordChannelData(CH37_DATA);
 8002778:	20ca      	movs	r0, #202	; 0xca
 800277a:	f7ff fee1 	bl	8002540 <recordChannelData>
 800277e:	4603      	mov	r3, r0
}
 8002780:	4618      	mov	r0, r3
 8002782:	bd80      	pop	{r7, pc}

08002784 <getChannel23>:
uint16_t getChannel23()
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
	return recordChannelData(CH23_DATA);
 8002788:	20ae      	movs	r0, #174	; 0xae
 800278a:	f7ff fed9 	bl	8002540 <recordChannelData>
 800278e:	4603      	mov	r3, r0
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}

08002794 <getChannel40>:
uint16_t getChannel40()
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	return recordChannelData(CH40_DATA);
 8002798:	20d0      	movs	r0, #208	; 0xd0
 800279a:	f7ff fed1 	bl	8002540 <recordChannelData>
 800279e:	4603      	mov	r3, r0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <getChannel26>:
uint16_t getChannel26()
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
	return recordChannelData(CH26_DATA);
 80027a8:	20b4      	movs	r0, #180	; 0xb4
 80027aa:	f7ff fec9 	bl	8002540 <recordChannelData>
 80027ae:	4603      	mov	r3, r0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <getChannel42>:
uint16_t getChannel42()
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
	return recordChannelData(CH42_DATA);
 80027b8:	20d4      	movs	r0, #212	; 0xd4
 80027ba:	f7ff fec1 	bl	8002540 <recordChannelData>
 80027be:	4603      	mov	r3, r0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <getChannel24>:
uint16_t getChannel24()
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
	return recordChannelData(CH24_DATA);
 80027c8:	20b0      	movs	r0, #176	; 0xb0
 80027ca:	f7ff feb9 	bl	8002540 <recordChannelData>
 80027ce:	4603      	mov	r3, r0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <getChannel56>:
uint16_t getChannel56()
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
	return recordChannelData(CH56_DATA);
 80027d8:	20f0      	movs	r0, #240	; 0xf0
 80027da:	f7ff feb1 	bl	8002540 <recordChannelData>
 80027de:	4603      	mov	r3, r0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <getChannel10>:
uint16_t getChannel10()
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
	return recordChannelData(CH10_DATA);
 80027e8:	2094      	movs	r0, #148	; 0x94
 80027ea:	f7ff fea9 	bl	8002540 <recordChannelData>
 80027ee:	4603      	mov	r3, r0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <getChannel58>:

//Next 8 PDs
uint16_t getChannel58()
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
	return recordChannelData(CH58_DATA);
 80027f8:	20f4      	movs	r0, #244	; 0xf4
 80027fa:	f7ff fea1 	bl	8002540 <recordChannelData>
 80027fe:	4603      	mov	r3, r0
}
 8002800:	4618      	mov	r0, r3
 8002802:	bd80      	pop	{r7, pc}

08002804 <getChannel8>:
uint16_t getChannel8()
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
	return recordChannelData(CH8_DATA);
 8002808:	2090      	movs	r0, #144	; 0x90
 800280a:	f7ff fe99 	bl	8002540 <recordChannelData>
 800280e:	4603      	mov	r3, r0
}
 8002810:	4618      	mov	r0, r3
 8002812:	bd80      	pop	{r7, pc}

08002814 <getChannel41>:
uint16_t getChannel41()
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
	return recordChannelData(CH41_DATA);
 8002818:	20d2      	movs	r0, #210	; 0xd2
 800281a:	f7ff fe91 	bl	8002540 <recordChannelData>
 800281e:	4603      	mov	r3, r0
}
 8002820:	4618      	mov	r0, r3
 8002822:	bd80      	pop	{r7, pc}

08002824 <getChannel27>:
uint16_t getChannel27()
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
	return recordChannelData(CH27_DATA);
 8002828:	20b6      	movs	r0, #182	; 0xb6
 800282a:	f7ff fe89 	bl	8002540 <recordChannelData>
 800282e:	4603      	mov	r3, r0
}
 8002830:	4618      	mov	r0, r3
 8002832:	bd80      	pop	{r7, pc}

08002834 <getChannel43>:
uint16_t getChannel43()
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
	return recordChannelData(CH43_DATA);
 8002838:	20d6      	movs	r0, #214	; 0xd6
 800283a:	f7ff fe81 	bl	8002540 <recordChannelData>
 800283e:	4603      	mov	r3, r0
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}

08002844 <getChannel25>:
uint16_t getChannel25()
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
	return recordChannelData(CH25_DATA);
 8002848:	20b2      	movs	r0, #178	; 0xb2
 800284a:	f7ff fe79 	bl	8002540 <recordChannelData>
 800284e:	4603      	mov	r3, r0
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}

08002854 <getChannel57>:
uint16_t getChannel57()
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
	return recordChannelData(CH57_DATA);
 8002858:	20f2      	movs	r0, #242	; 0xf2
 800285a:	f7ff fe71 	bl	8002540 <recordChannelData>
 800285e:	4603      	mov	r3, r0
}
 8002860:	4618      	mov	r0, r3
 8002862:	bd80      	pop	{r7, pc}

08002864 <getChannel11>:
uint16_t getChannel11()
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
	return recordChannelData(CH11_DATA);
 8002868:	2096      	movs	r0, #150	; 0x96
 800286a:	f7ff fe69 	bl	8002540 <recordChannelData>
 800286e:	4603      	mov	r3, r0
}
 8002870:	4618      	mov	r0, r3
 8002872:	bd80      	pop	{r7, pc}

08002874 <getChannel59>:

/* Integration Cycle D */
uint16_t getChannel59()
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
	return recordChannelData(CH59_DATA);
 8002878:	20f6      	movs	r0, #246	; 0xf6
 800287a:	f7ff fe61 	bl	8002540 <recordChannelData>
 800287e:	4603      	mov	r3, r0
}
 8002880:	4618      	mov	r0, r3
 8002882:	bd80      	pop	{r7, pc}

08002884 <getChannel9>:
uint16_t getChannel9()
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
	return recordChannelData(CH9_DATA);
 8002888:	2092      	movs	r0, #146	; 0x92
 800288a:	f7ff fe59 	bl	8002540 <recordChannelData>
 800288e:	4603      	mov	r3, r0
}
 8002890:	4618      	mov	r0, r3
 8002892:	bd80      	pop	{r7, pc}

08002894 <getChannel44>:
uint16_t getChannel44()
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
	return recordChannelData(CH44_DATA);
 8002898:	20d8      	movs	r0, #216	; 0xd8
 800289a:	f7ff fe51 	bl	8002540 <recordChannelData>
 800289e:	4603      	mov	r3, r0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <getChannel30>:
uint16_t getChannel30()
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
	return recordChannelData(CH30_DATA);
 80028a8:	20bc      	movs	r0, #188	; 0xbc
 80028aa:	f7ff fe49 	bl	8002540 <recordChannelData>
 80028ae:	4603      	mov	r3, r0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <getChannel46>:
uint16_t getChannel46()
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
	return recordChannelData(CH46_DATA);
 80028b8:	20dc      	movs	r0, #220	; 0xdc
 80028ba:	f7ff fe41 	bl	8002540 <recordChannelData>
 80028be:	4603      	mov	r3, r0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <getChannel28>:
uint16_t getChannel28()
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
	return recordChannelData(CH28_DATA);
 80028c8:	20b8      	movs	r0, #184	; 0xb8
 80028ca:	f7ff fe39 	bl	8002540 <recordChannelData>
 80028ce:	4603      	mov	r3, r0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <getChannel60>:
uint16_t getChannel60()
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
	return recordChannelData(CH60_DATA);
 80028d8:	20f8      	movs	r0, #248	; 0xf8
 80028da:	f7ff fe31 	bl	8002540 <recordChannelData>
 80028de:	4603      	mov	r3, r0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <getChannel14>:
uint16_t getChannel14()
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
	return recordChannelData(CH14_DATA);
 80028e8:	209c      	movs	r0, #156	; 0x9c
 80028ea:	f7ff fe29 	bl	8002540 <recordChannelData>
 80028ee:	4603      	mov	r3, r0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <getChannel62>:

//Next 8 PDs
uint16_t getChannel62()
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
	return recordChannelData(CH62_DATA);
 80028f8:	20fc      	movs	r0, #252	; 0xfc
 80028fa:	f7ff fe21 	bl	8002540 <recordChannelData>
 80028fe:	4603      	mov	r3, r0
}
 8002900:	4618      	mov	r0, r3
 8002902:	bd80      	pop	{r7, pc}

08002904 <getChannel12>:
uint16_t getChannel12()
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
	return recordChannelData(CH12_DATA);
 8002908:	2098      	movs	r0, #152	; 0x98
 800290a:	f7ff fe19 	bl	8002540 <recordChannelData>
 800290e:	4603      	mov	r3, r0
}
 8002910:	4618      	mov	r0, r3
 8002912:	bd80      	pop	{r7, pc}

08002914 <getChannel45>:
uint16_t getChannel45()
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
	return recordChannelData(CH45_DATA);
 8002918:	20da      	movs	r0, #218	; 0xda
 800291a:	f7ff fe11 	bl	8002540 <recordChannelData>
 800291e:	4603      	mov	r3, r0
}
 8002920:	4618      	mov	r0, r3
 8002922:	bd80      	pop	{r7, pc}

08002924 <getChannel31>:
uint16_t getChannel31()
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
	return recordChannelData(CH31_DATA);
 8002928:	20be      	movs	r0, #190	; 0xbe
 800292a:	f7ff fe09 	bl	8002540 <recordChannelData>
 800292e:	4603      	mov	r3, r0
}
 8002930:	4618      	mov	r0, r3
 8002932:	bd80      	pop	{r7, pc}

08002934 <getChannel47>:
uint16_t getChannel47()
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
	return recordChannelData(CH47_DATA);
 8002938:	20de      	movs	r0, #222	; 0xde
 800293a:	f7ff fe01 	bl	8002540 <recordChannelData>
 800293e:	4603      	mov	r3, r0
}
 8002940:	4618      	mov	r0, r3
 8002942:	bd80      	pop	{r7, pc}

08002944 <getChannel29>:
uint16_t getChannel29()
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
	return recordChannelData(CH29_DATA);
 8002948:	20ba      	movs	r0, #186	; 0xba
 800294a:	f7ff fdf9 	bl	8002540 <recordChannelData>
 800294e:	4603      	mov	r3, r0
}
 8002950:	4618      	mov	r0, r3
 8002952:	bd80      	pop	{r7, pc}

08002954 <getChannel61>:
uint16_t getChannel61()
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
	return recordChannelData(CH61_DATA);
 8002958:	20fa      	movs	r0, #250	; 0xfa
 800295a:	f7ff fdf1 	bl	8002540 <recordChannelData>
 800295e:	4603      	mov	r3, r0
}
 8002960:	4618      	mov	r0, r3
 8002962:	bd80      	pop	{r7, pc}

08002964 <getChannel15>:
uint16_t getChannel15()
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
	return recordChannelData(CH15_DATA);
 8002968:	209e      	movs	r0, #158	; 0x9e
 800296a:	f7ff fde9 	bl	8002540 <recordChannelData>
 800296e:	4603      	mov	r3, r0
}
 8002970:	4618      	mov	r0, r3
 8002972:	bd80      	pop	{r7, pc}

08002974 <getAllSpectralData>:


void getAllSpectralData(uint16_t arr[CHANNELSIZE])
{
 8002974:	b590      	push	{r4, r7, lr}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	/* Integration Cycle A */
	arr[0] = getChannel1();
 800297c:	f7ff fdfa 	bl	8002574 <getChannel1>
 8002980:	4603      	mov	r3, r0
 8002982:	461a      	mov	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	801a      	strh	r2, [r3, #0]
	arr[1] = getChannel48();
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	1c9c      	adds	r4, r3, #2
 800298c:	f7ff fdfa 	bl	8002584 <getChannel48>
 8002990:	4603      	mov	r3, r0
 8002992:	8023      	strh	r3, [r4, #0]
	arr[2] = getChannel2();
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	1d1c      	adds	r4, r3, #4
 8002998:	f7ff fdfc 	bl	8002594 <getChannel2>
 800299c:	4603      	mov	r3, r0
 800299e:	8023      	strh	r3, [r4, #0]
	arr[3] = getChannel34();
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	1d9c      	adds	r4, r3, #6
 80029a4:	f7ff fdfe 	bl	80025a4 <getChannel34>
 80029a8:	4603      	mov	r3, r0
 80029aa:	8023      	strh	r3, [r4, #0]
	arr[4] = getChannel16();
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f103 0408 	add.w	r4, r3, #8
 80029b2:	f7ff fdff 	bl	80025b4 <getChannel16>
 80029b6:	4603      	mov	r3, r0
 80029b8:	8023      	strh	r3, [r4, #0]
	arr[5] = getChannel32();
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f103 040a 	add.w	r4, r3, #10
 80029c0:	f7ff fe00 	bl	80025c4 <getChannel32>
 80029c4:	4603      	mov	r3, r0
 80029c6:	8023      	strh	r3, [r4, #0]
	arr[6] = getChannel18();
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f103 040c 	add.w	r4, r3, #12
 80029ce:	f7ff fe01 	bl	80025d4 <getChannel18>
 80029d2:	4603      	mov	r3, r0
 80029d4:	8023      	strh	r3, [r4, #0]
	arr[7] = getChannel51();
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f103 040e 	add.w	r4, r3, #14
 80029dc:	f7ff fe02 	bl	80025e4 <getChannel51>
 80029e0:	4603      	mov	r3, r0
 80029e2:	8023      	strh	r3, [r4, #0]

	arr[8] = getChannel4();
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f103 0410 	add.w	r4, r3, #16
 80029ea:	f7ff fe03 	bl	80025f4 <getChannel4>
 80029ee:	4603      	mov	r3, r0
 80029f0:	8023      	strh	r3, [r4, #0]
	arr[9] = getChannel49();
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f103 0412 	add.w	r4, r3, #18
 80029f8:	f7ff fe04 	bl	8002604 <getChannel49>
 80029fc:	4603      	mov	r3, r0
 80029fe:	8023      	strh	r3, [r4, #0]
	arr[10] = getChannel3();
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f103 0414 	add.w	r4, r3, #20
 8002a06:	f7ff fe05 	bl	8002614 <getChannel3>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	8023      	strh	r3, [r4, #0]
	arr[11] = getChannel35();
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f103 0416 	add.w	r4, r3, #22
 8002a14:	f7ff fe06 	bl	8002624 <getChannel35>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	8023      	strh	r3, [r4, #0]
	arr[12] = getChannel17();
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f103 0418 	add.w	r4, r3, #24
 8002a22:	f7ff fe07 	bl	8002634 <getChannel17>
 8002a26:	4603      	mov	r3, r0
 8002a28:	8023      	strh	r3, [r4, #0]
	arr[13] = getChannel33();
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f103 041a 	add.w	r4, r3, #26
 8002a30:	f7ff fe08 	bl	8002644 <getChannel33>
 8002a34:	4603      	mov	r3, r0
 8002a36:	8023      	strh	r3, [r4, #0]
	arr[14] = getChannel19();
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f103 041c 	add.w	r4, r3, #28
 8002a3e:	f7ff fe09 	bl	8002654 <getChannel19>
 8002a42:	4603      	mov	r3, r0
 8002a44:	8023      	strh	r3, [r4, #0]
	arr[15] = getChannel54();
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f103 041e 	add.w	r4, r3, #30
 8002a4c:	f7ff fe0a 	bl	8002664 <getChannel54>
 8002a50:	4603      	mov	r3, r0
 8002a52:	8023      	strh	r3, [r4, #0]

	/* Integration Cycle B */
	arr[16] = getChannel0();
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f103 0420 	add.w	r4, r3, #32
 8002a5a:	f7ff fe0b 	bl	8002674 <getChannel0>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	8023      	strh	r3, [r4, #0]
	arr[17] = getChannel13();
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f103 0422 	add.w	r4, r3, #34	; 0x22
 8002a68:	f7ff fe0c 	bl	8002684 <getChannel13>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	8023      	strh	r3, [r4, #0]
	arr[18] = getChannel50();
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8002a76:	f7ff fe0d 	bl	8002694 <getChannel50>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	8023      	strh	r3, [r4, #0]
	arr[19] = getChannel63();
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f103 0426 	add.w	r4, r3, #38	; 0x26
 8002a84:	f7ff fe0e 	bl	80026a4 <getChannel63>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	8023      	strh	r3, [r4, #0]
	arr[20] = getChannel52();
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8002a92:	f7ff fe0f 	bl	80026b4 <getChannel52>
 8002a96:	4603      	mov	r3, r0
 8002a98:	8023      	strh	r3, [r4, #0]
	arr[21] = getChannel6();
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f103 042a 	add.w	r4, r3, #42	; 0x2a
 8002aa0:	f7ff fe10 	bl	80026c4 <getChannel6>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	8023      	strh	r3, [r4, #0]
	arr[22] = getChannel38();
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8002aae:	f7ff fe11 	bl	80026d4 <getChannel38>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	8023      	strh	r3, [r4, #0]
	arr[23] = getChannel20();
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f103 042e 	add.w	r4, r3, #46	; 0x2e
 8002abc:	f7ff fe12 	bl	80026e4 <getChannel20>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	8023      	strh	r3, [r4, #0]

	arr[24] = getChannel36();
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8002aca:	f7ff fe13 	bl	80026f4 <getChannel36>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	8023      	strh	r3, [r4, #0]
	arr[25] = getChannel22();
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8002ad8:	f7ff fe14 	bl	8002704 <getChannel22>
 8002adc:	4603      	mov	r3, r0
 8002ade:	8023      	strh	r3, [r4, #0]
	arr[26] = getChannel55();
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8002ae6:	f7ff fe15 	bl	8002714 <getChannel55>
 8002aea:	4603      	mov	r3, r0
 8002aec:	8023      	strh	r3, [r4, #0]
	arr[27] = getChannel5();
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f103 0436 	add.w	r4, r3, #54	; 0x36
 8002af4:	f7ff fe16 	bl	8002724 <getChannel5>
 8002af8:	4603      	mov	r3, r0
 8002afa:	8023      	strh	r3, [r4, #0]
	arr[28] = getChannel53();
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8002b02:	f7ff fe17 	bl	8002734 <getChannel53>
 8002b06:	4603      	mov	r3, r0
 8002b08:	8023      	strh	r3, [r4, #0]
	arr[29] = getChannel7();
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f103 043a 	add.w	r4, r3, #58	; 0x3a
 8002b10:	f7ff fe18 	bl	8002744 <getChannel7>
 8002b14:	4603      	mov	r3, r0
 8002b16:	8023      	strh	r3, [r4, #0]
	arr[30] = getChannel39();
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8002b1e:	f7ff fe19 	bl	8002754 <getChannel39>
 8002b22:	4603      	mov	r3, r0
 8002b24:	8023      	strh	r3, [r4, #0]
	arr[31] = getChannel21();
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f103 043e 	add.w	r4, r3, #62	; 0x3e
 8002b2c:	f7ff fe1a 	bl	8002764 <getChannel21>
 8002b30:	4603      	mov	r3, r0
 8002b32:	8023      	strh	r3, [r4, #0]

	/* Integration Cycle C */
	arr[32] = getChannel37();
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8002b3a:	f7ff fe1b 	bl	8002774 <getChannel37>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	8023      	strh	r3, [r4, #0]
	arr[33] = getChannel23();
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f103 0442 	add.w	r4, r3, #66	; 0x42
 8002b48:	f7ff fe1c 	bl	8002784 <getChannel23>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	8023      	strh	r3, [r4, #0]
	arr[34] = getChannel40();
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f103 0444 	add.w	r4, r3, #68	; 0x44
 8002b56:	f7ff fe1d 	bl	8002794 <getChannel40>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	8023      	strh	r3, [r4, #0]
	arr[35] = getChannel26();
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f103 0446 	add.w	r4, r3, #70	; 0x46
 8002b64:	f7ff fe1e 	bl	80027a4 <getChannel26>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	8023      	strh	r3, [r4, #0]
	arr[36] = getChannel42();
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8002b72:	f7ff fe1f 	bl	80027b4 <getChannel42>
 8002b76:	4603      	mov	r3, r0
 8002b78:	8023      	strh	r3, [r4, #0]
	arr[37] = getChannel24();
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f103 044a 	add.w	r4, r3, #74	; 0x4a
 8002b80:	f7ff fe20 	bl	80027c4 <getChannel24>
 8002b84:	4603      	mov	r3, r0
 8002b86:	8023      	strh	r3, [r4, #0]
	arr[38] = getChannel56();
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f103 044c 	add.w	r4, r3, #76	; 0x4c
 8002b8e:	f7ff fe21 	bl	80027d4 <getChannel56>
 8002b92:	4603      	mov	r3, r0
 8002b94:	8023      	strh	r3, [r4, #0]
	arr[39] = getChannel10();
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f103 044e 	add.w	r4, r3, #78	; 0x4e
 8002b9c:	f7ff fe22 	bl	80027e4 <getChannel10>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	8023      	strh	r3, [r4, #0]

	arr[40] = getChannel58();
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8002baa:	f7ff fe23 	bl	80027f4 <getChannel58>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	8023      	strh	r3, [r4, #0]
	arr[41] = getChannel8();
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f103 0452 	add.w	r4, r3, #82	; 0x52
 8002bb8:	f7ff fe24 	bl	8002804 <getChannel8>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	8023      	strh	r3, [r4, #0]
	arr[42] = getChannel41();
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f103 0454 	add.w	r4, r3, #84	; 0x54
 8002bc6:	f7ff fe25 	bl	8002814 <getChannel41>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	8023      	strh	r3, [r4, #0]
	arr[43] = getChannel27();
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f103 0456 	add.w	r4, r3, #86	; 0x56
 8002bd4:	f7ff fe26 	bl	8002824 <getChannel27>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	8023      	strh	r3, [r4, #0]
	arr[44] = getChannel43();
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f103 0458 	add.w	r4, r3, #88	; 0x58
 8002be2:	f7ff fe27 	bl	8002834 <getChannel43>
 8002be6:	4603      	mov	r3, r0
 8002be8:	8023      	strh	r3, [r4, #0]
	arr[45] = getChannel25();
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f103 045a 	add.w	r4, r3, #90	; 0x5a
 8002bf0:	f7ff fe28 	bl	8002844 <getChannel25>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	8023      	strh	r3, [r4, #0]
	arr[46] = getChannel57();
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8002bfe:	f7ff fe29 	bl	8002854 <getChannel57>
 8002c02:	4603      	mov	r3, r0
 8002c04:	8023      	strh	r3, [r4, #0]
	arr[47] = getChannel11();
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f103 045e 	add.w	r4, r3, #94	; 0x5e
 8002c0c:	f7ff fe2a 	bl	8002864 <getChannel11>
 8002c10:	4603      	mov	r3, r0
 8002c12:	8023      	strh	r3, [r4, #0]

	/* Integration Cycle D */
	arr[48] = getChannel59();
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8002c1a:	f7ff fe2b 	bl	8002874 <getChannel59>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	8023      	strh	r3, [r4, #0]
	arr[49] = getChannel9();
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f103 0462 	add.w	r4, r3, #98	; 0x62
 8002c28:	f7ff fe2c 	bl	8002884 <getChannel9>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	8023      	strh	r3, [r4, #0]
	arr[50] = getChannel44();
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f103 0464 	add.w	r4, r3, #100	; 0x64
 8002c36:	f7ff fe2d 	bl	8002894 <getChannel44>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	8023      	strh	r3, [r4, #0]
	arr[51] = getChannel30();
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f103 0466 	add.w	r4, r3, #102	; 0x66
 8002c44:	f7ff fe2e 	bl	80028a4 <getChannel30>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	8023      	strh	r3, [r4, #0]
	arr[52] = getChannel46();
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8002c52:	f7ff fe2f 	bl	80028b4 <getChannel46>
 8002c56:	4603      	mov	r3, r0
 8002c58:	8023      	strh	r3, [r4, #0]
	arr[53] = getChannel28();
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f103 046a 	add.w	r4, r3, #106	; 0x6a
 8002c60:	f7ff fe30 	bl	80028c4 <getChannel28>
 8002c64:	4603      	mov	r3, r0
 8002c66:	8023      	strh	r3, [r4, #0]
	arr[54] = getChannel60();
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8002c6e:	f7ff fe31 	bl	80028d4 <getChannel60>
 8002c72:	4603      	mov	r3, r0
 8002c74:	8023      	strh	r3, [r4, #0]
	arr[55] = getChannel14();
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 8002c7c:	f7ff fe32 	bl	80028e4 <getChannel14>
 8002c80:	4603      	mov	r3, r0
 8002c82:	8023      	strh	r3, [r4, #0]

	arr[56] = getChannel62();
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8002c8a:	f7ff fe33 	bl	80028f4 <getChannel62>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	8023      	strh	r3, [r4, #0]
	arr[57] = getChannel12();
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f103 0472 	add.w	r4, r3, #114	; 0x72
 8002c98:	f7ff fe34 	bl	8002904 <getChannel12>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	8023      	strh	r3, [r4, #0]
	arr[58] = getChannel45();
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f103 0474 	add.w	r4, r3, #116	; 0x74
 8002ca6:	f7ff fe35 	bl	8002914 <getChannel45>
 8002caa:	4603      	mov	r3, r0
 8002cac:	8023      	strh	r3, [r4, #0]
	arr[59] = getChannel31();
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f103 0476 	add.w	r4, r3, #118	; 0x76
 8002cb4:	f7ff fe36 	bl	8002924 <getChannel31>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	8023      	strh	r3, [r4, #0]
	arr[60] = getChannel47();
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8002cc2:	f7ff fe37 	bl	8002934 <getChannel47>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	8023      	strh	r3, [r4, #0]
	arr[61] = getChannel29();
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f103 047a 	add.w	r4, r3, #122	; 0x7a
 8002cd0:	f7ff fe38 	bl	8002944 <getChannel29>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	8023      	strh	r3, [r4, #0]
	arr[62] = getChannel61();
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8002cde:	f7ff fe39 	bl	8002954 <getChannel61>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	8023      	strh	r3, [r4, #0]
	arr[63] = getChannel15();
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f103 047e 	add.w	r4, r3, #126	; 0x7e
 8002cec:	f7ff fe3a 	bl	8002964 <getChannel15>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	8023      	strh	r3, [r4, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd90      	pop	{r4, r7, pc}

08002cfc <recordTemperatures>:
//}


// Helper function to record temperature data
uint16_t recordTemperatures(uint8_t addr)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2] = {0};
 8002d06:	2300      	movs	r3, #0
 8002d08:	81bb      	strh	r3, [r7, #12]
	AS7421_readRegisters(addr, 2, data);
 8002d0a:	f107 020c 	add.w	r2, r7, #12
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	2102      	movs	r1, #2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe fe7e 	bl	8001a14 <AS7421_readRegisters>

	// Combine the two bytes into a 16-bit value
	return ((uint16_t)data[1] << 8) | data[0];
 8002d18:	7b7b      	ldrb	r3, [r7, #13]
 8002d1a:	021b      	lsls	r3, r3, #8
 8002d1c:	b21a      	sxth	r2, r3
 8002d1e:	7b3b      	ldrb	r3, [r7, #12]
 8002d20:	b21b      	sxth	r3, r3
 8002d22:	4313      	orrs	r3, r2
 8002d24:	b21b      	sxth	r3, r3
 8002d26:	b29b      	uxth	r3, r3
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <getTemp_IntA>:

uint16_t getTemp_IntA()
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
	return recordTemperatures(TEMPA);
 8002d34:	2078      	movs	r0, #120	; 0x78
 8002d36:	f7ff ffe1 	bl	8002cfc <recordTemperatures>
 8002d3a:	4603      	mov	r3, r0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <getTemp_IntB>:
uint16_t getTemp_IntB()
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
	return recordTemperatures(TEMPB);
 8002d44:	207a      	movs	r0, #122	; 0x7a
 8002d46:	f7ff ffd9 	bl	8002cfc <recordTemperatures>
 8002d4a:	4603      	mov	r3, r0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <getTemp_IntC>:
uint16_t getTemp_IntC()
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
	return recordTemperatures(TEMPC);
 8002d54:	207c      	movs	r0, #124	; 0x7c
 8002d56:	f7ff ffd1 	bl	8002cfc <recordTemperatures>
 8002d5a:	4603      	mov	r3, r0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <getTemp_IntD>:
uint16_t getTemp_IntD()
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
	return recordTemperatures(TEMPD);
 8002d64:	207e      	movs	r0, #126	; 0x7e
 8002d66:	f7ff ffc9 	bl	8002cfc <recordTemperatures>
 8002d6a:	4603      	mov	r3, r0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <getAllTemperatureData>:

void getAllTemperatureData(uint16_t arr[TEMPSIZE])
{
 8002d70:	b590      	push	{r4, r7, lr}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
	arr[0] = getTemp_IntA();
 8002d78:	f7ff ffda 	bl	8002d30 <getTemp_IntA>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	461a      	mov	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	801a      	strh	r2, [r3, #0]
	arr[1] = getTemp_IntB();
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	1c9c      	adds	r4, r3, #2
 8002d88:	f7ff ffda 	bl	8002d40 <getTemp_IntB>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	8023      	strh	r3, [r4, #0]
	arr[2] = getTemp_IntC();
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	1d1c      	adds	r4, r3, #4
 8002d94:	f7ff ffdc 	bl	8002d50 <getTemp_IntC>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	8023      	strh	r3, [r4, #0]
	arr[3] = getTemp_IntD();
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	1d9c      	adds	r4, r3, #6
 8002da0:	f7ff ffde 	bl	8002d60 <getTemp_IntD>
 8002da4:	4603      	mov	r3, r0
 8002da6:	8023      	strh	r3, [r4, #0]
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd90      	pop	{r4, r7, pc}

08002db0 <GPIO_Init>:

#define LED_PIN			PIN5
#define BTN_PIN			PIN13

void GPIO_Init(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA and GPIOC*/
	RCC->AHB1ENR |= GPIOAEN;
 8002db4:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <GPIO_Init+0x58>)
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	4a13      	ldr	r2, [pc, #76]	; (8002e08 <GPIO_Init+0x58>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= GPIOCEN;
 8002dc0:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <GPIO_Init+0x58>)
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	4a10      	ldr	r2, [pc, #64]	; (8002e08 <GPIO_Init+0x58>)
 8002dc6:	f043 0304 	orr.w	r3, r3, #4
 8002dca:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA5 as output pin*/
	GPIOA->MODER |= (1U<<10);
 8002dcc:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <GPIO_Init+0x5c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a0e      	ldr	r2, [pc, #56]	; (8002e0c <GPIO_Init+0x5c>)
 8002dd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dd6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~ (1U<<11);
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <GPIO_Init+0x5c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a0b      	ldr	r2, [pc, #44]	; (8002e0c <GPIO_Init+0x5c>)
 8002dde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002de2:	6013      	str	r3, [r2, #0]

	/*Set PC13 as input pin*/
	GPIOC->MODER &=~ (1U<<26);
 8002de4:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <GPIO_Init+0x60>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a09      	ldr	r2, [pc, #36]	; (8002e10 <GPIO_Init+0x60>)
 8002dea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dee:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~ (1U<<27);
 8002df0:	4b07      	ldr	r3, [pc, #28]	; (8002e10 <GPIO_Init+0x60>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a06      	ldr	r2, [pc, #24]	; (8002e10 <GPIO_Init+0x60>)
 8002df6:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8002dfa:	6013      	str	r3, [r2, #0]
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	40020000 	.word	0x40020000
 8002e10:	40020800 	.word	0x40020800

08002e14 <UserBtn_Control>:

bool UserBtn_Control(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
	/*Check if BTN is pressed*/
	if (!(GPIOC->IDR & BTN_PIN))
 8002e18:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <UserBtn_Control+0x30>)
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d104      	bne.n	8002e2e <UserBtn_Control+0x1a>
	{
		/*Turn on LED*/
		GPIOA->BSRR = LED_PIN;
 8002e24:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <UserBtn_Control+0x34>)
 8002e26:	2220      	movs	r2, #32
 8002e28:	619a      	str	r2, [r3, #24]
		return true;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e004      	b.n	8002e38 <UserBtn_Control+0x24>
	}
	else
	{
		/*Turn off LED*/
		GPIOA->BSRR = (1U<<21);
 8002e2e:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <UserBtn_Control+0x34>)
 8002e30:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002e34:	619a      	str	r2, [r3, #24]
		return false;
 8002e36:	2300      	movs	r3, #0
	}
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	40020800 	.word	0x40020800
 8002e48:	40020000 	.word	0x40020000

08002e4c <I2C1_Init>:
//#define	SR1_BTF					(1U<<2)
//#define SR1_AF					(1U<<10)


void I2C1_Init(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOB*/
	RCC->AHB1ENR |= GPIOBEN;
 8002e50:	4b4d      	ldr	r3, [pc, #308]	; (8002f88 <I2C1_Init+0x13c>)
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	4a4c      	ldr	r2, [pc, #304]	; (8002f88 <I2C1_Init+0x13c>)
 8002e56:	f043 0302 	orr.w	r3, r3, #2
 8002e5a:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PB8 and PB9 mode to alternate function*/
	GPIOB->MODER &= ~(1U<<16);
 8002e5c:	4b4b      	ldr	r3, [pc, #300]	; (8002f8c <I2C1_Init+0x140>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a4a      	ldr	r2, [pc, #296]	; (8002f8c <I2C1_Init+0x140>)
 8002e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e66:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<17);
 8002e68:	4b48      	ldr	r3, [pc, #288]	; (8002f8c <I2C1_Init+0x140>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a47      	ldr	r2, [pc, #284]	; (8002f8c <I2C1_Init+0x140>)
 8002e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e72:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &= ~(1U<<18);
 8002e74:	4b45      	ldr	r3, [pc, #276]	; (8002f8c <I2C1_Init+0x140>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a44      	ldr	r2, [pc, #272]	; (8002f8c <I2C1_Init+0x140>)
 8002e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e7e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U<<19);
 8002e80:	4b42      	ldr	r3, [pc, #264]	; (8002f8c <I2C1_Init+0x140>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a41      	ldr	r2, [pc, #260]	; (8002f8c <I2C1_Init+0x140>)
 8002e86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e8a:	6013      	str	r3, [r2, #0]

	/*Set PB8 and PB9 output type to open drain*/
	GPIOB->OTYPER |= (1U<<8);
 8002e8c:	4b3f      	ldr	r3, [pc, #252]	; (8002f8c <I2C1_Init+0x140>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4a3e      	ldr	r2, [pc, #248]	; (8002f8c <I2C1_Init+0x140>)
 8002e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e96:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= (1U<<9);
 8002e98:	4b3c      	ldr	r3, [pc, #240]	; (8002f8c <I2C1_Init+0x140>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	4a3b      	ldr	r2, [pc, #236]	; (8002f8c <I2C1_Init+0x140>)
 8002e9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ea2:	6053      	str	r3, [r2, #4]

	/*Enable Pull-up for PB6 and PB7*/
	GPIOB->PUPDR |= (1U<<16);
 8002ea4:	4b39      	ldr	r3, [pc, #228]	; (8002f8c <I2C1_Init+0x140>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4a38      	ldr	r2, [pc, #224]	; (8002f8c <I2C1_Init+0x140>)
 8002eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eae:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<17);
 8002eb0:	4b36      	ldr	r3, [pc, #216]	; (8002f8c <I2C1_Init+0x140>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	4a35      	ldr	r2, [pc, #212]	; (8002f8c <I2C1_Init+0x140>)
 8002eb6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002eba:	60d3      	str	r3, [r2, #12]

	GPIOB->PUPDR |= (1U<<18);
 8002ebc:	4b33      	ldr	r3, [pc, #204]	; (8002f8c <I2C1_Init+0x140>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	4a32      	ldr	r2, [pc, #200]	; (8002f8c <I2C1_Init+0x140>)
 8002ec2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec6:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U<<19);
 8002ec8:	4b30      	ldr	r3, [pc, #192]	; (8002f8c <I2C1_Init+0x140>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4a2f      	ldr	r2, [pc, #188]	; (8002f8c <I2C1_Init+0x140>)
 8002ece:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002ed2:	60d3      	str	r3, [r2, #12]

	/*Set PB8 and PB9 alternate function type to I2C (AF4)
	 * PB8 --> SCL
	 * PB9 --> SDA*/
	GPIOB->AFR[1] &= ~(1U<<0);
 8002ed4:	4b2d      	ldr	r3, [pc, #180]	; (8002f8c <I2C1_Init+0x140>)
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	4a2c      	ldr	r2, [pc, #176]	; (8002f8c <I2C1_Init+0x140>)
 8002eda:	f023 0301 	bic.w	r3, r3, #1
 8002ede:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U<<1);
 8002ee0:	4b2a      	ldr	r3, [pc, #168]	; (8002f8c <I2C1_Init+0x140>)
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	4a29      	ldr	r2, [pc, #164]	; (8002f8c <I2C1_Init+0x140>)
 8002ee6:	f023 0302 	bic.w	r3, r3, #2
 8002eea:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1U<<2);
 8002eec:	4b27      	ldr	r3, [pc, #156]	; (8002f8c <I2C1_Init+0x140>)
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	4a26      	ldr	r2, [pc, #152]	; (8002f8c <I2C1_Init+0x140>)
 8002ef2:	f043 0304 	orr.w	r3, r3, #4
 8002ef6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U<<3);
 8002ef8:	4b24      	ldr	r3, [pc, #144]	; (8002f8c <I2C1_Init+0x140>)
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	4a23      	ldr	r2, [pc, #140]	; (8002f8c <I2C1_Init+0x140>)
 8002efe:	f023 0308 	bic.w	r3, r3, #8
 8002f02:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOB->AFR[1] &= ~(1U<<4);
 8002f04:	4b21      	ldr	r3, [pc, #132]	; (8002f8c <I2C1_Init+0x140>)
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	4a20      	ldr	r2, [pc, #128]	; (8002f8c <I2C1_Init+0x140>)
 8002f0a:	f023 0310 	bic.w	r3, r3, #16
 8002f0e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U<<5);
 8002f10:	4b1e      	ldr	r3, [pc, #120]	; (8002f8c <I2C1_Init+0x140>)
 8002f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f14:	4a1d      	ldr	r2, [pc, #116]	; (8002f8c <I2C1_Init+0x140>)
 8002f16:	f023 0320 	bic.w	r3, r3, #32
 8002f1a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1U<<6);
 8002f1c:	4b1b      	ldr	r3, [pc, #108]	; (8002f8c <I2C1_Init+0x140>)
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	4a1a      	ldr	r2, [pc, #104]	; (8002f8c <I2C1_Init+0x140>)
 8002f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f26:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U<<7);
 8002f28:	4b18      	ldr	r3, [pc, #96]	; (8002f8c <I2C1_Init+0x140>)
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	4a17      	ldr	r2, [pc, #92]	; (8002f8c <I2C1_Init+0x140>)
 8002f2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f32:	6253      	str	r3, [r2, #36]	; 0x24

	/***Configuring I2C1***/

	/*Enable clock access to I2C1*/
	RCC->APB1ENR |= I2C1EN;
 8002f34:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <I2C1_Init+0x13c>)
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	4a13      	ldr	r2, [pc, #76]	; (8002f88 <I2C1_Init+0x13c>)
 8002f3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f3e:	6413      	str	r3, [r2, #64]	; 0x40

	/*Enter reset mode  */
	I2C1->CR1 |= (1U<<15);
 8002f40:	4b13      	ldr	r3, [pc, #76]	; (8002f90 <I2C1_Init+0x144>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a12      	ldr	r2, [pc, #72]	; (8002f90 <I2C1_Init+0x144>)
 8002f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f4a:	6013      	str	r3, [r2, #0]

	/*Come out of reset mode  */
	I2C1->CR1 &= ~(1U<<15);
 8002f4c:	4b10      	ldr	r3, [pc, #64]	; (8002f90 <I2C1_Init+0x144>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a0f      	ldr	r2, [pc, #60]	; (8002f90 <I2C1_Init+0x144>)
 8002f52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f56:	6013      	str	r3, [r2, #0]

	/*Set Peripheral clock frequency*/
	I2C1->CR2 = (1U<<4);   //16 Mhz
 8002f58:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <I2C1_Init+0x144>)
 8002f5a:	2210      	movs	r2, #16
 8002f5c:	605a      	str	r2, [r3, #4]
//
//	/*Set rise time */
//	I2C1->TRISE = SD_MODE_MAX_RISE_TIME; //(1000ns/(1/16MHz)+1 = 17

	/*Set I2C to fast mode, 400kHz clock */
	I2C1->CCR = 1; //Refer to ST reference manual for derivation
 8002f5e:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <I2C1_Init+0x144>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	61da      	str	r2, [r3, #28]
	I2C1->CCR = I2C_FAST_DUTY; //Set to Fast mode and duty cycle of 16/9
 8002f64:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <I2C1_Init+0x144>)
 8002f66:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002f6a:	61da      	str	r2, [r3, #28]

	/*Set rise time */
	I2C1->TRISE = 6;//FS_MODE_MAX_RISE_TIME; //(300ns/(1/16MHz)+1 = 5.8
 8002f6c:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <I2C1_Init+0x144>)
 8002f6e:	2206      	movs	r2, #6
 8002f70:	621a      	str	r2, [r3, #32]

	/*Enable I2C1 module */
	I2C1->CR1 |= CR1_PE;
 8002f72:	4b07      	ldr	r3, [pc, #28]	; (8002f90 <I2C1_Init+0x144>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a06      	ldr	r2, [pc, #24]	; (8002f90 <I2C1_Init+0x144>)
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6013      	str	r3, [r2, #0]
}
 8002f7e:	bf00      	nop
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	40020400 	.word	0x40020400
 8002f90:	40005400 	.word	0x40005400

08002f94 <I2C1_byteRead>:

void I2C1_byteRead(char saddr, char maddr, char* data) {
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	603a      	str	r2, [r7, #0]
 8002f9e:	71fb      	strb	r3, [r7, #7]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	71bb      	strb	r3, [r7, #6]

	  volatile int tmp;

	  /* Wait until bus not busy */
	  while (I2C1->SR2 & (SR2_BUSY)){}
 8002fa4:	bf00      	nop
 8002fa6:	4b37      	ldr	r3, [pc, #220]	; (8003084 <I2C1_byteRead+0xf0>)
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f9      	bne.n	8002fa6 <I2C1_byteRead+0x12>

	  /* Generate start condition */
	  I2C1->CR1 |= CR1_START;
 8002fb2:	4b34      	ldr	r3, [pc, #208]	; (8003084 <I2C1_byteRead+0xf0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a33      	ldr	r2, [pc, #204]	; (8003084 <I2C1_byteRead+0xf0>)
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbc:	6013      	str	r3, [r2, #0]

	  /* Wait until start condition flag is set, note the negation */
	  /* Stay in loop if start flag is not set */
	  while (!(I2C1->SR1 & (SR1_SB))){}
 8002fbe:	bf00      	nop
 8002fc0:	4b30      	ldr	r3, [pc, #192]	; (8003084 <I2C1_byteRead+0xf0>)
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0f9      	beq.n	8002fc0 <I2C1_byteRead+0x2c>

	  /* Transmit slave address + Write (0) */
	  /* This slave address is sent to each slave device along with an indication to establish either read or write communication */
	  /* Yo device A, I want to write to one of your memory registers */
	  I2C1->DR = saddr << 1; // shifting the address left makes room for the R/W bit, which is 0 for write
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	005a      	lsls	r2, r3, #1
 8002fd0:	4b2c      	ldr	r3, [pc, #176]	; (8003084 <I2C1_byteRead+0xf0>)
 8002fd2:	611a      	str	r2, [r3, #16]

	  /* Wait until address flag is set */
	  /* Each slave device compares the address from master to its own address and sends an ACK if matched */
	  /* I'm device A and of course you can write to one of my registers */
	  while (!(I2C1->SR1 & (SR1_ADDR))){}
 8002fd4:	bf00      	nop
 8002fd6:	4b2b      	ldr	r3, [pc, #172]	; (8003084 <I2C1_byteRead+0xf0>)
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f9      	beq.n	8002fd6 <I2C1_byteRead+0x42>

	  /* Clear address flag by reading SR2 register */
	  tmp = I2C1->SR2;
 8002fe2:	4b28      	ldr	r3, [pc, #160]	; (8003084 <I2C1_byteRead+0xf0>)
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	60fb      	str	r3, [r7, #12]

	  /*Wait until transmitter empty */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 8002fe8:	bf00      	nop
 8002fea:	4b26      	ldr	r3, [pc, #152]	; (8003084 <I2C1_byteRead+0xf0>)
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f9      	beq.n	8002fea <I2C1_byteRead+0x56>

	  /* Send register address */
	  /* Aight, here is the address of the register I'm want to write to read from*/
	  I2C1->DR = maddr;
 8002ff6:	4a23      	ldr	r2, [pc, #140]	; (8003084 <I2C1_byteRead+0xf0>)
 8002ff8:	79bb      	ldrb	r3, [r7, #6]
 8002ffa:	6113      	str	r3, [r2, #16]

	  /*Wait until transmitter empty */
	  /* No probs */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 8002ffc:	bf00      	nop
 8002ffe:	4b21      	ldr	r3, [pc, #132]	; (8003084 <I2C1_byteRead+0xf0>)
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003006:	2b00      	cmp	r3, #0
 8003008:	d0f9      	beq.n	8002ffe <I2C1_byteRead+0x6a>

	 /* Begin actual reading process once slave device and register of interest are understood between master and slave*/
	 /*Generate restart */
	 I2C1->CR1 |= CR1_START;
 800300a:	4b1e      	ldr	r3, [pc, #120]	; (8003084 <I2C1_byteRead+0xf0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <I2C1_byteRead+0xf0>)
 8003010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003014:	6013      	str	r3, [r2, #0]

	 /* Wait until start flag is set */
	 while (!(I2C1->SR1 & SR1_SB)){}
 8003016:	bf00      	nop
 8003018:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <I2C1_byteRead+0xf0>)
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f003 0301 	and.w	r3, r3, #1
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0f9      	beq.n	8003018 <I2C1_byteRead+0x84>

	 /* Transmit slave address + Read */
	 I2C1->DR = saddr << 1 | 1;
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	f043 0201 	orr.w	r2, r3, #1
 800302c:	4b15      	ldr	r3, [pc, #84]	; (8003084 <I2C1_byteRead+0xf0>)
 800302e:	611a      	str	r2, [r3, #16]

	 /* Wait until addr flag is set */
	 while (!(I2C1->SR1 & (SR1_ADDR))){}
 8003030:	bf00      	nop
 8003032:	4b14      	ldr	r3, [pc, #80]	; (8003084 <I2C1_byteRead+0xf0>)
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f9      	beq.n	8003032 <I2C1_byteRead+0x9e>

	 /* Clear addr flag */
	 tmp = I2C1->SR2;
 800303e:	4b11      	ldr	r3, [pc, #68]	; (8003084 <I2C1_byteRead+0xf0>)
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	60fb      	str	r3, [r7, #12]

	 /* Disable Acknowledge */
	 I2C1->CR1 &= ~CR1_ACK;
 8003044:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <I2C1_byteRead+0xf0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a0e      	ldr	r2, [pc, #56]	; (8003084 <I2C1_byteRead+0xf0>)
 800304a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800304e:	6013      	str	r3, [r2, #0]

	 /* Generate stop after data received */
	 I2C1->CR1 |= CR1_STOP;
 8003050:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <I2C1_byteRead+0xf0>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a0b      	ldr	r2, [pc, #44]	; (8003084 <I2C1_byteRead+0xf0>)
 8003056:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800305a:	6013      	str	r3, [r2, #0]

	 /* Wait until RXNE flag is set
	  * Wait until receiver is not empty (has contents to read)*/
	 while (!(I2C1->SR1 & SR1_RXNE)){}
 800305c:	bf00      	nop
 800305e:	4b09      	ldr	r3, [pc, #36]	; (8003084 <I2C1_byteRead+0xf0>)
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f9      	beq.n	800305e <I2C1_byteRead+0xca>

	 /* Read data from DR */
	 *data++ = I2C1->DR;
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <I2C1_byteRead+0xf0>)
 800306c:	6919      	ldr	r1, [r3, #16]
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	603a      	str	r2, [r7, #0]
 8003074:	b2ca      	uxtb	r2, r1
 8003076:	701a      	strb	r2, [r3, #0]
}
 8003078:	bf00      	nop
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	40005400 	.word	0x40005400

08003088 <I2C1_burstRead>:

void I2C1_burstRead(char saddr, char maddr, int n, char* data) {
 8003088:	b480      	push	{r7}
 800308a:	b087      	sub	sp, #28
 800308c:	af00      	add	r7, sp, #0
 800308e:	60ba      	str	r2, [r7, #8]
 8003090:	607b      	str	r3, [r7, #4]
 8003092:	4603      	mov	r3, r0
 8003094:	73fb      	strb	r3, [r7, #15]
 8003096:	460b      	mov	r3, r1
 8003098:	73bb      	strb	r3, [r7, #14]

	  volatile int tmp;

	  /* Wait until bus not busy */
	  while (I2C1->SR2 & (SR2_BUSY)){}
 800309a:	bf00      	nop
 800309c:	4b47      	ldr	r3, [pc, #284]	; (80031bc <I2C1_burstRead+0x134>)
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1f9      	bne.n	800309c <I2C1_burstRead+0x14>

	  /* Generate start condition */
	  I2C1->CR1 |= CR1_START;
 80030a8:	4b44      	ldr	r3, [pc, #272]	; (80031bc <I2C1_burstRead+0x134>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a43      	ldr	r2, [pc, #268]	; (80031bc <I2C1_burstRead+0x134>)
 80030ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b2:	6013      	str	r3, [r2, #0]

	  /* Wait until start condition flag is set, note the negation */
	  /* Stay in loop if start flag is not set */
	  while (!(I2C1->SR1 & (SR1_SB))){}
 80030b4:	bf00      	nop
 80030b6:	4b41      	ldr	r3, [pc, #260]	; (80031bc <I2C1_burstRead+0x134>)
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f9      	beq.n	80030b6 <I2C1_burstRead+0x2e>

	  /* Transmit slave address + Write (0) */
	  /* This slave address is sent to each slave device along with an indication to establish either read or write communication */
	  I2C1->DR = saddr << 1; // shifting the address left makes room for the R/W bit, which is 0 for write
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
 80030c4:	005a      	lsls	r2, r3, #1
 80030c6:	4b3d      	ldr	r3, [pc, #244]	; (80031bc <I2C1_burstRead+0x134>)
 80030c8:	611a      	str	r2, [r3, #16]

	  /* Wait until address flag is set */
	  /* Each slave device compares the address from master to its own address and sends an ACK if matched */
	  while (!(I2C1->SR1 & (SR1_ADDR))){}
 80030ca:	bf00      	nop
 80030cc:	4b3b      	ldr	r3, [pc, #236]	; (80031bc <I2C1_burstRead+0x134>)
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	f003 0302 	and.w	r3, r3, #2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f9      	beq.n	80030cc <I2C1_burstRead+0x44>

	  /* Clear address flag by reading SR2 register */
	  tmp = I2C1->SR2;
 80030d8:	4b38      	ldr	r3, [pc, #224]	; (80031bc <I2C1_burstRead+0x134>)
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	617b      	str	r3, [r7, #20]

	  /*Wait until transmitter empty */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 80030de:	bf00      	nop
 80030e0:	4b36      	ldr	r3, [pc, #216]	; (80031bc <I2C1_burstRead+0x134>)
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f9      	beq.n	80030e0 <I2C1_burstRead+0x58>

	  /* Send register address */
	  I2C1->DR = maddr;
 80030ec:	4a33      	ldr	r2, [pc, #204]	; (80031bc <I2C1_burstRead+0x134>)
 80030ee:	7bbb      	ldrb	r3, [r7, #14]
 80030f0:	6113      	str	r3, [r2, #16]

	  /*Wait until transmitter empty */
	  while (!(I2C1->SR1 & SR1_TXE)){}
 80030f2:	bf00      	nop
 80030f4:	4b31      	ldr	r3, [pc, #196]	; (80031bc <I2C1_burstRead+0x134>)
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0f9      	beq.n	80030f4 <I2C1_burstRead+0x6c>

	 /* Begin actual reading process once slave device and register of interest are understood between master and slave*/
	 /*Generate restart */
	 I2C1->CR1 |= CR1_START;
 8003100:	4b2e      	ldr	r3, [pc, #184]	; (80031bc <I2C1_burstRead+0x134>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a2d      	ldr	r2, [pc, #180]	; (80031bc <I2C1_burstRead+0x134>)
 8003106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310a:	6013      	str	r3, [r2, #0]

	 /* Wait until start flag is set */
	 while (!(I2C1->SR1 & SR1_SB)){}
 800310c:	bf00      	nop
 800310e:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <I2C1_burstRead+0x134>)
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f9      	beq.n	800310e <I2C1_burstRead+0x86>

	 /* Transmit slave address + Read */
	 I2C1->DR = saddr << 1 | 1;
 800311a:	7bfb      	ldrb	r3, [r7, #15]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	f043 0201 	orr.w	r2, r3, #1
 8003122:	4b26      	ldr	r3, [pc, #152]	; (80031bc <I2C1_burstRead+0x134>)
 8003124:	611a      	str	r2, [r3, #16]

	 /* Wait until addr flag is set */
	 while (!(I2C1->SR1 & (SR1_ADDR))){}
 8003126:	bf00      	nop
 8003128:	4b24      	ldr	r3, [pc, #144]	; (80031bc <I2C1_burstRead+0x134>)
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f9      	beq.n	8003128 <I2C1_burstRead+0xa0>

	 /* Clear addr flag */
	 tmp = I2C1->SR2;
 8003134:	4b21      	ldr	r3, [pc, #132]	; (80031bc <I2C1_burstRead+0x134>)
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	617b      	str	r3, [r7, #20]

	 /* Enable Acknowledge */
	 I2C1->CR1 |= CR1_ACK;
 800313a:	4b20      	ldr	r3, [pc, #128]	; (80031bc <I2C1_burstRead+0x134>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a1f      	ldr	r2, [pc, #124]	; (80031bc <I2C1_burstRead+0x134>)
 8003140:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003144:	6013      	str	r3, [r2, #0]

	 while(n > 0U)
 8003146:	e02e      	b.n	80031a6 <I2C1_burstRead+0x11e>
	 {
		 /*if one byte*/
		 if(n == 1U)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d11a      	bne.n	8003184 <I2C1_burstRead+0xfc>
		 {
			 /* Disable Acknowledge */
			 I2C1->CR1 &= ~CR1_ACK;
 800314e:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <I2C1_burstRead+0x134>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a1a      	ldr	r2, [pc, #104]	; (80031bc <I2C1_burstRead+0x134>)
 8003154:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003158:	6013      	str	r3, [r2, #0]

			 /* Generate Stop */
			 I2C1->CR1 |= CR1_STOP;
 800315a:	4b18      	ldr	r3, [pc, #96]	; (80031bc <I2C1_burstRead+0x134>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a17      	ldr	r2, [pc, #92]	; (80031bc <I2C1_burstRead+0x134>)
 8003160:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003164:	6013      	str	r3, [r2, #0]

			 /* Wait for RXNE flag set */
			 while (!(I2C1->SR1 & SR1_RXNE)){}
 8003166:	bf00      	nop
 8003168:	4b14      	ldr	r3, [pc, #80]	; (80031bc <I2C1_burstRead+0x134>)
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f9      	beq.n	8003168 <I2C1_burstRead+0xe0>

			 /* Read data from DR */
			 *data++ = I2C1->DR;
 8003174:	4b11      	ldr	r3, [pc, #68]	; (80031bc <I2C1_burstRead+0x134>)
 8003176:	6919      	ldr	r1, [r3, #16]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	607a      	str	r2, [r7, #4]
 800317e:	b2ca      	uxtb	r2, r1
 8003180:	701a      	strb	r2, [r3, #0]
			 break;
 8003182:	e014      	b.n	80031ae <I2C1_burstRead+0x126>
		 }
		 else
		 {
			 /* Wait until RXNE flag is set */
			 while (!(I2C1->SR1 & SR1_RXNE)){}
 8003184:	bf00      	nop
 8003186:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <I2C1_burstRead+0x134>)
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f9      	beq.n	8003186 <I2C1_burstRead+0xfe>

			 /* Read data from DR */
			 (*data++) = I2C1->DR;
 8003192:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <I2C1_burstRead+0x134>)
 8003194:	6919      	ldr	r1, [r3, #16]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	b2ca      	uxtb	r2, r1
 800319e:	701a      	strb	r2, [r3, #0]

			 n--;
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	60bb      	str	r3, [r7, #8]
	 while(n > 0U)
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1cd      	bne.n	8003148 <I2C1_burstRead+0xc0>
		 }
	 }

}
 80031ac:	bf00      	nop
 80031ae:	bf00      	nop
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40005400 	.word	0x40005400

080031c0 <I2C1_burstWrite>:

void I2C1_burstWrite(char saddr, char maddr, int n, char* data) {
 80031c0:	b480      	push	{r7}
 80031c2:	b087      	sub	sp, #28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60ba      	str	r2, [r7, #8]
 80031c8:	607b      	str	r3, [r7, #4]
 80031ca:	4603      	mov	r3, r0
 80031cc:	73fb      	strb	r3, [r7, #15]
 80031ce:	460b      	mov	r3, r1
 80031d0:	73bb      	strb	r3, [r7, #14]

	/* Temporary variable to read SR2*/
	volatile int tmp;

	/* Wait until bus not busy */
	while (I2C1->SR2 & (SR2_BUSY)){}
 80031d2:	bf00      	nop
 80031d4:	4b2a      	ldr	r3, [pc, #168]	; (8003280 <I2C1_burstWrite+0xc0>)
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1f9      	bne.n	80031d4 <I2C1_burstWrite+0x14>

	/* Generate start condition */
	I2C1->CR1 |= CR1_START;
 80031e0:	4b27      	ldr	r3, [pc, #156]	; (8003280 <I2C1_burstWrite+0xc0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a26      	ldr	r2, [pc, #152]	; (8003280 <I2C1_burstWrite+0xc0>)
 80031e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031ea:	6013      	str	r3, [r2, #0]

	/* Wait until start condition flag is set, note the negation */
	/* Stay in loop if start flag is not set*/
	while (!(I2C1->SR1 & (SR1_SB))){}
 80031ec:	bf00      	nop
 80031ee:	4b24      	ldr	r3, [pc, #144]	; (8003280 <I2C1_burstWrite+0xc0>)
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f9      	beq.n	80031ee <I2C1_burstWrite+0x2e>

	/* Transmit slave address + Write (0) */
	/* This slave address is sent to each slave device along with an indication to establish either read or write communication*/
	/* Yo device A, I want to write to one of your memory registers */
	I2C1->DR = saddr << 1; // shifting the address left makes room for the R/W bit, which is 0 for write
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	005a      	lsls	r2, r3, #1
 80031fe:	4b20      	ldr	r3, [pc, #128]	; (8003280 <I2C1_burstWrite+0xc0>)
 8003200:	611a      	str	r2, [r3, #16]

	/* Wait until address flag is set */
	/* Each slave device compares the address from master to its own address and sends an ACK if mathced*/
	/* I'm device A and of course you can write to one of my registers */
	while (!(I2C1->SR1 & (SR1_ADDR))){}
 8003202:	bf00      	nop
 8003204:	4b1e      	ldr	r3, [pc, #120]	; (8003280 <I2C1_burstWrite+0xc0>)
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f9      	beq.n	8003204 <I2C1_burstWrite+0x44>

	/* Clear address flag by reading SR2 register */
	tmp = I2C1->SR2;
 8003210:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <I2C1_burstWrite+0xc0>)
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	613b      	str	r3, [r7, #16]

	/*Wait until data register empty */
	while (!(I2C1->SR1 & SR1_TXE)){}
 8003216:	bf00      	nop
 8003218:	4b19      	ldr	r3, [pc, #100]	; (8003280 <I2C1_burstWrite+0xc0>)
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f9      	beq.n	8003218 <I2C1_burstWrite+0x58>

	/* Send register address */
	/* aight here is the register I'm writing to write to and the value I want written */
	I2C1->DR = maddr;
 8003224:	4a16      	ldr	r2, [pc, #88]	; (8003280 <I2C1_burstWrite+0xc0>)
 8003226:	7bbb      	ldrb	r3, [r7, #14]
 8003228:	6113      	str	r3, [r2, #16]

	for (int i = 0; i < n; i++) {
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	e00f      	b.n	8003250 <I2C1_burstWrite+0x90>

		/*Wait until data register empty */
		while (!(I2C1->SR1 & SR1_TXE)){}
 8003230:	bf00      	nop
 8003232:	4b13      	ldr	r3, [pc, #76]	; (8003280 <I2C1_burstWrite+0xc0>)
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f9      	beq.n	8003232 <I2C1_burstWrite+0x72>

		/* Transmit memory address */
		I2C1->DR = *data++;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	781a      	ldrb	r2, [r3, #0]
 8003246:	4b0e      	ldr	r3, [pc, #56]	; (8003280 <I2C1_burstWrite+0xc0>)
 8003248:	611a      	str	r2, [r3, #16]
	for (int i = 0; i < n; i++) {
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	3301      	adds	r3, #1
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	429a      	cmp	r2, r3
 8003256:	dbeb      	blt.n	8003230 <I2C1_burstWrite+0x70>
	}
	/* Wait until transfer finished */
	while (!(I2C1->SR1 & (SR1_BTF))){}
 8003258:	bf00      	nop
 800325a:	4b09      	ldr	r3, [pc, #36]	; (8003280 <I2C1_burstWrite+0xc0>)
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f9      	beq.n	800325a <I2C1_burstWrite+0x9a>

	/* Generate stop */
	I2C1->CR1 |= CR1_STOP;
 8003266:	4b06      	ldr	r3, [pc, #24]	; (8003280 <I2C1_burstWrite+0xc0>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a05      	ldr	r2, [pc, #20]	; (8003280 <I2C1_burstWrite+0xc0>)
 800326c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003270:	6013      	str	r3, [r2, #0]
}
 8003272:	bf00      	nop
 8003274:	371c      	adds	r7, #28
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40005400 	.word	0x40005400

08003284 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	f5ad 6de0 	sub.w	sp, sp, #1792	; 0x700
 800328a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800328c:	f000 fefe 	bl	800408c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003290:	f000 f8ec 	bl	800346c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003294:	f000 f97e 	bl	8003594 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8003298:	f000 f952 	bl	8003540 <MX_USART2_UART_Init>
	MX_BlueNRG_MS_Init();
 800329c:	f7fd fe0a 	bl	8000eb4 <MX_BlueNRG_MS_Init>
	/* USER CODE BEGIN 2 */
	GPIO_Init();
 80032a0:	f7ff fd86 	bl	8002db0 <GPIO_Init>
	I2C1_Init();
 80032a4:	f7ff fdd2 	bl	8002e4c <I2C1_Init>

	/* Mux *
	 * Note: calling enableChannel closes all the mux outputs before opening the specified channel
	 * Switching between channels puts previously ON channel in idle mode (LED still on but not measuring)
	 * Sensor state of previously ON channel resets to sleep mode with power on reset (i.e. power off then power on)*/
	enableChannel(CHANNEL_1);
 80032a8:	2002      	movs	r0, #2
 80032aa:	f000 fa39 	bl	8003720 <enableChannel>
	/* Sensor */
	// Containers to receive channel data
	uint16_t channel_data[CHANNELSIZE];
	uint16_t temp_data[CHANNELSIZE];

	uint32_t sum_data[CHANNELSIZE] = {0};
 80032ae:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 80032b2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80032b6:	4618      	mov	r0, r3
 80032b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032bc:	461a      	mov	r2, r3
 80032be:	2100      	movs	r1, #0
 80032c0:	f005 f806 	bl	80082d0 <memset>
	float avg_data[CHANNELSIZE] = {0};
 80032c4:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 80032c8:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 80032cc:	4618      	mov	r0, r3
 80032ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032d2:	461a      	mov	r2, r3
 80032d4:	2100      	movs	r1, #0
 80032d6:	f004 fffb 	bl	80082d0 <memset>

	startup();
 80032da:	f7fe fcc7 	bl	8001c6c <startup>
	HAL_Delay(2000);
 80032de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80032e2:	f000 ff45 	bl	8004170 <HAL_Delay>
	startMeasurements(true);
 80032e6:	2001      	movs	r0, #1
 80032e8:	f7ff f8ce 	bl	8002488 <startMeasurements>

	int count = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc

	/* Infinite loop */
	while (measurementActive()) {
 80032f2:	e0a6      	b.n	8003442 <main+0x1be>

		char uart_buf[1000];
		int uart_buf_len;
		performMeasurements(channel_data, temp_data);
 80032f4:	f207 52ec 	addw	r2, r7, #1516	; 0x5ec
 80032f8:	f207 636c 	addw	r3, r7, #1644	; 0x66c
 80032fc:	4611      	mov	r1, r2
 80032fe:	4618      	mov	r0, r3
 8003300:	f7fe fcdc 	bl	8001cbc <performMeasurements>
		printf("%i\n\r", -1);
 8003304:	f04f 31ff 	mov.w	r1, #4294967295
 8003308:	4855      	ldr	r0, [pc, #340]	; (8003460 <main+0x1dc>)
 800330a:	f004 fe73 	bl	8007ff4 <iprintf>
		printf("%i\n\r", count);
 800330e:	f8d7 16fc 	ldr.w	r1, [r7, #1788]	; 0x6fc
 8003312:	4853      	ldr	r0, [pc, #332]	; (8003460 <main+0x1dc>)
 8003314:	f004 fe6e 	bl	8007ff4 <iprintf>

		// Accumulate the readings
		for (int i = 0; i < CHANNELSIZE; i++){
 8003318:	2300      	movs	r3, #0
 800331a:	f8c7 36f8 	str.w	r3, [r7, #1784]	; 0x6f8
 800331e:	e01d      	b.n	800335c <main+0xd8>
		   sum_data[i] += channel_data[i];
 8003320:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 8003324:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003328:	f8d7 26f8 	ldr.w	r2, [r7, #1784]	; 0x6f8
 800332c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003330:	f8d7 36f8 	ldr.w	r3, [r7, #1784]	; 0x6f8
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 800333a:	443b      	add	r3, r7
 800333c:	f833 3c94 	ldrh.w	r3, [r3, #-148]
 8003340:	18d1      	adds	r1, r2, r3
 8003342:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 8003346:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800334a:	f8d7 26f8 	ldr.w	r2, [r7, #1784]	; 0x6f8
 800334e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int i = 0; i < CHANNELSIZE; i++){
 8003352:	f8d7 36f8 	ldr.w	r3, [r7, #1784]	; 0x6f8
 8003356:	3301      	adds	r3, #1
 8003358:	f8c7 36f8 	str.w	r3, [r7, #1784]	; 0x6f8
 800335c:	f8d7 36f8 	ldr.w	r3, [r7, #1784]	; 0x6f8
 8003360:	2b3f      	cmp	r3, #63	; 0x3f
 8003362:	dddd      	ble.n	8003320 <main+0x9c>
		}

		if (count >= AVERAGE_COUNT){
 8003364:	f8d7 36fc 	ldr.w	r3, [r7, #1788]	; 0x6fc
 8003368:	2b1d      	cmp	r3, #29
 800336a:	dd60      	ble.n	800342e <main+0x1aa>
			for (int i = 0; i < CHANNELSIZE; i++){
 800336c:	2300      	movs	r3, #0
 800336e:	f8c7 36f4 	str.w	r3, [r7, #1780]	; 0x6f4
 8003372:	e027      	b.n	80033c4 <main+0x140>
				avg_data[i] = (float)sum_data[i] / AVERAGE_COUNT;
 8003374:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 8003378:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800337c:	f8d7 26f4 	ldr.w	r2, [r7, #1780]	; 0x6f4
 8003380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003384:	ee07 3a90 	vmov	s15, r3
 8003388:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800338c:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8003390:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003394:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 8003398:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 800339c:	f8d7 36f4 	ldr.w	r3, [r7, #1780]	; 0x6f4
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	4413      	add	r3, r2
 80033a4:	edc3 7a00 	vstr	s15, [r3]
				sum_data[i] = 0; //Reset sum for next averaging window
 80033a8:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 80033ac:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80033b0:	f8d7 26f4 	ldr.w	r2, [r7, #1780]	; 0x6f4
 80033b4:	2100      	movs	r1, #0
 80033b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (int i = 0; i < CHANNELSIZE; i++){
 80033ba:	f8d7 36f4 	ldr.w	r3, [r7, #1780]	; 0x6f4
 80033be:	3301      	adds	r3, #1
 80033c0:	f8c7 36f4 	str.w	r3, [r7, #1780]	; 0x6f4
 80033c4:	f8d7 36f4 	ldr.w	r3, [r7, #1780]	; 0x6f4
 80033c8:	2b3f      	cmp	r3, #63	; 0x3f
 80033ca:	ddd3      	ble.n	8003374 <main+0xf0>
			}

			for (int i = 0; i < CHANNELSIZE; i++){
 80033cc:	2300      	movs	r3, #0
 80033ce:	f8c7 36f0 	str.w	r3, [r7, #1776]	; 0x6f0
 80033d2:	e020      	b.n	8003416 <main+0x192>
				uart_buf_len = sprintf(uart_buf, "%.3f\n\r", avg_data[i]);
 80033d4:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 80033d8:	f5a3 7245 	sub.w	r2, r3, #788	; 0x314
 80033dc:	f8d7 36f0 	ldr.w	r3, [r7, #1776]	; 0x6f0
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fd f8b6 	bl	8000558 <__aeabi_f2d>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	1d38      	adds	r0, r7, #4
 80033f2:	491c      	ldr	r1, [pc, #112]	; (8003464 <main+0x1e0>)
 80033f4:	f004 fe74 	bl	80080e0 <siprintf>
 80033f8:	f8c7 06ec 	str.w	r0, [r7, #1772]	; 0x6ec
				HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80033fc:	f8d7 36ec 	ldr.w	r3, [r7, #1772]	; 0x6ec
 8003400:	b29a      	uxth	r2, r3
 8003402:	1d39      	adds	r1, r7, #4
 8003404:	2364      	movs	r3, #100	; 0x64
 8003406:	4818      	ldr	r0, [pc, #96]	; (8003468 <main+0x1e4>)
 8003408:	f002 fafc 	bl	8005a04 <HAL_UART_Transmit>
			for (int i = 0; i < CHANNELSIZE; i++){
 800340c:	f8d7 36f0 	ldr.w	r3, [r7, #1776]	; 0x6f0
 8003410:	3301      	adds	r3, #1
 8003412:	f8c7 36f0 	str.w	r3, [r7, #1776]	; 0x6f0
 8003416:	f8d7 36f0 	ldr.w	r3, [r7, #1776]	; 0x6f0
 800341a:	2b3f      	cmp	r3, #63	; 0x3f
 800341c:	ddda      	ble.n	80033d4 <main+0x150>

			}
			MX_BlueNRG_MS_Process(avg_data);
 800341e:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8003422:	4618      	mov	r0, r3
 8003424:	f7fd fe08 	bl	8001038 <MX_BlueNRG_MS_Process>
			count = 0;
 8003428:	2300      	movs	r3, #0
 800342a:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc
		}
		count++;
 800342e:	f8d7 36fc 	ldr.w	r3, [r7, #1788]	; 0x6fc
 8003432:	3301      	adds	r3, #1
 8003434:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc

		/* Blue pushbutton breaks out of the while loop to put the device to sleep,
		 * have to reset the board to restart measurements */
		if (UserBtn_Control())
 8003438:	f7ff fcec 	bl	8002e14 <UserBtn_Control>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <main+0x1cc>
	while (measurementActive()) {
 8003442:	f7ff f844 	bl	80024ce <measurementActive>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	f47f af53 	bne.w	80032f4 <main+0x70>
 800344e:	e000      	b.n	8003452 <main+0x1ce>
		{
			break;
 8003450:	bf00      	nop
 8003452:	2300      	movs	r3, #0
		}
	}
}
 8003454:	4618      	mov	r0, r3
 8003456:	f507 67e0 	add.w	r7, r7, #1792	; 0x700
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	0800a4a4 	.word	0x0800a4a4
 8003464:	0800a4ac 	.word	0x0800a4ac
 8003468:	20000334 	.word	0x20000334

0800346c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b094      	sub	sp, #80	; 0x50
 8003470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003472:	f107 0320 	add.w	r3, r7, #32
 8003476:	2230      	movs	r2, #48	; 0x30
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f004 ff28 	bl	80082d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003480:	f107 030c 	add.w	r3, r7, #12
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]
 8003488:	605a      	str	r2, [r3, #4]
 800348a:	609a      	str	r2, [r3, #8]
 800348c:	60da      	str	r2, [r3, #12]
 800348e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003490:	2300      	movs	r3, #0
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	4b28      	ldr	r3, [pc, #160]	; (8003538 <SystemClock_Config+0xcc>)
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	4a27      	ldr	r2, [pc, #156]	; (8003538 <SystemClock_Config+0xcc>)
 800349a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349e:	6413      	str	r3, [r2, #64]	; 0x40
 80034a0:	4b25      	ldr	r3, [pc, #148]	; (8003538 <SystemClock_Config+0xcc>)
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80034ac:	2300      	movs	r3, #0
 80034ae:	607b      	str	r3, [r7, #4]
 80034b0:	4b22      	ldr	r3, [pc, #136]	; (800353c <SystemClock_Config+0xd0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80034b8:	4a20      	ldr	r2, [pc, #128]	; (800353c <SystemClock_Config+0xd0>)
 80034ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	4b1e      	ldr	r3, [pc, #120]	; (800353c <SystemClock_Config+0xd0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80034c8:	607b      	str	r3, [r7, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80034cc:	2302      	movs	r3, #2
 80034ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80034d0:	2301      	movs	r3, #1
 80034d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80034d4:	2310      	movs	r3, #16
 80034d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034d8:	2302      	movs	r3, #2
 80034da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80034dc:	2300      	movs	r3, #0
 80034de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80034e0:	2308      	movs	r3, #8
 80034e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80034e4:	2340      	movs	r3, #64	; 0x40
 80034e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034e8:	2302      	movs	r3, #2
 80034ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80034ec:	2307      	movs	r3, #7
 80034ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034f0:	f107 0320 	add.w	r3, r7, #32
 80034f4:	4618      	mov	r0, r3
 80034f6:	f001 fa77 	bl	80049e8 <HAL_RCC_OscConfig>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003500:	f000 f8c6 	bl	8003690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003504:	230f      	movs	r3, #15
 8003506:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003508:	2302      	movs	r3, #2
 800350a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800350c:	2390      	movs	r3, #144	; 0x90
 800350e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003514:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800351a:	f107 030c 	add.w	r3, r7, #12
 800351e:	2100      	movs	r1, #0
 8003520:	4618      	mov	r0, r3
 8003522:	f001 fcd9 	bl	8004ed8 <HAL_RCC_ClockConfig>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800352c:	f000 f8b0 	bl	8003690 <Error_Handler>
  }
}
 8003530:	bf00      	nop
 8003532:	3750      	adds	r7, #80	; 0x50
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40023800 	.word	0x40023800
 800353c:	40007000 	.word	0x40007000

08003540 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003544:	4b11      	ldr	r3, [pc, #68]	; (800358c <MX_USART2_UART_Init+0x4c>)
 8003546:	4a12      	ldr	r2, [pc, #72]	; (8003590 <MX_USART2_UART_Init+0x50>)
 8003548:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800354a:	4b10      	ldr	r3, [pc, #64]	; (800358c <MX_USART2_UART_Init+0x4c>)
 800354c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003550:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003552:	4b0e      	ldr	r3, [pc, #56]	; (800358c <MX_USART2_UART_Init+0x4c>)
 8003554:	2200      	movs	r2, #0
 8003556:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003558:	4b0c      	ldr	r3, [pc, #48]	; (800358c <MX_USART2_UART_Init+0x4c>)
 800355a:	2200      	movs	r2, #0
 800355c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800355e:	4b0b      	ldr	r3, [pc, #44]	; (800358c <MX_USART2_UART_Init+0x4c>)
 8003560:	2200      	movs	r2, #0
 8003562:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003564:	4b09      	ldr	r3, [pc, #36]	; (800358c <MX_USART2_UART_Init+0x4c>)
 8003566:	220c      	movs	r2, #12
 8003568:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800356a:	4b08      	ldr	r3, [pc, #32]	; (800358c <MX_USART2_UART_Init+0x4c>)
 800356c:	2200      	movs	r2, #0
 800356e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003570:	4b06      	ldr	r3, [pc, #24]	; (800358c <MX_USART2_UART_Init+0x4c>)
 8003572:	2200      	movs	r2, #0
 8003574:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003576:	4805      	ldr	r0, [pc, #20]	; (800358c <MX_USART2_UART_Init+0x4c>)
 8003578:	f002 f9f4 	bl	8005964 <HAL_UART_Init>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003582:	f000 f885 	bl	8003690 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20000334 	.word	0x20000334
 8003590:	40004400 	.word	0x40004400

08003594 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08a      	sub	sp, #40	; 0x28
 8003598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800359a:	f107 0314 	add.w	r3, r7, #20
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	605a      	str	r2, [r3, #4]
 80035a4:	609a      	str	r2, [r3, #8]
 80035a6:	60da      	str	r2, [r3, #12]
 80035a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035aa:	2300      	movs	r3, #0
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	4b36      	ldr	r3, [pc, #216]	; (8003688 <MX_GPIO_Init+0xf4>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	4a35      	ldr	r2, [pc, #212]	; (8003688 <MX_GPIO_Init+0xf4>)
 80035b4:	f043 0304 	orr.w	r3, r3, #4
 80035b8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ba:	4b33      	ldr	r3, [pc, #204]	; (8003688 <MX_GPIO_Init+0xf4>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	4b2f      	ldr	r3, [pc, #188]	; (8003688 <MX_GPIO_Init+0xf4>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	4a2e      	ldr	r2, [pc, #184]	; (8003688 <MX_GPIO_Init+0xf4>)
 80035d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035d4:	6313      	str	r3, [r2, #48]	; 0x30
 80035d6:	4b2c      	ldr	r3, [pc, #176]	; (8003688 <MX_GPIO_Init+0xf4>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	4b28      	ldr	r3, [pc, #160]	; (8003688 <MX_GPIO_Init+0xf4>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	4a27      	ldr	r2, [pc, #156]	; (8003688 <MX_GPIO_Init+0xf4>)
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	6313      	str	r3, [r2, #48]	; 0x30
 80035f2:	4b25      	ldr	r3, [pc, #148]	; (8003688 <MX_GPIO_Init+0xf4>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	60bb      	str	r3, [r7, #8]
 80035fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	607b      	str	r3, [r7, #4]
 8003602:	4b21      	ldr	r3, [pc, #132]	; (8003688 <MX_GPIO_Init+0xf4>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	4a20      	ldr	r2, [pc, #128]	; (8003688 <MX_GPIO_Init+0xf4>)
 8003608:	f043 0302 	orr.w	r3, r3, #2
 800360c:	6313      	str	r3, [r2, #48]	; 0x30
 800360e:	4b1e      	ldr	r3, [pc, #120]	; (8003688 <MX_GPIO_Init+0xf4>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	607b      	str	r3, [r7, #4]
 8003618:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_8, GPIO_PIN_RESET);
 800361a:	2200      	movs	r2, #0
 800361c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8003620:	481a      	ldr	r0, [pc, #104]	; (800368c <MX_GPIO_Init+0xf8>)
 8003622:	f001 f9ad 	bl	8004980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003626:	2301      	movs	r3, #1
 8003628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800362a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800362e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003630:	2300      	movs	r3, #0
 8003632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003634:	f107 0314 	add.w	r3, r7, #20
 8003638:	4619      	mov	r1, r3
 800363a:	4814      	ldr	r0, [pc, #80]	; (800368c <MX_GPIO_Init+0xf8>)
 800363c:	f000 ff20 	bl	8004480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_8;
 8003640:	f44f 7381 	mov.w	r3, #258	; 0x102
 8003644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003646:	2301      	movs	r3, #1
 8003648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800364e:	2300      	movs	r3, #0
 8003650:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003652:	f107 0314 	add.w	r3, r7, #20
 8003656:	4619      	mov	r1, r3
 8003658:	480c      	ldr	r0, [pc, #48]	; (800368c <MX_GPIO_Init+0xf8>)
 800365a:	f000 ff11 	bl	8004480 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800365e:	2200      	movs	r2, #0
 8003660:	2100      	movs	r1, #0
 8003662:	2006      	movs	r0, #6
 8003664:	f000 fe83 	bl	800436e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003668:	2006      	movs	r0, #6
 800366a:	f000 fe9c 	bl	80043a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800366e:	2200      	movs	r2, #0
 8003670:	2100      	movs	r1, #0
 8003672:	2028      	movs	r0, #40	; 0x28
 8003674:	f000 fe7b 	bl	800436e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003678:	2028      	movs	r0, #40	; 0x28
 800367a:	f000 fe94 	bl	80043a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800367e:	bf00      	nop
 8003680:	3728      	adds	r7, #40	; 0x28
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40023800 	.word	0x40023800
 800368c:	40020000 	.word	0x40020000

08003690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003694:	b672      	cpsid	i
}
 8003696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003698:	e7fe      	b.n	8003698 <Error_Handler+0x8>

0800369a <selectMux_and_control>:
	return false;
}

//If using reconfigured address selector pins from default
void selectMux_and_control(uint8_t mux_address, uint8_t control_byte)
{
 800369a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	460a      	mov	r2, r1
 80036a6:	71fb      	strb	r3, [r7, #7]
 80036a8:	4613      	mov	r3, r2
 80036aa:	71bb      	strb	r3, [r7, #6]
 80036ac:	466b      	mov	r3, sp
 80036ae:	461e      	mov	r6, r3
	uint8_t bufferSize = 1;
 80036b0:	2301      	movs	r3, #1
 80036b2:	75fb      	strb	r3, [r7, #23]
	char data[bufferSize];
 80036b4:	7df9      	ldrb	r1, [r7, #23]
 80036b6:	460b      	mov	r3, r1
 80036b8:	3b01      	subs	r3, #1
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	b2cb      	uxtb	r3, r1
 80036be:	2200      	movs	r2, #0
 80036c0:	4698      	mov	r8, r3
 80036c2:	4691      	mov	r9, r2
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036d8:	b2cb      	uxtb	r3, r1
 80036da:	2200      	movs	r2, #0
 80036dc:	461c      	mov	r4, r3
 80036de:	4615      	mov	r5, r2
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	00eb      	lsls	r3, r5, #3
 80036ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ee:	00e2      	lsls	r2, r4, #3
 80036f0:	460b      	mov	r3, r1
 80036f2:	3307      	adds	r3, #7
 80036f4:	08db      	lsrs	r3, r3, #3
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	ebad 0d03 	sub.w	sp, sp, r3
 80036fc:	466b      	mov	r3, sp
 80036fe:	3300      	adds	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]

	data[0] = control_byte;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	79ba      	ldrb	r2, [r7, #6]
 8003706:	701a      	strb	r2, [r3, #0]
	I2C1_burstWrite(mux_address, 0, bufferSize, data);
 8003708:	7dfa      	ldrb	r2, [r7, #23]
 800370a:	79f8      	ldrb	r0, [r7, #7]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2100      	movs	r1, #0
 8003710:	f7ff fd56 	bl	80031c0 <I2C1_burstWrite>
 8003714:	46b5      	mov	sp, r6
}
 8003716:	bf00      	nop
 8003718:	371c      	adds	r7, #28
 800371a:	46bd      	mov	sp, r7
 800371c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003720 <enableChannel>:

//Default Mux address of 0x70
void enableChannel(uint8_t channel)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	71fb      	strb	r3, [r7, #7]
	disableChannels();
 800372a:	f000 f809 	bl	8003740 <disableChannels>
	selectMux_and_control(MUX_ADDR, channel);
 800372e:	79fb      	ldrb	r3, [r7, #7]
 8003730:	4619      	mov	r1, r3
 8003732:	2070      	movs	r0, #112	; 0x70
 8003734:	f7ff ffb1 	bl	800369a <selectMux_and_control>
}
 8003738:	bf00      	nop
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <disableChannels>:

//Disables all channels
void disableChannels()
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
	selectMux_and_control(MUX_ADDR, RESET);
 8003744:	2100      	movs	r1, #0
 8003746:	2070      	movs	r0, #112	; 0x70
 8003748:	f7ff ffa7 	bl	800369a <selectMux_and_control>
}
 800374c:	bf00      	nop
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003756:	2300      	movs	r3, #0
 8003758:	607b      	str	r3, [r7, #4]
 800375a:	4b10      	ldr	r3, [pc, #64]	; (800379c <HAL_MspInit+0x4c>)
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	4a0f      	ldr	r2, [pc, #60]	; (800379c <HAL_MspInit+0x4c>)
 8003760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003764:	6453      	str	r3, [r2, #68]	; 0x44
 8003766:	4b0d      	ldr	r3, [pc, #52]	; (800379c <HAL_MspInit+0x4c>)
 8003768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800376e:	607b      	str	r3, [r7, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003772:	2300      	movs	r3, #0
 8003774:	603b      	str	r3, [r7, #0]
 8003776:	4b09      	ldr	r3, [pc, #36]	; (800379c <HAL_MspInit+0x4c>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	4a08      	ldr	r2, [pc, #32]	; (800379c <HAL_MspInit+0x4c>)
 800377c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003780:	6413      	str	r3, [r2, #64]	; 0x40
 8003782:	4b06      	ldr	r3, [pc, #24]	; (800379c <HAL_MspInit+0x4c>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800378e:	2007      	movs	r0, #7
 8003790:	f000 fde2 	bl	8004358 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003794:	bf00      	nop
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40023800 	.word	0x40023800

080037a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08a      	sub	sp, #40	; 0x28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a8:	f107 0314 	add.w	r3, r7, #20
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]
 80037b0:	605a      	str	r2, [r3, #4]
 80037b2:	609a      	str	r2, [r3, #8]
 80037b4:	60da      	str	r2, [r3, #12]
 80037b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a19      	ldr	r2, [pc, #100]	; (8003824 <HAL_UART_MspInit+0x84>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d12b      	bne.n	800381a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80037c2:	2300      	movs	r3, #0
 80037c4:	613b      	str	r3, [r7, #16]
 80037c6:	4b18      	ldr	r3, [pc, #96]	; (8003828 <HAL_UART_MspInit+0x88>)
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	4a17      	ldr	r2, [pc, #92]	; (8003828 <HAL_UART_MspInit+0x88>)
 80037cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d0:	6413      	str	r3, [r2, #64]	; 0x40
 80037d2:	4b15      	ldr	r3, [pc, #84]	; (8003828 <HAL_UART_MspInit+0x88>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	4b11      	ldr	r3, [pc, #68]	; (8003828 <HAL_UART_MspInit+0x88>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	4a10      	ldr	r2, [pc, #64]	; (8003828 <HAL_UART_MspInit+0x88>)
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	6313      	str	r3, [r2, #48]	; 0x30
 80037ee:	4b0e      	ldr	r3, [pc, #56]	; (8003828 <HAL_UART_MspInit+0x88>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80037fa:	230c      	movs	r3, #12
 80037fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fe:	2302      	movs	r3, #2
 8003800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003802:	2300      	movs	r3, #0
 8003804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003806:	2300      	movs	r3, #0
 8003808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800380a:	2307      	movs	r3, #7
 800380c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800380e:	f107 0314 	add.w	r3, r7, #20
 8003812:	4619      	mov	r1, r3
 8003814:	4805      	ldr	r0, [pc, #20]	; (800382c <HAL_UART_MspInit+0x8c>)
 8003816:	f000 fe33 	bl	8004480 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800381a:	bf00      	nop
 800381c:	3728      	adds	r7, #40	; 0x28
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40004400 	.word	0x40004400
 8003828:	40023800 	.word	0x40023800
 800382c:	40020000 	.word	0x40020000

08003830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003834:	e7fe      	b.n	8003834 <NMI_Handler+0x4>

08003836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003836:	b480      	push	{r7}
 8003838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800383a:	e7fe      	b.n	800383a <HardFault_Handler+0x4>

0800383c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003840:	e7fe      	b.n	8003840 <MemManage_Handler+0x4>

08003842 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003842:	b480      	push	{r7}
 8003844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003846:	e7fe      	b.n	8003846 <BusFault_Handler+0x4>

08003848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800384c:	e7fe      	b.n	800384c <UsageFault_Handler+0x4>

0800384e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800384e:	b480      	push	{r7}
 8003850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003852:	bf00      	nop
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003860:	bf00      	nop
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800386a:	b480      	push	{r7}
 800386c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800386e:	bf00      	nop
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800387c:	f000 fc58 	bl	8004130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003880:	bf00      	nop
 8003882:	bd80      	pop	{r7, pc}

08003884 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8003888:	4802      	ldr	r0, [pc, #8]	; (8003894 <EXTI0_IRQHandler+0x10>)
 800388a:	f000 fdd5 	bl	8004438 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800388e:	bf00      	nop
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	2000022c 	.word	0x2000022c

08003898 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 800389c:	4802      	ldr	r0, [pc, #8]	; (80038a8 <EXTI15_10_IRQHandler+0x10>)
 800389e:	f000 fdcb 	bl	8004438 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20000018 	.word	0x20000018

080038ac <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80038b2:	2300      	movs	r3, #0
 80038b4:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 80038b6:	4b12      	ldr	r3, [pc, #72]	; (8003900 <BSP_SPI1_Init+0x54>)
 80038b8:	4a12      	ldr	r2, [pc, #72]	; (8003904 <BSP_SPI1_Init+0x58>)
 80038ba:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 80038bc:	4b12      	ldr	r3, [pc, #72]	; (8003908 <BSP_SPI1_Init+0x5c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	1c5a      	adds	r2, r3, #1
 80038c2:	4911      	ldr	r1, [pc, #68]	; (8003908 <BSP_SPI1_Init+0x5c>)
 80038c4:	600a      	str	r2, [r1, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d114      	bne.n	80038f4 <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 80038ca:	480d      	ldr	r0, [pc, #52]	; (8003900 <BSP_SPI1_Init+0x54>)
 80038cc:	f001 ff60 	bl	8005790 <HAL_SPI_GetState>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10e      	bne.n	80038f4 <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 80038d6:	480a      	ldr	r0, [pc, #40]	; (8003900 <BSP_SPI1_Init+0x54>)
 80038d8:	f000 f87c 	bl	80039d4 <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d108      	bne.n	80038f4 <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 80038e2:	4807      	ldr	r0, [pc, #28]	; (8003900 <BSP_SPI1_Init+0x54>)
 80038e4:	f000 f83a 	bl	800395c <MX_SPI1_Init>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 80038ee:	f06f 0307 	mvn.w	r3, #7
 80038f2:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 80038f4:	687b      	ldr	r3, [r7, #4]
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	2000037c 	.word	0x2000037c
 8003904:	40013000 	.word	0x40013000
 8003908:	200003d4 	.word	0x200003d4

0800390c <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af02      	add	r7, sp, #8
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	4613      	mov	r3, r2
 8003918:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 800391e:	88fb      	ldrh	r3, [r7, #6]
 8003920:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003924:	9200      	str	r2, [sp, #0]
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	68f9      	ldr	r1, [r7, #12]
 800392a:	4807      	ldr	r0, [pc, #28]	; (8003948 <BSP_SPI1_SendRecv+0x3c>)
 800392c:	f001 fd87 	bl	800543e <HAL_SPI_TransmitReceive>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d002      	beq.n	800393c <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8003936:	f06f 0305 	mvn.w	r3, #5
 800393a:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800393c:	697b      	ldr	r3, [r7, #20]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	2000037c 	.word	0x2000037c

0800394c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003950:	f000 fc02 	bl	8004158 <HAL_GetTick>
 8003954:	4603      	mov	r3, r0
}
 8003956:	4618      	mov	r0, r3
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a19      	ldr	r2, [pc, #100]	; (80039d0 <MX_SPI1_Init+0x74>)
 800396c:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003974:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003994:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2218      	movs	r2, #24
 800399a:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	220a      	movs	r2, #10
 80039b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f001 fcaf 	bl	8005318 <HAL_SPI_Init>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40013000 	.word	0x40013000

080039d4 <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b08a      	sub	sp, #40	; 0x28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039dc:	2300      	movs	r3, #0
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	4b2d      	ldr	r3, [pc, #180]	; (8003a98 <SPI1_MspInit+0xc4>)
 80039e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e4:	4a2c      	ldr	r2, [pc, #176]	; (8003a98 <SPI1_MspInit+0xc4>)
 80039e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039ea:	6453      	str	r3, [r2, #68]	; 0x44
 80039ec:	4b2a      	ldr	r3, [pc, #168]	; (8003a98 <SPI1_MspInit+0xc4>)
 80039ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039f4:	613b      	str	r3, [r7, #16]
 80039f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	4b26      	ldr	r3, [pc, #152]	; (8003a98 <SPI1_MspInit+0xc4>)
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	4a25      	ldr	r2, [pc, #148]	; (8003a98 <SPI1_MspInit+0xc4>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	6313      	str	r3, [r2, #48]	; 0x30
 8003a08:	4b23      	ldr	r3, [pc, #140]	; (8003a98 <SPI1_MspInit+0xc4>)
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a14:	2300      	movs	r3, #0
 8003a16:	60bb      	str	r3, [r7, #8]
 8003a18:	4b1f      	ldr	r3, [pc, #124]	; (8003a98 <SPI1_MspInit+0xc4>)
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1c:	4a1e      	ldr	r2, [pc, #120]	; (8003a98 <SPI1_MspInit+0xc4>)
 8003a1e:	f043 0302 	orr.w	r3, r3, #2
 8003a22:	6313      	str	r3, [r2, #48]	; 0x30
 8003a24:	4b1c      	ldr	r3, [pc, #112]	; (8003a98 <SPI1_MspInit+0xc4>)
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8003a30:	2340      	movs	r3, #64	; 0x40
 8003a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a34:	2302      	movs	r3, #2
 8003a36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8003a40:	2305      	movs	r3, #5
 8003a42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003a44:	f107 0314 	add.w	r3, r7, #20
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4814      	ldr	r0, [pc, #80]	; (8003a9c <SPI1_MspInit+0xc8>)
 8003a4c:	f000 fd18 	bl	8004480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8003a50:	2380      	movs	r3, #128	; 0x80
 8003a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a54:	2302      	movs	r3, #2
 8003a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8003a60:	2305      	movs	r3, #5
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003a64:	f107 0314 	add.w	r3, r7, #20
 8003a68:	4619      	mov	r1, r3
 8003a6a:	480c      	ldr	r0, [pc, #48]	; (8003a9c <SPI1_MspInit+0xc8>)
 8003a6c:	f000 fd08 	bl	8004480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8003a70:	2308      	movs	r3, #8
 8003a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a74:	2302      	movs	r3, #2
 8003a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8003a80:	2305      	movs	r3, #5
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003a84:	f107 0314 	add.w	r3, r7, #20
 8003a88:	4619      	mov	r1, r3
 8003a8a:	4805      	ldr	r0, [pc, #20]	; (8003aa0 <SPI1_MspInit+0xcc>)
 8003a8c:	f000 fcf8 	bl	8004480 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8003a90:	bf00      	nop
 8003a92:	3728      	adds	r7, #40	; 0x28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	40020000 	.word	0x40020000
 8003aa0:	40020400 	.word	0x40020400

08003aa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  return 1;
 8003aa8:	2301      	movs	r3, #1
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <_kill>:

int _kill(int pid, int sig)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003abe:	f004 fc59 	bl	8008374 <__errno>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2216      	movs	r2, #22
 8003ac6:	601a      	str	r2, [r3, #0]
  return -1;
 8003ac8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <_exit>:

void _exit (int status)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003adc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff ffe7 	bl	8003ab4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ae6:	e7fe      	b.n	8003ae6 <_exit+0x12>

08003ae8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	e00a      	b.n	8003b10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003afa:	f3af 8000 	nop.w
 8003afe:	4601      	mov	r1, r0
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	60ba      	str	r2, [r7, #8]
 8003b06:	b2ca      	uxtb	r2, r1
 8003b08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	dbf0      	blt.n	8003afa <_read+0x12>
  }

  return len;
 8003b18:	687b      	ldr	r3, [r7, #4]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b086      	sub	sp, #24
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	e009      	b.n	8003b48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	60ba      	str	r2, [r7, #8]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f000 fa3f 	bl	8003fc0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	3301      	adds	r3, #1
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	dbf1      	blt.n	8003b34 <_write+0x12>
  }
  return len;
 8003b50:	687b      	ldr	r3, [r7, #4]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <_close>:

int _close(int file)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003b62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b82:	605a      	str	r2, [r3, #4]
  return 0;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <_isatty>:

int _isatty(int file)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003b9a:	2301      	movs	r3, #1
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
	...

08003bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bcc:	4a14      	ldr	r2, [pc, #80]	; (8003c20 <_sbrk+0x5c>)
 8003bce:	4b15      	ldr	r3, [pc, #84]	; (8003c24 <_sbrk+0x60>)
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bd8:	4b13      	ldr	r3, [pc, #76]	; (8003c28 <_sbrk+0x64>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d102      	bne.n	8003be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003be0:	4b11      	ldr	r3, [pc, #68]	; (8003c28 <_sbrk+0x64>)
 8003be2:	4a12      	ldr	r2, [pc, #72]	; (8003c2c <_sbrk+0x68>)
 8003be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003be6:	4b10      	ldr	r3, [pc, #64]	; (8003c28 <_sbrk+0x64>)
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4413      	add	r3, r2
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d207      	bcs.n	8003c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003bf4:	f004 fbbe 	bl	8008374 <__errno>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	220c      	movs	r2, #12
 8003bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8003c02:	e009      	b.n	8003c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c04:	4b08      	ldr	r3, [pc, #32]	; (8003c28 <_sbrk+0x64>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c0a:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <_sbrk+0x64>)
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4413      	add	r3, r2
 8003c12:	4a05      	ldr	r2, [pc, #20]	; (8003c28 <_sbrk+0x64>)
 8003c14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c16:	68fb      	ldr	r3, [r7, #12]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	20018000 	.word	0x20018000
 8003c24:	00000400 	.word	0x00000400
 8003c28:	200003d8 	.word	0x200003d8
 8003c2c:	20000868 	.word	0x20000868

08003c30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c34:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <SystemInit+0x20>)
 8003c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3a:	4a05      	ldr	r2, [pc, #20]	; (8003c50 <SystemInit+0x20>)
 8003c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003c44:	bf00      	nop
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	e000ed00 	.word	0xe000ed00

08003c54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003c58:	f7ff ffea 	bl	8003c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003c5c:	480c      	ldr	r0, [pc, #48]	; (8003c90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003c5e:	490d      	ldr	r1, [pc, #52]	; (8003c94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003c60:	4a0d      	ldr	r2, [pc, #52]	; (8003c98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003c64:	e002      	b.n	8003c6c <LoopCopyDataInit>

08003c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003c6a:	3304      	adds	r3, #4

08003c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c70:	d3f9      	bcc.n	8003c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c72:	4a0a      	ldr	r2, [pc, #40]	; (8003c9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c74:	4c0a      	ldr	r4, [pc, #40]	; (8003ca0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c78:	e001      	b.n	8003c7e <LoopFillZerobss>

08003c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c7c:	3204      	adds	r2, #4

08003c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c80:	d3fb      	bcc.n	8003c7a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8003c82:	f004 fb7d 	bl	8008380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c86:	f7ff fafd 	bl	8003284 <main>
  bx  lr    
 8003c8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c8c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003c90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c94:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003c98:	0800a864 	.word	0x0800a864
  ldr r2, =_sbss
 8003c9c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8003ca0:	20000864 	.word	0x20000864

08003ca4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ca4:	e7fe      	b.n	8003ca4 <ADC_IRQHandler>
	...

08003ca8 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8003cb2:	79fb      	ldrb	r3, [r7, #7]
 8003cb4:	4a04      	ldr	r2, [pc, #16]	; (8003cc8 <BSP_LED_Init+0x20>)
 8003cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cba:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	0800a4cc 	.word	0x0800a4cc

08003ccc <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8003cd6:	79fb      	ldrb	r3, [r7, #7]
 8003cd8:	4a06      	ldr	r2, [pc, #24]	; (8003cf4 <BSP_LED_Toggle+0x28>)
 8003cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 fe65 	bl	80049b2 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000010 	.word	0x20000010

08003cf8 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b088      	sub	sp, #32
 8003cfc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	4b1c      	ldr	r3, [pc, #112]	; (8003d74 <LED_USER_GPIO_Init+0x7c>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d06:	4a1b      	ldr	r2, [pc, #108]	; (8003d74 <LED_USER_GPIO_Init+0x7c>)
 8003d08:	f043 0301 	orr.w	r3, r3, #1
 8003d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003d0e:	4b19      	ldr	r3, [pc, #100]	; (8003d74 <LED_USER_GPIO_Init+0x7c>)
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d1a:	f107 030c 	add.w	r3, r7, #12
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	605a      	str	r2, [r3, #4]
 8003d24:	609a      	str	r2, [r3, #8]
 8003d26:	60da      	str	r2, [r3, #12]
 8003d28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	607b      	str	r3, [r7, #4]
 8003d2e:	4b11      	ldr	r3, [pc, #68]	; (8003d74 <LED_USER_GPIO_Init+0x7c>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	4a10      	ldr	r2, [pc, #64]	; (8003d74 <LED_USER_GPIO_Init+0x7c>)
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	6313      	str	r3, [r2, #48]	; 0x30
 8003d3a:	4b0e      	ldr	r3, [pc, #56]	; (8003d74 <LED_USER_GPIO_Init+0x7c>)
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	607b      	str	r3, [r7, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8003d46:	2200      	movs	r2, #0
 8003d48:	2120      	movs	r1, #32
 8003d4a:	480b      	ldr	r0, [pc, #44]	; (8003d78 <LED_USER_GPIO_Init+0x80>)
 8003d4c:	f000 fe18 	bl	8004980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8003d50:	2320      	movs	r3, #32
 8003d52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d54:	2301      	movs	r3, #1
 8003d56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8003d60:	f107 030c 	add.w	r3, r7, #12
 8003d64:	4619      	mov	r1, r3
 8003d66:	4804      	ldr	r0, [pc, #16]	; (8003d78 <LED_USER_GPIO_Init+0x80>)
 8003d68:	f000 fb8a 	bl	8004480 <HAL_GPIO_Init>

}
 8003d6c:	bf00      	nop
 8003d6e:	3720      	adds	r7, #32
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40023800 	.word	0x40023800
 8003d78:	40020000 	.word	0x40020000

08003d7c <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	460a      	mov	r2, r1
 8003d86:	71fb      	strb	r3, [r7, #7]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	4a1f      	ldr	r2, [pc, #124]	; (8003e10 <BSP_PB_Init+0x94>)
 8003d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d98:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8003d9a:	79bb      	ldrb	r3, [r7, #6]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d132      	bne.n	8003e06 <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	4a1b      	ldr	r2, [pc, #108]	; (8003e14 <BSP_PB_Init+0x98>)
 8003da6:	441a      	add	r2, r3
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	491b      	ldr	r1, [pc, #108]	; (8003e18 <BSP_PB_Init+0x9c>)
 8003dac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003db0:	4619      	mov	r1, r3
 8003db2:	4610      	mov	r0, r2
 8003db4:	f000 fb2b 	bl	800440e <HAL_EXTI_GetHandle>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003dbe:	f06f 0303 	mvn.w	r3, #3
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	e01f      	b.n	8003e06 <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	4a12      	ldr	r2, [pc, #72]	; (8003e14 <BSP_PB_Init+0x98>)
 8003dcc:	1898      	adds	r0, r3, r2
 8003dce:	79fb      	ldrb	r3, [r7, #7]
 8003dd0:	4a12      	ldr	r2, [pc, #72]	; (8003e1c <BSP_PB_Init+0xa0>)
 8003dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	2100      	movs	r1, #0
 8003dda:	f000 fafe 	bl	80043da <HAL_EXTI_RegisterCallback>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003de4:	f06f 0303 	mvn.w	r3, #3
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	e00c      	b.n	8003e06 <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8003dec:	2028      	movs	r0, #40	; 0x28
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	4a0b      	ldr	r2, [pc, #44]	; (8003e20 <BSP_PB_Init+0xa4>)
 8003df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df6:	2200      	movs	r2, #0
 8003df8:	4619      	mov	r1, r3
 8003dfa:	f000 fab8 	bl	800436e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8003dfe:	2328      	movs	r3, #40	; 0x28
 8003e00:	4618      	mov	r0, r3
 8003e02:	f000 fad0 	bl	80043a6 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8003e06:	68fb      	ldr	r3, [r7, #12]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	0800a4d0 	.word	0x0800a4d0
 8003e14:	20000018 	.word	0x20000018
 8003e18:	0800a4d4 	.word	0x0800a4d4
 8003e1c:	0800a4d8 	.word	0x0800a4d8
 8003e20:	0800a4dc 	.word	0x0800a4dc

08003e24 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	4a09      	ldr	r2, [pc, #36]	; (8003e58 <BSP_PB_GetState+0x34>)
 8003e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fd87 	bl	8004950 <HAL_GPIO_ReadPin>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	bf0c      	ite	eq
 8003e48:	2301      	moveq	r3, #1
 8003e4a:	2300      	movne	r3, #0
 8003e4c:	b2db      	uxtb	r3, r3
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000014 	.word	0x20000014

08003e5c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8003e60:	2000      	movs	r0, #0
 8003e62:	f7fd f989 	bl	8001178 <BSP_PB_Callback>
}
 8003e66:	bf00      	nop
 8003e68:	bd80      	pop	{r7, pc}
	...

08003e6c <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e72:	2300      	movs	r3, #0
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	4b1a      	ldr	r3, [pc, #104]	; (8003ee0 <BUTTON_USER_GPIO_Init+0x74>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	4a19      	ldr	r2, [pc, #100]	; (8003ee0 <BUTTON_USER_GPIO_Init+0x74>)
 8003e7c:	f043 0304 	orr.w	r3, r3, #4
 8003e80:	6313      	str	r3, [r2, #48]	; 0x30
 8003e82:	4b17      	ldr	r3, [pc, #92]	; (8003ee0 <BUTTON_USER_GPIO_Init+0x74>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e8e:	f107 030c 	add.w	r3, r7, #12
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	605a      	str	r2, [r3, #4]
 8003e98:	609a      	str	r2, [r3, #8]
 8003e9a:	60da      	str	r2, [r3, #12]
 8003e9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	607b      	str	r3, [r7, #4]
 8003ea2:	4b0f      	ldr	r3, [pc, #60]	; (8003ee0 <BUTTON_USER_GPIO_Init+0x74>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	4a0e      	ldr	r2, [pc, #56]	; (8003ee0 <BUTTON_USER_GPIO_Init+0x74>)
 8003ea8:	f043 0304 	orr.w	r3, r3, #4
 8003eac:	6313      	str	r3, [r2, #48]	; 0x30
 8003eae:	4b0c      	ldr	r3, [pc, #48]	; (8003ee0 <BUTTON_USER_GPIO_Init+0x74>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	607b      	str	r3, [r7, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8003eba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ebe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ec0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003ec4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8003eca:	f107 030c 	add.w	r3, r7, #12
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4804      	ldr	r0, [pc, #16]	; (8003ee4 <BUTTON_USER_GPIO_Init+0x78>)
 8003ed2:	f000 fad5 	bl	8004480 <HAL_GPIO_Init>

}
 8003ed6:	bf00      	nop
 8003ed8:	3720      	adds	r7, #32
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	40020800 	.word	0x40020800

08003ee8 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d903      	bls.n	8003f04 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003efc:	f06f 0301 	mvn.w	r3, #1
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	e025      	b.n	8003f50 <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	79fa      	ldrb	r2, [r7, #7]
 8003f08:	4914      	ldr	r1, [pc, #80]	; (8003f5c <BSP_COM_Init+0x74>)
 8003f0a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003f0e:	4814      	ldr	r0, [pc, #80]	; (8003f60 <BSP_COM_Init+0x78>)
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4413      	add	r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4403      	add	r3, r0
 8003f1a:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8003f1c:	79fa      	ldrb	r2, [r7, #7]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	4413      	add	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	4a0e      	ldr	r2, [pc, #56]	; (8003f60 <BSP_COM_Init+0x78>)
 8003f28:	4413      	add	r3, r2
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 f864 	bl	8003ff8 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8003f30:	79fa      	ldrb	r2, [r7, #7]
 8003f32:	4613      	mov	r3, r2
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	4413      	add	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	4a09      	ldr	r2, [pc, #36]	; (8003f60 <BSP_COM_Init+0x78>)
 8003f3c:	4413      	add	r3, r2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 f810 	bl	8003f64 <MX_USART1_UART_Init>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003f4a:	f06f 0303 	mvn.w	r3, #3
 8003f4e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8003f50:	68fb      	ldr	r3, [r7, #12]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20000020 	.word	0x20000020
 8003f60:	200003dc 	.word	0x200003dc

08003f64 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a12      	ldr	r2, [pc, #72]	; (8003fbc <MX_USART1_UART_Init+0x58>)
 8003f74:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f7c:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	220c      	movs	r2, #12
 8003f94:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f001 fcde 	bl	8005964 <HAL_UART_Init>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <MX_USART1_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40011000 	.word	0x40011000

08003fc0 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 8003fc8:	4b09      	ldr	r3, [pc, #36]	; (8003ff0 <__io_putchar+0x30>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	4613      	mov	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	4413      	add	r3, r2
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	4a07      	ldr	r2, [pc, #28]	; (8003ff4 <__io_putchar+0x34>)
 8003fd8:	1898      	adds	r0, r3, r2
 8003fda:	1d39      	adds	r1, r7, #4
 8003fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f001 fd0f 	bl	8005a04 <HAL_UART_Transmit>
  return ch;
 8003fe6:	687b      	ldr	r3, [r7, #4]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20000424 	.word	0x20000424
 8003ff4:	200003dc 	.word	0x200003dc

08003ff8 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b08a      	sub	sp, #40	; 0x28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004000:	2300      	movs	r3, #0
 8004002:	613b      	str	r3, [r7, #16]
 8004004:	4b1f      	ldr	r3, [pc, #124]	; (8004084 <USART1_MspInit+0x8c>)
 8004006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004008:	4a1e      	ldr	r2, [pc, #120]	; (8004084 <USART1_MspInit+0x8c>)
 800400a:	f043 0310 	orr.w	r3, r3, #16
 800400e:	6453      	str	r3, [r2, #68]	; 0x44
 8004010:	4b1c      	ldr	r3, [pc, #112]	; (8004084 <USART1_MspInit+0x8c>)
 8004012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800401c:	2300      	movs	r3, #0
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	4b18      	ldr	r3, [pc, #96]	; (8004084 <USART1_MspInit+0x8c>)
 8004022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004024:	4a17      	ldr	r2, [pc, #92]	; (8004084 <USART1_MspInit+0x8c>)
 8004026:	f043 0301 	orr.w	r3, r3, #1
 800402a:	6313      	str	r3, [r2, #48]	; 0x30
 800402c:	4b15      	ldr	r3, [pc, #84]	; (8004084 <USART1_MspInit+0x8c>)
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8004038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800403c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800403e:	2302      	movs	r3, #2
 8004040:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004042:	2300      	movs	r3, #0
 8004044:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004046:	2303      	movs	r3, #3
 8004048:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 800404a:	2307      	movs	r3, #7
 800404c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 800404e:	f107 0314 	add.w	r3, r7, #20
 8004052:	4619      	mov	r1, r3
 8004054:	480c      	ldr	r0, [pc, #48]	; (8004088 <USART1_MspInit+0x90>)
 8004056:	f000 fa13 	bl	8004480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 800405a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800405e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004060:	2302      	movs	r3, #2
 8004062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004064:	2300      	movs	r3, #0
 8004066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004068:	2303      	movs	r3, #3
 800406a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 800406c:	2307      	movs	r3, #7
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8004070:	f107 0314 	add.w	r3, r7, #20
 8004074:	4619      	mov	r1, r3
 8004076:	4804      	ldr	r0, [pc, #16]	; (8004088 <USART1_MspInit+0x90>)
 8004078:	f000 fa02 	bl	8004480 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 800407c:	bf00      	nop
 800407e:	3728      	adds	r7, #40	; 0x28
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40023800 	.word	0x40023800
 8004088:	40020000 	.word	0x40020000

0800408c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004090:	4b0e      	ldr	r3, [pc, #56]	; (80040cc <HAL_Init+0x40>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a0d      	ldr	r2, [pc, #52]	; (80040cc <HAL_Init+0x40>)
 8004096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800409a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800409c:	4b0b      	ldr	r3, [pc, #44]	; (80040cc <HAL_Init+0x40>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a0a      	ldr	r2, [pc, #40]	; (80040cc <HAL_Init+0x40>)
 80040a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040a8:	4b08      	ldr	r3, [pc, #32]	; (80040cc <HAL_Init+0x40>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a07      	ldr	r2, [pc, #28]	; (80040cc <HAL_Init+0x40>)
 80040ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040b4:	2003      	movs	r0, #3
 80040b6:	f000 f94f 	bl	8004358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040ba:	2000      	movs	r0, #0
 80040bc:	f000 f808 	bl	80040d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040c0:	f7ff fb46 	bl	8003750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40023c00 	.word	0x40023c00

080040d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040d8:	4b12      	ldr	r3, [pc, #72]	; (8004124 <HAL_InitTick+0x54>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	4b12      	ldr	r3, [pc, #72]	; (8004128 <HAL_InitTick+0x58>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	4619      	mov	r1, r3
 80040e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80040ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 f967 	bl	80043c2 <HAL_SYSTICK_Config>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e00e      	b.n	800411c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b0f      	cmp	r3, #15
 8004102:	d80a      	bhi.n	800411a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004104:	2200      	movs	r2, #0
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	f04f 30ff 	mov.w	r0, #4294967295
 800410c:	f000 f92f 	bl	800436e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004110:	4a06      	ldr	r2, [pc, #24]	; (800412c <HAL_InitTick+0x5c>)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	e000      	b.n	800411c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
}
 800411c:	4618      	mov	r0, r3
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	2000000c 	.word	0x2000000c
 8004128:	20000028 	.word	0x20000028
 800412c:	20000024 	.word	0x20000024

08004130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004134:	4b06      	ldr	r3, [pc, #24]	; (8004150 <HAL_IncTick+0x20>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	461a      	mov	r2, r3
 800413a:	4b06      	ldr	r3, [pc, #24]	; (8004154 <HAL_IncTick+0x24>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4413      	add	r3, r2
 8004140:	4a04      	ldr	r2, [pc, #16]	; (8004154 <HAL_IncTick+0x24>)
 8004142:	6013      	str	r3, [r2, #0]
}
 8004144:	bf00      	nop
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	20000028 	.word	0x20000028
 8004154:	20000428 	.word	0x20000428

08004158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  return uwTick;
 800415c:	4b03      	ldr	r3, [pc, #12]	; (800416c <HAL_GetTick+0x14>)
 800415e:	681b      	ldr	r3, [r3, #0]
}
 8004160:	4618      	mov	r0, r3
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	20000428 	.word	0x20000428

08004170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004178:	f7ff ffee 	bl	8004158 <HAL_GetTick>
 800417c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004188:	d005      	beq.n	8004196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800418a:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <HAL_Delay+0x44>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4413      	add	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004196:	bf00      	nop
 8004198:	f7ff ffde 	bl	8004158 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d8f7      	bhi.n	8004198 <HAL_Delay+0x28>
  {
  }
}
 80041a8:	bf00      	nop
 80041aa:	bf00      	nop
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20000028 	.word	0x20000028

080041b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041c8:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <__NVIC_SetPriorityGrouping+0x44>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041ce:	68ba      	ldr	r2, [r7, #8]
 80041d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041d4:	4013      	ands	r3, r2
 80041d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041ea:	4a04      	ldr	r2, [pc, #16]	; (80041fc <__NVIC_SetPriorityGrouping+0x44>)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	60d3      	str	r3, [r2, #12]
}
 80041f0:	bf00      	nop
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	e000ed00 	.word	0xe000ed00

08004200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004204:	4b04      	ldr	r3, [pc, #16]	; (8004218 <__NVIC_GetPriorityGrouping+0x18>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	0a1b      	lsrs	r3, r3, #8
 800420a:	f003 0307 	and.w	r3, r3, #7
}
 800420e:	4618      	mov	r0, r3
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	e000ed00 	.word	0xe000ed00

0800421c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	4603      	mov	r3, r0
 8004224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422a:	2b00      	cmp	r3, #0
 800422c:	db0b      	blt.n	8004246 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800422e:	79fb      	ldrb	r3, [r7, #7]
 8004230:	f003 021f 	and.w	r2, r3, #31
 8004234:	4907      	ldr	r1, [pc, #28]	; (8004254 <__NVIC_EnableIRQ+0x38>)
 8004236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	2001      	movs	r0, #1
 800423e:	fa00 f202 	lsl.w	r2, r0, r2
 8004242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	e000e100 	.word	0xe000e100

08004258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	4603      	mov	r3, r0
 8004260:	6039      	str	r1, [r7, #0]
 8004262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004268:	2b00      	cmp	r3, #0
 800426a:	db0a      	blt.n	8004282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	b2da      	uxtb	r2, r3
 8004270:	490c      	ldr	r1, [pc, #48]	; (80042a4 <__NVIC_SetPriority+0x4c>)
 8004272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004276:	0112      	lsls	r2, r2, #4
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	440b      	add	r3, r1
 800427c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004280:	e00a      	b.n	8004298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	b2da      	uxtb	r2, r3
 8004286:	4908      	ldr	r1, [pc, #32]	; (80042a8 <__NVIC_SetPriority+0x50>)
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	3b04      	subs	r3, #4
 8004290:	0112      	lsls	r2, r2, #4
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	440b      	add	r3, r1
 8004296:	761a      	strb	r2, [r3, #24]
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	e000e100 	.word	0xe000e100
 80042a8:	e000ed00 	.word	0xe000ed00

080042ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b089      	sub	sp, #36	; 0x24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	f1c3 0307 	rsb	r3, r3, #7
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	bf28      	it	cs
 80042ca:	2304      	movcs	r3, #4
 80042cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	3304      	adds	r3, #4
 80042d2:	2b06      	cmp	r3, #6
 80042d4:	d902      	bls.n	80042dc <NVIC_EncodePriority+0x30>
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	3b03      	subs	r3, #3
 80042da:	e000      	b.n	80042de <NVIC_EncodePriority+0x32>
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042e0:	f04f 32ff 	mov.w	r2, #4294967295
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	43da      	mvns	r2, r3
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	401a      	ands	r2, r3
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042f4:	f04f 31ff 	mov.w	r1, #4294967295
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	fa01 f303 	lsl.w	r3, r1, r3
 80042fe:	43d9      	mvns	r1, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004304:	4313      	orrs	r3, r2
         );
}
 8004306:	4618      	mov	r0, r3
 8004308:	3724      	adds	r7, #36	; 0x24
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
	...

08004314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	3b01      	subs	r3, #1
 8004320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004324:	d301      	bcc.n	800432a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004326:	2301      	movs	r3, #1
 8004328:	e00f      	b.n	800434a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800432a:	4a0a      	ldr	r2, [pc, #40]	; (8004354 <SysTick_Config+0x40>)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3b01      	subs	r3, #1
 8004330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004332:	210f      	movs	r1, #15
 8004334:	f04f 30ff 	mov.w	r0, #4294967295
 8004338:	f7ff ff8e 	bl	8004258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800433c:	4b05      	ldr	r3, [pc, #20]	; (8004354 <SysTick_Config+0x40>)
 800433e:	2200      	movs	r2, #0
 8004340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004342:	4b04      	ldr	r3, [pc, #16]	; (8004354 <SysTick_Config+0x40>)
 8004344:	2207      	movs	r2, #7
 8004346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	e000e010 	.word	0xe000e010

08004358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7ff ff29 	bl	80041b8 <__NVIC_SetPriorityGrouping>
}
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800436e:	b580      	push	{r7, lr}
 8004370:	b086      	sub	sp, #24
 8004372:	af00      	add	r7, sp, #0
 8004374:	4603      	mov	r3, r0
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	607a      	str	r2, [r7, #4]
 800437a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800437c:	2300      	movs	r3, #0
 800437e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004380:	f7ff ff3e 	bl	8004200 <__NVIC_GetPriorityGrouping>
 8004384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	68b9      	ldr	r1, [r7, #8]
 800438a:	6978      	ldr	r0, [r7, #20]
 800438c:	f7ff ff8e 	bl	80042ac <NVIC_EncodePriority>
 8004390:	4602      	mov	r2, r0
 8004392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004396:	4611      	mov	r1, r2
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff ff5d 	bl	8004258 <__NVIC_SetPriority>
}
 800439e:	bf00      	nop
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b082      	sub	sp, #8
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	4603      	mov	r3, r0
 80043ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7ff ff31 	bl	800421c <__NVIC_EnableIRQ>
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b082      	sub	sp, #8
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7ff ffa2 	bl	8004314 <SysTick_Config>
 80043d0:	4603      	mov	r3, r0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80043da:	b480      	push	{r7}
 80043dc:	b087      	sub	sp, #28
 80043de:	af00      	add	r7, sp, #0
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	460b      	mov	r3, r1
 80043e4:	607a      	str	r2, [r7, #4]
 80043e6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80043ec:	7afb      	ldrb	r3, [r7, #11]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d103      	bne.n	80043fa <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	605a      	str	r2, [r3, #4]
      break;
 80043f8:	e002      	b.n	8004400 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	75fb      	strb	r3, [r7, #23]
      break;
 80043fe:	bf00      	nop
  }

  return status;
 8004400:	7dfb      	ldrb	r3, [r7, #23]
}
 8004402:	4618      	mov	r0, r3
 8004404:	371c      	adds	r7, #28
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
 8004416:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d101      	bne.n	8004422 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e003      	b.n	800442a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8004428:	2300      	movs	r3, #0
  }
}
 800442a:	4618      	mov	r0, r3
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
	...

08004438 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 031f 	and.w	r3, r3, #31
 8004448:	2201      	movs	r2, #1
 800444a:	fa02 f303 	lsl.w	r3, r2, r3
 800444e:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8004450:	4b0a      	ldr	r3, [pc, #40]	; (800447c <HAL_EXTI_IRQHandler+0x44>)
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4013      	ands	r3, r2
 8004458:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d009      	beq.n	8004474 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8004460:	4a06      	ldr	r2, [pc, #24]	; (800447c <HAL_EXTI_IRQHandler+0x44>)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d002      	beq.n	8004474 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	4798      	blx	r3
    }
  }
}
 8004474:	bf00      	nop
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40013c00 	.word	0x40013c00

08004480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004480:	b480      	push	{r7}
 8004482:	b089      	sub	sp, #36	; 0x24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800448a:	2300      	movs	r3, #0
 800448c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800448e:	2300      	movs	r3, #0
 8004490:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004492:	2300      	movs	r3, #0
 8004494:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004496:	2300      	movs	r3, #0
 8004498:	61fb      	str	r3, [r7, #28]
 800449a:	e159      	b.n	8004750 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800449c:	2201      	movs	r2, #1
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	4013      	ands	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	f040 8148 	bne.w	800474a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f003 0303 	and.w	r3, r3, #3
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d005      	beq.n	80044d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d130      	bne.n	8004534 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	2203      	movs	r2, #3
 80044de:	fa02 f303 	lsl.w	r3, r2, r3
 80044e2:	43db      	mvns	r3, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4013      	ands	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004508:	2201      	movs	r2, #1
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	fa02 f303 	lsl.w	r3, r2, r3
 8004510:	43db      	mvns	r3, r3
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	4013      	ands	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	091b      	lsrs	r3, r3, #4
 800451e:	f003 0201 	and.w	r2, r3, #1
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4313      	orrs	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 0303 	and.w	r3, r3, #3
 800453c:	2b03      	cmp	r3, #3
 800453e:	d017      	beq.n	8004570 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	2203      	movs	r2, #3
 800454c:	fa02 f303 	lsl.w	r3, r2, r3
 8004550:	43db      	mvns	r3, r3
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4013      	ands	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	4313      	orrs	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f003 0303 	and.w	r3, r3, #3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d123      	bne.n	80045c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	08da      	lsrs	r2, r3, #3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3208      	adds	r2, #8
 8004584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004588:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	220f      	movs	r2, #15
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4013      	ands	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	691a      	ldr	r2, [r3, #16]
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	08da      	lsrs	r2, r3, #3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3208      	adds	r2, #8
 80045be:	69b9      	ldr	r1, [r7, #24]
 80045c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	2203      	movs	r2, #3
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	43db      	mvns	r3, r3
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4013      	ands	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f003 0203 	and.w	r2, r3, #3
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 80a2 	beq.w	800474a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	4b57      	ldr	r3, [pc, #348]	; (8004768 <HAL_GPIO_Init+0x2e8>)
 800460c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460e:	4a56      	ldr	r2, [pc, #344]	; (8004768 <HAL_GPIO_Init+0x2e8>)
 8004610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004614:	6453      	str	r3, [r2, #68]	; 0x44
 8004616:	4b54      	ldr	r3, [pc, #336]	; (8004768 <HAL_GPIO_Init+0x2e8>)
 8004618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004622:	4a52      	ldr	r2, [pc, #328]	; (800476c <HAL_GPIO_Init+0x2ec>)
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	089b      	lsrs	r3, r3, #2
 8004628:	3302      	adds	r3, #2
 800462a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800462e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	220f      	movs	r2, #15
 800463a:	fa02 f303 	lsl.w	r3, r2, r3
 800463e:	43db      	mvns	r3, r3
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4013      	ands	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a49      	ldr	r2, [pc, #292]	; (8004770 <HAL_GPIO_Init+0x2f0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d019      	beq.n	8004682 <HAL_GPIO_Init+0x202>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a48      	ldr	r2, [pc, #288]	; (8004774 <HAL_GPIO_Init+0x2f4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d013      	beq.n	800467e <HAL_GPIO_Init+0x1fe>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a47      	ldr	r2, [pc, #284]	; (8004778 <HAL_GPIO_Init+0x2f8>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d00d      	beq.n	800467a <HAL_GPIO_Init+0x1fa>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a46      	ldr	r2, [pc, #280]	; (800477c <HAL_GPIO_Init+0x2fc>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d007      	beq.n	8004676 <HAL_GPIO_Init+0x1f6>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a45      	ldr	r2, [pc, #276]	; (8004780 <HAL_GPIO_Init+0x300>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d101      	bne.n	8004672 <HAL_GPIO_Init+0x1f2>
 800466e:	2304      	movs	r3, #4
 8004670:	e008      	b.n	8004684 <HAL_GPIO_Init+0x204>
 8004672:	2307      	movs	r3, #7
 8004674:	e006      	b.n	8004684 <HAL_GPIO_Init+0x204>
 8004676:	2303      	movs	r3, #3
 8004678:	e004      	b.n	8004684 <HAL_GPIO_Init+0x204>
 800467a:	2302      	movs	r3, #2
 800467c:	e002      	b.n	8004684 <HAL_GPIO_Init+0x204>
 800467e:	2301      	movs	r3, #1
 8004680:	e000      	b.n	8004684 <HAL_GPIO_Init+0x204>
 8004682:	2300      	movs	r3, #0
 8004684:	69fa      	ldr	r2, [r7, #28]
 8004686:	f002 0203 	and.w	r2, r2, #3
 800468a:	0092      	lsls	r2, r2, #2
 800468c:	4093      	lsls	r3, r2
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	4313      	orrs	r3, r2
 8004692:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004694:	4935      	ldr	r1, [pc, #212]	; (800476c <HAL_GPIO_Init+0x2ec>)
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	089b      	lsrs	r3, r3, #2
 800469a:	3302      	adds	r3, #2
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046a2:	4b38      	ldr	r3, [pc, #224]	; (8004784 <HAL_GPIO_Init+0x304>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	43db      	mvns	r3, r3
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4013      	ands	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d003      	beq.n	80046c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046c6:	4a2f      	ldr	r2, [pc, #188]	; (8004784 <HAL_GPIO_Init+0x304>)
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046cc:	4b2d      	ldr	r3, [pc, #180]	; (8004784 <HAL_GPIO_Init+0x304>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	43db      	mvns	r3, r3
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4013      	ands	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046f0:	4a24      	ldr	r2, [pc, #144]	; (8004784 <HAL_GPIO_Init+0x304>)
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046f6:	4b23      	ldr	r3, [pc, #140]	; (8004784 <HAL_GPIO_Init+0x304>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	43db      	mvns	r3, r3
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	4013      	ands	r3, r2
 8004704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	4313      	orrs	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800471a:	4a1a      	ldr	r2, [pc, #104]	; (8004784 <HAL_GPIO_Init+0x304>)
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004720:	4b18      	ldr	r3, [pc, #96]	; (8004784 <HAL_GPIO_Init+0x304>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	43db      	mvns	r3, r3
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	4013      	ands	r3, r2
 800472e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	4313      	orrs	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004744:	4a0f      	ldr	r2, [pc, #60]	; (8004784 <HAL_GPIO_Init+0x304>)
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	3301      	adds	r3, #1
 800474e:	61fb      	str	r3, [r7, #28]
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	2b0f      	cmp	r3, #15
 8004754:	f67f aea2 	bls.w	800449c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004758:	bf00      	nop
 800475a:	bf00      	nop
 800475c:	3724      	adds	r7, #36	; 0x24
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40023800 	.word	0x40023800
 800476c:	40013800 	.word	0x40013800
 8004770:	40020000 	.word	0x40020000
 8004774:	40020400 	.word	0x40020400
 8004778:	40020800 	.word	0x40020800
 800477c:	40020c00 	.word	0x40020c00
 8004780:	40021000 	.word	0x40021000
 8004784:	40013c00 	.word	0x40013c00

08004788 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004788:	b480      	push	{r7}
 800478a:	b087      	sub	sp, #28
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004792:	2300      	movs	r3, #0
 8004794:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004796:	2300      	movs	r3, #0
 8004798:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800479a:	2300      	movs	r3, #0
 800479c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]
 80047a2:	e0bb      	b.n	800491c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047a4:	2201      	movs	r2, #1
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4013      	ands	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	f040 80ab 	bne.w	8004916 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80047c0:	4a5c      	ldr	r2, [pc, #368]	; (8004934 <HAL_GPIO_DeInit+0x1ac>)
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	089b      	lsrs	r3, r3, #2
 80047c6:	3302      	adds	r3, #2
 80047c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047cc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f003 0303 	and.w	r3, r3, #3
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	220f      	movs	r2, #15
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	68ba      	ldr	r2, [r7, #8]
 80047de:	4013      	ands	r3, r2
 80047e0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a54      	ldr	r2, [pc, #336]	; (8004938 <HAL_GPIO_DeInit+0x1b0>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d019      	beq.n	800481e <HAL_GPIO_DeInit+0x96>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a53      	ldr	r2, [pc, #332]	; (800493c <HAL_GPIO_DeInit+0x1b4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d013      	beq.n	800481a <HAL_GPIO_DeInit+0x92>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a52      	ldr	r2, [pc, #328]	; (8004940 <HAL_GPIO_DeInit+0x1b8>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d00d      	beq.n	8004816 <HAL_GPIO_DeInit+0x8e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a51      	ldr	r2, [pc, #324]	; (8004944 <HAL_GPIO_DeInit+0x1bc>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d007      	beq.n	8004812 <HAL_GPIO_DeInit+0x8a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a50      	ldr	r2, [pc, #320]	; (8004948 <HAL_GPIO_DeInit+0x1c0>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d101      	bne.n	800480e <HAL_GPIO_DeInit+0x86>
 800480a:	2304      	movs	r3, #4
 800480c:	e008      	b.n	8004820 <HAL_GPIO_DeInit+0x98>
 800480e:	2307      	movs	r3, #7
 8004810:	e006      	b.n	8004820 <HAL_GPIO_DeInit+0x98>
 8004812:	2303      	movs	r3, #3
 8004814:	e004      	b.n	8004820 <HAL_GPIO_DeInit+0x98>
 8004816:	2302      	movs	r3, #2
 8004818:	e002      	b.n	8004820 <HAL_GPIO_DeInit+0x98>
 800481a:	2301      	movs	r3, #1
 800481c:	e000      	b.n	8004820 <HAL_GPIO_DeInit+0x98>
 800481e:	2300      	movs	r3, #0
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	f002 0203 	and.w	r2, r2, #3
 8004826:	0092      	lsls	r2, r2, #2
 8004828:	4093      	lsls	r3, r2
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	429a      	cmp	r2, r3
 800482e:	d132      	bne.n	8004896 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004830:	4b46      	ldr	r3, [pc, #280]	; (800494c <HAL_GPIO_DeInit+0x1c4>)
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	43db      	mvns	r3, r3
 8004838:	4944      	ldr	r1, [pc, #272]	; (800494c <HAL_GPIO_DeInit+0x1c4>)
 800483a:	4013      	ands	r3, r2
 800483c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800483e:	4b43      	ldr	r3, [pc, #268]	; (800494c <HAL_GPIO_DeInit+0x1c4>)
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	43db      	mvns	r3, r3
 8004846:	4941      	ldr	r1, [pc, #260]	; (800494c <HAL_GPIO_DeInit+0x1c4>)
 8004848:	4013      	ands	r3, r2
 800484a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800484c:	4b3f      	ldr	r3, [pc, #252]	; (800494c <HAL_GPIO_DeInit+0x1c4>)
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	43db      	mvns	r3, r3
 8004854:	493d      	ldr	r1, [pc, #244]	; (800494c <HAL_GPIO_DeInit+0x1c4>)
 8004856:	4013      	ands	r3, r2
 8004858:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800485a:	4b3c      	ldr	r3, [pc, #240]	; (800494c <HAL_GPIO_DeInit+0x1c4>)
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	43db      	mvns	r3, r3
 8004862:	493a      	ldr	r1, [pc, #232]	; (800494c <HAL_GPIO_DeInit+0x1c4>)
 8004864:	4013      	ands	r3, r2
 8004866:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	220f      	movs	r2, #15
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004878:	4a2e      	ldr	r2, [pc, #184]	; (8004934 <HAL_GPIO_DeInit+0x1ac>)
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	089b      	lsrs	r3, r3, #2
 800487e:	3302      	adds	r3, #2
 8004880:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	43da      	mvns	r2, r3
 8004888:	482a      	ldr	r0, [pc, #168]	; (8004934 <HAL_GPIO_DeInit+0x1ac>)
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	089b      	lsrs	r3, r3, #2
 800488e:	400a      	ands	r2, r1
 8004890:	3302      	adds	r3, #2
 8004892:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	2103      	movs	r1, #3
 80048a0:	fa01 f303 	lsl.w	r3, r1, r3
 80048a4:	43db      	mvns	r3, r3
 80048a6:	401a      	ands	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	08da      	lsrs	r2, r3, #3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3208      	adds	r2, #8
 80048b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	220f      	movs	r2, #15
 80048c2:	fa02 f303 	lsl.w	r3, r2, r3
 80048c6:	43db      	mvns	r3, r3
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	08d2      	lsrs	r2, r2, #3
 80048cc:	4019      	ands	r1, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3208      	adds	r2, #8
 80048d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	2103      	movs	r1, #3
 80048e0:	fa01 f303 	lsl.w	r3, r1, r3
 80048e4:	43db      	mvns	r3, r3
 80048e6:	401a      	ands	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	2101      	movs	r1, #1
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	fa01 f303 	lsl.w	r3, r1, r3
 80048f8:	43db      	mvns	r3, r3
 80048fa:	401a      	ands	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	2103      	movs	r1, #3
 800490a:	fa01 f303 	lsl.w	r3, r1, r3
 800490e:	43db      	mvns	r3, r3
 8004910:	401a      	ands	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	3301      	adds	r3, #1
 800491a:	617b      	str	r3, [r7, #20]
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2b0f      	cmp	r3, #15
 8004920:	f67f af40 	bls.w	80047a4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop
 8004928:	371c      	adds	r7, #28
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40013800 	.word	0x40013800
 8004938:	40020000 	.word	0x40020000
 800493c:	40020400 	.word	0x40020400
 8004940:	40020800 	.word	0x40020800
 8004944:	40020c00 	.word	0x40020c00
 8004948:	40021000 	.word	0x40021000
 800494c:	40013c00 	.word	0x40013c00

08004950 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	460b      	mov	r3, r1
 800495a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	691a      	ldr	r2, [r3, #16]
 8004960:	887b      	ldrh	r3, [r7, #2]
 8004962:	4013      	ands	r3, r2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004968:	2301      	movs	r3, #1
 800496a:	73fb      	strb	r3, [r7, #15]
 800496c:	e001      	b.n	8004972 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800496e:	2300      	movs	r3, #0
 8004970:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004972:	7bfb      	ldrb	r3, [r7, #15]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	460b      	mov	r3, r1
 800498a:	807b      	strh	r3, [r7, #2]
 800498c:	4613      	mov	r3, r2
 800498e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004990:	787b      	ldrb	r3, [r7, #1]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004996:	887a      	ldrh	r2, [r7, #2]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800499c:	e003      	b.n	80049a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800499e:	887b      	ldrh	r3, [r7, #2]
 80049a0:	041a      	lsls	r2, r3, #16
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	619a      	str	r2, [r3, #24]
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049b2:	b480      	push	{r7}
 80049b4:	b085      	sub	sp, #20
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	460b      	mov	r3, r1
 80049bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049c4:	887a      	ldrh	r2, [r7, #2]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	4013      	ands	r3, r2
 80049ca:	041a      	lsls	r2, r3, #16
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	43d9      	mvns	r1, r3
 80049d0:	887b      	ldrh	r3, [r7, #2]
 80049d2:	400b      	ands	r3, r1
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	619a      	str	r2, [r3, #24]
}
 80049da:	bf00      	nop
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
	...

080049e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e267      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d075      	beq.n	8004af2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a06:	4b88      	ldr	r3, [pc, #544]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 030c 	and.w	r3, r3, #12
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d00c      	beq.n	8004a2c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a12:	4b85      	ldr	r3, [pc, #532]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d112      	bne.n	8004a44 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a1e:	4b82      	ldr	r3, [pc, #520]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a2a:	d10b      	bne.n	8004a44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a2c:	4b7e      	ldr	r3, [pc, #504]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d05b      	beq.n	8004af0 <HAL_RCC_OscConfig+0x108>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d157      	bne.n	8004af0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e242      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a4c:	d106      	bne.n	8004a5c <HAL_RCC_OscConfig+0x74>
 8004a4e:	4b76      	ldr	r3, [pc, #472]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a75      	ldr	r2, [pc, #468]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	e01d      	b.n	8004a98 <HAL_RCC_OscConfig+0xb0>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a64:	d10c      	bne.n	8004a80 <HAL_RCC_OscConfig+0x98>
 8004a66:	4b70      	ldr	r3, [pc, #448]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a6f      	ldr	r2, [pc, #444]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	4b6d      	ldr	r3, [pc, #436]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a6c      	ldr	r2, [pc, #432]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a7c:	6013      	str	r3, [r2, #0]
 8004a7e:	e00b      	b.n	8004a98 <HAL_RCC_OscConfig+0xb0>
 8004a80:	4b69      	ldr	r3, [pc, #420]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a68      	ldr	r2, [pc, #416]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a8a:	6013      	str	r3, [r2, #0]
 8004a8c:	4b66      	ldr	r3, [pc, #408]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a65      	ldr	r2, [pc, #404]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004a92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d013      	beq.n	8004ac8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa0:	f7ff fb5a 	bl	8004158 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aa8:	f7ff fb56 	bl	8004158 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b64      	cmp	r3, #100	; 0x64
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e207      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aba:	4b5b      	ldr	r3, [pc, #364]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0f0      	beq.n	8004aa8 <HAL_RCC_OscConfig+0xc0>
 8004ac6:	e014      	b.n	8004af2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac8:	f7ff fb46 	bl	8004158 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad0:	f7ff fb42 	bl	8004158 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b64      	cmp	r3, #100	; 0x64
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e1f3      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ae2:	4b51      	ldr	r3, [pc, #324]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f0      	bne.n	8004ad0 <HAL_RCC_OscConfig+0xe8>
 8004aee:	e000      	b.n	8004af2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d063      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004afe:	4b4a      	ldr	r3, [pc, #296]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 030c 	and.w	r3, r3, #12
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00b      	beq.n	8004b22 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b0a:	4b47      	ldr	r3, [pc, #284]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d11c      	bne.n	8004b50 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b16:	4b44      	ldr	r3, [pc, #272]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d116      	bne.n	8004b50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b22:	4b41      	ldr	r3, [pc, #260]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d005      	beq.n	8004b3a <HAL_RCC_OscConfig+0x152>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d001      	beq.n	8004b3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e1c7      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b3a:	4b3b      	ldr	r3, [pc, #236]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	4937      	ldr	r1, [pc, #220]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b4e:	e03a      	b.n	8004bc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d020      	beq.n	8004b9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b58:	4b34      	ldr	r3, [pc, #208]	; (8004c2c <HAL_RCC_OscConfig+0x244>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5e:	f7ff fafb 	bl	8004158 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b66:	f7ff faf7 	bl	8004158 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e1a8      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b78:	4b2b      	ldr	r3, [pc, #172]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0f0      	beq.n	8004b66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b84:	4b28      	ldr	r3, [pc, #160]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	00db      	lsls	r3, r3, #3
 8004b92:	4925      	ldr	r1, [pc, #148]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	600b      	str	r3, [r1, #0]
 8004b98:	e015      	b.n	8004bc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b9a:	4b24      	ldr	r3, [pc, #144]	; (8004c2c <HAL_RCC_OscConfig+0x244>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba0:	f7ff fada 	bl	8004158 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ba8:	f7ff fad6 	bl	8004158 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e187      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bba:	4b1b      	ldr	r3, [pc, #108]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1f0      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d036      	beq.n	8004c40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d016      	beq.n	8004c08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bda:	4b15      	ldr	r3, [pc, #84]	; (8004c30 <HAL_RCC_OscConfig+0x248>)
 8004bdc:	2201      	movs	r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be0:	f7ff faba 	bl	8004158 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004be8:	f7ff fab6 	bl	8004158 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e167      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bfa:	4b0b      	ldr	r3, [pc, #44]	; (8004c28 <HAL_RCC_OscConfig+0x240>)
 8004bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0f0      	beq.n	8004be8 <HAL_RCC_OscConfig+0x200>
 8004c06:	e01b      	b.n	8004c40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c08:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <HAL_RCC_OscConfig+0x248>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c0e:	f7ff faa3 	bl	8004158 <HAL_GetTick>
 8004c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c14:	e00e      	b.n	8004c34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c16:	f7ff fa9f 	bl	8004158 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d907      	bls.n	8004c34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e150      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
 8004c28:	40023800 	.word	0x40023800
 8004c2c:	42470000 	.word	0x42470000
 8004c30:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c34:	4b88      	ldr	r3, [pc, #544]	; (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1ea      	bne.n	8004c16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 8097 	beq.w	8004d7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c52:	4b81      	ldr	r3, [pc, #516]	; (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10f      	bne.n	8004c7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60bb      	str	r3, [r7, #8]
 8004c62:	4b7d      	ldr	r3, [pc, #500]	; (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	4a7c      	ldr	r2, [pc, #496]	; (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c6e:	4b7a      	ldr	r3, [pc, #488]	; (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c76:	60bb      	str	r3, [r7, #8]
 8004c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c7e:	4b77      	ldr	r3, [pc, #476]	; (8004e5c <HAL_RCC_OscConfig+0x474>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d118      	bne.n	8004cbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c8a:	4b74      	ldr	r3, [pc, #464]	; (8004e5c <HAL_RCC_OscConfig+0x474>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a73      	ldr	r2, [pc, #460]	; (8004e5c <HAL_RCC_OscConfig+0x474>)
 8004c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c96:	f7ff fa5f 	bl	8004158 <HAL_GetTick>
 8004c9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c9c:	e008      	b.n	8004cb0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c9e:	f7ff fa5b 	bl	8004158 <HAL_GetTick>
 8004ca2:	4602      	mov	r2, r0
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1ad3      	subs	r3, r2, r3
 8004ca8:	2b02      	cmp	r3, #2
 8004caa:	d901      	bls.n	8004cb0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004cac:	2303      	movs	r3, #3
 8004cae:	e10c      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cb0:	4b6a      	ldr	r3, [pc, #424]	; (8004e5c <HAL_RCC_OscConfig+0x474>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f0      	beq.n	8004c9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d106      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x2ea>
 8004cc4:	4b64      	ldr	r3, [pc, #400]	; (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc8:	4a63      	ldr	r2, [pc, #396]	; (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd0:	e01c      	b.n	8004d0c <HAL_RCC_OscConfig+0x324>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b05      	cmp	r3, #5
 8004cd8:	d10c      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x30c>
 8004cda:	4b5f      	ldr	r3, [pc, #380]	; (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cde:	4a5e      	ldr	r2, [pc, #376]	; (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004ce0:	f043 0304 	orr.w	r3, r3, #4
 8004ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ce6:	4b5c      	ldr	r3, [pc, #368]	; (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cea:	4a5b      	ldr	r2, [pc, #364]	; (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004cec:	f043 0301 	orr.w	r3, r3, #1
 8004cf0:	6713      	str	r3, [r2, #112]	; 0x70
 8004cf2:	e00b      	b.n	8004d0c <HAL_RCC_OscConfig+0x324>
 8004cf4:	4b58      	ldr	r3, [pc, #352]	; (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf8:	4a57      	ldr	r2, [pc, #348]	; (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004cfa:	f023 0301 	bic.w	r3, r3, #1
 8004cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8004d00:	4b55      	ldr	r3, [pc, #340]	; (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d04:	4a54      	ldr	r2, [pc, #336]	; (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004d06:	f023 0304 	bic.w	r3, r3, #4
 8004d0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d015      	beq.n	8004d40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d14:	f7ff fa20 	bl	8004158 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d1a:	e00a      	b.n	8004d32 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d1c:	f7ff fa1c 	bl	8004158 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e0cb      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d32:	4b49      	ldr	r3, [pc, #292]	; (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0ee      	beq.n	8004d1c <HAL_RCC_OscConfig+0x334>
 8004d3e:	e014      	b.n	8004d6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d40:	f7ff fa0a 	bl	8004158 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d46:	e00a      	b.n	8004d5e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d48:	f7ff fa06 	bl	8004158 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e0b5      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d5e:	4b3e      	ldr	r3, [pc, #248]	; (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1ee      	bne.n	8004d48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d6a:	7dfb      	ldrb	r3, [r7, #23]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d105      	bne.n	8004d7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d70:	4b39      	ldr	r3, [pc, #228]	; (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	4a38      	ldr	r2, [pc, #224]	; (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	699b      	ldr	r3, [r3, #24]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 80a1 	beq.w	8004ec8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d86:	4b34      	ldr	r3, [pc, #208]	; (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d05c      	beq.n	8004e4c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d141      	bne.n	8004e1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d9a:	4b31      	ldr	r3, [pc, #196]	; (8004e60 <HAL_RCC_OscConfig+0x478>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004da0:	f7ff f9da 	bl	8004158 <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da8:	f7ff f9d6 	bl	8004158 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e087      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dba:	4b27      	ldr	r3, [pc, #156]	; (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1f0      	bne.n	8004da8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69da      	ldr	r2, [r3, #28]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	019b      	lsls	r3, r3, #6
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ddc:	085b      	lsrs	r3, r3, #1
 8004dde:	3b01      	subs	r3, #1
 8004de0:	041b      	lsls	r3, r3, #16
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de8:	061b      	lsls	r3, r3, #24
 8004dea:	491b      	ldr	r1, [pc, #108]	; (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004dec:	4313      	orrs	r3, r2
 8004dee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004df0:	4b1b      	ldr	r3, [pc, #108]	; (8004e60 <HAL_RCC_OscConfig+0x478>)
 8004df2:	2201      	movs	r2, #1
 8004df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df6:	f7ff f9af 	bl	8004158 <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dfc:	e008      	b.n	8004e10 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dfe:	f7ff f9ab 	bl	8004158 <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e05c      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e10:	4b11      	ldr	r3, [pc, #68]	; (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0f0      	beq.n	8004dfe <HAL_RCC_OscConfig+0x416>
 8004e1c:	e054      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e1e:	4b10      	ldr	r3, [pc, #64]	; (8004e60 <HAL_RCC_OscConfig+0x478>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e24:	f7ff f998 	bl	8004158 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e2c:	f7ff f994 	bl	8004158 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e045      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e3e:	4b06      	ldr	r3, [pc, #24]	; (8004e58 <HAL_RCC_OscConfig+0x470>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1f0      	bne.n	8004e2c <HAL_RCC_OscConfig+0x444>
 8004e4a:	e03d      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	699b      	ldr	r3, [r3, #24]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d107      	bne.n	8004e64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e038      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	40007000 	.word	0x40007000
 8004e60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e64:	4b1b      	ldr	r3, [pc, #108]	; (8004ed4 <HAL_RCC_OscConfig+0x4ec>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d028      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d121      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d11a      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e94:	4013      	ands	r3, r2
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d111      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eaa:	085b      	lsrs	r3, r3, #1
 8004eac:	3b01      	subs	r3, #1
 8004eae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d107      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d001      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e000      	b.n	8004eca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	40023800 	.word	0x40023800

08004ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e0cc      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004eec:	4b68      	ldr	r3, [pc, #416]	; (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0307 	and.w	r3, r3, #7
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d90c      	bls.n	8004f14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efa:	4b65      	ldr	r3, [pc, #404]	; (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	b2d2      	uxtb	r2, r2
 8004f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f02:	4b63      	ldr	r3, [pc, #396]	; (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0307 	and.w	r3, r3, #7
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d001      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e0b8      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d020      	beq.n	8004f62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d005      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f2c:	4b59      	ldr	r3, [pc, #356]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	4a58      	ldr	r2, [pc, #352]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0308 	and.w	r3, r3, #8
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d005      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f44:	4b53      	ldr	r3, [pc, #332]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	4a52      	ldr	r2, [pc, #328]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f50:	4b50      	ldr	r3, [pc, #320]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	494d      	ldr	r1, [pc, #308]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d044      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d107      	bne.n	8004f86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f76:	4b47      	ldr	r3, [pc, #284]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d119      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e07f      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d003      	beq.n	8004f96 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d107      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f96:	4b3f      	ldr	r3, [pc, #252]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d109      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e06f      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa6:	4b3b      	ldr	r3, [pc, #236]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e067      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fb6:	4b37      	ldr	r3, [pc, #220]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f023 0203 	bic.w	r2, r3, #3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	4934      	ldr	r1, [pc, #208]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fc8:	f7ff f8c6 	bl	8004158 <HAL_GetTick>
 8004fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fce:	e00a      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fd0:	f7ff f8c2 	bl	8004158 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e04f      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe6:	4b2b      	ldr	r3, [pc, #172]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 020c 	and.w	r2, r3, #12
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d1eb      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ff8:	4b25      	ldr	r3, [pc, #148]	; (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d20c      	bcs.n	8005020 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005006:	4b22      	ldr	r3, [pc, #136]	; (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800500e:	4b20      	ldr	r3, [pc, #128]	; (8005090 <HAL_RCC_ClockConfig+0x1b8>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	429a      	cmp	r2, r3
 800501a:	d001      	beq.n	8005020 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e032      	b.n	8005086 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b00      	cmp	r3, #0
 800502a:	d008      	beq.n	800503e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800502c:	4b19      	ldr	r3, [pc, #100]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	4916      	ldr	r1, [pc, #88]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 800503a:	4313      	orrs	r3, r2
 800503c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d009      	beq.n	800505e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800504a:	4b12      	ldr	r3, [pc, #72]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	490e      	ldr	r1, [pc, #56]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	4313      	orrs	r3, r2
 800505c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800505e:	f000 f821 	bl	80050a4 <HAL_RCC_GetSysClockFreq>
 8005062:	4602      	mov	r2, r0
 8005064:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	091b      	lsrs	r3, r3, #4
 800506a:	f003 030f 	and.w	r3, r3, #15
 800506e:	490a      	ldr	r1, [pc, #40]	; (8005098 <HAL_RCC_ClockConfig+0x1c0>)
 8005070:	5ccb      	ldrb	r3, [r1, r3]
 8005072:	fa22 f303 	lsr.w	r3, r2, r3
 8005076:	4a09      	ldr	r2, [pc, #36]	; (800509c <HAL_RCC_ClockConfig+0x1c4>)
 8005078:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800507a:	4b09      	ldr	r3, [pc, #36]	; (80050a0 <HAL_RCC_ClockConfig+0x1c8>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff f826 	bl	80040d0 <HAL_InitTick>

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	40023c00 	.word	0x40023c00
 8005094:	40023800 	.word	0x40023800
 8005098:	0800a4b4 	.word	0x0800a4b4
 800509c:	2000000c 	.word	0x2000000c
 80050a0:	20000024 	.word	0x20000024

080050a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050a8:	b094      	sub	sp, #80	; 0x50
 80050aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t pllvco = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  uint32_t pllp = 0U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050bc:	4b79      	ldr	r3, [pc, #484]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f003 030c 	and.w	r3, r3, #12
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d00d      	beq.n	80050e4 <HAL_RCC_GetSysClockFreq+0x40>
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	f200 80e1 	bhi.w	8005290 <HAL_RCC_GetSysClockFreq+0x1ec>
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <HAL_RCC_GetSysClockFreq+0x34>
 80050d2:	2b04      	cmp	r3, #4
 80050d4:	d003      	beq.n	80050de <HAL_RCC_GetSysClockFreq+0x3a>
 80050d6:	e0db      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050d8:	4b73      	ldr	r3, [pc, #460]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80050da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050dc:	e0db      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050de:	4b73      	ldr	r3, [pc, #460]	; (80052ac <HAL_RCC_GetSysClockFreq+0x208>)
 80050e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050e2:	e0d8      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050e4:	4b6f      	ldr	r3, [pc, #444]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050ec:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050ee:	4b6d      	ldr	r3, [pc, #436]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d063      	beq.n	80051c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050fa:	4b6a      	ldr	r3, [pc, #424]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	099b      	lsrs	r3, r3, #6
 8005100:	2200      	movs	r2, #0
 8005102:	63bb      	str	r3, [r7, #56]	; 0x38
 8005104:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800510c:	633b      	str	r3, [r7, #48]	; 0x30
 800510e:	2300      	movs	r3, #0
 8005110:	637b      	str	r3, [r7, #52]	; 0x34
 8005112:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005116:	4622      	mov	r2, r4
 8005118:	462b      	mov	r3, r5
 800511a:	f04f 0000 	mov.w	r0, #0
 800511e:	f04f 0100 	mov.w	r1, #0
 8005122:	0159      	lsls	r1, r3, #5
 8005124:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005128:	0150      	lsls	r0, r2, #5
 800512a:	4602      	mov	r2, r0
 800512c:	460b      	mov	r3, r1
 800512e:	4621      	mov	r1, r4
 8005130:	1a51      	subs	r1, r2, r1
 8005132:	6139      	str	r1, [r7, #16]
 8005134:	4629      	mov	r1, r5
 8005136:	eb63 0301 	sbc.w	r3, r3, r1
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	f04f 0200 	mov.w	r2, #0
 8005140:	f04f 0300 	mov.w	r3, #0
 8005144:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005148:	4659      	mov	r1, fp
 800514a:	018b      	lsls	r3, r1, #6
 800514c:	4651      	mov	r1, sl
 800514e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005152:	4651      	mov	r1, sl
 8005154:	018a      	lsls	r2, r1, #6
 8005156:	4651      	mov	r1, sl
 8005158:	ebb2 0801 	subs.w	r8, r2, r1
 800515c:	4659      	mov	r1, fp
 800515e:	eb63 0901 	sbc.w	r9, r3, r1
 8005162:	f04f 0200 	mov.w	r2, #0
 8005166:	f04f 0300 	mov.w	r3, #0
 800516a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800516e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005172:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005176:	4690      	mov	r8, r2
 8005178:	4699      	mov	r9, r3
 800517a:	4623      	mov	r3, r4
 800517c:	eb18 0303 	adds.w	r3, r8, r3
 8005180:	60bb      	str	r3, [r7, #8]
 8005182:	462b      	mov	r3, r5
 8005184:	eb49 0303 	adc.w	r3, r9, r3
 8005188:	60fb      	str	r3, [r7, #12]
 800518a:	f04f 0200 	mov.w	r2, #0
 800518e:	f04f 0300 	mov.w	r3, #0
 8005192:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005196:	4629      	mov	r1, r5
 8005198:	024b      	lsls	r3, r1, #9
 800519a:	4621      	mov	r1, r4
 800519c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051a0:	4621      	mov	r1, r4
 80051a2:	024a      	lsls	r2, r1, #9
 80051a4:	4610      	mov	r0, r2
 80051a6:	4619      	mov	r1, r3
 80051a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051aa:	2200      	movs	r2, #0
 80051ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051b4:	f7fb fd00 	bl	8000bb8 <__aeabi_uldivmod>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4613      	mov	r3, r2
 80051be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051c0:	e058      	b.n	8005274 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051c2:	4b38      	ldr	r3, [pc, #224]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	099b      	lsrs	r3, r3, #6
 80051c8:	2200      	movs	r2, #0
 80051ca:	4618      	mov	r0, r3
 80051cc:	4611      	mov	r1, r2
 80051ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051d2:	623b      	str	r3, [r7, #32]
 80051d4:	2300      	movs	r3, #0
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
 80051d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051dc:	4642      	mov	r2, r8
 80051de:	464b      	mov	r3, r9
 80051e0:	f04f 0000 	mov.w	r0, #0
 80051e4:	f04f 0100 	mov.w	r1, #0
 80051e8:	0159      	lsls	r1, r3, #5
 80051ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051ee:	0150      	lsls	r0, r2, #5
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	4641      	mov	r1, r8
 80051f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80051fa:	4649      	mov	r1, r9
 80051fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005200:	f04f 0200 	mov.w	r2, #0
 8005204:	f04f 0300 	mov.w	r3, #0
 8005208:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800520c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005210:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005214:	ebb2 040a 	subs.w	r4, r2, sl
 8005218:	eb63 050b 	sbc.w	r5, r3, fp
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	00eb      	lsls	r3, r5, #3
 8005226:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800522a:	00e2      	lsls	r2, r4, #3
 800522c:	4614      	mov	r4, r2
 800522e:	461d      	mov	r5, r3
 8005230:	4643      	mov	r3, r8
 8005232:	18e3      	adds	r3, r4, r3
 8005234:	603b      	str	r3, [r7, #0]
 8005236:	464b      	mov	r3, r9
 8005238:	eb45 0303 	adc.w	r3, r5, r3
 800523c:	607b      	str	r3, [r7, #4]
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	f04f 0300 	mov.w	r3, #0
 8005246:	e9d7 4500 	ldrd	r4, r5, [r7]
 800524a:	4629      	mov	r1, r5
 800524c:	028b      	lsls	r3, r1, #10
 800524e:	4621      	mov	r1, r4
 8005250:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005254:	4621      	mov	r1, r4
 8005256:	028a      	lsls	r2, r1, #10
 8005258:	4610      	mov	r0, r2
 800525a:	4619      	mov	r1, r3
 800525c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800525e:	2200      	movs	r2, #0
 8005260:	61bb      	str	r3, [r7, #24]
 8005262:	61fa      	str	r2, [r7, #28]
 8005264:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005268:	f7fb fca6 	bl	8000bb8 <__aeabi_uldivmod>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	4613      	mov	r3, r2
 8005272:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005274:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	0c1b      	lsrs	r3, r3, #16
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	3301      	adds	r3, #1
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005284:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005288:	fbb2 f3f3 	udiv	r3, r2, r3
 800528c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800528e:	e002      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005290:	4b05      	ldr	r3, [pc, #20]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8005292:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005298:	4618      	mov	r0, r3
 800529a:	3750      	adds	r7, #80	; 0x50
 800529c:	46bd      	mov	sp, r7
 800529e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052a2:	bf00      	nop
 80052a4:	40023800 	.word	0x40023800
 80052a8:	00f42400 	.word	0x00f42400
 80052ac:	007a1200 	.word	0x007a1200

080052b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052b4:	4b03      	ldr	r3, [pc, #12]	; (80052c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80052b6:	681b      	ldr	r3, [r3, #0]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	2000000c 	.word	0x2000000c

080052c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052cc:	f7ff fff0 	bl	80052b0 <HAL_RCC_GetHCLKFreq>
 80052d0:	4602      	mov	r2, r0
 80052d2:	4b05      	ldr	r3, [pc, #20]	; (80052e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	0a9b      	lsrs	r3, r3, #10
 80052d8:	f003 0307 	and.w	r3, r3, #7
 80052dc:	4903      	ldr	r1, [pc, #12]	; (80052ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80052de:	5ccb      	ldrb	r3, [r1, r3]
 80052e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	40023800 	.word	0x40023800
 80052ec:	0800a4c4 	.word	0x0800a4c4

080052f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052f4:	f7ff ffdc 	bl	80052b0 <HAL_RCC_GetHCLKFreq>
 80052f8:	4602      	mov	r2, r0
 80052fa:	4b05      	ldr	r3, [pc, #20]	; (8005310 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	0b5b      	lsrs	r3, r3, #13
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	4903      	ldr	r1, [pc, #12]	; (8005314 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005306:	5ccb      	ldrb	r3, [r1, r3]
 8005308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800530c:	4618      	mov	r0, r3
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40023800 	.word	0x40023800
 8005314:	0800a4c4 	.word	0x0800a4c4

08005318 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e07b      	b.n	8005422 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	2b00      	cmp	r3, #0
 8005330:	d108      	bne.n	8005344 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800533a:	d009      	beq.n	8005350 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	61da      	str	r2, [r3, #28]
 8005342:	e005      	b.n	8005350 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f85d 	bl	800542a <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005386:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053a2:	431a      	orrs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	431a      	orrs	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d4:	ea42 0103 	orr.w	r1, r2, r3
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	0c1b      	lsrs	r3, r3, #16
 80053ee:	f003 0104 	and.w	r1, r3, #4
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	f003 0210 	and.w	r2, r3, #16
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	430a      	orrs	r2, r1
 8005400:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005410:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b08a      	sub	sp, #40	; 0x28
 8005442:	af00      	add	r7, sp, #0
 8005444:	60f8      	str	r0, [r7, #12]
 8005446:	60b9      	str	r1, [r7, #8]
 8005448:	607a      	str	r2, [r7, #4]
 800544a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800544c:	2301      	movs	r3, #1
 800544e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005450:	f7fe fe82 	bl	8004158 <HAL_GetTick>
 8005454:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800545c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005464:	887b      	ldrh	r3, [r7, #2]
 8005466:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005468:	7ffb      	ldrb	r3, [r7, #31]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d00c      	beq.n	8005488 <HAL_SPI_TransmitReceive+0x4a>
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005474:	d106      	bne.n	8005484 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d102      	bne.n	8005484 <HAL_SPI_TransmitReceive+0x46>
 800547e:	7ffb      	ldrb	r3, [r7, #31]
 8005480:	2b04      	cmp	r3, #4
 8005482:	d001      	beq.n	8005488 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005484:	2302      	movs	r3, #2
 8005486:	e17f      	b.n	8005788 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d005      	beq.n	800549a <HAL_SPI_TransmitReceive+0x5c>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <HAL_SPI_TransmitReceive+0x5c>
 8005494:	887b      	ldrh	r3, [r7, #2]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d101      	bne.n	800549e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e174      	b.n	8005788 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <HAL_SPI_TransmitReceive+0x6e>
 80054a8:	2302      	movs	r3, #2
 80054aa:	e16d      	b.n	8005788 <HAL_SPI_TransmitReceive+0x34a>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b04      	cmp	r3, #4
 80054be:	d003      	beq.n	80054c8 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2205      	movs	r2, #5
 80054c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	887a      	ldrh	r2, [r7, #2]
 80054d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	887a      	ldrh	r2, [r7, #2]
 80054de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	887a      	ldrh	r2, [r7, #2]
 80054ea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	887a      	ldrh	r2, [r7, #2]
 80054f0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005508:	2b40      	cmp	r3, #64	; 0x40
 800550a:	d007      	beq.n	800551c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800551a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005524:	d17e      	bne.n	8005624 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d002      	beq.n	8005534 <HAL_SPI_TransmitReceive+0xf6>
 800552e:	8afb      	ldrh	r3, [r7, #22]
 8005530:	2b01      	cmp	r3, #1
 8005532:	d16c      	bne.n	800560e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005538:	881a      	ldrh	r2, [r3, #0]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005544:	1c9a      	adds	r2, r3, #2
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b01      	subs	r3, #1
 8005552:	b29a      	uxth	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005558:	e059      	b.n	800560e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b02      	cmp	r3, #2
 8005566:	d11b      	bne.n	80055a0 <HAL_SPI_TransmitReceive+0x162>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800556c:	b29b      	uxth	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d016      	beq.n	80055a0 <HAL_SPI_TransmitReceive+0x162>
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	2b01      	cmp	r3, #1
 8005576:	d113      	bne.n	80055a0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557c:	881a      	ldrh	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005588:	1c9a      	adds	r2, r3, #2
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005592:	b29b      	uxth	r3, r3
 8005594:	3b01      	subs	r3, #1
 8005596:	b29a      	uxth	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800559c:	2300      	movs	r3, #0
 800559e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d119      	bne.n	80055e2 <HAL_SPI_TransmitReceive+0x1a4>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d014      	beq.n	80055e2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68da      	ldr	r2, [r3, #12]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c2:	b292      	uxth	r2, r2
 80055c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ca:	1c9a      	adds	r2, r3, #2
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055de:	2301      	movs	r3, #1
 80055e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80055e2:	f7fe fdb9 	bl	8004158 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d80d      	bhi.n	800560e <HAL_SPI_TransmitReceive+0x1d0>
 80055f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f8:	d009      	beq.n	800560e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	e0bc      	b.n	8005788 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005612:	b29b      	uxth	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1a0      	bne.n	800555a <HAL_SPI_TransmitReceive+0x11c>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d19b      	bne.n	800555a <HAL_SPI_TransmitReceive+0x11c>
 8005622:	e082      	b.n	800572a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <HAL_SPI_TransmitReceive+0x1f4>
 800562c:	8afb      	ldrh	r3, [r7, #22]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d171      	bne.n	8005716 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	330c      	adds	r3, #12
 800563c:	7812      	ldrb	r2, [r2, #0]
 800563e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005644:	1c5a      	adds	r2, r3, #1
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800564e:	b29b      	uxth	r3, r3
 8005650:	3b01      	subs	r3, #1
 8005652:	b29a      	uxth	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005658:	e05d      	b.n	8005716 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b02      	cmp	r3, #2
 8005666:	d11c      	bne.n	80056a2 <HAL_SPI_TransmitReceive+0x264>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800566c:	b29b      	uxth	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d017      	beq.n	80056a2 <HAL_SPI_TransmitReceive+0x264>
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	2b01      	cmp	r3, #1
 8005676:	d114      	bne.n	80056a2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	330c      	adds	r3, #12
 8005682:	7812      	ldrb	r2, [r2, #0]
 8005684:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005694:	b29b      	uxth	r3, r3
 8005696:	3b01      	subs	r3, #1
 8005698:	b29a      	uxth	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800569e:	2300      	movs	r3, #0
 80056a0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f003 0301 	and.w	r3, r3, #1
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d119      	bne.n	80056e4 <HAL_SPI_TransmitReceive+0x2a6>
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d014      	beq.n	80056e4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68da      	ldr	r2, [r3, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c4:	b2d2      	uxtb	r2, r2
 80056c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	3b01      	subs	r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056e0:	2301      	movs	r3, #1
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80056e4:	f7fe fd38 	bl	8004158 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	6a3b      	ldr	r3, [r7, #32]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d803      	bhi.n	80056fc <HAL_SPI_TransmitReceive+0x2be>
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fa:	d102      	bne.n	8005702 <HAL_SPI_TransmitReceive+0x2c4>
 80056fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d109      	bne.n	8005716 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e038      	b.n	8005788 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800571a:	b29b      	uxth	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	d19c      	bne.n	800565a <HAL_SPI_TransmitReceive+0x21c>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005724:	b29b      	uxth	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d197      	bne.n	800565a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800572a:	6a3a      	ldr	r2, [r7, #32]
 800572c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 f8c4 	bl	80058bc <SPI_EndRxTxTransaction>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d008      	beq.n	800574c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2220      	movs	r2, #32
 800573e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e01d      	b.n	8005788 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10a      	bne.n	800576a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005754:	2300      	movs	r3, #0
 8005756:	613b      	str	r3, [r7, #16]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	613b      	str	r3, [r7, #16]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	613b      	str	r3, [r7, #16]
 8005768:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e000      	b.n	8005788 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005786:	2300      	movs	r3, #0
  }
}
 8005788:	4618      	mov	r0, r3
 800578a:	3728      	adds	r7, #40	; 0x28
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800579e:	b2db      	uxtb	r3, r3
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b088      	sub	sp, #32
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	603b      	str	r3, [r7, #0]
 80057b8:	4613      	mov	r3, r2
 80057ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80057bc:	f7fe fccc 	bl	8004158 <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c4:	1a9b      	subs	r3, r3, r2
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	4413      	add	r3, r2
 80057ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80057cc:	f7fe fcc4 	bl	8004158 <HAL_GetTick>
 80057d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80057d2:	4b39      	ldr	r3, [pc, #228]	; (80058b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	015b      	lsls	r3, r3, #5
 80057d8:	0d1b      	lsrs	r3, r3, #20
 80057da:	69fa      	ldr	r2, [r7, #28]
 80057dc:	fb02 f303 	mul.w	r3, r2, r3
 80057e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057e2:	e054      	b.n	800588e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ea:	d050      	beq.n	800588e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057ec:	f7fe fcb4 	bl	8004158 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	69fa      	ldr	r2, [r7, #28]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d902      	bls.n	8005802 <SPI_WaitFlagStateUntilTimeout+0x56>
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d13d      	bne.n	800587e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	685a      	ldr	r2, [r3, #4]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005810:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800581a:	d111      	bne.n	8005840 <SPI_WaitFlagStateUntilTimeout+0x94>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005824:	d004      	beq.n	8005830 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800582e:	d107      	bne.n	8005840 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800583e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005848:	d10f      	bne.n	800586a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005868:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e017      	b.n	80058ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	3b01      	subs	r3, #1
 800588c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	4013      	ands	r3, r2
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	429a      	cmp	r2, r3
 800589c:	bf0c      	ite	eq
 800589e:	2301      	moveq	r3, #1
 80058a0:	2300      	movne	r3, #0
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d19b      	bne.n	80057e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3720      	adds	r7, #32
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	2000000c 	.word	0x2000000c

080058bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b088      	sub	sp, #32
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2201      	movs	r2, #1
 80058d0:	2102      	movs	r1, #2
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f7ff ff6a 	bl	80057ac <SPI_WaitFlagStateUntilTimeout>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d007      	beq.n	80058ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e2:	f043 0220 	orr.w	r2, r3, #32
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80058ea:	2303      	movs	r3, #3
 80058ec:	e032      	b.n	8005954 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80058ee:	4b1b      	ldr	r3, [pc, #108]	; (800595c <SPI_EndRxTxTransaction+0xa0>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a1b      	ldr	r2, [pc, #108]	; (8005960 <SPI_EndRxTxTransaction+0xa4>)
 80058f4:	fba2 2303 	umull	r2, r3, r2, r3
 80058f8:	0d5b      	lsrs	r3, r3, #21
 80058fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058fe:	fb02 f303 	mul.w	r3, r2, r3
 8005902:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800590c:	d112      	bne.n	8005934 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2200      	movs	r2, #0
 8005916:	2180      	movs	r1, #128	; 0x80
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f7ff ff47 	bl	80057ac <SPI_WaitFlagStateUntilTimeout>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d016      	beq.n	8005952 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005928:	f043 0220 	orr.w	r2, r3, #32
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e00f      	b.n	8005954 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	3b01      	subs	r3, #1
 800593e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800594a:	2b80      	cmp	r3, #128	; 0x80
 800594c:	d0f2      	beq.n	8005934 <SPI_EndRxTxTransaction+0x78>
 800594e:	e000      	b.n	8005952 <SPI_EndRxTxTransaction+0x96>
        break;
 8005950:	bf00      	nop
  }

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3718      	adds	r7, #24
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	2000000c 	.word	0x2000000c
 8005960:	165e9f81 	.word	0x165e9f81

08005964 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e042      	b.n	80059fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d106      	bne.n	8005990 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f7fd ff08 	bl	80037a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2224      	movs	r2, #36	; 0x24
 8005994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f973 	bl	8005c94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	691a      	ldr	r2, [r3, #16]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	695a      	ldr	r2, [r3, #20]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68da      	ldr	r2, [r3, #12]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2220      	movs	r2, #32
 80059e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08a      	sub	sp, #40	; 0x28
 8005a08:	af02      	add	r7, sp, #8
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	603b      	str	r3, [r7, #0]
 8005a10:	4613      	mov	r3, r2
 8005a12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	2b20      	cmp	r3, #32
 8005a22:	d175      	bne.n	8005b10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <HAL_UART_Transmit+0x2c>
 8005a2a:	88fb      	ldrh	r3, [r7, #6]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e06e      	b.n	8005b12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2221      	movs	r2, #33	; 0x21
 8005a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a42:	f7fe fb89 	bl	8004158 <HAL_GetTick>
 8005a46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	88fa      	ldrh	r2, [r7, #6]
 8005a4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	88fa      	ldrh	r2, [r7, #6]
 8005a52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a5c:	d108      	bne.n	8005a70 <HAL_UART_Transmit+0x6c>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d104      	bne.n	8005a70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	61bb      	str	r3, [r7, #24]
 8005a6e:	e003      	b.n	8005a78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a74:	2300      	movs	r3, #0
 8005a76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a78:	e02e      	b.n	8005ad8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	2200      	movs	r2, #0
 8005a82:	2180      	movs	r1, #128	; 0x80
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f848 	bl	8005b1a <UART_WaitOnFlagUntilTimeout>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d005      	beq.n	8005a9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e03a      	b.n	8005b12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10b      	bne.n	8005aba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ab0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	3302      	adds	r3, #2
 8005ab6:	61bb      	str	r3, [r7, #24]
 8005ab8:	e007      	b.n	8005aca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	781a      	ldrb	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1cb      	bne.n	8005a7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2140      	movs	r1, #64	; 0x40
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 f814 	bl	8005b1a <UART_WaitOnFlagUntilTimeout>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d005      	beq.n	8005b04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2220      	movs	r2, #32
 8005afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e006      	b.n	8005b12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	e000      	b.n	8005b12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005b10:	2302      	movs	r3, #2
  }
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3720      	adds	r7, #32
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b086      	sub	sp, #24
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	603b      	str	r3, [r7, #0]
 8005b26:	4613      	mov	r3, r2
 8005b28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b2a:	e03b      	b.n	8005ba4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b32:	d037      	beq.n	8005ba4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b34:	f7fe fb10 	bl	8004158 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	6a3a      	ldr	r2, [r7, #32]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d302      	bcc.n	8005b4a <UART_WaitOnFlagUntilTimeout+0x30>
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e03a      	b.n	8005bc4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d023      	beq.n	8005ba4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b80      	cmp	r3, #128	; 0x80
 8005b60:	d020      	beq.n	8005ba4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2b40      	cmp	r3, #64	; 0x40
 8005b66:	d01d      	beq.n	8005ba4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0308 	and.w	r3, r3, #8
 8005b72:	2b08      	cmp	r3, #8
 8005b74:	d116      	bne.n	8005ba4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005b76:	2300      	movs	r3, #0
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	617b      	str	r3, [r7, #20]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	617b      	str	r3, [r7, #20]
 8005b8a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 f81d 	bl	8005bcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2208      	movs	r2, #8
 8005b96:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e00f      	b.n	8005bc4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	4013      	ands	r3, r2
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	bf0c      	ite	eq
 8005bb4:	2301      	moveq	r3, #1
 8005bb6:	2300      	movne	r3, #0
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	461a      	mov	r2, r3
 8005bbc:	79fb      	ldrb	r3, [r7, #7]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d0b4      	beq.n	8005b2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3718      	adds	r7, #24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b095      	sub	sp, #84	; 0x54
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	330c      	adds	r3, #12
 8005bda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bde:	e853 3f00 	ldrex	r3, [r3]
 8005be2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	330c      	adds	r3, #12
 8005bf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bf4:	643a      	str	r2, [r7, #64]	; 0x40
 8005bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bfc:	e841 2300 	strex	r3, r2, [r1]
 8005c00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e5      	bne.n	8005bd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3314      	adds	r3, #20
 8005c0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c10:	6a3b      	ldr	r3, [r7, #32]
 8005c12:	e853 3f00 	ldrex	r3, [r3]
 8005c16:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	f023 0301 	bic.w	r3, r3, #1
 8005c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3314      	adds	r3, #20
 8005c26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c30:	e841 2300 	strex	r3, r2, [r1]
 8005c34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1e5      	bne.n	8005c08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d119      	bne.n	8005c78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	330c      	adds	r3, #12
 8005c4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	e853 3f00 	ldrex	r3, [r3]
 8005c52:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f023 0310 	bic.w	r3, r3, #16
 8005c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	330c      	adds	r3, #12
 8005c62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c64:	61ba      	str	r2, [r7, #24]
 8005c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	6979      	ldr	r1, [r7, #20]
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	e841 2300 	strex	r3, r2, [r1]
 8005c70:	613b      	str	r3, [r7, #16]
   return(result);
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e5      	bne.n	8005c44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c86:	bf00      	nop
 8005c88:	3754      	adds	r7, #84	; 0x54
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
	...

08005c94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c98:	b0c0      	sub	sp, #256	; 0x100
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb0:	68d9      	ldr	r1, [r3, #12]
 8005cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	ea40 0301 	orr.w	r3, r0, r1
 8005cbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc2:	689a      	ldr	r2, [r3, #8]
 8005cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005cec:	f021 010c 	bic.w	r1, r1, #12
 8005cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cfa:	430b      	orrs	r3, r1
 8005cfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0e:	6999      	ldr	r1, [r3, #24]
 8005d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	ea40 0301 	orr.w	r3, r0, r1
 8005d1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	4b8f      	ldr	r3, [pc, #572]	; (8005f60 <UART_SetConfig+0x2cc>)
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d005      	beq.n	8005d34 <UART_SetConfig+0xa0>
 8005d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	4b8d      	ldr	r3, [pc, #564]	; (8005f64 <UART_SetConfig+0x2d0>)
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d104      	bne.n	8005d3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d34:	f7ff fadc 	bl	80052f0 <HAL_RCC_GetPCLK2Freq>
 8005d38:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005d3c:	e003      	b.n	8005d46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d3e:	f7ff fac3 	bl	80052c8 <HAL_RCC_GetPCLK1Freq>
 8005d42:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d50:	f040 810c 	bne.w	8005f6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d5e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005d62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005d66:	4622      	mov	r2, r4
 8005d68:	462b      	mov	r3, r5
 8005d6a:	1891      	adds	r1, r2, r2
 8005d6c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d6e:	415b      	adcs	r3, r3
 8005d70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d76:	4621      	mov	r1, r4
 8005d78:	eb12 0801 	adds.w	r8, r2, r1
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	eb43 0901 	adc.w	r9, r3, r1
 8005d82:	f04f 0200 	mov.w	r2, #0
 8005d86:	f04f 0300 	mov.w	r3, #0
 8005d8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d96:	4690      	mov	r8, r2
 8005d98:	4699      	mov	r9, r3
 8005d9a:	4623      	mov	r3, r4
 8005d9c:	eb18 0303 	adds.w	r3, r8, r3
 8005da0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005da4:	462b      	mov	r3, r5
 8005da6:	eb49 0303 	adc.w	r3, r9, r3
 8005daa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005dba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005dbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	18db      	adds	r3, r3, r3
 8005dc6:	653b      	str	r3, [r7, #80]	; 0x50
 8005dc8:	4613      	mov	r3, r2
 8005dca:	eb42 0303 	adc.w	r3, r2, r3
 8005dce:	657b      	str	r3, [r7, #84]	; 0x54
 8005dd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005dd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005dd8:	f7fa feee 	bl	8000bb8 <__aeabi_uldivmod>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
 8005de0:	4b61      	ldr	r3, [pc, #388]	; (8005f68 <UART_SetConfig+0x2d4>)
 8005de2:	fba3 2302 	umull	r2, r3, r3, r2
 8005de6:	095b      	lsrs	r3, r3, #5
 8005de8:	011c      	lsls	r4, r3, #4
 8005dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dee:	2200      	movs	r2, #0
 8005df0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005df4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005df8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005dfc:	4642      	mov	r2, r8
 8005dfe:	464b      	mov	r3, r9
 8005e00:	1891      	adds	r1, r2, r2
 8005e02:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e04:	415b      	adcs	r3, r3
 8005e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e0c:	4641      	mov	r1, r8
 8005e0e:	eb12 0a01 	adds.w	sl, r2, r1
 8005e12:	4649      	mov	r1, r9
 8005e14:	eb43 0b01 	adc.w	fp, r3, r1
 8005e18:	f04f 0200 	mov.w	r2, #0
 8005e1c:	f04f 0300 	mov.w	r3, #0
 8005e20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e2c:	4692      	mov	sl, r2
 8005e2e:	469b      	mov	fp, r3
 8005e30:	4643      	mov	r3, r8
 8005e32:	eb1a 0303 	adds.w	r3, sl, r3
 8005e36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e3a:	464b      	mov	r3, r9
 8005e3c:	eb4b 0303 	adc.w	r3, fp, r3
 8005e40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e50:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005e54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e58:	460b      	mov	r3, r1
 8005e5a:	18db      	adds	r3, r3, r3
 8005e5c:	643b      	str	r3, [r7, #64]	; 0x40
 8005e5e:	4613      	mov	r3, r2
 8005e60:	eb42 0303 	adc.w	r3, r2, r3
 8005e64:	647b      	str	r3, [r7, #68]	; 0x44
 8005e66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005e6e:	f7fa fea3 	bl	8000bb8 <__aeabi_uldivmod>
 8005e72:	4602      	mov	r2, r0
 8005e74:	460b      	mov	r3, r1
 8005e76:	4611      	mov	r1, r2
 8005e78:	4b3b      	ldr	r3, [pc, #236]	; (8005f68 <UART_SetConfig+0x2d4>)
 8005e7a:	fba3 2301 	umull	r2, r3, r3, r1
 8005e7e:	095b      	lsrs	r3, r3, #5
 8005e80:	2264      	movs	r2, #100	; 0x64
 8005e82:	fb02 f303 	mul.w	r3, r2, r3
 8005e86:	1acb      	subs	r3, r1, r3
 8005e88:	00db      	lsls	r3, r3, #3
 8005e8a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005e8e:	4b36      	ldr	r3, [pc, #216]	; (8005f68 <UART_SetConfig+0x2d4>)
 8005e90:	fba3 2302 	umull	r2, r3, r3, r2
 8005e94:	095b      	lsrs	r3, r3, #5
 8005e96:	005b      	lsls	r3, r3, #1
 8005e98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e9c:	441c      	add	r4, r3
 8005e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ea8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005eac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005eb0:	4642      	mov	r2, r8
 8005eb2:	464b      	mov	r3, r9
 8005eb4:	1891      	adds	r1, r2, r2
 8005eb6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005eb8:	415b      	adcs	r3, r3
 8005eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ebc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ec0:	4641      	mov	r1, r8
 8005ec2:	1851      	adds	r1, r2, r1
 8005ec4:	6339      	str	r1, [r7, #48]	; 0x30
 8005ec6:	4649      	mov	r1, r9
 8005ec8:	414b      	adcs	r3, r1
 8005eca:	637b      	str	r3, [r7, #52]	; 0x34
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	f04f 0300 	mov.w	r3, #0
 8005ed4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005ed8:	4659      	mov	r1, fp
 8005eda:	00cb      	lsls	r3, r1, #3
 8005edc:	4651      	mov	r1, sl
 8005ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ee2:	4651      	mov	r1, sl
 8005ee4:	00ca      	lsls	r2, r1, #3
 8005ee6:	4610      	mov	r0, r2
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4603      	mov	r3, r0
 8005eec:	4642      	mov	r2, r8
 8005eee:	189b      	adds	r3, r3, r2
 8005ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ef4:	464b      	mov	r3, r9
 8005ef6:	460a      	mov	r2, r1
 8005ef8:	eb42 0303 	adc.w	r3, r2, r3
 8005efc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f0c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f14:	460b      	mov	r3, r1
 8005f16:	18db      	adds	r3, r3, r3
 8005f18:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	eb42 0303 	adc.w	r3, r2, r3
 8005f20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005f2a:	f7fa fe45 	bl	8000bb8 <__aeabi_uldivmod>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	4b0d      	ldr	r3, [pc, #52]	; (8005f68 <UART_SetConfig+0x2d4>)
 8005f34:	fba3 1302 	umull	r1, r3, r3, r2
 8005f38:	095b      	lsrs	r3, r3, #5
 8005f3a:	2164      	movs	r1, #100	; 0x64
 8005f3c:	fb01 f303 	mul.w	r3, r1, r3
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	00db      	lsls	r3, r3, #3
 8005f44:	3332      	adds	r3, #50	; 0x32
 8005f46:	4a08      	ldr	r2, [pc, #32]	; (8005f68 <UART_SetConfig+0x2d4>)
 8005f48:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4c:	095b      	lsrs	r3, r3, #5
 8005f4e:	f003 0207 	and.w	r2, r3, #7
 8005f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4422      	add	r2, r4
 8005f5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f5c:	e106      	b.n	800616c <UART_SetConfig+0x4d8>
 8005f5e:	bf00      	nop
 8005f60:	40011000 	.word	0x40011000
 8005f64:	40011400 	.word	0x40011400
 8005f68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f70:	2200      	movs	r2, #0
 8005f72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f76:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005f7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005f7e:	4642      	mov	r2, r8
 8005f80:	464b      	mov	r3, r9
 8005f82:	1891      	adds	r1, r2, r2
 8005f84:	6239      	str	r1, [r7, #32]
 8005f86:	415b      	adcs	r3, r3
 8005f88:	627b      	str	r3, [r7, #36]	; 0x24
 8005f8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f8e:	4641      	mov	r1, r8
 8005f90:	1854      	adds	r4, r2, r1
 8005f92:	4649      	mov	r1, r9
 8005f94:	eb43 0501 	adc.w	r5, r3, r1
 8005f98:	f04f 0200 	mov.w	r2, #0
 8005f9c:	f04f 0300 	mov.w	r3, #0
 8005fa0:	00eb      	lsls	r3, r5, #3
 8005fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fa6:	00e2      	lsls	r2, r4, #3
 8005fa8:	4614      	mov	r4, r2
 8005faa:	461d      	mov	r5, r3
 8005fac:	4643      	mov	r3, r8
 8005fae:	18e3      	adds	r3, r4, r3
 8005fb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005fb4:	464b      	mov	r3, r9
 8005fb6:	eb45 0303 	adc.w	r3, r5, r3
 8005fba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005fca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005fce:	f04f 0200 	mov.w	r2, #0
 8005fd2:	f04f 0300 	mov.w	r3, #0
 8005fd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005fda:	4629      	mov	r1, r5
 8005fdc:	008b      	lsls	r3, r1, #2
 8005fde:	4621      	mov	r1, r4
 8005fe0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fe4:	4621      	mov	r1, r4
 8005fe6:	008a      	lsls	r2, r1, #2
 8005fe8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005fec:	f7fa fde4 	bl	8000bb8 <__aeabi_uldivmod>
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	4b60      	ldr	r3, [pc, #384]	; (8006178 <UART_SetConfig+0x4e4>)
 8005ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8005ffa:	095b      	lsrs	r3, r3, #5
 8005ffc:	011c      	lsls	r4, r3, #4
 8005ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006002:	2200      	movs	r2, #0
 8006004:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006008:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800600c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006010:	4642      	mov	r2, r8
 8006012:	464b      	mov	r3, r9
 8006014:	1891      	adds	r1, r2, r2
 8006016:	61b9      	str	r1, [r7, #24]
 8006018:	415b      	adcs	r3, r3
 800601a:	61fb      	str	r3, [r7, #28]
 800601c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006020:	4641      	mov	r1, r8
 8006022:	1851      	adds	r1, r2, r1
 8006024:	6139      	str	r1, [r7, #16]
 8006026:	4649      	mov	r1, r9
 8006028:	414b      	adcs	r3, r1
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	f04f 0200 	mov.w	r2, #0
 8006030:	f04f 0300 	mov.w	r3, #0
 8006034:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006038:	4659      	mov	r1, fp
 800603a:	00cb      	lsls	r3, r1, #3
 800603c:	4651      	mov	r1, sl
 800603e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006042:	4651      	mov	r1, sl
 8006044:	00ca      	lsls	r2, r1, #3
 8006046:	4610      	mov	r0, r2
 8006048:	4619      	mov	r1, r3
 800604a:	4603      	mov	r3, r0
 800604c:	4642      	mov	r2, r8
 800604e:	189b      	adds	r3, r3, r2
 8006050:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006054:	464b      	mov	r3, r9
 8006056:	460a      	mov	r2, r1
 8006058:	eb42 0303 	adc.w	r3, r2, r3
 800605c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	67bb      	str	r3, [r7, #120]	; 0x78
 800606a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800606c:	f04f 0200 	mov.w	r2, #0
 8006070:	f04f 0300 	mov.w	r3, #0
 8006074:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006078:	4649      	mov	r1, r9
 800607a:	008b      	lsls	r3, r1, #2
 800607c:	4641      	mov	r1, r8
 800607e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006082:	4641      	mov	r1, r8
 8006084:	008a      	lsls	r2, r1, #2
 8006086:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800608a:	f7fa fd95 	bl	8000bb8 <__aeabi_uldivmod>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	4611      	mov	r1, r2
 8006094:	4b38      	ldr	r3, [pc, #224]	; (8006178 <UART_SetConfig+0x4e4>)
 8006096:	fba3 2301 	umull	r2, r3, r3, r1
 800609a:	095b      	lsrs	r3, r3, #5
 800609c:	2264      	movs	r2, #100	; 0x64
 800609e:	fb02 f303 	mul.w	r3, r2, r3
 80060a2:	1acb      	subs	r3, r1, r3
 80060a4:	011b      	lsls	r3, r3, #4
 80060a6:	3332      	adds	r3, #50	; 0x32
 80060a8:	4a33      	ldr	r2, [pc, #204]	; (8006178 <UART_SetConfig+0x4e4>)
 80060aa:	fba2 2303 	umull	r2, r3, r2, r3
 80060ae:	095b      	lsrs	r3, r3, #5
 80060b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060b4:	441c      	add	r4, r3
 80060b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060ba:	2200      	movs	r2, #0
 80060bc:	673b      	str	r3, [r7, #112]	; 0x70
 80060be:	677a      	str	r2, [r7, #116]	; 0x74
 80060c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80060c4:	4642      	mov	r2, r8
 80060c6:	464b      	mov	r3, r9
 80060c8:	1891      	adds	r1, r2, r2
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	415b      	adcs	r3, r3
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060d4:	4641      	mov	r1, r8
 80060d6:	1851      	adds	r1, r2, r1
 80060d8:	6039      	str	r1, [r7, #0]
 80060da:	4649      	mov	r1, r9
 80060dc:	414b      	adcs	r3, r1
 80060de:	607b      	str	r3, [r7, #4]
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	f04f 0300 	mov.w	r3, #0
 80060e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80060ec:	4659      	mov	r1, fp
 80060ee:	00cb      	lsls	r3, r1, #3
 80060f0:	4651      	mov	r1, sl
 80060f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060f6:	4651      	mov	r1, sl
 80060f8:	00ca      	lsls	r2, r1, #3
 80060fa:	4610      	mov	r0, r2
 80060fc:	4619      	mov	r1, r3
 80060fe:	4603      	mov	r3, r0
 8006100:	4642      	mov	r2, r8
 8006102:	189b      	adds	r3, r3, r2
 8006104:	66bb      	str	r3, [r7, #104]	; 0x68
 8006106:	464b      	mov	r3, r9
 8006108:	460a      	mov	r2, r1
 800610a:	eb42 0303 	adc.w	r3, r2, r3
 800610e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	663b      	str	r3, [r7, #96]	; 0x60
 800611a:	667a      	str	r2, [r7, #100]	; 0x64
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	f04f 0300 	mov.w	r3, #0
 8006124:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006128:	4649      	mov	r1, r9
 800612a:	008b      	lsls	r3, r1, #2
 800612c:	4641      	mov	r1, r8
 800612e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006132:	4641      	mov	r1, r8
 8006134:	008a      	lsls	r2, r1, #2
 8006136:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800613a:	f7fa fd3d 	bl	8000bb8 <__aeabi_uldivmod>
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	4b0d      	ldr	r3, [pc, #52]	; (8006178 <UART_SetConfig+0x4e4>)
 8006144:	fba3 1302 	umull	r1, r3, r3, r2
 8006148:	095b      	lsrs	r3, r3, #5
 800614a:	2164      	movs	r1, #100	; 0x64
 800614c:	fb01 f303 	mul.w	r3, r1, r3
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	011b      	lsls	r3, r3, #4
 8006154:	3332      	adds	r3, #50	; 0x32
 8006156:	4a08      	ldr	r2, [pc, #32]	; (8006178 <UART_SetConfig+0x4e4>)
 8006158:	fba2 2303 	umull	r2, r3, r2, r3
 800615c:	095b      	lsrs	r3, r3, #5
 800615e:	f003 020f 	and.w	r2, r3, #15
 8006162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4422      	add	r2, r4
 800616a:	609a      	str	r2, [r3, #8]
}
 800616c:	bf00      	nop
 800616e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006172:	46bd      	mov	sp, r7
 8006174:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006178:	51eb851f 	.word	0x51eb851f

0800617c <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b08c      	sub	sp, #48	; 0x30
 8006180:	af00      	add	r7, sp, #0
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	4603      	mov	r3, r0
 8006186:	71fb      	strb	r3, [r7, #7]
 8006188:	460b      	mov	r3, r1
 800618a:	71bb      	strb	r3, [r7, #6]
 800618c:	4613      	mov	r3, r2
 800618e:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 8006190:	79fb      	ldrb	r3, [r7, #7]
 8006192:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 8006194:	79bb      	ldrb	r3, [r7, #6]
 8006196:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 8006198:	797b      	ldrb	r3, [r7, #5]
 800619a:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800619c:	f107 030c 	add.w	r3, r7, #12
 80061a0:	2207      	movs	r2, #7
 80061a2:	2100      	movs	r1, #0
 80061a4:	4618      	mov	r0, r3
 80061a6:	f002 f893 	bl	80082d0 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80061aa:	f107 0318 	add.w	r3, r7, #24
 80061ae:	2218      	movs	r2, #24
 80061b0:	2100      	movs	r1, #0
 80061b2:	4618      	mov	r0, r3
 80061b4:	f002 f88c 	bl	80082d0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80061b8:	233f      	movs	r3, #63	; 0x3f
 80061ba:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 80061bc:	238a      	movs	r3, #138	; 0x8a
 80061be:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 80061c0:	f107 0314 	add.w	r3, r7, #20
 80061c4:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 80061c6:	2303      	movs	r3, #3
 80061c8:	627b      	str	r3, [r7, #36]	; 0x24
  rq.rparam = &resp;
 80061ca:	f107 030c 	add.w	r3, r7, #12
 80061ce:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 80061d0:	2307      	movs	r3, #7
 80061d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 80061d4:	f107 0318 	add.w	r3, r7, #24
 80061d8:	2100      	movs	r1, #0
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fe78 	bl	8006ed0 <hci_send_req>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	da01      	bge.n	80061ea <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 80061e6:	23ff      	movs	r3, #255	; 0xff
 80061e8:	e014      	b.n	8006214 <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 80061ea:	7b3b      	ldrb	r3, [r7, #12]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 80061f0:	7b3b      	ldrb	r3, [r7, #12]
 80061f2:	e00f      	b.n	8006214 <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 80061f4:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80061fe:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 8006202:	b29a      	uxth	r2, r3
 8006204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006206:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8006208:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 800620c:	b29a      	uxth	r2, r3
 800620e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006210:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3730      	adds	r7, #48	; 0x30
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b08e      	sub	sp, #56	; 0x38
 8006220:	af00      	add	r7, sp, #0
 8006222:	60b9      	str	r1, [r7, #8]
 8006224:	607a      	str	r2, [r7, #4]
 8006226:	603b      	str	r3, [r7, #0]
 8006228:	4603      	mov	r3, r0
 800622a:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 800622c:	7bfb      	ldrb	r3, [r7, #15]
 800622e:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006230:	f107 0314 	add.w	r3, r7, #20
 8006234:	2207      	movs	r2, #7
 8006236:	2100      	movs	r1, #0
 8006238:	4618      	mov	r0, r3
 800623a:	f002 f849 	bl	80082d0 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800623e:	f107 0320 	add.w	r3, r7, #32
 8006242:	2218      	movs	r2, #24
 8006244:	2100      	movs	r1, #0
 8006246:	4618      	mov	r0, r3
 8006248:	f002 f842 	bl	80082d0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800624c:	233f      	movs	r3, #63	; 0x3f
 800624e:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 8006250:	238a      	movs	r3, #138	; 0x8a
 8006252:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = &cp;
 8006254:	f107 031c 	add.w	r3, r7, #28
 8006258:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = sizeof(cp);
 800625a:	2301      	movs	r3, #1
 800625c:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 800625e:	f107 0314 	add.w	r3, r7, #20
 8006262:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 8006264:	2307      	movs	r3, #7
 8006266:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8006268:	f107 0320 	add.w	r3, r7, #32
 800626c:	2100      	movs	r1, #0
 800626e:	4618      	mov	r0, r3
 8006270:	f000 fe2e 	bl	8006ed0 <hci_send_req>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	da01      	bge.n	800627e <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 800627a:	23ff      	movs	r3, #255	; 0xff
 800627c:	e014      	b.n	80062a8 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 800627e:	7d3b      	ldrb	r3, [r7, #20]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 8006284:	7d3b      	ldrb	r3, [r7, #20]
 8006286:	e00f      	b.n	80062a8 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 8006288:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 800628c:	b29a      	uxth	r2, r3
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8006292:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 8006296:	b29a      	uxth	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 800629c:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3738      	adds	r7, #56	; 0x38
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 80062b0:	b590      	push	{r4, r7, lr}
 80062b2:	b095      	sub	sp, #84	; 0x54
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	4604      	mov	r4, r0
 80062b8:	4608      	mov	r0, r1
 80062ba:	4611      	mov	r1, r2
 80062bc:	461a      	mov	r2, r3
 80062be:	4623      	mov	r3, r4
 80062c0:	71fb      	strb	r3, [r7, #7]
 80062c2:	4603      	mov	r3, r0
 80062c4:	80bb      	strh	r3, [r7, #4]
 80062c6:	460b      	mov	r3, r1
 80062c8:	807b      	strh	r3, [r7, #2]
 80062ca:	4613      	mov	r3, r2
 80062cc:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 80062ce:	2300      	movs	r3, #0
 80062d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 80062d4:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80062d8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80062dc:	4413      	add	r3, r2
 80062de:	330e      	adds	r3, #14
 80062e0:	2b28      	cmp	r3, #40	; 0x28
 80062e2:	d901      	bls.n	80062e8 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 80062e4:	2342      	movs	r3, #66	; 0x42
 80062e6:	e0c9      	b.n	800647c <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 80062e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80062ec:	3350      	adds	r3, #80	; 0x50
 80062ee:	443b      	add	r3, r7
 80062f0:	79fa      	ldrb	r2, [r7, #7]
 80062f2:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80062f6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80062fa:	3301      	adds	r3, #1
 80062fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 8006300:	88bb      	ldrh	r3, [r7, #4]
 8006302:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8006304:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006308:	f107 0208 	add.w	r2, r7, #8
 800630c:	4413      	add	r3, r2
 800630e:	88ba      	ldrh	r2, [r7, #4]
 8006310:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8006312:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006316:	3302      	adds	r3, #2
 8006318:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 800631c:	887b      	ldrh	r3, [r7, #2]
 800631e:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8006320:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006324:	f107 0208 	add.w	r2, r7, #8
 8006328:	4413      	add	r3, r2
 800632a:	887a      	ldrh	r2, [r7, #2]
 800632c:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800632e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006332:	3302      	adds	r3, #2
 8006334:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = OwnAddrType;
 8006338:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800633c:	3350      	adds	r3, #80	; 0x50
 800633e:	443b      	add	r3, r7
 8006340:	79ba      	ldrb	r2, [r7, #6]
 8006342:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8006346:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800634a:	3301      	adds	r3, #1
 800634c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 8006350:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006354:	3350      	adds	r3, #80	; 0x50
 8006356:	443b      	add	r3, r7
 8006358:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800635c:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8006360:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006364:	3301      	adds	r3, #1
 8006366:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  buffer[indx] = LocalNameLen;
 800636a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800636e:	3350      	adds	r3, #80	; 0x50
 8006370:	443b      	add	r3, r7
 8006372:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8006376:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800637a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800637e:	3301      	adds	r3, #1
 8006380:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8006384:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006388:	f107 0208 	add.w	r2, r7, #8
 800638c:	4413      	add	r3, r2
 800638e:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8006392:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006394:	4618      	mov	r0, r3
 8006396:	f002 f81a 	bl	80083ce <memcpy>
  indx +=  LocalNameLen;
 800639a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800639e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80063a2:	4413      	add	r3, r2
 80063a4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 80063a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80063ac:	3350      	adds	r3, #80	; 0x50
 80063ae:	443b      	add	r3, r7
 80063b0:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 80063b4:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80063b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80063bc:	3301      	adds	r3, #1
 80063be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80063c2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80063c6:	f107 0208 	add.w	r2, r7, #8
 80063ca:	4413      	add	r3, r2
 80063cc:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 80063d0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80063d2:	4618      	mov	r0, r3
 80063d4:	f001 fffb 	bl	80083ce <memcpy>
  indx +=  ServiceUUIDLen;  
 80063d8:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80063dc:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80063e0:	4413      	add	r3, r2
 80063e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 80063e6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80063ea:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 80063ee:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80063f2:	f107 0208 	add.w	r2, r7, #8
 80063f6:	4413      	add	r3, r2
 80063f8:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80063fc:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 80063fe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006402:	3302      	adds	r3, #2
 8006404:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8006408:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800640c:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8006410:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006414:	f107 0208 	add.w	r2, r7, #8
 8006418:	4413      	add	r3, r2
 800641a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800641e:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 8006420:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006424:	3302      	adds	r3, #2
 8006426:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800642a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800642e:	2218      	movs	r2, #24
 8006430:	2100      	movs	r1, #0
 8006432:	4618      	mov	r0, r3
 8006434:	f001 ff4c 	bl	80082d0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8006438:	233f      	movs	r3, #63	; 0x3f
 800643a:	86bb      	strh	r3, [r7, #52]	; 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 800643c:	2383      	movs	r3, #131	; 0x83
 800643e:	86fb      	strh	r3, [r7, #54]	; 0x36
  rq.cparam = (void *)buffer;
 8006440:	f107 0308 	add.w	r3, r7, #8
 8006444:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.clen = indx;
 8006446:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800644a:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rparam = &status;
 800644c:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8006450:	647b      	str	r3, [r7, #68]	; 0x44
  rq.rlen = 1;
 8006452:	2301      	movs	r3, #1
 8006454:	64bb      	str	r3, [r7, #72]	; 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8006456:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800645a:	2100      	movs	r1, #0
 800645c:	4618      	mov	r0, r3
 800645e:	f000 fd37 	bl	8006ed0 <hci_send_req>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	da01      	bge.n	800646c <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 8006468:	23ff      	movs	r3, #255	; 0xff
 800646a:	e007      	b.n	800647c <aci_gap_set_discoverable+0x1cc>

  if (status) {
 800646c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <aci_gap_set_discoverable+0x1ca>
    return status;
 8006474:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006478:	e000      	b.n	800647c <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3754      	adds	r7, #84	; 0x54
 8006480:	46bd      	mov	sp, r7
 8006482:	bd90      	pop	{r4, r7, pc}

08006484 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8006484:	b590      	push	{r4, r7, lr}
 8006486:	b091      	sub	sp, #68	; 0x44
 8006488:	af00      	add	r7, sp, #0
 800648a:	603a      	str	r2, [r7, #0]
 800648c:	461a      	mov	r2, r3
 800648e:	4603      	mov	r3, r0
 8006490:	71fb      	strb	r3, [r7, #7]
 8006492:	460b      	mov	r3, r1
 8006494:	71bb      	strb	r3, [r7, #6]
 8006496:	4613      	mov	r3, r2
 8006498:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 800649a:	79fb      	ldrb	r3, [r7, #7]
 800649c:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 800649e:	79bb      	ldrb	r3, [r7, #6]
 80064a0:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 80064a2:	79bb      	ldrb	r3, [r7, #6]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00a      	beq.n	80064be <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	f107 030e 	add.w	r3, r7, #14
 80064ae:	6814      	ldr	r4, [r2, #0]
 80064b0:	6850      	ldr	r0, [r2, #4]
 80064b2:	6891      	ldr	r1, [r2, #8]
 80064b4:	68d2      	ldr	r2, [r2, #12]
 80064b6:	601c      	str	r4, [r3, #0]
 80064b8:	6058      	str	r0, [r3, #4]
 80064ba:	6099      	str	r1, [r3, #8]
 80064bc:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 80064be:	797b      	ldrb	r3, [r7, #5]
 80064c0:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 80064c2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80064c6:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 80064c8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80064cc:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 80064d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064d2:	f8c7 3021 	str.w	r3, [r7, #33]	; 0x21
  cp.bonding_mode = bonding_mode;
 80064d6:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80064da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80064de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80064e2:	2218      	movs	r2, #24
 80064e4:	2100      	movs	r1, #0
 80064e6:	4618      	mov	r0, r3
 80064e8:	f001 fef2 	bl	80082d0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80064ec:	233f      	movs	r3, #63	; 0x3f
 80064ee:	853b      	strh	r3, [r7, #40]	; 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 80064f0:	2386      	movs	r3, #134	; 0x86
 80064f2:	857b      	strh	r3, [r7, #42]	; 0x2a
  rq.cparam = &cp;
 80064f4:	f107 030c 	add.w	r3, r7, #12
 80064f8:	633b      	str	r3, [r7, #48]	; 0x30
  rq.clen = sizeof(cp);
 80064fa:	231a      	movs	r3, #26
 80064fc:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rparam = &status;
 80064fe:	f107 030b 	add.w	r3, r7, #11
 8006502:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rlen = 1;
 8006504:	2301      	movs	r3, #1
 8006506:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8006508:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800650c:	2100      	movs	r1, #0
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fcde 	bl	8006ed0 <hci_send_req>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	da01      	bge.n	800651e <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 800651a:	23ff      	movs	r3, #255	; 0xff
 800651c:	e005      	b.n	800652a <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 800651e:	7afb      	ldrb	r3, [r7, #11]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <aci_gap_set_auth_requirement+0xa4>
    return status;
 8006524:	7afb      	ldrb	r3, [r7, #11]
 8006526:	e000      	b.n	800652a <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3744      	adds	r7, #68	; 0x44
 800652e:	46bd      	mov	sp, r7
 8006530:	bd90      	pop	{r4, r7, pc}

08006532 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b088      	sub	sp, #32
 8006536:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006538:	f107 0308 	add.w	r3, r7, #8
 800653c:	2218      	movs	r2, #24
 800653e:	2100      	movs	r1, #0
 8006540:	4618      	mov	r0, r3
 8006542:	f001 fec5 	bl	80082d0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8006546:	233f      	movs	r3, #63	; 0x3f
 8006548:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 800654a:	f240 1301 	movw	r3, #257	; 0x101
 800654e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006550:	1dfb      	adds	r3, r7, #7
 8006552:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006554:	2301      	movs	r3, #1
 8006556:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8006558:	f107 0308 	add.w	r3, r7, #8
 800655c:	2100      	movs	r1, #0
 800655e:	4618      	mov	r0, r3
 8006560:	f000 fcb6 	bl	8006ed0 <hci_send_req>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	da01      	bge.n	800656e <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 800656a:	23ff      	movs	r3, #255	; 0xff
 800656c:	e000      	b.n	8006570 <aci_gatt_init+0x3e>

  return status;
 800656e:	79fb      	ldrb	r3, [r7, #7]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3720      	adds	r7, #32
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b090      	sub	sp, #64	; 0x40
 800657c:	af00      	add	r7, sp, #0
 800657e:	6039      	str	r1, [r7, #0]
 8006580:	4611      	mov	r1, r2
 8006582:	461a      	mov	r2, r3
 8006584:	4603      	mov	r3, r0
 8006586:	71fb      	strb	r3, [r7, #7]
 8006588:	460b      	mov	r3, r1
 800658a:	71bb      	strb	r3, [r7, #6]
 800658c:	4613      	mov	r3, r2
 800658e:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8006590:	2300      	movs	r3, #0
 8006592:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_uuid_type;
 8006596:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800659a:	3340      	adds	r3, #64	; 0x40
 800659c:	443b      	add	r3, r7
 800659e:	79fa      	ldrb	r2, [r7, #7]
 80065a0:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80065a4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80065a8:	3301      	adds	r3, #1
 80065aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 80065ae:	79fb      	ldrb	r3, [r7, #7]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d103      	bne.n	80065bc <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 80065b4:	2302      	movs	r3, #2
 80065b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80065ba:	e002      	b.n	80065c2 <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 80065bc:	2310      	movs	r3, #16
 80065be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 80065c2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80065c6:	f107 020c 	add.w	r2, r7, #12
 80065ca:	4413      	add	r3, r2
 80065cc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80065d0:	6839      	ldr	r1, [r7, #0]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f001 fefb 	bl	80083ce <memcpy>
  indx +=  uuid_len;
 80065d8:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80065dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80065e0:	4413      	add	r3, r2
 80065e2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = service_type;
 80065e6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80065ea:	3340      	adds	r3, #64	; 0x40
 80065ec:	443b      	add	r3, r7
 80065ee:	79ba      	ldrb	r2, [r7, #6]
 80065f0:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 80065f4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80065f8:	3301      	adds	r3, #1
 80065fa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
  buffer[indx] = max_attr_records;
 80065fe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006602:	3340      	adds	r3, #64	; 0x40
 8006604:	443b      	add	r3, r7
 8006606:	797a      	ldrb	r2, [r7, #5]
 8006608:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 800660c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006610:	3301      	adds	r3, #1
 8006612:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006616:	f107 0320 	add.w	r3, r7, #32
 800661a:	2203      	movs	r2, #3
 800661c:	2100      	movs	r1, #0
 800661e:	4618      	mov	r0, r3
 8006620:	f001 fe56 	bl	80082d0 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006628:	2218      	movs	r2, #24
 800662a:	2100      	movs	r1, #0
 800662c:	4618      	mov	r0, r3
 800662e:	f001 fe4f 	bl	80082d0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8006632:	233f      	movs	r3, #63	; 0x3f
 8006634:	84bb      	strh	r3, [r7, #36]	; 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8006636:	f44f 7381 	mov.w	r3, #258	; 0x102
 800663a:	84fb      	strh	r3, [r7, #38]	; 0x26
  rq.cparam = (void *)buffer;
 800663c:	f107 030c 	add.w	r3, r7, #12
 8006640:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.clen = indx;
 8006642:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8006646:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rparam = &resp;
 8006648:	f107 0320 	add.w	r3, r7, #32
 800664c:	637b      	str	r3, [r7, #52]	; 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 800664e:	2303      	movs	r3, #3
 8006650:	63bb      	str	r3, [r7, #56]	; 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8006652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006656:	2100      	movs	r1, #0
 8006658:	4618      	mov	r0, r3
 800665a:	f000 fc39 	bl	8006ed0 <hci_send_req>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	da01      	bge.n	8006668 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 8006664:	23ff      	movs	r3, #255	; 0xff
 8006666:	e00c      	b.n	8006682 <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 8006668:	f897 3020 	ldrb.w	r3, [r7, #32]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <aci_gatt_add_serv+0xfe>
    return resp.status;
 8006670:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006674:	e005      	b.n	8006682 <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 8006676:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
 800667a:	b29a      	uxth	r2, r3
 800667c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800667e:	801a      	strh	r2, [r3, #0]

  return 0;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3740      	adds	r7, #64	; 0x40
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b092      	sub	sp, #72	; 0x48
 800668e:	af00      	add	r7, sp, #0
 8006690:	603a      	str	r2, [r7, #0]
 8006692:	461a      	mov	r2, r3
 8006694:	4603      	mov	r3, r0
 8006696:	80fb      	strh	r3, [r7, #6]
 8006698:	460b      	mov	r3, r1
 800669a:	717b      	strb	r3, [r7, #5]
 800669c:	4613      	mov	r3, r2
 800669e:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 80066a0:	2300      	movs	r3, #0
 80066a2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  serviceHandle = htobs(serviceHandle);
 80066a6:	88fb      	ldrh	r3, [r7, #6]
 80066a8:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 80066aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80066ae:	f107 020c 	add.w	r2, r7, #12
 80066b2:	4413      	add	r3, r2
 80066b4:	88fa      	ldrh	r2, [r7, #6]
 80066b6:	801a      	strh	r2, [r3, #0]
  indx += 2;
 80066b8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80066bc:	3302      	adds	r3, #2
 80066be:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charUuidType;
 80066c2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80066c6:	3348      	adds	r3, #72	; 0x48
 80066c8:	443b      	add	r3, r7
 80066ca:	797a      	ldrb	r2, [r7, #5]
 80066cc:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80066d0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80066d4:	3301      	adds	r3, #1
 80066d6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  if(charUuidType == UUID_TYPE_16){
 80066da:	797b      	ldrb	r3, [r7, #5]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d103      	bne.n	80066e8 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 80066e0:	2302      	movs	r3, #2
 80066e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80066e6:	e002      	b.n	80066ee <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 80066e8:	2310      	movs	r3, #16
 80066ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80066ee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80066f2:	f107 020c 	add.w	r2, r7, #12
 80066f6:	4413      	add	r3, r2
 80066f8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80066fc:	6839      	ldr	r1, [r7, #0]
 80066fe:	4618      	mov	r0, r3
 8006700:	f001 fe65 	bl	80083ce <memcpy>
  indx +=  uuid_len;
 8006704:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8006708:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800670c:	4413      	add	r3, r2
 800670e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charValueLen;
 8006712:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006716:	3348      	adds	r3, #72	; 0x48
 8006718:	443b      	add	r3, r7
 800671a:	793a      	ldrb	r2, [r7, #4]
 800671c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8006720:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006724:	3301      	adds	r3, #1
 8006726:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = charProperties;
 800672a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800672e:	3348      	adds	r3, #72	; 0x48
 8006730:	443b      	add	r3, r7
 8006732:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8006736:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800673a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800673e:	3301      	adds	r3, #1
 8006740:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = secPermissions;
 8006744:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006748:	3348      	adds	r3, #72	; 0x48
 800674a:	443b      	add	r3, r7
 800674c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8006750:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8006754:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006758:	3301      	adds	r3, #1
 800675a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = gattEvtMask;
 800675e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006762:	3348      	adds	r3, #72	; 0x48
 8006764:	443b      	add	r3, r7
 8006766:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 800676a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 800676e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006772:	3301      	adds	r3, #1
 8006774:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = encryKeySize;
 8006778:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800677c:	3348      	adds	r3, #72	; 0x48
 800677e:	443b      	add	r3, r7
 8006780:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8006784:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8006788:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800678c:	3301      	adds	r3, #1
 800678e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  buffer[indx] = isVariable;
 8006792:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8006796:	3348      	adds	r3, #72	; 0x48
 8006798:	443b      	add	r3, r7
 800679a:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800679e:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 80067a2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80067a6:	3301      	adds	r3, #1
 80067a8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80067ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80067b0:	2203      	movs	r2, #3
 80067b2:	2100      	movs	r1, #0
 80067b4:	4618      	mov	r0, r3
 80067b6:	f001 fd8b 	bl	80082d0 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80067ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067be:	2218      	movs	r2, #24
 80067c0:	2100      	movs	r1, #0
 80067c2:	4618      	mov	r0, r3
 80067c4:	f001 fd84 	bl	80082d0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80067c8:	233f      	movs	r3, #63	; 0x3f
 80067ca:	85bb      	strh	r3, [r7, #44]	; 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 80067cc:	f44f 7382 	mov.w	r3, #260	; 0x104
 80067d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  rq.cparam = (void *)buffer;
 80067d2:	f107 030c 	add.w	r3, r7, #12
 80067d6:	637b      	str	r3, [r7, #52]	; 0x34
  rq.clen = indx;
 80067d8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80067dc:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.rparam = &resp;
 80067de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80067e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 80067e4:	2303      	movs	r3, #3
 80067e6:	643b      	str	r3, [r7, #64]	; 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 80067e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067ec:	2100      	movs	r1, #0
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fb6e 	bl	8006ed0 <hci_send_req>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	da01      	bge.n	80067fe <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 80067fa:	23ff      	movs	r3, #255	; 0xff
 80067fc:	e00c      	b.n	8006818 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 80067fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <aci_gatt_add_char+0x182>
    return resp.status;
 8006806:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800680a:	e005      	b.n	8006818 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 800680c:	f8b7 3029 	ldrh.w	r3, [r7, #41]	; 0x29
 8006810:	b29a      	uxth	r2, r3
 8006812:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006814:	801a      	strh	r2, [r3, #0]

  return 0;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3748      	adds	r7, #72	; 0x48
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8006820:	b590      	push	{r4, r7, lr}
 8006822:	b0ab      	sub	sp, #172	; 0xac
 8006824:	af00      	add	r7, sp, #0
 8006826:	4604      	mov	r4, r0
 8006828:	4608      	mov	r0, r1
 800682a:	4611      	mov	r1, r2
 800682c:	461a      	mov	r2, r3
 800682e:	4623      	mov	r3, r4
 8006830:	80fb      	strh	r3, [r7, #6]
 8006832:	4603      	mov	r3, r0
 8006834:	80bb      	strh	r3, [r7, #4]
 8006836:	460b      	mov	r3, r1
 8006838:	70fb      	strb	r3, [r7, #3]
 800683a:	4613      	mov	r3, r2
 800683c:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 800683e:	2300      	movs	r3, #0
 8006840:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8006844:	78bb      	ldrb	r3, [r7, #2]
 8006846:	2b7a      	cmp	r3, #122	; 0x7a
 8006848:	d901      	bls.n	800684e <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 800684a:	2342      	movs	r3, #66	; 0x42
 800684c:	e074      	b.n	8006938 <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 800684e:	88fb      	ldrh	r3, [r7, #6]
 8006850:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8006852:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006856:	f107 0208 	add.w	r2, r7, #8
 800685a:	4413      	add	r3, r2
 800685c:	88fa      	ldrh	r2, [r7, #6]
 800685e:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8006860:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006864:	3302      	adds	r3, #2
 8006866:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  charHandle = htobs(charHandle);
 800686a:	88bb      	ldrh	r3, [r7, #4]
 800686c:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800686e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006872:	f107 0208 	add.w	r2, r7, #8
 8006876:	4413      	add	r3, r2
 8006878:	88ba      	ldrh	r2, [r7, #4]
 800687a:	801a      	strh	r2, [r3, #0]
  indx += 2;
 800687c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006880:	3302      	adds	r3, #2
 8006882:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValOffset;
 8006886:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800688a:	33a8      	adds	r3, #168	; 0xa8
 800688c:	443b      	add	r3, r7
 800688e:	78fa      	ldrb	r2, [r7, #3]
 8006890:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8006894:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006898:	3301      	adds	r3, #1
 800689a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = charValueLen;
 800689e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80068a2:	33a8      	adds	r3, #168	; 0xa8
 80068a4:	443b      	add	r3, r7
 80068a6:	78ba      	ldrb	r2, [r7, #2]
 80068a8:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80068ac:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80068b0:	3301      	adds	r3, #1
 80068b2:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 80068b6:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80068ba:	f107 0208 	add.w	r2, r7, #8
 80068be:	4413      	add	r3, r2
 80068c0:	78ba      	ldrb	r2, [r7, #2]
 80068c2:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80068c6:	4618      	mov	r0, r3
 80068c8:	f001 fd81 	bl	80083ce <memcpy>
  indx +=  charValueLen;
 80068cc:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 80068d0:	78bb      	ldrb	r3, [r7, #2]
 80068d2:	4413      	add	r3, r2
 80068d4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80068d8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80068dc:	2218      	movs	r2, #24
 80068de:	2100      	movs	r1, #0
 80068e0:	4618      	mov	r0, r3
 80068e2:	f001 fcf5 	bl	80082d0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80068e6:	233f      	movs	r3, #63	; 0x3f
 80068e8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 80068ec:	f44f 7383 	mov.w	r3, #262	; 0x106
 80068f0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 80068f4:	f107 0308 	add.w	r3, r7, #8
 80068f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 80068fc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006900:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8006904:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8006908:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 800690c:	2301      	movs	r3, #1
 800690e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8006912:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006916:	2100      	movs	r1, #0
 8006918:	4618      	mov	r0, r3
 800691a:	f000 fad9 	bl	8006ed0 <hci_send_req>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	da01      	bge.n	8006928 <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 8006924:	23ff      	movs	r3, #255	; 0xff
 8006926:	e007      	b.n	8006938 <aci_gatt_update_char_value+0x118>

  if (status) {
 8006928:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 800692c:	2b00      	cmp	r3, #0
 800692e:	d002      	beq.n	8006936 <aci_gatt_update_char_value+0x116>
    return status;
 8006930:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8006934:	e000      	b.n	8006938 <aci_gatt_update_char_value+0x118>
  }

  return 0;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	37ac      	adds	r7, #172	; 0xac
 800693c:	46bd      	mov	sp, r7
 800693e:	bd90      	pop	{r4, r7, pc}

08006940 <aci_gatt_write_without_response>:
  return status;
}

tBleStatus aci_gatt_write_without_response(uint16_t conn_handle, uint16_t attr_handle,
                                              uint8_t val_len, const uint8_t* attr_val)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b092      	sub	sp, #72	; 0x48
 8006944:	af00      	add	r7, sp, #0
 8006946:	607b      	str	r3, [r7, #4]
 8006948:	4603      	mov	r3, r0
 800694a:	81fb      	strh	r3, [r7, #14]
 800694c:	460b      	mov	r3, r1
 800694e:	81bb      	strh	r3, [r7, #12]
 8006950:	4613      	mov	r3, r2
 8006952:	72fb      	strb	r3, [r7, #11]
  struct hci_request rq;
  uint8_t status;
  gatt_write_without_resp_cp cp;
  
  if(val_len > sizeof(cp.attr_val))
 8006954:	7afb      	ldrb	r3, [r7, #11]
 8006956:	2b14      	cmp	r3, #20
 8006958:	d901      	bls.n	800695e <aci_gatt_write_without_response+0x1e>
    return BLE_STATUS_INVALID_PARAMS;
 800695a:	2342      	movs	r3, #66	; 0x42
 800695c:	e031      	b.n	80069c2 <aci_gatt_write_without_response+0x82>

  cp.conn_handle = htobs(conn_handle);
 800695e:	89fb      	ldrh	r3, [r7, #14]
 8006960:	82bb      	strh	r3, [r7, #20]
  cp.attr_handle = htobs(attr_handle);
 8006962:	89bb      	ldrh	r3, [r7, #12]
 8006964:	82fb      	strh	r3, [r7, #22]
  cp.val_len = val_len;
 8006966:	7afb      	ldrb	r3, [r7, #11]
 8006968:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(cp.attr_val, attr_val, val_len);
 800696a:	7afa      	ldrb	r2, [r7, #11]
 800696c:	f107 0314 	add.w	r3, r7, #20
 8006970:	3305      	adds	r3, #5
 8006972:	6879      	ldr	r1, [r7, #4]
 8006974:	4618      	mov	r0, r3
 8006976:	f001 fd2a 	bl	80083ce <memcpy>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800697a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800697e:	2218      	movs	r2, #24
 8006980:	2100      	movs	r1, #0
 8006982:	4618      	mov	r0, r3
 8006984:	f001 fca4 	bl	80082d0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8006988:	233f      	movs	r3, #63	; 0x3f
 800698a:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_GATT_WRITE_WITHOUT_RESPONSE;
 800698c:	f240 1323 	movw	r3, #291	; 0x123
 8006990:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &cp;
 8006992:	f107 0314 	add.w	r3, r7, #20
 8006996:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = GATT_WRITE_WITHOUT_RESPONSE_CP_SIZE + val_len; 
 8006998:	7afb      	ldrb	r3, [r7, #11]
 800699a:	3305      	adds	r3, #5
 800699c:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 800699e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80069a2:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 80069a4:	2301      	movs	r3, #1
 80069a6:	647b      	str	r3, [r7, #68]	; 0x44

  if (hci_send_req(&rq, FALSE) < 0)
 80069a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80069ac:	2100      	movs	r1, #0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fa8e 	bl	8006ed0 <hci_send_req>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	da01      	bge.n	80069be <aci_gatt_write_without_response+0x7e>
    return BLE_STATUS_TIMEOUT;
 80069ba:	23ff      	movs	r3, #255	; 0xff
 80069bc:	e001      	b.n	80069c2 <aci_gatt_write_without_response+0x82>

  return status;
 80069be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3748      	adds	r7, #72	; 0x48
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b0aa      	sub	sp, #168	; 0xa8
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	4603      	mov	r3, r0
 80069d2:	603a      	str	r2, [r7, #0]
 80069d4:	71fb      	strb	r3, [r7, #7]
 80069d6:	460b      	mov	r3, r1
 80069d8:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 80069da:	2300      	movs	r3, #0
 80069dc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 80069e0:	79bb      	ldrb	r3, [r7, #6]
 80069e2:	2b7e      	cmp	r3, #126	; 0x7e
 80069e4:	d901      	bls.n	80069ea <aci_hal_write_config_data+0x20>
    return BLE_STATUS_INVALID_PARAMS;
 80069e6:	2342      	movs	r3, #66	; 0x42
 80069e8:	e050      	b.n	8006a8c <aci_hal_write_config_data+0xc2>

  buffer[indx] = offset;
 80069ea:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80069ee:	33a8      	adds	r3, #168	; 0xa8
 80069f0:	443b      	add	r3, r7
 80069f2:	79fa      	ldrb	r2, [r7, #7]
 80069f4:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 80069f8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80069fc:	3301      	adds	r3, #1
 80069fe:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    
  buffer[indx] = len;
 8006a02:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006a06:	33a8      	adds	r3, #168	; 0xa8
 8006a08:	443b      	add	r3, r7
 8006a0a:	79ba      	ldrb	r2, [r7, #6]
 8006a0c:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8006a10:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006a14:	3301      	adds	r3, #1
 8006a16:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8006a1a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006a1e:	f107 0208 	add.w	r2, r7, #8
 8006a22:	4413      	add	r3, r2
 8006a24:	79ba      	ldrb	r2, [r7, #6]
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f001 fcd0 	bl	80083ce <memcpy>
  indx +=  len;
 8006a2e:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8006a32:	79bb      	ldrb	r3, [r7, #6]
 8006a34:	4413      	add	r3, r2
 8006a36:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006a3a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006a3e:	2218      	movs	r2, #24
 8006a40:	2100      	movs	r1, #0
 8006a42:	4618      	mov	r0, r3
 8006a44:	f001 fc44 	bl	80082d0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8006a48:	233f      	movs	r3, #63	; 0x3f
 8006a4a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8006a4e:	230c      	movs	r3, #12
 8006a50:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
  rq.cparam = (void *)buffer;
 8006a54:	f107 0308 	add.w	r3, r7, #8
 8006a58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  rq.clen = indx;
 8006a5c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006a60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  rq.rparam = &status;
 8006a64:	f107 038b 	add.w	r3, r7, #139	; 0x8b
 8006a68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  rq.rlen = 1;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8006a72:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006a76:	2100      	movs	r1, #0
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f000 fa29 	bl	8006ed0 <hci_send_req>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	da01      	bge.n	8006a88 <aci_hal_write_config_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 8006a84:	23ff      	movs	r3, #255	; 0xff
 8006a86:	e001      	b.n	8006a8c <aci_hal_write_config_data+0xc2>

  return status;
 8006a88:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	37a8      	adds	r7, #168	; 0xa8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08a      	sub	sp, #40	; 0x28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	460a      	mov	r2, r1
 8006a9e:	71fb      	strb	r3, [r7, #7]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8006aa4:	79fb      	ldrb	r3, [r7, #7]
 8006aa6:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8006aa8:	79bb      	ldrb	r3, [r7, #6]
 8006aaa:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006aac:	f107 0310 	add.w	r3, r7, #16
 8006ab0:	2218      	movs	r2, #24
 8006ab2:	2100      	movs	r1, #0
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f001 fc0b 	bl	80082d0 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8006aba:	233f      	movs	r3, #63	; 0x3f
 8006abc:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8006abe:	230f      	movs	r3, #15
 8006ac0:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8006ac2:	f107 030c 	add.w	r3, r7, #12
 8006ac6:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8006ac8:	2302      	movs	r3, #2
 8006aca:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8006acc:	f107 030b 	add.w	r3, r7, #11
 8006ad0:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	627b      	str	r3, [r7, #36]	; 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8006ad6:	f107 0310 	add.w	r3, r7, #16
 8006ada:	2100      	movs	r1, #0
 8006adc:	4618      	mov	r0, r3
 8006ade:	f000 f9f7 	bl	8006ed0 <hci_send_req>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	da01      	bge.n	8006aec <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8006ae8:	23ff      	movs	r3, #255	; 0xff
 8006aea:	e000      	b.n	8006aee <aci_hal_set_tx_power_level+0x5a>

  return status;
 8006aec:	7afb      	ldrb	r3, [r7, #11]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3728      	adds	r7, #40	; 0x28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8006af6:	b590      	push	{r4, r7, lr}
 8006af8:	b089      	sub	sp, #36	; 0x24
 8006afa:	af02      	add	r7, sp, #8
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8006b00:	f107 0410 	add.w	r4, r7, #16
 8006b04:	f107 0215 	add.w	r2, r7, #21
 8006b08:	f107 0112 	add.w	r1, r7, #18
 8006b0c:	f107 0016 	add.w	r0, r7, #22
 8006b10:	f107 030e 	add.w	r3, r7, #14
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	4623      	mov	r3, r4
 8006b18:	f000 f853 	bl	8006bc2 <hci_le_read_local_version>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d126      	bne.n	8006b74 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8006b26:	8a7b      	ldrh	r3, [r7, #18]
 8006b28:	0a1b      	lsrs	r3, r3, #8
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8006b32:	8a7b      	ldrh	r3, [r7, #18]
 8006b34:	021b      	lsls	r3, r3, #8
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	b21a      	sxth	r2, r3
 8006b42:	89fb      	ldrh	r3, [r7, #14]
 8006b44:	091b      	lsrs	r3, r3, #4
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	011b      	lsls	r3, r3, #4
 8006b4a:	b21b      	sxth	r3, r3
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	b21b      	sxth	r3, r3
 8006b50:	4313      	orrs	r3, r2
 8006b52:	b21b      	sxth	r3, r3
 8006b54:	b29a      	uxth	r2, r3
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	b21a      	sxth	r2, r3
 8006b60:	89fb      	ldrh	r3, [r7, #14]
 8006b62:	b21b      	sxth	r3, r3
 8006b64:	f003 030f 	and.w	r3, r3, #15
 8006b68:	b21b      	sxth	r3, r3
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	b21b      	sxth	r3, r3
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8006b74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	371c      	adds	r7, #28
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd90      	pop	{r4, r7, pc}

08006b7e <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b088      	sub	sp, #32
 8006b82:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006b84:	f107 0308 	add.w	r3, r7, #8
 8006b88:	2218      	movs	r2, #24
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f001 fb9f 	bl	80082d0 <memset>
  rq.ogf = OGF_HOST_CTL;
 8006b92:	2303      	movs	r3, #3
 8006b94:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8006b96:	2303      	movs	r3, #3
 8006b98:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006b9a:	1dfb      	adds	r3, r7, #7
 8006b9c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 8006ba2:	f107 0308 	add.w	r3, r7, #8
 8006ba6:	2100      	movs	r1, #0
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 f991 	bl	8006ed0 <hci_send_req>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	da01      	bge.n	8006bb8 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8006bb4:	23ff      	movs	r3, #255	; 0xff
 8006bb6:	e000      	b.n	8006bba <hci_reset+0x3c>
  
  return status;  
 8006bb8:	79fb      	ldrb	r3, [r7, #7]
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3720      	adds	r7, #32
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b08e      	sub	sp, #56	; 0x38
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	607a      	str	r2, [r7, #4]
 8006bce:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8006bd0:	f107 0314 	add.w	r3, r7, #20
 8006bd4:	2209      	movs	r2, #9
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f001 fb79 	bl	80082d0 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006bde:	f107 0320 	add.w	r3, r7, #32
 8006be2:	2218      	movs	r2, #24
 8006be4:	2100      	movs	r1, #0
 8006be6:	4618      	mov	r0, r3
 8006be8:	f001 fb72 	bl	80082d0 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8006bec:	2304      	movs	r3, #4
 8006bee:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.cparam = NULL;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.clen = 0;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  rq.rparam = &resp;
 8006bfc:	f107 0314 	add.w	r3, r7, #20
 8006c00:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8006c02:	2309      	movs	r3, #9
 8006c04:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8006c06:	f107 0320 	add.w	r3, r7, #32
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 f95f 	bl	8006ed0 <hci_send_req>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	da01      	bge.n	8006c1c <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 8006c18:	23ff      	movs	r3, #255	; 0xff
 8006c1a:	e018      	b.n	8006c4e <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 8006c1c:	7d3b      	ldrb	r3, [r7, #20]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <hci_le_read_local_version+0x64>
    return resp.status;
 8006c22:	7d3b      	ldrb	r3, [r7, #20]
 8006c24:	e013      	b.n	8006c4e <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 8006c26:	7d7a      	ldrb	r2, [r7, #21]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 8006c2c:	8afa      	ldrh	r2, [r7, #22]
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 8006c32:	7e3a      	ldrb	r2, [r7, #24]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8006c38:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8006c42:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c4a:	801a      	strh	r2, [r3, #0]
  
  return 0;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3738      	adds	r7, #56	; 0x38
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b092      	sub	sp, #72	; 0x48
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	6039      	str	r1, [r7, #0]
 8006c60:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8006c62:	f107 0310 	add.w	r3, r7, #16
 8006c66:	2220      	movs	r2, #32
 8006c68:	2100      	movs	r1, #0
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f001 fb30 	bl	80082d0 <memset>
  scan_resp_cp.length = length;
 8006c70:	79fb      	ldrb	r3, [r7, #7]
 8006c72:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8006c74:	79fb      	ldrb	r3, [r7, #7]
 8006c76:	2b1f      	cmp	r3, #31
 8006c78:	bf28      	it	cs
 8006c7a:	231f      	movcs	r3, #31
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	461a      	mov	r2, r3
 8006c80:	f107 0310 	add.w	r3, r7, #16
 8006c84:	3301      	adds	r3, #1
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f001 fba0 	bl	80083ce <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8006c8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006c92:	2218      	movs	r2, #24
 8006c94:	2100      	movs	r1, #0
 8006c96:	4618      	mov	r0, r3
 8006c98:	f001 fb1a 	bl	80082d0 <memset>
  rq.ogf = OGF_LE_CTL;
 8006c9c:	2308      	movs	r3, #8
 8006c9e:	863b      	strh	r3, [r7, #48]	; 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8006ca0:	2309      	movs	r3, #9
 8006ca2:	867b      	strh	r3, [r7, #50]	; 0x32
  rq.cparam = &scan_resp_cp;
 8006ca4:	f107 0310 	add.w	r3, r7, #16
 8006ca8:	63bb      	str	r3, [r7, #56]	; 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8006caa:	2320      	movs	r3, #32
 8006cac:	63fb      	str	r3, [r7, #60]	; 0x3c
  rq.rparam = &status;
 8006cae:	f107 030f 	add.w	r3, r7, #15
 8006cb2:	643b      	str	r3, [r7, #64]	; 0x40
  rq.rlen = 1;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	647b      	str	r3, [r7, #68]	; 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8006cb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 f906 	bl	8006ed0 <hci_send_req>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	da01      	bge.n	8006cce <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8006cca:	23ff      	movs	r3, #255	; 0xff
 8006ccc:	e000      	b.n	8006cd0 <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3748      	adds	r7, #72	; 0x48
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	3308      	adds	r3, #8
 8006ce4:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	2b04      	cmp	r3, #4
 8006cec:	d001      	beq.n	8006cf2 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e00c      	b.n	8006d0c <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	3302      	adds	r3, #2
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006d00:	3b03      	subs	r3, #3
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d001      	beq.n	8006d0a <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8006d06:	2302      	movs	r3, #2
 8006d08:	e000      	b.n	8006d0c <verify_packet+0x34>
  
  return 0;      
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b0a6      	sub	sp, #152	; 0x98
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	607b      	str	r3, [r7, #4]
 8006d20:	4603      	mov	r3, r0
 8006d22:	81fb      	strh	r3, [r7, #14]
 8006d24:	460b      	mov	r3, r1
 8006d26:	81bb      	strh	r3, [r7, #12]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8006d2c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d34:	b21a      	sxth	r2, r3
 8006d36:	89fb      	ldrh	r3, [r7, #14]
 8006d38:	029b      	lsls	r3, r3, #10
 8006d3a:	b21b      	sxth	r3, r3
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	b21b      	sxth	r3, r3
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8006d44:	7afb      	ldrb	r3, [r7, #11]
 8006d46:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8006d4c:	f107 0318 	add.w	r3, r7, #24
 8006d50:	3301      	adds	r3, #1
 8006d52:	461a      	mov	r2, r3
 8006d54:	f107 0314 	add.w	r3, r7, #20
 8006d58:	8819      	ldrh	r1, [r3, #0]
 8006d5a:	789b      	ldrb	r3, [r3, #2]
 8006d5c:	8011      	strh	r1, [r2, #0]
 8006d5e:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8006d60:	f107 0318 	add.w	r3, r7, #24
 8006d64:	3304      	adds	r3, #4
 8006d66:	7afa      	ldrb	r2, [r7, #11]
 8006d68:	6879      	ldr	r1, [r7, #4]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f001 fb2f 	bl	80083ce <memcpy>
  
  if (hciContext.io.Send)
 8006d70:	4b08      	ldr	r3, [pc, #32]	; (8006d94 <send_cmd+0x7c>)
 8006d72:	691b      	ldr	r3, [r3, #16]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d009      	beq.n	8006d8c <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8006d78:	4b06      	ldr	r3, [pc, #24]	; (8006d94 <send_cmd+0x7c>)
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	7afa      	ldrb	r2, [r7, #11]
 8006d7e:	b292      	uxth	r2, r2
 8006d80:	3204      	adds	r2, #4
 8006d82:	b291      	uxth	r1, r2
 8006d84:	f107 0218 	add.w	r2, r7, #24
 8006d88:	4610      	mov	r0, r2
 8006d8a:	4798      	blx	r3
  }
}
 8006d8c:	bf00      	nop
 8006d8e:	3798      	adds	r7, #152	; 0x98
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	200006f8 	.word	0x200006f8

08006d98 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 8006da2:	e00a      	b.n	8006dba <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 8006da4:	f107 030c 	add.w	r3, r7, #12
 8006da8:	4619      	mov	r1, r3
 8006daa:	6838      	ldr	r0, [r7, #0]
 8006dac:	f000 fae8 	bl	8007380 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4619      	mov	r1, r3
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fa4f 	bl	8007258 <list_insert_head>
  while (!list_is_empty(src_list))
 8006dba:	6838      	ldr	r0, [r7, #0]
 8006dbc:	f000 fa2a 	bl	8007214 <list_is_empty>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d0ee      	beq.n	8006da4 <move_list+0xc>
  }
}
 8006dc6:	bf00      	nop
 8006dc8:	bf00      	nop
 8006dca:	3710      	adds	r7, #16
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8006dd6:	e009      	b.n	8006dec <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8006dd8:	1d3b      	adds	r3, r7, #4
 8006dda:	4619      	mov	r1, r3
 8006ddc:	4809      	ldr	r0, [pc, #36]	; (8006e04 <free_event_list+0x34>)
 8006dde:	f000 faa8 	bl	8007332 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4619      	mov	r1, r3
 8006de6:	4808      	ldr	r0, [pc, #32]	; (8006e08 <free_event_list+0x38>)
 8006de8:	f000 fa5c 	bl	80072a4 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8006dec:	4806      	ldr	r0, [pc, #24]	; (8006e08 <free_event_list+0x38>)
 8006dee:	f000 faee 	bl	80073ce <list_get_size>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	ddef      	ble.n	8006dd8 <free_event_list+0x8>
  }
}
 8006df8:	bf00      	nop
 8006dfa:	bf00      	nop
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	20000434 	.word	0x20000434
 8006e08:	2000042c 	.word	0x2000042c

08006e0c <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d002      	beq.n	8006e22 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8006e1c:	4a18      	ldr	r2, [pc, #96]	; (8006e80 <hci_init+0x74>)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8006e22:	4818      	ldr	r0, [pc, #96]	; (8006e84 <hci_init+0x78>)
 8006e24:	f000 f9e6 	bl	80071f4 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8006e28:	4817      	ldr	r0, [pc, #92]	; (8006e88 <hci_init+0x7c>)
 8006e2a:	f000 f9e3 	bl	80071f4 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8006e2e:	f7fa fd93 	bl	8001958 <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8006e32:	2300      	movs	r3, #0
 8006e34:	73fb      	strb	r3, [r7, #15]
 8006e36:	e00c      	b.n	8006e52 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
 8006e3a:	228c      	movs	r2, #140	; 0x8c
 8006e3c:	fb02 f303 	mul.w	r3, r2, r3
 8006e40:	4a12      	ldr	r2, [pc, #72]	; (8006e8c <hci_init+0x80>)
 8006e42:	4413      	add	r3, r2
 8006e44:	4619      	mov	r1, r3
 8006e46:	480f      	ldr	r0, [pc, #60]	; (8006e84 <hci_init+0x78>)
 8006e48:	f000 fa2c 	bl	80072a4 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	73fb      	strb	r3, [r7, #15]
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
 8006e54:	2b04      	cmp	r3, #4
 8006e56:	d9ef      	bls.n	8006e38 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8006e58:	4b09      	ldr	r3, [pc, #36]	; (8006e80 <hci_init+0x74>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <hci_init+0x5c>
 8006e60:	4b07      	ldr	r3, [pc, #28]	; (8006e80 <hci_init+0x74>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2000      	movs	r0, #0
 8006e66:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8006e68:	4b05      	ldr	r3, [pc, #20]	; (8006e80 <hci_init+0x74>)
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <hci_init+0x6a>
 8006e70:	4b03      	ldr	r3, [pc, #12]	; (8006e80 <hci_init+0x74>)
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	4798      	blx	r3
}
 8006e76:	bf00      	nop
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	200006f8 	.word	0x200006f8
 8006e84:	2000042c 	.word	0x2000042c
 8006e88:	20000434 	.word	0x20000434
 8006e8c:	2000043c 	.word	0x2000043c

08006e90 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a0b      	ldr	r2, [pc, #44]	; (8006ecc <hci_register_io_bus+0x3c>)
 8006e9e:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	4a09      	ldr	r2, [pc, #36]	; (8006ecc <hci_register_io_bus+0x3c>)
 8006ea6:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	4a07      	ldr	r2, [pc, #28]	; (8006ecc <hci_register_io_bus+0x3c>)
 8006eae:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	4a05      	ldr	r2, [pc, #20]	; (8006ecc <hci_register_io_bus+0x3c>)
 8006eb6:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	4a03      	ldr	r2, [pc, #12]	; (8006ecc <hci_register_io_bus+0x3c>)
 8006ebe:	6093      	str	r3, [r2, #8]
}
 8006ec0:	bf00      	nop
 8006ec2:	370c      	adds	r7, #12
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr
 8006ecc:	200006f8 	.word	0x200006f8

08006ed0 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b08e      	sub	sp, #56	; 0x38
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	460b      	mov	r3, r1
 8006eda:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	885b      	ldrh	r3, [r3, #2]
 8006ee0:	b21b      	sxth	r3, r3
 8006ee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ee6:	b21a      	sxth	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	029b      	lsls	r3, r3, #10
 8006eee:	b21b      	sxth	r3, r3
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	b21b      	sxth	r3, r3
 8006ef4:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 8006efa:	f107 0308 	add.w	r3, r7, #8
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 f978 	bl	80071f4 <list_init_head>

  free_event_list();
 8006f04:	f7ff ff64 	bl	8006dd0 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	8818      	ldrh	r0, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	8859      	ldrh	r1, [r3, #2]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	b2da      	uxtb	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f7ff fefd 	bl	8006d18 <send_cmd>
  
  if (async)
 8006f1e:	78fb      	ldrb	r3, [r7, #3]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <hci_send_req+0x58>
  {
    return 0;
 8006f24:	2300      	movs	r3, #0
 8006f26:	e0e2      	b.n	80070ee <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8006f28:	f7fd f916 	bl	8004158 <HAL_GetTick>
 8006f2c:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8006f2e:	f7fd f913 	bl	8004158 <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f3c:	f200 80b3 	bhi.w	80070a6 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8006f40:	486d      	ldr	r0, [pc, #436]	; (80070f8 <hci_send_req+0x228>)
 8006f42:	f000 f967 	bl	8007214 <list_is_empty>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d000      	beq.n	8006f4e <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8006f4c:	e7ef      	b.n	8006f2e <hci_send_req+0x5e>
      {
        break;
 8006f4e:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8006f50:	f107 0310 	add.w	r3, r7, #16
 8006f54:	4619      	mov	r1, r3
 8006f56:	4868      	ldr	r0, [pc, #416]	; (80070f8 <hci_send_req+0x228>)
 8006f58:	f000 f9eb 	bl	8007332 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	3308      	adds	r3, #8
 8006f60:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8006f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	2b04      	cmp	r3, #4
 8006f68:	d17f      	bne.n	800706a <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 8006f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	3308      	adds	r3, #8
 8006f74:	3303      	adds	r3, #3
 8006f76:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006f7e:	3b03      	subs	r3, #3
 8006f80:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	2b3e      	cmp	r3, #62	; 0x3e
 8006f88:	d04c      	beq.n	8007024 <hci_send_req+0x154>
 8006f8a:	2b3e      	cmp	r3, #62	; 0x3e
 8006f8c:	dc68      	bgt.n	8007060 <hci_send_req+0x190>
 8006f8e:	2b10      	cmp	r3, #16
 8006f90:	f000 808b 	beq.w	80070aa <hci_send_req+0x1da>
 8006f94:	2b10      	cmp	r3, #16
 8006f96:	dc63      	bgt.n	8007060 <hci_send_req+0x190>
 8006f98:	2b0e      	cmp	r3, #14
 8006f9a:	d023      	beq.n	8006fe4 <hci_send_req+0x114>
 8006f9c:	2b0f      	cmp	r3, #15
 8006f9e:	d15f      	bne.n	8007060 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa2:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	885b      	ldrh	r3, [r3, #2]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d17e      	bne.n	80070ae <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	2b0f      	cmp	r3, #15
 8006fb6:	d004      	beq.n	8006fc2 <hci_send_req+0xf2>
          if (cs->status) {
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d051      	beq.n	8007064 <hci_send_req+0x194>
            goto failed;
 8006fc0:	e078      	b.n	80070b4 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	695a      	ldr	r2, [r3, #20]
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	bf28      	it	cs
 8006fcc:	461a      	movcs	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6918      	ldr	r0, [r3, #16]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	695b      	ldr	r3, [r3, #20]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fde:	f001 f9f6 	bl	80083ce <memcpy>
        goto done;
 8006fe2:	e078      	b.n	80070d6 <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d15d      	bne.n	80070b2 <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff8:	3303      	adds	r3, #3
 8006ffa:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	3b03      	subs	r3, #3
 8007000:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	695a      	ldr	r2, [r3, #20]
 8007006:	6a3b      	ldr	r3, [r7, #32]
 8007008:	429a      	cmp	r2, r3
 800700a:	bf28      	it	cs
 800700c:	461a      	movcs	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6918      	ldr	r0, [r3, #16]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	461a      	mov	r2, r3
 800701c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800701e:	f001 f9d6 	bl	80083ce <memcpy>
        goto done;
 8007022:	e058      	b.n	80070d6 <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007026:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	461a      	mov	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	429a      	cmp	r2, r3
 8007034:	d118      	bne.n	8007068 <hci_send_req+0x198>
          break;
      
        len -= 1;
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	3b01      	subs	r3, #1
 800703a:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	695a      	ldr	r2, [r3, #20]
 8007040:	6a3b      	ldr	r3, [r7, #32]
 8007042:	429a      	cmp	r2, r3
 8007044:	bf28      	it	cs
 8007046:	461a      	movcs	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6918      	ldr	r0, [r3, #16]
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	1c59      	adds	r1, r3, #1
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	695b      	ldr	r3, [r3, #20]
 8007058:	461a      	mov	r2, r3
 800705a:	f001 f9b8 	bl	80083ce <memcpy>
        goto done;
 800705e:	e03a      	b.n	80070d6 <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8007060:	bf00      	nop
 8007062:	e002      	b.n	800706a <hci_send_req+0x19a>
          break;
 8007064:	bf00      	nop
 8007066:	e000      	b.n	800706a <hci_send_req+0x19a>
          break;
 8007068:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800706a:	4824      	ldr	r0, [pc, #144]	; (80070fc <hci_send_req+0x22c>)
 800706c:	f000 f8d2 	bl	8007214 <list_is_empty>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00d      	beq.n	8007092 <hci_send_req+0x1c2>
 8007076:	4820      	ldr	r0, [pc, #128]	; (80070f8 <hci_send_req+0x228>)
 8007078:	f000 f8cc 	bl	8007214 <list_is_empty>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d007      	beq.n	8007092 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	4619      	mov	r1, r3
 8007086:	481d      	ldr	r0, [pc, #116]	; (80070fc <hci_send_req+0x22c>)
 8007088:	f000 f90c 	bl	80072a4 <list_insert_tail>
      hciReadPacket=NULL;
 800708c:	2300      	movs	r3, #0
 800708e:	613b      	str	r3, [r7, #16]
 8007090:	e008      	b.n	80070a4 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	f107 0308 	add.w	r3, r7, #8
 8007098:	4611      	mov	r1, r2
 800709a:	4618      	mov	r0, r3
 800709c:	f000 f902 	bl	80072a4 <list_insert_tail>
      hciReadPacket=NULL;
 80070a0:	2300      	movs	r3, #0
 80070a2:	613b      	str	r3, [r7, #16]
  {
 80070a4:	e740      	b.n	8006f28 <hci_send_req+0x58>
        goto failed;
 80070a6:	bf00      	nop
 80070a8:	e004      	b.n	80070b4 <hci_send_req+0x1e4>
        goto failed;
 80070aa:	bf00      	nop
 80070ac:	e002      	b.n	80070b4 <hci_send_req+0x1e4>
          goto failed;
 80070ae:	bf00      	nop
 80070b0:	e000      	b.n	80070b4 <hci_send_req+0x1e4>
          goto failed;
 80070b2:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d004      	beq.n	80070c4 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	4619      	mov	r1, r3
 80070be:	480f      	ldr	r0, [pc, #60]	; (80070fc <hci_send_req+0x22c>)
 80070c0:	f000 f8ca 	bl	8007258 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80070c4:	f107 0308 	add.w	r3, r7, #8
 80070c8:	4619      	mov	r1, r3
 80070ca:	480b      	ldr	r0, [pc, #44]	; (80070f8 <hci_send_req+0x228>)
 80070cc:	f7ff fe64 	bl	8006d98 <move_list>

  return -1;
 80070d0:	f04f 33ff 	mov.w	r3, #4294967295
 80070d4:	e00b      	b.n	80070ee <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	4619      	mov	r1, r3
 80070da:	4808      	ldr	r0, [pc, #32]	; (80070fc <hci_send_req+0x22c>)
 80070dc:	f000 f8bc 	bl	8007258 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80070e0:	f107 0308 	add.w	r3, r7, #8
 80070e4:	4619      	mov	r1, r3
 80070e6:	4804      	ldr	r0, [pc, #16]	; (80070f8 <hci_send_req+0x228>)
 80070e8:	f7ff fe56 	bl	8006d98 <move_list>

  return 0;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3738      	adds	r7, #56	; 0x38
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	20000434 	.word	0x20000434
 80070fc:	2000042c 	.word	0x2000042c

08007100 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8007106:	2300      	movs	r3, #0
 8007108:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800710a:	e013      	b.n	8007134 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800710c:	1d3b      	adds	r3, r7, #4
 800710e:	4619      	mov	r1, r3
 8007110:	480e      	ldr	r0, [pc, #56]	; (800714c <hci_user_evt_proc+0x4c>)
 8007112:	f000 f90e 	bl	8007332 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8007116:	4b0e      	ldr	r3, [pc, #56]	; (8007150 <hci_user_evt_proc+0x50>)
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d005      	beq.n	800712a <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800711e:	4b0c      	ldr	r3, [pc, #48]	; (8007150 <hci_user_evt_proc+0x50>)
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	3208      	adds	r2, #8
 8007126:	4610      	mov	r0, r2
 8007128:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4619      	mov	r1, r3
 800712e:	4809      	ldr	r0, [pc, #36]	; (8007154 <hci_user_evt_proc+0x54>)
 8007130:	f000 f8b8 	bl	80072a4 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8007134:	4805      	ldr	r0, [pc, #20]	; (800714c <hci_user_evt_proc+0x4c>)
 8007136:	f000 f86d 	bl	8007214 <list_is_empty>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d0e5      	beq.n	800710c <hci_user_evt_proc+0xc>
  }
}
 8007140:	bf00      	nop
 8007142:	bf00      	nop
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20000434 	.word	0x20000434
 8007150:	200006f8 	.word	0x200006f8
 8007154:	2000042c 	.word	0x2000042c

08007158 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8007160:	2300      	movs	r3, #0
 8007162:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8007164:	2300      	movs	r3, #0
 8007166:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8007168:	481f      	ldr	r0, [pc, #124]	; (80071e8 <hci_notify_asynch_evt+0x90>)
 800716a:	f000 f853 	bl	8007214 <list_is_empty>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d132      	bne.n	80071da <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8007174:	f107 030c 	add.w	r3, r7, #12
 8007178:	4619      	mov	r1, r3
 800717a:	481b      	ldr	r0, [pc, #108]	; (80071e8 <hci_notify_asynch_evt+0x90>)
 800717c:	f000 f8d9 	bl	8007332 <list_remove_head>
    
    if (hciContext.io.Receive)
 8007180:	4b1a      	ldr	r3, [pc, #104]	; (80071ec <hci_notify_asynch_evt+0x94>)
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d02a      	beq.n	80071de <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8007188:	4b18      	ldr	r3, [pc, #96]	; (80071ec <hci_notify_asynch_evt+0x94>)
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	3208      	adds	r2, #8
 8007190:	2180      	movs	r1, #128	; 0x80
 8007192:	4610      	mov	r0, r2
 8007194:	4798      	blx	r3
 8007196:	4603      	mov	r3, r0
 8007198:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800719a:	7cfb      	ldrb	r3, [r7, #19]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d016      	beq.n	80071ce <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	7cfa      	ldrb	r2, [r7, #19]
 80071a4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7ff fd94 	bl	8006cd8 <verify_packet>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d105      	bne.n	80071c2 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4619      	mov	r1, r3
 80071ba:	480d      	ldr	r0, [pc, #52]	; (80071f0 <hci_notify_asynch_evt+0x98>)
 80071bc:	f000 f872 	bl	80072a4 <list_insert_tail>
 80071c0:	e00d      	b.n	80071de <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	4619      	mov	r1, r3
 80071c6:	4808      	ldr	r0, [pc, #32]	; (80071e8 <hci_notify_asynch_evt+0x90>)
 80071c8:	f000 f846 	bl	8007258 <list_insert_head>
 80071cc:	e007      	b.n	80071de <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	4619      	mov	r1, r3
 80071d2:	4805      	ldr	r0, [pc, #20]	; (80071e8 <hci_notify_asynch_evt+0x90>)
 80071d4:	f000 f840 	bl	8007258 <list_insert_head>
 80071d8:	e001      	b.n	80071de <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 80071da:	2301      	movs	r3, #1
 80071dc:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80071de:	697b      	ldr	r3, [r7, #20]

}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3718      	adds	r7, #24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	2000042c 	.word	0x2000042c
 80071ec:	200006f8 	.word	0x200006f8
 80071f0:	20000434 	.word	0x20000434

080071f4 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	605a      	str	r2, [r3, #4]
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800721c:	f3ef 8310 	mrs	r3, PRIMASK
 8007220:	60fb      	str	r3, [r7, #12]
  return(result);
 8007222:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007224:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007226:	b672      	cpsid	i
}
 8007228:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	429a      	cmp	r2, r3
 8007232:	d102      	bne.n	800723a <list_is_empty+0x26>
  {
    return_value = 1;
 8007234:	2301      	movs	r3, #1
 8007236:	75fb      	strb	r3, [r7, #23]
 8007238:	e001      	b.n	800723e <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800723a:	2300      	movs	r3, #0
 800723c:	75fb      	strb	r3, [r7, #23]
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	f383 8810 	msr	PRIMASK, r3
}
 8007248:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800724a:	7dfb      	ldrb	r3, [r7, #23]
}
 800724c:	4618      	mov	r0, r3
 800724e:	371c      	adds	r7, #28
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007262:	f3ef 8310 	mrs	r3, PRIMASK
 8007266:	60fb      	str	r3, [r7, #12]
  return(result);
 8007268:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800726a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800726c:	b672      	cpsid	i
}
 800726e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	683a      	ldr	r2, [r7, #0]
 8007282:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	605a      	str	r2, [r3, #4]
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	f383 8810 	msr	PRIMASK, r3
}
 8007296:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8007298:	bf00      	nop
 800729a:	371c      	adds	r7, #28
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b087      	sub	sp, #28
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80072ae:	f3ef 8310 	mrs	r3, PRIMASK
 80072b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80072b4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80072b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80072b8:	b672      	cpsid	i
}
 80072ba:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	601a      	str	r2, [r3, #0]
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	f383 8810 	msr	PRIMASK, r3
}
 80072e2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80072e4:	bf00      	nop
 80072e6:	371c      	adds	r7, #28
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b087      	sub	sp, #28
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80072f8:	f3ef 8310 	mrs	r3, PRIMASK
 80072fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80072fe:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007300:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007302:	b672      	cpsid	i
}
 8007304:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	6812      	ldr	r2, [r2, #0]
 800730e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	6852      	ldr	r2, [r2, #4]
 8007318:	605a      	str	r2, [r3, #4]
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	f383 8810 	msr	PRIMASK, r3
}
 8007324:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8007326:	bf00      	nop
 8007328:	371c      	adds	r7, #28
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b086      	sub	sp, #24
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800733c:	f3ef 8310 	mrs	r3, PRIMASK
 8007340:	60fb      	str	r3, [r7, #12]
  return(result);
 8007342:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007344:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007346:	b672      	cpsid	i
}
 8007348:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4618      	mov	r0, r3
 8007358:	f7ff ffca 	bl	80072f0 <list_remove_node>
  (*node)->next = NULL;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2200      	movs	r2, #0
 8007362:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2200      	movs	r2, #0
 800736a:	605a      	str	r2, [r3, #4]
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	f383 8810 	msr	PRIMASK, r3
}
 8007376:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8007378:	bf00      	nop
 800737a:	3718      	adds	r7, #24
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800738a:	f3ef 8310 	mrs	r3, PRIMASK
 800738e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007390:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007392:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007394:	b672      	cpsid	i
}
 8007396:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7ff ffa3 	bl	80072f0 <list_remove_node>
  (*node)->next = NULL;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2200      	movs	r2, #0
 80073b0:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2200      	movs	r2, #0
 80073b8:	605a      	str	r2, [r3, #4]
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	f383 8810 	msr	PRIMASK, r3
}
 80073c4:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80073c6:	bf00      	nop
 80073c8:	3718      	adds	r7, #24
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b089      	sub	sp, #36	; 0x24
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  int size = 0;
 80073d6:	2300      	movs	r3, #0
 80073d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80073da:	f3ef 8310 	mrs	r3, PRIMASK
 80073de:	613b      	str	r3, [r7, #16]
  return(result);
 80073e0:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80073e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80073e4:	b672      	cpsid	i
}
 80073e6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80073ee:	e005      	b.n	80073fc <list_get_size+0x2e>
  {
    size++;
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	3301      	adds	r3, #1
 80073f4:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	429a      	cmp	r2, r3
 8007402:	d1f5      	bne.n	80073f0 <list_get_size+0x22>
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f383 8810 	msr	PRIMASK, r3
}
 800740e:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8007410:	69fb      	ldr	r3, [r7, #28]
}
 8007412:	4618      	mov	r0, r3
 8007414:	3724      	adds	r7, #36	; 0x24
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <__cvt>:
 800741e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007422:	ec55 4b10 	vmov	r4, r5, d0
 8007426:	2d00      	cmp	r5, #0
 8007428:	460e      	mov	r6, r1
 800742a:	4619      	mov	r1, r3
 800742c:	462b      	mov	r3, r5
 800742e:	bfbb      	ittet	lt
 8007430:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007434:	461d      	movlt	r5, r3
 8007436:	2300      	movge	r3, #0
 8007438:	232d      	movlt	r3, #45	; 0x2d
 800743a:	700b      	strb	r3, [r1, #0]
 800743c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800743e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007442:	4691      	mov	r9, r2
 8007444:	f023 0820 	bic.w	r8, r3, #32
 8007448:	bfbc      	itt	lt
 800744a:	4622      	movlt	r2, r4
 800744c:	4614      	movlt	r4, r2
 800744e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007452:	d005      	beq.n	8007460 <__cvt+0x42>
 8007454:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007458:	d100      	bne.n	800745c <__cvt+0x3e>
 800745a:	3601      	adds	r6, #1
 800745c:	2102      	movs	r1, #2
 800745e:	e000      	b.n	8007462 <__cvt+0x44>
 8007460:	2103      	movs	r1, #3
 8007462:	ab03      	add	r3, sp, #12
 8007464:	9301      	str	r3, [sp, #4]
 8007466:	ab02      	add	r3, sp, #8
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	ec45 4b10 	vmov	d0, r4, r5
 800746e:	4653      	mov	r3, sl
 8007470:	4632      	mov	r2, r6
 8007472:	f001 f845 	bl	8008500 <_dtoa_r>
 8007476:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800747a:	4607      	mov	r7, r0
 800747c:	d102      	bne.n	8007484 <__cvt+0x66>
 800747e:	f019 0f01 	tst.w	r9, #1
 8007482:	d022      	beq.n	80074ca <__cvt+0xac>
 8007484:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007488:	eb07 0906 	add.w	r9, r7, r6
 800748c:	d110      	bne.n	80074b0 <__cvt+0x92>
 800748e:	783b      	ldrb	r3, [r7, #0]
 8007490:	2b30      	cmp	r3, #48	; 0x30
 8007492:	d10a      	bne.n	80074aa <__cvt+0x8c>
 8007494:	2200      	movs	r2, #0
 8007496:	2300      	movs	r3, #0
 8007498:	4620      	mov	r0, r4
 800749a:	4629      	mov	r1, r5
 800749c:	f7f9 fb1c 	bl	8000ad8 <__aeabi_dcmpeq>
 80074a0:	b918      	cbnz	r0, 80074aa <__cvt+0x8c>
 80074a2:	f1c6 0601 	rsb	r6, r6, #1
 80074a6:	f8ca 6000 	str.w	r6, [sl]
 80074aa:	f8da 3000 	ldr.w	r3, [sl]
 80074ae:	4499      	add	r9, r3
 80074b0:	2200      	movs	r2, #0
 80074b2:	2300      	movs	r3, #0
 80074b4:	4620      	mov	r0, r4
 80074b6:	4629      	mov	r1, r5
 80074b8:	f7f9 fb0e 	bl	8000ad8 <__aeabi_dcmpeq>
 80074bc:	b108      	cbz	r0, 80074c2 <__cvt+0xa4>
 80074be:	f8cd 900c 	str.w	r9, [sp, #12]
 80074c2:	2230      	movs	r2, #48	; 0x30
 80074c4:	9b03      	ldr	r3, [sp, #12]
 80074c6:	454b      	cmp	r3, r9
 80074c8:	d307      	bcc.n	80074da <__cvt+0xbc>
 80074ca:	9b03      	ldr	r3, [sp, #12]
 80074cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074ce:	1bdb      	subs	r3, r3, r7
 80074d0:	4638      	mov	r0, r7
 80074d2:	6013      	str	r3, [r2, #0]
 80074d4:	b004      	add	sp, #16
 80074d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074da:	1c59      	adds	r1, r3, #1
 80074dc:	9103      	str	r1, [sp, #12]
 80074de:	701a      	strb	r2, [r3, #0]
 80074e0:	e7f0      	b.n	80074c4 <__cvt+0xa6>

080074e2 <__exponent>:
 80074e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074e4:	4603      	mov	r3, r0
 80074e6:	2900      	cmp	r1, #0
 80074e8:	bfb8      	it	lt
 80074ea:	4249      	neglt	r1, r1
 80074ec:	f803 2b02 	strb.w	r2, [r3], #2
 80074f0:	bfb4      	ite	lt
 80074f2:	222d      	movlt	r2, #45	; 0x2d
 80074f4:	222b      	movge	r2, #43	; 0x2b
 80074f6:	2909      	cmp	r1, #9
 80074f8:	7042      	strb	r2, [r0, #1]
 80074fa:	dd2a      	ble.n	8007552 <__exponent+0x70>
 80074fc:	f10d 0207 	add.w	r2, sp, #7
 8007500:	4617      	mov	r7, r2
 8007502:	260a      	movs	r6, #10
 8007504:	4694      	mov	ip, r2
 8007506:	fb91 f5f6 	sdiv	r5, r1, r6
 800750a:	fb06 1415 	mls	r4, r6, r5, r1
 800750e:	3430      	adds	r4, #48	; 0x30
 8007510:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007514:	460c      	mov	r4, r1
 8007516:	2c63      	cmp	r4, #99	; 0x63
 8007518:	f102 32ff 	add.w	r2, r2, #4294967295
 800751c:	4629      	mov	r1, r5
 800751e:	dcf1      	bgt.n	8007504 <__exponent+0x22>
 8007520:	3130      	adds	r1, #48	; 0x30
 8007522:	f1ac 0402 	sub.w	r4, ip, #2
 8007526:	f802 1c01 	strb.w	r1, [r2, #-1]
 800752a:	1c41      	adds	r1, r0, #1
 800752c:	4622      	mov	r2, r4
 800752e:	42ba      	cmp	r2, r7
 8007530:	d30a      	bcc.n	8007548 <__exponent+0x66>
 8007532:	f10d 0209 	add.w	r2, sp, #9
 8007536:	eba2 020c 	sub.w	r2, r2, ip
 800753a:	42bc      	cmp	r4, r7
 800753c:	bf88      	it	hi
 800753e:	2200      	movhi	r2, #0
 8007540:	4413      	add	r3, r2
 8007542:	1a18      	subs	r0, r3, r0
 8007544:	b003      	add	sp, #12
 8007546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007548:	f812 5b01 	ldrb.w	r5, [r2], #1
 800754c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007550:	e7ed      	b.n	800752e <__exponent+0x4c>
 8007552:	2330      	movs	r3, #48	; 0x30
 8007554:	3130      	adds	r1, #48	; 0x30
 8007556:	7083      	strb	r3, [r0, #2]
 8007558:	70c1      	strb	r1, [r0, #3]
 800755a:	1d03      	adds	r3, r0, #4
 800755c:	e7f1      	b.n	8007542 <__exponent+0x60>
	...

08007560 <_printf_float>:
 8007560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007564:	ed2d 8b02 	vpush	{d8}
 8007568:	b08d      	sub	sp, #52	; 0x34
 800756a:	460c      	mov	r4, r1
 800756c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007570:	4616      	mov	r6, r2
 8007572:	461f      	mov	r7, r3
 8007574:	4605      	mov	r5, r0
 8007576:	f000 feb3 	bl	80082e0 <_localeconv_r>
 800757a:	f8d0 a000 	ldr.w	sl, [r0]
 800757e:	4650      	mov	r0, sl
 8007580:	f7f8 fe7e 	bl	8000280 <strlen>
 8007584:	2300      	movs	r3, #0
 8007586:	930a      	str	r3, [sp, #40]	; 0x28
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	9305      	str	r3, [sp, #20]
 800758c:	f8d8 3000 	ldr.w	r3, [r8]
 8007590:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007594:	3307      	adds	r3, #7
 8007596:	f023 0307 	bic.w	r3, r3, #7
 800759a:	f103 0208 	add.w	r2, r3, #8
 800759e:	f8c8 2000 	str.w	r2, [r8]
 80075a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80075aa:	9307      	str	r3, [sp, #28]
 80075ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80075b0:	ee08 0a10 	vmov	s16, r0
 80075b4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80075b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075bc:	4b9e      	ldr	r3, [pc, #632]	; (8007838 <_printf_float+0x2d8>)
 80075be:	f04f 32ff 	mov.w	r2, #4294967295
 80075c2:	f7f9 fabb 	bl	8000b3c <__aeabi_dcmpun>
 80075c6:	bb88      	cbnz	r0, 800762c <_printf_float+0xcc>
 80075c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075cc:	4b9a      	ldr	r3, [pc, #616]	; (8007838 <_printf_float+0x2d8>)
 80075ce:	f04f 32ff 	mov.w	r2, #4294967295
 80075d2:	f7f9 fa95 	bl	8000b00 <__aeabi_dcmple>
 80075d6:	bb48      	cbnz	r0, 800762c <_printf_float+0xcc>
 80075d8:	2200      	movs	r2, #0
 80075da:	2300      	movs	r3, #0
 80075dc:	4640      	mov	r0, r8
 80075de:	4649      	mov	r1, r9
 80075e0:	f7f9 fa84 	bl	8000aec <__aeabi_dcmplt>
 80075e4:	b110      	cbz	r0, 80075ec <_printf_float+0x8c>
 80075e6:	232d      	movs	r3, #45	; 0x2d
 80075e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075ec:	4a93      	ldr	r2, [pc, #588]	; (800783c <_printf_float+0x2dc>)
 80075ee:	4b94      	ldr	r3, [pc, #592]	; (8007840 <_printf_float+0x2e0>)
 80075f0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80075f4:	bf94      	ite	ls
 80075f6:	4690      	movls	r8, r2
 80075f8:	4698      	movhi	r8, r3
 80075fa:	2303      	movs	r3, #3
 80075fc:	6123      	str	r3, [r4, #16]
 80075fe:	9b05      	ldr	r3, [sp, #20]
 8007600:	f023 0304 	bic.w	r3, r3, #4
 8007604:	6023      	str	r3, [r4, #0]
 8007606:	f04f 0900 	mov.w	r9, #0
 800760a:	9700      	str	r7, [sp, #0]
 800760c:	4633      	mov	r3, r6
 800760e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007610:	4621      	mov	r1, r4
 8007612:	4628      	mov	r0, r5
 8007614:	f000 f9da 	bl	80079cc <_printf_common>
 8007618:	3001      	adds	r0, #1
 800761a:	f040 8090 	bne.w	800773e <_printf_float+0x1de>
 800761e:	f04f 30ff 	mov.w	r0, #4294967295
 8007622:	b00d      	add	sp, #52	; 0x34
 8007624:	ecbd 8b02 	vpop	{d8}
 8007628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800762c:	4642      	mov	r2, r8
 800762e:	464b      	mov	r3, r9
 8007630:	4640      	mov	r0, r8
 8007632:	4649      	mov	r1, r9
 8007634:	f7f9 fa82 	bl	8000b3c <__aeabi_dcmpun>
 8007638:	b140      	cbz	r0, 800764c <_printf_float+0xec>
 800763a:	464b      	mov	r3, r9
 800763c:	2b00      	cmp	r3, #0
 800763e:	bfbc      	itt	lt
 8007640:	232d      	movlt	r3, #45	; 0x2d
 8007642:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007646:	4a7f      	ldr	r2, [pc, #508]	; (8007844 <_printf_float+0x2e4>)
 8007648:	4b7f      	ldr	r3, [pc, #508]	; (8007848 <_printf_float+0x2e8>)
 800764a:	e7d1      	b.n	80075f0 <_printf_float+0x90>
 800764c:	6863      	ldr	r3, [r4, #4]
 800764e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007652:	9206      	str	r2, [sp, #24]
 8007654:	1c5a      	adds	r2, r3, #1
 8007656:	d13f      	bne.n	80076d8 <_printf_float+0x178>
 8007658:	2306      	movs	r3, #6
 800765a:	6063      	str	r3, [r4, #4]
 800765c:	9b05      	ldr	r3, [sp, #20]
 800765e:	6861      	ldr	r1, [r4, #4]
 8007660:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007664:	2300      	movs	r3, #0
 8007666:	9303      	str	r3, [sp, #12]
 8007668:	ab0a      	add	r3, sp, #40	; 0x28
 800766a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800766e:	ab09      	add	r3, sp, #36	; 0x24
 8007670:	ec49 8b10 	vmov	d0, r8, r9
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	6022      	str	r2, [r4, #0]
 8007678:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800767c:	4628      	mov	r0, r5
 800767e:	f7ff fece 	bl	800741e <__cvt>
 8007682:	9b06      	ldr	r3, [sp, #24]
 8007684:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007686:	2b47      	cmp	r3, #71	; 0x47
 8007688:	4680      	mov	r8, r0
 800768a:	d108      	bne.n	800769e <_printf_float+0x13e>
 800768c:	1cc8      	adds	r0, r1, #3
 800768e:	db02      	blt.n	8007696 <_printf_float+0x136>
 8007690:	6863      	ldr	r3, [r4, #4]
 8007692:	4299      	cmp	r1, r3
 8007694:	dd41      	ble.n	800771a <_printf_float+0x1ba>
 8007696:	f1ab 0302 	sub.w	r3, fp, #2
 800769a:	fa5f fb83 	uxtb.w	fp, r3
 800769e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80076a2:	d820      	bhi.n	80076e6 <_printf_float+0x186>
 80076a4:	3901      	subs	r1, #1
 80076a6:	465a      	mov	r2, fp
 80076a8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80076ac:	9109      	str	r1, [sp, #36]	; 0x24
 80076ae:	f7ff ff18 	bl	80074e2 <__exponent>
 80076b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076b4:	1813      	adds	r3, r2, r0
 80076b6:	2a01      	cmp	r2, #1
 80076b8:	4681      	mov	r9, r0
 80076ba:	6123      	str	r3, [r4, #16]
 80076bc:	dc02      	bgt.n	80076c4 <_printf_float+0x164>
 80076be:	6822      	ldr	r2, [r4, #0]
 80076c0:	07d2      	lsls	r2, r2, #31
 80076c2:	d501      	bpl.n	80076c8 <_printf_float+0x168>
 80076c4:	3301      	adds	r3, #1
 80076c6:	6123      	str	r3, [r4, #16]
 80076c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d09c      	beq.n	800760a <_printf_float+0xaa>
 80076d0:	232d      	movs	r3, #45	; 0x2d
 80076d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076d6:	e798      	b.n	800760a <_printf_float+0xaa>
 80076d8:	9a06      	ldr	r2, [sp, #24]
 80076da:	2a47      	cmp	r2, #71	; 0x47
 80076dc:	d1be      	bne.n	800765c <_printf_float+0xfc>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1bc      	bne.n	800765c <_printf_float+0xfc>
 80076e2:	2301      	movs	r3, #1
 80076e4:	e7b9      	b.n	800765a <_printf_float+0xfa>
 80076e6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80076ea:	d118      	bne.n	800771e <_printf_float+0x1be>
 80076ec:	2900      	cmp	r1, #0
 80076ee:	6863      	ldr	r3, [r4, #4]
 80076f0:	dd0b      	ble.n	800770a <_printf_float+0x1aa>
 80076f2:	6121      	str	r1, [r4, #16]
 80076f4:	b913      	cbnz	r3, 80076fc <_printf_float+0x19c>
 80076f6:	6822      	ldr	r2, [r4, #0]
 80076f8:	07d0      	lsls	r0, r2, #31
 80076fa:	d502      	bpl.n	8007702 <_printf_float+0x1a2>
 80076fc:	3301      	adds	r3, #1
 80076fe:	440b      	add	r3, r1
 8007700:	6123      	str	r3, [r4, #16]
 8007702:	65a1      	str	r1, [r4, #88]	; 0x58
 8007704:	f04f 0900 	mov.w	r9, #0
 8007708:	e7de      	b.n	80076c8 <_printf_float+0x168>
 800770a:	b913      	cbnz	r3, 8007712 <_printf_float+0x1b2>
 800770c:	6822      	ldr	r2, [r4, #0]
 800770e:	07d2      	lsls	r2, r2, #31
 8007710:	d501      	bpl.n	8007716 <_printf_float+0x1b6>
 8007712:	3302      	adds	r3, #2
 8007714:	e7f4      	b.n	8007700 <_printf_float+0x1a0>
 8007716:	2301      	movs	r3, #1
 8007718:	e7f2      	b.n	8007700 <_printf_float+0x1a0>
 800771a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800771e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007720:	4299      	cmp	r1, r3
 8007722:	db05      	blt.n	8007730 <_printf_float+0x1d0>
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	6121      	str	r1, [r4, #16]
 8007728:	07d8      	lsls	r0, r3, #31
 800772a:	d5ea      	bpl.n	8007702 <_printf_float+0x1a2>
 800772c:	1c4b      	adds	r3, r1, #1
 800772e:	e7e7      	b.n	8007700 <_printf_float+0x1a0>
 8007730:	2900      	cmp	r1, #0
 8007732:	bfd4      	ite	le
 8007734:	f1c1 0202 	rsble	r2, r1, #2
 8007738:	2201      	movgt	r2, #1
 800773a:	4413      	add	r3, r2
 800773c:	e7e0      	b.n	8007700 <_printf_float+0x1a0>
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	055a      	lsls	r2, r3, #21
 8007742:	d407      	bmi.n	8007754 <_printf_float+0x1f4>
 8007744:	6923      	ldr	r3, [r4, #16]
 8007746:	4642      	mov	r2, r8
 8007748:	4631      	mov	r1, r6
 800774a:	4628      	mov	r0, r5
 800774c:	47b8      	blx	r7
 800774e:	3001      	adds	r0, #1
 8007750:	d12c      	bne.n	80077ac <_printf_float+0x24c>
 8007752:	e764      	b.n	800761e <_printf_float+0xbe>
 8007754:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007758:	f240 80e0 	bls.w	800791c <_printf_float+0x3bc>
 800775c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007760:	2200      	movs	r2, #0
 8007762:	2300      	movs	r3, #0
 8007764:	f7f9 f9b8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007768:	2800      	cmp	r0, #0
 800776a:	d034      	beq.n	80077d6 <_printf_float+0x276>
 800776c:	4a37      	ldr	r2, [pc, #220]	; (800784c <_printf_float+0x2ec>)
 800776e:	2301      	movs	r3, #1
 8007770:	4631      	mov	r1, r6
 8007772:	4628      	mov	r0, r5
 8007774:	47b8      	blx	r7
 8007776:	3001      	adds	r0, #1
 8007778:	f43f af51 	beq.w	800761e <_printf_float+0xbe>
 800777c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007780:	429a      	cmp	r2, r3
 8007782:	db02      	blt.n	800778a <_printf_float+0x22a>
 8007784:	6823      	ldr	r3, [r4, #0]
 8007786:	07d8      	lsls	r0, r3, #31
 8007788:	d510      	bpl.n	80077ac <_printf_float+0x24c>
 800778a:	ee18 3a10 	vmov	r3, s16
 800778e:	4652      	mov	r2, sl
 8007790:	4631      	mov	r1, r6
 8007792:	4628      	mov	r0, r5
 8007794:	47b8      	blx	r7
 8007796:	3001      	adds	r0, #1
 8007798:	f43f af41 	beq.w	800761e <_printf_float+0xbe>
 800779c:	f04f 0800 	mov.w	r8, #0
 80077a0:	f104 091a 	add.w	r9, r4, #26
 80077a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077a6:	3b01      	subs	r3, #1
 80077a8:	4543      	cmp	r3, r8
 80077aa:	dc09      	bgt.n	80077c0 <_printf_float+0x260>
 80077ac:	6823      	ldr	r3, [r4, #0]
 80077ae:	079b      	lsls	r3, r3, #30
 80077b0:	f100 8107 	bmi.w	80079c2 <_printf_float+0x462>
 80077b4:	68e0      	ldr	r0, [r4, #12]
 80077b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80077b8:	4298      	cmp	r0, r3
 80077ba:	bfb8      	it	lt
 80077bc:	4618      	movlt	r0, r3
 80077be:	e730      	b.n	8007622 <_printf_float+0xc2>
 80077c0:	2301      	movs	r3, #1
 80077c2:	464a      	mov	r2, r9
 80077c4:	4631      	mov	r1, r6
 80077c6:	4628      	mov	r0, r5
 80077c8:	47b8      	blx	r7
 80077ca:	3001      	adds	r0, #1
 80077cc:	f43f af27 	beq.w	800761e <_printf_float+0xbe>
 80077d0:	f108 0801 	add.w	r8, r8, #1
 80077d4:	e7e6      	b.n	80077a4 <_printf_float+0x244>
 80077d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077d8:	2b00      	cmp	r3, #0
 80077da:	dc39      	bgt.n	8007850 <_printf_float+0x2f0>
 80077dc:	4a1b      	ldr	r2, [pc, #108]	; (800784c <_printf_float+0x2ec>)
 80077de:	2301      	movs	r3, #1
 80077e0:	4631      	mov	r1, r6
 80077e2:	4628      	mov	r0, r5
 80077e4:	47b8      	blx	r7
 80077e6:	3001      	adds	r0, #1
 80077e8:	f43f af19 	beq.w	800761e <_printf_float+0xbe>
 80077ec:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80077f0:	4313      	orrs	r3, r2
 80077f2:	d102      	bne.n	80077fa <_printf_float+0x29a>
 80077f4:	6823      	ldr	r3, [r4, #0]
 80077f6:	07d9      	lsls	r1, r3, #31
 80077f8:	d5d8      	bpl.n	80077ac <_printf_float+0x24c>
 80077fa:	ee18 3a10 	vmov	r3, s16
 80077fe:	4652      	mov	r2, sl
 8007800:	4631      	mov	r1, r6
 8007802:	4628      	mov	r0, r5
 8007804:	47b8      	blx	r7
 8007806:	3001      	adds	r0, #1
 8007808:	f43f af09 	beq.w	800761e <_printf_float+0xbe>
 800780c:	f04f 0900 	mov.w	r9, #0
 8007810:	f104 0a1a 	add.w	sl, r4, #26
 8007814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007816:	425b      	negs	r3, r3
 8007818:	454b      	cmp	r3, r9
 800781a:	dc01      	bgt.n	8007820 <_printf_float+0x2c0>
 800781c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800781e:	e792      	b.n	8007746 <_printf_float+0x1e6>
 8007820:	2301      	movs	r3, #1
 8007822:	4652      	mov	r2, sl
 8007824:	4631      	mov	r1, r6
 8007826:	4628      	mov	r0, r5
 8007828:	47b8      	blx	r7
 800782a:	3001      	adds	r0, #1
 800782c:	f43f aef7 	beq.w	800761e <_printf_float+0xbe>
 8007830:	f109 0901 	add.w	r9, r9, #1
 8007834:	e7ee      	b.n	8007814 <_printf_float+0x2b4>
 8007836:	bf00      	nop
 8007838:	7fefffff 	.word	0x7fefffff
 800783c:	0800a4e0 	.word	0x0800a4e0
 8007840:	0800a4e4 	.word	0x0800a4e4
 8007844:	0800a4e8 	.word	0x0800a4e8
 8007848:	0800a4ec 	.word	0x0800a4ec
 800784c:	0800a4f0 	.word	0x0800a4f0
 8007850:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007852:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007854:	429a      	cmp	r2, r3
 8007856:	bfa8      	it	ge
 8007858:	461a      	movge	r2, r3
 800785a:	2a00      	cmp	r2, #0
 800785c:	4691      	mov	r9, r2
 800785e:	dc37      	bgt.n	80078d0 <_printf_float+0x370>
 8007860:	f04f 0b00 	mov.w	fp, #0
 8007864:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007868:	f104 021a 	add.w	r2, r4, #26
 800786c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800786e:	9305      	str	r3, [sp, #20]
 8007870:	eba3 0309 	sub.w	r3, r3, r9
 8007874:	455b      	cmp	r3, fp
 8007876:	dc33      	bgt.n	80078e0 <_printf_float+0x380>
 8007878:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800787c:	429a      	cmp	r2, r3
 800787e:	db3b      	blt.n	80078f8 <_printf_float+0x398>
 8007880:	6823      	ldr	r3, [r4, #0]
 8007882:	07da      	lsls	r2, r3, #31
 8007884:	d438      	bmi.n	80078f8 <_printf_float+0x398>
 8007886:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800788a:	eba2 0903 	sub.w	r9, r2, r3
 800788e:	9b05      	ldr	r3, [sp, #20]
 8007890:	1ad2      	subs	r2, r2, r3
 8007892:	4591      	cmp	r9, r2
 8007894:	bfa8      	it	ge
 8007896:	4691      	movge	r9, r2
 8007898:	f1b9 0f00 	cmp.w	r9, #0
 800789c:	dc35      	bgt.n	800790a <_printf_float+0x3aa>
 800789e:	f04f 0800 	mov.w	r8, #0
 80078a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078a6:	f104 0a1a 	add.w	sl, r4, #26
 80078aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078ae:	1a9b      	subs	r3, r3, r2
 80078b0:	eba3 0309 	sub.w	r3, r3, r9
 80078b4:	4543      	cmp	r3, r8
 80078b6:	f77f af79 	ble.w	80077ac <_printf_float+0x24c>
 80078ba:	2301      	movs	r3, #1
 80078bc:	4652      	mov	r2, sl
 80078be:	4631      	mov	r1, r6
 80078c0:	4628      	mov	r0, r5
 80078c2:	47b8      	blx	r7
 80078c4:	3001      	adds	r0, #1
 80078c6:	f43f aeaa 	beq.w	800761e <_printf_float+0xbe>
 80078ca:	f108 0801 	add.w	r8, r8, #1
 80078ce:	e7ec      	b.n	80078aa <_printf_float+0x34a>
 80078d0:	4613      	mov	r3, r2
 80078d2:	4631      	mov	r1, r6
 80078d4:	4642      	mov	r2, r8
 80078d6:	4628      	mov	r0, r5
 80078d8:	47b8      	blx	r7
 80078da:	3001      	adds	r0, #1
 80078dc:	d1c0      	bne.n	8007860 <_printf_float+0x300>
 80078de:	e69e      	b.n	800761e <_printf_float+0xbe>
 80078e0:	2301      	movs	r3, #1
 80078e2:	4631      	mov	r1, r6
 80078e4:	4628      	mov	r0, r5
 80078e6:	9205      	str	r2, [sp, #20]
 80078e8:	47b8      	blx	r7
 80078ea:	3001      	adds	r0, #1
 80078ec:	f43f ae97 	beq.w	800761e <_printf_float+0xbe>
 80078f0:	9a05      	ldr	r2, [sp, #20]
 80078f2:	f10b 0b01 	add.w	fp, fp, #1
 80078f6:	e7b9      	b.n	800786c <_printf_float+0x30c>
 80078f8:	ee18 3a10 	vmov	r3, s16
 80078fc:	4652      	mov	r2, sl
 80078fe:	4631      	mov	r1, r6
 8007900:	4628      	mov	r0, r5
 8007902:	47b8      	blx	r7
 8007904:	3001      	adds	r0, #1
 8007906:	d1be      	bne.n	8007886 <_printf_float+0x326>
 8007908:	e689      	b.n	800761e <_printf_float+0xbe>
 800790a:	9a05      	ldr	r2, [sp, #20]
 800790c:	464b      	mov	r3, r9
 800790e:	4442      	add	r2, r8
 8007910:	4631      	mov	r1, r6
 8007912:	4628      	mov	r0, r5
 8007914:	47b8      	blx	r7
 8007916:	3001      	adds	r0, #1
 8007918:	d1c1      	bne.n	800789e <_printf_float+0x33e>
 800791a:	e680      	b.n	800761e <_printf_float+0xbe>
 800791c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800791e:	2a01      	cmp	r2, #1
 8007920:	dc01      	bgt.n	8007926 <_printf_float+0x3c6>
 8007922:	07db      	lsls	r3, r3, #31
 8007924:	d53a      	bpl.n	800799c <_printf_float+0x43c>
 8007926:	2301      	movs	r3, #1
 8007928:	4642      	mov	r2, r8
 800792a:	4631      	mov	r1, r6
 800792c:	4628      	mov	r0, r5
 800792e:	47b8      	blx	r7
 8007930:	3001      	adds	r0, #1
 8007932:	f43f ae74 	beq.w	800761e <_printf_float+0xbe>
 8007936:	ee18 3a10 	vmov	r3, s16
 800793a:	4652      	mov	r2, sl
 800793c:	4631      	mov	r1, r6
 800793e:	4628      	mov	r0, r5
 8007940:	47b8      	blx	r7
 8007942:	3001      	adds	r0, #1
 8007944:	f43f ae6b 	beq.w	800761e <_printf_float+0xbe>
 8007948:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800794c:	2200      	movs	r2, #0
 800794e:	2300      	movs	r3, #0
 8007950:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007954:	f7f9 f8c0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007958:	b9d8      	cbnz	r0, 8007992 <_printf_float+0x432>
 800795a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800795e:	f108 0201 	add.w	r2, r8, #1
 8007962:	4631      	mov	r1, r6
 8007964:	4628      	mov	r0, r5
 8007966:	47b8      	blx	r7
 8007968:	3001      	adds	r0, #1
 800796a:	d10e      	bne.n	800798a <_printf_float+0x42a>
 800796c:	e657      	b.n	800761e <_printf_float+0xbe>
 800796e:	2301      	movs	r3, #1
 8007970:	4652      	mov	r2, sl
 8007972:	4631      	mov	r1, r6
 8007974:	4628      	mov	r0, r5
 8007976:	47b8      	blx	r7
 8007978:	3001      	adds	r0, #1
 800797a:	f43f ae50 	beq.w	800761e <_printf_float+0xbe>
 800797e:	f108 0801 	add.w	r8, r8, #1
 8007982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007984:	3b01      	subs	r3, #1
 8007986:	4543      	cmp	r3, r8
 8007988:	dcf1      	bgt.n	800796e <_printf_float+0x40e>
 800798a:	464b      	mov	r3, r9
 800798c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007990:	e6da      	b.n	8007748 <_printf_float+0x1e8>
 8007992:	f04f 0800 	mov.w	r8, #0
 8007996:	f104 0a1a 	add.w	sl, r4, #26
 800799a:	e7f2      	b.n	8007982 <_printf_float+0x422>
 800799c:	2301      	movs	r3, #1
 800799e:	4642      	mov	r2, r8
 80079a0:	e7df      	b.n	8007962 <_printf_float+0x402>
 80079a2:	2301      	movs	r3, #1
 80079a4:	464a      	mov	r2, r9
 80079a6:	4631      	mov	r1, r6
 80079a8:	4628      	mov	r0, r5
 80079aa:	47b8      	blx	r7
 80079ac:	3001      	adds	r0, #1
 80079ae:	f43f ae36 	beq.w	800761e <_printf_float+0xbe>
 80079b2:	f108 0801 	add.w	r8, r8, #1
 80079b6:	68e3      	ldr	r3, [r4, #12]
 80079b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80079ba:	1a5b      	subs	r3, r3, r1
 80079bc:	4543      	cmp	r3, r8
 80079be:	dcf0      	bgt.n	80079a2 <_printf_float+0x442>
 80079c0:	e6f8      	b.n	80077b4 <_printf_float+0x254>
 80079c2:	f04f 0800 	mov.w	r8, #0
 80079c6:	f104 0919 	add.w	r9, r4, #25
 80079ca:	e7f4      	b.n	80079b6 <_printf_float+0x456>

080079cc <_printf_common>:
 80079cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d0:	4616      	mov	r6, r2
 80079d2:	4699      	mov	r9, r3
 80079d4:	688a      	ldr	r2, [r1, #8]
 80079d6:	690b      	ldr	r3, [r1, #16]
 80079d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079dc:	4293      	cmp	r3, r2
 80079de:	bfb8      	it	lt
 80079e0:	4613      	movlt	r3, r2
 80079e2:	6033      	str	r3, [r6, #0]
 80079e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079e8:	4607      	mov	r7, r0
 80079ea:	460c      	mov	r4, r1
 80079ec:	b10a      	cbz	r2, 80079f2 <_printf_common+0x26>
 80079ee:	3301      	adds	r3, #1
 80079f0:	6033      	str	r3, [r6, #0]
 80079f2:	6823      	ldr	r3, [r4, #0]
 80079f4:	0699      	lsls	r1, r3, #26
 80079f6:	bf42      	ittt	mi
 80079f8:	6833      	ldrmi	r3, [r6, #0]
 80079fa:	3302      	addmi	r3, #2
 80079fc:	6033      	strmi	r3, [r6, #0]
 80079fe:	6825      	ldr	r5, [r4, #0]
 8007a00:	f015 0506 	ands.w	r5, r5, #6
 8007a04:	d106      	bne.n	8007a14 <_printf_common+0x48>
 8007a06:	f104 0a19 	add.w	sl, r4, #25
 8007a0a:	68e3      	ldr	r3, [r4, #12]
 8007a0c:	6832      	ldr	r2, [r6, #0]
 8007a0e:	1a9b      	subs	r3, r3, r2
 8007a10:	42ab      	cmp	r3, r5
 8007a12:	dc26      	bgt.n	8007a62 <_printf_common+0x96>
 8007a14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a18:	1e13      	subs	r3, r2, #0
 8007a1a:	6822      	ldr	r2, [r4, #0]
 8007a1c:	bf18      	it	ne
 8007a1e:	2301      	movne	r3, #1
 8007a20:	0692      	lsls	r2, r2, #26
 8007a22:	d42b      	bmi.n	8007a7c <_printf_common+0xb0>
 8007a24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a28:	4649      	mov	r1, r9
 8007a2a:	4638      	mov	r0, r7
 8007a2c:	47c0      	blx	r8
 8007a2e:	3001      	adds	r0, #1
 8007a30:	d01e      	beq.n	8007a70 <_printf_common+0xa4>
 8007a32:	6823      	ldr	r3, [r4, #0]
 8007a34:	6922      	ldr	r2, [r4, #16]
 8007a36:	f003 0306 	and.w	r3, r3, #6
 8007a3a:	2b04      	cmp	r3, #4
 8007a3c:	bf02      	ittt	eq
 8007a3e:	68e5      	ldreq	r5, [r4, #12]
 8007a40:	6833      	ldreq	r3, [r6, #0]
 8007a42:	1aed      	subeq	r5, r5, r3
 8007a44:	68a3      	ldr	r3, [r4, #8]
 8007a46:	bf0c      	ite	eq
 8007a48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a4c:	2500      	movne	r5, #0
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	bfc4      	itt	gt
 8007a52:	1a9b      	subgt	r3, r3, r2
 8007a54:	18ed      	addgt	r5, r5, r3
 8007a56:	2600      	movs	r6, #0
 8007a58:	341a      	adds	r4, #26
 8007a5a:	42b5      	cmp	r5, r6
 8007a5c:	d11a      	bne.n	8007a94 <_printf_common+0xc8>
 8007a5e:	2000      	movs	r0, #0
 8007a60:	e008      	b.n	8007a74 <_printf_common+0xa8>
 8007a62:	2301      	movs	r3, #1
 8007a64:	4652      	mov	r2, sl
 8007a66:	4649      	mov	r1, r9
 8007a68:	4638      	mov	r0, r7
 8007a6a:	47c0      	blx	r8
 8007a6c:	3001      	adds	r0, #1
 8007a6e:	d103      	bne.n	8007a78 <_printf_common+0xac>
 8007a70:	f04f 30ff 	mov.w	r0, #4294967295
 8007a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a78:	3501      	adds	r5, #1
 8007a7a:	e7c6      	b.n	8007a0a <_printf_common+0x3e>
 8007a7c:	18e1      	adds	r1, r4, r3
 8007a7e:	1c5a      	adds	r2, r3, #1
 8007a80:	2030      	movs	r0, #48	; 0x30
 8007a82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a86:	4422      	add	r2, r4
 8007a88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a90:	3302      	adds	r3, #2
 8007a92:	e7c7      	b.n	8007a24 <_printf_common+0x58>
 8007a94:	2301      	movs	r3, #1
 8007a96:	4622      	mov	r2, r4
 8007a98:	4649      	mov	r1, r9
 8007a9a:	4638      	mov	r0, r7
 8007a9c:	47c0      	blx	r8
 8007a9e:	3001      	adds	r0, #1
 8007aa0:	d0e6      	beq.n	8007a70 <_printf_common+0xa4>
 8007aa2:	3601      	adds	r6, #1
 8007aa4:	e7d9      	b.n	8007a5a <_printf_common+0x8e>
	...

08007aa8 <_printf_i>:
 8007aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007aac:	7e0f      	ldrb	r7, [r1, #24]
 8007aae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ab0:	2f78      	cmp	r7, #120	; 0x78
 8007ab2:	4691      	mov	r9, r2
 8007ab4:	4680      	mov	r8, r0
 8007ab6:	460c      	mov	r4, r1
 8007ab8:	469a      	mov	sl, r3
 8007aba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007abe:	d807      	bhi.n	8007ad0 <_printf_i+0x28>
 8007ac0:	2f62      	cmp	r7, #98	; 0x62
 8007ac2:	d80a      	bhi.n	8007ada <_printf_i+0x32>
 8007ac4:	2f00      	cmp	r7, #0
 8007ac6:	f000 80d4 	beq.w	8007c72 <_printf_i+0x1ca>
 8007aca:	2f58      	cmp	r7, #88	; 0x58
 8007acc:	f000 80c0 	beq.w	8007c50 <_printf_i+0x1a8>
 8007ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ad4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ad8:	e03a      	b.n	8007b50 <_printf_i+0xa8>
 8007ada:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ade:	2b15      	cmp	r3, #21
 8007ae0:	d8f6      	bhi.n	8007ad0 <_printf_i+0x28>
 8007ae2:	a101      	add	r1, pc, #4	; (adr r1, 8007ae8 <_printf_i+0x40>)
 8007ae4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ae8:	08007b41 	.word	0x08007b41
 8007aec:	08007b55 	.word	0x08007b55
 8007af0:	08007ad1 	.word	0x08007ad1
 8007af4:	08007ad1 	.word	0x08007ad1
 8007af8:	08007ad1 	.word	0x08007ad1
 8007afc:	08007ad1 	.word	0x08007ad1
 8007b00:	08007b55 	.word	0x08007b55
 8007b04:	08007ad1 	.word	0x08007ad1
 8007b08:	08007ad1 	.word	0x08007ad1
 8007b0c:	08007ad1 	.word	0x08007ad1
 8007b10:	08007ad1 	.word	0x08007ad1
 8007b14:	08007c59 	.word	0x08007c59
 8007b18:	08007b81 	.word	0x08007b81
 8007b1c:	08007c13 	.word	0x08007c13
 8007b20:	08007ad1 	.word	0x08007ad1
 8007b24:	08007ad1 	.word	0x08007ad1
 8007b28:	08007c7b 	.word	0x08007c7b
 8007b2c:	08007ad1 	.word	0x08007ad1
 8007b30:	08007b81 	.word	0x08007b81
 8007b34:	08007ad1 	.word	0x08007ad1
 8007b38:	08007ad1 	.word	0x08007ad1
 8007b3c:	08007c1b 	.word	0x08007c1b
 8007b40:	682b      	ldr	r3, [r5, #0]
 8007b42:	1d1a      	adds	r2, r3, #4
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	602a      	str	r2, [r5, #0]
 8007b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b50:	2301      	movs	r3, #1
 8007b52:	e09f      	b.n	8007c94 <_printf_i+0x1ec>
 8007b54:	6820      	ldr	r0, [r4, #0]
 8007b56:	682b      	ldr	r3, [r5, #0]
 8007b58:	0607      	lsls	r7, r0, #24
 8007b5a:	f103 0104 	add.w	r1, r3, #4
 8007b5e:	6029      	str	r1, [r5, #0]
 8007b60:	d501      	bpl.n	8007b66 <_printf_i+0xbe>
 8007b62:	681e      	ldr	r6, [r3, #0]
 8007b64:	e003      	b.n	8007b6e <_printf_i+0xc6>
 8007b66:	0646      	lsls	r6, r0, #25
 8007b68:	d5fb      	bpl.n	8007b62 <_printf_i+0xba>
 8007b6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007b6e:	2e00      	cmp	r6, #0
 8007b70:	da03      	bge.n	8007b7a <_printf_i+0xd2>
 8007b72:	232d      	movs	r3, #45	; 0x2d
 8007b74:	4276      	negs	r6, r6
 8007b76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b7a:	485a      	ldr	r0, [pc, #360]	; (8007ce4 <_printf_i+0x23c>)
 8007b7c:	230a      	movs	r3, #10
 8007b7e:	e012      	b.n	8007ba6 <_printf_i+0xfe>
 8007b80:	682b      	ldr	r3, [r5, #0]
 8007b82:	6820      	ldr	r0, [r4, #0]
 8007b84:	1d19      	adds	r1, r3, #4
 8007b86:	6029      	str	r1, [r5, #0]
 8007b88:	0605      	lsls	r5, r0, #24
 8007b8a:	d501      	bpl.n	8007b90 <_printf_i+0xe8>
 8007b8c:	681e      	ldr	r6, [r3, #0]
 8007b8e:	e002      	b.n	8007b96 <_printf_i+0xee>
 8007b90:	0641      	lsls	r1, r0, #25
 8007b92:	d5fb      	bpl.n	8007b8c <_printf_i+0xe4>
 8007b94:	881e      	ldrh	r6, [r3, #0]
 8007b96:	4853      	ldr	r0, [pc, #332]	; (8007ce4 <_printf_i+0x23c>)
 8007b98:	2f6f      	cmp	r7, #111	; 0x6f
 8007b9a:	bf0c      	ite	eq
 8007b9c:	2308      	moveq	r3, #8
 8007b9e:	230a      	movne	r3, #10
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ba6:	6865      	ldr	r5, [r4, #4]
 8007ba8:	60a5      	str	r5, [r4, #8]
 8007baa:	2d00      	cmp	r5, #0
 8007bac:	bfa2      	ittt	ge
 8007bae:	6821      	ldrge	r1, [r4, #0]
 8007bb0:	f021 0104 	bicge.w	r1, r1, #4
 8007bb4:	6021      	strge	r1, [r4, #0]
 8007bb6:	b90e      	cbnz	r6, 8007bbc <_printf_i+0x114>
 8007bb8:	2d00      	cmp	r5, #0
 8007bba:	d04b      	beq.n	8007c54 <_printf_i+0x1ac>
 8007bbc:	4615      	mov	r5, r2
 8007bbe:	fbb6 f1f3 	udiv	r1, r6, r3
 8007bc2:	fb03 6711 	mls	r7, r3, r1, r6
 8007bc6:	5dc7      	ldrb	r7, [r0, r7]
 8007bc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007bcc:	4637      	mov	r7, r6
 8007bce:	42bb      	cmp	r3, r7
 8007bd0:	460e      	mov	r6, r1
 8007bd2:	d9f4      	bls.n	8007bbe <_printf_i+0x116>
 8007bd4:	2b08      	cmp	r3, #8
 8007bd6:	d10b      	bne.n	8007bf0 <_printf_i+0x148>
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	07de      	lsls	r6, r3, #31
 8007bdc:	d508      	bpl.n	8007bf0 <_printf_i+0x148>
 8007bde:	6923      	ldr	r3, [r4, #16]
 8007be0:	6861      	ldr	r1, [r4, #4]
 8007be2:	4299      	cmp	r1, r3
 8007be4:	bfde      	ittt	le
 8007be6:	2330      	movle	r3, #48	; 0x30
 8007be8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bf0:	1b52      	subs	r2, r2, r5
 8007bf2:	6122      	str	r2, [r4, #16]
 8007bf4:	f8cd a000 	str.w	sl, [sp]
 8007bf8:	464b      	mov	r3, r9
 8007bfa:	aa03      	add	r2, sp, #12
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	4640      	mov	r0, r8
 8007c00:	f7ff fee4 	bl	80079cc <_printf_common>
 8007c04:	3001      	adds	r0, #1
 8007c06:	d14a      	bne.n	8007c9e <_printf_i+0x1f6>
 8007c08:	f04f 30ff 	mov.w	r0, #4294967295
 8007c0c:	b004      	add	sp, #16
 8007c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c12:	6823      	ldr	r3, [r4, #0]
 8007c14:	f043 0320 	orr.w	r3, r3, #32
 8007c18:	6023      	str	r3, [r4, #0]
 8007c1a:	4833      	ldr	r0, [pc, #204]	; (8007ce8 <_printf_i+0x240>)
 8007c1c:	2778      	movs	r7, #120	; 0x78
 8007c1e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c22:	6823      	ldr	r3, [r4, #0]
 8007c24:	6829      	ldr	r1, [r5, #0]
 8007c26:	061f      	lsls	r7, r3, #24
 8007c28:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c2c:	d402      	bmi.n	8007c34 <_printf_i+0x18c>
 8007c2e:	065f      	lsls	r7, r3, #25
 8007c30:	bf48      	it	mi
 8007c32:	b2b6      	uxthmi	r6, r6
 8007c34:	07df      	lsls	r7, r3, #31
 8007c36:	bf48      	it	mi
 8007c38:	f043 0320 	orrmi.w	r3, r3, #32
 8007c3c:	6029      	str	r1, [r5, #0]
 8007c3e:	bf48      	it	mi
 8007c40:	6023      	strmi	r3, [r4, #0]
 8007c42:	b91e      	cbnz	r6, 8007c4c <_printf_i+0x1a4>
 8007c44:	6823      	ldr	r3, [r4, #0]
 8007c46:	f023 0320 	bic.w	r3, r3, #32
 8007c4a:	6023      	str	r3, [r4, #0]
 8007c4c:	2310      	movs	r3, #16
 8007c4e:	e7a7      	b.n	8007ba0 <_printf_i+0xf8>
 8007c50:	4824      	ldr	r0, [pc, #144]	; (8007ce4 <_printf_i+0x23c>)
 8007c52:	e7e4      	b.n	8007c1e <_printf_i+0x176>
 8007c54:	4615      	mov	r5, r2
 8007c56:	e7bd      	b.n	8007bd4 <_printf_i+0x12c>
 8007c58:	682b      	ldr	r3, [r5, #0]
 8007c5a:	6826      	ldr	r6, [r4, #0]
 8007c5c:	6961      	ldr	r1, [r4, #20]
 8007c5e:	1d18      	adds	r0, r3, #4
 8007c60:	6028      	str	r0, [r5, #0]
 8007c62:	0635      	lsls	r5, r6, #24
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	d501      	bpl.n	8007c6c <_printf_i+0x1c4>
 8007c68:	6019      	str	r1, [r3, #0]
 8007c6a:	e002      	b.n	8007c72 <_printf_i+0x1ca>
 8007c6c:	0670      	lsls	r0, r6, #25
 8007c6e:	d5fb      	bpl.n	8007c68 <_printf_i+0x1c0>
 8007c70:	8019      	strh	r1, [r3, #0]
 8007c72:	2300      	movs	r3, #0
 8007c74:	6123      	str	r3, [r4, #16]
 8007c76:	4615      	mov	r5, r2
 8007c78:	e7bc      	b.n	8007bf4 <_printf_i+0x14c>
 8007c7a:	682b      	ldr	r3, [r5, #0]
 8007c7c:	1d1a      	adds	r2, r3, #4
 8007c7e:	602a      	str	r2, [r5, #0]
 8007c80:	681d      	ldr	r5, [r3, #0]
 8007c82:	6862      	ldr	r2, [r4, #4]
 8007c84:	2100      	movs	r1, #0
 8007c86:	4628      	mov	r0, r5
 8007c88:	f7f8 faaa 	bl	80001e0 <memchr>
 8007c8c:	b108      	cbz	r0, 8007c92 <_printf_i+0x1ea>
 8007c8e:	1b40      	subs	r0, r0, r5
 8007c90:	6060      	str	r0, [r4, #4]
 8007c92:	6863      	ldr	r3, [r4, #4]
 8007c94:	6123      	str	r3, [r4, #16]
 8007c96:	2300      	movs	r3, #0
 8007c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c9c:	e7aa      	b.n	8007bf4 <_printf_i+0x14c>
 8007c9e:	6923      	ldr	r3, [r4, #16]
 8007ca0:	462a      	mov	r2, r5
 8007ca2:	4649      	mov	r1, r9
 8007ca4:	4640      	mov	r0, r8
 8007ca6:	47d0      	blx	sl
 8007ca8:	3001      	adds	r0, #1
 8007caa:	d0ad      	beq.n	8007c08 <_printf_i+0x160>
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	079b      	lsls	r3, r3, #30
 8007cb0:	d413      	bmi.n	8007cda <_printf_i+0x232>
 8007cb2:	68e0      	ldr	r0, [r4, #12]
 8007cb4:	9b03      	ldr	r3, [sp, #12]
 8007cb6:	4298      	cmp	r0, r3
 8007cb8:	bfb8      	it	lt
 8007cba:	4618      	movlt	r0, r3
 8007cbc:	e7a6      	b.n	8007c0c <_printf_i+0x164>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	4632      	mov	r2, r6
 8007cc2:	4649      	mov	r1, r9
 8007cc4:	4640      	mov	r0, r8
 8007cc6:	47d0      	blx	sl
 8007cc8:	3001      	adds	r0, #1
 8007cca:	d09d      	beq.n	8007c08 <_printf_i+0x160>
 8007ccc:	3501      	adds	r5, #1
 8007cce:	68e3      	ldr	r3, [r4, #12]
 8007cd0:	9903      	ldr	r1, [sp, #12]
 8007cd2:	1a5b      	subs	r3, r3, r1
 8007cd4:	42ab      	cmp	r3, r5
 8007cd6:	dcf2      	bgt.n	8007cbe <_printf_i+0x216>
 8007cd8:	e7eb      	b.n	8007cb2 <_printf_i+0x20a>
 8007cda:	2500      	movs	r5, #0
 8007cdc:	f104 0619 	add.w	r6, r4, #25
 8007ce0:	e7f5      	b.n	8007cce <_printf_i+0x226>
 8007ce2:	bf00      	nop
 8007ce4:	0800a4f2 	.word	0x0800a4f2
 8007ce8:	0800a503 	.word	0x0800a503

08007cec <__sflush_r>:
 8007cec:	898a      	ldrh	r2, [r1, #12]
 8007cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	0710      	lsls	r0, r2, #28
 8007cf6:	460c      	mov	r4, r1
 8007cf8:	d458      	bmi.n	8007dac <__sflush_r+0xc0>
 8007cfa:	684b      	ldr	r3, [r1, #4]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	dc05      	bgt.n	8007d0c <__sflush_r+0x20>
 8007d00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	dc02      	bgt.n	8007d0c <__sflush_r+0x20>
 8007d06:	2000      	movs	r0, #0
 8007d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d0e:	2e00      	cmp	r6, #0
 8007d10:	d0f9      	beq.n	8007d06 <__sflush_r+0x1a>
 8007d12:	2300      	movs	r3, #0
 8007d14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007d18:	682f      	ldr	r7, [r5, #0]
 8007d1a:	6a21      	ldr	r1, [r4, #32]
 8007d1c:	602b      	str	r3, [r5, #0]
 8007d1e:	d032      	beq.n	8007d86 <__sflush_r+0x9a>
 8007d20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007d22:	89a3      	ldrh	r3, [r4, #12]
 8007d24:	075a      	lsls	r2, r3, #29
 8007d26:	d505      	bpl.n	8007d34 <__sflush_r+0x48>
 8007d28:	6863      	ldr	r3, [r4, #4]
 8007d2a:	1ac0      	subs	r0, r0, r3
 8007d2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007d2e:	b10b      	cbz	r3, 8007d34 <__sflush_r+0x48>
 8007d30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d32:	1ac0      	subs	r0, r0, r3
 8007d34:	2300      	movs	r3, #0
 8007d36:	4602      	mov	r2, r0
 8007d38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d3a:	6a21      	ldr	r1, [r4, #32]
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	47b0      	blx	r6
 8007d40:	1c43      	adds	r3, r0, #1
 8007d42:	89a3      	ldrh	r3, [r4, #12]
 8007d44:	d106      	bne.n	8007d54 <__sflush_r+0x68>
 8007d46:	6829      	ldr	r1, [r5, #0]
 8007d48:	291d      	cmp	r1, #29
 8007d4a:	d82b      	bhi.n	8007da4 <__sflush_r+0xb8>
 8007d4c:	4a29      	ldr	r2, [pc, #164]	; (8007df4 <__sflush_r+0x108>)
 8007d4e:	410a      	asrs	r2, r1
 8007d50:	07d6      	lsls	r6, r2, #31
 8007d52:	d427      	bmi.n	8007da4 <__sflush_r+0xb8>
 8007d54:	2200      	movs	r2, #0
 8007d56:	6062      	str	r2, [r4, #4]
 8007d58:	04d9      	lsls	r1, r3, #19
 8007d5a:	6922      	ldr	r2, [r4, #16]
 8007d5c:	6022      	str	r2, [r4, #0]
 8007d5e:	d504      	bpl.n	8007d6a <__sflush_r+0x7e>
 8007d60:	1c42      	adds	r2, r0, #1
 8007d62:	d101      	bne.n	8007d68 <__sflush_r+0x7c>
 8007d64:	682b      	ldr	r3, [r5, #0]
 8007d66:	b903      	cbnz	r3, 8007d6a <__sflush_r+0x7e>
 8007d68:	6560      	str	r0, [r4, #84]	; 0x54
 8007d6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d6c:	602f      	str	r7, [r5, #0]
 8007d6e:	2900      	cmp	r1, #0
 8007d70:	d0c9      	beq.n	8007d06 <__sflush_r+0x1a>
 8007d72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d76:	4299      	cmp	r1, r3
 8007d78:	d002      	beq.n	8007d80 <__sflush_r+0x94>
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	f001 f9b2 	bl	80090e4 <_free_r>
 8007d80:	2000      	movs	r0, #0
 8007d82:	6360      	str	r0, [r4, #52]	; 0x34
 8007d84:	e7c0      	b.n	8007d08 <__sflush_r+0x1c>
 8007d86:	2301      	movs	r3, #1
 8007d88:	4628      	mov	r0, r5
 8007d8a:	47b0      	blx	r6
 8007d8c:	1c41      	adds	r1, r0, #1
 8007d8e:	d1c8      	bne.n	8007d22 <__sflush_r+0x36>
 8007d90:	682b      	ldr	r3, [r5, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d0c5      	beq.n	8007d22 <__sflush_r+0x36>
 8007d96:	2b1d      	cmp	r3, #29
 8007d98:	d001      	beq.n	8007d9e <__sflush_r+0xb2>
 8007d9a:	2b16      	cmp	r3, #22
 8007d9c:	d101      	bne.n	8007da2 <__sflush_r+0xb6>
 8007d9e:	602f      	str	r7, [r5, #0]
 8007da0:	e7b1      	b.n	8007d06 <__sflush_r+0x1a>
 8007da2:	89a3      	ldrh	r3, [r4, #12]
 8007da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007da8:	81a3      	strh	r3, [r4, #12]
 8007daa:	e7ad      	b.n	8007d08 <__sflush_r+0x1c>
 8007dac:	690f      	ldr	r7, [r1, #16]
 8007dae:	2f00      	cmp	r7, #0
 8007db0:	d0a9      	beq.n	8007d06 <__sflush_r+0x1a>
 8007db2:	0793      	lsls	r3, r2, #30
 8007db4:	680e      	ldr	r6, [r1, #0]
 8007db6:	bf08      	it	eq
 8007db8:	694b      	ldreq	r3, [r1, #20]
 8007dba:	600f      	str	r7, [r1, #0]
 8007dbc:	bf18      	it	ne
 8007dbe:	2300      	movne	r3, #0
 8007dc0:	eba6 0807 	sub.w	r8, r6, r7
 8007dc4:	608b      	str	r3, [r1, #8]
 8007dc6:	f1b8 0f00 	cmp.w	r8, #0
 8007dca:	dd9c      	ble.n	8007d06 <__sflush_r+0x1a>
 8007dcc:	6a21      	ldr	r1, [r4, #32]
 8007dce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007dd0:	4643      	mov	r3, r8
 8007dd2:	463a      	mov	r2, r7
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	47b0      	blx	r6
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	dc06      	bgt.n	8007dea <__sflush_r+0xfe>
 8007ddc:	89a3      	ldrh	r3, [r4, #12]
 8007dde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007de2:	81a3      	strh	r3, [r4, #12]
 8007de4:	f04f 30ff 	mov.w	r0, #4294967295
 8007de8:	e78e      	b.n	8007d08 <__sflush_r+0x1c>
 8007dea:	4407      	add	r7, r0
 8007dec:	eba8 0800 	sub.w	r8, r8, r0
 8007df0:	e7e9      	b.n	8007dc6 <__sflush_r+0xda>
 8007df2:	bf00      	nop
 8007df4:	dfbffffe 	.word	0xdfbffffe

08007df8 <_fflush_r>:
 8007df8:	b538      	push	{r3, r4, r5, lr}
 8007dfa:	690b      	ldr	r3, [r1, #16]
 8007dfc:	4605      	mov	r5, r0
 8007dfe:	460c      	mov	r4, r1
 8007e00:	b913      	cbnz	r3, 8007e08 <_fflush_r+0x10>
 8007e02:	2500      	movs	r5, #0
 8007e04:	4628      	mov	r0, r5
 8007e06:	bd38      	pop	{r3, r4, r5, pc}
 8007e08:	b118      	cbz	r0, 8007e12 <_fflush_r+0x1a>
 8007e0a:	6a03      	ldr	r3, [r0, #32]
 8007e0c:	b90b      	cbnz	r3, 8007e12 <_fflush_r+0x1a>
 8007e0e:	f000 f8bb 	bl	8007f88 <__sinit>
 8007e12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d0f3      	beq.n	8007e02 <_fflush_r+0xa>
 8007e1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007e1c:	07d0      	lsls	r0, r2, #31
 8007e1e:	d404      	bmi.n	8007e2a <_fflush_r+0x32>
 8007e20:	0599      	lsls	r1, r3, #22
 8007e22:	d402      	bmi.n	8007e2a <_fflush_r+0x32>
 8007e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e26:	f000 fad0 	bl	80083ca <__retarget_lock_acquire_recursive>
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	4621      	mov	r1, r4
 8007e2e:	f7ff ff5d 	bl	8007cec <__sflush_r>
 8007e32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e34:	07da      	lsls	r2, r3, #31
 8007e36:	4605      	mov	r5, r0
 8007e38:	d4e4      	bmi.n	8007e04 <_fflush_r+0xc>
 8007e3a:	89a3      	ldrh	r3, [r4, #12]
 8007e3c:	059b      	lsls	r3, r3, #22
 8007e3e:	d4e1      	bmi.n	8007e04 <_fflush_r+0xc>
 8007e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e42:	f000 fac3 	bl	80083cc <__retarget_lock_release_recursive>
 8007e46:	e7dd      	b.n	8007e04 <_fflush_r+0xc>

08007e48 <fflush>:
 8007e48:	4601      	mov	r1, r0
 8007e4a:	b920      	cbnz	r0, 8007e56 <fflush+0xe>
 8007e4c:	4a04      	ldr	r2, [pc, #16]	; (8007e60 <fflush+0x18>)
 8007e4e:	4905      	ldr	r1, [pc, #20]	; (8007e64 <fflush+0x1c>)
 8007e50:	4805      	ldr	r0, [pc, #20]	; (8007e68 <fflush+0x20>)
 8007e52:	f000 b8b1 	b.w	8007fb8 <_fwalk_sglue>
 8007e56:	4b05      	ldr	r3, [pc, #20]	; (8007e6c <fflush+0x24>)
 8007e58:	6818      	ldr	r0, [r3, #0]
 8007e5a:	f7ff bfcd 	b.w	8007df8 <_fflush_r>
 8007e5e:	bf00      	nop
 8007e60:	2000002c 	.word	0x2000002c
 8007e64:	08007df9 	.word	0x08007df9
 8007e68:	20000038 	.word	0x20000038
 8007e6c:	20000084 	.word	0x20000084

08007e70 <std>:
 8007e70:	2300      	movs	r3, #0
 8007e72:	b510      	push	{r4, lr}
 8007e74:	4604      	mov	r4, r0
 8007e76:	e9c0 3300 	strd	r3, r3, [r0]
 8007e7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e7e:	6083      	str	r3, [r0, #8]
 8007e80:	8181      	strh	r1, [r0, #12]
 8007e82:	6643      	str	r3, [r0, #100]	; 0x64
 8007e84:	81c2      	strh	r2, [r0, #14]
 8007e86:	6183      	str	r3, [r0, #24]
 8007e88:	4619      	mov	r1, r3
 8007e8a:	2208      	movs	r2, #8
 8007e8c:	305c      	adds	r0, #92	; 0x5c
 8007e8e:	f000 fa1f 	bl	80082d0 <memset>
 8007e92:	4b0d      	ldr	r3, [pc, #52]	; (8007ec8 <std+0x58>)
 8007e94:	6263      	str	r3, [r4, #36]	; 0x24
 8007e96:	4b0d      	ldr	r3, [pc, #52]	; (8007ecc <std+0x5c>)
 8007e98:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e9a:	4b0d      	ldr	r3, [pc, #52]	; (8007ed0 <std+0x60>)
 8007e9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e9e:	4b0d      	ldr	r3, [pc, #52]	; (8007ed4 <std+0x64>)
 8007ea0:	6323      	str	r3, [r4, #48]	; 0x30
 8007ea2:	4b0d      	ldr	r3, [pc, #52]	; (8007ed8 <std+0x68>)
 8007ea4:	6224      	str	r4, [r4, #32]
 8007ea6:	429c      	cmp	r4, r3
 8007ea8:	d006      	beq.n	8007eb8 <std+0x48>
 8007eaa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007eae:	4294      	cmp	r4, r2
 8007eb0:	d002      	beq.n	8007eb8 <std+0x48>
 8007eb2:	33d0      	adds	r3, #208	; 0xd0
 8007eb4:	429c      	cmp	r4, r3
 8007eb6:	d105      	bne.n	8007ec4 <std+0x54>
 8007eb8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ec0:	f000 ba82 	b.w	80083c8 <__retarget_lock_init_recursive>
 8007ec4:	bd10      	pop	{r4, pc}
 8007ec6:	bf00      	nop
 8007ec8:	08008121 	.word	0x08008121
 8007ecc:	08008143 	.word	0x08008143
 8007ed0:	0800817b 	.word	0x0800817b
 8007ed4:	0800819f 	.word	0x0800819f
 8007ed8:	20000718 	.word	0x20000718

08007edc <stdio_exit_handler>:
 8007edc:	4a02      	ldr	r2, [pc, #8]	; (8007ee8 <stdio_exit_handler+0xc>)
 8007ede:	4903      	ldr	r1, [pc, #12]	; (8007eec <stdio_exit_handler+0x10>)
 8007ee0:	4803      	ldr	r0, [pc, #12]	; (8007ef0 <stdio_exit_handler+0x14>)
 8007ee2:	f000 b869 	b.w	8007fb8 <_fwalk_sglue>
 8007ee6:	bf00      	nop
 8007ee8:	2000002c 	.word	0x2000002c
 8007eec:	08007df9 	.word	0x08007df9
 8007ef0:	20000038 	.word	0x20000038

08007ef4 <cleanup_stdio>:
 8007ef4:	6841      	ldr	r1, [r0, #4]
 8007ef6:	4b0c      	ldr	r3, [pc, #48]	; (8007f28 <cleanup_stdio+0x34>)
 8007ef8:	4299      	cmp	r1, r3
 8007efa:	b510      	push	{r4, lr}
 8007efc:	4604      	mov	r4, r0
 8007efe:	d001      	beq.n	8007f04 <cleanup_stdio+0x10>
 8007f00:	f7ff ff7a 	bl	8007df8 <_fflush_r>
 8007f04:	68a1      	ldr	r1, [r4, #8]
 8007f06:	4b09      	ldr	r3, [pc, #36]	; (8007f2c <cleanup_stdio+0x38>)
 8007f08:	4299      	cmp	r1, r3
 8007f0a:	d002      	beq.n	8007f12 <cleanup_stdio+0x1e>
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f7ff ff73 	bl	8007df8 <_fflush_r>
 8007f12:	68e1      	ldr	r1, [r4, #12]
 8007f14:	4b06      	ldr	r3, [pc, #24]	; (8007f30 <cleanup_stdio+0x3c>)
 8007f16:	4299      	cmp	r1, r3
 8007f18:	d004      	beq.n	8007f24 <cleanup_stdio+0x30>
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f20:	f7ff bf6a 	b.w	8007df8 <_fflush_r>
 8007f24:	bd10      	pop	{r4, pc}
 8007f26:	bf00      	nop
 8007f28:	20000718 	.word	0x20000718
 8007f2c:	20000780 	.word	0x20000780
 8007f30:	200007e8 	.word	0x200007e8

08007f34 <global_stdio_init.part.0>:
 8007f34:	b510      	push	{r4, lr}
 8007f36:	4b0b      	ldr	r3, [pc, #44]	; (8007f64 <global_stdio_init.part.0+0x30>)
 8007f38:	4c0b      	ldr	r4, [pc, #44]	; (8007f68 <global_stdio_init.part.0+0x34>)
 8007f3a:	4a0c      	ldr	r2, [pc, #48]	; (8007f6c <global_stdio_init.part.0+0x38>)
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	4620      	mov	r0, r4
 8007f40:	2200      	movs	r2, #0
 8007f42:	2104      	movs	r1, #4
 8007f44:	f7ff ff94 	bl	8007e70 <std>
 8007f48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	2109      	movs	r1, #9
 8007f50:	f7ff ff8e 	bl	8007e70 <std>
 8007f54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007f58:	2202      	movs	r2, #2
 8007f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f5e:	2112      	movs	r1, #18
 8007f60:	f7ff bf86 	b.w	8007e70 <std>
 8007f64:	20000850 	.word	0x20000850
 8007f68:	20000718 	.word	0x20000718
 8007f6c:	08007edd 	.word	0x08007edd

08007f70 <__sfp_lock_acquire>:
 8007f70:	4801      	ldr	r0, [pc, #4]	; (8007f78 <__sfp_lock_acquire+0x8>)
 8007f72:	f000 ba2a 	b.w	80083ca <__retarget_lock_acquire_recursive>
 8007f76:	bf00      	nop
 8007f78:	20000859 	.word	0x20000859

08007f7c <__sfp_lock_release>:
 8007f7c:	4801      	ldr	r0, [pc, #4]	; (8007f84 <__sfp_lock_release+0x8>)
 8007f7e:	f000 ba25 	b.w	80083cc <__retarget_lock_release_recursive>
 8007f82:	bf00      	nop
 8007f84:	20000859 	.word	0x20000859

08007f88 <__sinit>:
 8007f88:	b510      	push	{r4, lr}
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	f7ff fff0 	bl	8007f70 <__sfp_lock_acquire>
 8007f90:	6a23      	ldr	r3, [r4, #32]
 8007f92:	b11b      	cbz	r3, 8007f9c <__sinit+0x14>
 8007f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f98:	f7ff bff0 	b.w	8007f7c <__sfp_lock_release>
 8007f9c:	4b04      	ldr	r3, [pc, #16]	; (8007fb0 <__sinit+0x28>)
 8007f9e:	6223      	str	r3, [r4, #32]
 8007fa0:	4b04      	ldr	r3, [pc, #16]	; (8007fb4 <__sinit+0x2c>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1f5      	bne.n	8007f94 <__sinit+0xc>
 8007fa8:	f7ff ffc4 	bl	8007f34 <global_stdio_init.part.0>
 8007fac:	e7f2      	b.n	8007f94 <__sinit+0xc>
 8007fae:	bf00      	nop
 8007fb0:	08007ef5 	.word	0x08007ef5
 8007fb4:	20000850 	.word	0x20000850

08007fb8 <_fwalk_sglue>:
 8007fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fbc:	4607      	mov	r7, r0
 8007fbe:	4688      	mov	r8, r1
 8007fc0:	4614      	mov	r4, r2
 8007fc2:	2600      	movs	r6, #0
 8007fc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fc8:	f1b9 0901 	subs.w	r9, r9, #1
 8007fcc:	d505      	bpl.n	8007fda <_fwalk_sglue+0x22>
 8007fce:	6824      	ldr	r4, [r4, #0]
 8007fd0:	2c00      	cmp	r4, #0
 8007fd2:	d1f7      	bne.n	8007fc4 <_fwalk_sglue+0xc>
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fda:	89ab      	ldrh	r3, [r5, #12]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d907      	bls.n	8007ff0 <_fwalk_sglue+0x38>
 8007fe0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	d003      	beq.n	8007ff0 <_fwalk_sglue+0x38>
 8007fe8:	4629      	mov	r1, r5
 8007fea:	4638      	mov	r0, r7
 8007fec:	47c0      	blx	r8
 8007fee:	4306      	orrs	r6, r0
 8007ff0:	3568      	adds	r5, #104	; 0x68
 8007ff2:	e7e9      	b.n	8007fc8 <_fwalk_sglue+0x10>

08007ff4 <iprintf>:
 8007ff4:	b40f      	push	{r0, r1, r2, r3}
 8007ff6:	b507      	push	{r0, r1, r2, lr}
 8007ff8:	4906      	ldr	r1, [pc, #24]	; (8008014 <iprintf+0x20>)
 8007ffa:	ab04      	add	r3, sp, #16
 8007ffc:	6808      	ldr	r0, [r1, #0]
 8007ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008002:	6881      	ldr	r1, [r0, #8]
 8008004:	9301      	str	r3, [sp, #4]
 8008006:	f001 fe6b 	bl	8009ce0 <_vfiprintf_r>
 800800a:	b003      	add	sp, #12
 800800c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008010:	b004      	add	sp, #16
 8008012:	4770      	bx	lr
 8008014:	20000084 	.word	0x20000084

08008018 <putchar>:
 8008018:	4b02      	ldr	r3, [pc, #8]	; (8008024 <putchar+0xc>)
 800801a:	4601      	mov	r1, r0
 800801c:	6818      	ldr	r0, [r3, #0]
 800801e:	6882      	ldr	r2, [r0, #8]
 8008020:	f001 bfda 	b.w	8009fd8 <_putc_r>
 8008024:	20000084 	.word	0x20000084

08008028 <_puts_r>:
 8008028:	6a03      	ldr	r3, [r0, #32]
 800802a:	b570      	push	{r4, r5, r6, lr}
 800802c:	6884      	ldr	r4, [r0, #8]
 800802e:	4605      	mov	r5, r0
 8008030:	460e      	mov	r6, r1
 8008032:	b90b      	cbnz	r3, 8008038 <_puts_r+0x10>
 8008034:	f7ff ffa8 	bl	8007f88 <__sinit>
 8008038:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800803a:	07db      	lsls	r3, r3, #31
 800803c:	d405      	bmi.n	800804a <_puts_r+0x22>
 800803e:	89a3      	ldrh	r3, [r4, #12]
 8008040:	0598      	lsls	r0, r3, #22
 8008042:	d402      	bmi.n	800804a <_puts_r+0x22>
 8008044:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008046:	f000 f9c0 	bl	80083ca <__retarget_lock_acquire_recursive>
 800804a:	89a3      	ldrh	r3, [r4, #12]
 800804c:	0719      	lsls	r1, r3, #28
 800804e:	d513      	bpl.n	8008078 <_puts_r+0x50>
 8008050:	6923      	ldr	r3, [r4, #16]
 8008052:	b18b      	cbz	r3, 8008078 <_puts_r+0x50>
 8008054:	3e01      	subs	r6, #1
 8008056:	68a3      	ldr	r3, [r4, #8]
 8008058:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800805c:	3b01      	subs	r3, #1
 800805e:	60a3      	str	r3, [r4, #8]
 8008060:	b9e9      	cbnz	r1, 800809e <_puts_r+0x76>
 8008062:	2b00      	cmp	r3, #0
 8008064:	da2e      	bge.n	80080c4 <_puts_r+0x9c>
 8008066:	4622      	mov	r2, r4
 8008068:	210a      	movs	r1, #10
 800806a:	4628      	mov	r0, r5
 800806c:	f000 f89b 	bl	80081a6 <__swbuf_r>
 8008070:	3001      	adds	r0, #1
 8008072:	d007      	beq.n	8008084 <_puts_r+0x5c>
 8008074:	250a      	movs	r5, #10
 8008076:	e007      	b.n	8008088 <_puts_r+0x60>
 8008078:	4621      	mov	r1, r4
 800807a:	4628      	mov	r0, r5
 800807c:	f000 f8d0 	bl	8008220 <__swsetup_r>
 8008080:	2800      	cmp	r0, #0
 8008082:	d0e7      	beq.n	8008054 <_puts_r+0x2c>
 8008084:	f04f 35ff 	mov.w	r5, #4294967295
 8008088:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800808a:	07da      	lsls	r2, r3, #31
 800808c:	d405      	bmi.n	800809a <_puts_r+0x72>
 800808e:	89a3      	ldrh	r3, [r4, #12]
 8008090:	059b      	lsls	r3, r3, #22
 8008092:	d402      	bmi.n	800809a <_puts_r+0x72>
 8008094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008096:	f000 f999 	bl	80083cc <__retarget_lock_release_recursive>
 800809a:	4628      	mov	r0, r5
 800809c:	bd70      	pop	{r4, r5, r6, pc}
 800809e:	2b00      	cmp	r3, #0
 80080a0:	da04      	bge.n	80080ac <_puts_r+0x84>
 80080a2:	69a2      	ldr	r2, [r4, #24]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	dc06      	bgt.n	80080b6 <_puts_r+0x8e>
 80080a8:	290a      	cmp	r1, #10
 80080aa:	d004      	beq.n	80080b6 <_puts_r+0x8e>
 80080ac:	6823      	ldr	r3, [r4, #0]
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	6022      	str	r2, [r4, #0]
 80080b2:	7019      	strb	r1, [r3, #0]
 80080b4:	e7cf      	b.n	8008056 <_puts_r+0x2e>
 80080b6:	4622      	mov	r2, r4
 80080b8:	4628      	mov	r0, r5
 80080ba:	f000 f874 	bl	80081a6 <__swbuf_r>
 80080be:	3001      	adds	r0, #1
 80080c0:	d1c9      	bne.n	8008056 <_puts_r+0x2e>
 80080c2:	e7df      	b.n	8008084 <_puts_r+0x5c>
 80080c4:	6823      	ldr	r3, [r4, #0]
 80080c6:	250a      	movs	r5, #10
 80080c8:	1c5a      	adds	r2, r3, #1
 80080ca:	6022      	str	r2, [r4, #0]
 80080cc:	701d      	strb	r5, [r3, #0]
 80080ce:	e7db      	b.n	8008088 <_puts_r+0x60>

080080d0 <puts>:
 80080d0:	4b02      	ldr	r3, [pc, #8]	; (80080dc <puts+0xc>)
 80080d2:	4601      	mov	r1, r0
 80080d4:	6818      	ldr	r0, [r3, #0]
 80080d6:	f7ff bfa7 	b.w	8008028 <_puts_r>
 80080da:	bf00      	nop
 80080dc:	20000084 	.word	0x20000084

080080e0 <siprintf>:
 80080e0:	b40e      	push	{r1, r2, r3}
 80080e2:	b500      	push	{lr}
 80080e4:	b09c      	sub	sp, #112	; 0x70
 80080e6:	ab1d      	add	r3, sp, #116	; 0x74
 80080e8:	9002      	str	r0, [sp, #8]
 80080ea:	9006      	str	r0, [sp, #24]
 80080ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80080f0:	4809      	ldr	r0, [pc, #36]	; (8008118 <siprintf+0x38>)
 80080f2:	9107      	str	r1, [sp, #28]
 80080f4:	9104      	str	r1, [sp, #16]
 80080f6:	4909      	ldr	r1, [pc, #36]	; (800811c <siprintf+0x3c>)
 80080f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80080fc:	9105      	str	r1, [sp, #20]
 80080fe:	6800      	ldr	r0, [r0, #0]
 8008100:	9301      	str	r3, [sp, #4]
 8008102:	a902      	add	r1, sp, #8
 8008104:	f001 fcc4 	bl	8009a90 <_svfiprintf_r>
 8008108:	9b02      	ldr	r3, [sp, #8]
 800810a:	2200      	movs	r2, #0
 800810c:	701a      	strb	r2, [r3, #0]
 800810e:	b01c      	add	sp, #112	; 0x70
 8008110:	f85d eb04 	ldr.w	lr, [sp], #4
 8008114:	b003      	add	sp, #12
 8008116:	4770      	bx	lr
 8008118:	20000084 	.word	0x20000084
 800811c:	ffff0208 	.word	0xffff0208

08008120 <__sread>:
 8008120:	b510      	push	{r4, lr}
 8008122:	460c      	mov	r4, r1
 8008124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008128:	f000 f900 	bl	800832c <_read_r>
 800812c:	2800      	cmp	r0, #0
 800812e:	bfab      	itete	ge
 8008130:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008132:	89a3      	ldrhlt	r3, [r4, #12]
 8008134:	181b      	addge	r3, r3, r0
 8008136:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800813a:	bfac      	ite	ge
 800813c:	6563      	strge	r3, [r4, #84]	; 0x54
 800813e:	81a3      	strhlt	r3, [r4, #12]
 8008140:	bd10      	pop	{r4, pc}

08008142 <__swrite>:
 8008142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008146:	461f      	mov	r7, r3
 8008148:	898b      	ldrh	r3, [r1, #12]
 800814a:	05db      	lsls	r3, r3, #23
 800814c:	4605      	mov	r5, r0
 800814e:	460c      	mov	r4, r1
 8008150:	4616      	mov	r6, r2
 8008152:	d505      	bpl.n	8008160 <__swrite+0x1e>
 8008154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008158:	2302      	movs	r3, #2
 800815a:	2200      	movs	r2, #0
 800815c:	f000 f8d4 	bl	8008308 <_lseek_r>
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008166:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800816a:	81a3      	strh	r3, [r4, #12]
 800816c:	4632      	mov	r2, r6
 800816e:	463b      	mov	r3, r7
 8008170:	4628      	mov	r0, r5
 8008172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008176:	f000 b8eb 	b.w	8008350 <_write_r>

0800817a <__sseek>:
 800817a:	b510      	push	{r4, lr}
 800817c:	460c      	mov	r4, r1
 800817e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008182:	f000 f8c1 	bl	8008308 <_lseek_r>
 8008186:	1c43      	adds	r3, r0, #1
 8008188:	89a3      	ldrh	r3, [r4, #12]
 800818a:	bf15      	itete	ne
 800818c:	6560      	strne	r0, [r4, #84]	; 0x54
 800818e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008192:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008196:	81a3      	strheq	r3, [r4, #12]
 8008198:	bf18      	it	ne
 800819a:	81a3      	strhne	r3, [r4, #12]
 800819c:	bd10      	pop	{r4, pc}

0800819e <__sclose>:
 800819e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081a2:	f000 b8a1 	b.w	80082e8 <_close_r>

080081a6 <__swbuf_r>:
 80081a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081a8:	460e      	mov	r6, r1
 80081aa:	4614      	mov	r4, r2
 80081ac:	4605      	mov	r5, r0
 80081ae:	b118      	cbz	r0, 80081b8 <__swbuf_r+0x12>
 80081b0:	6a03      	ldr	r3, [r0, #32]
 80081b2:	b90b      	cbnz	r3, 80081b8 <__swbuf_r+0x12>
 80081b4:	f7ff fee8 	bl	8007f88 <__sinit>
 80081b8:	69a3      	ldr	r3, [r4, #24]
 80081ba:	60a3      	str	r3, [r4, #8]
 80081bc:	89a3      	ldrh	r3, [r4, #12]
 80081be:	071a      	lsls	r2, r3, #28
 80081c0:	d525      	bpl.n	800820e <__swbuf_r+0x68>
 80081c2:	6923      	ldr	r3, [r4, #16]
 80081c4:	b31b      	cbz	r3, 800820e <__swbuf_r+0x68>
 80081c6:	6823      	ldr	r3, [r4, #0]
 80081c8:	6922      	ldr	r2, [r4, #16]
 80081ca:	1a98      	subs	r0, r3, r2
 80081cc:	6963      	ldr	r3, [r4, #20]
 80081ce:	b2f6      	uxtb	r6, r6
 80081d0:	4283      	cmp	r3, r0
 80081d2:	4637      	mov	r7, r6
 80081d4:	dc04      	bgt.n	80081e0 <__swbuf_r+0x3a>
 80081d6:	4621      	mov	r1, r4
 80081d8:	4628      	mov	r0, r5
 80081da:	f7ff fe0d 	bl	8007df8 <_fflush_r>
 80081de:	b9e0      	cbnz	r0, 800821a <__swbuf_r+0x74>
 80081e0:	68a3      	ldr	r3, [r4, #8]
 80081e2:	3b01      	subs	r3, #1
 80081e4:	60a3      	str	r3, [r4, #8]
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	1c5a      	adds	r2, r3, #1
 80081ea:	6022      	str	r2, [r4, #0]
 80081ec:	701e      	strb	r6, [r3, #0]
 80081ee:	6962      	ldr	r2, [r4, #20]
 80081f0:	1c43      	adds	r3, r0, #1
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d004      	beq.n	8008200 <__swbuf_r+0x5a>
 80081f6:	89a3      	ldrh	r3, [r4, #12]
 80081f8:	07db      	lsls	r3, r3, #31
 80081fa:	d506      	bpl.n	800820a <__swbuf_r+0x64>
 80081fc:	2e0a      	cmp	r6, #10
 80081fe:	d104      	bne.n	800820a <__swbuf_r+0x64>
 8008200:	4621      	mov	r1, r4
 8008202:	4628      	mov	r0, r5
 8008204:	f7ff fdf8 	bl	8007df8 <_fflush_r>
 8008208:	b938      	cbnz	r0, 800821a <__swbuf_r+0x74>
 800820a:	4638      	mov	r0, r7
 800820c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800820e:	4621      	mov	r1, r4
 8008210:	4628      	mov	r0, r5
 8008212:	f000 f805 	bl	8008220 <__swsetup_r>
 8008216:	2800      	cmp	r0, #0
 8008218:	d0d5      	beq.n	80081c6 <__swbuf_r+0x20>
 800821a:	f04f 37ff 	mov.w	r7, #4294967295
 800821e:	e7f4      	b.n	800820a <__swbuf_r+0x64>

08008220 <__swsetup_r>:
 8008220:	b538      	push	{r3, r4, r5, lr}
 8008222:	4b2a      	ldr	r3, [pc, #168]	; (80082cc <__swsetup_r+0xac>)
 8008224:	4605      	mov	r5, r0
 8008226:	6818      	ldr	r0, [r3, #0]
 8008228:	460c      	mov	r4, r1
 800822a:	b118      	cbz	r0, 8008234 <__swsetup_r+0x14>
 800822c:	6a03      	ldr	r3, [r0, #32]
 800822e:	b90b      	cbnz	r3, 8008234 <__swsetup_r+0x14>
 8008230:	f7ff feaa 	bl	8007f88 <__sinit>
 8008234:	89a3      	ldrh	r3, [r4, #12]
 8008236:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800823a:	0718      	lsls	r0, r3, #28
 800823c:	d422      	bmi.n	8008284 <__swsetup_r+0x64>
 800823e:	06d9      	lsls	r1, r3, #27
 8008240:	d407      	bmi.n	8008252 <__swsetup_r+0x32>
 8008242:	2309      	movs	r3, #9
 8008244:	602b      	str	r3, [r5, #0]
 8008246:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800824a:	81a3      	strh	r3, [r4, #12]
 800824c:	f04f 30ff 	mov.w	r0, #4294967295
 8008250:	e034      	b.n	80082bc <__swsetup_r+0x9c>
 8008252:	0758      	lsls	r0, r3, #29
 8008254:	d512      	bpl.n	800827c <__swsetup_r+0x5c>
 8008256:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008258:	b141      	cbz	r1, 800826c <__swsetup_r+0x4c>
 800825a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800825e:	4299      	cmp	r1, r3
 8008260:	d002      	beq.n	8008268 <__swsetup_r+0x48>
 8008262:	4628      	mov	r0, r5
 8008264:	f000 ff3e 	bl	80090e4 <_free_r>
 8008268:	2300      	movs	r3, #0
 800826a:	6363      	str	r3, [r4, #52]	; 0x34
 800826c:	89a3      	ldrh	r3, [r4, #12]
 800826e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008272:	81a3      	strh	r3, [r4, #12]
 8008274:	2300      	movs	r3, #0
 8008276:	6063      	str	r3, [r4, #4]
 8008278:	6923      	ldr	r3, [r4, #16]
 800827a:	6023      	str	r3, [r4, #0]
 800827c:	89a3      	ldrh	r3, [r4, #12]
 800827e:	f043 0308 	orr.w	r3, r3, #8
 8008282:	81a3      	strh	r3, [r4, #12]
 8008284:	6923      	ldr	r3, [r4, #16]
 8008286:	b94b      	cbnz	r3, 800829c <__swsetup_r+0x7c>
 8008288:	89a3      	ldrh	r3, [r4, #12]
 800828a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800828e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008292:	d003      	beq.n	800829c <__swsetup_r+0x7c>
 8008294:	4621      	mov	r1, r4
 8008296:	4628      	mov	r0, r5
 8008298:	f001 fe62 	bl	8009f60 <__smakebuf_r>
 800829c:	89a0      	ldrh	r0, [r4, #12]
 800829e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082a2:	f010 0301 	ands.w	r3, r0, #1
 80082a6:	d00a      	beq.n	80082be <__swsetup_r+0x9e>
 80082a8:	2300      	movs	r3, #0
 80082aa:	60a3      	str	r3, [r4, #8]
 80082ac:	6963      	ldr	r3, [r4, #20]
 80082ae:	425b      	negs	r3, r3
 80082b0:	61a3      	str	r3, [r4, #24]
 80082b2:	6923      	ldr	r3, [r4, #16]
 80082b4:	b943      	cbnz	r3, 80082c8 <__swsetup_r+0xa8>
 80082b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80082ba:	d1c4      	bne.n	8008246 <__swsetup_r+0x26>
 80082bc:	bd38      	pop	{r3, r4, r5, pc}
 80082be:	0781      	lsls	r1, r0, #30
 80082c0:	bf58      	it	pl
 80082c2:	6963      	ldrpl	r3, [r4, #20]
 80082c4:	60a3      	str	r3, [r4, #8]
 80082c6:	e7f4      	b.n	80082b2 <__swsetup_r+0x92>
 80082c8:	2000      	movs	r0, #0
 80082ca:	e7f7      	b.n	80082bc <__swsetup_r+0x9c>
 80082cc:	20000084 	.word	0x20000084

080082d0 <memset>:
 80082d0:	4402      	add	r2, r0
 80082d2:	4603      	mov	r3, r0
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d100      	bne.n	80082da <memset+0xa>
 80082d8:	4770      	bx	lr
 80082da:	f803 1b01 	strb.w	r1, [r3], #1
 80082de:	e7f9      	b.n	80082d4 <memset+0x4>

080082e0 <_localeconv_r>:
 80082e0:	4800      	ldr	r0, [pc, #0]	; (80082e4 <_localeconv_r+0x4>)
 80082e2:	4770      	bx	lr
 80082e4:	20000178 	.word	0x20000178

080082e8 <_close_r>:
 80082e8:	b538      	push	{r3, r4, r5, lr}
 80082ea:	4d06      	ldr	r5, [pc, #24]	; (8008304 <_close_r+0x1c>)
 80082ec:	2300      	movs	r3, #0
 80082ee:	4604      	mov	r4, r0
 80082f0:	4608      	mov	r0, r1
 80082f2:	602b      	str	r3, [r5, #0]
 80082f4:	f7fb fc31 	bl	8003b5a <_close>
 80082f8:	1c43      	adds	r3, r0, #1
 80082fa:	d102      	bne.n	8008302 <_close_r+0x1a>
 80082fc:	682b      	ldr	r3, [r5, #0]
 80082fe:	b103      	cbz	r3, 8008302 <_close_r+0x1a>
 8008300:	6023      	str	r3, [r4, #0]
 8008302:	bd38      	pop	{r3, r4, r5, pc}
 8008304:	20000854 	.word	0x20000854

08008308 <_lseek_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4d07      	ldr	r5, [pc, #28]	; (8008328 <_lseek_r+0x20>)
 800830c:	4604      	mov	r4, r0
 800830e:	4608      	mov	r0, r1
 8008310:	4611      	mov	r1, r2
 8008312:	2200      	movs	r2, #0
 8008314:	602a      	str	r2, [r5, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	f7fb fc46 	bl	8003ba8 <_lseek>
 800831c:	1c43      	adds	r3, r0, #1
 800831e:	d102      	bne.n	8008326 <_lseek_r+0x1e>
 8008320:	682b      	ldr	r3, [r5, #0]
 8008322:	b103      	cbz	r3, 8008326 <_lseek_r+0x1e>
 8008324:	6023      	str	r3, [r4, #0]
 8008326:	bd38      	pop	{r3, r4, r5, pc}
 8008328:	20000854 	.word	0x20000854

0800832c <_read_r>:
 800832c:	b538      	push	{r3, r4, r5, lr}
 800832e:	4d07      	ldr	r5, [pc, #28]	; (800834c <_read_r+0x20>)
 8008330:	4604      	mov	r4, r0
 8008332:	4608      	mov	r0, r1
 8008334:	4611      	mov	r1, r2
 8008336:	2200      	movs	r2, #0
 8008338:	602a      	str	r2, [r5, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	f7fb fbd4 	bl	8003ae8 <_read>
 8008340:	1c43      	adds	r3, r0, #1
 8008342:	d102      	bne.n	800834a <_read_r+0x1e>
 8008344:	682b      	ldr	r3, [r5, #0]
 8008346:	b103      	cbz	r3, 800834a <_read_r+0x1e>
 8008348:	6023      	str	r3, [r4, #0]
 800834a:	bd38      	pop	{r3, r4, r5, pc}
 800834c:	20000854 	.word	0x20000854

08008350 <_write_r>:
 8008350:	b538      	push	{r3, r4, r5, lr}
 8008352:	4d07      	ldr	r5, [pc, #28]	; (8008370 <_write_r+0x20>)
 8008354:	4604      	mov	r4, r0
 8008356:	4608      	mov	r0, r1
 8008358:	4611      	mov	r1, r2
 800835a:	2200      	movs	r2, #0
 800835c:	602a      	str	r2, [r5, #0]
 800835e:	461a      	mov	r2, r3
 8008360:	f7fb fbdf 	bl	8003b22 <_write>
 8008364:	1c43      	adds	r3, r0, #1
 8008366:	d102      	bne.n	800836e <_write_r+0x1e>
 8008368:	682b      	ldr	r3, [r5, #0]
 800836a:	b103      	cbz	r3, 800836e <_write_r+0x1e>
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	bd38      	pop	{r3, r4, r5, pc}
 8008370:	20000854 	.word	0x20000854

08008374 <__errno>:
 8008374:	4b01      	ldr	r3, [pc, #4]	; (800837c <__errno+0x8>)
 8008376:	6818      	ldr	r0, [r3, #0]
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	20000084 	.word	0x20000084

08008380 <__libc_init_array>:
 8008380:	b570      	push	{r4, r5, r6, lr}
 8008382:	4d0d      	ldr	r5, [pc, #52]	; (80083b8 <__libc_init_array+0x38>)
 8008384:	4c0d      	ldr	r4, [pc, #52]	; (80083bc <__libc_init_array+0x3c>)
 8008386:	1b64      	subs	r4, r4, r5
 8008388:	10a4      	asrs	r4, r4, #2
 800838a:	2600      	movs	r6, #0
 800838c:	42a6      	cmp	r6, r4
 800838e:	d109      	bne.n	80083a4 <__libc_init_array+0x24>
 8008390:	4d0b      	ldr	r5, [pc, #44]	; (80083c0 <__libc_init_array+0x40>)
 8008392:	4c0c      	ldr	r4, [pc, #48]	; (80083c4 <__libc_init_array+0x44>)
 8008394:	f001 ff88 	bl	800a2a8 <_init>
 8008398:	1b64      	subs	r4, r4, r5
 800839a:	10a4      	asrs	r4, r4, #2
 800839c:	2600      	movs	r6, #0
 800839e:	42a6      	cmp	r6, r4
 80083a0:	d105      	bne.n	80083ae <__libc_init_array+0x2e>
 80083a2:	bd70      	pop	{r4, r5, r6, pc}
 80083a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083a8:	4798      	blx	r3
 80083aa:	3601      	adds	r6, #1
 80083ac:	e7ee      	b.n	800838c <__libc_init_array+0xc>
 80083ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80083b2:	4798      	blx	r3
 80083b4:	3601      	adds	r6, #1
 80083b6:	e7f2      	b.n	800839e <__libc_init_array+0x1e>
 80083b8:	0800a85c 	.word	0x0800a85c
 80083bc:	0800a85c 	.word	0x0800a85c
 80083c0:	0800a85c 	.word	0x0800a85c
 80083c4:	0800a860 	.word	0x0800a860

080083c8 <__retarget_lock_init_recursive>:
 80083c8:	4770      	bx	lr

080083ca <__retarget_lock_acquire_recursive>:
 80083ca:	4770      	bx	lr

080083cc <__retarget_lock_release_recursive>:
 80083cc:	4770      	bx	lr

080083ce <memcpy>:
 80083ce:	440a      	add	r2, r1
 80083d0:	4291      	cmp	r1, r2
 80083d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80083d6:	d100      	bne.n	80083da <memcpy+0xc>
 80083d8:	4770      	bx	lr
 80083da:	b510      	push	{r4, lr}
 80083dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083e4:	4291      	cmp	r1, r2
 80083e6:	d1f9      	bne.n	80083dc <memcpy+0xe>
 80083e8:	bd10      	pop	{r4, pc}

080083ea <quorem>:
 80083ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ee:	6903      	ldr	r3, [r0, #16]
 80083f0:	690c      	ldr	r4, [r1, #16]
 80083f2:	42a3      	cmp	r3, r4
 80083f4:	4607      	mov	r7, r0
 80083f6:	db7e      	blt.n	80084f6 <quorem+0x10c>
 80083f8:	3c01      	subs	r4, #1
 80083fa:	f101 0814 	add.w	r8, r1, #20
 80083fe:	f100 0514 	add.w	r5, r0, #20
 8008402:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008406:	9301      	str	r3, [sp, #4]
 8008408:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800840c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008410:	3301      	adds	r3, #1
 8008412:	429a      	cmp	r2, r3
 8008414:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008418:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800841c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008420:	d331      	bcc.n	8008486 <quorem+0x9c>
 8008422:	f04f 0e00 	mov.w	lr, #0
 8008426:	4640      	mov	r0, r8
 8008428:	46ac      	mov	ip, r5
 800842a:	46f2      	mov	sl, lr
 800842c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008430:	b293      	uxth	r3, r2
 8008432:	fb06 e303 	mla	r3, r6, r3, lr
 8008436:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800843a:	0c1a      	lsrs	r2, r3, #16
 800843c:	b29b      	uxth	r3, r3
 800843e:	ebaa 0303 	sub.w	r3, sl, r3
 8008442:	f8dc a000 	ldr.w	sl, [ip]
 8008446:	fa13 f38a 	uxtah	r3, r3, sl
 800844a:	fb06 220e 	mla	r2, r6, lr, r2
 800844e:	9300      	str	r3, [sp, #0]
 8008450:	9b00      	ldr	r3, [sp, #0]
 8008452:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008456:	b292      	uxth	r2, r2
 8008458:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800845c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008460:	f8bd 3000 	ldrh.w	r3, [sp]
 8008464:	4581      	cmp	r9, r0
 8008466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800846a:	f84c 3b04 	str.w	r3, [ip], #4
 800846e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008472:	d2db      	bcs.n	800842c <quorem+0x42>
 8008474:	f855 300b 	ldr.w	r3, [r5, fp]
 8008478:	b92b      	cbnz	r3, 8008486 <quorem+0x9c>
 800847a:	9b01      	ldr	r3, [sp, #4]
 800847c:	3b04      	subs	r3, #4
 800847e:	429d      	cmp	r5, r3
 8008480:	461a      	mov	r2, r3
 8008482:	d32c      	bcc.n	80084de <quorem+0xf4>
 8008484:	613c      	str	r4, [r7, #16]
 8008486:	4638      	mov	r0, r7
 8008488:	f001 f9a8 	bl	80097dc <__mcmp>
 800848c:	2800      	cmp	r0, #0
 800848e:	db22      	blt.n	80084d6 <quorem+0xec>
 8008490:	3601      	adds	r6, #1
 8008492:	4629      	mov	r1, r5
 8008494:	2000      	movs	r0, #0
 8008496:	f858 2b04 	ldr.w	r2, [r8], #4
 800849a:	f8d1 c000 	ldr.w	ip, [r1]
 800849e:	b293      	uxth	r3, r2
 80084a0:	1ac3      	subs	r3, r0, r3
 80084a2:	0c12      	lsrs	r2, r2, #16
 80084a4:	fa13 f38c 	uxtah	r3, r3, ip
 80084a8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80084ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084b6:	45c1      	cmp	r9, r8
 80084b8:	f841 3b04 	str.w	r3, [r1], #4
 80084bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80084c0:	d2e9      	bcs.n	8008496 <quorem+0xac>
 80084c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084ca:	b922      	cbnz	r2, 80084d6 <quorem+0xec>
 80084cc:	3b04      	subs	r3, #4
 80084ce:	429d      	cmp	r5, r3
 80084d0:	461a      	mov	r2, r3
 80084d2:	d30a      	bcc.n	80084ea <quorem+0x100>
 80084d4:	613c      	str	r4, [r7, #16]
 80084d6:	4630      	mov	r0, r6
 80084d8:	b003      	add	sp, #12
 80084da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084de:	6812      	ldr	r2, [r2, #0]
 80084e0:	3b04      	subs	r3, #4
 80084e2:	2a00      	cmp	r2, #0
 80084e4:	d1ce      	bne.n	8008484 <quorem+0x9a>
 80084e6:	3c01      	subs	r4, #1
 80084e8:	e7c9      	b.n	800847e <quorem+0x94>
 80084ea:	6812      	ldr	r2, [r2, #0]
 80084ec:	3b04      	subs	r3, #4
 80084ee:	2a00      	cmp	r2, #0
 80084f0:	d1f0      	bne.n	80084d4 <quorem+0xea>
 80084f2:	3c01      	subs	r4, #1
 80084f4:	e7eb      	b.n	80084ce <quorem+0xe4>
 80084f6:	2000      	movs	r0, #0
 80084f8:	e7ee      	b.n	80084d8 <quorem+0xee>
 80084fa:	0000      	movs	r0, r0
 80084fc:	0000      	movs	r0, r0
	...

08008500 <_dtoa_r>:
 8008500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008504:	ed2d 8b04 	vpush	{d8-d9}
 8008508:	69c5      	ldr	r5, [r0, #28]
 800850a:	b093      	sub	sp, #76	; 0x4c
 800850c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008510:	ec57 6b10 	vmov	r6, r7, d0
 8008514:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008518:	9107      	str	r1, [sp, #28]
 800851a:	4604      	mov	r4, r0
 800851c:	920a      	str	r2, [sp, #40]	; 0x28
 800851e:	930d      	str	r3, [sp, #52]	; 0x34
 8008520:	b975      	cbnz	r5, 8008540 <_dtoa_r+0x40>
 8008522:	2010      	movs	r0, #16
 8008524:	f000 fe2a 	bl	800917c <malloc>
 8008528:	4602      	mov	r2, r0
 800852a:	61e0      	str	r0, [r4, #28]
 800852c:	b920      	cbnz	r0, 8008538 <_dtoa_r+0x38>
 800852e:	4bae      	ldr	r3, [pc, #696]	; (80087e8 <_dtoa_r+0x2e8>)
 8008530:	21ef      	movs	r1, #239	; 0xef
 8008532:	48ae      	ldr	r0, [pc, #696]	; (80087ec <_dtoa_r+0x2ec>)
 8008534:	f001 fdd0 	bl	800a0d8 <__assert_func>
 8008538:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800853c:	6005      	str	r5, [r0, #0]
 800853e:	60c5      	str	r5, [r0, #12]
 8008540:	69e3      	ldr	r3, [r4, #28]
 8008542:	6819      	ldr	r1, [r3, #0]
 8008544:	b151      	cbz	r1, 800855c <_dtoa_r+0x5c>
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	604a      	str	r2, [r1, #4]
 800854a:	2301      	movs	r3, #1
 800854c:	4093      	lsls	r3, r2
 800854e:	608b      	str	r3, [r1, #8]
 8008550:	4620      	mov	r0, r4
 8008552:	f000 ff07 	bl	8009364 <_Bfree>
 8008556:	69e3      	ldr	r3, [r4, #28]
 8008558:	2200      	movs	r2, #0
 800855a:	601a      	str	r2, [r3, #0]
 800855c:	1e3b      	subs	r3, r7, #0
 800855e:	bfbb      	ittet	lt
 8008560:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008564:	9303      	strlt	r3, [sp, #12]
 8008566:	2300      	movge	r3, #0
 8008568:	2201      	movlt	r2, #1
 800856a:	bfac      	ite	ge
 800856c:	f8c8 3000 	strge.w	r3, [r8]
 8008570:	f8c8 2000 	strlt.w	r2, [r8]
 8008574:	4b9e      	ldr	r3, [pc, #632]	; (80087f0 <_dtoa_r+0x2f0>)
 8008576:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800857a:	ea33 0308 	bics.w	r3, r3, r8
 800857e:	d11b      	bne.n	80085b8 <_dtoa_r+0xb8>
 8008580:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008582:	f242 730f 	movw	r3, #9999	; 0x270f
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800858c:	4333      	orrs	r3, r6
 800858e:	f000 8593 	beq.w	80090b8 <_dtoa_r+0xbb8>
 8008592:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008594:	b963      	cbnz	r3, 80085b0 <_dtoa_r+0xb0>
 8008596:	4b97      	ldr	r3, [pc, #604]	; (80087f4 <_dtoa_r+0x2f4>)
 8008598:	e027      	b.n	80085ea <_dtoa_r+0xea>
 800859a:	4b97      	ldr	r3, [pc, #604]	; (80087f8 <_dtoa_r+0x2f8>)
 800859c:	9300      	str	r3, [sp, #0]
 800859e:	3308      	adds	r3, #8
 80085a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80085a2:	6013      	str	r3, [r2, #0]
 80085a4:	9800      	ldr	r0, [sp, #0]
 80085a6:	b013      	add	sp, #76	; 0x4c
 80085a8:	ecbd 8b04 	vpop	{d8-d9}
 80085ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b0:	4b90      	ldr	r3, [pc, #576]	; (80087f4 <_dtoa_r+0x2f4>)
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	3303      	adds	r3, #3
 80085b6:	e7f3      	b.n	80085a0 <_dtoa_r+0xa0>
 80085b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80085bc:	2200      	movs	r2, #0
 80085be:	ec51 0b17 	vmov	r0, r1, d7
 80085c2:	eeb0 8a47 	vmov.f32	s16, s14
 80085c6:	eef0 8a67 	vmov.f32	s17, s15
 80085ca:	2300      	movs	r3, #0
 80085cc:	f7f8 fa84 	bl	8000ad8 <__aeabi_dcmpeq>
 80085d0:	4681      	mov	r9, r0
 80085d2:	b160      	cbz	r0, 80085ee <_dtoa_r+0xee>
 80085d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085d6:	2301      	movs	r3, #1
 80085d8:	6013      	str	r3, [r2, #0]
 80085da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 8568 	beq.w	80090b2 <_dtoa_r+0xbb2>
 80085e2:	4b86      	ldr	r3, [pc, #536]	; (80087fc <_dtoa_r+0x2fc>)
 80085e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80085e6:	6013      	str	r3, [r2, #0]
 80085e8:	3b01      	subs	r3, #1
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	e7da      	b.n	80085a4 <_dtoa_r+0xa4>
 80085ee:	aa10      	add	r2, sp, #64	; 0x40
 80085f0:	a911      	add	r1, sp, #68	; 0x44
 80085f2:	4620      	mov	r0, r4
 80085f4:	eeb0 0a48 	vmov.f32	s0, s16
 80085f8:	eef0 0a68 	vmov.f32	s1, s17
 80085fc:	f001 f994 	bl	8009928 <__d2b>
 8008600:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008604:	4682      	mov	sl, r0
 8008606:	2d00      	cmp	r5, #0
 8008608:	d07f      	beq.n	800870a <_dtoa_r+0x20a>
 800860a:	ee18 3a90 	vmov	r3, s17
 800860e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008612:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008616:	ec51 0b18 	vmov	r0, r1, d8
 800861a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800861e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008622:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008626:	4619      	mov	r1, r3
 8008628:	2200      	movs	r2, #0
 800862a:	4b75      	ldr	r3, [pc, #468]	; (8008800 <_dtoa_r+0x300>)
 800862c:	f7f7 fe34 	bl	8000298 <__aeabi_dsub>
 8008630:	a367      	add	r3, pc, #412	; (adr r3, 80087d0 <_dtoa_r+0x2d0>)
 8008632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008636:	f7f7 ffe7 	bl	8000608 <__aeabi_dmul>
 800863a:	a367      	add	r3, pc, #412	; (adr r3, 80087d8 <_dtoa_r+0x2d8>)
 800863c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008640:	f7f7 fe2c 	bl	800029c <__adddf3>
 8008644:	4606      	mov	r6, r0
 8008646:	4628      	mov	r0, r5
 8008648:	460f      	mov	r7, r1
 800864a:	f7f7 ff73 	bl	8000534 <__aeabi_i2d>
 800864e:	a364      	add	r3, pc, #400	; (adr r3, 80087e0 <_dtoa_r+0x2e0>)
 8008650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008654:	f7f7 ffd8 	bl	8000608 <__aeabi_dmul>
 8008658:	4602      	mov	r2, r0
 800865a:	460b      	mov	r3, r1
 800865c:	4630      	mov	r0, r6
 800865e:	4639      	mov	r1, r7
 8008660:	f7f7 fe1c 	bl	800029c <__adddf3>
 8008664:	4606      	mov	r6, r0
 8008666:	460f      	mov	r7, r1
 8008668:	f7f8 fa7e 	bl	8000b68 <__aeabi_d2iz>
 800866c:	2200      	movs	r2, #0
 800866e:	4683      	mov	fp, r0
 8008670:	2300      	movs	r3, #0
 8008672:	4630      	mov	r0, r6
 8008674:	4639      	mov	r1, r7
 8008676:	f7f8 fa39 	bl	8000aec <__aeabi_dcmplt>
 800867a:	b148      	cbz	r0, 8008690 <_dtoa_r+0x190>
 800867c:	4658      	mov	r0, fp
 800867e:	f7f7 ff59 	bl	8000534 <__aeabi_i2d>
 8008682:	4632      	mov	r2, r6
 8008684:	463b      	mov	r3, r7
 8008686:	f7f8 fa27 	bl	8000ad8 <__aeabi_dcmpeq>
 800868a:	b908      	cbnz	r0, 8008690 <_dtoa_r+0x190>
 800868c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008690:	f1bb 0f16 	cmp.w	fp, #22
 8008694:	d857      	bhi.n	8008746 <_dtoa_r+0x246>
 8008696:	4b5b      	ldr	r3, [pc, #364]	; (8008804 <_dtoa_r+0x304>)
 8008698:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800869c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a0:	ec51 0b18 	vmov	r0, r1, d8
 80086a4:	f7f8 fa22 	bl	8000aec <__aeabi_dcmplt>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	d04e      	beq.n	800874a <_dtoa_r+0x24a>
 80086ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80086b0:	2300      	movs	r3, #0
 80086b2:	930c      	str	r3, [sp, #48]	; 0x30
 80086b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086b6:	1b5b      	subs	r3, r3, r5
 80086b8:	1e5a      	subs	r2, r3, #1
 80086ba:	bf45      	ittet	mi
 80086bc:	f1c3 0301 	rsbmi	r3, r3, #1
 80086c0:	9305      	strmi	r3, [sp, #20]
 80086c2:	2300      	movpl	r3, #0
 80086c4:	2300      	movmi	r3, #0
 80086c6:	9206      	str	r2, [sp, #24]
 80086c8:	bf54      	ite	pl
 80086ca:	9305      	strpl	r3, [sp, #20]
 80086cc:	9306      	strmi	r3, [sp, #24]
 80086ce:	f1bb 0f00 	cmp.w	fp, #0
 80086d2:	db3c      	blt.n	800874e <_dtoa_r+0x24e>
 80086d4:	9b06      	ldr	r3, [sp, #24]
 80086d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80086da:	445b      	add	r3, fp
 80086dc:	9306      	str	r3, [sp, #24]
 80086de:	2300      	movs	r3, #0
 80086e0:	9308      	str	r3, [sp, #32]
 80086e2:	9b07      	ldr	r3, [sp, #28]
 80086e4:	2b09      	cmp	r3, #9
 80086e6:	d868      	bhi.n	80087ba <_dtoa_r+0x2ba>
 80086e8:	2b05      	cmp	r3, #5
 80086ea:	bfc4      	itt	gt
 80086ec:	3b04      	subgt	r3, #4
 80086ee:	9307      	strgt	r3, [sp, #28]
 80086f0:	9b07      	ldr	r3, [sp, #28]
 80086f2:	f1a3 0302 	sub.w	r3, r3, #2
 80086f6:	bfcc      	ite	gt
 80086f8:	2500      	movgt	r5, #0
 80086fa:	2501      	movle	r5, #1
 80086fc:	2b03      	cmp	r3, #3
 80086fe:	f200 8085 	bhi.w	800880c <_dtoa_r+0x30c>
 8008702:	e8df f003 	tbb	[pc, r3]
 8008706:	3b2e      	.short	0x3b2e
 8008708:	5839      	.short	0x5839
 800870a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800870e:	441d      	add	r5, r3
 8008710:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008714:	2b20      	cmp	r3, #32
 8008716:	bfc1      	itttt	gt
 8008718:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800871c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008720:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008724:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008728:	bfd6      	itet	le
 800872a:	f1c3 0320 	rsble	r3, r3, #32
 800872e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008732:	fa06 f003 	lslle.w	r0, r6, r3
 8008736:	f7f7 feed 	bl	8000514 <__aeabi_ui2d>
 800873a:	2201      	movs	r2, #1
 800873c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008740:	3d01      	subs	r5, #1
 8008742:	920e      	str	r2, [sp, #56]	; 0x38
 8008744:	e76f      	b.n	8008626 <_dtoa_r+0x126>
 8008746:	2301      	movs	r3, #1
 8008748:	e7b3      	b.n	80086b2 <_dtoa_r+0x1b2>
 800874a:	900c      	str	r0, [sp, #48]	; 0x30
 800874c:	e7b2      	b.n	80086b4 <_dtoa_r+0x1b4>
 800874e:	9b05      	ldr	r3, [sp, #20]
 8008750:	eba3 030b 	sub.w	r3, r3, fp
 8008754:	9305      	str	r3, [sp, #20]
 8008756:	f1cb 0300 	rsb	r3, fp, #0
 800875a:	9308      	str	r3, [sp, #32]
 800875c:	2300      	movs	r3, #0
 800875e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008760:	e7bf      	b.n	80086e2 <_dtoa_r+0x1e2>
 8008762:	2300      	movs	r3, #0
 8008764:	9309      	str	r3, [sp, #36]	; 0x24
 8008766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008768:	2b00      	cmp	r3, #0
 800876a:	dc52      	bgt.n	8008812 <_dtoa_r+0x312>
 800876c:	2301      	movs	r3, #1
 800876e:	9301      	str	r3, [sp, #4]
 8008770:	9304      	str	r3, [sp, #16]
 8008772:	461a      	mov	r2, r3
 8008774:	920a      	str	r2, [sp, #40]	; 0x28
 8008776:	e00b      	b.n	8008790 <_dtoa_r+0x290>
 8008778:	2301      	movs	r3, #1
 800877a:	e7f3      	b.n	8008764 <_dtoa_r+0x264>
 800877c:	2300      	movs	r3, #0
 800877e:	9309      	str	r3, [sp, #36]	; 0x24
 8008780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008782:	445b      	add	r3, fp
 8008784:	9301      	str	r3, [sp, #4]
 8008786:	3301      	adds	r3, #1
 8008788:	2b01      	cmp	r3, #1
 800878a:	9304      	str	r3, [sp, #16]
 800878c:	bfb8      	it	lt
 800878e:	2301      	movlt	r3, #1
 8008790:	69e0      	ldr	r0, [r4, #28]
 8008792:	2100      	movs	r1, #0
 8008794:	2204      	movs	r2, #4
 8008796:	f102 0614 	add.w	r6, r2, #20
 800879a:	429e      	cmp	r6, r3
 800879c:	d93d      	bls.n	800881a <_dtoa_r+0x31a>
 800879e:	6041      	str	r1, [r0, #4]
 80087a0:	4620      	mov	r0, r4
 80087a2:	f000 fd9f 	bl	80092e4 <_Balloc>
 80087a6:	9000      	str	r0, [sp, #0]
 80087a8:	2800      	cmp	r0, #0
 80087aa:	d139      	bne.n	8008820 <_dtoa_r+0x320>
 80087ac:	4b16      	ldr	r3, [pc, #88]	; (8008808 <_dtoa_r+0x308>)
 80087ae:	4602      	mov	r2, r0
 80087b0:	f240 11af 	movw	r1, #431	; 0x1af
 80087b4:	e6bd      	b.n	8008532 <_dtoa_r+0x32>
 80087b6:	2301      	movs	r3, #1
 80087b8:	e7e1      	b.n	800877e <_dtoa_r+0x27e>
 80087ba:	2501      	movs	r5, #1
 80087bc:	2300      	movs	r3, #0
 80087be:	9307      	str	r3, [sp, #28]
 80087c0:	9509      	str	r5, [sp, #36]	; 0x24
 80087c2:	f04f 33ff 	mov.w	r3, #4294967295
 80087c6:	9301      	str	r3, [sp, #4]
 80087c8:	9304      	str	r3, [sp, #16]
 80087ca:	2200      	movs	r2, #0
 80087cc:	2312      	movs	r3, #18
 80087ce:	e7d1      	b.n	8008774 <_dtoa_r+0x274>
 80087d0:	636f4361 	.word	0x636f4361
 80087d4:	3fd287a7 	.word	0x3fd287a7
 80087d8:	8b60c8b3 	.word	0x8b60c8b3
 80087dc:	3fc68a28 	.word	0x3fc68a28
 80087e0:	509f79fb 	.word	0x509f79fb
 80087e4:	3fd34413 	.word	0x3fd34413
 80087e8:	0800a521 	.word	0x0800a521
 80087ec:	0800a538 	.word	0x0800a538
 80087f0:	7ff00000 	.word	0x7ff00000
 80087f4:	0800a51d 	.word	0x0800a51d
 80087f8:	0800a514 	.word	0x0800a514
 80087fc:	0800a4f1 	.word	0x0800a4f1
 8008800:	3ff80000 	.word	0x3ff80000
 8008804:	0800a628 	.word	0x0800a628
 8008808:	0800a590 	.word	0x0800a590
 800880c:	2301      	movs	r3, #1
 800880e:	9309      	str	r3, [sp, #36]	; 0x24
 8008810:	e7d7      	b.n	80087c2 <_dtoa_r+0x2c2>
 8008812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008814:	9301      	str	r3, [sp, #4]
 8008816:	9304      	str	r3, [sp, #16]
 8008818:	e7ba      	b.n	8008790 <_dtoa_r+0x290>
 800881a:	3101      	adds	r1, #1
 800881c:	0052      	lsls	r2, r2, #1
 800881e:	e7ba      	b.n	8008796 <_dtoa_r+0x296>
 8008820:	69e3      	ldr	r3, [r4, #28]
 8008822:	9a00      	ldr	r2, [sp, #0]
 8008824:	601a      	str	r2, [r3, #0]
 8008826:	9b04      	ldr	r3, [sp, #16]
 8008828:	2b0e      	cmp	r3, #14
 800882a:	f200 80a8 	bhi.w	800897e <_dtoa_r+0x47e>
 800882e:	2d00      	cmp	r5, #0
 8008830:	f000 80a5 	beq.w	800897e <_dtoa_r+0x47e>
 8008834:	f1bb 0f00 	cmp.w	fp, #0
 8008838:	dd38      	ble.n	80088ac <_dtoa_r+0x3ac>
 800883a:	4bc0      	ldr	r3, [pc, #768]	; (8008b3c <_dtoa_r+0x63c>)
 800883c:	f00b 020f 	and.w	r2, fp, #15
 8008840:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008844:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008848:	e9d3 6700 	ldrd	r6, r7, [r3]
 800884c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008850:	d019      	beq.n	8008886 <_dtoa_r+0x386>
 8008852:	4bbb      	ldr	r3, [pc, #748]	; (8008b40 <_dtoa_r+0x640>)
 8008854:	ec51 0b18 	vmov	r0, r1, d8
 8008858:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800885c:	f7f7 fffe 	bl	800085c <__aeabi_ddiv>
 8008860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008864:	f008 080f 	and.w	r8, r8, #15
 8008868:	2503      	movs	r5, #3
 800886a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008b40 <_dtoa_r+0x640>
 800886e:	f1b8 0f00 	cmp.w	r8, #0
 8008872:	d10a      	bne.n	800888a <_dtoa_r+0x38a>
 8008874:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008878:	4632      	mov	r2, r6
 800887a:	463b      	mov	r3, r7
 800887c:	f7f7 ffee 	bl	800085c <__aeabi_ddiv>
 8008880:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008884:	e02b      	b.n	80088de <_dtoa_r+0x3de>
 8008886:	2502      	movs	r5, #2
 8008888:	e7ef      	b.n	800886a <_dtoa_r+0x36a>
 800888a:	f018 0f01 	tst.w	r8, #1
 800888e:	d008      	beq.n	80088a2 <_dtoa_r+0x3a2>
 8008890:	4630      	mov	r0, r6
 8008892:	4639      	mov	r1, r7
 8008894:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008898:	f7f7 feb6 	bl	8000608 <__aeabi_dmul>
 800889c:	3501      	adds	r5, #1
 800889e:	4606      	mov	r6, r0
 80088a0:	460f      	mov	r7, r1
 80088a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80088a6:	f109 0908 	add.w	r9, r9, #8
 80088aa:	e7e0      	b.n	800886e <_dtoa_r+0x36e>
 80088ac:	f000 809f 	beq.w	80089ee <_dtoa_r+0x4ee>
 80088b0:	f1cb 0600 	rsb	r6, fp, #0
 80088b4:	4ba1      	ldr	r3, [pc, #644]	; (8008b3c <_dtoa_r+0x63c>)
 80088b6:	4fa2      	ldr	r7, [pc, #648]	; (8008b40 <_dtoa_r+0x640>)
 80088b8:	f006 020f 	and.w	r2, r6, #15
 80088bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c4:	ec51 0b18 	vmov	r0, r1, d8
 80088c8:	f7f7 fe9e 	bl	8000608 <__aeabi_dmul>
 80088cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088d0:	1136      	asrs	r6, r6, #4
 80088d2:	2300      	movs	r3, #0
 80088d4:	2502      	movs	r5, #2
 80088d6:	2e00      	cmp	r6, #0
 80088d8:	d17e      	bne.n	80089d8 <_dtoa_r+0x4d8>
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1d0      	bne.n	8008880 <_dtoa_r+0x380>
 80088de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 8084 	beq.w	80089f2 <_dtoa_r+0x4f2>
 80088ea:	4b96      	ldr	r3, [pc, #600]	; (8008b44 <_dtoa_r+0x644>)
 80088ec:	2200      	movs	r2, #0
 80088ee:	4640      	mov	r0, r8
 80088f0:	4649      	mov	r1, r9
 80088f2:	f7f8 f8fb 	bl	8000aec <__aeabi_dcmplt>
 80088f6:	2800      	cmp	r0, #0
 80088f8:	d07b      	beq.n	80089f2 <_dtoa_r+0x4f2>
 80088fa:	9b04      	ldr	r3, [sp, #16]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d078      	beq.n	80089f2 <_dtoa_r+0x4f2>
 8008900:	9b01      	ldr	r3, [sp, #4]
 8008902:	2b00      	cmp	r3, #0
 8008904:	dd39      	ble.n	800897a <_dtoa_r+0x47a>
 8008906:	4b90      	ldr	r3, [pc, #576]	; (8008b48 <_dtoa_r+0x648>)
 8008908:	2200      	movs	r2, #0
 800890a:	4640      	mov	r0, r8
 800890c:	4649      	mov	r1, r9
 800890e:	f7f7 fe7b 	bl	8000608 <__aeabi_dmul>
 8008912:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008916:	9e01      	ldr	r6, [sp, #4]
 8008918:	f10b 37ff 	add.w	r7, fp, #4294967295
 800891c:	3501      	adds	r5, #1
 800891e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008922:	4628      	mov	r0, r5
 8008924:	f7f7 fe06 	bl	8000534 <__aeabi_i2d>
 8008928:	4642      	mov	r2, r8
 800892a:	464b      	mov	r3, r9
 800892c:	f7f7 fe6c 	bl	8000608 <__aeabi_dmul>
 8008930:	4b86      	ldr	r3, [pc, #536]	; (8008b4c <_dtoa_r+0x64c>)
 8008932:	2200      	movs	r2, #0
 8008934:	f7f7 fcb2 	bl	800029c <__adddf3>
 8008938:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800893c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008940:	9303      	str	r3, [sp, #12]
 8008942:	2e00      	cmp	r6, #0
 8008944:	d158      	bne.n	80089f8 <_dtoa_r+0x4f8>
 8008946:	4b82      	ldr	r3, [pc, #520]	; (8008b50 <_dtoa_r+0x650>)
 8008948:	2200      	movs	r2, #0
 800894a:	4640      	mov	r0, r8
 800894c:	4649      	mov	r1, r9
 800894e:	f7f7 fca3 	bl	8000298 <__aeabi_dsub>
 8008952:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008956:	4680      	mov	r8, r0
 8008958:	4689      	mov	r9, r1
 800895a:	f7f8 f8e5 	bl	8000b28 <__aeabi_dcmpgt>
 800895e:	2800      	cmp	r0, #0
 8008960:	f040 8296 	bne.w	8008e90 <_dtoa_r+0x990>
 8008964:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008968:	4640      	mov	r0, r8
 800896a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800896e:	4649      	mov	r1, r9
 8008970:	f7f8 f8bc 	bl	8000aec <__aeabi_dcmplt>
 8008974:	2800      	cmp	r0, #0
 8008976:	f040 8289 	bne.w	8008e8c <_dtoa_r+0x98c>
 800897a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800897e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008980:	2b00      	cmp	r3, #0
 8008982:	f2c0 814e 	blt.w	8008c22 <_dtoa_r+0x722>
 8008986:	f1bb 0f0e 	cmp.w	fp, #14
 800898a:	f300 814a 	bgt.w	8008c22 <_dtoa_r+0x722>
 800898e:	4b6b      	ldr	r3, [pc, #428]	; (8008b3c <_dtoa_r+0x63c>)
 8008990:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008994:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800899a:	2b00      	cmp	r3, #0
 800899c:	f280 80dc 	bge.w	8008b58 <_dtoa_r+0x658>
 80089a0:	9b04      	ldr	r3, [sp, #16]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f300 80d8 	bgt.w	8008b58 <_dtoa_r+0x658>
 80089a8:	f040 826f 	bne.w	8008e8a <_dtoa_r+0x98a>
 80089ac:	4b68      	ldr	r3, [pc, #416]	; (8008b50 <_dtoa_r+0x650>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	4640      	mov	r0, r8
 80089b2:	4649      	mov	r1, r9
 80089b4:	f7f7 fe28 	bl	8000608 <__aeabi_dmul>
 80089b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089bc:	f7f8 f8aa 	bl	8000b14 <__aeabi_dcmpge>
 80089c0:	9e04      	ldr	r6, [sp, #16]
 80089c2:	4637      	mov	r7, r6
 80089c4:	2800      	cmp	r0, #0
 80089c6:	f040 8245 	bne.w	8008e54 <_dtoa_r+0x954>
 80089ca:	9d00      	ldr	r5, [sp, #0]
 80089cc:	2331      	movs	r3, #49	; 0x31
 80089ce:	f805 3b01 	strb.w	r3, [r5], #1
 80089d2:	f10b 0b01 	add.w	fp, fp, #1
 80089d6:	e241      	b.n	8008e5c <_dtoa_r+0x95c>
 80089d8:	07f2      	lsls	r2, r6, #31
 80089da:	d505      	bpl.n	80089e8 <_dtoa_r+0x4e8>
 80089dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089e0:	f7f7 fe12 	bl	8000608 <__aeabi_dmul>
 80089e4:	3501      	adds	r5, #1
 80089e6:	2301      	movs	r3, #1
 80089e8:	1076      	asrs	r6, r6, #1
 80089ea:	3708      	adds	r7, #8
 80089ec:	e773      	b.n	80088d6 <_dtoa_r+0x3d6>
 80089ee:	2502      	movs	r5, #2
 80089f0:	e775      	b.n	80088de <_dtoa_r+0x3de>
 80089f2:	9e04      	ldr	r6, [sp, #16]
 80089f4:	465f      	mov	r7, fp
 80089f6:	e792      	b.n	800891e <_dtoa_r+0x41e>
 80089f8:	9900      	ldr	r1, [sp, #0]
 80089fa:	4b50      	ldr	r3, [pc, #320]	; (8008b3c <_dtoa_r+0x63c>)
 80089fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a00:	4431      	add	r1, r6
 8008a02:	9102      	str	r1, [sp, #8]
 8008a04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a06:	eeb0 9a47 	vmov.f32	s18, s14
 8008a0a:	eef0 9a67 	vmov.f32	s19, s15
 8008a0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008a12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a16:	2900      	cmp	r1, #0
 8008a18:	d044      	beq.n	8008aa4 <_dtoa_r+0x5a4>
 8008a1a:	494e      	ldr	r1, [pc, #312]	; (8008b54 <_dtoa_r+0x654>)
 8008a1c:	2000      	movs	r0, #0
 8008a1e:	f7f7 ff1d 	bl	800085c <__aeabi_ddiv>
 8008a22:	ec53 2b19 	vmov	r2, r3, d9
 8008a26:	f7f7 fc37 	bl	8000298 <__aeabi_dsub>
 8008a2a:	9d00      	ldr	r5, [sp, #0]
 8008a2c:	ec41 0b19 	vmov	d9, r0, r1
 8008a30:	4649      	mov	r1, r9
 8008a32:	4640      	mov	r0, r8
 8008a34:	f7f8 f898 	bl	8000b68 <__aeabi_d2iz>
 8008a38:	4606      	mov	r6, r0
 8008a3a:	f7f7 fd7b 	bl	8000534 <__aeabi_i2d>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	460b      	mov	r3, r1
 8008a42:	4640      	mov	r0, r8
 8008a44:	4649      	mov	r1, r9
 8008a46:	f7f7 fc27 	bl	8000298 <__aeabi_dsub>
 8008a4a:	3630      	adds	r6, #48	; 0x30
 8008a4c:	f805 6b01 	strb.w	r6, [r5], #1
 8008a50:	ec53 2b19 	vmov	r2, r3, d9
 8008a54:	4680      	mov	r8, r0
 8008a56:	4689      	mov	r9, r1
 8008a58:	f7f8 f848 	bl	8000aec <__aeabi_dcmplt>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d164      	bne.n	8008b2a <_dtoa_r+0x62a>
 8008a60:	4642      	mov	r2, r8
 8008a62:	464b      	mov	r3, r9
 8008a64:	4937      	ldr	r1, [pc, #220]	; (8008b44 <_dtoa_r+0x644>)
 8008a66:	2000      	movs	r0, #0
 8008a68:	f7f7 fc16 	bl	8000298 <__aeabi_dsub>
 8008a6c:	ec53 2b19 	vmov	r2, r3, d9
 8008a70:	f7f8 f83c 	bl	8000aec <__aeabi_dcmplt>
 8008a74:	2800      	cmp	r0, #0
 8008a76:	f040 80b6 	bne.w	8008be6 <_dtoa_r+0x6e6>
 8008a7a:	9b02      	ldr	r3, [sp, #8]
 8008a7c:	429d      	cmp	r5, r3
 8008a7e:	f43f af7c 	beq.w	800897a <_dtoa_r+0x47a>
 8008a82:	4b31      	ldr	r3, [pc, #196]	; (8008b48 <_dtoa_r+0x648>)
 8008a84:	ec51 0b19 	vmov	r0, r1, d9
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f7f7 fdbd 	bl	8000608 <__aeabi_dmul>
 8008a8e:	4b2e      	ldr	r3, [pc, #184]	; (8008b48 <_dtoa_r+0x648>)
 8008a90:	ec41 0b19 	vmov	d9, r0, r1
 8008a94:	2200      	movs	r2, #0
 8008a96:	4640      	mov	r0, r8
 8008a98:	4649      	mov	r1, r9
 8008a9a:	f7f7 fdb5 	bl	8000608 <__aeabi_dmul>
 8008a9e:	4680      	mov	r8, r0
 8008aa0:	4689      	mov	r9, r1
 8008aa2:	e7c5      	b.n	8008a30 <_dtoa_r+0x530>
 8008aa4:	ec51 0b17 	vmov	r0, r1, d7
 8008aa8:	f7f7 fdae 	bl	8000608 <__aeabi_dmul>
 8008aac:	9b02      	ldr	r3, [sp, #8]
 8008aae:	9d00      	ldr	r5, [sp, #0]
 8008ab0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ab2:	ec41 0b19 	vmov	d9, r0, r1
 8008ab6:	4649      	mov	r1, r9
 8008ab8:	4640      	mov	r0, r8
 8008aba:	f7f8 f855 	bl	8000b68 <__aeabi_d2iz>
 8008abe:	4606      	mov	r6, r0
 8008ac0:	f7f7 fd38 	bl	8000534 <__aeabi_i2d>
 8008ac4:	3630      	adds	r6, #48	; 0x30
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	4640      	mov	r0, r8
 8008acc:	4649      	mov	r1, r9
 8008ace:	f7f7 fbe3 	bl	8000298 <__aeabi_dsub>
 8008ad2:	f805 6b01 	strb.w	r6, [r5], #1
 8008ad6:	9b02      	ldr	r3, [sp, #8]
 8008ad8:	429d      	cmp	r5, r3
 8008ada:	4680      	mov	r8, r0
 8008adc:	4689      	mov	r9, r1
 8008ade:	f04f 0200 	mov.w	r2, #0
 8008ae2:	d124      	bne.n	8008b2e <_dtoa_r+0x62e>
 8008ae4:	4b1b      	ldr	r3, [pc, #108]	; (8008b54 <_dtoa_r+0x654>)
 8008ae6:	ec51 0b19 	vmov	r0, r1, d9
 8008aea:	f7f7 fbd7 	bl	800029c <__adddf3>
 8008aee:	4602      	mov	r2, r0
 8008af0:	460b      	mov	r3, r1
 8008af2:	4640      	mov	r0, r8
 8008af4:	4649      	mov	r1, r9
 8008af6:	f7f8 f817 	bl	8000b28 <__aeabi_dcmpgt>
 8008afa:	2800      	cmp	r0, #0
 8008afc:	d173      	bne.n	8008be6 <_dtoa_r+0x6e6>
 8008afe:	ec53 2b19 	vmov	r2, r3, d9
 8008b02:	4914      	ldr	r1, [pc, #80]	; (8008b54 <_dtoa_r+0x654>)
 8008b04:	2000      	movs	r0, #0
 8008b06:	f7f7 fbc7 	bl	8000298 <__aeabi_dsub>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	4640      	mov	r0, r8
 8008b10:	4649      	mov	r1, r9
 8008b12:	f7f7 ffeb 	bl	8000aec <__aeabi_dcmplt>
 8008b16:	2800      	cmp	r0, #0
 8008b18:	f43f af2f 	beq.w	800897a <_dtoa_r+0x47a>
 8008b1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008b1e:	1e6b      	subs	r3, r5, #1
 8008b20:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b26:	2b30      	cmp	r3, #48	; 0x30
 8008b28:	d0f8      	beq.n	8008b1c <_dtoa_r+0x61c>
 8008b2a:	46bb      	mov	fp, r7
 8008b2c:	e04a      	b.n	8008bc4 <_dtoa_r+0x6c4>
 8008b2e:	4b06      	ldr	r3, [pc, #24]	; (8008b48 <_dtoa_r+0x648>)
 8008b30:	f7f7 fd6a 	bl	8000608 <__aeabi_dmul>
 8008b34:	4680      	mov	r8, r0
 8008b36:	4689      	mov	r9, r1
 8008b38:	e7bd      	b.n	8008ab6 <_dtoa_r+0x5b6>
 8008b3a:	bf00      	nop
 8008b3c:	0800a628 	.word	0x0800a628
 8008b40:	0800a600 	.word	0x0800a600
 8008b44:	3ff00000 	.word	0x3ff00000
 8008b48:	40240000 	.word	0x40240000
 8008b4c:	401c0000 	.word	0x401c0000
 8008b50:	40140000 	.word	0x40140000
 8008b54:	3fe00000 	.word	0x3fe00000
 8008b58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008b5c:	9d00      	ldr	r5, [sp, #0]
 8008b5e:	4642      	mov	r2, r8
 8008b60:	464b      	mov	r3, r9
 8008b62:	4630      	mov	r0, r6
 8008b64:	4639      	mov	r1, r7
 8008b66:	f7f7 fe79 	bl	800085c <__aeabi_ddiv>
 8008b6a:	f7f7 fffd 	bl	8000b68 <__aeabi_d2iz>
 8008b6e:	9001      	str	r0, [sp, #4]
 8008b70:	f7f7 fce0 	bl	8000534 <__aeabi_i2d>
 8008b74:	4642      	mov	r2, r8
 8008b76:	464b      	mov	r3, r9
 8008b78:	f7f7 fd46 	bl	8000608 <__aeabi_dmul>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4630      	mov	r0, r6
 8008b82:	4639      	mov	r1, r7
 8008b84:	f7f7 fb88 	bl	8000298 <__aeabi_dsub>
 8008b88:	9e01      	ldr	r6, [sp, #4]
 8008b8a:	9f04      	ldr	r7, [sp, #16]
 8008b8c:	3630      	adds	r6, #48	; 0x30
 8008b8e:	f805 6b01 	strb.w	r6, [r5], #1
 8008b92:	9e00      	ldr	r6, [sp, #0]
 8008b94:	1bae      	subs	r6, r5, r6
 8008b96:	42b7      	cmp	r7, r6
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	d134      	bne.n	8008c08 <_dtoa_r+0x708>
 8008b9e:	f7f7 fb7d 	bl	800029c <__adddf3>
 8008ba2:	4642      	mov	r2, r8
 8008ba4:	464b      	mov	r3, r9
 8008ba6:	4606      	mov	r6, r0
 8008ba8:	460f      	mov	r7, r1
 8008baa:	f7f7 ffbd 	bl	8000b28 <__aeabi_dcmpgt>
 8008bae:	b9c8      	cbnz	r0, 8008be4 <_dtoa_r+0x6e4>
 8008bb0:	4642      	mov	r2, r8
 8008bb2:	464b      	mov	r3, r9
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	4639      	mov	r1, r7
 8008bb8:	f7f7 ff8e 	bl	8000ad8 <__aeabi_dcmpeq>
 8008bbc:	b110      	cbz	r0, 8008bc4 <_dtoa_r+0x6c4>
 8008bbe:	9b01      	ldr	r3, [sp, #4]
 8008bc0:	07db      	lsls	r3, r3, #31
 8008bc2:	d40f      	bmi.n	8008be4 <_dtoa_r+0x6e4>
 8008bc4:	4651      	mov	r1, sl
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f000 fbcc 	bl	8009364 <_Bfree>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bd0:	702b      	strb	r3, [r5, #0]
 8008bd2:	f10b 0301 	add.w	r3, fp, #1
 8008bd6:	6013      	str	r3, [r2, #0]
 8008bd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	f43f ace2 	beq.w	80085a4 <_dtoa_r+0xa4>
 8008be0:	601d      	str	r5, [r3, #0]
 8008be2:	e4df      	b.n	80085a4 <_dtoa_r+0xa4>
 8008be4:	465f      	mov	r7, fp
 8008be6:	462b      	mov	r3, r5
 8008be8:	461d      	mov	r5, r3
 8008bea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008bee:	2a39      	cmp	r2, #57	; 0x39
 8008bf0:	d106      	bne.n	8008c00 <_dtoa_r+0x700>
 8008bf2:	9a00      	ldr	r2, [sp, #0]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d1f7      	bne.n	8008be8 <_dtoa_r+0x6e8>
 8008bf8:	9900      	ldr	r1, [sp, #0]
 8008bfa:	2230      	movs	r2, #48	; 0x30
 8008bfc:	3701      	adds	r7, #1
 8008bfe:	700a      	strb	r2, [r1, #0]
 8008c00:	781a      	ldrb	r2, [r3, #0]
 8008c02:	3201      	adds	r2, #1
 8008c04:	701a      	strb	r2, [r3, #0]
 8008c06:	e790      	b.n	8008b2a <_dtoa_r+0x62a>
 8008c08:	4ba3      	ldr	r3, [pc, #652]	; (8008e98 <_dtoa_r+0x998>)
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f7f7 fcfc 	bl	8000608 <__aeabi_dmul>
 8008c10:	2200      	movs	r2, #0
 8008c12:	2300      	movs	r3, #0
 8008c14:	4606      	mov	r6, r0
 8008c16:	460f      	mov	r7, r1
 8008c18:	f7f7 ff5e 	bl	8000ad8 <__aeabi_dcmpeq>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d09e      	beq.n	8008b5e <_dtoa_r+0x65e>
 8008c20:	e7d0      	b.n	8008bc4 <_dtoa_r+0x6c4>
 8008c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c24:	2a00      	cmp	r2, #0
 8008c26:	f000 80ca 	beq.w	8008dbe <_dtoa_r+0x8be>
 8008c2a:	9a07      	ldr	r2, [sp, #28]
 8008c2c:	2a01      	cmp	r2, #1
 8008c2e:	f300 80ad 	bgt.w	8008d8c <_dtoa_r+0x88c>
 8008c32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008c34:	2a00      	cmp	r2, #0
 8008c36:	f000 80a5 	beq.w	8008d84 <_dtoa_r+0x884>
 8008c3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008c3e:	9e08      	ldr	r6, [sp, #32]
 8008c40:	9d05      	ldr	r5, [sp, #20]
 8008c42:	9a05      	ldr	r2, [sp, #20]
 8008c44:	441a      	add	r2, r3
 8008c46:	9205      	str	r2, [sp, #20]
 8008c48:	9a06      	ldr	r2, [sp, #24]
 8008c4a:	2101      	movs	r1, #1
 8008c4c:	441a      	add	r2, r3
 8008c4e:	4620      	mov	r0, r4
 8008c50:	9206      	str	r2, [sp, #24]
 8008c52:	f000 fc3d 	bl	80094d0 <__i2b>
 8008c56:	4607      	mov	r7, r0
 8008c58:	b165      	cbz	r5, 8008c74 <_dtoa_r+0x774>
 8008c5a:	9b06      	ldr	r3, [sp, #24]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	dd09      	ble.n	8008c74 <_dtoa_r+0x774>
 8008c60:	42ab      	cmp	r3, r5
 8008c62:	9a05      	ldr	r2, [sp, #20]
 8008c64:	bfa8      	it	ge
 8008c66:	462b      	movge	r3, r5
 8008c68:	1ad2      	subs	r2, r2, r3
 8008c6a:	9205      	str	r2, [sp, #20]
 8008c6c:	9a06      	ldr	r2, [sp, #24]
 8008c6e:	1aed      	subs	r5, r5, r3
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	9306      	str	r3, [sp, #24]
 8008c74:	9b08      	ldr	r3, [sp, #32]
 8008c76:	b1f3      	cbz	r3, 8008cb6 <_dtoa_r+0x7b6>
 8008c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f000 80a3 	beq.w	8008dc6 <_dtoa_r+0x8c6>
 8008c80:	2e00      	cmp	r6, #0
 8008c82:	dd10      	ble.n	8008ca6 <_dtoa_r+0x7a6>
 8008c84:	4639      	mov	r1, r7
 8008c86:	4632      	mov	r2, r6
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f000 fce1 	bl	8009650 <__pow5mult>
 8008c8e:	4652      	mov	r2, sl
 8008c90:	4601      	mov	r1, r0
 8008c92:	4607      	mov	r7, r0
 8008c94:	4620      	mov	r0, r4
 8008c96:	f000 fc31 	bl	80094fc <__multiply>
 8008c9a:	4651      	mov	r1, sl
 8008c9c:	4680      	mov	r8, r0
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f000 fb60 	bl	8009364 <_Bfree>
 8008ca4:	46c2      	mov	sl, r8
 8008ca6:	9b08      	ldr	r3, [sp, #32]
 8008ca8:	1b9a      	subs	r2, r3, r6
 8008caa:	d004      	beq.n	8008cb6 <_dtoa_r+0x7b6>
 8008cac:	4651      	mov	r1, sl
 8008cae:	4620      	mov	r0, r4
 8008cb0:	f000 fcce 	bl	8009650 <__pow5mult>
 8008cb4:	4682      	mov	sl, r0
 8008cb6:	2101      	movs	r1, #1
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f000 fc09 	bl	80094d0 <__i2b>
 8008cbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	4606      	mov	r6, r0
 8008cc4:	f340 8081 	ble.w	8008dca <_dtoa_r+0x8ca>
 8008cc8:	461a      	mov	r2, r3
 8008cca:	4601      	mov	r1, r0
 8008ccc:	4620      	mov	r0, r4
 8008cce:	f000 fcbf 	bl	8009650 <__pow5mult>
 8008cd2:	9b07      	ldr	r3, [sp, #28]
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	4606      	mov	r6, r0
 8008cd8:	dd7a      	ble.n	8008dd0 <_dtoa_r+0x8d0>
 8008cda:	f04f 0800 	mov.w	r8, #0
 8008cde:	6933      	ldr	r3, [r6, #16]
 8008ce0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008ce4:	6918      	ldr	r0, [r3, #16]
 8008ce6:	f000 fba5 	bl	8009434 <__hi0bits>
 8008cea:	f1c0 0020 	rsb	r0, r0, #32
 8008cee:	9b06      	ldr	r3, [sp, #24]
 8008cf0:	4418      	add	r0, r3
 8008cf2:	f010 001f 	ands.w	r0, r0, #31
 8008cf6:	f000 8094 	beq.w	8008e22 <_dtoa_r+0x922>
 8008cfa:	f1c0 0320 	rsb	r3, r0, #32
 8008cfe:	2b04      	cmp	r3, #4
 8008d00:	f340 8085 	ble.w	8008e0e <_dtoa_r+0x90e>
 8008d04:	9b05      	ldr	r3, [sp, #20]
 8008d06:	f1c0 001c 	rsb	r0, r0, #28
 8008d0a:	4403      	add	r3, r0
 8008d0c:	9305      	str	r3, [sp, #20]
 8008d0e:	9b06      	ldr	r3, [sp, #24]
 8008d10:	4403      	add	r3, r0
 8008d12:	4405      	add	r5, r0
 8008d14:	9306      	str	r3, [sp, #24]
 8008d16:	9b05      	ldr	r3, [sp, #20]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	dd05      	ble.n	8008d28 <_dtoa_r+0x828>
 8008d1c:	4651      	mov	r1, sl
 8008d1e:	461a      	mov	r2, r3
 8008d20:	4620      	mov	r0, r4
 8008d22:	f000 fcef 	bl	8009704 <__lshift>
 8008d26:	4682      	mov	sl, r0
 8008d28:	9b06      	ldr	r3, [sp, #24]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	dd05      	ble.n	8008d3a <_dtoa_r+0x83a>
 8008d2e:	4631      	mov	r1, r6
 8008d30:	461a      	mov	r2, r3
 8008d32:	4620      	mov	r0, r4
 8008d34:	f000 fce6 	bl	8009704 <__lshift>
 8008d38:	4606      	mov	r6, r0
 8008d3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d072      	beq.n	8008e26 <_dtoa_r+0x926>
 8008d40:	4631      	mov	r1, r6
 8008d42:	4650      	mov	r0, sl
 8008d44:	f000 fd4a 	bl	80097dc <__mcmp>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	da6c      	bge.n	8008e26 <_dtoa_r+0x926>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	4651      	mov	r1, sl
 8008d50:	220a      	movs	r2, #10
 8008d52:	4620      	mov	r0, r4
 8008d54:	f000 fb28 	bl	80093a8 <__multadd>
 8008d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d5e:	4682      	mov	sl, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f000 81b0 	beq.w	80090c6 <_dtoa_r+0xbc6>
 8008d66:	2300      	movs	r3, #0
 8008d68:	4639      	mov	r1, r7
 8008d6a:	220a      	movs	r2, #10
 8008d6c:	4620      	mov	r0, r4
 8008d6e:	f000 fb1b 	bl	80093a8 <__multadd>
 8008d72:	9b01      	ldr	r3, [sp, #4]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	4607      	mov	r7, r0
 8008d78:	f300 8096 	bgt.w	8008ea8 <_dtoa_r+0x9a8>
 8008d7c:	9b07      	ldr	r3, [sp, #28]
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	dc59      	bgt.n	8008e36 <_dtoa_r+0x936>
 8008d82:	e091      	b.n	8008ea8 <_dtoa_r+0x9a8>
 8008d84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008d8a:	e758      	b.n	8008c3e <_dtoa_r+0x73e>
 8008d8c:	9b04      	ldr	r3, [sp, #16]
 8008d8e:	1e5e      	subs	r6, r3, #1
 8008d90:	9b08      	ldr	r3, [sp, #32]
 8008d92:	42b3      	cmp	r3, r6
 8008d94:	bfbf      	itttt	lt
 8008d96:	9b08      	ldrlt	r3, [sp, #32]
 8008d98:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008d9a:	9608      	strlt	r6, [sp, #32]
 8008d9c:	1af3      	sublt	r3, r6, r3
 8008d9e:	bfb4      	ite	lt
 8008da0:	18d2      	addlt	r2, r2, r3
 8008da2:	1b9e      	subge	r6, r3, r6
 8008da4:	9b04      	ldr	r3, [sp, #16]
 8008da6:	bfbc      	itt	lt
 8008da8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008daa:	2600      	movlt	r6, #0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	bfb7      	itett	lt
 8008db0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008db4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008db8:	1a9d      	sublt	r5, r3, r2
 8008dba:	2300      	movlt	r3, #0
 8008dbc:	e741      	b.n	8008c42 <_dtoa_r+0x742>
 8008dbe:	9e08      	ldr	r6, [sp, #32]
 8008dc0:	9d05      	ldr	r5, [sp, #20]
 8008dc2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008dc4:	e748      	b.n	8008c58 <_dtoa_r+0x758>
 8008dc6:	9a08      	ldr	r2, [sp, #32]
 8008dc8:	e770      	b.n	8008cac <_dtoa_r+0x7ac>
 8008dca:	9b07      	ldr	r3, [sp, #28]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	dc19      	bgt.n	8008e04 <_dtoa_r+0x904>
 8008dd0:	9b02      	ldr	r3, [sp, #8]
 8008dd2:	b9bb      	cbnz	r3, 8008e04 <_dtoa_r+0x904>
 8008dd4:	9b03      	ldr	r3, [sp, #12]
 8008dd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dda:	b99b      	cbnz	r3, 8008e04 <_dtoa_r+0x904>
 8008ddc:	9b03      	ldr	r3, [sp, #12]
 8008dde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008de2:	0d1b      	lsrs	r3, r3, #20
 8008de4:	051b      	lsls	r3, r3, #20
 8008de6:	b183      	cbz	r3, 8008e0a <_dtoa_r+0x90a>
 8008de8:	9b05      	ldr	r3, [sp, #20]
 8008dea:	3301      	adds	r3, #1
 8008dec:	9305      	str	r3, [sp, #20]
 8008dee:	9b06      	ldr	r3, [sp, #24]
 8008df0:	3301      	adds	r3, #1
 8008df2:	9306      	str	r3, [sp, #24]
 8008df4:	f04f 0801 	mov.w	r8, #1
 8008df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	f47f af6f 	bne.w	8008cde <_dtoa_r+0x7de>
 8008e00:	2001      	movs	r0, #1
 8008e02:	e774      	b.n	8008cee <_dtoa_r+0x7ee>
 8008e04:	f04f 0800 	mov.w	r8, #0
 8008e08:	e7f6      	b.n	8008df8 <_dtoa_r+0x8f8>
 8008e0a:	4698      	mov	r8, r3
 8008e0c:	e7f4      	b.n	8008df8 <_dtoa_r+0x8f8>
 8008e0e:	d082      	beq.n	8008d16 <_dtoa_r+0x816>
 8008e10:	9a05      	ldr	r2, [sp, #20]
 8008e12:	331c      	adds	r3, #28
 8008e14:	441a      	add	r2, r3
 8008e16:	9205      	str	r2, [sp, #20]
 8008e18:	9a06      	ldr	r2, [sp, #24]
 8008e1a:	441a      	add	r2, r3
 8008e1c:	441d      	add	r5, r3
 8008e1e:	9206      	str	r2, [sp, #24]
 8008e20:	e779      	b.n	8008d16 <_dtoa_r+0x816>
 8008e22:	4603      	mov	r3, r0
 8008e24:	e7f4      	b.n	8008e10 <_dtoa_r+0x910>
 8008e26:	9b04      	ldr	r3, [sp, #16]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	dc37      	bgt.n	8008e9c <_dtoa_r+0x99c>
 8008e2c:	9b07      	ldr	r3, [sp, #28]
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	dd34      	ble.n	8008e9c <_dtoa_r+0x99c>
 8008e32:	9b04      	ldr	r3, [sp, #16]
 8008e34:	9301      	str	r3, [sp, #4]
 8008e36:	9b01      	ldr	r3, [sp, #4]
 8008e38:	b963      	cbnz	r3, 8008e54 <_dtoa_r+0x954>
 8008e3a:	4631      	mov	r1, r6
 8008e3c:	2205      	movs	r2, #5
 8008e3e:	4620      	mov	r0, r4
 8008e40:	f000 fab2 	bl	80093a8 <__multadd>
 8008e44:	4601      	mov	r1, r0
 8008e46:	4606      	mov	r6, r0
 8008e48:	4650      	mov	r0, sl
 8008e4a:	f000 fcc7 	bl	80097dc <__mcmp>
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	f73f adbb 	bgt.w	80089ca <_dtoa_r+0x4ca>
 8008e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e56:	9d00      	ldr	r5, [sp, #0]
 8008e58:	ea6f 0b03 	mvn.w	fp, r3
 8008e5c:	f04f 0800 	mov.w	r8, #0
 8008e60:	4631      	mov	r1, r6
 8008e62:	4620      	mov	r0, r4
 8008e64:	f000 fa7e 	bl	8009364 <_Bfree>
 8008e68:	2f00      	cmp	r7, #0
 8008e6a:	f43f aeab 	beq.w	8008bc4 <_dtoa_r+0x6c4>
 8008e6e:	f1b8 0f00 	cmp.w	r8, #0
 8008e72:	d005      	beq.n	8008e80 <_dtoa_r+0x980>
 8008e74:	45b8      	cmp	r8, r7
 8008e76:	d003      	beq.n	8008e80 <_dtoa_r+0x980>
 8008e78:	4641      	mov	r1, r8
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f000 fa72 	bl	8009364 <_Bfree>
 8008e80:	4639      	mov	r1, r7
 8008e82:	4620      	mov	r0, r4
 8008e84:	f000 fa6e 	bl	8009364 <_Bfree>
 8008e88:	e69c      	b.n	8008bc4 <_dtoa_r+0x6c4>
 8008e8a:	2600      	movs	r6, #0
 8008e8c:	4637      	mov	r7, r6
 8008e8e:	e7e1      	b.n	8008e54 <_dtoa_r+0x954>
 8008e90:	46bb      	mov	fp, r7
 8008e92:	4637      	mov	r7, r6
 8008e94:	e599      	b.n	80089ca <_dtoa_r+0x4ca>
 8008e96:	bf00      	nop
 8008e98:	40240000 	.word	0x40240000
 8008e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	f000 80c8 	beq.w	8009034 <_dtoa_r+0xb34>
 8008ea4:	9b04      	ldr	r3, [sp, #16]
 8008ea6:	9301      	str	r3, [sp, #4]
 8008ea8:	2d00      	cmp	r5, #0
 8008eaa:	dd05      	ble.n	8008eb8 <_dtoa_r+0x9b8>
 8008eac:	4639      	mov	r1, r7
 8008eae:	462a      	mov	r2, r5
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	f000 fc27 	bl	8009704 <__lshift>
 8008eb6:	4607      	mov	r7, r0
 8008eb8:	f1b8 0f00 	cmp.w	r8, #0
 8008ebc:	d05b      	beq.n	8008f76 <_dtoa_r+0xa76>
 8008ebe:	6879      	ldr	r1, [r7, #4]
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f000 fa0f 	bl	80092e4 <_Balloc>
 8008ec6:	4605      	mov	r5, r0
 8008ec8:	b928      	cbnz	r0, 8008ed6 <_dtoa_r+0x9d6>
 8008eca:	4b83      	ldr	r3, [pc, #524]	; (80090d8 <_dtoa_r+0xbd8>)
 8008ecc:	4602      	mov	r2, r0
 8008ece:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008ed2:	f7ff bb2e 	b.w	8008532 <_dtoa_r+0x32>
 8008ed6:	693a      	ldr	r2, [r7, #16]
 8008ed8:	3202      	adds	r2, #2
 8008eda:	0092      	lsls	r2, r2, #2
 8008edc:	f107 010c 	add.w	r1, r7, #12
 8008ee0:	300c      	adds	r0, #12
 8008ee2:	f7ff fa74 	bl	80083ce <memcpy>
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	4629      	mov	r1, r5
 8008eea:	4620      	mov	r0, r4
 8008eec:	f000 fc0a 	bl	8009704 <__lshift>
 8008ef0:	9b00      	ldr	r3, [sp, #0]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	9304      	str	r3, [sp, #16]
 8008ef6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008efa:	4413      	add	r3, r2
 8008efc:	9308      	str	r3, [sp, #32]
 8008efe:	9b02      	ldr	r3, [sp, #8]
 8008f00:	f003 0301 	and.w	r3, r3, #1
 8008f04:	46b8      	mov	r8, r7
 8008f06:	9306      	str	r3, [sp, #24]
 8008f08:	4607      	mov	r7, r0
 8008f0a:	9b04      	ldr	r3, [sp, #16]
 8008f0c:	4631      	mov	r1, r6
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	4650      	mov	r0, sl
 8008f12:	9301      	str	r3, [sp, #4]
 8008f14:	f7ff fa69 	bl	80083ea <quorem>
 8008f18:	4641      	mov	r1, r8
 8008f1a:	9002      	str	r0, [sp, #8]
 8008f1c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008f20:	4650      	mov	r0, sl
 8008f22:	f000 fc5b 	bl	80097dc <__mcmp>
 8008f26:	463a      	mov	r2, r7
 8008f28:	9005      	str	r0, [sp, #20]
 8008f2a:	4631      	mov	r1, r6
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	f000 fc71 	bl	8009814 <__mdiff>
 8008f32:	68c2      	ldr	r2, [r0, #12]
 8008f34:	4605      	mov	r5, r0
 8008f36:	bb02      	cbnz	r2, 8008f7a <_dtoa_r+0xa7a>
 8008f38:	4601      	mov	r1, r0
 8008f3a:	4650      	mov	r0, sl
 8008f3c:	f000 fc4e 	bl	80097dc <__mcmp>
 8008f40:	4602      	mov	r2, r0
 8008f42:	4629      	mov	r1, r5
 8008f44:	4620      	mov	r0, r4
 8008f46:	9209      	str	r2, [sp, #36]	; 0x24
 8008f48:	f000 fa0c 	bl	8009364 <_Bfree>
 8008f4c:	9b07      	ldr	r3, [sp, #28]
 8008f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f50:	9d04      	ldr	r5, [sp, #16]
 8008f52:	ea43 0102 	orr.w	r1, r3, r2
 8008f56:	9b06      	ldr	r3, [sp, #24]
 8008f58:	4319      	orrs	r1, r3
 8008f5a:	d110      	bne.n	8008f7e <_dtoa_r+0xa7e>
 8008f5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008f60:	d029      	beq.n	8008fb6 <_dtoa_r+0xab6>
 8008f62:	9b05      	ldr	r3, [sp, #20]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	dd02      	ble.n	8008f6e <_dtoa_r+0xa6e>
 8008f68:	9b02      	ldr	r3, [sp, #8]
 8008f6a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008f6e:	9b01      	ldr	r3, [sp, #4]
 8008f70:	f883 9000 	strb.w	r9, [r3]
 8008f74:	e774      	b.n	8008e60 <_dtoa_r+0x960>
 8008f76:	4638      	mov	r0, r7
 8008f78:	e7ba      	b.n	8008ef0 <_dtoa_r+0x9f0>
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	e7e1      	b.n	8008f42 <_dtoa_r+0xa42>
 8008f7e:	9b05      	ldr	r3, [sp, #20]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	db04      	blt.n	8008f8e <_dtoa_r+0xa8e>
 8008f84:	9907      	ldr	r1, [sp, #28]
 8008f86:	430b      	orrs	r3, r1
 8008f88:	9906      	ldr	r1, [sp, #24]
 8008f8a:	430b      	orrs	r3, r1
 8008f8c:	d120      	bne.n	8008fd0 <_dtoa_r+0xad0>
 8008f8e:	2a00      	cmp	r2, #0
 8008f90:	dded      	ble.n	8008f6e <_dtoa_r+0xa6e>
 8008f92:	4651      	mov	r1, sl
 8008f94:	2201      	movs	r2, #1
 8008f96:	4620      	mov	r0, r4
 8008f98:	f000 fbb4 	bl	8009704 <__lshift>
 8008f9c:	4631      	mov	r1, r6
 8008f9e:	4682      	mov	sl, r0
 8008fa0:	f000 fc1c 	bl	80097dc <__mcmp>
 8008fa4:	2800      	cmp	r0, #0
 8008fa6:	dc03      	bgt.n	8008fb0 <_dtoa_r+0xab0>
 8008fa8:	d1e1      	bne.n	8008f6e <_dtoa_r+0xa6e>
 8008faa:	f019 0f01 	tst.w	r9, #1
 8008fae:	d0de      	beq.n	8008f6e <_dtoa_r+0xa6e>
 8008fb0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008fb4:	d1d8      	bne.n	8008f68 <_dtoa_r+0xa68>
 8008fb6:	9a01      	ldr	r2, [sp, #4]
 8008fb8:	2339      	movs	r3, #57	; 0x39
 8008fba:	7013      	strb	r3, [r2, #0]
 8008fbc:	462b      	mov	r3, r5
 8008fbe:	461d      	mov	r5, r3
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008fc6:	2a39      	cmp	r2, #57	; 0x39
 8008fc8:	d06c      	beq.n	80090a4 <_dtoa_r+0xba4>
 8008fca:	3201      	adds	r2, #1
 8008fcc:	701a      	strb	r2, [r3, #0]
 8008fce:	e747      	b.n	8008e60 <_dtoa_r+0x960>
 8008fd0:	2a00      	cmp	r2, #0
 8008fd2:	dd07      	ble.n	8008fe4 <_dtoa_r+0xae4>
 8008fd4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008fd8:	d0ed      	beq.n	8008fb6 <_dtoa_r+0xab6>
 8008fda:	9a01      	ldr	r2, [sp, #4]
 8008fdc:	f109 0301 	add.w	r3, r9, #1
 8008fe0:	7013      	strb	r3, [r2, #0]
 8008fe2:	e73d      	b.n	8008e60 <_dtoa_r+0x960>
 8008fe4:	9b04      	ldr	r3, [sp, #16]
 8008fe6:	9a08      	ldr	r2, [sp, #32]
 8008fe8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d043      	beq.n	8009078 <_dtoa_r+0xb78>
 8008ff0:	4651      	mov	r1, sl
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	220a      	movs	r2, #10
 8008ff6:	4620      	mov	r0, r4
 8008ff8:	f000 f9d6 	bl	80093a8 <__multadd>
 8008ffc:	45b8      	cmp	r8, r7
 8008ffe:	4682      	mov	sl, r0
 8009000:	f04f 0300 	mov.w	r3, #0
 8009004:	f04f 020a 	mov.w	r2, #10
 8009008:	4641      	mov	r1, r8
 800900a:	4620      	mov	r0, r4
 800900c:	d107      	bne.n	800901e <_dtoa_r+0xb1e>
 800900e:	f000 f9cb 	bl	80093a8 <__multadd>
 8009012:	4680      	mov	r8, r0
 8009014:	4607      	mov	r7, r0
 8009016:	9b04      	ldr	r3, [sp, #16]
 8009018:	3301      	adds	r3, #1
 800901a:	9304      	str	r3, [sp, #16]
 800901c:	e775      	b.n	8008f0a <_dtoa_r+0xa0a>
 800901e:	f000 f9c3 	bl	80093a8 <__multadd>
 8009022:	4639      	mov	r1, r7
 8009024:	4680      	mov	r8, r0
 8009026:	2300      	movs	r3, #0
 8009028:	220a      	movs	r2, #10
 800902a:	4620      	mov	r0, r4
 800902c:	f000 f9bc 	bl	80093a8 <__multadd>
 8009030:	4607      	mov	r7, r0
 8009032:	e7f0      	b.n	8009016 <_dtoa_r+0xb16>
 8009034:	9b04      	ldr	r3, [sp, #16]
 8009036:	9301      	str	r3, [sp, #4]
 8009038:	9d00      	ldr	r5, [sp, #0]
 800903a:	4631      	mov	r1, r6
 800903c:	4650      	mov	r0, sl
 800903e:	f7ff f9d4 	bl	80083ea <quorem>
 8009042:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009046:	9b00      	ldr	r3, [sp, #0]
 8009048:	f805 9b01 	strb.w	r9, [r5], #1
 800904c:	1aea      	subs	r2, r5, r3
 800904e:	9b01      	ldr	r3, [sp, #4]
 8009050:	4293      	cmp	r3, r2
 8009052:	dd07      	ble.n	8009064 <_dtoa_r+0xb64>
 8009054:	4651      	mov	r1, sl
 8009056:	2300      	movs	r3, #0
 8009058:	220a      	movs	r2, #10
 800905a:	4620      	mov	r0, r4
 800905c:	f000 f9a4 	bl	80093a8 <__multadd>
 8009060:	4682      	mov	sl, r0
 8009062:	e7ea      	b.n	800903a <_dtoa_r+0xb3a>
 8009064:	9b01      	ldr	r3, [sp, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	bfc8      	it	gt
 800906a:	461d      	movgt	r5, r3
 800906c:	9b00      	ldr	r3, [sp, #0]
 800906e:	bfd8      	it	le
 8009070:	2501      	movle	r5, #1
 8009072:	441d      	add	r5, r3
 8009074:	f04f 0800 	mov.w	r8, #0
 8009078:	4651      	mov	r1, sl
 800907a:	2201      	movs	r2, #1
 800907c:	4620      	mov	r0, r4
 800907e:	f000 fb41 	bl	8009704 <__lshift>
 8009082:	4631      	mov	r1, r6
 8009084:	4682      	mov	sl, r0
 8009086:	f000 fba9 	bl	80097dc <__mcmp>
 800908a:	2800      	cmp	r0, #0
 800908c:	dc96      	bgt.n	8008fbc <_dtoa_r+0xabc>
 800908e:	d102      	bne.n	8009096 <_dtoa_r+0xb96>
 8009090:	f019 0f01 	tst.w	r9, #1
 8009094:	d192      	bne.n	8008fbc <_dtoa_r+0xabc>
 8009096:	462b      	mov	r3, r5
 8009098:	461d      	mov	r5, r3
 800909a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800909e:	2a30      	cmp	r2, #48	; 0x30
 80090a0:	d0fa      	beq.n	8009098 <_dtoa_r+0xb98>
 80090a2:	e6dd      	b.n	8008e60 <_dtoa_r+0x960>
 80090a4:	9a00      	ldr	r2, [sp, #0]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d189      	bne.n	8008fbe <_dtoa_r+0xabe>
 80090aa:	f10b 0b01 	add.w	fp, fp, #1
 80090ae:	2331      	movs	r3, #49	; 0x31
 80090b0:	e796      	b.n	8008fe0 <_dtoa_r+0xae0>
 80090b2:	4b0a      	ldr	r3, [pc, #40]	; (80090dc <_dtoa_r+0xbdc>)
 80090b4:	f7ff ba99 	b.w	80085ea <_dtoa_r+0xea>
 80090b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f47f aa6d 	bne.w	800859a <_dtoa_r+0x9a>
 80090c0:	4b07      	ldr	r3, [pc, #28]	; (80090e0 <_dtoa_r+0xbe0>)
 80090c2:	f7ff ba92 	b.w	80085ea <_dtoa_r+0xea>
 80090c6:	9b01      	ldr	r3, [sp, #4]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	dcb5      	bgt.n	8009038 <_dtoa_r+0xb38>
 80090cc:	9b07      	ldr	r3, [sp, #28]
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	f73f aeb1 	bgt.w	8008e36 <_dtoa_r+0x936>
 80090d4:	e7b0      	b.n	8009038 <_dtoa_r+0xb38>
 80090d6:	bf00      	nop
 80090d8:	0800a590 	.word	0x0800a590
 80090dc:	0800a4f0 	.word	0x0800a4f0
 80090e0:	0800a514 	.word	0x0800a514

080090e4 <_free_r>:
 80090e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80090e6:	2900      	cmp	r1, #0
 80090e8:	d044      	beq.n	8009174 <_free_r+0x90>
 80090ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090ee:	9001      	str	r0, [sp, #4]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f1a1 0404 	sub.w	r4, r1, #4
 80090f6:	bfb8      	it	lt
 80090f8:	18e4      	addlt	r4, r4, r3
 80090fa:	f000 f8e7 	bl	80092cc <__malloc_lock>
 80090fe:	4a1e      	ldr	r2, [pc, #120]	; (8009178 <_free_r+0x94>)
 8009100:	9801      	ldr	r0, [sp, #4]
 8009102:	6813      	ldr	r3, [r2, #0]
 8009104:	b933      	cbnz	r3, 8009114 <_free_r+0x30>
 8009106:	6063      	str	r3, [r4, #4]
 8009108:	6014      	str	r4, [r2, #0]
 800910a:	b003      	add	sp, #12
 800910c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009110:	f000 b8e2 	b.w	80092d8 <__malloc_unlock>
 8009114:	42a3      	cmp	r3, r4
 8009116:	d908      	bls.n	800912a <_free_r+0x46>
 8009118:	6825      	ldr	r5, [r4, #0]
 800911a:	1961      	adds	r1, r4, r5
 800911c:	428b      	cmp	r3, r1
 800911e:	bf01      	itttt	eq
 8009120:	6819      	ldreq	r1, [r3, #0]
 8009122:	685b      	ldreq	r3, [r3, #4]
 8009124:	1949      	addeq	r1, r1, r5
 8009126:	6021      	streq	r1, [r4, #0]
 8009128:	e7ed      	b.n	8009106 <_free_r+0x22>
 800912a:	461a      	mov	r2, r3
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	b10b      	cbz	r3, 8009134 <_free_r+0x50>
 8009130:	42a3      	cmp	r3, r4
 8009132:	d9fa      	bls.n	800912a <_free_r+0x46>
 8009134:	6811      	ldr	r1, [r2, #0]
 8009136:	1855      	adds	r5, r2, r1
 8009138:	42a5      	cmp	r5, r4
 800913a:	d10b      	bne.n	8009154 <_free_r+0x70>
 800913c:	6824      	ldr	r4, [r4, #0]
 800913e:	4421      	add	r1, r4
 8009140:	1854      	adds	r4, r2, r1
 8009142:	42a3      	cmp	r3, r4
 8009144:	6011      	str	r1, [r2, #0]
 8009146:	d1e0      	bne.n	800910a <_free_r+0x26>
 8009148:	681c      	ldr	r4, [r3, #0]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	6053      	str	r3, [r2, #4]
 800914e:	440c      	add	r4, r1
 8009150:	6014      	str	r4, [r2, #0]
 8009152:	e7da      	b.n	800910a <_free_r+0x26>
 8009154:	d902      	bls.n	800915c <_free_r+0x78>
 8009156:	230c      	movs	r3, #12
 8009158:	6003      	str	r3, [r0, #0]
 800915a:	e7d6      	b.n	800910a <_free_r+0x26>
 800915c:	6825      	ldr	r5, [r4, #0]
 800915e:	1961      	adds	r1, r4, r5
 8009160:	428b      	cmp	r3, r1
 8009162:	bf04      	itt	eq
 8009164:	6819      	ldreq	r1, [r3, #0]
 8009166:	685b      	ldreq	r3, [r3, #4]
 8009168:	6063      	str	r3, [r4, #4]
 800916a:	bf04      	itt	eq
 800916c:	1949      	addeq	r1, r1, r5
 800916e:	6021      	streq	r1, [r4, #0]
 8009170:	6054      	str	r4, [r2, #4]
 8009172:	e7ca      	b.n	800910a <_free_r+0x26>
 8009174:	b003      	add	sp, #12
 8009176:	bd30      	pop	{r4, r5, pc}
 8009178:	2000085c 	.word	0x2000085c

0800917c <malloc>:
 800917c:	4b02      	ldr	r3, [pc, #8]	; (8009188 <malloc+0xc>)
 800917e:	4601      	mov	r1, r0
 8009180:	6818      	ldr	r0, [r3, #0]
 8009182:	f000 b823 	b.w	80091cc <_malloc_r>
 8009186:	bf00      	nop
 8009188:	20000084 	.word	0x20000084

0800918c <sbrk_aligned>:
 800918c:	b570      	push	{r4, r5, r6, lr}
 800918e:	4e0e      	ldr	r6, [pc, #56]	; (80091c8 <sbrk_aligned+0x3c>)
 8009190:	460c      	mov	r4, r1
 8009192:	6831      	ldr	r1, [r6, #0]
 8009194:	4605      	mov	r5, r0
 8009196:	b911      	cbnz	r1, 800919e <sbrk_aligned+0x12>
 8009198:	f000 ff8e 	bl	800a0b8 <_sbrk_r>
 800919c:	6030      	str	r0, [r6, #0]
 800919e:	4621      	mov	r1, r4
 80091a0:	4628      	mov	r0, r5
 80091a2:	f000 ff89 	bl	800a0b8 <_sbrk_r>
 80091a6:	1c43      	adds	r3, r0, #1
 80091a8:	d00a      	beq.n	80091c0 <sbrk_aligned+0x34>
 80091aa:	1cc4      	adds	r4, r0, #3
 80091ac:	f024 0403 	bic.w	r4, r4, #3
 80091b0:	42a0      	cmp	r0, r4
 80091b2:	d007      	beq.n	80091c4 <sbrk_aligned+0x38>
 80091b4:	1a21      	subs	r1, r4, r0
 80091b6:	4628      	mov	r0, r5
 80091b8:	f000 ff7e 	bl	800a0b8 <_sbrk_r>
 80091bc:	3001      	adds	r0, #1
 80091be:	d101      	bne.n	80091c4 <sbrk_aligned+0x38>
 80091c0:	f04f 34ff 	mov.w	r4, #4294967295
 80091c4:	4620      	mov	r0, r4
 80091c6:	bd70      	pop	{r4, r5, r6, pc}
 80091c8:	20000860 	.word	0x20000860

080091cc <_malloc_r>:
 80091cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091d0:	1ccd      	adds	r5, r1, #3
 80091d2:	f025 0503 	bic.w	r5, r5, #3
 80091d6:	3508      	adds	r5, #8
 80091d8:	2d0c      	cmp	r5, #12
 80091da:	bf38      	it	cc
 80091dc:	250c      	movcc	r5, #12
 80091de:	2d00      	cmp	r5, #0
 80091e0:	4607      	mov	r7, r0
 80091e2:	db01      	blt.n	80091e8 <_malloc_r+0x1c>
 80091e4:	42a9      	cmp	r1, r5
 80091e6:	d905      	bls.n	80091f4 <_malloc_r+0x28>
 80091e8:	230c      	movs	r3, #12
 80091ea:	603b      	str	r3, [r7, #0]
 80091ec:	2600      	movs	r6, #0
 80091ee:	4630      	mov	r0, r6
 80091f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80092c8 <_malloc_r+0xfc>
 80091f8:	f000 f868 	bl	80092cc <__malloc_lock>
 80091fc:	f8d8 3000 	ldr.w	r3, [r8]
 8009200:	461c      	mov	r4, r3
 8009202:	bb5c      	cbnz	r4, 800925c <_malloc_r+0x90>
 8009204:	4629      	mov	r1, r5
 8009206:	4638      	mov	r0, r7
 8009208:	f7ff ffc0 	bl	800918c <sbrk_aligned>
 800920c:	1c43      	adds	r3, r0, #1
 800920e:	4604      	mov	r4, r0
 8009210:	d155      	bne.n	80092be <_malloc_r+0xf2>
 8009212:	f8d8 4000 	ldr.w	r4, [r8]
 8009216:	4626      	mov	r6, r4
 8009218:	2e00      	cmp	r6, #0
 800921a:	d145      	bne.n	80092a8 <_malloc_r+0xdc>
 800921c:	2c00      	cmp	r4, #0
 800921e:	d048      	beq.n	80092b2 <_malloc_r+0xe6>
 8009220:	6823      	ldr	r3, [r4, #0]
 8009222:	4631      	mov	r1, r6
 8009224:	4638      	mov	r0, r7
 8009226:	eb04 0903 	add.w	r9, r4, r3
 800922a:	f000 ff45 	bl	800a0b8 <_sbrk_r>
 800922e:	4581      	cmp	r9, r0
 8009230:	d13f      	bne.n	80092b2 <_malloc_r+0xe6>
 8009232:	6821      	ldr	r1, [r4, #0]
 8009234:	1a6d      	subs	r5, r5, r1
 8009236:	4629      	mov	r1, r5
 8009238:	4638      	mov	r0, r7
 800923a:	f7ff ffa7 	bl	800918c <sbrk_aligned>
 800923e:	3001      	adds	r0, #1
 8009240:	d037      	beq.n	80092b2 <_malloc_r+0xe6>
 8009242:	6823      	ldr	r3, [r4, #0]
 8009244:	442b      	add	r3, r5
 8009246:	6023      	str	r3, [r4, #0]
 8009248:	f8d8 3000 	ldr.w	r3, [r8]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d038      	beq.n	80092c2 <_malloc_r+0xf6>
 8009250:	685a      	ldr	r2, [r3, #4]
 8009252:	42a2      	cmp	r2, r4
 8009254:	d12b      	bne.n	80092ae <_malloc_r+0xe2>
 8009256:	2200      	movs	r2, #0
 8009258:	605a      	str	r2, [r3, #4]
 800925a:	e00f      	b.n	800927c <_malloc_r+0xb0>
 800925c:	6822      	ldr	r2, [r4, #0]
 800925e:	1b52      	subs	r2, r2, r5
 8009260:	d41f      	bmi.n	80092a2 <_malloc_r+0xd6>
 8009262:	2a0b      	cmp	r2, #11
 8009264:	d917      	bls.n	8009296 <_malloc_r+0xca>
 8009266:	1961      	adds	r1, r4, r5
 8009268:	42a3      	cmp	r3, r4
 800926a:	6025      	str	r5, [r4, #0]
 800926c:	bf18      	it	ne
 800926e:	6059      	strne	r1, [r3, #4]
 8009270:	6863      	ldr	r3, [r4, #4]
 8009272:	bf08      	it	eq
 8009274:	f8c8 1000 	streq.w	r1, [r8]
 8009278:	5162      	str	r2, [r4, r5]
 800927a:	604b      	str	r3, [r1, #4]
 800927c:	4638      	mov	r0, r7
 800927e:	f104 060b 	add.w	r6, r4, #11
 8009282:	f000 f829 	bl	80092d8 <__malloc_unlock>
 8009286:	f026 0607 	bic.w	r6, r6, #7
 800928a:	1d23      	adds	r3, r4, #4
 800928c:	1af2      	subs	r2, r6, r3
 800928e:	d0ae      	beq.n	80091ee <_malloc_r+0x22>
 8009290:	1b9b      	subs	r3, r3, r6
 8009292:	50a3      	str	r3, [r4, r2]
 8009294:	e7ab      	b.n	80091ee <_malloc_r+0x22>
 8009296:	42a3      	cmp	r3, r4
 8009298:	6862      	ldr	r2, [r4, #4]
 800929a:	d1dd      	bne.n	8009258 <_malloc_r+0x8c>
 800929c:	f8c8 2000 	str.w	r2, [r8]
 80092a0:	e7ec      	b.n	800927c <_malloc_r+0xb0>
 80092a2:	4623      	mov	r3, r4
 80092a4:	6864      	ldr	r4, [r4, #4]
 80092a6:	e7ac      	b.n	8009202 <_malloc_r+0x36>
 80092a8:	4634      	mov	r4, r6
 80092aa:	6876      	ldr	r6, [r6, #4]
 80092ac:	e7b4      	b.n	8009218 <_malloc_r+0x4c>
 80092ae:	4613      	mov	r3, r2
 80092b0:	e7cc      	b.n	800924c <_malloc_r+0x80>
 80092b2:	230c      	movs	r3, #12
 80092b4:	603b      	str	r3, [r7, #0]
 80092b6:	4638      	mov	r0, r7
 80092b8:	f000 f80e 	bl	80092d8 <__malloc_unlock>
 80092bc:	e797      	b.n	80091ee <_malloc_r+0x22>
 80092be:	6025      	str	r5, [r4, #0]
 80092c0:	e7dc      	b.n	800927c <_malloc_r+0xb0>
 80092c2:	605b      	str	r3, [r3, #4]
 80092c4:	deff      	udf	#255	; 0xff
 80092c6:	bf00      	nop
 80092c8:	2000085c 	.word	0x2000085c

080092cc <__malloc_lock>:
 80092cc:	4801      	ldr	r0, [pc, #4]	; (80092d4 <__malloc_lock+0x8>)
 80092ce:	f7ff b87c 	b.w	80083ca <__retarget_lock_acquire_recursive>
 80092d2:	bf00      	nop
 80092d4:	20000858 	.word	0x20000858

080092d8 <__malloc_unlock>:
 80092d8:	4801      	ldr	r0, [pc, #4]	; (80092e0 <__malloc_unlock+0x8>)
 80092da:	f7ff b877 	b.w	80083cc <__retarget_lock_release_recursive>
 80092de:	bf00      	nop
 80092e0:	20000858 	.word	0x20000858

080092e4 <_Balloc>:
 80092e4:	b570      	push	{r4, r5, r6, lr}
 80092e6:	69c6      	ldr	r6, [r0, #28]
 80092e8:	4604      	mov	r4, r0
 80092ea:	460d      	mov	r5, r1
 80092ec:	b976      	cbnz	r6, 800930c <_Balloc+0x28>
 80092ee:	2010      	movs	r0, #16
 80092f0:	f7ff ff44 	bl	800917c <malloc>
 80092f4:	4602      	mov	r2, r0
 80092f6:	61e0      	str	r0, [r4, #28]
 80092f8:	b920      	cbnz	r0, 8009304 <_Balloc+0x20>
 80092fa:	4b18      	ldr	r3, [pc, #96]	; (800935c <_Balloc+0x78>)
 80092fc:	4818      	ldr	r0, [pc, #96]	; (8009360 <_Balloc+0x7c>)
 80092fe:	216b      	movs	r1, #107	; 0x6b
 8009300:	f000 feea 	bl	800a0d8 <__assert_func>
 8009304:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009308:	6006      	str	r6, [r0, #0]
 800930a:	60c6      	str	r6, [r0, #12]
 800930c:	69e6      	ldr	r6, [r4, #28]
 800930e:	68f3      	ldr	r3, [r6, #12]
 8009310:	b183      	cbz	r3, 8009334 <_Balloc+0x50>
 8009312:	69e3      	ldr	r3, [r4, #28]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800931a:	b9b8      	cbnz	r0, 800934c <_Balloc+0x68>
 800931c:	2101      	movs	r1, #1
 800931e:	fa01 f605 	lsl.w	r6, r1, r5
 8009322:	1d72      	adds	r2, r6, #5
 8009324:	0092      	lsls	r2, r2, #2
 8009326:	4620      	mov	r0, r4
 8009328:	f000 fef4 	bl	800a114 <_calloc_r>
 800932c:	b160      	cbz	r0, 8009348 <_Balloc+0x64>
 800932e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009332:	e00e      	b.n	8009352 <_Balloc+0x6e>
 8009334:	2221      	movs	r2, #33	; 0x21
 8009336:	2104      	movs	r1, #4
 8009338:	4620      	mov	r0, r4
 800933a:	f000 feeb 	bl	800a114 <_calloc_r>
 800933e:	69e3      	ldr	r3, [r4, #28]
 8009340:	60f0      	str	r0, [r6, #12]
 8009342:	68db      	ldr	r3, [r3, #12]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1e4      	bne.n	8009312 <_Balloc+0x2e>
 8009348:	2000      	movs	r0, #0
 800934a:	bd70      	pop	{r4, r5, r6, pc}
 800934c:	6802      	ldr	r2, [r0, #0]
 800934e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009352:	2300      	movs	r3, #0
 8009354:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009358:	e7f7      	b.n	800934a <_Balloc+0x66>
 800935a:	bf00      	nop
 800935c:	0800a521 	.word	0x0800a521
 8009360:	0800a5a1 	.word	0x0800a5a1

08009364 <_Bfree>:
 8009364:	b570      	push	{r4, r5, r6, lr}
 8009366:	69c6      	ldr	r6, [r0, #28]
 8009368:	4605      	mov	r5, r0
 800936a:	460c      	mov	r4, r1
 800936c:	b976      	cbnz	r6, 800938c <_Bfree+0x28>
 800936e:	2010      	movs	r0, #16
 8009370:	f7ff ff04 	bl	800917c <malloc>
 8009374:	4602      	mov	r2, r0
 8009376:	61e8      	str	r0, [r5, #28]
 8009378:	b920      	cbnz	r0, 8009384 <_Bfree+0x20>
 800937a:	4b09      	ldr	r3, [pc, #36]	; (80093a0 <_Bfree+0x3c>)
 800937c:	4809      	ldr	r0, [pc, #36]	; (80093a4 <_Bfree+0x40>)
 800937e:	218f      	movs	r1, #143	; 0x8f
 8009380:	f000 feaa 	bl	800a0d8 <__assert_func>
 8009384:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009388:	6006      	str	r6, [r0, #0]
 800938a:	60c6      	str	r6, [r0, #12]
 800938c:	b13c      	cbz	r4, 800939e <_Bfree+0x3a>
 800938e:	69eb      	ldr	r3, [r5, #28]
 8009390:	6862      	ldr	r2, [r4, #4]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009398:	6021      	str	r1, [r4, #0]
 800939a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800939e:	bd70      	pop	{r4, r5, r6, pc}
 80093a0:	0800a521 	.word	0x0800a521
 80093a4:	0800a5a1 	.word	0x0800a5a1

080093a8 <__multadd>:
 80093a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ac:	690d      	ldr	r5, [r1, #16]
 80093ae:	4607      	mov	r7, r0
 80093b0:	460c      	mov	r4, r1
 80093b2:	461e      	mov	r6, r3
 80093b4:	f101 0c14 	add.w	ip, r1, #20
 80093b8:	2000      	movs	r0, #0
 80093ba:	f8dc 3000 	ldr.w	r3, [ip]
 80093be:	b299      	uxth	r1, r3
 80093c0:	fb02 6101 	mla	r1, r2, r1, r6
 80093c4:	0c1e      	lsrs	r6, r3, #16
 80093c6:	0c0b      	lsrs	r3, r1, #16
 80093c8:	fb02 3306 	mla	r3, r2, r6, r3
 80093cc:	b289      	uxth	r1, r1
 80093ce:	3001      	adds	r0, #1
 80093d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80093d4:	4285      	cmp	r5, r0
 80093d6:	f84c 1b04 	str.w	r1, [ip], #4
 80093da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80093de:	dcec      	bgt.n	80093ba <__multadd+0x12>
 80093e0:	b30e      	cbz	r6, 8009426 <__multadd+0x7e>
 80093e2:	68a3      	ldr	r3, [r4, #8]
 80093e4:	42ab      	cmp	r3, r5
 80093e6:	dc19      	bgt.n	800941c <__multadd+0x74>
 80093e8:	6861      	ldr	r1, [r4, #4]
 80093ea:	4638      	mov	r0, r7
 80093ec:	3101      	adds	r1, #1
 80093ee:	f7ff ff79 	bl	80092e4 <_Balloc>
 80093f2:	4680      	mov	r8, r0
 80093f4:	b928      	cbnz	r0, 8009402 <__multadd+0x5a>
 80093f6:	4602      	mov	r2, r0
 80093f8:	4b0c      	ldr	r3, [pc, #48]	; (800942c <__multadd+0x84>)
 80093fa:	480d      	ldr	r0, [pc, #52]	; (8009430 <__multadd+0x88>)
 80093fc:	21ba      	movs	r1, #186	; 0xba
 80093fe:	f000 fe6b 	bl	800a0d8 <__assert_func>
 8009402:	6922      	ldr	r2, [r4, #16]
 8009404:	3202      	adds	r2, #2
 8009406:	f104 010c 	add.w	r1, r4, #12
 800940a:	0092      	lsls	r2, r2, #2
 800940c:	300c      	adds	r0, #12
 800940e:	f7fe ffde 	bl	80083ce <memcpy>
 8009412:	4621      	mov	r1, r4
 8009414:	4638      	mov	r0, r7
 8009416:	f7ff ffa5 	bl	8009364 <_Bfree>
 800941a:	4644      	mov	r4, r8
 800941c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009420:	3501      	adds	r5, #1
 8009422:	615e      	str	r6, [r3, #20]
 8009424:	6125      	str	r5, [r4, #16]
 8009426:	4620      	mov	r0, r4
 8009428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800942c:	0800a590 	.word	0x0800a590
 8009430:	0800a5a1 	.word	0x0800a5a1

08009434 <__hi0bits>:
 8009434:	0c03      	lsrs	r3, r0, #16
 8009436:	041b      	lsls	r3, r3, #16
 8009438:	b9d3      	cbnz	r3, 8009470 <__hi0bits+0x3c>
 800943a:	0400      	lsls	r0, r0, #16
 800943c:	2310      	movs	r3, #16
 800943e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009442:	bf04      	itt	eq
 8009444:	0200      	lsleq	r0, r0, #8
 8009446:	3308      	addeq	r3, #8
 8009448:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800944c:	bf04      	itt	eq
 800944e:	0100      	lsleq	r0, r0, #4
 8009450:	3304      	addeq	r3, #4
 8009452:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009456:	bf04      	itt	eq
 8009458:	0080      	lsleq	r0, r0, #2
 800945a:	3302      	addeq	r3, #2
 800945c:	2800      	cmp	r0, #0
 800945e:	db05      	blt.n	800946c <__hi0bits+0x38>
 8009460:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009464:	f103 0301 	add.w	r3, r3, #1
 8009468:	bf08      	it	eq
 800946a:	2320      	moveq	r3, #32
 800946c:	4618      	mov	r0, r3
 800946e:	4770      	bx	lr
 8009470:	2300      	movs	r3, #0
 8009472:	e7e4      	b.n	800943e <__hi0bits+0xa>

08009474 <__lo0bits>:
 8009474:	6803      	ldr	r3, [r0, #0]
 8009476:	f013 0207 	ands.w	r2, r3, #7
 800947a:	d00c      	beq.n	8009496 <__lo0bits+0x22>
 800947c:	07d9      	lsls	r1, r3, #31
 800947e:	d422      	bmi.n	80094c6 <__lo0bits+0x52>
 8009480:	079a      	lsls	r2, r3, #30
 8009482:	bf49      	itett	mi
 8009484:	085b      	lsrmi	r3, r3, #1
 8009486:	089b      	lsrpl	r3, r3, #2
 8009488:	6003      	strmi	r3, [r0, #0]
 800948a:	2201      	movmi	r2, #1
 800948c:	bf5c      	itt	pl
 800948e:	6003      	strpl	r3, [r0, #0]
 8009490:	2202      	movpl	r2, #2
 8009492:	4610      	mov	r0, r2
 8009494:	4770      	bx	lr
 8009496:	b299      	uxth	r1, r3
 8009498:	b909      	cbnz	r1, 800949e <__lo0bits+0x2a>
 800949a:	0c1b      	lsrs	r3, r3, #16
 800949c:	2210      	movs	r2, #16
 800949e:	b2d9      	uxtb	r1, r3
 80094a0:	b909      	cbnz	r1, 80094a6 <__lo0bits+0x32>
 80094a2:	3208      	adds	r2, #8
 80094a4:	0a1b      	lsrs	r3, r3, #8
 80094a6:	0719      	lsls	r1, r3, #28
 80094a8:	bf04      	itt	eq
 80094aa:	091b      	lsreq	r3, r3, #4
 80094ac:	3204      	addeq	r2, #4
 80094ae:	0799      	lsls	r1, r3, #30
 80094b0:	bf04      	itt	eq
 80094b2:	089b      	lsreq	r3, r3, #2
 80094b4:	3202      	addeq	r2, #2
 80094b6:	07d9      	lsls	r1, r3, #31
 80094b8:	d403      	bmi.n	80094c2 <__lo0bits+0x4e>
 80094ba:	085b      	lsrs	r3, r3, #1
 80094bc:	f102 0201 	add.w	r2, r2, #1
 80094c0:	d003      	beq.n	80094ca <__lo0bits+0x56>
 80094c2:	6003      	str	r3, [r0, #0]
 80094c4:	e7e5      	b.n	8009492 <__lo0bits+0x1e>
 80094c6:	2200      	movs	r2, #0
 80094c8:	e7e3      	b.n	8009492 <__lo0bits+0x1e>
 80094ca:	2220      	movs	r2, #32
 80094cc:	e7e1      	b.n	8009492 <__lo0bits+0x1e>
	...

080094d0 <__i2b>:
 80094d0:	b510      	push	{r4, lr}
 80094d2:	460c      	mov	r4, r1
 80094d4:	2101      	movs	r1, #1
 80094d6:	f7ff ff05 	bl	80092e4 <_Balloc>
 80094da:	4602      	mov	r2, r0
 80094dc:	b928      	cbnz	r0, 80094ea <__i2b+0x1a>
 80094de:	4b05      	ldr	r3, [pc, #20]	; (80094f4 <__i2b+0x24>)
 80094e0:	4805      	ldr	r0, [pc, #20]	; (80094f8 <__i2b+0x28>)
 80094e2:	f240 1145 	movw	r1, #325	; 0x145
 80094e6:	f000 fdf7 	bl	800a0d8 <__assert_func>
 80094ea:	2301      	movs	r3, #1
 80094ec:	6144      	str	r4, [r0, #20]
 80094ee:	6103      	str	r3, [r0, #16]
 80094f0:	bd10      	pop	{r4, pc}
 80094f2:	bf00      	nop
 80094f4:	0800a590 	.word	0x0800a590
 80094f8:	0800a5a1 	.word	0x0800a5a1

080094fc <__multiply>:
 80094fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009500:	4691      	mov	r9, r2
 8009502:	690a      	ldr	r2, [r1, #16]
 8009504:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009508:	429a      	cmp	r2, r3
 800950a:	bfb8      	it	lt
 800950c:	460b      	movlt	r3, r1
 800950e:	460c      	mov	r4, r1
 8009510:	bfbc      	itt	lt
 8009512:	464c      	movlt	r4, r9
 8009514:	4699      	movlt	r9, r3
 8009516:	6927      	ldr	r7, [r4, #16]
 8009518:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800951c:	68a3      	ldr	r3, [r4, #8]
 800951e:	6861      	ldr	r1, [r4, #4]
 8009520:	eb07 060a 	add.w	r6, r7, sl
 8009524:	42b3      	cmp	r3, r6
 8009526:	b085      	sub	sp, #20
 8009528:	bfb8      	it	lt
 800952a:	3101      	addlt	r1, #1
 800952c:	f7ff feda 	bl	80092e4 <_Balloc>
 8009530:	b930      	cbnz	r0, 8009540 <__multiply+0x44>
 8009532:	4602      	mov	r2, r0
 8009534:	4b44      	ldr	r3, [pc, #272]	; (8009648 <__multiply+0x14c>)
 8009536:	4845      	ldr	r0, [pc, #276]	; (800964c <__multiply+0x150>)
 8009538:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800953c:	f000 fdcc 	bl	800a0d8 <__assert_func>
 8009540:	f100 0514 	add.w	r5, r0, #20
 8009544:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009548:	462b      	mov	r3, r5
 800954a:	2200      	movs	r2, #0
 800954c:	4543      	cmp	r3, r8
 800954e:	d321      	bcc.n	8009594 <__multiply+0x98>
 8009550:	f104 0314 	add.w	r3, r4, #20
 8009554:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009558:	f109 0314 	add.w	r3, r9, #20
 800955c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009560:	9202      	str	r2, [sp, #8]
 8009562:	1b3a      	subs	r2, r7, r4
 8009564:	3a15      	subs	r2, #21
 8009566:	f022 0203 	bic.w	r2, r2, #3
 800956a:	3204      	adds	r2, #4
 800956c:	f104 0115 	add.w	r1, r4, #21
 8009570:	428f      	cmp	r7, r1
 8009572:	bf38      	it	cc
 8009574:	2204      	movcc	r2, #4
 8009576:	9201      	str	r2, [sp, #4]
 8009578:	9a02      	ldr	r2, [sp, #8]
 800957a:	9303      	str	r3, [sp, #12]
 800957c:	429a      	cmp	r2, r3
 800957e:	d80c      	bhi.n	800959a <__multiply+0x9e>
 8009580:	2e00      	cmp	r6, #0
 8009582:	dd03      	ble.n	800958c <__multiply+0x90>
 8009584:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009588:	2b00      	cmp	r3, #0
 800958a:	d05b      	beq.n	8009644 <__multiply+0x148>
 800958c:	6106      	str	r6, [r0, #16]
 800958e:	b005      	add	sp, #20
 8009590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009594:	f843 2b04 	str.w	r2, [r3], #4
 8009598:	e7d8      	b.n	800954c <__multiply+0x50>
 800959a:	f8b3 a000 	ldrh.w	sl, [r3]
 800959e:	f1ba 0f00 	cmp.w	sl, #0
 80095a2:	d024      	beq.n	80095ee <__multiply+0xf2>
 80095a4:	f104 0e14 	add.w	lr, r4, #20
 80095a8:	46a9      	mov	r9, r5
 80095aa:	f04f 0c00 	mov.w	ip, #0
 80095ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 80095b2:	f8d9 1000 	ldr.w	r1, [r9]
 80095b6:	fa1f fb82 	uxth.w	fp, r2
 80095ba:	b289      	uxth	r1, r1
 80095bc:	fb0a 110b 	mla	r1, sl, fp, r1
 80095c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80095c4:	f8d9 2000 	ldr.w	r2, [r9]
 80095c8:	4461      	add	r1, ip
 80095ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095ce:	fb0a c20b 	mla	r2, sl, fp, ip
 80095d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80095d6:	b289      	uxth	r1, r1
 80095d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80095dc:	4577      	cmp	r7, lr
 80095de:	f849 1b04 	str.w	r1, [r9], #4
 80095e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80095e6:	d8e2      	bhi.n	80095ae <__multiply+0xb2>
 80095e8:	9a01      	ldr	r2, [sp, #4]
 80095ea:	f845 c002 	str.w	ip, [r5, r2]
 80095ee:	9a03      	ldr	r2, [sp, #12]
 80095f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80095f4:	3304      	adds	r3, #4
 80095f6:	f1b9 0f00 	cmp.w	r9, #0
 80095fa:	d021      	beq.n	8009640 <__multiply+0x144>
 80095fc:	6829      	ldr	r1, [r5, #0]
 80095fe:	f104 0c14 	add.w	ip, r4, #20
 8009602:	46ae      	mov	lr, r5
 8009604:	f04f 0a00 	mov.w	sl, #0
 8009608:	f8bc b000 	ldrh.w	fp, [ip]
 800960c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009610:	fb09 220b 	mla	r2, r9, fp, r2
 8009614:	4452      	add	r2, sl
 8009616:	b289      	uxth	r1, r1
 8009618:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800961c:	f84e 1b04 	str.w	r1, [lr], #4
 8009620:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009624:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009628:	f8be 1000 	ldrh.w	r1, [lr]
 800962c:	fb09 110a 	mla	r1, r9, sl, r1
 8009630:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009634:	4567      	cmp	r7, ip
 8009636:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800963a:	d8e5      	bhi.n	8009608 <__multiply+0x10c>
 800963c:	9a01      	ldr	r2, [sp, #4]
 800963e:	50a9      	str	r1, [r5, r2]
 8009640:	3504      	adds	r5, #4
 8009642:	e799      	b.n	8009578 <__multiply+0x7c>
 8009644:	3e01      	subs	r6, #1
 8009646:	e79b      	b.n	8009580 <__multiply+0x84>
 8009648:	0800a590 	.word	0x0800a590
 800964c:	0800a5a1 	.word	0x0800a5a1

08009650 <__pow5mult>:
 8009650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009654:	4615      	mov	r5, r2
 8009656:	f012 0203 	ands.w	r2, r2, #3
 800965a:	4606      	mov	r6, r0
 800965c:	460f      	mov	r7, r1
 800965e:	d007      	beq.n	8009670 <__pow5mult+0x20>
 8009660:	4c25      	ldr	r4, [pc, #148]	; (80096f8 <__pow5mult+0xa8>)
 8009662:	3a01      	subs	r2, #1
 8009664:	2300      	movs	r3, #0
 8009666:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800966a:	f7ff fe9d 	bl	80093a8 <__multadd>
 800966e:	4607      	mov	r7, r0
 8009670:	10ad      	asrs	r5, r5, #2
 8009672:	d03d      	beq.n	80096f0 <__pow5mult+0xa0>
 8009674:	69f4      	ldr	r4, [r6, #28]
 8009676:	b97c      	cbnz	r4, 8009698 <__pow5mult+0x48>
 8009678:	2010      	movs	r0, #16
 800967a:	f7ff fd7f 	bl	800917c <malloc>
 800967e:	4602      	mov	r2, r0
 8009680:	61f0      	str	r0, [r6, #28]
 8009682:	b928      	cbnz	r0, 8009690 <__pow5mult+0x40>
 8009684:	4b1d      	ldr	r3, [pc, #116]	; (80096fc <__pow5mult+0xac>)
 8009686:	481e      	ldr	r0, [pc, #120]	; (8009700 <__pow5mult+0xb0>)
 8009688:	f240 11b3 	movw	r1, #435	; 0x1b3
 800968c:	f000 fd24 	bl	800a0d8 <__assert_func>
 8009690:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009694:	6004      	str	r4, [r0, #0]
 8009696:	60c4      	str	r4, [r0, #12]
 8009698:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800969c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096a0:	b94c      	cbnz	r4, 80096b6 <__pow5mult+0x66>
 80096a2:	f240 2171 	movw	r1, #625	; 0x271
 80096a6:	4630      	mov	r0, r6
 80096a8:	f7ff ff12 	bl	80094d0 <__i2b>
 80096ac:	2300      	movs	r3, #0
 80096ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80096b2:	4604      	mov	r4, r0
 80096b4:	6003      	str	r3, [r0, #0]
 80096b6:	f04f 0900 	mov.w	r9, #0
 80096ba:	07eb      	lsls	r3, r5, #31
 80096bc:	d50a      	bpl.n	80096d4 <__pow5mult+0x84>
 80096be:	4639      	mov	r1, r7
 80096c0:	4622      	mov	r2, r4
 80096c2:	4630      	mov	r0, r6
 80096c4:	f7ff ff1a 	bl	80094fc <__multiply>
 80096c8:	4639      	mov	r1, r7
 80096ca:	4680      	mov	r8, r0
 80096cc:	4630      	mov	r0, r6
 80096ce:	f7ff fe49 	bl	8009364 <_Bfree>
 80096d2:	4647      	mov	r7, r8
 80096d4:	106d      	asrs	r5, r5, #1
 80096d6:	d00b      	beq.n	80096f0 <__pow5mult+0xa0>
 80096d8:	6820      	ldr	r0, [r4, #0]
 80096da:	b938      	cbnz	r0, 80096ec <__pow5mult+0x9c>
 80096dc:	4622      	mov	r2, r4
 80096de:	4621      	mov	r1, r4
 80096e0:	4630      	mov	r0, r6
 80096e2:	f7ff ff0b 	bl	80094fc <__multiply>
 80096e6:	6020      	str	r0, [r4, #0]
 80096e8:	f8c0 9000 	str.w	r9, [r0]
 80096ec:	4604      	mov	r4, r0
 80096ee:	e7e4      	b.n	80096ba <__pow5mult+0x6a>
 80096f0:	4638      	mov	r0, r7
 80096f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096f6:	bf00      	nop
 80096f8:	0800a6f0 	.word	0x0800a6f0
 80096fc:	0800a521 	.word	0x0800a521
 8009700:	0800a5a1 	.word	0x0800a5a1

08009704 <__lshift>:
 8009704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009708:	460c      	mov	r4, r1
 800970a:	6849      	ldr	r1, [r1, #4]
 800970c:	6923      	ldr	r3, [r4, #16]
 800970e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009712:	68a3      	ldr	r3, [r4, #8]
 8009714:	4607      	mov	r7, r0
 8009716:	4691      	mov	r9, r2
 8009718:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800971c:	f108 0601 	add.w	r6, r8, #1
 8009720:	42b3      	cmp	r3, r6
 8009722:	db0b      	blt.n	800973c <__lshift+0x38>
 8009724:	4638      	mov	r0, r7
 8009726:	f7ff fddd 	bl	80092e4 <_Balloc>
 800972a:	4605      	mov	r5, r0
 800972c:	b948      	cbnz	r0, 8009742 <__lshift+0x3e>
 800972e:	4602      	mov	r2, r0
 8009730:	4b28      	ldr	r3, [pc, #160]	; (80097d4 <__lshift+0xd0>)
 8009732:	4829      	ldr	r0, [pc, #164]	; (80097d8 <__lshift+0xd4>)
 8009734:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009738:	f000 fcce 	bl	800a0d8 <__assert_func>
 800973c:	3101      	adds	r1, #1
 800973e:	005b      	lsls	r3, r3, #1
 8009740:	e7ee      	b.n	8009720 <__lshift+0x1c>
 8009742:	2300      	movs	r3, #0
 8009744:	f100 0114 	add.w	r1, r0, #20
 8009748:	f100 0210 	add.w	r2, r0, #16
 800974c:	4618      	mov	r0, r3
 800974e:	4553      	cmp	r3, sl
 8009750:	db33      	blt.n	80097ba <__lshift+0xb6>
 8009752:	6920      	ldr	r0, [r4, #16]
 8009754:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009758:	f104 0314 	add.w	r3, r4, #20
 800975c:	f019 091f 	ands.w	r9, r9, #31
 8009760:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009764:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009768:	d02b      	beq.n	80097c2 <__lshift+0xbe>
 800976a:	f1c9 0e20 	rsb	lr, r9, #32
 800976e:	468a      	mov	sl, r1
 8009770:	2200      	movs	r2, #0
 8009772:	6818      	ldr	r0, [r3, #0]
 8009774:	fa00 f009 	lsl.w	r0, r0, r9
 8009778:	4310      	orrs	r0, r2
 800977a:	f84a 0b04 	str.w	r0, [sl], #4
 800977e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009782:	459c      	cmp	ip, r3
 8009784:	fa22 f20e 	lsr.w	r2, r2, lr
 8009788:	d8f3      	bhi.n	8009772 <__lshift+0x6e>
 800978a:	ebac 0304 	sub.w	r3, ip, r4
 800978e:	3b15      	subs	r3, #21
 8009790:	f023 0303 	bic.w	r3, r3, #3
 8009794:	3304      	adds	r3, #4
 8009796:	f104 0015 	add.w	r0, r4, #21
 800979a:	4584      	cmp	ip, r0
 800979c:	bf38      	it	cc
 800979e:	2304      	movcc	r3, #4
 80097a0:	50ca      	str	r2, [r1, r3]
 80097a2:	b10a      	cbz	r2, 80097a8 <__lshift+0xa4>
 80097a4:	f108 0602 	add.w	r6, r8, #2
 80097a8:	3e01      	subs	r6, #1
 80097aa:	4638      	mov	r0, r7
 80097ac:	612e      	str	r6, [r5, #16]
 80097ae:	4621      	mov	r1, r4
 80097b0:	f7ff fdd8 	bl	8009364 <_Bfree>
 80097b4:	4628      	mov	r0, r5
 80097b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ba:	f842 0f04 	str.w	r0, [r2, #4]!
 80097be:	3301      	adds	r3, #1
 80097c0:	e7c5      	b.n	800974e <__lshift+0x4a>
 80097c2:	3904      	subs	r1, #4
 80097c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80097c8:	f841 2f04 	str.w	r2, [r1, #4]!
 80097cc:	459c      	cmp	ip, r3
 80097ce:	d8f9      	bhi.n	80097c4 <__lshift+0xc0>
 80097d0:	e7ea      	b.n	80097a8 <__lshift+0xa4>
 80097d2:	bf00      	nop
 80097d4:	0800a590 	.word	0x0800a590
 80097d8:	0800a5a1 	.word	0x0800a5a1

080097dc <__mcmp>:
 80097dc:	b530      	push	{r4, r5, lr}
 80097de:	6902      	ldr	r2, [r0, #16]
 80097e0:	690c      	ldr	r4, [r1, #16]
 80097e2:	1b12      	subs	r2, r2, r4
 80097e4:	d10e      	bne.n	8009804 <__mcmp+0x28>
 80097e6:	f100 0314 	add.w	r3, r0, #20
 80097ea:	3114      	adds	r1, #20
 80097ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80097f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80097f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80097f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80097fc:	42a5      	cmp	r5, r4
 80097fe:	d003      	beq.n	8009808 <__mcmp+0x2c>
 8009800:	d305      	bcc.n	800980e <__mcmp+0x32>
 8009802:	2201      	movs	r2, #1
 8009804:	4610      	mov	r0, r2
 8009806:	bd30      	pop	{r4, r5, pc}
 8009808:	4283      	cmp	r3, r0
 800980a:	d3f3      	bcc.n	80097f4 <__mcmp+0x18>
 800980c:	e7fa      	b.n	8009804 <__mcmp+0x28>
 800980e:	f04f 32ff 	mov.w	r2, #4294967295
 8009812:	e7f7      	b.n	8009804 <__mcmp+0x28>

08009814 <__mdiff>:
 8009814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009818:	460c      	mov	r4, r1
 800981a:	4606      	mov	r6, r0
 800981c:	4611      	mov	r1, r2
 800981e:	4620      	mov	r0, r4
 8009820:	4690      	mov	r8, r2
 8009822:	f7ff ffdb 	bl	80097dc <__mcmp>
 8009826:	1e05      	subs	r5, r0, #0
 8009828:	d110      	bne.n	800984c <__mdiff+0x38>
 800982a:	4629      	mov	r1, r5
 800982c:	4630      	mov	r0, r6
 800982e:	f7ff fd59 	bl	80092e4 <_Balloc>
 8009832:	b930      	cbnz	r0, 8009842 <__mdiff+0x2e>
 8009834:	4b3a      	ldr	r3, [pc, #232]	; (8009920 <__mdiff+0x10c>)
 8009836:	4602      	mov	r2, r0
 8009838:	f240 2137 	movw	r1, #567	; 0x237
 800983c:	4839      	ldr	r0, [pc, #228]	; (8009924 <__mdiff+0x110>)
 800983e:	f000 fc4b 	bl	800a0d8 <__assert_func>
 8009842:	2301      	movs	r3, #1
 8009844:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009848:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800984c:	bfa4      	itt	ge
 800984e:	4643      	movge	r3, r8
 8009850:	46a0      	movge	r8, r4
 8009852:	4630      	mov	r0, r6
 8009854:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009858:	bfa6      	itte	ge
 800985a:	461c      	movge	r4, r3
 800985c:	2500      	movge	r5, #0
 800985e:	2501      	movlt	r5, #1
 8009860:	f7ff fd40 	bl	80092e4 <_Balloc>
 8009864:	b920      	cbnz	r0, 8009870 <__mdiff+0x5c>
 8009866:	4b2e      	ldr	r3, [pc, #184]	; (8009920 <__mdiff+0x10c>)
 8009868:	4602      	mov	r2, r0
 800986a:	f240 2145 	movw	r1, #581	; 0x245
 800986e:	e7e5      	b.n	800983c <__mdiff+0x28>
 8009870:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009874:	6926      	ldr	r6, [r4, #16]
 8009876:	60c5      	str	r5, [r0, #12]
 8009878:	f104 0914 	add.w	r9, r4, #20
 800987c:	f108 0514 	add.w	r5, r8, #20
 8009880:	f100 0e14 	add.w	lr, r0, #20
 8009884:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009888:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800988c:	f108 0210 	add.w	r2, r8, #16
 8009890:	46f2      	mov	sl, lr
 8009892:	2100      	movs	r1, #0
 8009894:	f859 3b04 	ldr.w	r3, [r9], #4
 8009898:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800989c:	fa11 f88b 	uxtah	r8, r1, fp
 80098a0:	b299      	uxth	r1, r3
 80098a2:	0c1b      	lsrs	r3, r3, #16
 80098a4:	eba8 0801 	sub.w	r8, r8, r1
 80098a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80098ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80098b0:	fa1f f888 	uxth.w	r8, r8
 80098b4:	1419      	asrs	r1, r3, #16
 80098b6:	454e      	cmp	r6, r9
 80098b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80098bc:	f84a 3b04 	str.w	r3, [sl], #4
 80098c0:	d8e8      	bhi.n	8009894 <__mdiff+0x80>
 80098c2:	1b33      	subs	r3, r6, r4
 80098c4:	3b15      	subs	r3, #21
 80098c6:	f023 0303 	bic.w	r3, r3, #3
 80098ca:	3304      	adds	r3, #4
 80098cc:	3415      	adds	r4, #21
 80098ce:	42a6      	cmp	r6, r4
 80098d0:	bf38      	it	cc
 80098d2:	2304      	movcc	r3, #4
 80098d4:	441d      	add	r5, r3
 80098d6:	4473      	add	r3, lr
 80098d8:	469e      	mov	lr, r3
 80098da:	462e      	mov	r6, r5
 80098dc:	4566      	cmp	r6, ip
 80098de:	d30e      	bcc.n	80098fe <__mdiff+0xea>
 80098e0:	f10c 0203 	add.w	r2, ip, #3
 80098e4:	1b52      	subs	r2, r2, r5
 80098e6:	f022 0203 	bic.w	r2, r2, #3
 80098ea:	3d03      	subs	r5, #3
 80098ec:	45ac      	cmp	ip, r5
 80098ee:	bf38      	it	cc
 80098f0:	2200      	movcc	r2, #0
 80098f2:	4413      	add	r3, r2
 80098f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80098f8:	b17a      	cbz	r2, 800991a <__mdiff+0x106>
 80098fa:	6107      	str	r7, [r0, #16]
 80098fc:	e7a4      	b.n	8009848 <__mdiff+0x34>
 80098fe:	f856 8b04 	ldr.w	r8, [r6], #4
 8009902:	fa11 f288 	uxtah	r2, r1, r8
 8009906:	1414      	asrs	r4, r2, #16
 8009908:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800990c:	b292      	uxth	r2, r2
 800990e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009912:	f84e 2b04 	str.w	r2, [lr], #4
 8009916:	1421      	asrs	r1, r4, #16
 8009918:	e7e0      	b.n	80098dc <__mdiff+0xc8>
 800991a:	3f01      	subs	r7, #1
 800991c:	e7ea      	b.n	80098f4 <__mdiff+0xe0>
 800991e:	bf00      	nop
 8009920:	0800a590 	.word	0x0800a590
 8009924:	0800a5a1 	.word	0x0800a5a1

08009928 <__d2b>:
 8009928:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800992c:	460f      	mov	r7, r1
 800992e:	2101      	movs	r1, #1
 8009930:	ec59 8b10 	vmov	r8, r9, d0
 8009934:	4616      	mov	r6, r2
 8009936:	f7ff fcd5 	bl	80092e4 <_Balloc>
 800993a:	4604      	mov	r4, r0
 800993c:	b930      	cbnz	r0, 800994c <__d2b+0x24>
 800993e:	4602      	mov	r2, r0
 8009940:	4b24      	ldr	r3, [pc, #144]	; (80099d4 <__d2b+0xac>)
 8009942:	4825      	ldr	r0, [pc, #148]	; (80099d8 <__d2b+0xb0>)
 8009944:	f240 310f 	movw	r1, #783	; 0x30f
 8009948:	f000 fbc6 	bl	800a0d8 <__assert_func>
 800994c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009950:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009954:	bb2d      	cbnz	r5, 80099a2 <__d2b+0x7a>
 8009956:	9301      	str	r3, [sp, #4]
 8009958:	f1b8 0300 	subs.w	r3, r8, #0
 800995c:	d026      	beq.n	80099ac <__d2b+0x84>
 800995e:	4668      	mov	r0, sp
 8009960:	9300      	str	r3, [sp, #0]
 8009962:	f7ff fd87 	bl	8009474 <__lo0bits>
 8009966:	e9dd 1200 	ldrd	r1, r2, [sp]
 800996a:	b1e8      	cbz	r0, 80099a8 <__d2b+0x80>
 800996c:	f1c0 0320 	rsb	r3, r0, #32
 8009970:	fa02 f303 	lsl.w	r3, r2, r3
 8009974:	430b      	orrs	r3, r1
 8009976:	40c2      	lsrs	r2, r0
 8009978:	6163      	str	r3, [r4, #20]
 800997a:	9201      	str	r2, [sp, #4]
 800997c:	9b01      	ldr	r3, [sp, #4]
 800997e:	61a3      	str	r3, [r4, #24]
 8009980:	2b00      	cmp	r3, #0
 8009982:	bf14      	ite	ne
 8009984:	2202      	movne	r2, #2
 8009986:	2201      	moveq	r2, #1
 8009988:	6122      	str	r2, [r4, #16]
 800998a:	b1bd      	cbz	r5, 80099bc <__d2b+0x94>
 800998c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009990:	4405      	add	r5, r0
 8009992:	603d      	str	r5, [r7, #0]
 8009994:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009998:	6030      	str	r0, [r6, #0]
 800999a:	4620      	mov	r0, r4
 800999c:	b003      	add	sp, #12
 800999e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099a6:	e7d6      	b.n	8009956 <__d2b+0x2e>
 80099a8:	6161      	str	r1, [r4, #20]
 80099aa:	e7e7      	b.n	800997c <__d2b+0x54>
 80099ac:	a801      	add	r0, sp, #4
 80099ae:	f7ff fd61 	bl	8009474 <__lo0bits>
 80099b2:	9b01      	ldr	r3, [sp, #4]
 80099b4:	6163      	str	r3, [r4, #20]
 80099b6:	3020      	adds	r0, #32
 80099b8:	2201      	movs	r2, #1
 80099ba:	e7e5      	b.n	8009988 <__d2b+0x60>
 80099bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80099c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80099c4:	6038      	str	r0, [r7, #0]
 80099c6:	6918      	ldr	r0, [r3, #16]
 80099c8:	f7ff fd34 	bl	8009434 <__hi0bits>
 80099cc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80099d0:	e7e2      	b.n	8009998 <__d2b+0x70>
 80099d2:	bf00      	nop
 80099d4:	0800a590 	.word	0x0800a590
 80099d8:	0800a5a1 	.word	0x0800a5a1

080099dc <__ssputs_r>:
 80099dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099e0:	688e      	ldr	r6, [r1, #8]
 80099e2:	461f      	mov	r7, r3
 80099e4:	42be      	cmp	r6, r7
 80099e6:	680b      	ldr	r3, [r1, #0]
 80099e8:	4682      	mov	sl, r0
 80099ea:	460c      	mov	r4, r1
 80099ec:	4690      	mov	r8, r2
 80099ee:	d82c      	bhi.n	8009a4a <__ssputs_r+0x6e>
 80099f0:	898a      	ldrh	r2, [r1, #12]
 80099f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099f6:	d026      	beq.n	8009a46 <__ssputs_r+0x6a>
 80099f8:	6965      	ldr	r5, [r4, #20]
 80099fa:	6909      	ldr	r1, [r1, #16]
 80099fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009a00:	eba3 0901 	sub.w	r9, r3, r1
 8009a04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009a08:	1c7b      	adds	r3, r7, #1
 8009a0a:	444b      	add	r3, r9
 8009a0c:	106d      	asrs	r5, r5, #1
 8009a0e:	429d      	cmp	r5, r3
 8009a10:	bf38      	it	cc
 8009a12:	461d      	movcc	r5, r3
 8009a14:	0553      	lsls	r3, r2, #21
 8009a16:	d527      	bpl.n	8009a68 <__ssputs_r+0x8c>
 8009a18:	4629      	mov	r1, r5
 8009a1a:	f7ff fbd7 	bl	80091cc <_malloc_r>
 8009a1e:	4606      	mov	r6, r0
 8009a20:	b360      	cbz	r0, 8009a7c <__ssputs_r+0xa0>
 8009a22:	6921      	ldr	r1, [r4, #16]
 8009a24:	464a      	mov	r2, r9
 8009a26:	f7fe fcd2 	bl	80083ce <memcpy>
 8009a2a:	89a3      	ldrh	r3, [r4, #12]
 8009a2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a34:	81a3      	strh	r3, [r4, #12]
 8009a36:	6126      	str	r6, [r4, #16]
 8009a38:	6165      	str	r5, [r4, #20]
 8009a3a:	444e      	add	r6, r9
 8009a3c:	eba5 0509 	sub.w	r5, r5, r9
 8009a40:	6026      	str	r6, [r4, #0]
 8009a42:	60a5      	str	r5, [r4, #8]
 8009a44:	463e      	mov	r6, r7
 8009a46:	42be      	cmp	r6, r7
 8009a48:	d900      	bls.n	8009a4c <__ssputs_r+0x70>
 8009a4a:	463e      	mov	r6, r7
 8009a4c:	6820      	ldr	r0, [r4, #0]
 8009a4e:	4632      	mov	r2, r6
 8009a50:	4641      	mov	r1, r8
 8009a52:	f000 faf5 	bl	800a040 <memmove>
 8009a56:	68a3      	ldr	r3, [r4, #8]
 8009a58:	1b9b      	subs	r3, r3, r6
 8009a5a:	60a3      	str	r3, [r4, #8]
 8009a5c:	6823      	ldr	r3, [r4, #0]
 8009a5e:	4433      	add	r3, r6
 8009a60:	6023      	str	r3, [r4, #0]
 8009a62:	2000      	movs	r0, #0
 8009a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a68:	462a      	mov	r2, r5
 8009a6a:	f000 fb7b 	bl	800a164 <_realloc_r>
 8009a6e:	4606      	mov	r6, r0
 8009a70:	2800      	cmp	r0, #0
 8009a72:	d1e0      	bne.n	8009a36 <__ssputs_r+0x5a>
 8009a74:	6921      	ldr	r1, [r4, #16]
 8009a76:	4650      	mov	r0, sl
 8009a78:	f7ff fb34 	bl	80090e4 <_free_r>
 8009a7c:	230c      	movs	r3, #12
 8009a7e:	f8ca 3000 	str.w	r3, [sl]
 8009a82:	89a3      	ldrh	r3, [r4, #12]
 8009a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a88:	81a3      	strh	r3, [r4, #12]
 8009a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a8e:	e7e9      	b.n	8009a64 <__ssputs_r+0x88>

08009a90 <_svfiprintf_r>:
 8009a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a94:	4698      	mov	r8, r3
 8009a96:	898b      	ldrh	r3, [r1, #12]
 8009a98:	061b      	lsls	r3, r3, #24
 8009a9a:	b09d      	sub	sp, #116	; 0x74
 8009a9c:	4607      	mov	r7, r0
 8009a9e:	460d      	mov	r5, r1
 8009aa0:	4614      	mov	r4, r2
 8009aa2:	d50e      	bpl.n	8009ac2 <_svfiprintf_r+0x32>
 8009aa4:	690b      	ldr	r3, [r1, #16]
 8009aa6:	b963      	cbnz	r3, 8009ac2 <_svfiprintf_r+0x32>
 8009aa8:	2140      	movs	r1, #64	; 0x40
 8009aaa:	f7ff fb8f 	bl	80091cc <_malloc_r>
 8009aae:	6028      	str	r0, [r5, #0]
 8009ab0:	6128      	str	r0, [r5, #16]
 8009ab2:	b920      	cbnz	r0, 8009abe <_svfiprintf_r+0x2e>
 8009ab4:	230c      	movs	r3, #12
 8009ab6:	603b      	str	r3, [r7, #0]
 8009ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8009abc:	e0d0      	b.n	8009c60 <_svfiprintf_r+0x1d0>
 8009abe:	2340      	movs	r3, #64	; 0x40
 8009ac0:	616b      	str	r3, [r5, #20]
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	9309      	str	r3, [sp, #36]	; 0x24
 8009ac6:	2320      	movs	r3, #32
 8009ac8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009acc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ad0:	2330      	movs	r3, #48	; 0x30
 8009ad2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009c78 <_svfiprintf_r+0x1e8>
 8009ad6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ada:	f04f 0901 	mov.w	r9, #1
 8009ade:	4623      	mov	r3, r4
 8009ae0:	469a      	mov	sl, r3
 8009ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ae6:	b10a      	cbz	r2, 8009aec <_svfiprintf_r+0x5c>
 8009ae8:	2a25      	cmp	r2, #37	; 0x25
 8009aea:	d1f9      	bne.n	8009ae0 <_svfiprintf_r+0x50>
 8009aec:	ebba 0b04 	subs.w	fp, sl, r4
 8009af0:	d00b      	beq.n	8009b0a <_svfiprintf_r+0x7a>
 8009af2:	465b      	mov	r3, fp
 8009af4:	4622      	mov	r2, r4
 8009af6:	4629      	mov	r1, r5
 8009af8:	4638      	mov	r0, r7
 8009afa:	f7ff ff6f 	bl	80099dc <__ssputs_r>
 8009afe:	3001      	adds	r0, #1
 8009b00:	f000 80a9 	beq.w	8009c56 <_svfiprintf_r+0x1c6>
 8009b04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009b06:	445a      	add	r2, fp
 8009b08:	9209      	str	r2, [sp, #36]	; 0x24
 8009b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f000 80a1 	beq.w	8009c56 <_svfiprintf_r+0x1c6>
 8009b14:	2300      	movs	r3, #0
 8009b16:	f04f 32ff 	mov.w	r2, #4294967295
 8009b1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b1e:	f10a 0a01 	add.w	sl, sl, #1
 8009b22:	9304      	str	r3, [sp, #16]
 8009b24:	9307      	str	r3, [sp, #28]
 8009b26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b2a:	931a      	str	r3, [sp, #104]	; 0x68
 8009b2c:	4654      	mov	r4, sl
 8009b2e:	2205      	movs	r2, #5
 8009b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b34:	4850      	ldr	r0, [pc, #320]	; (8009c78 <_svfiprintf_r+0x1e8>)
 8009b36:	f7f6 fb53 	bl	80001e0 <memchr>
 8009b3a:	9a04      	ldr	r2, [sp, #16]
 8009b3c:	b9d8      	cbnz	r0, 8009b76 <_svfiprintf_r+0xe6>
 8009b3e:	06d0      	lsls	r0, r2, #27
 8009b40:	bf44      	itt	mi
 8009b42:	2320      	movmi	r3, #32
 8009b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b48:	0711      	lsls	r1, r2, #28
 8009b4a:	bf44      	itt	mi
 8009b4c:	232b      	movmi	r3, #43	; 0x2b
 8009b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b52:	f89a 3000 	ldrb.w	r3, [sl]
 8009b56:	2b2a      	cmp	r3, #42	; 0x2a
 8009b58:	d015      	beq.n	8009b86 <_svfiprintf_r+0xf6>
 8009b5a:	9a07      	ldr	r2, [sp, #28]
 8009b5c:	4654      	mov	r4, sl
 8009b5e:	2000      	movs	r0, #0
 8009b60:	f04f 0c0a 	mov.w	ip, #10
 8009b64:	4621      	mov	r1, r4
 8009b66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b6a:	3b30      	subs	r3, #48	; 0x30
 8009b6c:	2b09      	cmp	r3, #9
 8009b6e:	d94d      	bls.n	8009c0c <_svfiprintf_r+0x17c>
 8009b70:	b1b0      	cbz	r0, 8009ba0 <_svfiprintf_r+0x110>
 8009b72:	9207      	str	r2, [sp, #28]
 8009b74:	e014      	b.n	8009ba0 <_svfiprintf_r+0x110>
 8009b76:	eba0 0308 	sub.w	r3, r0, r8
 8009b7a:	fa09 f303 	lsl.w	r3, r9, r3
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	9304      	str	r3, [sp, #16]
 8009b82:	46a2      	mov	sl, r4
 8009b84:	e7d2      	b.n	8009b2c <_svfiprintf_r+0x9c>
 8009b86:	9b03      	ldr	r3, [sp, #12]
 8009b88:	1d19      	adds	r1, r3, #4
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	9103      	str	r1, [sp, #12]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	bfbb      	ittet	lt
 8009b92:	425b      	neglt	r3, r3
 8009b94:	f042 0202 	orrlt.w	r2, r2, #2
 8009b98:	9307      	strge	r3, [sp, #28]
 8009b9a:	9307      	strlt	r3, [sp, #28]
 8009b9c:	bfb8      	it	lt
 8009b9e:	9204      	strlt	r2, [sp, #16]
 8009ba0:	7823      	ldrb	r3, [r4, #0]
 8009ba2:	2b2e      	cmp	r3, #46	; 0x2e
 8009ba4:	d10c      	bne.n	8009bc0 <_svfiprintf_r+0x130>
 8009ba6:	7863      	ldrb	r3, [r4, #1]
 8009ba8:	2b2a      	cmp	r3, #42	; 0x2a
 8009baa:	d134      	bne.n	8009c16 <_svfiprintf_r+0x186>
 8009bac:	9b03      	ldr	r3, [sp, #12]
 8009bae:	1d1a      	adds	r2, r3, #4
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	9203      	str	r2, [sp, #12]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	bfb8      	it	lt
 8009bb8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009bbc:	3402      	adds	r4, #2
 8009bbe:	9305      	str	r3, [sp, #20]
 8009bc0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009c88 <_svfiprintf_r+0x1f8>
 8009bc4:	7821      	ldrb	r1, [r4, #0]
 8009bc6:	2203      	movs	r2, #3
 8009bc8:	4650      	mov	r0, sl
 8009bca:	f7f6 fb09 	bl	80001e0 <memchr>
 8009bce:	b138      	cbz	r0, 8009be0 <_svfiprintf_r+0x150>
 8009bd0:	9b04      	ldr	r3, [sp, #16]
 8009bd2:	eba0 000a 	sub.w	r0, r0, sl
 8009bd6:	2240      	movs	r2, #64	; 0x40
 8009bd8:	4082      	lsls	r2, r0
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	3401      	adds	r4, #1
 8009bde:	9304      	str	r3, [sp, #16]
 8009be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009be4:	4825      	ldr	r0, [pc, #148]	; (8009c7c <_svfiprintf_r+0x1ec>)
 8009be6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bea:	2206      	movs	r2, #6
 8009bec:	f7f6 faf8 	bl	80001e0 <memchr>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d038      	beq.n	8009c66 <_svfiprintf_r+0x1d6>
 8009bf4:	4b22      	ldr	r3, [pc, #136]	; (8009c80 <_svfiprintf_r+0x1f0>)
 8009bf6:	bb1b      	cbnz	r3, 8009c40 <_svfiprintf_r+0x1b0>
 8009bf8:	9b03      	ldr	r3, [sp, #12]
 8009bfa:	3307      	adds	r3, #7
 8009bfc:	f023 0307 	bic.w	r3, r3, #7
 8009c00:	3308      	adds	r3, #8
 8009c02:	9303      	str	r3, [sp, #12]
 8009c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c06:	4433      	add	r3, r6
 8009c08:	9309      	str	r3, [sp, #36]	; 0x24
 8009c0a:	e768      	b.n	8009ade <_svfiprintf_r+0x4e>
 8009c0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c10:	460c      	mov	r4, r1
 8009c12:	2001      	movs	r0, #1
 8009c14:	e7a6      	b.n	8009b64 <_svfiprintf_r+0xd4>
 8009c16:	2300      	movs	r3, #0
 8009c18:	3401      	adds	r4, #1
 8009c1a:	9305      	str	r3, [sp, #20]
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	f04f 0c0a 	mov.w	ip, #10
 8009c22:	4620      	mov	r0, r4
 8009c24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c28:	3a30      	subs	r2, #48	; 0x30
 8009c2a:	2a09      	cmp	r2, #9
 8009c2c:	d903      	bls.n	8009c36 <_svfiprintf_r+0x1a6>
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d0c6      	beq.n	8009bc0 <_svfiprintf_r+0x130>
 8009c32:	9105      	str	r1, [sp, #20]
 8009c34:	e7c4      	b.n	8009bc0 <_svfiprintf_r+0x130>
 8009c36:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	e7f0      	b.n	8009c22 <_svfiprintf_r+0x192>
 8009c40:	ab03      	add	r3, sp, #12
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	462a      	mov	r2, r5
 8009c46:	4b0f      	ldr	r3, [pc, #60]	; (8009c84 <_svfiprintf_r+0x1f4>)
 8009c48:	a904      	add	r1, sp, #16
 8009c4a:	4638      	mov	r0, r7
 8009c4c:	f7fd fc88 	bl	8007560 <_printf_float>
 8009c50:	1c42      	adds	r2, r0, #1
 8009c52:	4606      	mov	r6, r0
 8009c54:	d1d6      	bne.n	8009c04 <_svfiprintf_r+0x174>
 8009c56:	89ab      	ldrh	r3, [r5, #12]
 8009c58:	065b      	lsls	r3, r3, #25
 8009c5a:	f53f af2d 	bmi.w	8009ab8 <_svfiprintf_r+0x28>
 8009c5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c60:	b01d      	add	sp, #116	; 0x74
 8009c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c66:	ab03      	add	r3, sp, #12
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	462a      	mov	r2, r5
 8009c6c:	4b05      	ldr	r3, [pc, #20]	; (8009c84 <_svfiprintf_r+0x1f4>)
 8009c6e:	a904      	add	r1, sp, #16
 8009c70:	4638      	mov	r0, r7
 8009c72:	f7fd ff19 	bl	8007aa8 <_printf_i>
 8009c76:	e7eb      	b.n	8009c50 <_svfiprintf_r+0x1c0>
 8009c78:	0800a6fc 	.word	0x0800a6fc
 8009c7c:	0800a706 	.word	0x0800a706
 8009c80:	08007561 	.word	0x08007561
 8009c84:	080099dd 	.word	0x080099dd
 8009c88:	0800a702 	.word	0x0800a702

08009c8c <__sfputc_r>:
 8009c8c:	6893      	ldr	r3, [r2, #8]
 8009c8e:	3b01      	subs	r3, #1
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	b410      	push	{r4}
 8009c94:	6093      	str	r3, [r2, #8]
 8009c96:	da08      	bge.n	8009caa <__sfputc_r+0x1e>
 8009c98:	6994      	ldr	r4, [r2, #24]
 8009c9a:	42a3      	cmp	r3, r4
 8009c9c:	db01      	blt.n	8009ca2 <__sfputc_r+0x16>
 8009c9e:	290a      	cmp	r1, #10
 8009ca0:	d103      	bne.n	8009caa <__sfputc_r+0x1e>
 8009ca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ca6:	f7fe ba7e 	b.w	80081a6 <__swbuf_r>
 8009caa:	6813      	ldr	r3, [r2, #0]
 8009cac:	1c58      	adds	r0, r3, #1
 8009cae:	6010      	str	r0, [r2, #0]
 8009cb0:	7019      	strb	r1, [r3, #0]
 8009cb2:	4608      	mov	r0, r1
 8009cb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <__sfputs_r>:
 8009cba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cbc:	4606      	mov	r6, r0
 8009cbe:	460f      	mov	r7, r1
 8009cc0:	4614      	mov	r4, r2
 8009cc2:	18d5      	adds	r5, r2, r3
 8009cc4:	42ac      	cmp	r4, r5
 8009cc6:	d101      	bne.n	8009ccc <__sfputs_r+0x12>
 8009cc8:	2000      	movs	r0, #0
 8009cca:	e007      	b.n	8009cdc <__sfputs_r+0x22>
 8009ccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cd0:	463a      	mov	r2, r7
 8009cd2:	4630      	mov	r0, r6
 8009cd4:	f7ff ffda 	bl	8009c8c <__sfputc_r>
 8009cd8:	1c43      	adds	r3, r0, #1
 8009cda:	d1f3      	bne.n	8009cc4 <__sfputs_r+0xa>
 8009cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ce0 <_vfiprintf_r>:
 8009ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce4:	460d      	mov	r5, r1
 8009ce6:	b09d      	sub	sp, #116	; 0x74
 8009ce8:	4614      	mov	r4, r2
 8009cea:	4698      	mov	r8, r3
 8009cec:	4606      	mov	r6, r0
 8009cee:	b118      	cbz	r0, 8009cf8 <_vfiprintf_r+0x18>
 8009cf0:	6a03      	ldr	r3, [r0, #32]
 8009cf2:	b90b      	cbnz	r3, 8009cf8 <_vfiprintf_r+0x18>
 8009cf4:	f7fe f948 	bl	8007f88 <__sinit>
 8009cf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cfa:	07d9      	lsls	r1, r3, #31
 8009cfc:	d405      	bmi.n	8009d0a <_vfiprintf_r+0x2a>
 8009cfe:	89ab      	ldrh	r3, [r5, #12]
 8009d00:	059a      	lsls	r2, r3, #22
 8009d02:	d402      	bmi.n	8009d0a <_vfiprintf_r+0x2a>
 8009d04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d06:	f7fe fb60 	bl	80083ca <__retarget_lock_acquire_recursive>
 8009d0a:	89ab      	ldrh	r3, [r5, #12]
 8009d0c:	071b      	lsls	r3, r3, #28
 8009d0e:	d501      	bpl.n	8009d14 <_vfiprintf_r+0x34>
 8009d10:	692b      	ldr	r3, [r5, #16]
 8009d12:	b99b      	cbnz	r3, 8009d3c <_vfiprintf_r+0x5c>
 8009d14:	4629      	mov	r1, r5
 8009d16:	4630      	mov	r0, r6
 8009d18:	f7fe fa82 	bl	8008220 <__swsetup_r>
 8009d1c:	b170      	cbz	r0, 8009d3c <_vfiprintf_r+0x5c>
 8009d1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d20:	07dc      	lsls	r4, r3, #31
 8009d22:	d504      	bpl.n	8009d2e <_vfiprintf_r+0x4e>
 8009d24:	f04f 30ff 	mov.w	r0, #4294967295
 8009d28:	b01d      	add	sp, #116	; 0x74
 8009d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d2e:	89ab      	ldrh	r3, [r5, #12]
 8009d30:	0598      	lsls	r0, r3, #22
 8009d32:	d4f7      	bmi.n	8009d24 <_vfiprintf_r+0x44>
 8009d34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d36:	f7fe fb49 	bl	80083cc <__retarget_lock_release_recursive>
 8009d3a:	e7f3      	b.n	8009d24 <_vfiprintf_r+0x44>
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d40:	2320      	movs	r3, #32
 8009d42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d46:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d4a:	2330      	movs	r3, #48	; 0x30
 8009d4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009f00 <_vfiprintf_r+0x220>
 8009d50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d54:	f04f 0901 	mov.w	r9, #1
 8009d58:	4623      	mov	r3, r4
 8009d5a:	469a      	mov	sl, r3
 8009d5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d60:	b10a      	cbz	r2, 8009d66 <_vfiprintf_r+0x86>
 8009d62:	2a25      	cmp	r2, #37	; 0x25
 8009d64:	d1f9      	bne.n	8009d5a <_vfiprintf_r+0x7a>
 8009d66:	ebba 0b04 	subs.w	fp, sl, r4
 8009d6a:	d00b      	beq.n	8009d84 <_vfiprintf_r+0xa4>
 8009d6c:	465b      	mov	r3, fp
 8009d6e:	4622      	mov	r2, r4
 8009d70:	4629      	mov	r1, r5
 8009d72:	4630      	mov	r0, r6
 8009d74:	f7ff ffa1 	bl	8009cba <__sfputs_r>
 8009d78:	3001      	adds	r0, #1
 8009d7a:	f000 80a9 	beq.w	8009ed0 <_vfiprintf_r+0x1f0>
 8009d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d80:	445a      	add	r2, fp
 8009d82:	9209      	str	r2, [sp, #36]	; 0x24
 8009d84:	f89a 3000 	ldrb.w	r3, [sl]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	f000 80a1 	beq.w	8009ed0 <_vfiprintf_r+0x1f0>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	f04f 32ff 	mov.w	r2, #4294967295
 8009d94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d98:	f10a 0a01 	add.w	sl, sl, #1
 8009d9c:	9304      	str	r3, [sp, #16]
 8009d9e:	9307      	str	r3, [sp, #28]
 8009da0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009da4:	931a      	str	r3, [sp, #104]	; 0x68
 8009da6:	4654      	mov	r4, sl
 8009da8:	2205      	movs	r2, #5
 8009daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dae:	4854      	ldr	r0, [pc, #336]	; (8009f00 <_vfiprintf_r+0x220>)
 8009db0:	f7f6 fa16 	bl	80001e0 <memchr>
 8009db4:	9a04      	ldr	r2, [sp, #16]
 8009db6:	b9d8      	cbnz	r0, 8009df0 <_vfiprintf_r+0x110>
 8009db8:	06d1      	lsls	r1, r2, #27
 8009dba:	bf44      	itt	mi
 8009dbc:	2320      	movmi	r3, #32
 8009dbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dc2:	0713      	lsls	r3, r2, #28
 8009dc4:	bf44      	itt	mi
 8009dc6:	232b      	movmi	r3, #43	; 0x2b
 8009dc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dcc:	f89a 3000 	ldrb.w	r3, [sl]
 8009dd0:	2b2a      	cmp	r3, #42	; 0x2a
 8009dd2:	d015      	beq.n	8009e00 <_vfiprintf_r+0x120>
 8009dd4:	9a07      	ldr	r2, [sp, #28]
 8009dd6:	4654      	mov	r4, sl
 8009dd8:	2000      	movs	r0, #0
 8009dda:	f04f 0c0a 	mov.w	ip, #10
 8009dde:	4621      	mov	r1, r4
 8009de0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009de4:	3b30      	subs	r3, #48	; 0x30
 8009de6:	2b09      	cmp	r3, #9
 8009de8:	d94d      	bls.n	8009e86 <_vfiprintf_r+0x1a6>
 8009dea:	b1b0      	cbz	r0, 8009e1a <_vfiprintf_r+0x13a>
 8009dec:	9207      	str	r2, [sp, #28]
 8009dee:	e014      	b.n	8009e1a <_vfiprintf_r+0x13a>
 8009df0:	eba0 0308 	sub.w	r3, r0, r8
 8009df4:	fa09 f303 	lsl.w	r3, r9, r3
 8009df8:	4313      	orrs	r3, r2
 8009dfa:	9304      	str	r3, [sp, #16]
 8009dfc:	46a2      	mov	sl, r4
 8009dfe:	e7d2      	b.n	8009da6 <_vfiprintf_r+0xc6>
 8009e00:	9b03      	ldr	r3, [sp, #12]
 8009e02:	1d19      	adds	r1, r3, #4
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	9103      	str	r1, [sp, #12]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	bfbb      	ittet	lt
 8009e0c:	425b      	neglt	r3, r3
 8009e0e:	f042 0202 	orrlt.w	r2, r2, #2
 8009e12:	9307      	strge	r3, [sp, #28]
 8009e14:	9307      	strlt	r3, [sp, #28]
 8009e16:	bfb8      	it	lt
 8009e18:	9204      	strlt	r2, [sp, #16]
 8009e1a:	7823      	ldrb	r3, [r4, #0]
 8009e1c:	2b2e      	cmp	r3, #46	; 0x2e
 8009e1e:	d10c      	bne.n	8009e3a <_vfiprintf_r+0x15a>
 8009e20:	7863      	ldrb	r3, [r4, #1]
 8009e22:	2b2a      	cmp	r3, #42	; 0x2a
 8009e24:	d134      	bne.n	8009e90 <_vfiprintf_r+0x1b0>
 8009e26:	9b03      	ldr	r3, [sp, #12]
 8009e28:	1d1a      	adds	r2, r3, #4
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	9203      	str	r2, [sp, #12]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	bfb8      	it	lt
 8009e32:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e36:	3402      	adds	r4, #2
 8009e38:	9305      	str	r3, [sp, #20]
 8009e3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009f10 <_vfiprintf_r+0x230>
 8009e3e:	7821      	ldrb	r1, [r4, #0]
 8009e40:	2203      	movs	r2, #3
 8009e42:	4650      	mov	r0, sl
 8009e44:	f7f6 f9cc 	bl	80001e0 <memchr>
 8009e48:	b138      	cbz	r0, 8009e5a <_vfiprintf_r+0x17a>
 8009e4a:	9b04      	ldr	r3, [sp, #16]
 8009e4c:	eba0 000a 	sub.w	r0, r0, sl
 8009e50:	2240      	movs	r2, #64	; 0x40
 8009e52:	4082      	lsls	r2, r0
 8009e54:	4313      	orrs	r3, r2
 8009e56:	3401      	adds	r4, #1
 8009e58:	9304      	str	r3, [sp, #16]
 8009e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e5e:	4829      	ldr	r0, [pc, #164]	; (8009f04 <_vfiprintf_r+0x224>)
 8009e60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e64:	2206      	movs	r2, #6
 8009e66:	f7f6 f9bb 	bl	80001e0 <memchr>
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	d03f      	beq.n	8009eee <_vfiprintf_r+0x20e>
 8009e6e:	4b26      	ldr	r3, [pc, #152]	; (8009f08 <_vfiprintf_r+0x228>)
 8009e70:	bb1b      	cbnz	r3, 8009eba <_vfiprintf_r+0x1da>
 8009e72:	9b03      	ldr	r3, [sp, #12]
 8009e74:	3307      	adds	r3, #7
 8009e76:	f023 0307 	bic.w	r3, r3, #7
 8009e7a:	3308      	adds	r3, #8
 8009e7c:	9303      	str	r3, [sp, #12]
 8009e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e80:	443b      	add	r3, r7
 8009e82:	9309      	str	r3, [sp, #36]	; 0x24
 8009e84:	e768      	b.n	8009d58 <_vfiprintf_r+0x78>
 8009e86:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e8a:	460c      	mov	r4, r1
 8009e8c:	2001      	movs	r0, #1
 8009e8e:	e7a6      	b.n	8009dde <_vfiprintf_r+0xfe>
 8009e90:	2300      	movs	r3, #0
 8009e92:	3401      	adds	r4, #1
 8009e94:	9305      	str	r3, [sp, #20]
 8009e96:	4619      	mov	r1, r3
 8009e98:	f04f 0c0a 	mov.w	ip, #10
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ea2:	3a30      	subs	r2, #48	; 0x30
 8009ea4:	2a09      	cmp	r2, #9
 8009ea6:	d903      	bls.n	8009eb0 <_vfiprintf_r+0x1d0>
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d0c6      	beq.n	8009e3a <_vfiprintf_r+0x15a>
 8009eac:	9105      	str	r1, [sp, #20]
 8009eae:	e7c4      	b.n	8009e3a <_vfiprintf_r+0x15a>
 8009eb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009eb4:	4604      	mov	r4, r0
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e7f0      	b.n	8009e9c <_vfiprintf_r+0x1bc>
 8009eba:	ab03      	add	r3, sp, #12
 8009ebc:	9300      	str	r3, [sp, #0]
 8009ebe:	462a      	mov	r2, r5
 8009ec0:	4b12      	ldr	r3, [pc, #72]	; (8009f0c <_vfiprintf_r+0x22c>)
 8009ec2:	a904      	add	r1, sp, #16
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	f7fd fb4b 	bl	8007560 <_printf_float>
 8009eca:	4607      	mov	r7, r0
 8009ecc:	1c78      	adds	r0, r7, #1
 8009ece:	d1d6      	bne.n	8009e7e <_vfiprintf_r+0x19e>
 8009ed0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ed2:	07d9      	lsls	r1, r3, #31
 8009ed4:	d405      	bmi.n	8009ee2 <_vfiprintf_r+0x202>
 8009ed6:	89ab      	ldrh	r3, [r5, #12]
 8009ed8:	059a      	lsls	r2, r3, #22
 8009eda:	d402      	bmi.n	8009ee2 <_vfiprintf_r+0x202>
 8009edc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ede:	f7fe fa75 	bl	80083cc <__retarget_lock_release_recursive>
 8009ee2:	89ab      	ldrh	r3, [r5, #12]
 8009ee4:	065b      	lsls	r3, r3, #25
 8009ee6:	f53f af1d 	bmi.w	8009d24 <_vfiprintf_r+0x44>
 8009eea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009eec:	e71c      	b.n	8009d28 <_vfiprintf_r+0x48>
 8009eee:	ab03      	add	r3, sp, #12
 8009ef0:	9300      	str	r3, [sp, #0]
 8009ef2:	462a      	mov	r2, r5
 8009ef4:	4b05      	ldr	r3, [pc, #20]	; (8009f0c <_vfiprintf_r+0x22c>)
 8009ef6:	a904      	add	r1, sp, #16
 8009ef8:	4630      	mov	r0, r6
 8009efa:	f7fd fdd5 	bl	8007aa8 <_printf_i>
 8009efe:	e7e4      	b.n	8009eca <_vfiprintf_r+0x1ea>
 8009f00:	0800a6fc 	.word	0x0800a6fc
 8009f04:	0800a706 	.word	0x0800a706
 8009f08:	08007561 	.word	0x08007561
 8009f0c:	08009cbb 	.word	0x08009cbb
 8009f10:	0800a702 	.word	0x0800a702

08009f14 <__swhatbuf_r>:
 8009f14:	b570      	push	{r4, r5, r6, lr}
 8009f16:	460c      	mov	r4, r1
 8009f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f1c:	2900      	cmp	r1, #0
 8009f1e:	b096      	sub	sp, #88	; 0x58
 8009f20:	4615      	mov	r5, r2
 8009f22:	461e      	mov	r6, r3
 8009f24:	da0d      	bge.n	8009f42 <__swhatbuf_r+0x2e>
 8009f26:	89a3      	ldrh	r3, [r4, #12]
 8009f28:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009f2c:	f04f 0100 	mov.w	r1, #0
 8009f30:	bf0c      	ite	eq
 8009f32:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009f36:	2340      	movne	r3, #64	; 0x40
 8009f38:	2000      	movs	r0, #0
 8009f3a:	6031      	str	r1, [r6, #0]
 8009f3c:	602b      	str	r3, [r5, #0]
 8009f3e:	b016      	add	sp, #88	; 0x58
 8009f40:	bd70      	pop	{r4, r5, r6, pc}
 8009f42:	466a      	mov	r2, sp
 8009f44:	f000 f896 	bl	800a074 <_fstat_r>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	dbec      	blt.n	8009f26 <__swhatbuf_r+0x12>
 8009f4c:	9901      	ldr	r1, [sp, #4]
 8009f4e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009f52:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009f56:	4259      	negs	r1, r3
 8009f58:	4159      	adcs	r1, r3
 8009f5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f5e:	e7eb      	b.n	8009f38 <__swhatbuf_r+0x24>

08009f60 <__smakebuf_r>:
 8009f60:	898b      	ldrh	r3, [r1, #12]
 8009f62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f64:	079d      	lsls	r5, r3, #30
 8009f66:	4606      	mov	r6, r0
 8009f68:	460c      	mov	r4, r1
 8009f6a:	d507      	bpl.n	8009f7c <__smakebuf_r+0x1c>
 8009f6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f70:	6023      	str	r3, [r4, #0]
 8009f72:	6123      	str	r3, [r4, #16]
 8009f74:	2301      	movs	r3, #1
 8009f76:	6163      	str	r3, [r4, #20]
 8009f78:	b002      	add	sp, #8
 8009f7a:	bd70      	pop	{r4, r5, r6, pc}
 8009f7c:	ab01      	add	r3, sp, #4
 8009f7e:	466a      	mov	r2, sp
 8009f80:	f7ff ffc8 	bl	8009f14 <__swhatbuf_r>
 8009f84:	9900      	ldr	r1, [sp, #0]
 8009f86:	4605      	mov	r5, r0
 8009f88:	4630      	mov	r0, r6
 8009f8a:	f7ff f91f 	bl	80091cc <_malloc_r>
 8009f8e:	b948      	cbnz	r0, 8009fa4 <__smakebuf_r+0x44>
 8009f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f94:	059a      	lsls	r2, r3, #22
 8009f96:	d4ef      	bmi.n	8009f78 <__smakebuf_r+0x18>
 8009f98:	f023 0303 	bic.w	r3, r3, #3
 8009f9c:	f043 0302 	orr.w	r3, r3, #2
 8009fa0:	81a3      	strh	r3, [r4, #12]
 8009fa2:	e7e3      	b.n	8009f6c <__smakebuf_r+0xc>
 8009fa4:	89a3      	ldrh	r3, [r4, #12]
 8009fa6:	6020      	str	r0, [r4, #0]
 8009fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fac:	81a3      	strh	r3, [r4, #12]
 8009fae:	9b00      	ldr	r3, [sp, #0]
 8009fb0:	6163      	str	r3, [r4, #20]
 8009fb2:	9b01      	ldr	r3, [sp, #4]
 8009fb4:	6120      	str	r0, [r4, #16]
 8009fb6:	b15b      	cbz	r3, 8009fd0 <__smakebuf_r+0x70>
 8009fb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	f000 f86b 	bl	800a098 <_isatty_r>
 8009fc2:	b128      	cbz	r0, 8009fd0 <__smakebuf_r+0x70>
 8009fc4:	89a3      	ldrh	r3, [r4, #12]
 8009fc6:	f023 0303 	bic.w	r3, r3, #3
 8009fca:	f043 0301 	orr.w	r3, r3, #1
 8009fce:	81a3      	strh	r3, [r4, #12]
 8009fd0:	89a3      	ldrh	r3, [r4, #12]
 8009fd2:	431d      	orrs	r5, r3
 8009fd4:	81a5      	strh	r5, [r4, #12]
 8009fd6:	e7cf      	b.n	8009f78 <__smakebuf_r+0x18>

08009fd8 <_putc_r>:
 8009fd8:	b570      	push	{r4, r5, r6, lr}
 8009fda:	460d      	mov	r5, r1
 8009fdc:	4614      	mov	r4, r2
 8009fde:	4606      	mov	r6, r0
 8009fe0:	b118      	cbz	r0, 8009fea <_putc_r+0x12>
 8009fe2:	6a03      	ldr	r3, [r0, #32]
 8009fe4:	b90b      	cbnz	r3, 8009fea <_putc_r+0x12>
 8009fe6:	f7fd ffcf 	bl	8007f88 <__sinit>
 8009fea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009fec:	07d8      	lsls	r0, r3, #31
 8009fee:	d405      	bmi.n	8009ffc <_putc_r+0x24>
 8009ff0:	89a3      	ldrh	r3, [r4, #12]
 8009ff2:	0599      	lsls	r1, r3, #22
 8009ff4:	d402      	bmi.n	8009ffc <_putc_r+0x24>
 8009ff6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ff8:	f7fe f9e7 	bl	80083ca <__retarget_lock_acquire_recursive>
 8009ffc:	68a3      	ldr	r3, [r4, #8]
 8009ffe:	3b01      	subs	r3, #1
 800a000:	2b00      	cmp	r3, #0
 800a002:	60a3      	str	r3, [r4, #8]
 800a004:	da05      	bge.n	800a012 <_putc_r+0x3a>
 800a006:	69a2      	ldr	r2, [r4, #24]
 800a008:	4293      	cmp	r3, r2
 800a00a:	db12      	blt.n	800a032 <_putc_r+0x5a>
 800a00c:	b2eb      	uxtb	r3, r5
 800a00e:	2b0a      	cmp	r3, #10
 800a010:	d00f      	beq.n	800a032 <_putc_r+0x5a>
 800a012:	6823      	ldr	r3, [r4, #0]
 800a014:	1c5a      	adds	r2, r3, #1
 800a016:	6022      	str	r2, [r4, #0]
 800a018:	701d      	strb	r5, [r3, #0]
 800a01a:	b2ed      	uxtb	r5, r5
 800a01c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a01e:	07da      	lsls	r2, r3, #31
 800a020:	d405      	bmi.n	800a02e <_putc_r+0x56>
 800a022:	89a3      	ldrh	r3, [r4, #12]
 800a024:	059b      	lsls	r3, r3, #22
 800a026:	d402      	bmi.n	800a02e <_putc_r+0x56>
 800a028:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a02a:	f7fe f9cf 	bl	80083cc <__retarget_lock_release_recursive>
 800a02e:	4628      	mov	r0, r5
 800a030:	bd70      	pop	{r4, r5, r6, pc}
 800a032:	4629      	mov	r1, r5
 800a034:	4622      	mov	r2, r4
 800a036:	4630      	mov	r0, r6
 800a038:	f7fe f8b5 	bl	80081a6 <__swbuf_r>
 800a03c:	4605      	mov	r5, r0
 800a03e:	e7ed      	b.n	800a01c <_putc_r+0x44>

0800a040 <memmove>:
 800a040:	4288      	cmp	r0, r1
 800a042:	b510      	push	{r4, lr}
 800a044:	eb01 0402 	add.w	r4, r1, r2
 800a048:	d902      	bls.n	800a050 <memmove+0x10>
 800a04a:	4284      	cmp	r4, r0
 800a04c:	4623      	mov	r3, r4
 800a04e:	d807      	bhi.n	800a060 <memmove+0x20>
 800a050:	1e43      	subs	r3, r0, #1
 800a052:	42a1      	cmp	r1, r4
 800a054:	d008      	beq.n	800a068 <memmove+0x28>
 800a056:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a05a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a05e:	e7f8      	b.n	800a052 <memmove+0x12>
 800a060:	4402      	add	r2, r0
 800a062:	4601      	mov	r1, r0
 800a064:	428a      	cmp	r2, r1
 800a066:	d100      	bne.n	800a06a <memmove+0x2a>
 800a068:	bd10      	pop	{r4, pc}
 800a06a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a06e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a072:	e7f7      	b.n	800a064 <memmove+0x24>

0800a074 <_fstat_r>:
 800a074:	b538      	push	{r3, r4, r5, lr}
 800a076:	4d07      	ldr	r5, [pc, #28]	; (800a094 <_fstat_r+0x20>)
 800a078:	2300      	movs	r3, #0
 800a07a:	4604      	mov	r4, r0
 800a07c:	4608      	mov	r0, r1
 800a07e:	4611      	mov	r1, r2
 800a080:	602b      	str	r3, [r5, #0]
 800a082:	f7f9 fd76 	bl	8003b72 <_fstat>
 800a086:	1c43      	adds	r3, r0, #1
 800a088:	d102      	bne.n	800a090 <_fstat_r+0x1c>
 800a08a:	682b      	ldr	r3, [r5, #0]
 800a08c:	b103      	cbz	r3, 800a090 <_fstat_r+0x1c>
 800a08e:	6023      	str	r3, [r4, #0]
 800a090:	bd38      	pop	{r3, r4, r5, pc}
 800a092:	bf00      	nop
 800a094:	20000854 	.word	0x20000854

0800a098 <_isatty_r>:
 800a098:	b538      	push	{r3, r4, r5, lr}
 800a09a:	4d06      	ldr	r5, [pc, #24]	; (800a0b4 <_isatty_r+0x1c>)
 800a09c:	2300      	movs	r3, #0
 800a09e:	4604      	mov	r4, r0
 800a0a0:	4608      	mov	r0, r1
 800a0a2:	602b      	str	r3, [r5, #0]
 800a0a4:	f7f9 fd75 	bl	8003b92 <_isatty>
 800a0a8:	1c43      	adds	r3, r0, #1
 800a0aa:	d102      	bne.n	800a0b2 <_isatty_r+0x1a>
 800a0ac:	682b      	ldr	r3, [r5, #0]
 800a0ae:	b103      	cbz	r3, 800a0b2 <_isatty_r+0x1a>
 800a0b0:	6023      	str	r3, [r4, #0]
 800a0b2:	bd38      	pop	{r3, r4, r5, pc}
 800a0b4:	20000854 	.word	0x20000854

0800a0b8 <_sbrk_r>:
 800a0b8:	b538      	push	{r3, r4, r5, lr}
 800a0ba:	4d06      	ldr	r5, [pc, #24]	; (800a0d4 <_sbrk_r+0x1c>)
 800a0bc:	2300      	movs	r3, #0
 800a0be:	4604      	mov	r4, r0
 800a0c0:	4608      	mov	r0, r1
 800a0c2:	602b      	str	r3, [r5, #0]
 800a0c4:	f7f9 fd7e 	bl	8003bc4 <_sbrk>
 800a0c8:	1c43      	adds	r3, r0, #1
 800a0ca:	d102      	bne.n	800a0d2 <_sbrk_r+0x1a>
 800a0cc:	682b      	ldr	r3, [r5, #0]
 800a0ce:	b103      	cbz	r3, 800a0d2 <_sbrk_r+0x1a>
 800a0d0:	6023      	str	r3, [r4, #0]
 800a0d2:	bd38      	pop	{r3, r4, r5, pc}
 800a0d4:	20000854 	.word	0x20000854

0800a0d8 <__assert_func>:
 800a0d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0da:	4614      	mov	r4, r2
 800a0dc:	461a      	mov	r2, r3
 800a0de:	4b09      	ldr	r3, [pc, #36]	; (800a104 <__assert_func+0x2c>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4605      	mov	r5, r0
 800a0e4:	68d8      	ldr	r0, [r3, #12]
 800a0e6:	b14c      	cbz	r4, 800a0fc <__assert_func+0x24>
 800a0e8:	4b07      	ldr	r3, [pc, #28]	; (800a108 <__assert_func+0x30>)
 800a0ea:	9100      	str	r1, [sp, #0]
 800a0ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0f0:	4906      	ldr	r1, [pc, #24]	; (800a10c <__assert_func+0x34>)
 800a0f2:	462b      	mov	r3, r5
 800a0f4:	f000 f872 	bl	800a1dc <fiprintf>
 800a0f8:	f000 f882 	bl	800a200 <abort>
 800a0fc:	4b04      	ldr	r3, [pc, #16]	; (800a110 <__assert_func+0x38>)
 800a0fe:	461c      	mov	r4, r3
 800a100:	e7f3      	b.n	800a0ea <__assert_func+0x12>
 800a102:	bf00      	nop
 800a104:	20000084 	.word	0x20000084
 800a108:	0800a717 	.word	0x0800a717
 800a10c:	0800a724 	.word	0x0800a724
 800a110:	0800a752 	.word	0x0800a752

0800a114 <_calloc_r>:
 800a114:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a116:	fba1 2402 	umull	r2, r4, r1, r2
 800a11a:	b94c      	cbnz	r4, 800a130 <_calloc_r+0x1c>
 800a11c:	4611      	mov	r1, r2
 800a11e:	9201      	str	r2, [sp, #4]
 800a120:	f7ff f854 	bl	80091cc <_malloc_r>
 800a124:	9a01      	ldr	r2, [sp, #4]
 800a126:	4605      	mov	r5, r0
 800a128:	b930      	cbnz	r0, 800a138 <_calloc_r+0x24>
 800a12a:	4628      	mov	r0, r5
 800a12c:	b003      	add	sp, #12
 800a12e:	bd30      	pop	{r4, r5, pc}
 800a130:	220c      	movs	r2, #12
 800a132:	6002      	str	r2, [r0, #0]
 800a134:	2500      	movs	r5, #0
 800a136:	e7f8      	b.n	800a12a <_calloc_r+0x16>
 800a138:	4621      	mov	r1, r4
 800a13a:	f7fe f8c9 	bl	80082d0 <memset>
 800a13e:	e7f4      	b.n	800a12a <_calloc_r+0x16>

0800a140 <__ascii_mbtowc>:
 800a140:	b082      	sub	sp, #8
 800a142:	b901      	cbnz	r1, 800a146 <__ascii_mbtowc+0x6>
 800a144:	a901      	add	r1, sp, #4
 800a146:	b142      	cbz	r2, 800a15a <__ascii_mbtowc+0x1a>
 800a148:	b14b      	cbz	r3, 800a15e <__ascii_mbtowc+0x1e>
 800a14a:	7813      	ldrb	r3, [r2, #0]
 800a14c:	600b      	str	r3, [r1, #0]
 800a14e:	7812      	ldrb	r2, [r2, #0]
 800a150:	1e10      	subs	r0, r2, #0
 800a152:	bf18      	it	ne
 800a154:	2001      	movne	r0, #1
 800a156:	b002      	add	sp, #8
 800a158:	4770      	bx	lr
 800a15a:	4610      	mov	r0, r2
 800a15c:	e7fb      	b.n	800a156 <__ascii_mbtowc+0x16>
 800a15e:	f06f 0001 	mvn.w	r0, #1
 800a162:	e7f8      	b.n	800a156 <__ascii_mbtowc+0x16>

0800a164 <_realloc_r>:
 800a164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a168:	4680      	mov	r8, r0
 800a16a:	4614      	mov	r4, r2
 800a16c:	460e      	mov	r6, r1
 800a16e:	b921      	cbnz	r1, 800a17a <_realloc_r+0x16>
 800a170:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a174:	4611      	mov	r1, r2
 800a176:	f7ff b829 	b.w	80091cc <_malloc_r>
 800a17a:	b92a      	cbnz	r2, 800a188 <_realloc_r+0x24>
 800a17c:	f7fe ffb2 	bl	80090e4 <_free_r>
 800a180:	4625      	mov	r5, r4
 800a182:	4628      	mov	r0, r5
 800a184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a188:	f000 f841 	bl	800a20e <_malloc_usable_size_r>
 800a18c:	4284      	cmp	r4, r0
 800a18e:	4607      	mov	r7, r0
 800a190:	d802      	bhi.n	800a198 <_realloc_r+0x34>
 800a192:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a196:	d812      	bhi.n	800a1be <_realloc_r+0x5a>
 800a198:	4621      	mov	r1, r4
 800a19a:	4640      	mov	r0, r8
 800a19c:	f7ff f816 	bl	80091cc <_malloc_r>
 800a1a0:	4605      	mov	r5, r0
 800a1a2:	2800      	cmp	r0, #0
 800a1a4:	d0ed      	beq.n	800a182 <_realloc_r+0x1e>
 800a1a6:	42bc      	cmp	r4, r7
 800a1a8:	4622      	mov	r2, r4
 800a1aa:	4631      	mov	r1, r6
 800a1ac:	bf28      	it	cs
 800a1ae:	463a      	movcs	r2, r7
 800a1b0:	f7fe f90d 	bl	80083ce <memcpy>
 800a1b4:	4631      	mov	r1, r6
 800a1b6:	4640      	mov	r0, r8
 800a1b8:	f7fe ff94 	bl	80090e4 <_free_r>
 800a1bc:	e7e1      	b.n	800a182 <_realloc_r+0x1e>
 800a1be:	4635      	mov	r5, r6
 800a1c0:	e7df      	b.n	800a182 <_realloc_r+0x1e>

0800a1c2 <__ascii_wctomb>:
 800a1c2:	b149      	cbz	r1, 800a1d8 <__ascii_wctomb+0x16>
 800a1c4:	2aff      	cmp	r2, #255	; 0xff
 800a1c6:	bf85      	ittet	hi
 800a1c8:	238a      	movhi	r3, #138	; 0x8a
 800a1ca:	6003      	strhi	r3, [r0, #0]
 800a1cc:	700a      	strbls	r2, [r1, #0]
 800a1ce:	f04f 30ff 	movhi.w	r0, #4294967295
 800a1d2:	bf98      	it	ls
 800a1d4:	2001      	movls	r0, #1
 800a1d6:	4770      	bx	lr
 800a1d8:	4608      	mov	r0, r1
 800a1da:	4770      	bx	lr

0800a1dc <fiprintf>:
 800a1dc:	b40e      	push	{r1, r2, r3}
 800a1de:	b503      	push	{r0, r1, lr}
 800a1e0:	4601      	mov	r1, r0
 800a1e2:	ab03      	add	r3, sp, #12
 800a1e4:	4805      	ldr	r0, [pc, #20]	; (800a1fc <fiprintf+0x20>)
 800a1e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ea:	6800      	ldr	r0, [r0, #0]
 800a1ec:	9301      	str	r3, [sp, #4]
 800a1ee:	f7ff fd77 	bl	8009ce0 <_vfiprintf_r>
 800a1f2:	b002      	add	sp, #8
 800a1f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1f8:	b003      	add	sp, #12
 800a1fa:	4770      	bx	lr
 800a1fc:	20000084 	.word	0x20000084

0800a200 <abort>:
 800a200:	b508      	push	{r3, lr}
 800a202:	2006      	movs	r0, #6
 800a204:	f000 f834 	bl	800a270 <raise>
 800a208:	2001      	movs	r0, #1
 800a20a:	f7f9 fc63 	bl	8003ad4 <_exit>

0800a20e <_malloc_usable_size_r>:
 800a20e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a212:	1f18      	subs	r0, r3, #4
 800a214:	2b00      	cmp	r3, #0
 800a216:	bfbc      	itt	lt
 800a218:	580b      	ldrlt	r3, [r1, r0]
 800a21a:	18c0      	addlt	r0, r0, r3
 800a21c:	4770      	bx	lr

0800a21e <_raise_r>:
 800a21e:	291f      	cmp	r1, #31
 800a220:	b538      	push	{r3, r4, r5, lr}
 800a222:	4604      	mov	r4, r0
 800a224:	460d      	mov	r5, r1
 800a226:	d904      	bls.n	800a232 <_raise_r+0x14>
 800a228:	2316      	movs	r3, #22
 800a22a:	6003      	str	r3, [r0, #0]
 800a22c:	f04f 30ff 	mov.w	r0, #4294967295
 800a230:	bd38      	pop	{r3, r4, r5, pc}
 800a232:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a234:	b112      	cbz	r2, 800a23c <_raise_r+0x1e>
 800a236:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a23a:	b94b      	cbnz	r3, 800a250 <_raise_r+0x32>
 800a23c:	4620      	mov	r0, r4
 800a23e:	f000 f831 	bl	800a2a4 <_getpid_r>
 800a242:	462a      	mov	r2, r5
 800a244:	4601      	mov	r1, r0
 800a246:	4620      	mov	r0, r4
 800a248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a24c:	f000 b818 	b.w	800a280 <_kill_r>
 800a250:	2b01      	cmp	r3, #1
 800a252:	d00a      	beq.n	800a26a <_raise_r+0x4c>
 800a254:	1c59      	adds	r1, r3, #1
 800a256:	d103      	bne.n	800a260 <_raise_r+0x42>
 800a258:	2316      	movs	r3, #22
 800a25a:	6003      	str	r3, [r0, #0]
 800a25c:	2001      	movs	r0, #1
 800a25e:	e7e7      	b.n	800a230 <_raise_r+0x12>
 800a260:	2400      	movs	r4, #0
 800a262:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a266:	4628      	mov	r0, r5
 800a268:	4798      	blx	r3
 800a26a:	2000      	movs	r0, #0
 800a26c:	e7e0      	b.n	800a230 <_raise_r+0x12>
	...

0800a270 <raise>:
 800a270:	4b02      	ldr	r3, [pc, #8]	; (800a27c <raise+0xc>)
 800a272:	4601      	mov	r1, r0
 800a274:	6818      	ldr	r0, [r3, #0]
 800a276:	f7ff bfd2 	b.w	800a21e <_raise_r>
 800a27a:	bf00      	nop
 800a27c:	20000084 	.word	0x20000084

0800a280 <_kill_r>:
 800a280:	b538      	push	{r3, r4, r5, lr}
 800a282:	4d07      	ldr	r5, [pc, #28]	; (800a2a0 <_kill_r+0x20>)
 800a284:	2300      	movs	r3, #0
 800a286:	4604      	mov	r4, r0
 800a288:	4608      	mov	r0, r1
 800a28a:	4611      	mov	r1, r2
 800a28c:	602b      	str	r3, [r5, #0]
 800a28e:	f7f9 fc11 	bl	8003ab4 <_kill>
 800a292:	1c43      	adds	r3, r0, #1
 800a294:	d102      	bne.n	800a29c <_kill_r+0x1c>
 800a296:	682b      	ldr	r3, [r5, #0]
 800a298:	b103      	cbz	r3, 800a29c <_kill_r+0x1c>
 800a29a:	6023      	str	r3, [r4, #0]
 800a29c:	bd38      	pop	{r3, r4, r5, pc}
 800a29e:	bf00      	nop
 800a2a0:	20000854 	.word	0x20000854

0800a2a4 <_getpid_r>:
 800a2a4:	f7f9 bbfe 	b.w	8003aa4 <_getpid>

0800a2a8 <_init>:
 800a2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2aa:	bf00      	nop
 800a2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ae:	bc08      	pop	{r3}
 800a2b0:	469e      	mov	lr, r3
 800a2b2:	4770      	bx	lr

0800a2b4 <_fini>:
 800a2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2b6:	bf00      	nop
 800a2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ba:	bc08      	pop	{r3}
 800a2bc:	469e      	mov	lr, r3
 800a2be:	4770      	bx	lr
